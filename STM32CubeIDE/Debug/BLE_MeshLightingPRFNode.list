
BLE_MeshLightingPRFNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ce1c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .RamFunc      0000007c  0802cf5c  0802cf5c  0003cf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000073a0  0802cfd8  0802cfd8  0003cfd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08034378  08034378  00044378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08034380  08034380  00044380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08034384  08034384  00044384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000294  20000008  08034388  00050008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000049  2000029c  0803461c  0005029c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200002e8  08034665  000502e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00007cc0  200002fc  08034676  000502fc  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  20007fbc  08034676  00057fbc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000502f9  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00060000  2**2
                  ALLOC
 14 MB_MEM1       000001bc  20030028  20030028  00060028  2**2
                  ALLOC
 15 MB_MEM2       00000883  200301e4  200301e4  00060028  2**2
                  ALLOC
 16 .debug_info   000489f3  00000000  00000000  00050329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000991b  00000000  00000000  00098d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003ce8  00000000  00000000  000a2638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003998  00000000  00000000  000a6320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00039219  00000000  00000000  000a9cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004d6a4  00000000  00000000  000e2ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0011c683  00000000  00000000  00130575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  0024cbf8  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00011770  00000000  00000000  0024cc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002fc 	.word	0x200002fc
 800015c:	00000000 	.word	0x00000000
 8000160:	0802cf44 	.word	0x0802cf44

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000300 	.word	0x20000300
 800017c:	0802cf44 	.word	0x0802cf44

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f06:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000f0a:	4905      	ldr	r1, [pc, #20]	; (8000f20 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	58000800 	.word	0x58000800

08000f24 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f48:	68fb      	ldr	r3, [r7, #12]
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b085      	sub	sp, #20
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f62:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f76:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f80:	68fb      	ldr	r3, [r7, #12]
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000f92:	f006 ff97 	bl	8007ec4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000f96:	f006 ff9b 	bl	8007ed0 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000f9a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f9e:	f7ff ffad 	bl	8000efc <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000fa2:	f015 fbfb 	bl	801679c <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000fa6:	f000 f821 	bl	8000fec <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000faa:	f000 f8c3 	bl	8001134 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000fae:	bf00      	nop
}
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000fb4:	b5b0      	push	{r4, r5, r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <APPD_EnableCPU2+0x34>)
 8000fbc:	1d3c      	adds	r4, r7, #4
 8000fbe:	461d      	mov	r5, r3
 8000fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc8:	c403      	stmia	r4!, {r0, r1}
 8000fca:	8022      	strh	r2, [r4, #0]
 8000fcc:	3402      	adds	r4, #2
 8000fce:	0c13      	lsrs	r3, r2, #16
 8000fd0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000fd2:	f015 fb1f 	bl	8016614 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f014 fd97 	bl	8015b0c <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000fde:	bf00      	nop
}
 8000fe0:	3720      	adds	r7, #32
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	0802cfd8 	.word	0x0802cfd8

08000fec <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800100c:	2300      	movs	r3, #0
 800100e:	77fb      	strb	r3, [r7, #31]
 8001010:	e038      	b.n	8001084 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8001012:	7ffb      	ldrb	r3, [r7, #31]
 8001014:	4a44      	ldr	r2, [pc, #272]	; (8001128 <APPD_SetCPU2GpioConfig+0x13c>)
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	4413      	add	r3, r2
 800101a:	799b      	ldrb	r3, [r3, #6]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d02b      	beq.n	8001078 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001020:	7ffb      	ldrb	r3, [r7, #31]
 8001022:	4a41      	ldr	r2, [pc, #260]	; (8001128 <APPD_SetCPU2GpioConfig+0x13c>)
 8001024:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001028:	4a40      	ldr	r2, [pc, #256]	; (800112c <APPD_SetCPU2GpioConfig+0x140>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d01b      	beq.n	8001066 <APPD_SetCPU2GpioConfig+0x7a>
 800102e:	4a3f      	ldr	r2, [pc, #252]	; (800112c <APPD_SetCPU2GpioConfig+0x140>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d823      	bhi.n	800107c <APPD_SetCPU2GpioConfig+0x90>
 8001034:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001038:	d003      	beq.n	8001042 <APPD_SetCPU2GpioConfig+0x56>
 800103a:	4a3d      	ldr	r2, [pc, #244]	; (8001130 <APPD_SetCPU2GpioConfig+0x144>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d009      	beq.n	8001054 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8001040:	e01c      	b.n	800107c <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8001042:	7ffb      	ldrb	r3, [r7, #31]
 8001044:	4a38      	ldr	r2, [pc, #224]	; (8001128 <APPD_SetCPU2GpioConfig+0x13c>)
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	889a      	ldrh	r2, [r3, #4]
 800104c:	8bbb      	ldrh	r3, [r7, #28]
 800104e:	4313      	orrs	r3, r2
 8001050:	83bb      	strh	r3, [r7, #28]
          break;
 8001052:	e014      	b.n	800107e <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001054:	7ffb      	ldrb	r3, [r7, #31]
 8001056:	4a34      	ldr	r2, [pc, #208]	; (8001128 <APPD_SetCPU2GpioConfig+0x13c>)
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4413      	add	r3, r2
 800105c:	889a      	ldrh	r2, [r3, #4]
 800105e:	8b7b      	ldrh	r3, [r7, #26]
 8001060:	4313      	orrs	r3, r2
 8001062:	837b      	strh	r3, [r7, #26]
          break;
 8001064:	e00b      	b.n	800107e <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8001066:	7ffb      	ldrb	r3, [r7, #31]
 8001068:	4a2f      	ldr	r2, [pc, #188]	; (8001128 <APPD_SetCPU2GpioConfig+0x13c>)
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4413      	add	r3, r2
 800106e:	889a      	ldrh	r2, [r3, #4]
 8001070:	8b3b      	ldrh	r3, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	833b      	strh	r3, [r7, #24]
          break;
 8001076:	e002      	b.n	800107e <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8001078:	bf00      	nop
 800107a:	e000      	b.n	800107e <APPD_SetCPU2GpioConfig+0x92>
          break;
 800107c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800107e:	7ffb      	ldrb	r3, [r7, #31]
 8001080:	3301      	adds	r3, #1
 8001082:	77fb      	strb	r3, [r7, #31]
 8001084:	7ffb      	ldrb	r3, [r7, #31]
 8001086:	2b25      	cmp	r3, #37	; 0x25
 8001088:	d9c3      	bls.n	8001012 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001096:	8bbb      	ldrh	r3, [r7, #28]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d014      	beq.n	80010c6 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800109c:	8bbb      	ldrh	r3, [r7, #28]
 800109e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff ff3f 	bl	8000f24 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff ff55 	bl	8000f56 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f007 fe1a 	bl	8008cec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80010b8:	8bbb      	ldrh	r3, [r7, #28]
 80010ba:	2200      	movs	r2, #0
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c2:	f007 ff9b 	bl	8008ffc <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80010c6:	8b7b      	ldrh	r3, [r7, #26]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d012      	beq.n	80010f2 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 80010cc:	8b7b      	ldrh	r3, [r7, #26]
 80010ce:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	2002      	movs	r0, #2
 80010d2:	f7ff ff27 	bl	8000f24 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80010d6:	2002      	movs	r0, #2
 80010d8:	f7ff ff3d 	bl	8000f56 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4813      	ldr	r0, [pc, #76]	; (8001130 <APPD_SetCPU2GpioConfig+0x144>)
 80010e2:	f007 fe03 	bl	8008cec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80010e6:	8b7b      	ldrh	r3, [r7, #26]
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	4810      	ldr	r0, [pc, #64]	; (8001130 <APPD_SetCPU2GpioConfig+0x144>)
 80010ee:	f007 ff85 	bl	8008ffc <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80010f2:	8b3b      	ldrh	r3, [r7, #24]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d013      	beq.n	8001120 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 80010f8:	8b3b      	ldrh	r3, [r7, #24]
 80010fa:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fc:	2004      	movs	r0, #4
 80010fe:	f7ff ff11 	bl	8000f24 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001102:	2004      	movs	r0, #4
 8001104:	f7ff ff27 	bl	8000f56 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	4619      	mov	r1, r3
 800110c:	4807      	ldr	r0, [pc, #28]	; (800112c <APPD_SetCPU2GpioConfig+0x140>)
 800110e:	f007 fded 	bl	8008cec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001112:	8b3b      	ldrh	r3, [r7, #24]
 8001114:	2200      	movs	r2, #0
 8001116:	4619      	mov	r1, r3
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <APPD_SetCPU2GpioConfig+0x140>)
 800111a:	f007 ff6f 	bl	8008ffc <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800111e:	bf00      	nop
 8001120:	bf00      	nop
}
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	08032664 	.word	0x08032664
 800112c:	48000800 	.word	0x48000800
 8001130:	48000400 	.word	0x48000400

08001134 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8001138:	bf00      	nop
}
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
/* USER CODE BEGIN DbgOutputInit */
	HW_UART_Init(CFG_DEBUG_TRACE_UART);
 8001146:	2000      	movs	r0, #0
 8001148:	f001 fc75 	bl	8002a36 <HW_UART_Init>
/* USER CODE END DbgOutputInit */
  return;
 800114c:	bf00      	nop
}
 800114e:	bd80      	pop	{r7, pc}

08001150 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	460b      	mov	r3, r1
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 800115e:	897a      	ldrh	r2, [r7, #10]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68f9      	ldr	r1, [r7, #12]
 8001164:	2000      	movs	r0, #0
 8001166:	f001 fc9b 	bl	8002aa0 <HW_UART_Transmit_DMA>
/* USER CODE END DbgOutputTraces */
  return;
 800116a:	bf00      	nop
}
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <LL_EXTI_EnableIT_32_63>:
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <LL_EXTI_EnableIT_32_63+0x24>)
 800117e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001182:	4905      	ldr	r1, [pc, #20]	; (8001198 <LL_EXTI_EnableIT_32_63+0x24>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4313      	orrs	r3, r2
 8001188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	58000800 	.word	0x58000800

0800119c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80011a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011aa:	f023 0207 	bic.w	r2, r3, #7
 80011ae:	4905      	ldr	r1, [pc, #20]	; (80011c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	58000400 	.word	0x58000400

080011c8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80011d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80011d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011e2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ee:	4313      	orrs	r3, r2
 80011f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	cafecafe 	.word	0xcafecafe

08001204 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800120c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4313      	orrs	r3, r2
 800121e:	608b      	str	r3, [r1, #8]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800125a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800125e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001280:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001284:	d101      	bne.n	800128a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012aa:	d101      	bne.n	80012b0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_AHB3_GRP1_EnableClock>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80012c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80012d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e0:	68fb      	ldr	r3, [r7, #12]
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <LL_DBGMCU_GetDeviceID+0x18>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e0042000 	.word	0xe0042000

0800130c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <LL_DBGMCU_GetRevisionID+0x18>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	0c1b      	lsrs	r3, r3, #16
 8001316:	b29b      	uxth	r3, r3
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e0042000 	.word	0xe0042000

08001328 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	041b      	lsls	r3, r3, #16
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	605a      	str	r2, [r3, #4]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	605a      	str	r2, [r3, #4]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	041b      	lsls	r3, r3, #16
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	615a      	str	r2, [r3, #20]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	615a      	str	r2, [r3, #20]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	609a      	str	r2, [r3, #8]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	619a      	str	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <LL_LPM_EnableSleep+0x1c>)
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <LL_LPM_EnableSleep+0x1c>)
 80013f6:	f023 0304 	bic.w	r3, r3, #4
 80013fa:	6113      	str	r3, [r2, #16]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	22ff      	movs	r2, #255	; 0xff
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	22ca      	movs	r2, #202	; 0xca
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2253      	movs	r2, #83	; 0x53
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 0207 	bic.w	r2, r3, #7
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <MX_APPE_Config>:

uint8_t Mesh_Stop_Mode;

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <MX_APPE_Config+0x18>)
 8001472:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001476:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8001478:	f000 f854 	bl	8001524 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800147c:	f000 f894 	bl	80015a8 <Config_HSE>

  return;
 8001480:	bf00      	nop
}
 8001482:	bd80      	pop	{r7, pc}
 8001484:	58004000 	.word	0x58004000

08001488 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
#ifdef STM32WB15xx
  MOBLEUINT32 last_user_flash_address = ((READ_BIT(FLASH->SFR, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos) << 11) + FLASH_BASE;
#endif
#ifdef STM32WB55xx
  MOBLEUINT32 last_user_flash_address = ((READ_BIT(FLASH->SFR, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos) << 12) + FLASH_BASE;
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_APPE_Init+0x6c>)
 8001490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001494:	031b      	lsls	r3, r3, #12
 8001496:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800149a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800149e:	607b      	str	r3, [r7, #4]
#endif
  
  System_Init( );       /**< System initialization */
 80014a0:	f000 f896 	bl	80015d0 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80014a4:	f000 f8ae 	bl	8001604 <SystemPower_Config>
  
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80014a8:	4913      	ldr	r1, [pc, #76]	; (80014f8 <MX_APPE_Init+0x70>)
 80014aa:	2000      	movs	r0, #0
 80014ac:	f001 f858 	bl	8002560 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init( );
 80014b0:	f7ff fd6d 	bl	8000f8e <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80014b4:	2101      	movs	r1, #1
 80014b6:	2001      	movs	r0, #1
 80014b8:	f015 fa58 	bl	801696c <UTIL_LPM_SetOffMode>

  Led_Init();
 80014bc:	f000 fa04 	bl	80018c8 <Led_Init>

  Button_Init();
 80014c0:	f000 fa0f 	bl	80018e2 <Button_Init>
  
  mobleNvmBase = (const void *)(last_user_flash_address - NVM_SIZE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_APPE_Init+0x74>)
 80014ce:	601a      	str	r2, [r3, #0]
  appNvmBase   = (const void *)(last_user_flash_address - NVM_SIZE - APP_NVM_SIZE);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_APPE_Init+0x78>)
 80014da:	601a      	str	r2, [r3, #0]
  prvsnr_data  = (const void *)(last_user_flash_address - NVM_SIZE - APP_NVM_SIZE - PRVN_NVM_PAGE_SIZE);    
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <MX_APPE_Init+0x7c>)
 80014e6:	601a      	str	r2, [r3, #0]

  /* For MESH done in serial_if.c */
//  RxUART_Init();

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/*  Initialize all transport layers */
 80014e8:	f000 f89a 	bl	8001620 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  return;
 80014ec:	bf00      	nop
}
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	58004000 	.word	0x58004000
 80014f8:	200043d0 	.word	0x200043d0
 80014fc:	20004448 	.word	0x20004448
 8001500:	2000444c 	.word	0x2000444c
 8001504:	20004450 	.word	0x20004450

08001508 <Init_Smps>:

void Init_Smps( void )
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800150c:	bf00      	nop
}
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <Init_Exti>:

void Init_Exti( void )
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800151a:	2050      	movs	r0, #80	; 0x50
 800151c:	f7ff fe2a 	bl	8001174 <LL_EXTI_EnableIT_32_63>


  return;
 8001520:	bf00      	nop
}
 8001522:	bd80      	pop	{r7, pc}

08001524 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8001528:	f000 f804 	bl	8001534 <Reset_BackupDomain>

  Reset_IPCC();
 800152c:	f000 f81a 	bl	8001564 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001530:	bf00      	nop
}
 8001532:	bd80      	pop	{r7, pc}

08001534 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001538:	f7ff fe9a 	bl	8001270 <LL_RCC_IsActiveFlag_PINRST>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00d      	beq.n	800155e <Reset_BackupDomain+0x2a>
 8001542:	f7ff fea8 	bl	8001296 <LL_RCC_IsActiveFlag_SFTRST>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d108      	bne.n	800155e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800154c:	f007 fe30 	bl	80091b0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001550:	f007 fe2e 	bl	80091b0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001554:	f7ff fe6a 	bl	800122c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001558:	f7ff fe79 	bl	800124e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800155c:	bf00      	nop
 800155e:	bf00      	nop
}
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001568:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800156c:	f7ff fea6 	bl	80012bc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001570:	213f      	movs	r1, #63	; 0x3f
 8001572:	480c      	ldr	r0, [pc, #48]	; (80015a4 <Reset_IPCC+0x40>)
 8001574:	f7ff ff1e 	bl	80013b4 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001578:	213f      	movs	r1, #63	; 0x3f
 800157a:	480a      	ldr	r0, [pc, #40]	; (80015a4 <Reset_IPCC+0x40>)
 800157c:	f7ff ff28 	bl	80013d0 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001580:	213f      	movs	r1, #63	; 0x3f
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <Reset_IPCC+0x40>)
 8001584:	f7ff fed0 	bl	8001328 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001588:	213f      	movs	r1, #63	; 0x3f
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <Reset_IPCC+0x40>)
 800158c:	f7ff feef 	bl	800136e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001590:	213f      	movs	r1, #63	; 0x3f
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <Reset_IPCC+0x40>)
 8001594:	f7ff feda 	bl	800134c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001598:	213f      	movs	r1, #63	; 0x3f
 800159a:	4802      	ldr	r0, [pc, #8]	; (80015a4 <Reset_IPCC+0x40>)
 800159c:	f7ff fef9 	bl	8001392 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80015a0:	bf00      	nop
}
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	58000c00 	.word	0x58000c00

080015a8 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f015 f972 	bl	8016898 <OTP_Read>
 80015b4:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	799b      	ldrb	r3, [r3, #6]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fe01 	bl	80011c8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
}
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <System_Init>:

static void System_Init( void )
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  Init_Smps( );
 80015d4:	f7ff ff98 	bl	8001508 <Init_Smps>

  Init_Exti( );
 80015d8:	f7ff ff9d 	bl	8001516 <Init_Exti>

  Init_Rtc( );
 80015dc:	f000 f802 	bl	80015e4 <Init_Rtc>

  return;
 80015e0:	bf00      	nop
}
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <Init_Rtc>:

static void Init_Rtc( void )
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <Init_Rtc+0x1c>)
 80015ea:	f7ff ff1c 	bl	8001426 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80015ee:	2100      	movs	r1, #0
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <Init_Rtc+0x1c>)
 80015f2:	f7ff ff28 	bl	8001446 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80015f6:	4802      	ldr	r0, [pc, #8]	; (8001600 <Init_Rtc+0x1c>)
 80015f8:	f7ff ff08 	bl	800140c <LL_RTC_EnableWriteProtection>

  return;
 80015fc:	bf00      	nop
}
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40002800 	.word	0x40002800

08001604 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001608:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800160c:	f7ff fdfa 	bl	8001204 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001610:	f015 f96a 	bl	80168e8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001614:	2004      	movs	r0, #4
 8001616:	f7ff fdc1 	bl	800119c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800161a:	bf00      	nop
}
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001626:	f014 fe3f 	bl	80162a8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800162a:	4a11      	ldr	r2, [pc, #68]	; (8001670 <appe_Tl_Init+0x50>)
 800162c:	2100      	movs	r1, #0
 800162e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001632:	f015 fac7 	bl	8016bc4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <appe_Tl_Init+0x54>)
 8001638:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <appe_Tl_Init+0x58>)
 800163c:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800163e:	463b      	mov	r3, r7
 8001640:	4619      	mov	r1, r3
 8001642:	480e      	ldr	r0, [pc, #56]	; (800167c <appe_Tl_Init+0x5c>)
 8001644:	f014 fcf2 	bl	801602c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <appe_Tl_Init+0x60>)
 800164a:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <appe_Tl_Init+0x64>)
 800164e:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <appe_Tl_Init+0x68>)
 8001652:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001654:	f240 533c 	movw	r3, #1340	; 0x53c
 8001658:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	4618      	mov	r0, r3
 8001660:	f014 ff64 	bl	801652c <TL_MM_Init>

  TL_Enable();
 8001664:	f014 fe1a 	bl	801629c <TL_Enable>

  return;
 8001668:	bf00      	nop
}
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	08016065 	.word	0x08016065
 8001674:	20030734 	.word	0x20030734
 8001678:	0800168d 	.word	0x0800168d
 800167c:	080016a5 	.word	0x080016a5
 8001680:	2003094c 	.word	0x2003094c
 8001684:	20030840 	.word	0x20030840
 8001688:	200301f8 	.word	0x200301f8

0800168c <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001696:	bf00      	nop
}
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <APPE_SysUserEvtRx>:
* The buffer shall not be released
* ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
* When the status is not filled, the buffer is released by default
*/
static void APPE_SysUserEvtRx( void * pPayload )
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;
  
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	330b      	adds	r3, #11
 80016b2:	61fb      	str	r3, [r7, #28]
  
  switch(p_sys_event->subevtcode)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80016be:	2b07      	cmp	r3, #7
 80016c0:	d860      	bhi.n	8001784 <APPE_SysUserEvtRx+0xe0>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <APPE_SysUserEvtRx+0x24>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080016e9 	.word	0x080016e9
 80016cc:	0800172b 	.word	0x0800172b
 80016d0:	08001739 	.word	0x08001739
 80016d4:	08001785 	.word	0x08001785
 80016d8:	08001755 	.word	0x08001755
 80016dc:	08001765 	.word	0x08001765
 80016e0:	0800176d 	.word	0x0800176d
 80016e4:	0800177d 	.word	0x0800177d
  {
  case SHCI_SUB_EVT_CODE_READY:
  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4618      	mov	r0, r3
 80016ee:	f014 fa53 	bl	8015b98 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80016f2:	7b3b      	ldrb	r3, [r7, #12]
 80016f4:	4619      	mov	r1, r3
 80016f6:	7b7b      	ldrb	r3, [r7, #13]
 80016f8:	461a      	mov	r2, r3
 80016fa:	7bbb      	ldrb	r3, [r7, #14]
 80016fc:	4824      	ldr	r0, [pc, #144]	; (8001790 <APPE_SysUserEvtRx+0xec>)
 80016fe:	f028 f82b 	bl	8029758 <iprintf>
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001702:	7c3b      	ldrb	r3, [r7, #16]
 8001704:	4619      	mov	r1, r3
 8001706:	4823      	ldr	r0, [pc, #140]	; (8001794 <APPE_SysUserEvtRx+0xf0>)
 8001708:	f028 f826 	bl	8029758 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800170c:	7dbb      	ldrb	r3, [r7, #22]
 800170e:	4619      	mov	r1, r3
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	461a      	mov	r2, r3
 8001714:	7e3b      	ldrb	r3, [r7, #24]
 8001716:	4820      	ldr	r0, [pc, #128]	; (8001798 <APPE_SysUserEvtRx+0xf4>)
 8001718:	f028 f81e 	bl	8029758 <iprintf>
  
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 800171c:	481f      	ldr	r0, [pc, #124]	; (800179c <APPE_SysUserEvtRx+0xf8>)
 800171e:	f028 f81b 	bl	8029758 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f870 	bl	8001808 <APPE_SysEvtReadyProcessing>
    break;
 8001728:	e02d      	b.n	8001786 <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800172a:	481d      	ldr	r0, [pc, #116]	; (80017a0 <APPE_SysUserEvtRx+0xfc>)
 800172c:	f028 f814 	bl	8029758 <iprintf>
    APPE_SysEvtError(pPayload);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f843 	bl	80017bc <APPE_SysEvtError>
    break;
 8001736:	e026      	b.n	8001786 <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 8001738:	481a      	ldr	r0, [pc, #104]	; (80017a4 <APPE_SysUserEvtRx+0x100>)
 800173a:	f028 f893 	bl	8029864 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001742:	6819      	ldr	r1, [r3, #0]
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	461a      	mov	r2, r3
 800174c:	4816      	ldr	r0, [pc, #88]	; (80017a8 <APPE_SysUserEvtRx+0x104>)
 800174e:	f028 f803 	bl	8029758 <iprintf>
    break;
 8001752:	e018      	b.n	8001786 <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4619      	mov	r1, r3
 800175c:	4813      	ldr	r0, [pc, #76]	; (80017ac <APPE_SysUserEvtRx+0x108>)
 800175e:	f027 fffb 	bl	8029758 <iprintf>
    break;
 8001762:	e010      	b.n	8001786 <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001764:	4812      	ldr	r0, [pc, #72]	; (80017b0 <APPE_SysUserEvtRx+0x10c>)
 8001766:	f027 fff7 	bl	8029758 <iprintf>
    break;
 800176a:	e00c      	b.n	8001786 <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	480f      	ldr	r0, [pc, #60]	; (80017b4 <APPE_SysUserEvtRx+0x110>)
 8001776:	f027 ffef 	bl	8029758 <iprintf>
    break;
 800177a:	e004      	b.n	8001786 <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 800177c:	480e      	ldr	r0, [pc, #56]	; (80017b8 <APPE_SysUserEvtRx+0x114>)
 800177e:	f027 ffeb 	bl	8029758 <iprintf>
    break;
 8001782:	e000      	b.n	8001786 <APPE_SysUserEvtRx+0xe2>
    
  default:
    break;
 8001784:	bf00      	nop
  }
  
  return;
 8001786:	bf00      	nop
}
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	0802cff4 	.word	0x0802cff4
 8001794:	0802d018 	.word	0x0802d018
 8001798:	0802d034 	.word	0x0802d034
 800179c:	0802d04c 	.word	0x0802d04c
 80017a0:	0802d06c 	.word	0x0802d06c
 80017a4:	0802d090 	.word	0x0802d090
 80017a8:	0802d0e0 	.word	0x0802d0e0
 80017ac:	0802d108 	.word	0x0802d108
 80017b0:	0802d144 	.word	0x0802d144
 80017b4:	0802d168 	.word	0x0802d168
 80017b8:	0802d1a4 	.word	0x0802d1a4

080017bc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
*/
static void APPE_SysEvtError(void * pPayload)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	330b      	adds	r3, #11
 80017ca:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3302      	adds	r3, #2
 80017d0:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4619      	mov	r1, r3
 80017d8:	4808      	ldr	r0, [pc, #32]	; (80017fc <APPE_SysEvtError+0x40>)
 80017da:	f027 ffbd 	bl	8029758 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d103      	bne.n	80017ee <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80017e6:	4806      	ldr	r0, [pc, #24]	; (8001800 <APPE_SysEvtError+0x44>)
 80017e8:	f028 f83c 	bl	8029864 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80017ec:	e003      	b.n	80017f6 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <APPE_SysEvtError+0x48>)
 80017f0:	f028 f838 	bl	8029864 <puts>
  return;
 80017f4:	bf00      	nop
}
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	0802d1c8 	.word	0x0802d1c8
 8001800:	0802d1f8 	.word	0x0802d1f8
 8001804:	0802d234 	.word	0x0802d234

08001808 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;
  
  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	330b      	adds	r3, #11
 800182c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3302      	adds	r3, #2
 8001832:	61bb      	str	r3, [r7, #24]
  
  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d128      	bne.n	800188e <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 800183c:	481d      	ldr	r0, [pc, #116]	; (80018b4 <APPE_SysEvtReadyProcessing+0xac>)
 800183e:	f028 f811 	bl	8029864 <puts>
    
    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8001842:	f7ff fbb7 	bl	8000fb4 <APPD_EnableCPU2>
    
    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001846:	230f      	movs	r3, #15
 8001848:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE  
 800184a:	237f      	movs	r3, #127	; 0x7f
 800184c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800184e:	f7ff fd5d 	bl	800130c <LL_DBGMCU_GetRevisionID>
 8001852:	6278      	str	r0, [r7, #36]	; 0x24
    
    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001856:	4818      	ldr	r0, [pc, #96]	; (80018b8 <APPE_SysEvtReadyProcessing+0xb0>)
 8001858:	f027 ff7e 	bl	8029758 <iprintf>
    
    config_param.RevisionID = (uint16_t)RevisionID;
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	b29b      	uxth	r3, r3
 8001860:	82bb      	strh	r3, [r7, #20]
    
    DeviceID = LL_DBGMCU_GetDeviceID();
 8001862:	f7ff fd45 	bl	80012f0 <LL_DBGMCU_GetDeviceID>
 8001866:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001868:	6a39      	ldr	r1, [r7, #32]
 800186a:	4814      	ldr	r0, [pc, #80]	; (80018bc <APPE_SysEvtReadyProcessing+0xb4>)
 800186c:	f027 ff74 	bl	8029758 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	b29b      	uxth	r3, r3
 8001874:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	4618      	mov	r0, r3
 800187c:	f014 f976 	bl	8015b6c <SHCI_C2_Config>
    
    APP_BLE_Init( );
 8001880:	f001 feca 	bl	8003618 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001884:	2100      	movs	r1, #0
 8001886:	2001      	movs	r0, #1
 8001888:	f015 f870 	bl	801696c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
}

  return;
 800188c:	e00e      	b.n	80018ac <APPE_SysEvtReadyProcessing+0xa4>
  else  if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING) 
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d106      	bne.n	80018a4 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001896:	480a      	ldr	r0, [pc, #40]	; (80018c0 <APPE_SysEvtReadyProcessing+0xb8>)
 8001898:	f027 ff5e 	bl	8029758 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
  return;
 80018a2:	e003      	b.n	80018ac <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <APPE_SysEvtReadyProcessing+0xbc>)
 80018a6:	f027 ff57 	bl	8029758 <iprintf>
  return;
 80018aa:	bf00      	nop
}
 80018ac:	3728      	adds	r7, #40	; 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	0802d26c 	.word	0x0802d26c
 80018b8:	0802d288 	.word	0x0802d288
 80018bc:	0802d2ac 	.word	0x0802d2ac
 80018c0:	0802d2cc 	.word	0x0802d2cc
 80018c4:	0802d300 	.word	0x0802d300

080018c8 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */
  BSP_LED_Init(LED_BLUE);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f006 f8f9 	bl	8007ac4 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f006 f8f6 	bl	8007ac4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80018d8:	2002      	movs	r0, #2
 80018da:	f006 f8f3 	bl	8007ac4 <BSP_LED_Init>
#endif

    return;
 80018de:	bf00      	nop
}
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <Button_Init>:

static void Button_Init( void )
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80018e6:	2101      	movs	r1, #1
 80018e8:	2000      	movs	r0, #0
 80018ea:	f006 f959 	bl	8007ba0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80018ee:	2101      	movs	r1, #1
 80018f0:	2001      	movs	r0, #1
 80018f2:	f006 f955 	bl	8007ba0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80018f6:	2101      	movs	r1, #1
 80018f8:	2002      	movs	r0, #2
 80018fa:	f006 f951 	bl	8007ba0 <BSP_PB_Init>
#endif

  return;
 80018fe:	bf00      	nop
}
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800190a:	f006 fab7 	bl	8007e7c <HAL_GetTick>
 800190e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800191a:	d00a      	beq.n	8001932 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800191c:	f006 fac6 	bl	8007eac <HAL_GetTickFreq>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800192a:	e002      	b.n	8001932 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800192c:	f7ff fd5e 	bl	80013ec <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI( );
 8001930:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001932:	f006 faa3 	bl	8007e7c <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	429a      	cmp	r2, r3
 8001940:	d8f4      	bhi.n	800192c <HAL_Delay+0x2a>
  }
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001954:	f015 f83a 	bl	80169cc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  {
    UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);
  }
#endif
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001960:	bf00      	nop
}
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
#if (LOW_POWER_FEATURE == 1)
  UTIL_SEQ_Run( 0 );
#else
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001978:	f015 f828 	bl	80169cc <UTIL_SEQ_Run>
#endif

  return;
 800197c:	bf00      	nop
}
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800198c:	2100      	movs	r1, #0
 800198e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001992:	f015 f939 	bl	8016c08 <UTIL_SEQ_SetTask>
  return;
 8001996:	bf00      	nop
}
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80019a6:	2002      	movs	r0, #2
 80019a8:	f015 f99a 	bl	8016ce0 <UTIL_SEQ_SetEvt>
  return;
 80019ac:	bf00      	nop
}
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80019bc:	2002      	movs	r0, #2
 80019be:	f015 f9af 	bl	8016d20 <UTIL_SEQ_WaitEvt>
  return;
 80019c2:	bf00      	nop
}
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	2b10      	cmp	r3, #16
 80019d8:	d104      	bne.n	80019e4 <HAL_GPIO_EXTI_Callback+0x1a>
      break;
#endif

    case BUTTON_SW1_PIN:
      {
        UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_SW1_REQ_ID, CFG_SCH_PRIO_0);
 80019da:	2100      	movs	r1, #0
 80019dc:	2040      	movs	r0, #64	; 0x40
 80019de:	f015 f913 	bl	8016c08 <UTIL_SEQ_SetTask>
      }
      break;
 80019e2:	e000      	b.n	80019e6 <HAL_GPIO_EXTI_Callback+0x1c>
      break;
#endif

      
  default:
      break;
 80019e4:	bf00      	nop

  }
  return;
 80019e6:	bf00      	nop
}
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <LL_FLASH_IsActiveFlag_OperationSuspended+0x24>)
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a00:	d101      	bne.n	8001a06 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	58004000 	.word	0x58004000

08001a18 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	3220      	adds	r2, #32
 8001a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2c:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <LL_HSEM_1StepLock+0x2c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d001      	beq.n	8001a36 <LL_HSEM_1StepLock+0x1e>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <LL_HSEM_1StepLock+0x20>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	80000400 	.word	0x80000400

08001a48 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_HSEM_GetStatus>:
  * @rmtoll R            LOCK          LL_HSEM_GetStatus
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 0 semaphore is free, 1 semaphore is locked  */
__STATIC_INLINE uint32_t LL_HSEM_GetStatus(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
  return ((HSEMx->R[Semaphore] != 0U) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <LL_HSEM_GetStatus+0x1a>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <LL_HSEM_GetStatus+0x1c>
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <FD_EraseSectors>:
static SingleFlashOperationStatus_t ProcessSingleFlashOperation(FlashOperationType_t FlashOperationType,
                                                                uint32_t SectorNumberOrDestAddress,
                                                                uint64_t Data);
/* Public functions ----------------------------------------------------------*/
uint32_t FD_EraseSectors(uint32_t FirstSector, uint32_t NbrOfSectors)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t loop_flash;
  uint32_t return_value;
  SingleFlashOperationStatus_t single_flash_operation_status;

  single_flash_operation_status = SINGLE_FLASH_OPERATION_DONE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]

  /**
   *  Take the semaphore to take ownership of the Flash IP
   */
  while(LL_HSEM_1StepLock(HSEM, CFG_HW_FLASH_SEMID));
 8001aa6:	bf00      	nop
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	481d      	ldr	r0, [pc, #116]	; (8001b20 <FD_EraseSectors+0x88>)
 8001aac:	f7ff ffb4 	bl	8001a18 <LL_HSEM_1StepLock>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f8      	bne.n	8001aa8 <FD_EraseSectors+0x10>

  HAL_FLASH_Unlock();
 8001ab6:	f006 ff83 	bl	80089c0 <HAL_FLASH_Unlock>
   *  Notify the CPU2 that some flash erase activity may be executed
   *  On reception of this command, the CPU2 enables the BLE timing protection versus flash erase processing
   *  The Erase flash activity will be executed only when the BLE RF is idle for at least 25ms
   *  The CPU2 will prevent all flash activity (write or erase) in all cases when the BL RF Idle is shorter than 25ms.
   */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
 8001aba:	2001      	movs	r0, #1
 8001abc:	f014 f83d 	bl	8015b3a <SHCI_C2_FLASH_EraseActivity>

  for(loop_flash = 0; (loop_flash < NbrOfSectors) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e00a      	b.n	8001adc <FD_EraseSectors+0x44>
  {
    single_flash_operation_status = FD_EraseSingleSector(FirstSector+loop_flash);
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	4413      	add	r3, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 f871 	bl	8001bb4 <FD_EraseSingleSector>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
  for(loop_flash = 0; (loop_flash < NbrOfSectors) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d202      	bcs.n	8001aea <FD_EraseSectors+0x52>
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0ed      	beq.n	8001ac6 <FD_EraseSectors+0x2e>
  }

  if(single_flash_operation_status != SINGLE_FLASH_OPERATION_DONE)
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <FD_EraseSectors+0x64>
  {
    return_value = NbrOfSectors - loop_flash + 1;
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	e00b      	b.n	8001b14 <FD_EraseSectors+0x7c>
    /**
     *  Notify the CPU2 there will be no request anymore to erase the flash
     *  On reception of this command, the CPU2 will disables the BLE timing protection versus flash erase processing
     *  The protection is active until next end of radio event.
     */
    SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
 8001afc:	2000      	movs	r0, #0
 8001afe:	f014 f81c 	bl	8015b3a <SHCI_C2_FLASH_EraseActivity>

    HAL_FLASH_Lock();
 8001b02:	f006 ff7f 	bl	8008a04 <HAL_FLASH_Lock>

    /**
     *  Release the ownership of the Flash IP
     */
    LL_HSEM_ReleaseLock(HSEM, CFG_HW_FLASH_SEMID, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2102      	movs	r1, #2
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <FD_EraseSectors+0x88>)
 8001b0c:	f7ff ff9c 	bl	8001a48 <LL_HSEM_ReleaseLock>

    return_value = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
  }

  return return_value;
 8001b14:	693b      	ldr	r3, [r7, #16]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	58001400 	.word	0x58001400

08001b24 <FD_WriteData>:

uint32_t FD_WriteData(uint32_t DestAddress, uint64_t * pSrcBuffer, uint32_t NbrOfData)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t loop_flash;
  uint32_t return_value;
  SingleFlashOperationStatus_t single_flash_operation_status;

  single_flash_operation_status = SINGLE_FLASH_OPERATION_DONE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	75fb      	strb	r3, [r7, #23]

  /**
   *  Take the semaphore to take ownership of the Flash IP
   */
  while(LL_HSEM_1StepLock(HSEM, CFG_HW_FLASH_SEMID));
 8001b34:	bf00      	nop
 8001b36:	2102      	movs	r1, #2
 8001b38:	481d      	ldr	r0, [pc, #116]	; (8001bb0 <FD_WriteData+0x8c>)
 8001b3a:	f7ff ff6d 	bl	8001a18 <LL_HSEM_1StepLock>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f8      	bne.n	8001b36 <FD_WriteData+0x12>

  HAL_FLASH_Unlock();
 8001b44:	f006 ff3c 	bl	80089c0 <HAL_FLASH_Unlock>

  for(loop_flash = 0; (loop_flash < NbrOfData) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	e011      	b.n	8001b72 <FD_WriteData+0x4e>
  {
    single_flash_operation_status = FD_WriteSingleData(DestAddress+(8*loop_flash), *(pSrcBuffer+loop_flash));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	00da      	lsls	r2, r3, #3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	18d1      	adds	r1, r2, r3
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b62:	4608      	mov	r0, r1
 8001b64:	f000 f839 	bl	8001bda <FD_WriteSingleData>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	75fb      	strb	r3, [r7, #23]
  for(loop_flash = 0; (loop_flash < NbrOfData) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d202      	bcs.n	8001b80 <FD_WriteData+0x5c>
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0e6      	beq.n	8001b4e <FD_WriteData+0x2a>
  }

  if(single_flash_operation_status != SINGLE_FLASH_OPERATION_DONE)
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <FD_WriteData+0x6e>
  {
    return_value = NbrOfData - loop_flash + 1;
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	e008      	b.n	8001ba4 <FD_WriteData+0x80>
  }
  else
  {
    HAL_FLASH_Lock();
 8001b92:	f006 ff37 	bl	8008a04 <HAL_FLASH_Lock>

    /**
     *  Release the ownership of the Flash IP
     */
    LL_HSEM_ReleaseLock(HSEM, CFG_HW_FLASH_SEMID, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2102      	movs	r1, #2
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <FD_WriteData+0x8c>)
 8001b9c:	f7ff ff54 	bl	8001a48 <LL_HSEM_ReleaseLock>

    return_value = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
  }

  return return_value;
 8001ba4:	69bb      	ldr	r3, [r7, #24]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3720      	adds	r7, #32
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	58001400 	.word	0x58001400

08001bb4 <FD_EraseSingleSector>:

SingleFlashOperationStatus_t FD_EraseSingleSector(uint32_t SectorNumber)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  SingleFlashOperationStatus_t return_value;

  /* The last parameter is unused in that case and set to 0 */
  return_value =  ProcessSingleFlashOperation(FLASH_ERASE, SectorNumber, 0);
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f000 f81a 	bl	8001c00 <ProcessSingleFlashOperation>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	73fb      	strb	r3, [r7, #15]

  return return_value;
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <FD_WriteSingleData>:

SingleFlashOperationStatus_t FD_WriteSingleData(uint32_t DestAddress, uint64_t Data)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	e9c7 2300 	strd	r2, r3, [r7]
  SingleFlashOperationStatus_t return_value;

  return_value =  ProcessSingleFlashOperation(FLASH_WRITE, DestAddress, Data);
 8001be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bea:	68f9      	ldr	r1, [r7, #12]
 8001bec:	2001      	movs	r0, #1
 8001bee:	f000 f807 	bl	8001c00 <ProcessSingleFlashOperation>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	75fb      	strb	r3, [r7, #23]

  return return_value;
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <ProcessSingleFlashOperation>:
 *
 *************************************************************/
static SingleFlashOperationStatus_t ProcessSingleFlashOperation(FlashOperationType_t FlashOperationType,
                                                                uint32_t SectorNumberOrDestAddress,
                                                                uint64_t Data)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08e      	sub	sp, #56	; 0x38
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	e9c7 2300 	strd	r2, r3, [r7]
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	73fb      	strb	r3, [r7, #15]
  SingleFlashOperationStatus_t return_status;

  uint32_t page_error;
  FLASH_EraseInitTypeDef p_erase_init;

  waited_sem_status = WAITED_SEM_FREE;
 8001c10:	2301      	movs	r3, #1
 8001c12:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  p_erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001c16:	2302      	movs	r3, #2
 8001c18:	617b      	str	r3, [r7, #20]
  p_erase_init.NbPages = 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	61fb      	str	r3, [r7, #28]
  p_erase_init.Page = SectorNumberOrDestAddress;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	61bb      	str	r3, [r7, #24]
     * the flash processing has been requested but suspended due to the PESD bit.
     *
     * Note: This code is required only when the PESD mechanism is used to protect the CPU2 timing.
     * However, keeping that code make it compatible with the two mechanisms.
     */
    while(LL_FLASH_IsActiveFlag_OperationSuspended());
 8001c22:	bf00      	nop
 8001c24:	f7ff fee4 	bl	80019f0 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1fa      	bne.n	8001c24 <ProcessSingleFlashOperation+0x24>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28

    UTILS_ENTER_CRITICAL_SECTION();
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8001c38:	b672      	cpsid	i
}
 8001c3a:	bf00      	nop
     *  some latency in critical code execution
     *  When flash processing is ongoing, the CPU cannot access the flash anymore.
     *  Trying to access the flash during that time stalls the CPU.
     *  The only way for CPU1 to disallow flash processing is to take CFG_HW_BLOCK_FLASH_REQ_BY_CPU1_SEMID.
     */
    cpu1_sem_status = (SemStatus_t)LL_HSEM_GetStatus(HSEM, CFG_HW_BLOCK_FLASH_REQ_BY_CPU1_SEMID);
 8001c3c:	2106      	movs	r1, #6
 8001c3e:	4836      	ldr	r0, [pc, #216]	; (8001d18 <ProcessSingleFlashOperation+0x118>)
 8001c40:	f7ff ff15 	bl	8001a6e <LL_HSEM_GetStatus>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(cpu1_sem_status == SEM_LOCK_SUCCESSFUL)
 8001c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d121      	bne.n	8001c96 <ProcessSingleFlashOperation+0x96>
       *
       *  However, keeping that code make it compatible with the two mechanisms.
       *  The protection by semaphore is enabled on CPU2 side with the command SHCI_C2_SetFlashActivityControl()
       *
       */
      cpu2_sem_status = (SemStatus_t)LL_HSEM_1StepLock(HSEM, CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID);
 8001c52:	2107      	movs	r1, #7
 8001c54:	4830      	ldr	r0, [pc, #192]	; (8001d18 <ProcessSingleFlashOperation+0x118>)
 8001c56:	f7ff fedf 	bl	8001a18 <LL_HSEM_1StepLock>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if(cpu2_sem_status == SEM_LOCK_SUCCESSFUL)
 8001c60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d116      	bne.n	8001c96 <ProcessSingleFlashOperation+0x96>
         * When CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID is taken, it is allowed to only erase one sector or
         * write one single 64bits data
         * When either several sectors need to be erased or several 64bits data need to be written,
         * the application shall first exit from the critical section and try again.
         */
        if(FlashOperationType == FLASH_ERASE)
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d108      	bne.n	8001c80 <ProcessSingleFlashOperation+0x80>
        {
          HAL_FLASHEx_Erase(&p_erase_init, &page_error);
 8001c6e:	f107 0220 	add.w	r2, r7, #32
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f006 ff73 	bl	8008b64 <HAL_FLASHEx_Erase>
 8001c7e:	e005      	b.n	8001c8c <ProcessSingleFlashOperation+0x8c>
        }
        else
        {
          HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, SectorNumberOrDestAddress, Data);
 8001c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	2001      	movs	r0, #1
 8001c88:	f006 fe56 	bl	8008938 <HAL_FLASH_Program>
         *  Release the semaphore to give the opportunity to CPU2 to protect its timing versus the next flash operation
         *  by taking this semaphore.
         *  Note that the CPU2 is polling on this semaphore so CPU1 shall release it as fast as possible.
         *  This is why this code is protected by a critical section.
         */
        LL_HSEM_ReleaseLock(HSEM, CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2107      	movs	r1, #7
 8001c90:	4821      	ldr	r0, [pc, #132]	; (8001d18 <ProcessSingleFlashOperation+0x118>)
 8001c92:	f7ff fed9 	bl	8001a48 <LL_HSEM_ReleaseLock>
 8001c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	f383 8810 	msr	PRIMASK, r3
}
 8001ca0:	bf00      	nop
      }
    }

    UTILS_EXIT_CRITICAL_SECTION();

    if(cpu1_sem_status != SEM_LOCK_SUCCESSFUL)
 8001ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d006      	beq.n	8001cb8 <ProcessSingleFlashOperation+0xb8>
    {
      /**
       * To avoid looping in ProcessSingleFlashOperation(), FD_WaitForSemAvailable() should implement a mechanism to
       * continue only when CFG_HW_BLOCK_FLASH_REQ_BY_CPU1_SEMID is free
       */
      waited_sem_status = FD_WaitForSemAvailable(WAIT_FOR_SEM_BLOCK_FLASH_REQ_BY_CPU1);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f000 f838 	bl	8001d20 <FD_WaitForSemAvailable>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001cb6:	e009      	b.n	8001ccc <ProcessSingleFlashOperation+0xcc>
    }
    else if(cpu2_sem_status != SEM_LOCK_SUCCESSFUL)
 8001cb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <ProcessSingleFlashOperation+0xcc>
    {
      /**
       * To avoid looping in ProcessSingleFlashOperation(), FD_WaitForSemAvailable() should implement a mechanism to
       * continue only when CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID is free
       */
      waited_sem_status = FD_WaitForSemAvailable(WAIT_FOR_SEM_BLOCK_FLASH_REQ_BY_CPU2);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f000 f82d 	bl	8001d20 <FD_WaitForSemAvailable>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }
  }
  while( ((cpu2_sem_status != SEM_LOCK_SUCCESSFUL) || (cpu1_sem_status != SEM_LOCK_SUCCESSFUL))
      && (waited_sem_status != WAITED_SEM_BUSY) );
 8001ccc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d103      	bne.n	8001cdc <ProcessSingleFlashOperation+0xdc>
  while( ((cpu2_sem_status != SEM_LOCK_SUCCESSFUL) || (cpu1_sem_status != SEM_LOCK_SUCCESSFUL))
 8001cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <ProcessSingleFlashOperation+0xe4>
      && (waited_sem_status != WAITED_SEM_BUSY) );
 8001cdc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d19e      	bne.n	8001c22 <ProcessSingleFlashOperation+0x22>
   * way to recover than applying a device reset.
   *
   * Note: This code is required only when the PESD mechanism is used to protect the CPU2 timing.
   * However, keeping that code make it compatible with the two mechanisms.
   */
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY));
 8001ce4:	bf00      	nop
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <ProcessSingleFlashOperation+0x11c>)
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001cf2:	d0f8      	beq.n	8001ce6 <ProcessSingleFlashOperation+0xe6>

  if(waited_sem_status != WAITED_SEM_BUSY)
 8001cf4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <ProcessSingleFlashOperation+0x104>
  {
    /**
     * The flash processing has been done. It has not been checked whether it has been successful or not.
     * The only commitment is that it is possible to request a new flash processing
     */
    return_status = SINGLE_FLASH_OPERATION_DONE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001d02:	e002      	b.n	8001d0a <ProcessSingleFlashOperation+0x10a>
    /**
     * The flash processing has not been executed due to timing protection from either the CPU1 or the CPU2.
     * This status is reported up to the user that should retry after checking that each CPU do not
     * protect its timing anymore.
     */
    return_status = SINGLE_FLASH_OPERATION_NOT_EXECUTED;
 8001d04:	2301      	movs	r3, #1
 8001d06:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  }

  return return_status;
 8001d0a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3738      	adds	r7, #56	; 0x38
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	58001400 	.word	0x58001400
 8001d1c:	58004000 	.word	0x58004000

08001d20 <FD_WaitForSemAvailable>:
 *
 * WEAK FUNCTIONS
 *
 *************************************************************/
__WEAK WaitedSemStatus_t FD_WaitForSemAvailable(WaitedSemId_t WaitedSemId)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
   * WAITED_SEM_FREE keep looping in the driver until the action is executed. This will result in the current stack looping
   * until this is done. In a bare metal implementation, only the code within interrupt handler can be executed. With an OS,
   * only task with higher priority can be processed
   *
   */
  return WAITED_SEM_BUSY;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_EXTI_EnableIT_0_31>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <LL_EXTI_EnableIT_0_31+0x24>)
 8001d42:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001d46:	4905      	ldr	r1, [pc, #20]	; (8001d5c <LL_EXTI_EnableIT_0_31+0x24>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	58000800 	.word	0x58000800

08001d60 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4904      	ldr	r1, [pc, #16]	; (8001d80 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]

}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	58000800 	.word	0x58000800

08001d84 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <ReadRtcSsrValue+0x3c>)
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <ReadRtcSsrValue+0x3c>)
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001d9a:	e005      	b.n	8001da8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <ReadRtcSsrValue+0x3c>)
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1f5      	bne.n	8001d9c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001db0:	683b      	ldr	r3, [r7, #0]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40002800 	.word	0x40002800

08001dc4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	460a      	mov	r2, r1
 8001dce:	71fb      	strb	r3, [r7, #7]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001dd4:	79ba      	ldrb	r2, [r7, #6]
 8001dd6:	491d      	ldr	r1, [pc, #116]	; (8001e4c <LinkTimerAfter+0x88>)
 8001dd8:	4613      	mov	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	440b      	add	r3, r1
 8001de2:	3315      	adds	r3, #21
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d009      	beq.n	8001e02 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001dee:	7bfa      	ldrb	r2, [r7, #15]
 8001df0:	4916      	ldr	r1, [pc, #88]	; (8001e4c <LinkTimerAfter+0x88>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3314      	adds	r3, #20
 8001dfe:	79fa      	ldrb	r2, [r7, #7]
 8001e00:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001e02:	79fa      	ldrb	r2, [r7, #7]
 8001e04:	4911      	ldr	r1, [pc, #68]	; (8001e4c <LinkTimerAfter+0x88>)
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	3315      	adds	r3, #21
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	490c      	ldr	r1, [pc, #48]	; (8001e4c <LinkTimerAfter+0x88>)
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	440b      	add	r3, r1
 8001e24:	3314      	adds	r3, #20
 8001e26:	79ba      	ldrb	r2, [r7, #6]
 8001e28:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001e2a:	79ba      	ldrb	r2, [r7, #6]
 8001e2c:	4907      	ldr	r1, [pc, #28]	; (8001e4c <LinkTimerAfter+0x88>)
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	3315      	adds	r3, #21
 8001e3a:	79fa      	ldrb	r2, [r7, #7]
 8001e3c:	701a      	strb	r2, [r3, #0]

  return;
 8001e3e:	bf00      	nop
}
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200040f0 	.word	0x200040f0

08001e50 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	460a      	mov	r2, r1
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <LinkTimerBefore+0xb8>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	79ba      	ldrb	r2, [r7, #6]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d032      	beq.n	8001ed2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001e6c:	79ba      	ldrb	r2, [r7, #6]
 8001e6e:	4927      	ldr	r1, [pc, #156]	; (8001f0c <LinkTimerBefore+0xbc>)
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	3314      	adds	r3, #20
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	4922      	ldr	r1, [pc, #136]	; (8001f0c <LinkTimerBefore+0xbc>)
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3315      	adds	r3, #21
 8001e90:	79fa      	ldrb	r2, [r7, #7]
 8001e92:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e94:	79fa      	ldrb	r2, [r7, #7]
 8001e96:	491d      	ldr	r1, [pc, #116]	; (8001f0c <LinkTimerBefore+0xbc>)
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3315      	adds	r3, #21
 8001ea4:	79ba      	ldrb	r2, [r7, #6]
 8001ea6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001ea8:	79fa      	ldrb	r2, [r7, #7]
 8001eaa:	4918      	ldr	r1, [pc, #96]	; (8001f0c <LinkTimerBefore+0xbc>)
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3314      	adds	r3, #20
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001ebc:	79ba      	ldrb	r2, [r7, #6]
 8001ebe:	4913      	ldr	r1, [pc, #76]	; (8001f0c <LinkTimerBefore+0xbc>)
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	440b      	add	r3, r1
 8001eca:	3314      	adds	r3, #20
 8001ecc:	79fa      	ldrb	r2, [r7, #7]
 8001ece:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001ed0:	e014      	b.n	8001efc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ed2:	79fa      	ldrb	r2, [r7, #7]
 8001ed4:	490d      	ldr	r1, [pc, #52]	; (8001f0c <LinkTimerBefore+0xbc>)
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	3315      	adds	r3, #21
 8001ee2:	79ba      	ldrb	r2, [r7, #6]
 8001ee4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001ee6:	79ba      	ldrb	r2, [r7, #6]
 8001ee8:	4908      	ldr	r1, [pc, #32]	; (8001f0c <LinkTimerBefore+0xbc>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3314      	adds	r3, #20
 8001ef6:	79fa      	ldrb	r2, [r7, #7]
 8001ef8:	701a      	strb	r2, [r3, #0]
  return;
 8001efa:	bf00      	nop
}
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20004180 	.word	0x20004180
 8001f0c:	200040f0 	.word	0x200040f0

08001f10 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f1a:	4b4e      	ldr	r3, [pc, #312]	; (8002054 <linkTimer+0x144>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b06      	cmp	r3, #6
 8001f22:	d118      	bne.n	8001f56 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001f24:	4b4b      	ldr	r3, [pc, #300]	; (8002054 <linkTimer+0x144>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <linkTimer+0x148>)
 8001f2c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001f2e:	4a49      	ldr	r2, [pc, #292]	; (8002054 <linkTimer+0x144>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001f34:	79fa      	ldrb	r2, [r7, #7]
 8001f36:	4949      	ldr	r1, [pc, #292]	; (800205c <linkTimer+0x14c>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	3315      	adds	r3, #21
 8001f44:	2206      	movs	r2, #6
 8001f46:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f48:	4b45      	ldr	r3, [pc, #276]	; (8002060 <linkTimer+0x150>)
 8001f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f4e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	81fb      	strh	r3, [r7, #14]
 8001f54:	e078      	b.n	8002048 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001f56:	f000 f909 	bl	800216c <ReturnTimeElapsed>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001f5e:	79fa      	ldrb	r2, [r7, #7]
 8001f60:	493e      	ldr	r1, [pc, #248]	; (800205c <linkTimer+0x14c>)
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	6819      	ldr	r1, [r3, #0]
 8001f70:	89fb      	ldrh	r3, [r7, #14]
 8001f72:	79fa      	ldrb	r2, [r7, #7]
 8001f74:	4419      	add	r1, r3
 8001f76:	4839      	ldr	r0, [pc, #228]	; (800205c <linkTimer+0x14c>)
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4403      	add	r3, r0
 8001f82:	3308      	adds	r3, #8
 8001f84:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001f86:	79fa      	ldrb	r2, [r7, #7]
 8001f88:	4934      	ldr	r1, [pc, #208]	; (800205c <linkTimer+0x14c>)
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	3308      	adds	r3, #8
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001f9a:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <linkTimer+0x144>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4a2e      	ldr	r2, [pc, #184]	; (800205c <linkTimer+0x14c>)
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	440b      	add	r3, r1
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	3308      	adds	r3, #8
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d337      	bcc.n	8002028 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <linkTimer+0x144>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001fbe:	7b7a      	ldrb	r2, [r7, #13]
 8001fc0:	4926      	ldr	r1, [pc, #152]	; (800205c <linkTimer+0x14c>)
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	440b      	add	r3, r1
 8001fcc:	3315      	adds	r3, #21
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001fd2:	e013      	b.n	8001ffc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001fd4:	7b7a      	ldrb	r2, [r7, #13]
 8001fd6:	4921      	ldr	r1, [pc, #132]	; (800205c <linkTimer+0x14c>)
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3315      	adds	r3, #21
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001fe8:	7b7a      	ldrb	r2, [r7, #13]
 8001fea:	491c      	ldr	r1, [pc, #112]	; (800205c <linkTimer+0x14c>)
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3315      	adds	r3, #21
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001ffc:	7b3b      	ldrb	r3, [r7, #12]
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d00b      	beq.n	800201a <linkTimer+0x10a>
 8002002:	7b3a      	ldrb	r2, [r7, #12]
 8002004:	4915      	ldr	r1, [pc, #84]	; (800205c <linkTimer+0x14c>)
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	3308      	adds	r3, #8
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	429a      	cmp	r2, r3
 8002018:	d2dc      	bcs.n	8001fd4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800201a:	7b7a      	ldrb	r2, [r7, #13]
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fecf 	bl	8001dc4 <LinkTimerAfter>
 8002026:	e00f      	b.n	8002048 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <linkTimer+0x144>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff0c 	bl	8001e50 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <linkTimer+0x144>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <linkTimer+0x148>)
 8002040:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <linkTimer+0x144>)
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002048:	89fb      	ldrh	r3, [r7, #14]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20004180 	.word	0x20004180
 8002058:	20004181 	.word	0x20004181
 800205c:	200040f0 	.word	0x200040f0
 8002060:	20004184 	.word	0x20004184

08002064 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	460a      	mov	r2, r1
 800206e:	71fb      	strb	r3, [r7, #7]
 8002070:	4613      	mov	r3, r2
 8002072:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002074:	4b39      	ldr	r3, [pc, #228]	; (800215c <UnlinkTimer+0xf8>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	79fa      	ldrb	r2, [r7, #7]
 800207c:	429a      	cmp	r2, r3
 800207e:	d111      	bne.n	80020a4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002080:	4b36      	ldr	r3, [pc, #216]	; (800215c <UnlinkTimer+0xf8>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b36      	ldr	r3, [pc, #216]	; (8002160 <UnlinkTimer+0xfc>)
 8002088:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800208a:	79fa      	ldrb	r2, [r7, #7]
 800208c:	4935      	ldr	r1, [pc, #212]	; (8002164 <UnlinkTimer+0x100>)
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	3315      	adds	r3, #21
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b2f      	ldr	r3, [pc, #188]	; (800215c <UnlinkTimer+0xf8>)
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e03e      	b.n	8002122 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80020a4:	79fa      	ldrb	r2, [r7, #7]
 80020a6:	492f      	ldr	r1, [pc, #188]	; (8002164 <UnlinkTimer+0x100>)
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	3314      	adds	r3, #20
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80020b8:	79fa      	ldrb	r2, [r7, #7]
 80020ba:	492a      	ldr	r1, [pc, #168]	; (8002164 <UnlinkTimer+0x100>)
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	3315      	adds	r3, #21
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80020cc:	79f9      	ldrb	r1, [r7, #7]
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	4824      	ldr	r0, [pc, #144]	; (8002164 <UnlinkTimer+0x100>)
 80020d2:	460b      	mov	r3, r1
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	440b      	add	r3, r1
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4403      	add	r3, r0
 80020dc:	3315      	adds	r3, #21
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b2d8      	uxtb	r0, r3
 80020e2:	4920      	ldr	r1, [pc, #128]	; (8002164 <UnlinkTimer+0x100>)
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	3315      	adds	r3, #21
 80020f0:	4602      	mov	r2, r0
 80020f2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020f4:	7bbb      	ldrb	r3, [r7, #14]
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d013      	beq.n	8002122 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80020fa:	79f9      	ldrb	r1, [r7, #7]
 80020fc:	7bba      	ldrb	r2, [r7, #14]
 80020fe:	4819      	ldr	r0, [pc, #100]	; (8002164 <UnlinkTimer+0x100>)
 8002100:	460b      	mov	r3, r1
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	440b      	add	r3, r1
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4403      	add	r3, r0
 800210a:	3314      	adds	r3, #20
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b2d8      	uxtb	r0, r3
 8002110:	4914      	ldr	r1, [pc, #80]	; (8002164 <UnlinkTimer+0x100>)
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	440b      	add	r3, r1
 800211c:	3314      	adds	r3, #20
 800211e:	4602      	mov	r2, r0
 8002120:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002122:	79fa      	ldrb	r2, [r7, #7]
 8002124:	490f      	ldr	r1, [pc, #60]	; (8002164 <UnlinkTimer+0x100>)
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	330c      	adds	r3, #12
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <UnlinkTimer+0xf8>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b06      	cmp	r3, #6
 800213e:	d107      	bne.n	8002150 <UnlinkTimer+0xec>
 8002140:	79bb      	ldrb	r3, [r7, #6]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d104      	bne.n	8002150 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <UnlinkTimer+0x104>)
 8002148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800214c:	601a      	str	r2, [r3, #0]
  }

  return;
 800214e:	bf00      	nop
 8002150:	bf00      	nop
}
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	20004180 	.word	0x20004180
 8002160:	20004181 	.word	0x20004181
 8002164:	200040f0 	.word	0x200040f0
 8002168:	20004184 	.word	0x20004184

0800216c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <ReturnTimeElapsed+0x70>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800217a:	d026      	beq.n	80021ca <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800217c:	f7ff fe02 	bl	8001d84 <ReadRtcSsrValue>
 8002180:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002182:	4b16      	ldr	r3, [pc, #88]	; (80021dc <ReturnTimeElapsed+0x70>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	d805      	bhi.n	8002198 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <ReturnTimeElapsed+0x70>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	e00a      	b.n	80021ae <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <ReturnTimeElapsed+0x74>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <ReturnTimeElapsed+0x70>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <ReturnTimeElapsed+0x78>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	fb02 f303 	mul.w	r3, r2, r3
 80021ba:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <ReturnTimeElapsed+0x7c>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	40d3      	lsrs	r3, r2
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	e001      	b.n	80021ce <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	b29b      	uxth	r3, r3
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20004184 	.word	0x20004184
 80021e0:	2000418c 	.word	0x2000418c
 80021e4:	2000418a 	.word	0x2000418a
 80021e8:	20004189 	.word	0x20004189

080021ec <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d108      	bne.n	800220e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80021fc:	f7ff fdc2 	bl	8001d84 <ReadRtcSsrValue>
 8002200:	4603      	mov	r3, r0
 8002202:	4a21      	ldr	r2, [pc, #132]	; (8002288 <RestartWakeupCounter+0x9c>)
 8002204:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002206:	2003      	movs	r0, #3
 8002208:	f005 ffe5 	bl	80081d6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800220c:	e039      	b.n	8002282 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d803      	bhi.n	800221c <RestartWakeupCounter+0x30>
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <RestartWakeupCounter+0xa0>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d002      	beq.n	8002222 <RestartWakeupCounter+0x36>
      Value -= 1;
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	3b01      	subs	r3, #1
 8002220:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002222:	bf00      	nop
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <RestartWakeupCounter+0xa4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f8      	beq.n	8002224 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <RestartWakeupCounter+0xa4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <RestartWakeupCounter+0xa4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002242:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <RestartWakeupCounter+0xa8>)
 8002246:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800224a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800224c:	2003      	movs	r0, #3
 800224e:	f005 ffd0 	bl	80081f2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <RestartWakeupCounter+0xac>)
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	88fa      	ldrh	r2, [r7, #6]
 800225c:	490e      	ldr	r1, [pc, #56]	; (8002298 <RestartWakeupCounter+0xac>)
 800225e:	4313      	orrs	r3, r2
 8002260:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002262:	f7ff fd8f 	bl	8001d84 <ReadRtcSsrValue>
 8002266:	4603      	mov	r3, r0
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <RestartWakeupCounter+0x9c>)
 800226a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <RestartWakeupCounter+0xa4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <RestartWakeupCounter+0xa4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800227a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800227c:	f3af 8000 	nop.w
  return ;
 8002280:	bf00      	nop
}
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20004184 	.word	0x20004184
 800228c:	20004189 	.word	0x20004189
 8002290:	200043d0 	.word	0x200043d0
 8002294:	58000800 	.word	0x58000800
 8002298:	40002800 	.word	0x40002800

0800229c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80022a2:	4b45      	ldr	r3, [pc, #276]	; (80023b8 <RescheduleTimerList+0x11c>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ae:	d107      	bne.n	80022c0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80022b0:	bf00      	nop
 80022b2:	4b42      	ldr	r3, [pc, #264]	; (80023bc <RescheduleTimerList+0x120>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f8      	bne.n	80022b2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80022c0:	4b3e      	ldr	r3, [pc, #248]	; (80023bc <RescheduleTimerList+0x120>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <RescheduleTimerList+0x120>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ce:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80022d0:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <RescheduleTimerList+0x124>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	493a      	ldr	r1, [pc, #232]	; (80023c4 <RescheduleTimerList+0x128>)
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	3308      	adds	r3, #8
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80022ea:	f7ff ff3f 	bl	800216c <ReturnTimeElapsed>
 80022ee:	4603      	mov	r3, r0
 80022f0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d205      	bcs.n	8002306 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80022fe:	4b32      	ldr	r3, [pc, #200]	; (80023c8 <RescheduleTimerList+0x12c>)
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
 8002304:	e04d      	b.n	80023a2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	4a30      	ldr	r2, [pc, #192]	; (80023cc <RescheduleTimerList+0x130>)
 800230a:	8812      	ldrh	r2, [r2, #0]
 800230c:	b292      	uxth	r2, r2
 800230e:	4413      	add	r3, r2
 8002310:	461a      	mov	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4293      	cmp	r3, r2
 8002316:	d906      	bls.n	8002326 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002318:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <RescheduleTimerList+0x130>)
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800231e:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <RescheduleTimerList+0x12c>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
 8002324:	e03d      	b.n	80023a2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	b29a      	uxth	r2, r3
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <RescheduleTimerList+0x12c>)
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002336:	e034      	b.n	80023a2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	4922      	ldr	r1, [pc, #136]	; (80023c4 <RescheduleTimerList+0x128>)
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3308      	adds	r3, #8
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	429a      	cmp	r2, r3
 800234e:	d20a      	bcs.n	8002366 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	491c      	ldr	r1, [pc, #112]	; (80023c4 <RescheduleTimerList+0x128>)
 8002354:	4613      	mov	r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	3308      	adds	r3, #8
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e013      	b.n	800238e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	4916      	ldr	r1, [pc, #88]	; (80023c4 <RescheduleTimerList+0x128>)
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	3308      	adds	r3, #8
 8002376:	6819      	ldr	r1, [r3, #0]
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	1ac9      	subs	r1, r1, r3
 800237e:	4811      	ldr	r0, [pc, #68]	; (80023c4 <RescheduleTimerList+0x128>)
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4403      	add	r3, r0
 800238a:	3308      	adds	r3, #8
 800238c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <RescheduleTimerList+0x128>)
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	440b      	add	r3, r1
 800239c:	3315      	adds	r3, #21
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	2b06      	cmp	r3, #6
 80023a6:	d1c7      	bne.n	8002338 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80023a8:	89bb      	ldrh	r3, [r7, #12]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ff1e 	bl	80021ec <RestartWakeupCounter>

  return ;
 80023b0:	bf00      	nop
}
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40002800 	.word	0x40002800
 80023bc:	200043d0 	.word	0x200043d0
 80023c0:	20004180 	.word	0x20004180
 80023c4:	200040f0 	.word	0x200040f0
 80023c8:	20004188 	.word	0x20004188
 80023cc:	2000418e 	.word	0x2000418e

080023d0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	; 0x28
 80023d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023d6:	f3ef 8310 	mrs	r3, PRIMASK
 80023da:	617b      	str	r3, [r7, #20]
  return(result);
 80023dc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80023e0:	b672      	cpsid	i
}
 80023e2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023e4:	4b59      	ldr	r3, [pc, #356]	; (800254c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	22ca      	movs	r2, #202	; 0xca
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24
 80023ec:	4b57      	ldr	r3, [pc, #348]	; (800254c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2253      	movs	r2, #83	; 0x53
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80023f4:	4b55      	ldr	r3, [pc, #340]	; (800254c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	4b54      	ldr	r3, [pc, #336]	; (800254c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002402:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002404:	4b52      	ldr	r3, [pc, #328]	; (8002550 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800240c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002410:	4950      	ldr	r1, [pc, #320]	; (8002554 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002412:	4613      	mov	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	440b      	add	r3, r1
 800241c:	330c      	adds	r3, #12
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d16e      	bne.n	8002504 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002426:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800242a:	494a      	ldr	r1, [pc, #296]	; (8002554 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800243a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800243e:	4945      	ldr	r1, [pc, #276]	; (8002554 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	3310      	adds	r3, #16
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002450:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d04c      	beq.n	80024f4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800245a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800245e:	493d      	ldr	r1, [pc, #244]	; (8002554 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	330d      	adds	r3, #13
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d124      	bne.n	80024be <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002474:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002478:	2101      	movs	r1, #1
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fdf2 	bl	8002064 <UnlinkTimer>
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f383 8810 	msr	PRIMASK, r3
}
 800248a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800248c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002490:	4930      	ldr	r1, [pc, #192]	; (8002554 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	3304      	adds	r3, #4
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fa32 	bl	8002910 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	22ca      	movs	r2, #202	; 0xca
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2253      	movs	r2, #83	; 0x53
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24
 80024bc:	e012      	b.n	80024e4 <HW_TS_RTC_Wakeup_Handler+0x114>
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f383 8810 	msr	PRIMASK, r3
}
 80024c8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80024ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f99a 	bl	8002808 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	22ca      	movs	r2, #202	; 0xca
 80024da:	625a      	str	r2, [r3, #36]	; 0x24
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2253      	movs	r2, #83	; 0x53
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80024e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	4619      	mov	r1, r3
 80024ec:	69b8      	ldr	r0, [r7, #24]
 80024ee:	f000 fa95 	bl	8002a1c <HW_TS_RTC_Int_AppNot>
 80024f2:	e022      	b.n	800253a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80024f4:	f7ff fed2 	bl	800229c <RescheduleTimerList>
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f383 8810 	msr	PRIMASK, r3
}
 8002502:	e01a      	b.n	800253a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002504:	bf00      	nop
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f8      	beq.n	8002506 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002514:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002524:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002528:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f383 8810 	msr	PRIMASK, r3
}
 8002538:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	22ff      	movs	r2, #255	; 0xff
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002542:	bf00      	nop
}
 8002544:	3728      	adds	r7, #40	; 0x28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200043d0 	.word	0x200043d0
 8002550:	20004180 	.word	0x20004180
 8002554:	200040f0 	.word	0x200040f0
 8002558:	20004188 	.word	0x20004188
 800255c:	58000800 	.word	0x58000800

08002560 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800256c:	4b5e      	ldr	r3, [pc, #376]	; (80026e8 <HW_TS_Init+0x188>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	22ca      	movs	r2, #202	; 0xca
 8002572:	625a      	str	r2, [r3, #36]	; 0x24
 8002574:	4b5c      	ldr	r3, [pc, #368]	; (80026e8 <HW_TS_Init+0x188>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2253      	movs	r2, #83	; 0x53
 800257a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800257c:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <HW_TS_Init+0x18c>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4a5a      	ldr	r2, [pc, #360]	; (80026ec <HW_TS_Init+0x18c>)
 8002582:	f043 0320 	orr.w	r3, r3, #32
 8002586:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002588:	4b58      	ldr	r3, [pc, #352]	; (80026ec <HW_TS_Init+0x18c>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f1c3 0304 	rsb	r3, r3, #4
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b55      	ldr	r3, [pc, #340]	; (80026f0 <HW_TS_Init+0x190>)
 800259c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800259e:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HW_TS_Init+0x18c>)
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80025a6:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80025aa:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	fa92 f2a2 	rbit	r2, r2
 80025b2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	2a00      	cmp	r2, #0
 80025bc:	d101      	bne.n	80025c2 <HW_TS_Init+0x62>
  {
    return 32U;
 80025be:	2220      	movs	r2, #32
 80025c0:	e003      	b.n	80025ca <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	fab2 f282 	clz	r2, r2
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	40d3      	lsrs	r3, r2
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4b48      	ldr	r3, [pc, #288]	; (80026f4 <HW_TS_Init+0x194>)
 80025d4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80025d6:	4b45      	ldr	r3, [pc, #276]	; (80026ec <HW_TS_Init+0x18c>)
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	4b44      	ldr	r3, [pc, #272]	; (80026f8 <HW_TS_Init+0x198>)
 80025e8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80025ea:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HW_TS_Init+0x198>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	4a40      	ldr	r2, [pc, #256]	; (80026f4 <HW_TS_Init+0x194>)
 80025f2:	7812      	ldrb	r2, [r2, #0]
 80025f4:	fb02 f303 	mul.w	r3, r2, r3
 80025f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025fc:	4a3c      	ldr	r2, [pc, #240]	; (80026f0 <HW_TS_Init+0x190>)
 80025fe:	7812      	ldrb	r2, [r2, #0]
 8002600:	40d3      	lsrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800260a:	4293      	cmp	r3, r2
 800260c:	d904      	bls.n	8002618 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800260e:	4b3b      	ldr	r3, [pc, #236]	; (80026fc <HW_TS_Init+0x19c>)
 8002610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002614:	801a      	strh	r2, [r3, #0]
 8002616:	e003      	b.n	8002620 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	b29a      	uxth	r2, r3
 800261c:	4b37      	ldr	r3, [pc, #220]	; (80026fc <HW_TS_Init+0x19c>)
 800261e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002620:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002624:	f7ff fb9c 	bl	8001d60 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002628:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800262c:	f7ff fb84 	bl	8001d38 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d13d      	bne.n	80026b2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002636:	4b32      	ldr	r3, [pc, #200]	; (8002700 <HW_TS_Init+0x1a0>)
 8002638:	2201      	movs	r2, #1
 800263a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800263c:	4b31      	ldr	r3, [pc, #196]	; (8002704 <HW_TS_Init+0x1a4>)
 800263e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002642:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002644:	2300      	movs	r3, #0
 8002646:	77fb      	strb	r3, [r7, #31]
 8002648:	e00c      	b.n	8002664 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800264a:	7ffa      	ldrb	r2, [r7, #31]
 800264c:	492e      	ldr	r1, [pc, #184]	; (8002708 <HW_TS_Init+0x1a8>)
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	330c      	adds	r3, #12
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800265e:	7ffb      	ldrb	r3, [r7, #31]
 8002660:	3301      	adds	r3, #1
 8002662:	77fb      	strb	r3, [r7, #31]
 8002664:	7ffb      	ldrb	r3, [r7, #31]
 8002666:	2b05      	cmp	r3, #5
 8002668:	d9ef      	bls.n	800264a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800266a:	4b28      	ldr	r3, [pc, #160]	; (800270c <HW_TS_Init+0x1ac>)
 800266c:	2206      	movs	r2, #6
 800266e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HW_TS_Init+0x188>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <HW_TS_Init+0x188>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HW_TS_Init+0x188>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <HW_TS_Init+0x188>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002690:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002692:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <HW_TS_Init+0x1b0>)
 8002694:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002698:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800269a:	2003      	movs	r0, #3
 800269c:	f005 fda9 	bl	80081f2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HW_TS_Init+0x188>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <HW_TS_Init+0x188>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	e009      	b.n	80026c6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <HW_TS_Init+0x188>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80026c0:	2003      	movs	r0, #3
 80026c2:	f005 fd88 	bl	80081d6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HW_TS_Init+0x188>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	22ff      	movs	r2, #255	; 0xff
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80026ce:	2200      	movs	r2, #0
 80026d0:	2103      	movs	r1, #3
 80026d2:	2003      	movs	r0, #3
 80026d4:	f005 fd3d 	bl	8008152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80026d8:	2003      	movs	r0, #3
 80026da:	f005 fd54 	bl	8008186 <HAL_NVIC_EnableIRQ>

  return;
 80026de:	bf00      	nop
}
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200043d0 	.word	0x200043d0
 80026ec:	40002800 	.word	0x40002800
 80026f0:	20004189 	.word	0x20004189
 80026f4:	2000418a 	.word	0x2000418a
 80026f8:	2000418c 	.word	0x2000418c
 80026fc:	2000418e 	.word	0x2000418e
 8002700:	20004188 	.word	0x20004188
 8002704:	20004184 	.word	0x20004184
 8002708:	200040f0 	.word	0x200040f0
 800270c:	20004180 	.word	0x20004180
 8002710:	58000800 	.word	0x58000800

08002714 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002714:	b480      	push	{r7}
 8002716:	b08b      	sub	sp, #44	; 0x2c
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	4613      	mov	r3, r2
 8002722:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800272a:	f3ef 8310 	mrs	r3, PRIMASK
 800272e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002730:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002732:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002734:	b672      	cpsid	i
}
 8002736:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002738:	e004      	b.n	8002744 <HW_TS_Create+0x30>
  {
    loop++;
 800273a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800273e:	3301      	adds	r3, #1
 8002740:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002744:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002748:	2b05      	cmp	r3, #5
 800274a:	d80c      	bhi.n	8002766 <HW_TS_Create+0x52>
 800274c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002750:	492c      	ldr	r1, [pc, #176]	; (8002804 <HW_TS_Create+0xf0>)
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	330c      	adds	r3, #12
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1e9      	bne.n	800273a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002766:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800276a:	2b06      	cmp	r3, #6
 800276c:	d038      	beq.n	80027e0 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800276e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002772:	4924      	ldr	r1, [pc, #144]	; (8002804 <HW_TS_Create+0xf0>)
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	440b      	add	r3, r1
 800277e:	330c      	adds	r3, #12
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	f383 8810 	msr	PRIMASK, r3
}
 800278e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002790:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002794:	491b      	ldr	r1, [pc, #108]	; (8002804 <HW_TS_Create+0xf0>)
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	440b      	add	r3, r1
 80027a0:	3310      	adds	r3, #16
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80027a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80027aa:	4916      	ldr	r1, [pc, #88]	; (8002804 <HW_TS_Create+0xf0>)
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	330d      	adds	r3, #13
 80027b8:	79fa      	ldrb	r2, [r7, #7]
 80027ba:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80027bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80027c0:	4910      	ldr	r1, [pc, #64]	; (8002804 <HW_TS_Create+0xf0>)
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80027d6:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80027d8:	2300      	movs	r3, #0
 80027da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80027de:	e008      	b.n	80027f2 <HW_TS_Create+0xde>
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f383 8810 	msr	PRIMASK, r3
}
 80027ea:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80027ec:	2301      	movs	r3, #1
 80027ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80027f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	372c      	adds	r7, #44	; 0x2c
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	200040f0 	.word	0x200040f0

08002808 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002812:	f3ef 8310 	mrs	r3, PRIMASK
 8002816:	60fb      	str	r3, [r7, #12]
  return(result);
 8002818:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800281a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800281c:	b672      	cpsid	i
}
 800281e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002820:	2003      	movs	r0, #3
 8002822:	f005 fcbe 	bl	80081a2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002826:	4b34      	ldr	r3, [pc, #208]	; (80028f8 <HW_TS_Stop+0xf0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	22ca      	movs	r2, #202	; 0xca
 800282c:	625a      	str	r2, [r3, #36]	; 0x24
 800282e:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <HW_TS_Stop+0xf0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2253      	movs	r2, #83	; 0x53
 8002834:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002836:	79fa      	ldrb	r2, [r7, #7]
 8002838:	4930      	ldr	r1, [pc, #192]	; (80028fc <HW_TS_Stop+0xf4>)
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	440b      	add	r3, r1
 8002844:	330c      	adds	r3, #12
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d142      	bne.n	80028d4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fc06 	bl	8002064 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002858:	4b29      	ldr	r3, [pc, #164]	; (8002900 <HW_TS_Stop+0xf8>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	2b06      	cmp	r3, #6
 8002862:	d12f      	bne.n	80028c4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002864:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HW_TS_Stop+0xfc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002870:	d107      	bne.n	8002882 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002872:	bf00      	nop
 8002874:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HW_TS_Stop+0xf0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f8      	bne.n	8002874 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HW_TS_Stop+0xf0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HW_TS_Stop+0xf0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002890:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002892:	bf00      	nop
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <HW_TS_Stop+0xf0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f8      	beq.n	8002894 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HW_TS_Stop+0xf0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <HW_TS_Stop+0xf0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80028b2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80028b4:	4b14      	ldr	r3, [pc, #80]	; (8002908 <HW_TS_Stop+0x100>)
 80028b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80028ba:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80028bc:	2003      	movs	r0, #3
 80028be:	f005 fc98 	bl	80081f2 <HAL_NVIC_ClearPendingIRQ>
 80028c2:	e007      	b.n	80028d4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <HW_TS_Stop+0x104>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	7cfa      	ldrb	r2, [r7, #19]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80028d0:	f7ff fce4 	bl	800229c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <HW_TS_Stop+0xf0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	22ff      	movs	r2, #255	; 0xff
 80028da:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80028dc:	2003      	movs	r0, #3
 80028de:	f005 fc52 	bl	8008186 <HAL_NVIC_EnableIRQ>
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f383 8810 	msr	PRIMASK, r3
}
 80028ec:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80028ee:	bf00      	nop
}
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200043d0 	.word	0x200043d0
 80028fc:	200040f0 	.word	0x200040f0
 8002900:	20004180 	.word	0x20004180
 8002904:	40002800 	.word	0x40002800
 8002908:	58000800 	.word	0x58000800
 800290c:	20004181 	.word	0x20004181

08002910 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800291c:	79fa      	ldrb	r2, [r7, #7]
 800291e:	493b      	ldr	r1, [pc, #236]	; (8002a0c <HW_TS_Start+0xfc>)
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	330c      	adds	r3, #12
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d103      	bne.n	800293c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff66 	bl	8002808 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800293c:	f3ef 8310 	mrs	r3, PRIMASK
 8002940:	60fb      	str	r3, [r7, #12]
  return(result);
 8002942:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002944:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002946:	b672      	cpsid	i
}
 8002948:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800294a:	2003      	movs	r0, #3
 800294c:	f005 fc29 	bl	80081a2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002950:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <HW_TS_Start+0x100>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	22ca      	movs	r2, #202	; 0xca
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
 8002958:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <HW_TS_Start+0x100>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2253      	movs	r2, #83	; 0x53
 800295e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002960:	79fa      	ldrb	r2, [r7, #7]
 8002962:	492a      	ldr	r1, [pc, #168]	; (8002a0c <HW_TS_Start+0xfc>)
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	440b      	add	r3, r1
 800296e:	330c      	adds	r3, #12
 8002970:	2202      	movs	r2, #2
 8002972:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002974:	79fa      	ldrb	r2, [r7, #7]
 8002976:	4925      	ldr	r1, [pc, #148]	; (8002a0c <HW_TS_Start+0xfc>)
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	440b      	add	r3, r1
 8002982:	3308      	adds	r3, #8
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002988:	79fa      	ldrb	r2, [r7, #7]
 800298a:	4920      	ldr	r1, [pc, #128]	; (8002a0c <HW_TS_Start+0xfc>)
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	3304      	adds	r3, #4
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fab6 	bl	8001f10 <linkTimer>
 80029a4:	4603      	mov	r3, r0
 80029a6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80029a8:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <HW_TS_Start+0x104>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80029ae:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <HW_TS_Start+0x108>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	7c7a      	ldrb	r2, [r7, #17]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d002      	beq.n	80029c0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80029ba:	f7ff fc6f 	bl	800229c <RescheduleTimerList>
 80029be:	e013      	b.n	80029e8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80029c0:	79fa      	ldrb	r2, [r7, #7]
 80029c2:	4912      	ldr	r1, [pc, #72]	; (8002a0c <HW_TS_Start+0xfc>)
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	440b      	add	r3, r1
 80029ce:	3308      	adds	r3, #8
 80029d0:	6819      	ldr	r1, [r3, #0]
 80029d2:	8a7b      	ldrh	r3, [r7, #18]
 80029d4:	79fa      	ldrb	r2, [r7, #7]
 80029d6:	1ac9      	subs	r1, r1, r3
 80029d8:	480c      	ldr	r0, [pc, #48]	; (8002a0c <HW_TS_Start+0xfc>)
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4403      	add	r3, r0
 80029e4:	3308      	adds	r3, #8
 80029e6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HW_TS_Start+0x100>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	22ff      	movs	r2, #255	; 0xff
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80029f0:	2003      	movs	r0, #3
 80029f2:	f005 fbc8 	bl	8008186 <HAL_NVIC_EnableIRQ>
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f383 8810 	msr	PRIMASK, r3
}
 8002a00:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002a02:	bf00      	nop
}
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200040f0 	.word	0x200040f0
 8002a10:	200043d0 	.word	0x200043d0
 8002a14:	20004180 	.word	0x20004180
 8002a18:	20004181 	.word	0x20004181

08002a1c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	460b      	mov	r3, r1
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4798      	blx	r3

  return;
 8002a2e:	bf00      	nop
}
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HW_UART_Init>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Init(hw_uart_id_t hw_uart_id)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	71fb      	strb	r3, [r7, #7]
	switch (hw_uart_id)
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HW_UART_Init+0x16>
	{
#if (CFG_HW_USART1_ENABLED == 1)
		case hw_uart1:
			MX_USART1_UART_Init();
 8002a46:	f000 f9a7 	bl	8002d98 <MX_USART1_UART_Init>
			break;
 8002a4a:	e000      	b.n	8002a4e <HW_UART_Init+0x18>
			MX_LPUART1_UART_Init();
			break;
#endif

		default:
			break;
 8002a4c:	bf00      	nop
		}
	return;
 8002a4e:	bf00      	nop
}
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <HW_UART_Receive_IT>:

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	4603      	mov	r3, r0
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	4613      	mov	r3, r2
 8002a68:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10c      	bne.n	8002a8a <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8002a70:	4a08      	ldr	r2, [pc, #32]	; (8002a94 <HW_UART_Receive_IT+0x3c>)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HW_UART_Receive_IT+0x40>)
 8002a78:	4a08      	ldr	r2, [pc, #32]	; (8002a9c <HW_UART_Receive_IT+0x44>)
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	89bb      	ldrh	r3, [r7, #12]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	4805      	ldr	r0, [pc, #20]	; (8002a98 <HW_UART_Receive_IT+0x40>)
 8002a84:	f008 fbc2 	bl	800b20c <HAL_UART_Receive_IT>
            break;
 8002a88:	e000      	b.n	8002a8c <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002a8a:	bf00      	nop
    }

    return;
 8002a8c:	bf00      	nop
}
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20004190 	.word	0x20004190
 8002a98:	20004268 	.word	0x20004268
 8002a9c:	40013800 	.word	0x40013800

08002aa0 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	4603      	mov	r3, r0
 8002aac:	73fb      	strb	r3, [r7, #15]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10e      	bne.n	8002ade <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002ac0:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <HW_UART_Transmit_DMA+0x80>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HW_UART_Transmit_DMA+0x84>)
 8002ac8:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <HW_UART_Transmit_DMA+0x88>)
 8002aca:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002acc:	89bb      	ldrh	r3, [r7, #12]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	4814      	ldr	r0, [pc, #80]	; (8002b24 <HW_UART_Transmit_DMA+0x84>)
 8002ad4:	f008 fbe6 	bl	800b2a4 <HAL_UART_Transmit_DMA>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	75fb      	strb	r3, [r7, #23]
            break;
 8002adc:	e000      	b.n	8002ae0 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002ade:	bf00      	nop
    }

    switch (hal_status)
 8002ae0:	7dfb      	ldrb	r3, [r7, #23]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d816      	bhi.n	8002b14 <HW_UART_Transmit_DMA+0x74>
 8002ae6:	a201      	add	r2, pc, #4	; (adr r2, 8002aec <HW_UART_Transmit_DMA+0x4c>)
 8002ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aec:	08002afd 	.word	0x08002afd
 8002af0:	08002b03 	.word	0x08002b03
 8002af4:	08002b09 	.word	0x08002b09
 8002af8:	08002b0f 	.word	0x08002b0f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002afc:	2300      	movs	r3, #0
 8002afe:	75bb      	strb	r3, [r7, #22]
            break;
 8002b00:	e009      	b.n	8002b16 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75bb      	strb	r3, [r7, #22]
            break;
 8002b06:	e006      	b.n	8002b16 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	75bb      	strb	r3, [r7, #22]
            break;
 8002b0c:	e003      	b.n	8002b16 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	75bb      	strb	r3, [r7, #22]
            break;
 8002b12:	e000      	b.n	8002b16 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002b14:	bf00      	nop
    }

    return hw_status;
 8002b16:	7dbb      	ldrb	r3, [r7, #22]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20004194 	.word	0x20004194
 8002b24:	20004268 	.word	0x20004268
 8002b28:	40013800 	.word	0x40013800

08002b2c <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_UART_RxCpltCallback+0x34>)
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d107      	bne.n	8002b50 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <HAL_UART_RxCpltCallback+0x38>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_UART_RxCpltCallback+0x38>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4798      	blx	r3
            }
            break;
 8002b4e:	e001      	b.n	8002b54 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002b50:	bf00      	nop
 8002b52:	e000      	b.n	8002b56 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8002b54:	bf00      	nop
    }

    return;
 8002b56:	bf00      	nop
}
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40013800 	.word	0x40013800
 8002b64:	20004190 	.word	0x20004190

08002b68 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_UART_TxCpltCallback+0x34>)
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d107      	bne.n	8002b8c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <HAL_UART_TxCpltCallback+0x38>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_UART_TxCpltCallback+0x38>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4798      	blx	r3
            }
            break;
 8002b8a:	e001      	b.n	8002b90 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002b8c:	bf00      	nop
 8002b8e:	e000      	b.n	8002b92 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002b90:	bf00      	nop
    }

    return;
 8002b92:	bf00      	nop
}
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40013800 	.word	0x40013800
 8002ba0:	20004194 	.word	0x20004194

08002ba4 <LL_RCC_LSE_SetDriveCapability>:
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	f023 0218 	bic.w	r2, r3, #24
 8002bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_AHB1_GRP1_EnableClock>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_AHB2_GRP1_EnableClock>:
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4013      	ands	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c26:	68fb      	ldr	r3, [r7, #12]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c38:	f005 f8b2 	bl	8007da0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002c3c:	f7fe fc16 	bl	800146c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c40:	f000 f818 	bl	8002c74 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002c44:	f000 f874 	bl	8002d30 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8002c48:	f000 f892 	bl	8002d70 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c4c:	f000 f961 	bl	8002f12 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c50:	f000 f942 	bl	8002ed8 <MX_DMA_Init>
  MX_RF_Init();
 8002c54:	f000 f8ee 	bl	8002e34 <MX_RF_Init>
  MX_RTC_Init();
 8002c58:	f000 f90a 	bl	8002e70 <MX_RTC_Init>
  MX_RNG_Init();
 8002c5c:	f000 f8f2 	bl	8002e44 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  /* Enable CRC clock */
  __HAL_RCC_CRC_CLK_ENABLE();
 8002c60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c64:	f7ff ffb4 	bl	8002bd0 <LL_AHB1_GRP1_EnableClock>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002c68:	f7fe fc0e 	bl	8001488 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002c6c:	f7fe fe6e 	bl	800194c <MX_APPE_Process>
 8002c70:	e7fc      	b.n	8002c6c <main+0x38>
	...

08002c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b09a      	sub	sp, #104	; 0x68
 8002c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c7a:	f107 0320 	add.w	r3, r7, #32
 8002c7e:	2248      	movs	r2, #72	; 0x48
 8002c80:	2100      	movs	r1, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f025 ff9c 	bl	8028bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c88:	1d3b      	adds	r3, r7, #4
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	60da      	str	r2, [r3, #12]
 8002c94:	611a      	str	r2, [r3, #16]
 8002c96:	615a      	str	r2, [r3, #20]
 8002c98:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002c9a:	f006 fa89 	bl	80091b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7ff ff80 	bl	8002ba4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <SystemClock_Config+0xb8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cac:	4a1f      	ldr	r2, [pc, #124]	; (8002d2c <SystemClock_Config+0xb8>)
 8002cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <SystemClock_Config+0xb8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002cc0:	2347      	movs	r3, #71	; 0x47
 8002cc2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cd8:	2340      	movs	r3, #64	; 0x40
 8002cda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ce0:	f107 0320 	add.w	r3, r7, #32
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f006 fdf7 	bl	80098d8 <HAL_RCC_OscConfig>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002cf0:	f000 f91c 	bl	8002f2c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002cf4:	236f      	movs	r3, #111	; 0x6f
 8002cf6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d00:	2300      	movs	r3, #0
 8002d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	2101      	movs	r1, #1
 8002d14:	4618      	mov	r0, r3
 8002d16:	f007 f953 	bl	8009fc0 <HAL_RCC_ClockConfig>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002d20:	f000 f904 	bl	8002f2c <Error_Handler>
  }
}
 8002d24:	bf00      	nop
 8002d26:	3768      	adds	r7, #104	; 0x68
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	58000400 	.word	0x58000400

08002d30 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b094      	sub	sp, #80	; 0x50
 8002d34:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d36:	463b      	mov	r3, r7
 8002d38:	2250      	movs	r2, #80	; 0x50
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f025 ff3f 	bl	8028bc0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002d42:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d46:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002d48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d4c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002d52:	2310      	movs	r3, #16
 8002d54:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d56:	463b      	mov	r3, r7
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f007 fd6e 	bl	800a83a <HAL_RCCEx_PeriphCLKConfig>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002d64:	f000 f8e2 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002d68:	bf00      	nop
 8002d6a:	3750      	adds	r7, #80	; 0x50
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <MX_IPCC_Init+0x20>)
 8002d76:	4a07      	ldr	r2, [pc, #28]	; (8002d94 <MX_IPCC_Init+0x24>)
 8002d78:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002d7a:	4805      	ldr	r0, [pc, #20]	; (8002d90 <MX_IPCC_Init+0x20>)
 8002d7c:	f006 f992 	bl	80090a4 <HAL_IPCC_Init>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002d86:	f000 f8d1 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20004198 	.word	0x20004198
 8002d94:	58000c00 	.word	0x58000c00

08002d98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d9c:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002d9e:	4a24      	ldr	r2, [pc, #144]	; (8002e30 <MX_USART1_UART_Init+0x98>)
 8002da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002da8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002daa:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002db0:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002db6:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002dbe:	220c      	movs	r2, #12
 8002dc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002dc8:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002dca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dce:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dd0:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002de2:	4812      	ldr	r0, [pc, #72]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002de4:	f008 f9c2 	bl	800b16c <HAL_UART_Init>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002dee:	f000 f89d 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002df2:	2100      	movs	r1, #0
 8002df4:	480d      	ldr	r0, [pc, #52]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002df6:	f00a fa16 	bl	800d226 <HAL_UARTEx_SetTxFifoThreshold>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002e00:	f000 f894 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002e04:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8002e08:	4808      	ldr	r0, [pc, #32]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002e0a:	f00a fa4a 	bl	800d2a2 <HAL_UARTEx_SetRxFifoThreshold>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8002e14:	f000 f88a 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002e18:	4804      	ldr	r0, [pc, #16]	; (8002e2c <MX_USART1_UART_Init+0x94>)
 8002e1a:	f00a f9c9 	bl	800d1b0 <HAL_UARTEx_EnableFifoMode>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8002e24:	f000 f882 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20004268 	.word	0x20004268
 8002e30:	40013800 	.word	0x40013800

08002e34 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002e48:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <MX_RNG_Init+0x24>)
 8002e4a:	4a08      	ldr	r2, [pc, #32]	; (8002e6c <MX_RNG_Init+0x28>)
 8002e4c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <MX_RNG_Init+0x24>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002e54:	4804      	ldr	r0, [pc, #16]	; (8002e68 <MX_RNG_Init+0x24>)
 8002e56:	f007 ff77 	bl	800ad48 <HAL_RNG_Init>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002e60:	f000 f864 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	200043bc 	.word	0x200043bc
 8002e6c:	58001000 	.word	0x58001000

08002e70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e74:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <MX_RTC_Init+0x60>)
 8002e76:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <MX_RTC_Init+0x64>)
 8002e78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <MX_RTC_Init+0x60>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002e80:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <MX_RTC_Init+0x60>)
 8002e82:	220f      	movs	r2, #15
 8002e84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <MX_RTC_Init+0x60>)
 8002e88:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002e8c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <MX_RTC_Init+0x60>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <MX_RTC_Init+0x60>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <MX_RTC_Init+0x60>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <MX_RTC_Init+0x60>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ea6:	480a      	ldr	r0, [pc, #40]	; (8002ed0 <MX_RTC_Init+0x60>)
 8002ea8:	f007 ff84 	bl	800adb4 <HAL_RTC_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002eb2:	f000 f83b 	bl	8002f2c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4805      	ldr	r0, [pc, #20]	; (8002ed0 <MX_RTC_Init+0x60>)
 8002ebc:	f008 f87a 	bl	800afb4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002ec6:	f000 f831 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200043d0 	.word	0x200043d0
 8002ed4:	40002800 	.word	0x40002800

08002ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002edc:	2004      	movs	r0, #4
 8002ede:	f7ff fe77 	bl	8002bd0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f7ff fe74 	bl	8002bd0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ee8:	2002      	movs	r0, #2
 8002eea:	f7ff fe71 	bl	8002bd0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	210f      	movs	r1, #15
 8002ef2:	200e      	movs	r0, #14
 8002ef4:	f005 f92d 	bl	8008152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002ef8:	200e      	movs	r0, #14
 8002efa:	f005 f944 	bl	8008186 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	210f      	movs	r1, #15
 8002f02:	203a      	movs	r0, #58	; 0x3a
 8002f04:	f005 f925 	bl	8008152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002f08:	203a      	movs	r0, #58	; 0x3a
 8002f0a:	f005 f93c 	bl	8008186 <HAL_NVIC_EnableIRQ>

}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f16:	2004      	movs	r0, #4
 8002f18:	f7ff fe73 	bl	8002c02 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	f7ff fe70 	bl	8002c02 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f22:	2002      	movs	r0, #2
 8002f24:	f7ff fe6d 	bl	8002c02 <LL_AHB2_GRP1_EnableClock>

}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_RCC_EnableRTC>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f52:	bf00      	nop
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_AHB2_GRP1_EnableClock>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f80:	68fb      	ldr	r3, [r7, #12]
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_AHB3_GRP1_EnableClock>:
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b085      	sub	sp, #20
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_APB1_GRP1_EnableClock>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_APB1_GRP2_EnableClock>:
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4313      	orrs	r3, r2
 8003008:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800300a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4013      	ands	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003016:	68fb      	ldr	r3, [r7, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <LL_APB2_GRP1_EnableClock>:
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003030:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4313      	orrs	r3, r2
 800303a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003040:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4013      	ands	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003048:	68fb      	ldr	r3, [r7, #12]
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800305a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800305e:	f7ff ff96 	bl	8002f8e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	202e      	movs	r0, #46	; 0x2e
 8003068:	f005 f873 	bl	8008152 <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800306c:	202e      	movs	r0, #46	; 0x2e
 800306e:	f005 f88a 	bl	8008186 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0d      	ldr	r2, [pc, #52]	; (80030bc <HAL_IPCC_MspInit+0x44>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d113      	bne.n	80030b2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800308a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800308e:	f7ff ff7e 	bl	8002f8e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2100      	movs	r1, #0
 8003096:	202c      	movs	r0, #44	; 0x2c
 8003098:	f005 f85b 	bl	8008152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800309c:	202c      	movs	r0, #44	; 0x2c
 800309e:	f005 f872 	bl	8008186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2100      	movs	r1, #0
 80030a6:	202d      	movs	r0, #45	; 0x2d
 80030a8:	f005 f853 	bl	8008152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80030ac:	202d      	movs	r0, #45	; 0x2d
 80030ae:	f005 f86a 	bl	8008186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	58000c00 	.word	0x58000c00

080030c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b0a0      	sub	sp, #128	; 0x80
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030d8:	f107 030c 	add.w	r3, r7, #12
 80030dc:	2250      	movs	r2, #80	; 0x50
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f025 fd6d 	bl	8028bc0 <memset>
  if(huart->Instance==LPUART1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a68      	ldr	r2, [pc, #416]	; (800328c <HAL_UART_MspInit+0x1cc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d16e      	bne.n	80031ce <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80030f0:	2302      	movs	r3, #2
 80030f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80030f4:	2300      	movs	r3, #0
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030f8:	f107 030c 	add.w	r3, r7, #12
 80030fc:	4618      	mov	r0, r3
 80030fe:	f007 fb9c 	bl	800a83a <HAL_RCCEx_PeriphCLKConfig>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003108:	f7ff ff10 	bl	8002f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800310c:	2001      	movs	r0, #1
 800310e:	f7ff ff70 	bl	8002ff2 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	2001      	movs	r0, #1
 8003114:	f7ff ff22 	bl	8002f5c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003118:	230c      	movs	r3, #12
 800311a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311c:	2302      	movs	r3, #2
 800311e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003124:	2303      	movs	r3, #3
 8003126:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003128:	2308      	movs	r3, #8
 800312a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003130:	4619      	mov	r1, r3
 8003132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003136:	f005 fdd9 	bl	8008cec <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 800313a:	4b55      	ldr	r3, [pc, #340]	; (8003290 <HAL_UART_MspInit+0x1d0>)
 800313c:	4a55      	ldr	r2, [pc, #340]	; (8003294 <HAL_UART_MspInit+0x1d4>)
 800313e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003140:	4b53      	ldr	r3, [pc, #332]	; (8003290 <HAL_UART_MspInit+0x1d0>)
 8003142:	2211      	movs	r2, #17
 8003144:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003146:	4b52      	ldr	r3, [pc, #328]	; (8003290 <HAL_UART_MspInit+0x1d0>)
 8003148:	2210      	movs	r2, #16
 800314a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800314c:	4b50      	ldr	r3, [pc, #320]	; (8003290 <HAL_UART_MspInit+0x1d0>)
 800314e:	2200      	movs	r2, #0
 8003150:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003152:	4b4f      	ldr	r3, [pc, #316]	; (8003290 <HAL_UART_MspInit+0x1d0>)
 8003154:	2280      	movs	r2, #128	; 0x80
 8003156:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003158:	4b4d      	ldr	r3, [pc, #308]	; (8003290 <HAL_UART_MspInit+0x1d0>)
 800315a:	2200      	movs	r2, #0
 800315c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800315e:	4b4c      	ldr	r3, [pc, #304]	; (8003290 <HAL_UART_MspInit+0x1d0>)
 8003160:	2200      	movs	r2, #0
 8003162:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003164:	4b4a      	ldr	r3, [pc, #296]	; (8003290 <HAL_UART_MspInit+0x1d0>)
 8003166:	2200      	movs	r2, #0
 8003168:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800316a:	4b49      	ldr	r3, [pc, #292]	; (8003290 <HAL_UART_MspInit+0x1d0>)
 800316c:	2200      	movs	r2, #0
 800316e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003170:	4847      	ldr	r0, [pc, #284]	; (8003290 <HAL_UART_MspInit+0x1d0>)
 8003172:	f005 f84d 	bl	8008210 <HAL_DMA_Init>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800317c:	f7ff fed6 	bl	8002f2c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8003180:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8003184:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003186:	2300      	movs	r3, #0
 8003188:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 800318a:	2300      	movs	r3, #0
 800318c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 8003190:	2300      	movs	r3, #0
 8003192:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 8003196:	2301      	movs	r3, #1
 8003198:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 800319a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800319e:	4619      	mov	r1, r3
 80031a0:	483b      	ldr	r0, [pc, #236]	; (8003290 <HAL_UART_MspInit+0x1d0>)
 80031a2:	f005 fb67 	bl	8008874 <HAL_DMAEx_ConfigMuxSync>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80031ac:	f7ff febe 	bl	8002f2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a37      	ldr	r2, [pc, #220]	; (8003290 <HAL_UART_MspInit+0x1d0>)
 80031b4:	67da      	str	r2, [r3, #124]	; 0x7c
 80031b6:	4a36      	ldr	r2, [pc, #216]	; (8003290 <HAL_UART_MspInit+0x1d0>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80031bc:	2200      	movs	r2, #0
 80031be:	2100      	movs	r1, #0
 80031c0:	2025      	movs	r0, #37	; 0x25
 80031c2:	f004 ffc6 	bl	8008152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80031c6:	2025      	movs	r0, #37	; 0x25
 80031c8:	f004 ffdd 	bl	8008186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031cc:	e05a      	b.n	8003284 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a31      	ldr	r2, [pc, #196]	; (8003298 <HAL_UART_MspInit+0x1d8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d155      	bne.n	8003284 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031d8:	2301      	movs	r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031dc:	2300      	movs	r3, #0
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031e0:	f107 030c 	add.w	r3, r7, #12
 80031e4:	4618      	mov	r0, r3
 80031e6:	f007 fb28 	bl	800a83a <HAL_RCCEx_PeriphCLKConfig>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_UART_MspInit+0x134>
      Error_Handler();
 80031f0:	f7ff fe9c 	bl	8002f2c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80031f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80031f8:	f7ff ff14 	bl	8003024 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fc:	2002      	movs	r0, #2
 80031fe:	f7ff fead 	bl	8002f5c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003202:	23c0      	movs	r3, #192	; 0xc0
 8003204:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	2302      	movs	r3, #2
 8003208:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320e:	2303      	movs	r3, #3
 8003210:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003212:	2307      	movs	r3, #7
 8003214:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003216:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800321a:	4619      	mov	r1, r3
 800321c:	481f      	ldr	r0, [pc, #124]	; (800329c <HAL_UART_MspInit+0x1dc>)
 800321e:	f005 fd65 	bl	8008cec <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8003222:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <HAL_UART_MspInit+0x1e0>)
 8003224:	4a1f      	ldr	r2, [pc, #124]	; (80032a4 <HAL_UART_MspInit+0x1e4>)
 8003226:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_UART_MspInit+0x1e0>)
 800322a:	220f      	movs	r2, #15
 800322c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800322e:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <HAL_UART_MspInit+0x1e0>)
 8003230:	2210      	movs	r2, #16
 8003232:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <HAL_UART_MspInit+0x1e0>)
 8003236:	2200      	movs	r2, #0
 8003238:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800323a:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <HAL_UART_MspInit+0x1e0>)
 800323c:	2280      	movs	r2, #128	; 0x80
 800323e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003240:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <HAL_UART_MspInit+0x1e0>)
 8003242:	2200      	movs	r2, #0
 8003244:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003246:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <HAL_UART_MspInit+0x1e0>)
 8003248:	2200      	movs	r2, #0
 800324a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <HAL_UART_MspInit+0x1e0>)
 800324e:	2200      	movs	r2, #0
 8003250:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003252:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <HAL_UART_MspInit+0x1e0>)
 8003254:	2200      	movs	r2, #0
 8003256:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003258:	4811      	ldr	r0, [pc, #68]	; (80032a0 <HAL_UART_MspInit+0x1e0>)
 800325a:	f004 ffd9 	bl	8008210 <HAL_DMA_Init>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8003264:	f7ff fe62 	bl	8002f2c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <HAL_UART_MspInit+0x1e0>)
 800326c:	67da      	str	r2, [r3, #124]	; 0x7c
 800326e:	4a0c      	ldr	r2, [pc, #48]	; (80032a0 <HAL_UART_MspInit+0x1e0>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003274:	2200      	movs	r2, #0
 8003276:	2100      	movs	r1, #0
 8003278:	2024      	movs	r0, #36	; 0x24
 800327a:	f004 ff6a 	bl	8008152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800327e:	2024      	movs	r0, #36	; 0x24
 8003280:	f004 ff81 	bl	8008186 <HAL_NVIC_EnableIRQ>
}
 8003284:	bf00      	nop
 8003286:	3780      	adds	r7, #128	; 0x80
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40008000 	.word	0x40008000
 8003290:	200042fc 	.word	0x200042fc
 8003294:	40020044 	.word	0x40020044
 8003298:	40013800 	.word	0x40013800
 800329c:	48000400 	.word	0x48000400
 80032a0:	2000435c 	.word	0x2000435c
 80032a4:	40020444 	.word	0x40020444

080032a8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b096      	sub	sp, #88	; 0x58
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	2250      	movs	r2, #80	; 0x50
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f025 fc81 	bl	8028bc0 <memset>
  if(hrng->Instance==RNG)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a0d      	ldr	r2, [pc, #52]	; (80032f8 <HAL_RNG_MspInit+0x50>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d113      	bne.n	80032f0 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80032c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032cc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80032ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032d2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032d4:	f107 0308 	add.w	r3, r7, #8
 80032d8:	4618      	mov	r0, r3
 80032da:	f007 faae 	bl	800a83a <HAL_RCCEx_PeriphCLKConfig>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80032e4:	f7ff fe22 	bl	8002f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80032e8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80032ec:	f7ff fe4f 	bl	8002f8e <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80032f0:	bf00      	nop
 80032f2:	3758      	adds	r7, #88	; 0x58
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	58001000 	.word	0x58001000

080032fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b096      	sub	sp, #88	; 0x58
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003304:	f107 0308 	add.w	r3, r7, #8
 8003308:	2250      	movs	r2, #80	; 0x50
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f025 fc57 	bl	8028bc0 <memset>
  if(hrtc->Instance==RTC)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <HAL_RTC_MspInit+0x64>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d11d      	bne.n	8003358 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800331c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003320:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003326:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003328:	f107 0308 	add.w	r3, r7, #8
 800332c:	4618      	mov	r0, r3
 800332e:	f007 fa84 	bl	800a83a <HAL_RCCEx_PeriphCLKConfig>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003338:	f7ff fdf8 	bl	8002f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800333c:	f7ff fdfd 	bl	8002f3a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003340:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003344:	f7ff fe3c 	bl	8002fc0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003348:	2200      	movs	r2, #0
 800334a:	2100      	movs	r1, #0
 800334c:	2003      	movs	r0, #3
 800334e:	f004 ff00 	bl	8008152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003352:	2003      	movs	r0, #3
 8003354:	f004 ff17 	bl	8008186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003358:	bf00      	nop
 800335a:	3758      	adds	r7, #88	; 0x58
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40002800 	.word	0x40002800

08003364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  BSP_LED_On(LED_RED);
 8003378:	2002      	movs	r0, #2
 800337a:	f004 fbdd 	bl	8007b38 <BSP_LED_On>
#ifndef DISABLE_TRACES
  printf("HARDFAULT !\r\n");
 800337e:	4802      	ldr	r0, [pc, #8]	; (8003388 <HardFault_Handler+0x14>)
 8003380:	f026 fa70 	bl	8029864 <puts>
#endif
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003384:	e7fe      	b.n	8003384 <HardFault_Handler+0x10>
 8003386:	bf00      	nop
 8003388:	0802d334 	.word	0x0802d334

0800338c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003390:	e7fe      	b.n	8003390 <MemManage_Handler+0x4>

08003392 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003396:	e7fe      	b.n	8003396 <BusFault_Handler+0x4>

08003398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800339c:	e7fe      	b.n	800339c <UsageFault_Handler+0x4>

0800339e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80033ba:	b480      	push	{r7}
 80033bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033cc:	f004 fd42 	bl	8007e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033d0:	bf00      	nop
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80033d8:	f7fe fffa 	bl	80023d0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80033dc:	bf00      	nop
 80033de:	bd80      	pop	{r7, pc}

080033e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80033e4:	4802      	ldr	r0, [pc, #8]	; (80033f0 <DMA1_Channel4_IRQHandler+0x10>)
 80033e6:	f005 f8f4 	bl	80085d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200042fc 	.word	0x200042fc

080033f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033f8:	4802      	ldr	r0, [pc, #8]	; (8003404 <USART1_IRQHandler+0x10>)
 80033fa:	f007 ffd3 	bl	800b3a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20004268 	.word	0x20004268

08003408 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800340c:	4802      	ldr	r0, [pc, #8]	; (8003418 <LPUART1_IRQHandler+0x10>)
 800340e:	f007 ffc9 	bl	800b3a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	200041d4 	.word	0x200041d4

0800341c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003420:	f004 f9bc 	bl	800779c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003424:	bf00      	nop
 8003426:	bd80      	pop	{r7, pc}

08003428 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800342c:	f004 f9ee 	bl	800780c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}

08003434 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003438:	f005 fe10 	bl	800905c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800343c:	bf00      	nop
 800343e:	bd80      	pop	{r7, pc}

08003440 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <DMA2_Channel4_IRQHandler+0x10>)
 8003446:	f005 f8c4 	bl	80085d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	2000435c 	.word	0x2000435c

08003454 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8003458:	2010      	movs	r0, #16
 800345a:	f005 fde7 	bl	800902c <HAL_GPIO_EXTI_IRQHandler>
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}

08003462 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8003466:	2001      	movs	r0, #1
 8003468:	f005 fde0 	bl	800902c <HAL_GPIO_EXTI_IRQHandler>
}
 800346c:	bf00      	nop
 800346e:	bd80      	pop	{r7, pc}

08003470 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8003474:	2002      	movs	r0, #2
 8003476:	f005 fdd9 	bl	800902c <HAL_GPIO_EXTI_IRQHandler>
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}

0800347e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800347e:	b480      	push	{r7}
 8003480:	af00      	add	r7, sp, #0
  return 1;
 8003482:	2301      	movs	r3, #1
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <_kill>:

int _kill(int pid, int sig)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003498:	f025 fb1e 	bl	8028ad8 <__errno>
 800349c:	4603      	mov	r3, r0
 800349e:	2216      	movs	r2, #22
 80034a0:	601a      	str	r2, [r3, #0]
  return -1;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <_exit>:

void _exit (int status)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ffe7 	bl	800348e <_kill>
  while (1) {}    /* Make sure we hang here */
 80034c0:	e7fe      	b.n	80034c0 <_exit+0x12>

080034c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e00a      	b.n	80034ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034d4:	f3af 8000 	nop.w
 80034d8:	4601      	mov	r1, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	60ba      	str	r2, [r7, #8]
 80034e0:	b2ca      	uxtb	r2, r1
 80034e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	3301      	adds	r3, #1
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	dbf0      	blt.n	80034d4 <_read+0x12>
  }

  return len;
 80034f2:	687b      	ldr	r3, [r7, #4]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003524:	605a      	str	r2, [r3, #4]
  return 0;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <_isatty>:

int _isatty(int file)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800353c:	2301      	movs	r3, #1
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800356c:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <_sbrk+0x5c>)
 800356e:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <_sbrk+0x60>)
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003578:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <_sbrk+0x64>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d102      	bne.n	8003586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003580:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <_sbrk+0x64>)
 8003582:	4a12      	ldr	r2, [pc, #72]	; (80035cc <_sbrk+0x68>)
 8003584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003586:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <_sbrk+0x64>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	429a      	cmp	r2, r3
 8003592:	d207      	bcs.n	80035a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003594:	f025 faa0 	bl	8028ad8 <__errno>
 8003598:	4603      	mov	r3, r0
 800359a:	220c      	movs	r2, #12
 800359c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800359e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035a2:	e009      	b.n	80035b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <_sbrk+0x64>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <_sbrk+0x64>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	4a05      	ldr	r2, [pc, #20]	; (80035c8 <_sbrk+0x64>)
 80035b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035b6:	68fb      	ldr	r3, [r7, #12]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20030000 	.word	0x20030000
 80035c4:	00001000 	.word	0x00001000
 80035c8:	200043f4 	.word	0x200043f4
 80035cc:	20007fc0 	.word	0x20007fc0

080035d0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <LL_FLASH_GetUDN+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	1fff7580 	.word	0x1fff7580

080035e8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <LL_FLASH_GetDeviceID+0x14>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	b2db      	uxtb	r3, r3
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	1fff7584 	.word	0x1fff7584

08003600 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8003604:	4b03      	ldr	r3, [pc, #12]	; (8003614 <LL_FLASH_GetSTCompanyID+0x14>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	0a1b      	lsrs	r3, r3, #8
}
 800360a:	4618      	mov	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	1fff7584 	.word	0x1fff7584

08003618 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8003618:	b5b0      	push	{r4, r5, r7, lr}
 800361a:	b096      	sub	sp, #88	; 0x58
 800361c:	af04      	add	r7, sp, #16
  SHCI_CmdStatus_t status;
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800361e:	4b3a      	ldr	r3, [pc, #232]	; (8003708 <APP_BLE_Init+0xf0>)
 8003620:	1d3c      	adds	r4, r7, #4
 8003622:	461d      	mov	r5, r3
 8003624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800362a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800362c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800362e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003634:	c403      	stmia	r4!, {r0, r1}
 8003636:	8022      	strh	r2, [r4, #0]
  };

  /**
     * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8003638:	f000 f880 	bl	800373c <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800363c:	2101      	movs	r1, #1
 800363e:	2002      	movs	r0, #2
 8003640:	f013 f994 	bl	801696c <UTIL_LPM_SetOffMode>

  /**
   * Do not allow stop mode in the application
   */
#if (LOW_POWER_FEATURE == 0)
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8003644:	2101      	movs	r1, #1
 8003646:	2002      	movs	r0, #2
 8003648:	f013 f960 	bl	801690c <UTIL_LPM_SetStopMode>
#endif

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800364c:	4a2f      	ldr	r2, [pc, #188]	; (800370c <APP_BLE_Init+0xf4>)
 800364e:	2100      	movs	r1, #0
 8003650:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003654:	f013 fab6 	bl	8016bc4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8003658:	1d3b      	adds	r3, r7, #4
 800365a:	4618      	mov	r0, r3
 800365c:	f012 fa3f 	bl	8015ade <SHCI_C2_BLE_Init>
 8003660:	4603      	mov	r3, r0
 8003662:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (status != SHCI_Success)
 8003666:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800366e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003672:	4619      	mov	r1, r3
 8003674:	4826      	ldr	r0, [pc, #152]	; (8003710 <APP_BLE_Init+0xf8>)
 8003676:	f026 f86f 	bl	8029758 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800367a:	f7ff fc57 	bl	8002f2c <Error_Handler>
 800367e:	e002      	b.n	8003686 <APP_BLE_Init+0x6e>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8003680:	4824      	ldr	r0, [pc, #144]	; (8003714 <APP_BLE_Init+0xfc>)
 8003682:	f026 f869 	bl	8029758 <iprintf>
  /**
   * Initialization of HCI & GATT & GAP layer
   */
  {
    const uint8_t *p_bd_addr;
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003686:	2392      	movs	r3, #146	; 0x92
 8003688:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    /**
     * Write the BD Address
     */
    p_bd_addr = BleGetBdAddress();
 800368c:	f000 f86c 	bl	8003768 <BleGetBdAddress>
 8003690:	6438      	str	r0, [r7, #64]	; 0x40
    ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8003692:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003694:	2106      	movs	r1, #6
 8003696:	2000      	movs	r0, #0
 8003698:	f011 fdf1 	bl	801527e <aci_hal_write_config_data>
 800369c:	4603      	mov	r3, r0
 800369e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    if (ret != BLE_STATUS_SUCCESS)
 80036a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <APP_BLE_Init+0xa0>
    {
      APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 80036aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036ae:	4619      	mov	r1, r3
 80036b0:	4819      	ldr	r0, [pc, #100]	; (8003718 <APP_BLE_Init+0x100>)
 80036b2:	f026 f851 	bl	8029758 <iprintf>
 80036b6:	e021      	b.n	80036fc <APP_BLE_Init+0xe4>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 80036b8:	4818      	ldr	r0, [pc, #96]	; (800371c <APP_BLE_Init+0x104>)
 80036ba:	f026 f8d3 	bl	8029864 <puts>
      APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 80036be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c0:	3305      	adds	r3, #5
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c8:	3304      	adds	r3, #4
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	461c      	mov	r4, r3
 80036ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d0:	3303      	adds	r3, #3
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	461d      	mov	r5, r3
 80036d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d8:	3302      	adds	r3, #2
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e0:	3301      	adds	r3, #1
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	4619      	mov	r1, r3
 80036e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	9302      	str	r3, [sp, #8]
 80036ec:	9101      	str	r1, [sp, #4]
 80036ee:	9200      	str	r2, [sp, #0]
 80036f0:	462b      	mov	r3, r5
 80036f2:	4622      	mov	r2, r4
 80036f4:	4601      	mov	r1, r0
 80036f6:	480a      	ldr	r0, [pc, #40]	; (8003720 <APP_BLE_Init+0x108>)
 80036f8:	f026 f82e 	bl	8029758 <iprintf>
    }
  }
  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80036fc:	f010 f9ba 	bl	8013a74 <SVCCTL_Init>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */

  return;
 8003700:	bf00      	nop
}
 8003702:	3748      	adds	r7, #72	; 0x48
 8003704:	46bd      	mov	sp, r7
 8003706:	bdb0      	pop	{r4, r5, r7, pc}
 8003708:	0802d488 	.word	0x0802d488
 800370c:	08015d2d 	.word	0x08015d2d
 8003710:	0802d344 	.word	0x0802d344
 8003714:	0802d37c 	.word	0x0802d37c
 8003718:	0802d3a4 	.word	0x0802d3a4
 800371c:	0802d400 	.word	0x0802d400
 8003720:	0802d44c 	.word	0x0802d44c

08003724 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *p_Pckt )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* callback of mesh Library to receive all GAP/GATT events*/  
  HCI_Event_CB(p_Pckt);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f01b ff5f 	bl	801f5f0 <HCI_Event_CB>

#if (LOW_POWER_FEATURE == 1)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);
#endif

  return (SVCCTL_UserEvtFlowEnable);
 8003732:	2301      	movs	r3, #1
}
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <Ble_Tl_Init+0x20>)
 8003744:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <Ble_Tl_Init+0x24>)
 8003748:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800374a:	463b      	mov	r3, r7
 800374c:	4619      	mov	r1, r3
 800374e:	4805      	ldr	r0, [pc, #20]	; (8003764 <Ble_Tl_Init+0x28>)
 8003750:	f012 fad0 	bl	8015cf4 <hci_init>

  return;
 8003754:	bf00      	nop
}
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20030028 	.word	0x20030028
 8003760:	0800386f 	.word	0x0800386f
 8003764:	08003837 	.word	0x08003837

08003768 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800376e:	f7ff ff2f 	bl	80035d0 <LL_FLASH_GetUDN>
 8003772:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800377a:	d023      	beq.n	80037c4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800377c:	f7ff ff40 	bl	8003600 <LL_FLASH_GetSTCompanyID>
 8003780:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8003782:	f7ff ff31 	bl	80035e8 <LL_FLASH_GetDeviceID>
 8003786:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	b2da      	uxtb	r2, r3
 800378c:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <BleGetBdAddress+0x80>)
 800378e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	0a1b      	lsrs	r3, r3, #8
 8003794:	b2da      	uxtb	r2, r3
 8003796:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <BleGetBdAddress+0x80>)
 8003798:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	b2da      	uxtb	r2, r3
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <BleGetBdAddress+0x80>)
 80037a0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <BleGetBdAddress+0x80>)
 80037a8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <BleGetBdAddress+0x80>)
 80037b2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	0c1b      	lsrs	r3, r3, #16
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <BleGetBdAddress+0x80>)
 80037bc:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <BleGetBdAddress+0x80>)
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	e00b      	b.n	80037dc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80037c4:	2000      	movs	r0, #0
 80037c6:	f013 f867 	bl	8016898 <OTP_Read>
 80037ca:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	e001      	b.n	80037dc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <BleGetBdAddress+0x84>)
 80037da:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80037dc:	697b      	ldr	r3, [r7, #20]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200043f8 	.word	0x200043f8
 80037ec:	08032794 	.word	0x08032794

080037f0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80037f8:	2100      	movs	r1, #0
 80037fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80037fe:	f013 fa03 	bl	8016c08 <UTIL_SEQ_SetTask>

  return;
 8003802:	bf00      	nop
}
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <hci_cmd_resp_release>:
#if (LOW_POWER_FEATURE == 1)
static volatile uint8_t HciResponse = 0;
#endif

void hci_cmd_resp_release(uint32_t Flag)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003812:	2001      	movs	r0, #1
 8003814:	f013 fa64 	bl	8016ce0 <UTIL_SEQ_SetEvt>
#else
  HciResponse = 1;
#endif
  return;
 8003818:	bf00      	nop
}
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003828:	2001      	movs	r0, #1
 800382a:	f013 fa79 	bl	8016d20 <UTIL_SEQ_WaitEvt>
#else
  while(HciResponse == 0);
  HciResponse = 0;
#endif  
  return;
 800382e:	bf00      	nop
}
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * p_Payload )
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	60fb      	str	r3, [r7, #12]
  
  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	3308      	adds	r3, #8
 8003848:	4618      	mov	r0, r3
 800384a:	f010 f94b 	bl	8013ae4 <SVCCTL_UserEvtRx>
 800384e:	4603      	mov	r3, r0
 8003850:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8003852:	7afb      	ldrb	r3, [r7, #11]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800385e:	e003      	b.n	8003868 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	701a      	strb	r2, [r3, #0]
  return;
 8003866:	bf00      	nop
}
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t Status )
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	4603      	mov	r3, r0
 8003876:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <BLE_StatusNot+0x16>
 800387e:	2b01      	cmp	r3, #1
 8003880:	d007      	beq.n	8003892 <BLE_StatusNot+0x24>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8003882:	e00d      	b.n	80038a0 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003884:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003888:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f013 f9e8 	bl	8016c60 <UTIL_SEQ_PauseTask>
      break;
 8003890:	e006      	b.n	80038a0 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003892:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003896:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f013 fa01 	bl	8016ca0 <UTIL_SEQ_ResumeTask>
      break;
 800389e:	bf00      	nop
  }

  return;
 80038a0:	bf00      	nop
}
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <Appli_GetAppKeyAddParamsCb>:
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndex
*                                               appKey, keySize & status
* @retval none
*/ 
void Appli_GetAppKeyAddParamsCb(model_securityKeyParams_t* appKeyAddParams)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"AppKey Add received for netKeyIndex %.2x, appKeyIndex %.2x \r\n",\
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	4619      	mov	r1, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	885b      	ldrh	r3, [r3, #2]
 80038ba:	461a      	mov	r2, r3
 80038bc:	4816      	ldr	r0, [pc, #88]	; (8003918 <Appli_GetAppKeyAddParamsCb+0x70>)
 80038be:	f025 ff4b 	bl	8029758 <iprintf>
          appKeyAddParams->netKeyIndex, appKeyAddParams->appKeyIndex);

  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyAddParams->status);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7b5b      	ldrb	r3, [r3, #13]
 80038c6:	4619      	mov	r1, r3
 80038c8:	4814      	ldr	r0, [pc, #80]	; (800391c <Appli_GetAppKeyAddParamsCb+0x74>)
 80038ca:	f025 ff45 	bl	8029758 <iprintf>
  /*Success Command*/
  if(appKeyAddParams->status == 0x00)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	7b5b      	ldrb	r3, [r3, #13]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d11c      	bne.n	8003910 <Appli_GetAppKeyAddParamsCb+0x68>
  {
    TRACE_I(TF_CONFIG_SERVER,"AppKey is: ");
 80038d6:	4812      	ldr	r0, [pc, #72]	; (8003920 <Appli_GetAppKeyAddParamsCb+0x78>)
 80038d8:	f025 ff3e 	bl	8029758 <iprintf>
    for (MOBLEUINT8 count=0 ; count<appKeyAddParams->keySize; count++)
 80038dc:	2300      	movs	r3, #0
 80038de:	73fb      	strb	r3, [r7, #15]
 80038e0:	e00e      	b.n	8003900 <Appli_GetAppKeyAddParamsCb+0x58>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(appKeyAddParams->appKey));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	4619      	mov	r1, r3
 80038ea:	480e      	ldr	r0, [pc, #56]	; (8003924 <Appli_GetAppKeyAddParamsCb+0x7c>)
 80038ec:	f025 ff34 	bl	8029758 <iprintf>
      appKeyAddParams->appKey++;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	609a      	str	r2, [r3, #8]
    for (MOBLEUINT8 count=0 ; count<appKeyAddParams->keySize; count++)
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	3301      	adds	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	7b1b      	ldrb	r3, [r3, #12]
 8003904:	7bfa      	ldrb	r2, [r7, #15]
 8003906:	429a      	cmp	r2, r3
 8003908:	d3eb      	bcc.n	80038e2 <Appli_GetAppKeyAddParamsCb+0x3a>
    }  
    TRACE_I(TF_CONFIG_SERVER," \r\n");
 800390a:	4807      	ldr	r0, [pc, #28]	; (8003928 <Appli_GetAppKeyAddParamsCb+0x80>)
 800390c:	f025 ffaa 	bl	8029864 <puts>
  }
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	0802d4c4 	.word	0x0802d4c4
 800391c:	0802d504 	.word	0x0802d504
 8003920:	0802d518 	.word	0x0802d518
 8003924:	0802d524 	.word	0x0802d524
 8003928:	0802d52c 	.word	0x0802d52c

0800392c <Appli_GetAppKeyDeleteParamsCb>:
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndex
*                                               appKey, keySize & status
* @retval none
*/ 
void Appli_GetAppKeyDeleteParamsCb(model_securityKeyParams_t* appKeyDeleteParams)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"App Key Delete received for netKeyIndex %.2x, appKeyIndex %.2x \r\n",\
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	4619      	mov	r1, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	885b      	ldrh	r3, [r3, #2]
 800393e:	461a      	mov	r2, r3
 8003940:	4806      	ldr	r0, [pc, #24]	; (800395c <Appli_GetAppKeyDeleteParamsCb+0x30>)
 8003942:	f025 ff09 	bl	8029758 <iprintf>
          appKeyDeleteParams->netKeyIndex, appKeyDeleteParams->appKeyIndex);
  
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyDeleteParams->status);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	7b5b      	ldrb	r3, [r3, #13]
 800394a:	4619      	mov	r1, r3
 800394c:	4804      	ldr	r0, [pc, #16]	; (8003960 <Appli_GetAppKeyDeleteParamsCb+0x34>)
 800394e:	f025 ff03 	bl	8029758 <iprintf>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	0802d530 	.word	0x0802d530
 8003960:	0802d504 	.word	0x0802d504

08003964 <Appli_GetAppKeyListParamsCb>:
* @brief  Callback from Config Model to receive the AppKey List
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndexes & appKeyListParams Size
* @retval none
*/ 
void Appli_GetAppKeyListParamsCb(model_appKeyListParams_t* appKeyListParams)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"App Key List for netKeyIndex %.2x is \r\n", appKeyListParams->netKeyIndex);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	4619      	mov	r1, r3
 8003972:	4817      	ldr	r0, [pc, #92]	; (80039d0 <Appli_GetAppKeyListParamsCb+0x6c>)
 8003974:	f025 fef0 	bl	8029758 <iprintf>
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyListParams->status);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7a9b      	ldrb	r3, [r3, #10]
 800397c:	4619      	mov	r1, r3
 800397e:	4815      	ldr	r0, [pc, #84]	; (80039d4 <Appli_GetAppKeyListParamsCb+0x70>)
 8003980:	f025 feea 	bl	8029758 <iprintf>
  /*Success*/
  if(appKeyListParams->status == 0x00)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	7a9b      	ldrb	r3, [r3, #10]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d11d      	bne.n	80039c8 <Appli_GetAppKeyListParamsCb+0x64>
  {
    TRACE_I(TF_CONFIG_SERVER,"AppKey Indexes are: \r\n");
 800398c:	4812      	ldr	r0, [pc, #72]	; (80039d8 <Appli_GetAppKeyListParamsCb+0x74>)
 800398e:	f025 ff69 	bl	8029864 <puts>
    for (MOBLEUINT8 count=0 ; count< appKeyListParams->appKeyIndexList_size; count++)
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	e00e      	b.n	80039b6 <Appli_GetAppKeyListParamsCb+0x52>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(appKeyListParams->appKeyIndexList));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	4619      	mov	r1, r3
 80039a0:	480e      	ldr	r0, [pc, #56]	; (80039dc <Appli_GetAppKeyListParamsCb+0x78>)
 80039a2:	f025 fed9 	bl	8029758 <iprintf>
      appKeyListParams->appKeyIndexList++;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	1c9a      	adds	r2, r3, #2
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	605a      	str	r2, [r3, #4]
    for (MOBLEUINT8 count=0 ; count< appKeyListParams->appKeyIndexList_size; count++)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	3301      	adds	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	891b      	ldrh	r3, [r3, #8]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d3ea      	bcc.n	8003998 <Appli_GetAppKeyListParamsCb+0x34>
    }  
   TRACE_I(TF_CONFIG_SERVER," \r\n");
 80039c2:	4807      	ldr	r0, [pc, #28]	; (80039e0 <Appli_GetAppKeyListParamsCb+0x7c>)
 80039c4:	f025 ff4e 	bl	8029864 <puts>
  }
}
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	0802d574 	.word	0x0802d574
 80039d4:	0802d504 	.word	0x0802d504
 80039d8:	0802d59c 	.word	0x0802d59c
 80039dc:	0802d524 	.word	0x0802d524
 80039e0:	0802d52c 	.word	0x0802d52c

080039e4 <Appli_GetAppKeyUpdateParamsCb>:
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndex
*                                               appKey, keySize & status
* @retval none
*/ 
void Appli_GetAppKeyUpdateParamsCb(model_securityKeyParams_t* appKeyUpdatedParams)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"App Key Update received for netKeyIndex %.2x, appKeyIndex %.2x \r\n",\
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	4619      	mov	r1, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	885b      	ldrh	r3, [r3, #2]
 80039f6:	461a      	mov	r2, r3
 80039f8:	4818      	ldr	r0, [pc, #96]	; (8003a5c <Appli_GetAppKeyUpdateParamsCb+0x78>)
 80039fa:	f025 fead 	bl	8029758 <iprintf>
          appKeyUpdatedParams->netKeyIndex, appKeyUpdatedParams->appKeyIndex);

  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyUpdatedParams->status);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	7b5b      	ldrb	r3, [r3, #13]
 8003a02:	4619      	mov	r1, r3
 8003a04:	4816      	ldr	r0, [pc, #88]	; (8003a60 <Appli_GetAppKeyUpdateParamsCb+0x7c>)
 8003a06:	f025 fea7 	bl	8029758 <iprintf>
  
  /*Success Command*/
  if(appKeyUpdatedParams->status == 0x00)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	7b5b      	ldrb	r3, [r3, #13]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d11f      	bne.n	8003a52 <Appli_GetAppKeyUpdateParamsCb+0x6e>
  {
    TRACE_I(TF_CONFIG_SERVER,"Updated AppKey is: ");
 8003a12:	4814      	ldr	r0, [pc, #80]	; (8003a64 <Appli_GetAppKeyUpdateParamsCb+0x80>)
 8003a14:	f025 fea0 	bl	8029758 <iprintf>
    for (MOBLEUINT8 count=0 ; count<appKeyUpdatedParams->keySize; count++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	73fb      	strb	r3, [r7, #15]
 8003a1c:	e00e      	b.n	8003a3c <Appli_GetAppKeyUpdateParamsCb+0x58>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(appKeyUpdatedParams->appKey));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	4619      	mov	r1, r3
 8003a26:	4810      	ldr	r0, [pc, #64]	; (8003a68 <Appli_GetAppKeyUpdateParamsCb+0x84>)
 8003a28:	f025 fe96 	bl	8029758 <iprintf>
      appKeyUpdatedParams->appKey++;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	609a      	str	r2, [r3, #8]
    for (MOBLEUINT8 count=0 ; count<appKeyUpdatedParams->keySize; count++)
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	7b1b      	ldrb	r3, [r3, #12]
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d3eb      	bcc.n	8003a1e <Appli_GetAppKeyUpdateParamsCb+0x3a>
    }
    TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003a46:	4809      	ldr	r0, [pc, #36]	; (8003a6c <Appli_GetAppKeyUpdateParamsCb+0x88>)
 8003a48:	f025 ff0c 	bl	8029864 <puts>
    TRACE_I(TF_CONFIG_SERVER,"It will be replaced by old appKey after Key Refresh \r\n");
 8003a4c:	4808      	ldr	r0, [pc, #32]	; (8003a70 <Appli_GetAppKeyUpdateParamsCb+0x8c>)
 8003a4e:	f025 ff09 	bl	8029864 <puts>
  }
  
}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	0802d5b4 	.word	0x0802d5b4
 8003a60:	0802d504 	.word	0x0802d504
 8003a64:	0802d5f8 	.word	0x0802d5f8
 8003a68:	0802d524 	.word	0x0802d524
 8003a6c:	0802d52c 	.word	0x0802d52c
 8003a70:	0802d60c 	.word	0x0802d60c

08003a74 <Appli_GetNetKeyAddParamsCb>:
* @brief  Callback from Config Model to receive the NetKey Add Command
* @param  Structure Pointer having parameters - netKeyIndex & netKey
* @retval none
*/ 
void Appli_GetNetKeyAddParamsCb(model_securityKeyParams_t* netKeyAddParams)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Net Key Add received for netKeyIndex %.2x \r\n",\
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	4619      	mov	r1, r3
 8003a82:	4817      	ldr	r0, [pc, #92]	; (8003ae0 <Appli_GetNetKeyAddParamsCb+0x6c>)
 8003a84:	f025 fe68 	bl	8029758 <iprintf>
                                               netKeyAddParams->netKeyIndex);

  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyAddParams->status);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	7b5b      	ldrb	r3, [r3, #13]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4815      	ldr	r0, [pc, #84]	; (8003ae4 <Appli_GetNetKeyAddParamsCb+0x70>)
 8003a90:	f025 fe62 	bl	8029758 <iprintf>

  /*Success Command*/
  if(netKeyAddParams->status == 0x00)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	7b5b      	ldrb	r3, [r3, #13]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d11c      	bne.n	8003ad6 <Appli_GetNetKeyAddParamsCb+0x62>
  {
    TRACE_I(TF_CONFIG_SERVER,"NetKey is: ");
 8003a9c:	4812      	ldr	r0, [pc, #72]	; (8003ae8 <Appli_GetNetKeyAddParamsCb+0x74>)
 8003a9e:	f025 fe5b 	bl	8029758 <iprintf>
    for (MOBLEUINT8 count=0 ; count < netKeyAddParams->keySize; count++)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
 8003aa6:	e00e      	b.n	8003ac6 <Appli_GetNetKeyAddParamsCb+0x52>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(netKeyAddParams->netKey));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	480e      	ldr	r0, [pc, #56]	; (8003aec <Appli_GetNetKeyAddParamsCb+0x78>)
 8003ab2:	f025 fe51 	bl	8029758 <iprintf>
      netKeyAddParams->netKey++;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	605a      	str	r2, [r3, #4]
    for (MOBLEUINT8 count=0 ; count < netKeyAddParams->keySize; count++)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	7b1b      	ldrb	r3, [r3, #12]
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d3eb      	bcc.n	8003aa8 <Appli_GetNetKeyAddParamsCb+0x34>
    } 
    TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003ad0:	4807      	ldr	r0, [pc, #28]	; (8003af0 <Appli_GetNetKeyAddParamsCb+0x7c>)
 8003ad2:	f025 fec7 	bl	8029864 <puts>
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	0802d644 	.word	0x0802d644
 8003ae4:	0802d504 	.word	0x0802d504
 8003ae8:	0802d674 	.word	0x0802d674
 8003aec:	0802d524 	.word	0x0802d524
 8003af0:	0802d52c 	.word	0x0802d52c

08003af4 <Appli_GetNetKeyDeleteParamsCb>:
* @brief  Callback from Config Model to receive the NetKey Delete Command
* @param  Structure Pointer having parameters - netKeyIndex & netKey
* @retval none
*/ 
void Appli_GetNetKeyDeleteParamsCb(model_securityKeyParams_t* netKeyDeleteParams)
{ 
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
   TRACE_I(TF_CONFIG_SERVER,"Net Key Delete received for netKeyIndex %d \r\n",\
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	4619      	mov	r1, r3
 8003b02:	4806      	ldr	r0, [pc, #24]	; (8003b1c <Appli_GetNetKeyDeleteParamsCb+0x28>)
 8003b04:	f025 fe28 	bl	8029758 <iprintf>
                                               netKeyDeleteParams->netKeyIndex);
   TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyDeleteParams->status);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7b5b      	ldrb	r3, [r3, #13]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4804      	ldr	r0, [pc, #16]	; (8003b20 <Appli_GetNetKeyDeleteParamsCb+0x2c>)
 8003b10:	f025 fe22 	bl	8029758 <iprintf>
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	0802d680 	.word	0x0802d680
 8003b20:	0802d504 	.word	0x0802d504

08003b24 <Appli_GetNetKeyListParamsCb>:
* @brief  Callback from Config Model to receive the NetKey List
* @param  Structure Pointer having parameters - netKeyIndexes & netKeyListParams Size
* @retval none
*/ 
void Appli_GetNetKeyListParamsCb(model_netKeyListParams_t* netKeyListParams)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyListParams->status);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	799b      	ldrb	r3, [r3, #6]
 8003b30:	4619      	mov	r1, r3
 8003b32:	4812      	ldr	r0, [pc, #72]	; (8003b7c <Appli_GetNetKeyListParamsCb+0x58>)
 8003b34:	f025 fe10 	bl	8029758 <iprintf>
  TRACE_I(TF_CONFIG_SERVER,"NetKey Indexes are: \r\n");
 8003b38:	4811      	ldr	r0, [pc, #68]	; (8003b80 <Appli_GetNetKeyListParamsCb+0x5c>)
 8003b3a:	f025 fe93 	bl	8029864 <puts>
  for (MOBLEUINT8 count=0 ; count< netKeyListParams->netKeyIndexList_size; count++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
 8003b42:	e00e      	b.n	8003b62 <Appli_GetNetKeyListParamsCb+0x3e>
  {
    TRACE_I(TF_CONFIG_SERVER,"%.2x", *(netKeyListParams->netKeyIndexList));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	480d      	ldr	r0, [pc, #52]	; (8003b84 <Appli_GetNetKeyListParamsCb+0x60>)
 8003b4e:	f025 fe03 	bl	8029758 <iprintf>
    netKeyListParams->netKeyIndexList++;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	1c9a      	adds	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	601a      	str	r2, [r3, #0]
  for (MOBLEUINT8 count=0 ; count< netKeyListParams->netKeyIndexList_size; count++)
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	889b      	ldrh	r3, [r3, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d3ea      	bcc.n	8003b44 <Appli_GetNetKeyListParamsCb+0x20>
  }
  TRACE_I(TF_CONFIG_SERVER," \r\n");  
 8003b6e:	4806      	ldr	r0, [pc, #24]	; (8003b88 <Appli_GetNetKeyListParamsCb+0x64>)
 8003b70:	f025 fe78 	bl	8029864 <puts>
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	0802d504 	.word	0x0802d504
 8003b80:	0802d6b0 	.word	0x0802d6b0
 8003b84:	0802d524 	.word	0x0802d524
 8003b88:	0802d52c 	.word	0x0802d52c

08003b8c <Appli_GetNetKeyUpdateParamsCb>:
* @brief  Callback from Config Model to receive the Updated NetKey Command
* @param  Structure Pointer having parameters - netKeyIndex & netKey
* @retval none
*/ 
void Appli_GetNetKeyUpdateParamsCb(model_securityKeyParams_t* netKeyUpdatedParams)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Net Key Update received for netKeyIndex %d \r\n",\
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4818      	ldr	r0, [pc, #96]	; (8003bfc <Appli_GetNetKeyUpdateParamsCb+0x70>)
 8003b9c:	f025 fddc 	bl	8029758 <iprintf>
                                     netKeyUpdatedParams->netKeyIndex);
  
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyUpdatedParams->status);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7b5b      	ldrb	r3, [r3, #13]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4816      	ldr	r0, [pc, #88]	; (8003c00 <Appli_GetNetKeyUpdateParamsCb+0x74>)
 8003ba8:	f025 fdd6 	bl	8029758 <iprintf>
  if(netKeyUpdatedParams->status == 0)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	7b5b      	ldrb	r3, [r3, #13]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d11f      	bne.n	8003bf4 <Appli_GetNetKeyUpdateParamsCb+0x68>
  {
    TRACE_I(TF_CONFIG_SERVER,"Updated NetKey is:");
 8003bb4:	4813      	ldr	r0, [pc, #76]	; (8003c04 <Appli_GetNetKeyUpdateParamsCb+0x78>)
 8003bb6:	f025 fdcf 	bl	8029758 <iprintf>
    for (MOBLEUINT8 count=0; count<netKeyUpdatedParams->keySize; count++)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	73fb      	strb	r3, [r7, #15]
 8003bbe:	e00e      	b.n	8003bde <Appli_GetNetKeyUpdateParamsCb+0x52>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(netKeyUpdatedParams->netKey));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	480f      	ldr	r0, [pc, #60]	; (8003c08 <Appli_GetNetKeyUpdateParamsCb+0x7c>)
 8003bca:	f025 fdc5 	bl	8029758 <iprintf>
      netKeyUpdatedParams->netKey++;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	605a      	str	r2, [r3, #4]
    for (MOBLEUINT8 count=0; count<netKeyUpdatedParams->keySize; count++)
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	7b1b      	ldrb	r3, [r3, #12]
 8003be2:	7bfa      	ldrb	r2, [r7, #15]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d3eb      	bcc.n	8003bc0 <Appli_GetNetKeyUpdateParamsCb+0x34>
    }
  TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003be8:	4808      	ldr	r0, [pc, #32]	; (8003c0c <Appli_GetNetKeyUpdateParamsCb+0x80>)
 8003bea:	f025 fe3b 	bl	8029864 <puts>
  TRACE_I(TF_CONFIG_SERVER,"It will be replaced by old netKey after Key Refresh \r\n");
 8003bee:	4808      	ldr	r0, [pc, #32]	; (8003c10 <Appli_GetNetKeyUpdateParamsCb+0x84>)
 8003bf0:	f025 fe38 	bl	8029864 <puts>
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	0802d6c8 	.word	0x0802d6c8
 8003c00:	0802d504 	.word	0x0802d504
 8003c04:	0802d6f8 	.word	0x0802d6f8
 8003c08:	0802d524 	.word	0x0802d524
 8003c0c:	0802d52c 	.word	0x0802d52c
 8003c10:	0802d70c 	.word	0x0802d70c

08003c14 <Appli_GetAppKeyBindingParamsCb>:
* @brief  Callback from Config Model to receive the AppKey binding params
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex & modelID
* @retval none
*/ 
void Appli_GetAppKeyBindingParamsCb(model_appKeyBindingParams_t* appKeyBindParams)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"AppKey binding received for elementIndex %d, modelID %.2lx,\
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	4619      	mov	r1, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	885b      	ldrh	r3, [r3, #2]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7a1b      	ldrb	r3, [r3, #8]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	4603      	mov	r3, r0
 8003c34:	4803      	ldr	r0, [pc, #12]	; (8003c44 <Appli_GetAppKeyBindingParamsCb+0x30>)
 8003c36:	f025 fd8f 	bl	8029758 <iprintf>
          appKeyIndex %.2x & status %.2x \r\n", appKeyBindParams->elementIndex,\
          appKeyBindParams->modelID, appKeyBindParams->appKeyIndex, appKeyBindParams->status);
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	0802d744 	.word	0x0802d744

08003c48 <Appli_GetAppKeyUnBindingParamsCb>:
* @brief  Callback from Config Model to receive the AppKey Unbinding params
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex & modelID
* @retval none
*/ 
void Appli_GetAppKeyUnBindingParamsCb(model_appKeyBindingParams_t* appKeyUnbindParams)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"AppKey unbinding received for elementIndex %d, modelID %.2lx,\
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	4619      	mov	r1, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	885b      	ldrh	r3, [r3, #2]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	7a1b      	ldrb	r3, [r3, #8]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	4603      	mov	r3, r0
 8003c68:	4803      	ldr	r0, [pc, #12]	; (8003c78 <Appli_GetAppKeyUnBindingParamsCb+0x30>)
 8003c6a:	f025 fd75 	bl	8029758 <iprintf>
          appKeyIndex %.2x & status %.2x \r\n",appKeyUnbindParams->elementIndex,\
          appKeyUnbindParams->modelID, appKeyUnbindParams->appKeyIndex,\
          appKeyUnbindParams->status);  
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	0802d7ac 	.word	0x0802d7ac

08003c7c <Appli_GetSubAddParamsCb>:
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex, modelID
*            subAddress, isVirtual & allSubDeleted
* @retval none
*/ 
void Appli_GetSubAddParamsCb(model_subParams_t* subAddParams)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", subAddParams->status); 
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	7a9b      	ldrb	r3, [r3, #10]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4810      	ldr	r0, [pc, #64]	; (8003ccc <Appli_GetSubAddParamsCb+0x50>)
 8003c8c:	f025 fd64 	bl	8029758 <iprintf>
  if(subAddParams->isVirtual)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	7adb      	ldrb	r3, [r3, #11]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <Appli_GetSubAddParamsCb+0x32>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Virtual Add received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	891b      	ldrh	r3, [r3, #8]
 8003ca6:	480a      	ldr	r0, [pc, #40]	; (8003cd0 <Appli_GetSubAddParamsCb+0x54>)
 8003ca8:	f025 fd56 	bl	8029758 <iprintf>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Add received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
                              subAddParams->elementIndex, subAddParams->modelID,\
                                                 subAddParams->subAddress); 
  }
}
 8003cac:	e009      	b.n	8003cc2 <Appli_GetSubAddParamsCb+0x46>
    TRACE_I(TF_CONFIG_SERVER,"Subscription Add received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	891b      	ldrh	r3, [r3, #8]
 8003cbc:	4805      	ldr	r0, [pc, #20]	; (8003cd4 <Appli_GetSubAddParamsCb+0x58>)
 8003cbe:	f025 fd4b 	bl	8029758 <iprintf>
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	0802d504 	.word	0x0802d504
 8003cd0:	0802d818 	.word	0x0802d818
 8003cd4:	0802d874 	.word	0x0802d874

08003cd8 <Appli_GetSubDeleteParamsCb>:
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex, modelID
*            subAddress, isVirtual & allSubDeleted
* @retval none
*/ 
void Appli_GetSubDeleteParamsCb(model_subParams_t* subDeleteParams)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", subDeleteParams->status); 
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	7a9b      	ldrb	r3, [r3, #10]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4817      	ldr	r0, [pc, #92]	; (8003d44 <Appli_GetSubDeleteParamsCb+0x6c>)
 8003ce8:	f025 fd36 	bl	8029758 <iprintf>
  if(subDeleteParams->isVirtual)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	7adb      	ldrb	r3, [r3, #11]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <Appli_GetSubDeleteParamsCb+0x32>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Virtual Add Delete received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	891b      	ldrh	r3, [r3, #8]
 8003d02:	4811      	ldr	r0, [pc, #68]	; (8003d48 <Appli_GetSubDeleteParamsCb+0x70>)
 8003d04:	f025 fd28 	bl	8029758 <iprintf>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Delete received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
                              subDeleteParams->elementIndex, subDeleteParams->modelID,\
                                                 subDeleteParams->subAddress); 
  }  
}
 8003d08:	e017      	b.n	8003d3a <Appli_GetSubDeleteParamsCb+0x62>
  else if(subDeleteParams->allSubDeleted)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	7b1b      	ldrb	r3, [r3, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <Appli_GetSubDeleteParamsCb+0x4e>
     TRACE_I(TF_CONFIG_SERVER,"Delete All Subscription received for elementIndex %d, modelID %.2lx \r\n",\
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	4619      	mov	r1, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	480b      	ldr	r0, [pc, #44]	; (8003d4c <Appli_GetSubDeleteParamsCb+0x74>)
 8003d20:	f025 fd1a 	bl	8029758 <iprintf>
}
 8003d24:	e009      	b.n	8003d3a <Appli_GetSubDeleteParamsCb+0x62>
    TRACE_I(TF_CONFIG_SERVER,"Subscription Delete received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	891b      	ldrh	r3, [r3, #8]
 8003d34:	4806      	ldr	r0, [pc, #24]	; (8003d50 <Appli_GetSubDeleteParamsCb+0x78>)
 8003d36:	f025 fd0f 	bl	8029758 <iprintf>
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	0802d504 	.word	0x0802d504
 8003d48:	0802d8c8 	.word	0x0802d8c8
 8003d4c:	0802d92c 	.word	0x0802d92c
 8003d50:	0802d974 	.word	0x0802d974

08003d54 <Appli_GetSubOverwriteParamsCb>:
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex, modelID
*            subAddress, isVirtual & allSubDeleted
* @retval none
*/ 
void Appli_GetSubOverwriteParamsCb(model_subParams_t* subOverwriteParams)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", subOverwriteParams->status); 
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	7a9b      	ldrb	r3, [r3, #10]
 8003d60:	4619      	mov	r1, r3
 8003d62:	4810      	ldr	r0, [pc, #64]	; (8003da4 <Appli_GetSubOverwriteParamsCb+0x50>)
 8003d64:	f025 fcf8 	bl	8029758 <iprintf>
  if(subOverwriteParams->isVirtual)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	7adb      	ldrb	r3, [r3, #11]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <Appli_GetSubOverwriteParamsCb+0x32>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Virtual Overwrite received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	4619      	mov	r1, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	891b      	ldrh	r3, [r3, #8]
 8003d7e:	480a      	ldr	r0, [pc, #40]	; (8003da8 <Appli_GetSubOverwriteParamsCb+0x54>)
 8003d80:	f025 fcea 	bl	8029758 <iprintf>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Overwrite received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
                     subOverwriteParams->elementIndex, subOverwriteParams->modelID,\
                                                 subOverwriteParams->subAddress); 
  }  
}
 8003d84:	e009      	b.n	8003d9a <Appli_GetSubOverwriteParamsCb+0x46>
    TRACE_I(TF_CONFIG_SERVER,"Subscription Overwrite received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	891b      	ldrh	r3, [r3, #8]
 8003d94:	4805      	ldr	r0, [pc, #20]	; (8003dac <Appli_GetSubOverwriteParamsCb+0x58>)
 8003d96:	f025 fcdf 	bl	8029758 <iprintf>
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	0802d504 	.word	0x0802d504
 8003da8:	0802d9cc 	.word	0x0802d9cc
 8003dac:	0802da2c 	.word	0x0802da2c

08003db0 <Appli_GetPublicationSetParamsCb>:
*         Publish Address, PublishPeriod, PublishTTL, Credential Flag, 
*         Publish AppKeyIndex, Retransmit Count, Restransmit Interval Steps & status
* @retval none
*/ 
void Appli_GetPublicationSetParamsCb(model_publicationparams_t* pPubParameters)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  if(pPubParameters->modelID == SENSOR_SERVER_MODEL_ID)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 8003dc0:	d102      	bne.n	8003dc8 <Appli_GetPublicationSetParamsCb+0x18>
  {
    Sensor_ModelPublishSet(pPubParameters);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f00f fd56 	bl	8013874 <Sensor_ModelPublishSet>
  }
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <Appli_GetPublicationGetParamsCb>:
*         Publish Address, PublishPeriod, PublishTTL, Credential Flag, 
*         Publish AppKeyIndex, Retransmit Count, Restransmit Interval Steps & status
* @retval none
*/ 
void Appli_GetPublicationGetParamsCb(model_publicationparams_t* pPubParameters)
{
 8003dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd2:	b089      	sub	sp, #36	; 0x24
 8003dd4:	af06      	add	r7, sp, #24
 8003dd6:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", pPubParameters->status); 
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7c5b      	ldrb	r3, [r3, #17]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4814      	ldr	r0, [pc, #80]	; (8003e30 <Appli_GetPublicationGetParamsCb+0x60>)
 8003de0:	f025 fcba 	bl	8029758 <iprintf>
  TRACE_I(TF_CONFIG_SERVER,"Received Publication parameters:  credentialFlag = %.2x,\
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	7b1b      	ldrb	r3, [r3, #12]
 8003de8:	461e      	mov	r6, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	469c      	mov	ip, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	895b      	ldrh	r3, [r3, #10]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	7b9b      	ldrb	r3, [r3, #14]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	7bdb      	ldrb	r3, [r3, #15]
 8003e04:	461c      	mov	r4, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	7c1b      	ldrb	r3, [r3, #16]
 8003e0a:	461d      	mov	r5, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	7b5b      	ldrb	r3, [r3, #13]
 8003e10:	9304      	str	r3, [sp, #16]
 8003e12:	9503      	str	r5, [sp, #12]
 8003e14:	9402      	str	r4, [sp, #8]
 8003e16:	9001      	str	r0, [sp, #4]
 8003e18:	9100      	str	r1, [sp, #0]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	4662      	mov	r2, ip
 8003e1e:	4631      	mov	r1, r6
 8003e20:	4804      	ldr	r0, [pc, #16]	; (8003e34 <Appli_GetPublicationGetParamsCb+0x64>)
 8003e22:	f025 fc99 	bl	8029758 <iprintf>
          elementAddress = %.2x, modelID = %.2lx, appKeyIndex = %.2x,\
          publishPeriod = %.2x, publishRetransmitCount = %.2x, publishRetransmitIntervalSteps = %.2x,\
          publishTTL = %.2x \r\n", pPubParameters->credentialFlag, pPubParameters->elementAddress, pPubParameters->modelID,\
          pPubParameters->publishAppKeyIndex, pPubParameters->publishPeriod, pPubParameters->publishRetransmitCount,\
          pPubParameters->publishRetransmitIntervalSteps, pPubParameters->publishTTL);
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	0802d504 	.word	0x0802d504
 8003e34:	0802da84 	.word	0x0802da84

08003e38 <Appli_Generic_OnOff_Set>:
*/ 
MOBLE_RESULT Appli_Generic_OnOff_Set(Generic_OnOffStatus_t* pGeneric_OnOffParam, 
                                     MOBLEUINT8 OptionalValid,
                                     MOBLEUINT16 dstPeer,
                                     MOBLEUINT8 elementIndex)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	4608      	mov	r0, r1
 8003e42:	4611      	mov	r1, r2
 8003e44:	461a      	mov	r2, r3
 8003e46:	4603      	mov	r3, r0
 8003e48:	70fb      	strb	r3, [r7, #3]
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	803b      	strh	r3, [r7, #0]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	70bb      	strb	r3, [r7, #2]
  /* LED control only for main element */
  if(elementIndex == GENERIC_SERVER_MAIN_ELEMENT_INDEX)
 8003e52:	78bb      	ldrb	r3, [r7, #2]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f040 809d 	bne.w	8003f94 <Appli_Generic_OnOff_Set+0x15c>
  {
    /*User need to modify the parameters as per the number of elements per node*/
    AppliOnOffSet[elementIndex].Present_OnOff = pGeneric_OnOffParam->Present_OnOff_State;
 8003e5a:	78ba      	ldrb	r2, [r7, #2]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	7818      	ldrb	r0, [r3, #0]
 8003e60:	495a      	ldr	r1, [pc, #360]	; (8003fcc <Appli_Generic_OnOff_Set+0x194>)
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	440b      	add	r3, r1
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	701a      	strb	r2, [r3, #0]
    AppliOnOffSet[elementIndex].Present_OnOffValue = pGeneric_OnOffParam->Present_OnOff_Value; 
 8003e6e:	78ba      	ldrb	r2, [r7, #2]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003e76:	b298      	uxth	r0, r3
 8003e78:	4954      	ldr	r1, [pc, #336]	; (8003fcc <Appli_Generic_OnOff_Set+0x194>)
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	440b      	add	r3, r1
 8003e82:	4602      	mov	r2, r0
 8003e84:	f8a3 2001 	strh.w	r2, [r3, #1]

    /* This condition is applicable when user want to on off the light with some 
      default transition value, or optionalValid =IN_TRANSITION ,
      transition is in progress.
    */
    if((OptionalValid == DEFAULT_TRANSITION) || (OptionalValid == IN_TRANSITION))
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d002      	beq.n	8003e94 <Appli_Generic_OnOff_Set+0x5c>
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d148      	bne.n	8003f26 <Appli_Generic_OnOff_Set+0xee>
    {
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
      Appli_LightPwmValue.IntensityValue = AppliOnOffSet[elementIndex].Present_OnOffValue;
 8003e94:	78ba      	ldrb	r2, [r7, #2]
 8003e96:	494d      	ldr	r1, [pc, #308]	; (8003fcc <Appli_Generic_OnOff_Set+0x194>)
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	4b4a      	ldr	r3, [pc, #296]	; (8003fd0 <Appli_Generic_OnOff_Set+0x198>)
 8003ea8:	801a      	strh	r2, [r3, #0]
      Light_UpdateLedValue(LOAD_STATE ,Appli_LightPwmValue);
 8003eaa:	4b49      	ldr	r3, [pc, #292]	; (8003fd0 <Appli_Generic_OnOff_Set+0x198>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4611      	mov	r1, r2
 8003eb0:	6858      	ldr	r0, [r3, #4]
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6898      	ldr	r0, [r3, #8]
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2004      	movs	r0, #4
 8003eba:	f000 ff0d 	bl	8004cd8 <Light_UpdateLedValue>
      else
      {
        AppliOnOffSet[elementIndex].TargetValue = APPLI_LED_OFF;
      }
  #else
      AppliOnOffSet[elementIndex].TargetValue = pGeneric_OnOffParam->Target_OnOff; 
 8003ebe:	78ba      	ldrb	r2, [r7, #2]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003ec6:	b298      	uxth	r0, r3
 8003ec8:	4940      	ldr	r1, [pc, #256]	; (8003fcc <Appli_Generic_OnOff_Set+0x194>)
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	f8a3 2003 	strh.w	r2, [r3, #3]
  #endif /* EME */

      if(AppliOnOffSet[elementIndex].Present_OnOffValue == AppliOnOffSet[elementIndex].TargetValue)
 8003ed8:	78ba      	ldrb	r2, [r7, #2]
 8003eda:	493c      	ldr	r1, [pc, #240]	; (8003fcc <Appli_Generic_OnOff_Set+0x194>)
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003ee8:	b299      	uxth	r1, r3
 8003eea:	78ba      	ldrb	r2, [r7, #2]
 8003eec:	4837      	ldr	r0, [pc, #220]	; (8003fcc <Appli_Generic_OnOff_Set+0x194>)
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	4403      	add	r3, r0
 8003ef6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	4299      	cmp	r1, r3
 8003efe:	d149      	bne.n	8003f94 <Appli_Generic_OnOff_Set+0x15c>
      {
        if(AppliOnOffSet[elementIndex].Present_OnOffValue > 0)
 8003f00:	78ba      	ldrb	r2, [r7, #2]
 8003f02:	4932      	ldr	r1, [pc, #200]	; (8003fcc <Appli_Generic_OnOff_Set+0x194>)
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <Appli_Generic_OnOff_Set+0xe6>
        {
          BSP_LED_On(LED_BLUE);
 8003f16:	2000      	movs	r0, #0
 8003f18:	f003 fe0e 	bl	8007b38 <BSP_LED_On>
      if(AppliOnOffSet[elementIndex].Present_OnOffValue == AppliOnOffSet[elementIndex].TargetValue)
 8003f1c:	e03a      	b.n	8003f94 <Appli_Generic_OnOff_Set+0x15c>
        }
        else
        {
          BSP_LED_Off(LED_BLUE);
 8003f1e:	2000      	movs	r0, #0
 8003f20:	f003 fe24 	bl	8007b6c <BSP_LED_Off>
      if(AppliOnOffSet[elementIndex].Present_OnOffValue == AppliOnOffSet[elementIndex].TargetValue)
 8003f24:	e036      	b.n	8003f94 <Appli_Generic_OnOff_Set+0x15c>
        }
      }
    }  
    else
    {
      if((AppliOnOffSet[elementIndex].Present_OnOff == APPLI_LED_ON) && (OptionalValid == NO_TRANSITION))
 8003f26:	78ba      	ldrb	r2, [r7, #2]
 8003f28:	4928      	ldr	r1, [pc, #160]	; (8003fcc <Appli_Generic_OnOff_Set+0x194>)
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	440b      	add	r3, r1
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d119      	bne.n	8003f6c <Appli_Generic_OnOff_Set+0x134>
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d116      	bne.n	8003f6c <Appli_Generic_OnOff_Set+0x134>
      { 
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
        Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <Appli_Generic_OnOff_Set+0x198>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	f062 0209 	orn	r2, r2, #9
 8003f46:	701a      	strb	r2, [r3, #0]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f042 027c 	orr.w	r2, r2, #124	; 0x7c
 8003f4e:	705a      	strb	r2, [r3, #1]
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 8003f50:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <Appli_Generic_OnOff_Set+0x198>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4611      	mov	r1, r2
 8003f56:	6858      	ldr	r0, [r3, #4]
 8003f58:	4602      	mov	r2, r0
 8003f5a:	6898      	ldr	r0, [r3, #8]
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2004      	movs	r0, #4
 8003f60:	f000 feba 	bl	8004cd8 <Light_UpdateLedValue>
#endif
        BSP_LED_On(LED_BLUE);
 8003f64:	2000      	movs	r0, #0
 8003f66:	f003 fde7 	bl	8007b38 <BSP_LED_On>
 8003f6a:	e013      	b.n	8003f94 <Appli_Generic_OnOff_Set+0x15c>
      }
      else
      {  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
        Appli_LightPwmValue.IntensityValue = PWM_VALUE_OFF;
 8003f6c:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <Appli_Generic_OnOff_Set+0x198>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f042 0201 	orr.w	r2, r2, #1
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	2200      	movs	r2, #0
 8003f78:	705a      	strb	r2, [r3, #1]
        Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);
 8003f7a:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <Appli_Generic_OnOff_Set+0x198>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4611      	mov	r1, r2
 8003f80:	6858      	ldr	r0, [r3, #4]
 8003f82:	4602      	mov	r2, r0
 8003f84:	6898      	ldr	r0, [r3, #8]
 8003f86:	4603      	mov	r3, r0
 8003f88:	2002      	movs	r0, #2
 8003f8a:	f000 fea5 	bl	8004cd8 <Light_UpdateLedValue>
#endif
        BSP_LED_Off(LED_BLUE);
 8003f8e:	2000      	movs	r0, #0
 8003f90:	f003 fdec 	bl	8007b6c <BSP_LED_Off>
      }
    } 
  }
  
  TRACE_M(TF_GENERIC, "Appli_Generic_OnOff_Set callback received for elementIndex %d \r\n", elementIndex);           
 8003f94:	2100      	movs	r1, #0
 8003f96:	480f      	ldr	r0, [pc, #60]	; (8003fd4 <Appli_Generic_OnOff_Set+0x19c>)
 8003f98:	f009 faf6 	bl	800d588 <TraceHeader>
 8003f9c:	78bb      	ldrb	r3, [r7, #2]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	480d      	ldr	r0, [pc, #52]	; (8003fd8 <Appli_Generic_OnOff_Set+0x1a0>)
 8003fa2:	f025 fbd9 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL, "#8202!for elementIndex %d \r\n", elementIndex);
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	480a      	ldr	r0, [pc, #40]	; (8003fd4 <Appli_Generic_OnOff_Set+0x19c>)
 8003faa:	f009 faed 	bl	800d588 <TraceHeader>
 8003fae:	78bb      	ldrb	r3, [r7, #2]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	480a      	ldr	r0, [pc, #40]	; (8003fdc <Appli_Generic_OnOff_Set+0x1a4>)
 8003fb4:	f025 fbd0 	bl	8029758 <iprintf>

  NvmStatePowerFlag_Set(GENERIC_ON_OFF_NVM_FLAG, elementIndex);
 8003fb8:	78bb      	ldrb	r3, [r7, #2]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	f009 fd27 	bl	800da10 <NvmStatePowerFlag_Set>

  return MOBLE_RESULT_SUCCESS;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20004400 	.word	0x20004400
 8003fd0:	20004420 	.word	0x20004420
 8003fd4:	0803279c 	.word	0x0803279c
 8003fd8:	0802db88 	.word	0x0802db88
 8003fdc:	0802dbcc 	.word	0x0802dbcc

08003fe0 <Appli_Generic_Level_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_Level_Set(Generic_LevelStatus_t* plevelParam, 
                                     MOBLEUINT8 OptionalValid,MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	4608      	mov	r0, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	461a      	mov	r2, r3
 8003fee:	4603      	mov	r3, r0
 8003ff0:	70fb      	strb	r3, [r7, #3]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	803b      	strh	r3, [r7, #0]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	70bb      	strb	r3, [r7, #2]
  MOBLEUINT16 duty;
  static MOBLEUINT16 previousIntensity = 0;
   
  AppliLevelSet[elementIndex].Present_Level16= plevelParam->Present_Level16;
 8003ffa:	78ba      	ldrb	r2, [r7, #2]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004002:	b218      	sxth	r0, r3
 8004004:	4948      	ldr	r1, [pc, #288]	; (8004128 <Appli_Generic_Level_Set+0x148>)
 8004006:	4613      	mov	r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	4602      	mov	r2, r0
 8004012:	801a      	strh	r2, [r3, #0]
  if(AppliLevelSet[elementIndex].Present_Level16 <= 0)
 8004014:	78ba      	ldrb	r2, [r7, #2]
 8004016:	4944      	ldr	r1, [pc, #272]	; (8004128 <Appli_Generic_Level_Set+0x148>)
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004026:	2b00      	cmp	r3, #0
 8004028:	dc08      	bgt.n	800403c <Appli_Generic_Level_Set+0x5c>
  {
    AppliLevelSet[elementIndex].Present_Level16 = 0;
 800402a:	78ba      	ldrb	r2, [r7, #2]
 800402c:	493e      	ldr	r1, [pc, #248]	; (8004128 <Appli_Generic_Level_Set+0x148>)
 800402e:	4613      	mov	r3, r2
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	2200      	movs	r2, #0
 800403a:	801a      	strh	r2, [r3, #0]
  }
  
  IntensityValue =  AppliLevelSet[elementIndex].Present_Level16;
 800403c:	78ba      	ldrb	r2, [r7, #2]
 800403e:	493a      	ldr	r1, [pc, #232]	; (8004128 <Appli_Generic_Level_Set+0x148>)
 8004040:	4613      	mov	r3, r2
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800404e:	b29a      	uxth	r2, r3
 8004050:	4b36      	ldr	r3, [pc, #216]	; (800412c <Appli_Generic_Level_Set+0x14c>)
 8004052:	801a      	strh	r2, [r3, #0]
  
  if(((IntensityValue > previousIntensity) && (IntensityValue <PWM_TIME_PERIOD)) ||
 8004054:	4b35      	ldr	r3, [pc, #212]	; (800412c <Appli_Generic_Level_Set+0x14c>)
 8004056:	881a      	ldrh	r2, [r3, #0]
 8004058:	4b35      	ldr	r3, [pc, #212]	; (8004130 <Appli_Generic_Level_Set+0x150>)
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d905      	bls.n	800406c <Appli_Generic_Level_Set+0x8c>
 8004060:	4b32      	ldr	r3, [pc, #200]	; (800412c <Appli_Generic_Level_Set+0x14c>)
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	f647 42f5 	movw	r2, #31989	; 0x7cf5
 8004068:	4293      	cmp	r3, r2
 800406a:	d903      	bls.n	8004074 <Appli_Generic_Level_Set+0x94>
     IntensityValue == INTENSITY_LEVEL_ZERO)
 800406c:	4b2f      	ldr	r3, [pc, #188]	; (800412c <Appli_Generic_Level_Set+0x14c>)
 800406e:	881b      	ldrh	r3, [r3, #0]
  if(((IntensityValue > previousIntensity) && (IntensityValue <PWM_TIME_PERIOD)) ||
 8004070:	2b00      	cmp	r3, #0
 8004072:	d103      	bne.n	800407c <Appli_Generic_Level_Set+0x9c>
  {
    IntensityFlag = MOBLE_FALSE;
 8004074:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <Appli_Generic_Level_Set+0x154>)
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	e002      	b.n	8004082 <Appli_Generic_Level_Set+0xa2>
  }
  else
  {
    IntensityFlag = MOBLE_TRUE;
 800407c:	4b2d      	ldr	r3, [pc, #180]	; (8004134 <Appli_Generic_Level_Set+0x154>)
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]
  }
  previousIntensity = IntensityValue;     
 8004082:	4b2a      	ldr	r3, [pc, #168]	; (800412c <Appli_Generic_Level_Set+0x14c>)
 8004084:	881a      	ldrh	r2, [r3, #0]
 8004086:	4b2a      	ldr	r3, [pc, #168]	; (8004130 <Appli_Generic_Level_Set+0x150>)
 8004088:	801a      	strh	r2, [r3, #0]
  
  if(AppliLevelSet[elementIndex].Present_Level16 < 0x00)
 800408a:	78ba      	ldrb	r2, [r7, #2]
 800408c:	4926      	ldr	r1, [pc, #152]	; (8004128 <Appli_Generic_Level_Set+0x148>)
 800408e:	4613      	mov	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800409c:	2b00      	cmp	r3, #0
 800409e:	da08      	bge.n	80040b2 <Appli_Generic_Level_Set+0xd2>
  {
     AppliLevelSet[elementIndex].Present_Level16 = 0;
 80040a0:	78ba      	ldrb	r2, [r7, #2]
 80040a2:	4921      	ldr	r1, [pc, #132]	; (8004128 <Appli_Generic_Level_Set+0x148>)
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	2200      	movs	r2, #0
 80040b0:	801a      	strh	r2, [r3, #0]
  }
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
  duty = PwmValueMapping(AppliLevelSet[elementIndex].Present_Level16 , 0x7FFF ,0x0000); 
 80040b2:	78ba      	ldrb	r2, [r7, #2]
 80040b4:	491c      	ldr	r1, [pc, #112]	; (8004128 <Appli_Generic_Level_Set+0x148>)
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2200      	movs	r2, #0
 80040c8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80040cc:	4618      	mov	r0, r3
 80040ce:	f002 fb83 	bl	80067d8 <PwmValueMapping>
 80040d2:	4603      	mov	r3, r0
 80040d4:	81fb      	strh	r3, [r7, #14]
  Appli_LightPwmValue.IntensityValue = duty;
 80040d6:	4b18      	ldr	r3, [pc, #96]	; (8004138 <Appli_Generic_Level_Set+0x158>)
 80040d8:	89fa      	ldrh	r2, [r7, #14]
 80040da:	801a      	strh	r2, [r3, #0]
  Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 80040dc:	4b16      	ldr	r3, [pc, #88]	; (8004138 <Appli_Generic_Level_Set+0x158>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4611      	mov	r1, r2
 80040e2:	6858      	ldr	r0, [r3, #4]
 80040e4:	4602      	mov	r2, r0
 80040e6:	6898      	ldr	r0, [r3, #8]
 80040e8:	4603      	mov	r3, r0
 80040ea:	2004      	movs	r0, #4
 80040ec:	f000 fdf4 	bl	8004cd8 <Light_UpdateLedValue>
#endif
  
  TRACE_M(TF_GENERIC,"Appli_Generic_Level_Set callback received for elementIndex %d \r\n", elementIndex);
 80040f0:	2100      	movs	r1, #0
 80040f2:	4812      	ldr	r0, [pc, #72]	; (800413c <Appli_Generic_Level_Set+0x15c>)
 80040f4:	f009 fa48 	bl	800d588 <TraceHeader>
 80040f8:	78bb      	ldrb	r3, [r7, #2]
 80040fa:	4619      	mov	r1, r3
 80040fc:	4810      	ldr	r0, [pc, #64]	; (8004140 <Appli_Generic_Level_Set+0x160>)
 80040fe:	f025 fb2b 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8206!for elementIndex %d \r\n", elementIndex);
 8004102:	2100      	movs	r1, #0
 8004104:	480d      	ldr	r0, [pc, #52]	; (800413c <Appli_Generic_Level_Set+0x15c>)
 8004106:	f009 fa3f 	bl	800d588 <TraceHeader>
 800410a:	78bb      	ldrb	r3, [r7, #2]
 800410c:	4619      	mov	r1, r3
 800410e:	480d      	ldr	r0, [pc, #52]	; (8004144 <Appli_Generic_Level_Set+0x164>)
 8004110:	f025 fb22 	bl	8029758 <iprintf>
  
  NvmStatePowerFlag_Set(GENERIC_LEVEL_NVM_FLAG, elementIndex);
 8004114:	78bb      	ldrb	r3, [r7, #2]
 8004116:	4619      	mov	r1, r3
 8004118:	2002      	movs	r0, #2
 800411a:	f009 fc79 	bl	800da10 <NvmStatePowerFlag_Set>
    
  return MOBLE_RESULT_SUCCESS;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20004408 	.word	0x20004408
 800412c:	20004430 	.word	0x20004430
 8004130:	2000441a 	.word	0x2000441a
 8004134:	20004432 	.word	0x20004432
 8004138:	20004420 	.word	0x20004420
 800413c:	080327b4 	.word	0x080327b4
 8004140:	0802dbec 	.word	0x0802dbec
 8004144:	0802dc30 	.word	0x0802dc30

08004148 <Appli_Generic_Delta_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_Delta_Set(Generic_LevelStatus_t* pdeltalevelParam, 
                                          MOBLEUINT8 OptionalValid,MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	4608      	mov	r0, r1
 8004152:	4611      	mov	r1, r2
 8004154:	461a      	mov	r2, r3
 8004156:	4603      	mov	r3, r0
 8004158:	70fb      	strb	r3, [r7, #3]
 800415a:	460b      	mov	r3, r1
 800415c:	803b      	strh	r3, [r7, #0]
 800415e:	4613      	mov	r3, r2
 8004160:	70bb      	strb	r3, [r7, #2]
  AppliLevelSet[elementIndex].Present_Level16 = pdeltalevelParam->Present_Level16;
 8004162:	78ba      	ldrb	r2, [r7, #2]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800416a:	b218      	sxth	r0, r3
 800416c:	4925      	ldr	r1, [pc, #148]	; (8004204 <Appli_Generic_Delta_Set+0xbc>)
 800416e:	4613      	mov	r3, r2
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	4602      	mov	r2, r0
 800417a:	801a      	strh	r2, [r3, #0]
  
  /* For demo, if Level is more than 50, switch ON the LED */
  if (AppliLevelSet[elementIndex].Present_Level16 >= 50)
 800417c:	78ba      	ldrb	r2, [r7, #2]
 800417e:	4921      	ldr	r1, [pc, #132]	; (8004204 <Appli_Generic_Delta_Set+0xbc>)
 8004180:	4613      	mov	r3, r2
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800418e:	2b31      	cmp	r3, #49	; 0x31
 8004190:	dd16      	ble.n	80041c0 <Appli_Generic_Delta_Set+0x78>
  {
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <Appli_Generic_Delta_Set+0xc0>)
 8004194:	2200      	movs	r2, #0
 8004196:	f062 0209 	orn	r2, r2, #9
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	2200      	movs	r2, #0
 800419e:	f042 027c 	orr.w	r2, r2, #124	; 0x7c
 80041a2:	705a      	strb	r2, [r3, #1]
    Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 80041a4:	4b18      	ldr	r3, [pc, #96]	; (8004208 <Appli_Generic_Delta_Set+0xc0>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4611      	mov	r1, r2
 80041aa:	6858      	ldr	r0, [r3, #4]
 80041ac:	4602      	mov	r2, r0
 80041ae:	6898      	ldr	r0, [r3, #8]
 80041b0:	4603      	mov	r3, r0
 80041b2:	2004      	movs	r0, #4
 80041b4:	f000 fd90 	bl	8004cd8 <Light_UpdateLedValue>
#endif
    BSP_LED_On(LED_BLUE);
 80041b8:	2000      	movs	r0, #0
 80041ba:	f003 fcbd 	bl	8007b38 <BSP_LED_On>
 80041be:	e00c      	b.n	80041da <Appli_Generic_Delta_Set+0x92>
  }
  else
  {
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);
 80041c0:	4b11      	ldr	r3, [pc, #68]	; (8004208 <Appli_Generic_Delta_Set+0xc0>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4611      	mov	r1, r2
 80041c6:	6858      	ldr	r0, [r3, #4]
 80041c8:	4602      	mov	r2, r0
 80041ca:	6898      	ldr	r0, [r3, #8]
 80041cc:	4603      	mov	r3, r0
 80041ce:	2002      	movs	r0, #2
 80041d0:	f000 fd82 	bl	8004cd8 <Light_UpdateLedValue>
#endif
    BSP_LED_Off(LED_BLUE);
 80041d4:	2000      	movs	r0, #0
 80041d6:	f003 fcc9 	bl	8007b6c <BSP_LED_Off>
  }
  
  TRACE_M(TF_GENERIC,"Generic_LevelDelta_Set callback received for element %d \r\n", elementIndex);
 80041da:	2100      	movs	r1, #0
 80041dc:	480b      	ldr	r0, [pc, #44]	; (800420c <Appli_Generic_Delta_Set+0xc4>)
 80041de:	f009 f9d3 	bl	800d588 <TraceHeader>
 80041e2:	78bb      	ldrb	r3, [r7, #2]
 80041e4:	4619      	mov	r1, r3
 80041e6:	480a      	ldr	r0, [pc, #40]	; (8004210 <Appli_Generic_Delta_Set+0xc8>)
 80041e8:	f025 fab6 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8209!\r\n");
 80041ec:	2100      	movs	r1, #0
 80041ee:	4807      	ldr	r0, [pc, #28]	; (800420c <Appli_Generic_Delta_Set+0xc4>)
 80041f0:	f009 f9ca 	bl	800d588 <TraceHeader>
 80041f4:	4807      	ldr	r0, [pc, #28]	; (8004214 <Appli_Generic_Delta_Set+0xcc>)
 80041f6:	f025 fb35 	bl	8029864 <puts>

  
  return MOBLE_RESULT_SUCCESS;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20004408 	.word	0x20004408
 8004208:	20004420 	.word	0x20004420
 800420c:	080327cc 	.word	0x080327cc
 8004210:	0802dc50 	.word	0x0802dc50
 8004214:	0802dc8c 	.word	0x0802dc8c

08004218 <Appli_Generic_Move_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_Move_Set(Generic_LevelStatus_t* pdeltaMoveParam, 
                                         MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                         MOBLEUINT8 elementIndex)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	4608      	mov	r0, r1
 8004222:	4611      	mov	r1, r2
 8004224:	461a      	mov	r2, r3
 8004226:	4603      	mov	r3, r0
 8004228:	70fb      	strb	r3, [r7, #3]
 800422a:	460b      	mov	r3, r1
 800422c:	803b      	strh	r3, [r7, #0]
 800422e:	4613      	mov	r3, r2
 8004230:	70bb      	strb	r3, [r7, #2]
//  if(OptionalValid == 1)
//  {
    AppliLevelSet[elementIndex].Last_delta_level     = pdeltaMoveParam->Last_delta_level;
 8004232:	78ba      	ldrb	r2, [r7, #2]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6899      	ldr	r1, [r3, #8]
 8004238:	482e      	ldr	r0, [pc, #184]	; (80042f4 <Appli_Generic_Move_Set+0xdc>)
 800423a:	4613      	mov	r3, r2
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4403      	add	r3, r0
 8004244:	3308      	adds	r3, #8
 8004246:	6019      	str	r1, [r3, #0]
    AppliLevelSet[elementIndex].Last_Level_TID       = pdeltaMoveParam->Last_Level_TID;
 8004248:	78ba      	ldrb	r2, [r7, #2]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	7958      	ldrb	r0, [r3, #5]
 800424e:	4929      	ldr	r1, [pc, #164]	; (80042f4 <Appli_Generic_Move_Set+0xdc>)
 8004250:	4613      	mov	r3, r2
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	3305      	adds	r3, #5
 800425c:	4602      	mov	r2, r0
 800425e:	701a      	strb	r2, [r3, #0]
    AppliLevelSet[elementIndex].Last_Present_Level16 = pdeltaMoveParam->Last_Present_Level16;
 8004260:	78ba      	ldrb	r2, [r7, #2]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004268:	b218      	sxth	r0, r3
 800426a:	4922      	ldr	r1, [pc, #136]	; (80042f4 <Appli_Generic_Move_Set+0xdc>)
 800426c:	4613      	mov	r3, r2
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	3306      	adds	r3, #6
 8004278:	4602      	mov	r2, r0
 800427a:	801a      	strh	r2, [r3, #0]
    AppliLevelSet[elementIndex].Present_Level16      = pdeltaMoveParam->Present_Level16;   
 800427c:	78ba      	ldrb	r2, [r7, #2]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004284:	b218      	sxth	r0, r3
 8004286:	491b      	ldr	r1, [pc, #108]	; (80042f4 <Appli_Generic_Move_Set+0xdc>)
 8004288:	4613      	mov	r3, r2
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	4602      	mov	r2, r0
 8004294:	801a      	strh	r2, [r3, #0]
    AppliLevelSet[elementIndex].RemainingTime        = pdeltaMoveParam->RemainingTime;
 8004296:	78ba      	ldrb	r2, [r7, #2]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	7918      	ldrb	r0, [r3, #4]
 800429c:	4915      	ldr	r1, [pc, #84]	; (80042f4 <Appli_Generic_Move_Set+0xdc>)
 800429e:	4613      	mov	r3, r2
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	3304      	adds	r3, #4
 80042aa:	4602      	mov	r2, r0
 80042ac:	701a      	strb	r2, [r3, #0]
    AppliLevelSet[elementIndex].Target_Level16       = pdeltaMoveParam->Target_Level16;
 80042ae:	78ba      	ldrb	r2, [r7, #2]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80042b6:	b218      	sxth	r0, r3
 80042b8:	490e      	ldr	r1, [pc, #56]	; (80042f4 <Appli_Generic_Move_Set+0xdc>)
 80042ba:	4613      	mov	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	3302      	adds	r3, #2
 80042c6:	4602      	mov	r2, r0
 80042c8:	801a      	strh	r2, [r3, #0]
//  }
  
    TRACE_M(TF_GENERIC,"Generic_LevelMove_Set callback received for element %d \r\n", elementIndex);
 80042ca:	2100      	movs	r1, #0
 80042cc:	480a      	ldr	r0, [pc, #40]	; (80042f8 <Appli_Generic_Move_Set+0xe0>)
 80042ce:	f009 f95b 	bl	800d588 <TraceHeader>
 80042d2:	78bb      	ldrb	r3, [r7, #2]
 80042d4:	4619      	mov	r1, r3
 80042d6:	4809      	ldr	r0, [pc, #36]	; (80042fc <Appli_Generic_Move_Set+0xe4>)
 80042d8:	f025 fa3e 	bl	8029758 <iprintf>
    TRACE_M(TF_SERIAL_CTRL,"#820B! \r\n");
 80042dc:	2100      	movs	r1, #0
 80042de:	4806      	ldr	r0, [pc, #24]	; (80042f8 <Appli_Generic_Move_Set+0xe0>)
 80042e0:	f009 f952 	bl	800d588 <TraceHeader>
 80042e4:	4806      	ldr	r0, [pc, #24]	; (8004300 <Appli_Generic_Move_Set+0xe8>)
 80042e6:	f025 fabd 	bl	8029864 <puts>
    return MOBLE_RESULT_SUCCESS;
 80042ea:	2300      	movs	r3, #0
  
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20004408 	.word	0x20004408
 80042f8:	080327e4 	.word	0x080327e4
 80042fc:	0802dc94 	.word	0x0802dc94
 8004300:	0802dcd0 	.word	0x0802dcd0

08004304 <Appli_Generic_PowerOnOff_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_PowerOnOff_Set(Generic_PowerOnOffParam_t* pPowerOnOffParam, 
                                         MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{ 
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	4608      	mov	r0, r1
 800430e:	4611      	mov	r1, r2
 8004310:	461a      	mov	r2, r3
 8004312:	4603      	mov	r3, r0
 8004314:	70fb      	strb	r3, [r7, #3]
 8004316:	460b      	mov	r3, r1
 8004318:	803b      	strh	r3, [r7, #0]
 800431a:	4613      	mov	r3, r2
 800431c:	70bb      	strb	r3, [r7, #2]
  
  AppliPowerOnSet[elementIndex].PowerOnState = pPowerOnOffParam->PowerOnOffState;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	781a      	ldrb	r2, [r3, #0]
 8004322:	78bb      	ldrb	r3, [r7, #2]
 8004324:	b211      	sxth	r1, r2
 8004326:	4a12      	ldr	r2, [pc, #72]	; (8004370 <Appli_Generic_PowerOnOff_Set+0x6c>)
 8004328:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  TRACE_M(TF_SERIAL_CTRL,"#8213! for elementIndex %d \r\n", elementIndex);
 800432c:	2100      	movs	r1, #0
 800432e:	4811      	ldr	r0, [pc, #68]	; (8004374 <Appli_Generic_PowerOnOff_Set+0x70>)
 8004330:	f009 f92a 	bl	800d588 <TraceHeader>
 8004334:	78bb      	ldrb	r3, [r7, #2]
 8004336:	4619      	mov	r1, r3
 8004338:	480f      	ldr	r0, [pc, #60]	; (8004378 <Appli_Generic_PowerOnOff_Set+0x74>)
 800433a:	f025 fa0d 	bl	8029758 <iprintf>
  TRACE_M(TF_GENERIC,"Appli_Generic_PowerOnOff_Set callback received for elementIndex %d \r\n", elementIndex);
 800433e:	2100      	movs	r1, #0
 8004340:	480c      	ldr	r0, [pc, #48]	; (8004374 <Appli_Generic_PowerOnOff_Set+0x70>)
 8004342:	f009 f921 	bl	800d588 <TraceHeader>
 8004346:	78bb      	ldrb	r3, [r7, #2]
 8004348:	4619      	mov	r1, r3
 800434a:	480c      	ldr	r0, [pc, #48]	; (800437c <Appli_Generic_PowerOnOff_Set+0x78>)
 800434c:	f025 fa04 	bl	8029758 <iprintf>

  if(AppliPowerOnSet[elementIndex].PowerOnState == GENERIC_POWER_ON_STATE)
 8004350:	78bb      	ldrb	r3, [r7, #2]
 8004352:	4a07      	ldr	r2, [pc, #28]	; (8004370 <Appli_Generic_PowerOnOff_Set+0x6c>)
 8004354:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d102      	bne.n	8004362 <Appli_Generic_PowerOnOff_Set+0x5e>
  {
    /* set the flag value for NVM store */
    RestoreFlag = GENERIC_ON_OFF_NVM_FLAG;
 800435c:	4b08      	ldr	r3, [pc, #32]	; (8004380 <Appli_Generic_PowerOnOff_Set+0x7c>)
 800435e:	2201      	movs	r2, #1
 8004360:	701a      	strb	r2, [r3, #0]
  }

  AppliNvm_SaveMessageParam();
 8004362:	f002 fa9b 	bl	800689c <AppliNvm_SaveMessageParam>
    
  return MOBLE_RESULT_SUCCESS;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20004414 	.word	0x20004414
 8004374:	080327fc 	.word	0x080327fc
 8004378:	0802dcdc 	.word	0x0802dcdc
 800437c:	0802dcfc 	.word	0x0802dcfc
 8004380:	20004544 	.word	0x20004544

08004384 <Appli_Generic_GetOnOffStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetOnOffStatus(MOBLEUINT8* pOnOff_Status,MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex)                                        
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	807b      	strh	r3, [r7, #2]
 8004390:	4613      	mov	r3, r2
 8004392:	707b      	strb	r3, [r7, #1]
  
  *pOnOff_Status = AppliOnOffSet[elementIndex].Present_OnOff;
 8004394:	787a      	ldrb	r2, [r7, #1]
 8004396:	4907      	ldr	r1, [pc, #28]	; (80043b4 <Appli_Generic_GetOnOffStatus+0x30>)
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	440b      	add	r3, r1
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS; 
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	20004400 	.word	0x20004400

080043b8 <Appli_Generic_GetOnOffValue>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetOnOffValue(MOBLEUINT8* pOnOff_Value, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex)                                        
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	807b      	strh	r3, [r7, #2]
 80043c4:	4613      	mov	r3, r2
 80043c6:	707b      	strb	r3, [r7, #1]
  
  *pOnOff_Value = AppliOnOffSet[elementIndex].Present_OnOffValue;
 80043c8:	787a      	ldrb	r2, [r7, #1]
 80043ca:	491e      	ldr	r1, [pc, #120]	; (8004444 <Appli_Generic_GetOnOffValue+0x8c>)
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	440b      	add	r3, r1
 80043d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	701a      	strb	r2, [r3, #0]
  *(pOnOff_Value+1) = AppliOnOffSet[elementIndex].Present_OnOffValue >> 8;
 80043e0:	787a      	ldrb	r2, [r7, #1]
 80043e2:	4918      	ldr	r1, [pc, #96]	; (8004444 <Appli_Generic_GetOnOffValue+0x8c>)
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	440b      	add	r3, r1
 80043ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	0a1b      	lsrs	r3, r3, #8
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3301      	adds	r3, #1
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]
  *(pOnOff_Value+2) = AppliOnOffSet[elementIndex].TargetValue;
 80043fe:	787a      	ldrb	r2, [r7, #1]
 8004400:	4910      	ldr	r1, [pc, #64]	; (8004444 <Appli_Generic_GetOnOffValue+0x8c>)
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	440b      	add	r3, r1
 800440a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800440e:	b29a      	uxth	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3302      	adds	r3, #2
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	701a      	strb	r2, [r3, #0]
  *(pOnOff_Value+3) = AppliOnOffSet[elementIndex].TargetValue >> 8;
 8004418:	787a      	ldrb	r2, [r7, #1]
 800441a:	490a      	ldr	r1, [pc, #40]	; (8004444 <Appli_Generic_GetOnOffValue+0x8c>)
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	440b      	add	r3, r1
 8004424:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004428:	b29b      	uxth	r3, r3
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	b29a      	uxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3303      	adds	r3, #3
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS; 
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	20004400 	.word	0x20004400

08004448 <Appli_Generic_GetLevelStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetLevelStatus(MOBLEUINT8* pLevel_Status, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{ 
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
 8004454:	4613      	mov	r3, r2
 8004456:	707b      	strb	r3, [r7, #1]

   *pLevel_Status = AppliLevelSet[elementIndex].Present_Level16;
 8004458:	787a      	ldrb	r2, [r7, #1]
 800445a:	491f      	ldr	r1, [pc, #124]	; (80044d8 <Appli_Generic_GetLevelStatus+0x90>)
 800445c:	4613      	mov	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800446a:	b2da      	uxtb	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	701a      	strb	r2, [r3, #0]
   *(pLevel_Status+1) = AppliLevelSet[elementIndex].Present_Level16 >> 8;
 8004470:	787a      	ldrb	r2, [r7, #1]
 8004472:	4919      	ldr	r1, [pc, #100]	; (80044d8 <Appli_Generic_GetLevelStatus+0x90>)
 8004474:	4613      	mov	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004482:	121b      	asrs	r3, r3, #8
 8004484:	b21a      	sxth	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3301      	adds	r3, #1
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]
   *(pLevel_Status+2) = AppliLevelSet[elementIndex].Target_Level16;
 800448e:	787a      	ldrb	r2, [r7, #1]
 8004490:	4911      	ldr	r1, [pc, #68]	; (80044d8 <Appli_Generic_GetLevelStatus+0x90>)
 8004492:	4613      	mov	r3, r2
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	3302      	adds	r3, #2
 800449e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3302      	adds	r3, #2
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]
   *(pLevel_Status+3) = AppliLevelSet[elementIndex].Target_Level16 >> 8;
 80044aa:	787a      	ldrb	r2, [r7, #1]
 80044ac:	490a      	ldr	r1, [pc, #40]	; (80044d8 <Appli_Generic_GetLevelStatus+0x90>)
 80044ae:	4613      	mov	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	3302      	adds	r3, #2
 80044ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044be:	121b      	asrs	r3, r3, #8
 80044c0:	b21a      	sxth	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3303      	adds	r3, #3
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS; 
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	20004408 	.word	0x20004408

080044dc <Appli_Generic_GetPowerOnOffStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetPowerOnOffStatus(MOBLEUINT8* pPower_Status, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{ 
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	807b      	strh	r3, [r7, #2]
 80044e8:	4613      	mov	r3, r2
 80044ea:	707b      	strb	r3, [r7, #1]

  *pPower_Status = AppliPowerOnSet[elementIndex].PowerOnState;
 80044ec:	787b      	ldrb	r3, [r7, #1]
 80044ee:	4a06      	ldr	r2, [pc, #24]	; (8004508 <Appli_Generic_GetPowerOnOffStatus+0x2c>)
 80044f0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS; 
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	20004414 	.word	0x20004414

0800450c <Appli_Generic_GetDefaultTransitionStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetDefaultTransitionStatus(MOBLEUINT8* pTransition_Status,MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{ 
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	807b      	strh	r3, [r7, #2]
 8004518:	4613      	mov	r3, r2
 800451a:	707b      	strb	r3, [r7, #1]

  *pTransition_Status = AppliDefaultTransitionSet[elementIndex].DefaultTransitionTime;
 800451c:	787b      	ldrb	r3, [r7, #1]
 800451e:	4a05      	ldr	r2, [pc, #20]	; (8004534 <Appli_Generic_GetDefaultTransitionStatus+0x28>)
 8004520:	5cd2      	ldrb	r2, [r2, r3]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS; 
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	20004418 	.word	0x20004418

08004538 <Appli_Generic_OnOff_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_OnOff_Status(MOBLEUINT8 const *pOnOff_status, MOBLEUINT32 plength, 
                                        MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	4611      	mov	r1, r2
 8004544:	461a      	mov	r2, r3
 8004546:	460b      	mov	r3, r1
 8004548:	80fb      	strh	r3, [r7, #6]
 800454a:	4613      	mov	r3, r2
 800454c:	717b      	strb	r3, [r7, #5]
  MOBLEUINT8 i;
  
  TRACE_M(TF_GENERIC,"Generic_OnOff_Status callback received for element %d \r\n", elementIndex);
 800454e:	2100      	movs	r1, #0
 8004550:	4826      	ldr	r0, [pc, #152]	; (80045ec <Appli_Generic_OnOff_Status+0xb4>)
 8004552:	f009 f819 	bl	800d588 <TraceHeader>
 8004556:	797b      	ldrb	r3, [r7, #5]
 8004558:	4619      	mov	r1, r3
 800455a:	4825      	ldr	r0, [pc, #148]	; (80045f0 <Appli_Generic_OnOff_Status+0xb8>)
 800455c:	f025 f8fc 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8204!\r\n");
 8004560:	2100      	movs	r1, #0
 8004562:	4822      	ldr	r0, [pc, #136]	; (80045ec <Appli_Generic_OnOff_Status+0xb4>)
 8004564:	f009 f810 	bl	800d588 <TraceHeader>
 8004568:	4822      	ldr	r0, [pc, #136]	; (80045f4 <Appli_Generic_OnOff_Status+0xbc>)
 800456a:	f025 f97b 	bl	8029864 <puts>
  
  for(i = 0; i < plength; i++)
 800456e:	2300      	movs	r3, #0
 8004570:	75fb      	strb	r3, [r7, #23]
 8004572:	e031      	b.n	80045d8 <Appli_Generic_OnOff_Status+0xa0>
  {
    if(i == 0)
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10c      	bne.n	8004594 <Appli_Generic_OnOff_Status+0x5c>
      TRACE_M(TF_SERIAL_CTRL,"Present OnOff value: %d\n\r", pOnOff_status[i]);
 800457a:	2100      	movs	r1, #0
 800457c:	481b      	ldr	r0, [pc, #108]	; (80045ec <Appli_Generic_OnOff_Status+0xb4>)
 800457e:	f009 f803 	bl	800d588 <TraceHeader>
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	4619      	mov	r1, r3
 800458c:	481a      	ldr	r0, [pc, #104]	; (80045f8 <Appli_Generic_OnOff_Status+0xc0>)
 800458e:	f025 f8e3 	bl	8029758 <iprintf>
 8004592:	e01e      	b.n	80045d2 <Appli_Generic_OnOff_Status+0x9a>
    else if(i == 1)
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d10c      	bne.n	80045b4 <Appli_Generic_OnOff_Status+0x7c>
      TRACE_M(TF_SERIAL_CTRL,"Target OnOff value: %d\n\r", pOnOff_status[i]);
 800459a:	2100      	movs	r1, #0
 800459c:	4813      	ldr	r0, [pc, #76]	; (80045ec <Appli_Generic_OnOff_Status+0xb4>)
 800459e:	f008 fff3 	bl	800d588 <TraceHeader>
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	4619      	mov	r1, r3
 80045ac:	4813      	ldr	r0, [pc, #76]	; (80045fc <Appli_Generic_OnOff_Status+0xc4>)
 80045ae:	f025 f8d3 	bl	8029758 <iprintf>
 80045b2:	e00e      	b.n	80045d2 <Appli_Generic_OnOff_Status+0x9a>
    else if(i == 2)
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d10b      	bne.n	80045d2 <Appli_Generic_OnOff_Status+0x9a>
      TRACE_M(TF_SERIAL_CTRL,"Remaining Time value: %d\n\r", pOnOff_status[i]);
 80045ba:	2100      	movs	r1, #0
 80045bc:	480b      	ldr	r0, [pc, #44]	; (80045ec <Appli_Generic_OnOff_Status+0xb4>)
 80045be:	f008 ffe3 	bl	800d588 <TraceHeader>
 80045c2:	7dfb      	ldrb	r3, [r7, #23]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	4619      	mov	r1, r3
 80045cc:	480c      	ldr	r0, [pc, #48]	; (8004600 <Appli_Generic_OnOff_Status+0xc8>)
 80045ce:	f025 f8c3 	bl	8029758 <iprintf>
  for(i = 0; i < plength; i++)
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	3301      	adds	r3, #1
 80045d6:	75fb      	strb	r3, [r7, #23]
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d8c9      	bhi.n	8004574 <Appli_Generic_OnOff_Status+0x3c>
  }
  
  return MOBLE_RESULT_SUCCESS;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	0803281c 	.word	0x0803281c
 80045f0:	0802dd44 	.word	0x0802dd44
 80045f4:	0802dd80 	.word	0x0802dd80
 80045f8:	0802dd88 	.word	0x0802dd88
 80045fc:	0802dda4 	.word	0x0802dda4
 8004600:	0802ddc0 	.word	0x0802ddc0

08004604 <Appli_Generic_DefaultTransitionTime_Status>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Generic_DefaultTransitionTime_Status(MOBLEUINT8 const *pTransition_status , MOBLEUINT32 plength,MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{  
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	4611      	mov	r1, r2
 8004610:	461a      	mov	r2, r3
 8004612:	460b      	mov	r3, r1
 8004614:	80fb      	strh	r3, [r7, #6]
 8004616:	4613      	mov	r3, r2
 8004618:	717b      	strb	r3, [r7, #5]

  TRACE_M(TF_GENERIC,"Generic_DefaultTransitionTime_Status callback received for element %d \r\n", elementIndex);
 800461a:	2100      	movs	r1, #0
 800461c:	4809      	ldr	r0, [pc, #36]	; (8004644 <Appli_Generic_DefaultTransitionTime_Status+0x40>)
 800461e:	f008 ffb3 	bl	800d588 <TraceHeader>
 8004622:	797b      	ldrb	r3, [r7, #5]
 8004624:	4619      	mov	r1, r3
 8004626:	4808      	ldr	r0, [pc, #32]	; (8004648 <Appli_Generic_DefaultTransitionTime_Status+0x44>)
 8004628:	f025 f896 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8210!\r\n");
 800462c:	2100      	movs	r1, #0
 800462e:	4805      	ldr	r0, [pc, #20]	; (8004644 <Appli_Generic_DefaultTransitionTime_Status+0x40>)
 8004630:	f008 ffaa 	bl	800d588 <TraceHeader>
 8004634:	4805      	ldr	r0, [pc, #20]	; (800464c <Appli_Generic_DefaultTransitionTime_Status+0x48>)
 8004636:	f025 f915 	bl	8029864 <puts>
  
  return MOBLE_RESULT_SUCCESS;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	08032838 	.word	0x08032838
 8004648:	0802dddc 	.word	0x0802dddc
 800464c:	0802de28 	.word	0x0802de28

08004650 <Appli_Generic_PowerOnOff_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_PowerOnOff_Status(MOBLEUINT8 const *powerOnOff_status,\
                 MOBLEUINT32 plength, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{  
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	4611      	mov	r1, r2
 800465c:	461a      	mov	r2, r3
 800465e:	460b      	mov	r3, r1
 8004660:	80fb      	strh	r3, [r7, #6]
 8004662:	4613      	mov	r3, r2
 8004664:	717b      	strb	r3, [r7, #5]
  MOBLEUINT8 i;

  TRACE_M(TF_GENERIC,"Generic_PowerOnOff_Status callback received for element %d \r\n", elementIndex);
 8004666:	2100      	movs	r1, #0
 8004668:	4816      	ldr	r0, [pc, #88]	; (80046c4 <Appli_Generic_PowerOnOff_Status+0x74>)
 800466a:	f008 ff8d 	bl	800d588 <TraceHeader>
 800466e:	797b      	ldrb	r3, [r7, #5]
 8004670:	4619      	mov	r1, r3
 8004672:	4815      	ldr	r0, [pc, #84]	; (80046c8 <Appli_Generic_PowerOnOff_Status+0x78>)
 8004674:	f025 f870 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8212!\r\n");
 8004678:	2100      	movs	r1, #0
 800467a:	4812      	ldr	r0, [pc, #72]	; (80046c4 <Appli_Generic_PowerOnOff_Status+0x74>)
 800467c:	f008 ff84 	bl	800d588 <TraceHeader>
 8004680:	4812      	ldr	r0, [pc, #72]	; (80046cc <Appli_Generic_PowerOnOff_Status+0x7c>)
 8004682:	f025 f8ef 	bl	8029864 <puts>
  
  for(i = 0; i < plength; i++)
 8004686:	2300      	movs	r3, #0
 8004688:	75fb      	strb	r3, [r7, #23]
 800468a:	e011      	b.n	80046b0 <Appli_Generic_PowerOnOff_Status+0x60>
  {
    if(i == 0)
 800468c:	7dfb      	ldrb	r3, [r7, #23]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10b      	bne.n	80046aa <Appli_Generic_PowerOnOff_Status+0x5a>
      TRACE_M(TF_SERIAL_CTRL,"On Power up value: %d\n\r", 
 8004692:	2100      	movs	r1, #0
 8004694:	480b      	ldr	r0, [pc, #44]	; (80046c4 <Appli_Generic_PowerOnOff_Status+0x74>)
 8004696:	f008 ff77 	bl	800d588 <TraceHeader>
 800469a:	7dfb      	ldrb	r3, [r7, #23]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	4619      	mov	r1, r3
 80046a4:	480a      	ldr	r0, [pc, #40]	; (80046d0 <Appli_Generic_PowerOnOff_Status+0x80>)
 80046a6:	f025 f857 	bl	8029758 <iprintf>
  for(i = 0; i < plength; i++)
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	3301      	adds	r3, #1
 80046ae:	75fb      	strb	r3, [r7, #23]
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d8e9      	bhi.n	800468c <Appli_Generic_PowerOnOff_Status+0x3c>
              powerOnOff_status[i]);
  }

  return MOBLE_RESULT_SUCCESS;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	08032864 	.word	0x08032864
 80046c8:	0802de30 	.word	0x0802de30
 80046cc:	0802de70 	.word	0x0802de70
 80046d0:	0802de78 	.word	0x0802de78

080046d4 <Appli_Light_Lightness_Set>:
*/ 
MOBLE_RESULT Appli_Light_Lightness_Set(Light_LightnessStatus_t* pLight_LightnessParam,
                                       MOBLEUINT8 OptionalValid,
                                       MOBLEUINT16 dstPeer,
                                       MOBLEUINT8 elementIndex)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	4608      	mov	r0, r1
 80046de:	4611      	mov	r1, r2
 80046e0:	461a      	mov	r2, r3
 80046e2:	4603      	mov	r3, r0
 80046e4:	70fb      	strb	r3, [r7, #3]
 80046e6:	460b      	mov	r3, r1
 80046e8:	803b      	strh	r3, [r7, #0]
 80046ea:	4613      	mov	r3, r2
 80046ec:	70bb      	strb	r3, [r7, #2]
  MOBLEUINT16 duty;
  static MOBLEUINT16 previousIntensity = 0;
  
  TRACE_M(TF_SERIAL_CTRL, "#824C!\n\r");
 80046ee:	2100      	movs	r1, #0
 80046f0:	4841      	ldr	r0, [pc, #260]	; (80047f8 <Appli_Light_Lightness_Set+0x124>)
 80046f2:	f008 ff49 	bl	800d588 <TraceHeader>
 80046f6:	4841      	ldr	r0, [pc, #260]	; (80047fc <Appli_Light_Lightness_Set+0x128>)
 80046f8:	f025 f82e 	bl	8029758 <iprintf>
  TRACE_M(TF_LIGHT, "Element index %d present 0x%.2x last 0x%.2x\r\n", 
 80046fc:	2100      	movs	r1, #0
 80046fe:	483e      	ldr	r0, [pc, #248]	; (80047f8 <Appli_Light_Lightness_Set+0x124>)
 8004700:	f008 ff42 	bl	800d588 <TraceHeader>
 8004704:	78b9      	ldrb	r1, [r7, #2]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004714:	b29b      	uxth	r3, r3
 8004716:	483a      	ldr	r0, [pc, #232]	; (8004800 <Appli_Light_Lightness_Set+0x12c>)
 8004718:	f025 f81e 	bl	8029758 <iprintf>
          elementIndex,
          pLight_LightnessParam->LightnessPresentValue16,
          pLight_LightnessParam->LightnessLastStatus);  
  
  ApplilightnessSet[elementIndex].PresentState16 = pLight_LightnessParam->LightnessPresentValue16;
 800471c:	78ba      	ldrb	r2, [r7, #2]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b298      	uxth	r0, r3
 8004724:	4937      	ldr	r1, [pc, #220]	; (8004804 <Appli_Light_Lightness_Set+0x130>)
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4413      	add	r3, r2
 8004730:	440b      	add	r3, r1
 8004732:	4602      	mov	r2, r0
 8004734:	801a      	strh	r2, [r3, #0]
  ApplilightnessSet[elementIndex].LastLightness16 = pLight_LightnessParam->LightnessLastStatus;
 8004736:	78ba      	ldrb	r2, [r7, #2]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800473e:	b298      	uxth	r0, r3
 8004740:	4930      	ldr	r1, [pc, #192]	; (8004804 <Appli_Light_Lightness_Set+0x130>)
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	440b      	add	r3, r1
 800474e:	3302      	adds	r3, #2
 8004750:	4602      	mov	r2, r0
 8004752:	801a      	strh	r2, [r3, #0]

  if(pLight_LightnessParam->LightnessPresentValue16 != 0x00)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00d      	beq.n	800477a <Appli_Light_Lightness_Set+0xa6>
  {
    ApplilightnessSet[elementIndex].LastLightness16 = pLight_LightnessParam->LightnessPresentValue16;
 800475e:	78ba      	ldrb	r2, [r7, #2]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b298      	uxth	r0, r3
 8004766:	4927      	ldr	r1, [pc, #156]	; (8004804 <Appli_Light_Lightness_Set+0x130>)
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4413      	add	r3, r2
 8004772:	440b      	add	r3, r1
 8004774:	3302      	adds	r3, #2
 8004776:	4602      	mov	r2, r0
 8004778:	801a      	strh	r2, [r3, #0]
  }

  if(((IntensityValue > previousIntensity) && (IntensityValue <PWM_TIME_PERIOD)) ||
 800477a:	4b23      	ldr	r3, [pc, #140]	; (8004808 <Appli_Light_Lightness_Set+0x134>)
 800477c:	881a      	ldrh	r2, [r3, #0]
 800477e:	4b23      	ldr	r3, [pc, #140]	; (800480c <Appli_Light_Lightness_Set+0x138>)
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d905      	bls.n	8004792 <Appli_Light_Lightness_Set+0xbe>
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <Appli_Light_Lightness_Set+0x134>)
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	f647 42f5 	movw	r2, #31989	; 0x7cf5
 800478e:	4293      	cmp	r3, r2
 8004790:	d903      	bls.n	800479a <Appli_Light_Lightness_Set+0xc6>
     IntensityValue == INTENSITY_LEVEL_ZERO)
 8004792:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <Appli_Light_Lightness_Set+0x134>)
 8004794:	881b      	ldrh	r3, [r3, #0]
  if(((IntensityValue > previousIntensity) && (IntensityValue <PWM_TIME_PERIOD)) ||
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <Appli_Light_Lightness_Set+0xce>
  {
    IntensityFlag = MOBLE_FALSE;
 800479a:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <Appli_Light_Lightness_Set+0x13c>)
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]
 80047a0:	e002      	b.n	80047a8 <Appli_Light_Lightness_Set+0xd4>
  }
  else
  {
    IntensityFlag = MOBLE_TRUE;
 80047a2:	4b1b      	ldr	r3, [pc, #108]	; (8004810 <Appli_Light_Lightness_Set+0x13c>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	701a      	strb	r2, [r3, #0]
  }
  previousIntensity = IntensityValue; 
 80047a8:	4b17      	ldr	r3, [pc, #92]	; (8004808 <Appli_Light_Lightness_Set+0x134>)
 80047aa:	881a      	ldrh	r2, [r3, #0]
 80047ac:	4b17      	ldr	r3, [pc, #92]	; (800480c <Appli_Light_Lightness_Set+0x138>)
 80047ae:	801a      	strh	r2, [r3, #0]
  {
    BSP_LED_Off(LED_BLUE);
  }
#endif

  duty = PwmValueMapping(ApplilightnessSet[elementIndex].PresentState16 , 0xfFFF ,0); 
 80047b0:	78ba      	ldrb	r2, [r7, #2]
 80047b2:	4914      	ldr	r1, [pc, #80]	; (8004804 <Appli_Light_Lightness_Set+0x130>)
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	4413      	add	r3, r2
 80047be:	440b      	add	r3, r1
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	2200      	movs	r2, #0
 80047c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047ca:	4618      	mov	r0, r3
 80047cc:	f002 f804 	bl	80067d8 <PwmValueMapping>
 80047d0:	4603      	mov	r3, r0
 80047d2:	81fb      	strh	r3, [r7, #14]
  Appli_LightPwmValue.IntensityValue = duty;
 80047d4:	4a0f      	ldr	r2, [pc, #60]	; (8004814 <Appli_Light_Lightness_Set+0x140>)
 80047d6:	89fb      	ldrh	r3, [r7, #14]
 80047d8:	8013      	strh	r3, [r2, #0]
  Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 80047da:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <Appli_Light_Lightness_Set+0x140>)
 80047dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047de:	2004      	movs	r0, #4
 80047e0:	f000 fa7a 	bl	8004cd8 <Light_UpdateLedValue>

  /* set the flag value for NVM store */
  NvmStatePowerFlag_Set(LIGHT_LIGHTNESS_NVM_FLAG, elementIndex);
 80047e4:	78bb      	ldrb	r3, [r7, #2]
 80047e6:	4619      	mov	r1, r3
 80047e8:	2003      	movs	r0, #3
 80047ea:	f009 f911 	bl	800da10 <NvmStatePowerFlag_Set>
  
  return MOBLE_RESULT_SUCCESS;
 80047ee:	2300      	movs	r3, #0
  
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	08032884 	.word	0x08032884
 80047fc:	0802deac 	.word	0x0802deac
 8004800:	0802deb8 	.word	0x0802deb8
 8004804:	20000074 	.word	0x20000074
 8004808:	20004430 	.word	0x20004430
 800480c:	2000442c 	.word	0x2000442c
 8004810:	20004432 	.word	0x20004432
 8004814:	20004420 	.word	0x20004420

08004818 <Appli_Light_Lightness_Linear_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Linear_Set(Light_LightnessStatus_t* pLight_LightnessLinearParam,
                                              MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	4608      	mov	r0, r1
 8004822:	4611      	mov	r1, r2
 8004824:	461a      	mov	r2, r3
 8004826:	4603      	mov	r3, r0
 8004828:	70fb      	strb	r3, [r7, #3]
 800482a:	460b      	mov	r3, r1
 800482c:	803b      	strh	r3, [r7, #0]
 800482e:	4613      	mov	r3, r2
 8004830:	70bb      	strb	r3, [r7, #2]
  ApplilightnessLinearSet[elementIndex].PresentState16 = pLight_LightnessLinearParam->LinearPresentValue16; 
 8004832:	78bb      	ldrb	r3, [r7, #2]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	8852      	ldrh	r2, [r2, #2]
 8004838:	b291      	uxth	r1, r2
 800483a:	4a0c      	ldr	r2, [pc, #48]	; (800486c <Appli_Light_Lightness_Linear_Set+0x54>)
 800483c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  
  TRACE_M(TF_LIGHT,"Light_LightnessLinear_Set callback received for elementIndex %d \r\n", elementIndex);
 8004840:	2100      	movs	r1, #0
 8004842:	480b      	ldr	r0, [pc, #44]	; (8004870 <Appli_Light_Lightness_Linear_Set+0x58>)
 8004844:	f008 fea0 	bl	800d588 <TraceHeader>
 8004848:	78bb      	ldrb	r3, [r7, #2]
 800484a:	4619      	mov	r1, r3
 800484c:	4809      	ldr	r0, [pc, #36]	; (8004874 <Appli_Light_Lightness_Linear_Set+0x5c>)
 800484e:	f024 ff83 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8250!\n\r");
 8004852:	2100      	movs	r1, #0
 8004854:	4806      	ldr	r0, [pc, #24]	; (8004870 <Appli_Light_Lightness_Linear_Set+0x58>)
 8004856:	f008 fe97 	bl	800d588 <TraceHeader>
 800485a:	4807      	ldr	r0, [pc, #28]	; (8004878 <Appli_Light_Lightness_Linear_Set+0x60>)
 800485c:	f024 ff7c 	bl	8029758 <iprintf>
  
  return MOBLE_RESULT_SUCCESS;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	2000441c 	.word	0x2000441c
 8004870:	080328a0 	.word	0x080328a0
 8004874:	0802dee8 	.word	0x0802dee8
 8004878:	0802df2c 	.word	0x0802df2c

0800487c <Appli_Light_Lightness_Default_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Default_Set(Light_LightnessDefaultParam_t* pLight_LightnessDefaultParam,
                                               MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	4608      	mov	r0, r1
 8004886:	4611      	mov	r1, r2
 8004888:	461a      	mov	r2, r3
 800488a:	4603      	mov	r3, r0
 800488c:	70fb      	strb	r3, [r7, #3]
 800488e:	460b      	mov	r3, r1
 8004890:	803b      	strh	r3, [r7, #0]
 8004892:	4613      	mov	r3, r2
 8004894:	70bb      	strb	r3, [r7, #2]
  if(pLight_LightnessDefaultParam->LightnessDefaultStatus > 0)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <Appli_Light_Lightness_Default_Set+0x2c>
  {
    BSP_LED_On(LED_BLUE);
 80048a0:	2000      	movs	r0, #0
 80048a2:	f003 f949 	bl	8007b38 <BSP_LED_On>
 80048a6:	e002      	b.n	80048ae <Appli_Light_Lightness_Default_Set+0x32>
  }
  else
  {
    BSP_LED_Off(LED_BLUE);
 80048a8:	2000      	movs	r0, #0
 80048aa:	f003 f95f 	bl	8007b6c <BSP_LED_Off>
  }
  
  ApplilightnessSet[elementIndex].LightnessDefault = 
 80048ae:	78ba      	ldrb	r2, [r7, #2]
    pLight_LightnessDefaultParam->LightnessDefaultStatus;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b298      	uxth	r0, r3
  ApplilightnessSet[elementIndex].LightnessDefault = 
 80048b6:	4912      	ldr	r1, [pc, #72]	; (8004900 <Appli_Light_Lightness_Default_Set+0x84>)
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4413      	add	r3, r2
 80048c2:	440b      	add	r3, r1
 80048c4:	3304      	adds	r3, #4
 80048c6:	4602      	mov	r2, r0
 80048c8:	801a      	strh	r2, [r3, #0]
  
  TRACE_M(TF_SERIAL_CTRL,"#8259! \r\n");
 80048ca:	2100      	movs	r1, #0
 80048cc:	480d      	ldr	r0, [pc, #52]	; (8004904 <Appli_Light_Lightness_Default_Set+0x88>)
 80048ce:	f008 fe5b 	bl	800d588 <TraceHeader>
 80048d2:	480d      	ldr	r0, [pc, #52]	; (8004908 <Appli_Light_Lightness_Default_Set+0x8c>)
 80048d4:	f024 ffc6 	bl	8029864 <puts>
  TRACE_M(TF_LIGHT,"Appli_Light_Lightness_Default_Set callback received for elementIndex %d \r\n", elementIndex);
 80048d8:	2100      	movs	r1, #0
 80048da:	480a      	ldr	r0, [pc, #40]	; (8004904 <Appli_Light_Lightness_Default_Set+0x88>)
 80048dc:	f008 fe54 	bl	800d588 <TraceHeader>
 80048e0:	78bb      	ldrb	r3, [r7, #2]
 80048e2:	4619      	mov	r1, r3
 80048e4:	4809      	ldr	r0, [pc, #36]	; (800490c <Appli_Light_Lightness_Default_Set+0x90>)
 80048e6:	f024 ff37 	bl	8029758 <iprintf>
	
  NvmStatePowerFlag_Set(LIGHT_LIGHTNESS_NVM_FLAG,elementIndex);
 80048ea:	78bb      	ldrb	r3, [r7, #2]
 80048ec:	4619      	mov	r1, r3
 80048ee:	2003      	movs	r0, #3
 80048f0:	f009 f88e 	bl	800da10 <NvmStatePowerFlag_Set>
   
  return MOBLE_RESULT_SUCCESS;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20000074 	.word	0x20000074
 8004904:	080328c4 	.word	0x080328c4
 8004908:	0802df38 	.word	0x0802df38
 800490c:	0802df44 	.word	0x0802df44

08004910 <Appli_Light_Lightness_Last_Set>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Last_Set(Light_LightnessStatus_t* pLight_LightnessParam,                                             
                                              MOBLEUINT8 elementIndex)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	70fb      	strb	r3, [r7, #3]
  ApplilightnessSet[elementIndex].LastLightness16 = pLight_LightnessParam->LightnessLastStatus;
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004924:	b298      	uxth	r0, r3
 8004926:	4914      	ldr	r1, [pc, #80]	; (8004978 <Appli_Light_Lightness_Last_Set+0x68>)
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4413      	add	r3, r2
 8004932:	440b      	add	r3, r1
 8004934:	3302      	adds	r3, #2
 8004936:	4602      	mov	r2, r0
 8004938:	801a      	strh	r2, [r3, #0]
  
  TRACE_M(TF_SERIAL_CTRL,"#8259!\n\r");
 800493a:	2100      	movs	r1, #0
 800493c:	480f      	ldr	r0, [pc, #60]	; (800497c <Appli_Light_Lightness_Last_Set+0x6c>)
 800493e:	f008 fe23 	bl	800d588 <TraceHeader>
 8004942:	480f      	ldr	r0, [pc, #60]	; (8004980 <Appli_Light_Lightness_Last_Set+0x70>)
 8004944:	f024 ff08 	bl	8029758 <iprintf>
  TRACE_M(TF_LIGHT,
 8004948:	2100      	movs	r1, #0
 800494a:	480c      	ldr	r0, [pc, #48]	; (800497c <Appli_Light_Lightness_Last_Set+0x6c>)
 800494c:	f008 fe1c 	bl	800d588 <TraceHeader>
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	4909      	ldr	r1, [pc, #36]	; (8004978 <Appli_Light_Lightness_Last_Set+0x68>)
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	4413      	add	r3, r2
 800495e:	440b      	add	r3, r1
 8004960:	3302      	adds	r3, #2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	4619      	mov	r1, r3
 8004968:	4806      	ldr	r0, [pc, #24]	; (8004984 <Appli_Light_Lightness_Last_Set+0x74>)
 800496a:	f024 fef5 	bl	8029758 <iprintf>
          "Appli_Light_Lightness_Last_Set Light Last Value 0x%.2x \r\n", 
          ApplilightnessSet[elementIndex].LastLightness16);
   
  return MOBLE_RESULT_SUCCESS;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20000074 	.word	0x20000074
 800497c:	080328e8 	.word	0x080328e8
 8004980:	0802df90 	.word	0x0802df90
 8004984:	0802df9c 	.word	0x0802df9c

08004988 <Appli_Light_Lightness_Range_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Range_Set(Light_LightnessRangeParam_t* pLight_LightnessRangeParam,
                                             MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	4608      	mov	r0, r1
 8004992:	4611      	mov	r1, r2
 8004994:	461a      	mov	r2, r3
 8004996:	4603      	mov	r3, r0
 8004998:	70fb      	strb	r3, [r7, #3]
 800499a:	460b      	mov	r3, r1
 800499c:	803b      	strh	r3, [r7, #0]
 800499e:	4613      	mov	r3, r2
 80049a0:	70bb      	strb	r3, [r7, #2]
  ApplilightnessSet[elementIndex].StatusCode = pLight_LightnessRangeParam->StatusCode;
 80049a2:	78ba      	ldrb	r2, [r7, #2]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	7818      	ldrb	r0, [r3, #0]
 80049a8:	491e      	ldr	r1, [pc, #120]	; (8004a24 <Appli_Light_Lightness_Range_Set+0x9c>)
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	4413      	add	r3, r2
 80049b4:	440b      	add	r3, r1
 80049b6:	3306      	adds	r3, #6
 80049b8:	4602      	mov	r2, r0
 80049ba:	701a      	strb	r2, [r3, #0]
  ApplilightnessSet[elementIndex].RangeMin = pLight_LightnessRangeParam->MinRangeStatus; 
 80049bc:	78ba      	ldrb	r2, [r7, #2]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80049c4:	b298      	uxth	r0, r3
 80049c6:	4917      	ldr	r1, [pc, #92]	; (8004a24 <Appli_Light_Lightness_Range_Set+0x9c>)
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	4413      	add	r3, r2
 80049d2:	440b      	add	r3, r1
 80049d4:	4602      	mov	r2, r0
 80049d6:	f8a3 2007 	strh.w	r2, [r3, #7]
  ApplilightnessSet[elementIndex].RangeMax = pLight_LightnessRangeParam->MaxRangeStatus;
 80049da:	78ba      	ldrb	r2, [r7, #2]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80049e2:	b298      	uxth	r0, r3
 80049e4:	490f      	ldr	r1, [pc, #60]	; (8004a24 <Appli_Light_Lightness_Range_Set+0x9c>)
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	4413      	add	r3, r2
 80049f0:	440b      	add	r3, r1
 80049f2:	3308      	adds	r3, #8
 80049f4:	4602      	mov	r2, r0
 80049f6:	f8a3 2001 	strh.w	r2, [r3, #1]
  
  TRACE_M(TF_SERIAL_CTRL,"#825B! \n\r");
 80049fa:	2100      	movs	r1, #0
 80049fc:	480a      	ldr	r0, [pc, #40]	; (8004a28 <Appli_Light_Lightness_Range_Set+0xa0>)
 80049fe:	f008 fdc3 	bl	800d588 <TraceHeader>
 8004a02:	480a      	ldr	r0, [pc, #40]	; (8004a2c <Appli_Light_Lightness_Range_Set+0xa4>)
 8004a04:	f024 fea8 	bl	8029758 <iprintf>
  TRACE_M(TF_LIGHT,"Appli_Light_Lightness_Range_Set callback received for elementIndex %d \r\n", elementIndex);
 8004a08:	2100      	movs	r1, #0
 8004a0a:	4807      	ldr	r0, [pc, #28]	; (8004a28 <Appli_Light_Lightness_Range_Set+0xa0>)
 8004a0c:	f008 fdbc 	bl	800d588 <TraceHeader>
 8004a10:	78bb      	ldrb	r3, [r7, #2]
 8004a12:	4619      	mov	r1, r3
 8004a14:	4806      	ldr	r0, [pc, #24]	; (8004a30 <Appli_Light_Lightness_Range_Set+0xa8>)
 8004a16:	f024 fe9f 	bl	8029758 <iprintf>
  
  return MOBLE_RESULT_SUCCESS;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20000074 	.word	0x20000074
 8004a28:	08032908 	.word	0x08032908
 8004a2c:	0802dfd8 	.word	0x0802dfd8
 8004a30:	0802dfe4 	.word	0x0802dfe4

08004a34 <Appli_Light_GetLightnessStatus>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/  
MOBLE_RESULT Appli_Light_GetLightnessStatus(MOBLEUINT8* lLightnessState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	807b      	strh	r3, [r7, #2]
 8004a40:	4613      	mov	r3, r2
 8004a42:	707b      	strb	r3, [r7, #1]
  *(lLightnessState) = ApplilightnessSet[elementIndex].PresentState16;
 8004a44:	787a      	ldrb	r2, [r7, #1]
 8004a46:	4921      	ldr	r1, [pc, #132]	; (8004acc <Appli_Light_GetLightnessStatus+0x98>)
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	4413      	add	r3, r2
 8004a52:	440b      	add	r3, r1
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+1) = ApplilightnessSet[elementIndex].PresentState16 >> 8;
 8004a5e:	787a      	ldrb	r2, [r7, #1]
 8004a60:	491a      	ldr	r1, [pc, #104]	; (8004acc <Appli_Light_GetLightnessStatus+0x98>)
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	4413      	add	r3, r2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+2) = ApplilightnessSet[elementIndex].LastLightness16 ;
 8004a7e:	787a      	ldrb	r2, [r7, #1]
 8004a80:	4912      	ldr	r1, [pc, #72]	; (8004acc <Appli_Light_GetLightnessStatus+0x98>)
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	4413      	add	r3, r2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	3302      	adds	r3, #2
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3302      	adds	r3, #2
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+3) = ApplilightnessSet[elementIndex].LastLightness16 >> 8;
 8004a9c:	787a      	ldrb	r2, [r7, #1]
 8004a9e:	490b      	ldr	r1, [pc, #44]	; (8004acc <Appli_Light_GetLightnessStatus+0x98>)
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	4413      	add	r3, r2
 8004aaa:	440b      	add	r3, r1
 8004aac:	3302      	adds	r3, #2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	0a1b      	lsrs	r3, r3, #8
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3303      	adds	r3, #3
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]
    
  return MOBLE_RESULT_SUCCESS;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	20000074 	.word	0x20000074

08004ad0 <Appli_Light_GetLightnessLinearStatus>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_GetLightnessLinearStatus(MOBLEUINT8* lLightnessState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	807b      	strh	r3, [r7, #2]
 8004adc:	4613      	mov	r3, r2
 8004ade:	707b      	strb	r3, [r7, #1]
  *(lLightnessState) = ApplilightnessLinearSet[elementIndex].PresentState16;
 8004ae0:	787b      	ldrb	r3, [r7, #1]
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <Appli_Light_GetLightnessLinearStatus+0x80>)
 8004ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+1) = ApplilightnessLinearSet[elementIndex].PresentState16 >> 8;
 8004aee:	787b      	ldrb	r3, [r7, #1]
 8004af0:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <Appli_Light_GetLightnessLinearStatus+0x80>)
 8004af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3301      	adds	r3, #1
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+2) = ApplilightnessSet[elementIndex].LastLightness16 ;
 8004b02:	787a      	ldrb	r2, [r7, #1]
 8004b04:	4913      	ldr	r1, [pc, #76]	; (8004b54 <Appli_Light_GetLightnessLinearStatus+0x84>)
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	4413      	add	r3, r2
 8004b10:	440b      	add	r3, r1
 8004b12:	3302      	adds	r3, #2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3302      	adds	r3, #2
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+3) = ApplilightnessSet[elementIndex].LastLightness16 >> 8;
 8004b20:	787a      	ldrb	r2, [r7, #1]
 8004b22:	490c      	ldr	r1, [pc, #48]	; (8004b54 <Appli_Light_GetLightnessLinearStatus+0x84>)
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	4413      	add	r3, r2
 8004b2e:	440b      	add	r3, r1
 8004b30:	3302      	adds	r3, #2
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	0a1b      	lsrs	r3, r3, #8
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3303      	adds	r3, #3
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]
    
  return MOBLE_RESULT_SUCCESS;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	2000441c 	.word	0x2000441c
 8004b54:	20000074 	.word	0x20000074

08004b58 <Appli_Light_GetLightnessDefaultStatus>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_GetLightnessDefaultStatus(MOBLEUINT8* lDefaultState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	807b      	strh	r3, [r7, #2]
 8004b64:	4613      	mov	r3, r2
 8004b66:	707b      	strb	r3, [r7, #1]
  *(lDefaultState) = ApplilightnessSet[elementIndex].LightnessDefault;
 8004b68:	787a      	ldrb	r2, [r7, #1]
 8004b6a:	4912      	ldr	r1, [pc, #72]	; (8004bb4 <Appli_Light_GetLightnessDefaultStatus+0x5c>)
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	4413      	add	r3, r2
 8004b76:	440b      	add	r3, r1
 8004b78:	3304      	adds	r3, #4
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	701a      	strb	r2, [r3, #0]
  *(lDefaultState+1) = ApplilightnessSet[elementIndex].LightnessDefault >> 8;
 8004b84:	787a      	ldrb	r2, [r7, #1]
 8004b86:	490b      	ldr	r1, [pc, #44]	; (8004bb4 <Appli_Light_GetLightnessDefaultStatus+0x5c>)
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	4413      	add	r3, r2
 8004b92:	440b      	add	r3, r1
 8004b94:	3304      	adds	r3, #4
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	0a1b      	lsrs	r3, r3, #8
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	20000074 	.word	0x20000074

08004bb8 <Appli_Light_GetLightnessLastStatus>:
* @param  lLastState: Pointer to the status message
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_GetLightnessLastStatus(MOBLEUINT8* lLastState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	807b      	strh	r3, [r7, #2]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	707b      	strb	r3, [r7, #1]
  *(lLastState) = ApplilightnessSet[elementIndex].LastLightness16;
 8004bc8:	787a      	ldrb	r2, [r7, #1]
 8004bca:	4912      	ldr	r1, [pc, #72]	; (8004c14 <Appli_Light_GetLightnessLastStatus+0x5c>)
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	4413      	add	r3, r2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	3302      	adds	r3, #2
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	701a      	strb	r2, [r3, #0]
  *(lLastState+1) = ApplilightnessSet[elementIndex].LastLightness16 >> 8;
 8004be4:	787a      	ldrb	r2, [r7, #1]
 8004be6:	490b      	ldr	r1, [pc, #44]	; (8004c14 <Appli_Light_GetLightnessLastStatus+0x5c>)
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	4413      	add	r3, r2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	3302      	adds	r3, #2
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3301      	adds	r3, #1
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

  return MOBLE_RESULT_SUCCESS;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	20000074 	.word	0x20000074

08004c18 <Appli_Light_GetLightnessRangeStatus>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_GetLightnessRangeStatus(MOBLEUINT8* lRangeState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	807b      	strh	r3, [r7, #2]
 8004c24:	4613      	mov	r3, r2
 8004c26:	707b      	strb	r3, [r7, #1]
  *(lRangeState) = ApplilightnessSet[elementIndex].StatusCode;
 8004c28:	787a      	ldrb	r2, [r7, #1]
 8004c2a:	492a      	ldr	r1, [pc, #168]	; (8004cd4 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	4413      	add	r3, r2
 8004c36:	440b      	add	r3, r1
 8004c38:	3306      	adds	r3, #6
 8004c3a:	781a      	ldrb	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	701a      	strb	r2, [r3, #0]
  *(lRangeState+1) = ApplilightnessSet[elementIndex].RangeMin;
 8004c40:	787a      	ldrb	r2, [r7, #1]
 8004c42:	4924      	ldr	r1, [pc, #144]	; (8004cd4 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	4413      	add	r3, r2
 8004c4e:	440b      	add	r3, r1
 8004c50:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]
  *(lRangeState+2) = ApplilightnessSet[elementIndex].RangeMin >> 8;
 8004c5e:	787a      	ldrb	r2, [r7, #1]
 8004c60:	491c      	ldr	r1, [pc, #112]	; (8004cd4 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	4413      	add	r3, r2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	0a1b      	lsrs	r3, r3, #8
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3302      	adds	r3, #2
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	701a      	strb	r2, [r3, #0]
  *(lRangeState+3) = ApplilightnessSet[elementIndex].RangeMax;
 8004c80:	787a      	ldrb	r2, [r7, #1]
 8004c82:	4914      	ldr	r1, [pc, #80]	; (8004cd4 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	440b      	add	r3, r1
 8004c90:	3308      	adds	r3, #8
 8004c92:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3303      	adds	r3, #3
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	701a      	strb	r2, [r3, #0]
  *(lRangeState+4) = ApplilightnessSet[elementIndex].RangeMax >> 8;
 8004ca0:	787a      	ldrb	r2, [r7, #1]
 8004ca2:	490c      	ldr	r1, [pc, #48]	; (8004cd4 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4413      	add	r3, r2
 8004cae:	440b      	add	r3, r1
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	0a1b      	lsrs	r3, r3, #8
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20000074 	.word	0x20000074

08004cd8 <Light_UpdateLedValue>:
* @brief  Function to set the values for PWM for RGB board.
* @param  state: decided the state of PWM according to the condition.
* @retval void
*/
void Light_UpdateLedValue(MOBLEUINT8 state ,Appli_LightPwmValue_t light_state)
{
 8004cd8:	b490      	push	{r4, r7}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4604      	mov	r4, r0
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004ce6:	4623      	mov	r3, r4
 8004ce8:	73fb      	strb	r3, [r7, #15]
    Modify_PWM(RED_LED, light_state.PwmRedValue); 
    Modify_PWM(GREEN_LED, light_state.PwmGreenValue); 
    Modify_PWM(BLUE_LED, light_state.PwmBlueValue); 
#endif    
  } 
}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc90      	pop	{r4, r7}
 8004cf2:	4770      	bx	lr

08004cf4 <Appli_Light_Lightness_Status>:
* @param  pLength: length of data 
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Status(MOBLEUINT8 const *pLightness_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	4611      	mov	r1, r2
 8004d00:	461a      	mov	r2, r3
 8004d02:	460b      	mov	r3, r1
 8004d04:	80fb      	strh	r3, [r7, #6]
 8004d06:	4613      	mov	r3, r2
 8004d08:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_Lightness_Status callback received for element %d \r\n", elementIndex);
 8004d0e:	2100      	movs	r1, #0
 8004d10:	483a      	ldr	r0, [pc, #232]	; (8004dfc <Appli_Light_Lightness_Status+0x108>)
 8004d12:	f008 fc39 	bl	800d588 <TraceHeader>
 8004d16:	797b      	ldrb	r3, [r7, #5]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4839      	ldr	r0, [pc, #228]	; (8004e00 <Appli_Light_Lightness_Status+0x10c>)
 8004d1c:	f024 fd1c 	bl	8029758 <iprintf>
    TRACE_M(TF_SERIAL_CTRL,"#824E!\r\n");
 8004d20:	2100      	movs	r1, #0
 8004d22:	4836      	ldr	r0, [pc, #216]	; (8004dfc <Appli_Light_Lightness_Status+0x108>)
 8004d24:	f008 fc30 	bl	800d588 <TraceHeader>
 8004d28:	4836      	ldr	r0, [pc, #216]	; (8004e04 <Appli_Light_Lightness_Status+0x110>)
 8004d2a:	f024 fd9b 	bl	8029864 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	e05a      	b.n	8004dea <Appli_Light_Lightness_Status+0xf6>
  {
    if((i == 0) || (i == 2))
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <Appli_Light_Lightness_Status+0x4c>
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d105      	bne.n	8004d4c <Appli_Light_Lightness_Status+0x58>
    {
      value = pLightness_status[i];
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	4413      	add	r3, r2
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	827b      	strh	r3, [r7, #18]
 8004d4a:	e04b      	b.n	8004de4 <Appli_Light_Lightness_Status+0xf0>
    }
    else if(i == 1)
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d118      	bne.n	8004d84 <Appli_Light_Lightness_Status+0x90>
    {
      TRACE_M(TF_LIGHT,"Present Lightness: 0x%x (%d)\r\n",
 8004d52:	2100      	movs	r1, #0
 8004d54:	4829      	ldr	r0, [pc, #164]	; (8004dfc <Appli_Light_Lightness_Status+0x108>)
 8004d56:	f008 fc17 	bl	800d588 <TraceHeader>
 8004d5a:	8a7a      	ldrh	r2, [r7, #18]
 8004d5c:	68f9      	ldr	r1, [r7, #12]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	440b      	add	r3, r1
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	021b      	lsls	r3, r3, #8
 8004d66:	ea42 0003 	orr.w	r0, r2, r3
 8004d6a:	8a7a      	ldrh	r2, [r7, #18]
 8004d6c:	68f9      	ldr	r1, [r7, #12]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	440b      	add	r3, r1
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	4313      	orrs	r3, r2
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4601      	mov	r1, r0
 8004d7c:	4822      	ldr	r0, [pc, #136]	; (8004e08 <Appli_Light_Lightness_Status+0x114>)
 8004d7e:	f024 fceb 	bl	8029758 <iprintf>
 8004d82:	e02f      	b.n	8004de4 <Appli_Light_Lightness_Status+0xf0>
              value | pLightness_status[i] << 8,
              value | pLightness_status[i] << 8);
    }
    else if(i == 3)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d118      	bne.n	8004dbc <Appli_Light_Lightness_Status+0xc8>
    {
      TRACE_M(TF_LIGHT,"Target Lightness: 0x%x (%d)\r\n",
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	481b      	ldr	r0, [pc, #108]	; (8004dfc <Appli_Light_Lightness_Status+0x108>)
 8004d8e:	f008 fbfb 	bl	800d588 <TraceHeader>
 8004d92:	8a7a      	ldrh	r2, [r7, #18]
 8004d94:	68f9      	ldr	r1, [r7, #12]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	440b      	add	r3, r1
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	ea42 0003 	orr.w	r0, r2, r3
 8004da2:	8a7a      	ldrh	r2, [r7, #18]
 8004da4:	68f9      	ldr	r1, [r7, #12]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	440b      	add	r3, r1
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	4313      	orrs	r3, r2
 8004db0:	461a      	mov	r2, r3
 8004db2:	4601      	mov	r1, r0
 8004db4:	4815      	ldr	r0, [pc, #84]	; (8004e0c <Appli_Light_Lightness_Status+0x118>)
 8004db6:	f024 fccf 	bl	8029758 <iprintf>
 8004dba:	e013      	b.n	8004de4 <Appli_Light_Lightness_Status+0xf0>
              value | pLightness_status[i] << 8,
              value | pLightness_status[i] << 8);
    }
    else if(i == 4)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d110      	bne.n	8004de4 <Appli_Light_Lightness_Status+0xf0>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\r\n",
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	480d      	ldr	r0, [pc, #52]	; (8004dfc <Appli_Light_Lightness_Status+0x108>)
 8004dc6:	f008 fbdf 	bl	800d588 <TraceHeader>
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	4413      	add	r3, r2
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	4413      	add	r3, r2
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	480c      	ldr	r0, [pc, #48]	; (8004e10 <Appli_Light_Lightness_Status+0x11c>)
 8004de0:	f024 fcba 	bl	8029758 <iprintf>
  for(i = 0; i < pLength; i++)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	3301      	adds	r3, #1
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d3a0      	bcc.n	8004d34 <Appli_Light_Lightness_Status+0x40>
              pLightness_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	08032928 	.word	0x08032928
 8004e00:	0802e04c 	.word	0x0802e04c
 8004e04:	0802e088 	.word	0x0802e088
 8004e08:	0802e090 	.word	0x0802e090
 8004e0c:	0802e0b0 	.word	0x0802e0b0
 8004e10:	0802e0d0 	.word	0x0802e0d0

08004e14 <Appli_Light_Lightness_Linear_Status>:
* @param  pLength: length of data
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_Lightness_Linear_Status(MOBLEUINT8 const *pLightnessLinear_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	4611      	mov	r1, r2
 8004e20:	461a      	mov	r2, r3
 8004e22:	460b      	mov	r3, r1
 8004e24:	80fb      	strh	r3, [r7, #6]
 8004e26:	4613      	mov	r3, r2
 8004e28:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_Lightness_Linear_Status callback received for element %d \r\n", elementIndex);
 8004e2e:	2100      	movs	r1, #0
 8004e30:	483a      	ldr	r0, [pc, #232]	; (8004f1c <Appli_Light_Lightness_Linear_Status+0x108>)
 8004e32:	f008 fba9 	bl	800d588 <TraceHeader>
 8004e36:	797b      	ldrb	r3, [r7, #5]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4839      	ldr	r0, [pc, #228]	; (8004f20 <Appli_Light_Lightness_Linear_Status+0x10c>)
 8004e3c:	f024 fc8c 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8252!\r\n");
 8004e40:	2100      	movs	r1, #0
 8004e42:	4836      	ldr	r0, [pc, #216]	; (8004f1c <Appli_Light_Lightness_Linear_Status+0x108>)
 8004e44:	f008 fba0 	bl	800d588 <TraceHeader>
 8004e48:	4836      	ldr	r0, [pc, #216]	; (8004f24 <Appli_Light_Lightness_Linear_Status+0x110>)
 8004e4a:	f024 fd0b 	bl	8029864 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e05a      	b.n	8004f0a <Appli_Light_Lightness_Linear_Status+0xf6>
  {
    if((i == 0) || (i == 2))
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <Appli_Light_Lightness_Linear_Status+0x4c>
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d105      	bne.n	8004e6c <Appli_Light_Lightness_Linear_Status+0x58>
    {
      value = pLightnessLinear_status[i];
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	4413      	add	r3, r2
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	827b      	strh	r3, [r7, #18]
 8004e6a:	e04b      	b.n	8004f04 <Appli_Light_Lightness_Linear_Status+0xf0>
    }
    else if(i == 1)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d118      	bne.n	8004ea4 <Appli_Light_Lightness_Linear_Status+0x90>
    {
      TRACE_M(TF_LIGHT,"Present Lightness: 0x%x (%d)\r\n",
 8004e72:	2100      	movs	r1, #0
 8004e74:	4829      	ldr	r0, [pc, #164]	; (8004f1c <Appli_Light_Lightness_Linear_Status+0x108>)
 8004e76:	f008 fb87 	bl	800d588 <TraceHeader>
 8004e7a:	8a7a      	ldrh	r2, [r7, #18]
 8004e7c:	68f9      	ldr	r1, [r7, #12]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	440b      	add	r3, r1
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	ea42 0003 	orr.w	r0, r2, r3
 8004e8a:	8a7a      	ldrh	r2, [r7, #18]
 8004e8c:	68f9      	ldr	r1, [r7, #12]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	440b      	add	r3, r1
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	021b      	lsls	r3, r3, #8
 8004e96:	4313      	orrs	r3, r2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	4822      	ldr	r0, [pc, #136]	; (8004f28 <Appli_Light_Lightness_Linear_Status+0x114>)
 8004e9e:	f024 fc5b 	bl	8029758 <iprintf>
 8004ea2:	e02f      	b.n	8004f04 <Appli_Light_Lightness_Linear_Status+0xf0>
              value | pLightnessLinear_status[i] << 8,
              value | pLightnessLinear_status[i] << 8);
    }
    else if(i == 3)
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d118      	bne.n	8004edc <Appli_Light_Lightness_Linear_Status+0xc8>
    {
      TRACE_M(TF_LIGHT,"Target Lightness: 0x%x (%d)\r\n",
 8004eaa:	2100      	movs	r1, #0
 8004eac:	481b      	ldr	r0, [pc, #108]	; (8004f1c <Appli_Light_Lightness_Linear_Status+0x108>)
 8004eae:	f008 fb6b 	bl	800d588 <TraceHeader>
 8004eb2:	8a7a      	ldrh	r2, [r7, #18]
 8004eb4:	68f9      	ldr	r1, [r7, #12]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	440b      	add	r3, r1
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	ea42 0003 	orr.w	r0, r2, r3
 8004ec2:	8a7a      	ldrh	r2, [r7, #18]
 8004ec4:	68f9      	ldr	r1, [r7, #12]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	440b      	add	r3, r1
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4601      	mov	r1, r0
 8004ed4:	4815      	ldr	r0, [pc, #84]	; (8004f2c <Appli_Light_Lightness_Linear_Status+0x118>)
 8004ed6:	f024 fc3f 	bl	8029758 <iprintf>
 8004eda:	e013      	b.n	8004f04 <Appli_Light_Lightness_Linear_Status+0xf0>
              value | pLightnessLinear_status[i] << 8,
              value | pLightnessLinear_status[i] << 8);
    }
    else if(i == 4)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d110      	bne.n	8004f04 <Appli_Light_Lightness_Linear_Status+0xf0>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\r\n",
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	480d      	ldr	r0, [pc, #52]	; (8004f1c <Appli_Light_Lightness_Linear_Status+0x108>)
 8004ee6:	f008 fb4f 	bl	800d588 <TraceHeader>
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	4413      	add	r3, r2
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4413      	add	r3, r2
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	480c      	ldr	r0, [pc, #48]	; (8004f30 <Appli_Light_Lightness_Linear_Status+0x11c>)
 8004f00:	f024 fc2a 	bl	8029758 <iprintf>
  for(i = 0; i < pLength; i++)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	3301      	adds	r3, #1
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d3a0      	bcc.n	8004e54 <Appli_Light_Lightness_Linear_Status+0x40>
              pLightnessLinear_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	08032948 	.word	0x08032948
 8004f20:	0802e0ec 	.word	0x0802e0ec
 8004f24:	0802e130 	.word	0x0802e130
 8004f28:	0802e090 	.word	0x0802e090
 8004f2c:	0802e0b0 	.word	0x0802e0b0
 8004f30:	0802e0d0 	.word	0x0802e0d0

08004f34 <Appli_Light_Lightness_Last_Status>:
*/
MOBLE_RESULT Appli_Light_Lightness_Last_Status(MOBLEUINT8 const *pLightnessLast_status, 
                                               MOBLEUINT32 pLength, 
                                               MOBLEUINT16 dstPeer, 
                                               MOBLEUINT8 elementIndex)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	4611      	mov	r1, r2
 8004f40:	461a      	mov	r2, r3
 8004f42:	460b      	mov	r3, r1
 8004f44:	80fb      	strh	r3, [r7, #6]
 8004f46:	4613      	mov	r3, r2
 8004f48:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value;
#endif
 
  TRACE_M(TF_LIGHT,"Light_Lightness_Last_Status callback received for element %d \r\n", elementIndex);
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4820      	ldr	r0, [pc, #128]	; (8004fd0 <Appli_Light_Lightness_Last_Status+0x9c>)
 8004f4e:	f008 fb1b 	bl	800d588 <TraceHeader>
 8004f52:	797b      	ldrb	r3, [r7, #5]
 8004f54:	4619      	mov	r1, r3
 8004f56:	481f      	ldr	r0, [pc, #124]	; (8004fd4 <Appli_Light_Lightness_Last_Status+0xa0>)
 8004f58:	f024 fbfe 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8256!\r\n");
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	481c      	ldr	r0, [pc, #112]	; (8004fd0 <Appli_Light_Lightness_Last_Status+0x9c>)
 8004f60:	f008 fb12 	bl	800d588 <TraceHeader>
 8004f64:	481c      	ldr	r0, [pc, #112]	; (8004fd8 <Appli_Light_Lightness_Last_Status+0xa4>)
 8004f66:	f024 fc7d 	bl	8029864 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	e026      	b.n	8004fbe <Appli_Light_Lightness_Last_Status+0x8a>
  {
    if(i == 0)
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d105      	bne.n	8004f82 <Appli_Light_Lightness_Last_Status+0x4e>
    {
      value = pLightnessLast_status[i];
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	827b      	strh	r3, [r7, #18]
 8004f80:	e01a      	b.n	8004fb8 <Appli_Light_Lightness_Last_Status+0x84>
    }
    else if(i == 1)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d117      	bne.n	8004fb8 <Appli_Light_Lightness_Last_Status+0x84>
    {
      TRACE_M(TF_LIGHT,"Lightness Last: 0x%x (%d)\r\n",
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4811      	ldr	r0, [pc, #68]	; (8004fd0 <Appli_Light_Lightness_Last_Status+0x9c>)
 8004f8c:	f008 fafc 	bl	800d588 <TraceHeader>
 8004f90:	8a7a      	ldrh	r2, [r7, #18]
 8004f92:	68f9      	ldr	r1, [r7, #12]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	440b      	add	r3, r1
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	ea42 0003 	orr.w	r0, r2, r3
 8004fa0:	8a7a      	ldrh	r2, [r7, #18]
 8004fa2:	68f9      	ldr	r1, [r7, #12]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	440b      	add	r3, r1
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	4313      	orrs	r3, r2
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4601      	mov	r1, r0
 8004fb2:	480a      	ldr	r0, [pc, #40]	; (8004fdc <Appli_Light_Lightness_Last_Status+0xa8>)
 8004fb4:	f024 fbd0 	bl	8029758 <iprintf>
  for(i = 0; i < pLength; i++)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d3d4      	bcc.n	8004f70 <Appli_Light_Lightness_Last_Status+0x3c>
              value | pLightnessLast_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	0803296c 	.word	0x0803296c
 8004fd4:	0802e138 	.word	0x0802e138
 8004fd8:	0802e178 	.word	0x0802e178
 8004fdc:	0802e180 	.word	0x0802e180

08004fe0 <Appli_Light_Lightness_Default_Status>:
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_Lightness_Default_Status(MOBLEUINT8 const *pLightnessDefault_status, MOBLEUINT32 pLength
                                                  , MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	4611      	mov	r1, r2
 8004fec:	461a      	mov	r2, r3
 8004fee:	460b      	mov	r3, r1
 8004ff0:	80fb      	strh	r3, [r7, #6]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value;
#endif
  
  TRACE_M(TF_LIGHT,"Light_Lightness_Default_Status callback received for element %d \r\n", elementIndex);
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	4820      	ldr	r0, [pc, #128]	; (800507c <Appli_Light_Lightness_Default_Status+0x9c>)
 8004ffa:	f008 fac5 	bl	800d588 <TraceHeader>
 8004ffe:	797b      	ldrb	r3, [r7, #5]
 8005000:	4619      	mov	r1, r3
 8005002:	481f      	ldr	r0, [pc, #124]	; (8005080 <Appli_Light_Lightness_Default_Status+0xa0>)
 8005004:	f024 fba8 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8256!\r\n");
 8005008:	2100      	movs	r1, #0
 800500a:	481c      	ldr	r0, [pc, #112]	; (800507c <Appli_Light_Lightness_Default_Status+0x9c>)
 800500c:	f008 fabc 	bl	800d588 <TraceHeader>
 8005010:	481c      	ldr	r0, [pc, #112]	; (8005084 <Appli_Light_Lightness_Default_Status+0xa4>)
 8005012:	f024 fc27 	bl	8029864 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	e026      	b.n	800506a <Appli_Light_Lightness_Default_Status+0x8a>
  {
    if(i == 0)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d105      	bne.n	800502e <Appli_Light_Lightness_Default_Status+0x4e>
    {
      value = pLightnessDefault_status[i];
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	4413      	add	r3, r2
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	827b      	strh	r3, [r7, #18]
 800502c:	e01a      	b.n	8005064 <Appli_Light_Lightness_Default_Status+0x84>
    }
    else if(i == 1)
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d117      	bne.n	8005064 <Appli_Light_Lightness_Default_Status+0x84>
    {
      TRACE_M(TF_LIGHT,"Lightness Default: 0x%x (%d)\r\n",
 8005034:	2100      	movs	r1, #0
 8005036:	4811      	ldr	r0, [pc, #68]	; (800507c <Appli_Light_Lightness_Default_Status+0x9c>)
 8005038:	f008 faa6 	bl	800d588 <TraceHeader>
 800503c:	8a7a      	ldrh	r2, [r7, #18]
 800503e:	68f9      	ldr	r1, [r7, #12]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	440b      	add	r3, r1
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	ea42 0003 	orr.w	r0, r2, r3
 800504c:	8a7a      	ldrh	r2, [r7, #18]
 800504e:	68f9      	ldr	r1, [r7, #12]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	440b      	add	r3, r1
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	4313      	orrs	r3, r2
 800505a:	461a      	mov	r2, r3
 800505c:	4601      	mov	r1, r0
 800505e:	480a      	ldr	r0, [pc, #40]	; (8005088 <Appli_Light_Lightness_Default_Status+0xa8>)
 8005060:	f024 fb7a 	bl	8029758 <iprintf>
  for(i = 0; i < pLength; i++)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	3301      	adds	r3, #1
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	429a      	cmp	r2, r3
 8005070:	d3d4      	bcc.n	800501c <Appli_Light_Lightness_Default_Status+0x3c>
              value | pLightnessDefault_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	08032990 	.word	0x08032990
 8005080:	0802e19c 	.word	0x0802e19c
 8005084:	0802e178 	.word	0x0802e178
 8005088:	0802e1e0 	.word	0x0802e1e0

0800508c <Appli_Light_Lightness_Range_Status>:
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_Lightness_Range_Status(MOBLEUINT8 const *pLightnessRange_status, MOBLEUINT32 pLength
                                                , MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	4611      	mov	r1, r2
 8005098:	461a      	mov	r2, r3
 800509a:	460b      	mov	r3, r1
 800509c:	80fb      	strh	r3, [r7, #6]
 800509e:	4613      	mov	r3, r2
 80050a0:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value;
#endif
  
  TRACE_M(TF_LIGHT,"Light_Lightness_Range_Status callback received for element %d \r\n", elementIndex);
 80050a2:	2100      	movs	r1, #0
 80050a4:	483a      	ldr	r0, [pc, #232]	; (8005190 <Appli_Light_Lightness_Range_Status+0x104>)
 80050a6:	f008 fa6f 	bl	800d588 <TraceHeader>
 80050aa:	797b      	ldrb	r3, [r7, #5]
 80050ac:	4619      	mov	r1, r3
 80050ae:	4839      	ldr	r0, [pc, #228]	; (8005194 <Appli_Light_Lightness_Range_Status+0x108>)
 80050b0:	f024 fb52 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8258!\r\n");
 80050b4:	2100      	movs	r1, #0
 80050b6:	4836      	ldr	r0, [pc, #216]	; (8005190 <Appli_Light_Lightness_Range_Status+0x104>)
 80050b8:	f008 fa66 	bl	800d588 <TraceHeader>
 80050bc:	4836      	ldr	r0, [pc, #216]	; (8005198 <Appli_Light_Lightness_Range_Status+0x10c>)
 80050be:	f024 fbd1 	bl	8029864 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e05a      	b.n	800517e <Appli_Light_Lightness_Range_Status+0xf2>
  {
    if(i == 0)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d111      	bne.n	80050f2 <Appli_Light_Lightness_Range_Status+0x66>
    {
      TRACE_M(TF_LIGHT,"Status Code: 0x%x (%d)\r\n",
 80050ce:	2100      	movs	r1, #0
 80050d0:	482f      	ldr	r0, [pc, #188]	; (8005190 <Appli_Light_Lightness_Range_Status+0x104>)
 80050d2:	f008 fa59 	bl	800d588 <TraceHeader>
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	4413      	add	r3, r2
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	4619      	mov	r1, r3
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	4413      	add	r3, r2
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	482c      	ldr	r0, [pc, #176]	; (800519c <Appli_Light_Lightness_Range_Status+0x110>)
 80050ec:	f024 fb34 	bl	8029758 <iprintf>
 80050f0:	e042      	b.n	8005178 <Appli_Light_Lightness_Range_Status+0xec>
              pLightnessRange_status[i],
              pLightnessRange_status[i]);
    }
    else if((i == 1) || (i == 3))
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d002      	beq.n	80050fe <Appli_Light_Lightness_Range_Status+0x72>
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d105      	bne.n	800510a <Appli_Light_Lightness_Range_Status+0x7e>
    {
      value = pLightnessRange_status[i];
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	4413      	add	r3, r2
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	827b      	strh	r3, [r7, #18]
 8005108:	e036      	b.n	8005178 <Appli_Light_Lightness_Range_Status+0xec>
    }
    else if(i == 2)
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b02      	cmp	r3, #2
 800510e:	d118      	bne.n	8005142 <Appli_Light_Lightness_Range_Status+0xb6>
    {
      TRACE_M(TF_LIGHT,"Range Min: 0x%x (%d)\r\n",
 8005110:	2100      	movs	r1, #0
 8005112:	481f      	ldr	r0, [pc, #124]	; (8005190 <Appli_Light_Lightness_Range_Status+0x104>)
 8005114:	f008 fa38 	bl	800d588 <TraceHeader>
 8005118:	8a7a      	ldrh	r2, [r7, #18]
 800511a:	68f9      	ldr	r1, [r7, #12]
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	440b      	add	r3, r1
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	ea42 0003 	orr.w	r0, r2, r3
 8005128:	8a7a      	ldrh	r2, [r7, #18]
 800512a:	68f9      	ldr	r1, [r7, #12]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	440b      	add	r3, r1
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	4313      	orrs	r3, r2
 8005136:	461a      	mov	r2, r3
 8005138:	4601      	mov	r1, r0
 800513a:	4819      	ldr	r0, [pc, #100]	; (80051a0 <Appli_Light_Lightness_Range_Status+0x114>)
 800513c:	f024 fb0c 	bl	8029758 <iprintf>
 8005140:	e01a      	b.n	8005178 <Appli_Light_Lightness_Range_Status+0xec>
              value | pLightnessRange_status[i] << 8,
              value | pLightnessRange_status[i] << 8);
    }
    else if(i == 4)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b04      	cmp	r3, #4
 8005146:	d117      	bne.n	8005178 <Appli_Light_Lightness_Range_Status+0xec>
    {
      TRACE_M(TF_LIGHT,"Range Max: 0x%x (%d)\r\n",
 8005148:	2100      	movs	r1, #0
 800514a:	4811      	ldr	r0, [pc, #68]	; (8005190 <Appli_Light_Lightness_Range_Status+0x104>)
 800514c:	f008 fa1c 	bl	800d588 <TraceHeader>
 8005150:	8a7a      	ldrh	r2, [r7, #18]
 8005152:	68f9      	ldr	r1, [r7, #12]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	440b      	add	r3, r1
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	ea42 0003 	orr.w	r0, r2, r3
 8005160:	8a7a      	ldrh	r2, [r7, #18]
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	440b      	add	r3, r1
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	4313      	orrs	r3, r2
 800516e:	461a      	mov	r2, r3
 8005170:	4601      	mov	r1, r0
 8005172:	480c      	ldr	r0, [pc, #48]	; (80051a4 <Appli_Light_Lightness_Range_Status+0x118>)
 8005174:	f024 faf0 	bl	8029758 <iprintf>
  for(i = 0; i < pLength; i++)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	3301      	adds	r3, #1
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	429a      	cmp	r2, r3
 8005184:	d3a0      	bcc.n	80050c8 <Appli_Light_Lightness_Range_Status+0x3c>
              value | pLightnessRange_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	080329b8 	.word	0x080329b8
 8005194:	0802e200 	.word	0x0802e200
 8005198:	0802e244 	.word	0x0802e244
 800519c:	0802e24c 	.word	0x0802e24c
 80051a0:	0802e268 	.word	0x0802e268
 80051a4:	0802e280 	.word	0x0802e280

080051a8 <Appli_Light_Ctl_Status>:
* @param  pLength: length of data
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Ctl_Status(MOBLEUINT8 const *pLightCtl_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	4611      	mov	r1, r2
 80051b4:	461a      	mov	r2, r3
 80051b6:	460b      	mov	r3, r1
 80051b8:	80fb      	strh	r3, [r7, #6]
 80051ba:	4613      	mov	r3, r2
 80051bc:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	827b      	strh	r3, [r7, #18]
#endif

  TRACE_M(TF_LIGHT,"Light_Ctl_Status callback received for element %d \r\n", elementIndex);
 80051c2:	2100      	movs	r1, #0
 80051c4:	485a      	ldr	r0, [pc, #360]	; (8005330 <Appli_Light_Ctl_Status+0x188>)
 80051c6:	f008 f9df 	bl	800d588 <TraceHeader>
 80051ca:	797b      	ldrb	r3, [r7, #5]
 80051cc:	4619      	mov	r1, r3
 80051ce:	4859      	ldr	r0, [pc, #356]	; (8005334 <Appli_Light_Ctl_Status+0x18c>)
 80051d0:	f024 fac2 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8260!\r\n");
 80051d4:	2100      	movs	r1, #0
 80051d6:	4856      	ldr	r0, [pc, #344]	; (8005330 <Appli_Light_Ctl_Status+0x188>)
 80051d8:	f008 f9d6 	bl	800d588 <TraceHeader>
 80051dc:	4856      	ldr	r0, [pc, #344]	; (8005338 <Appli_Light_Ctl_Status+0x190>)
 80051de:	f024 fb41 	bl	8029864 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	e098      	b.n	800531a <Appli_Light_Ctl_Status+0x172>
  {
    if((i == 0) || (i == 2) || (i == 4) || (i == 6))
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <Appli_Light_Ctl_Status+0x58>
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d005      	beq.n	8005200 <Appli_Light_Ctl_Status+0x58>
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d002      	beq.n	8005200 <Appli_Light_Ctl_Status+0x58>
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b06      	cmp	r3, #6
 80051fe:	d105      	bne.n	800520c <Appli_Light_Ctl_Status+0x64>
    {
      value = pLightCtl_status[i];
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	4413      	add	r3, r2
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	827b      	strh	r3, [r7, #18]
 800520a:	e083      	b.n	8005314 <Appli_Light_Ctl_Status+0x16c>
    }
    else if(i == 1)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d118      	bne.n	8005244 <Appli_Light_Ctl_Status+0x9c>
    {
      TRACE_M(TF_LIGHT,"Present CTL Lightness: 0x%x (%d)\r\n",
 8005212:	2100      	movs	r1, #0
 8005214:	4846      	ldr	r0, [pc, #280]	; (8005330 <Appli_Light_Ctl_Status+0x188>)
 8005216:	f008 f9b7 	bl	800d588 <TraceHeader>
 800521a:	8a7a      	ldrh	r2, [r7, #18]
 800521c:	68f9      	ldr	r1, [r7, #12]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	440b      	add	r3, r1
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	021b      	lsls	r3, r3, #8
 8005226:	ea42 0003 	orr.w	r0, r2, r3
 800522a:	8a7a      	ldrh	r2, [r7, #18]
 800522c:	68f9      	ldr	r1, [r7, #12]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	440b      	add	r3, r1
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	4313      	orrs	r3, r2
 8005238:	461a      	mov	r2, r3
 800523a:	4601      	mov	r1, r0
 800523c:	483f      	ldr	r0, [pc, #252]	; (800533c <Appli_Light_Ctl_Status+0x194>)
 800523e:	f024 fa8b 	bl	8029758 <iprintf>
 8005242:	e067      	b.n	8005314 <Appli_Light_Ctl_Status+0x16c>
              value | pLightCtl_status[i] << 8,
              value | pLightCtl_status[i] << 8);
    }
    else if(i == 3)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b03      	cmp	r3, #3
 8005248:	d118      	bne.n	800527c <Appli_Light_Ctl_Status+0xd4>
    {
      TRACE_M(TF_LIGHT,"Present CTL Temperature: 0x%x (%d)\r\n",
 800524a:	2100      	movs	r1, #0
 800524c:	4838      	ldr	r0, [pc, #224]	; (8005330 <Appli_Light_Ctl_Status+0x188>)
 800524e:	f008 f99b 	bl	800d588 <TraceHeader>
 8005252:	8a7a      	ldrh	r2, [r7, #18]
 8005254:	68f9      	ldr	r1, [r7, #12]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	440b      	add	r3, r1
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	ea42 0003 	orr.w	r0, r2, r3
 8005262:	8a7a      	ldrh	r2, [r7, #18]
 8005264:	68f9      	ldr	r1, [r7, #12]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	440b      	add	r3, r1
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	021b      	lsls	r3, r3, #8
 800526e:	4313      	orrs	r3, r2
 8005270:	461a      	mov	r2, r3
 8005272:	4601      	mov	r1, r0
 8005274:	4832      	ldr	r0, [pc, #200]	; (8005340 <Appli_Light_Ctl_Status+0x198>)
 8005276:	f024 fa6f 	bl	8029758 <iprintf>
 800527a:	e04b      	b.n	8005314 <Appli_Light_Ctl_Status+0x16c>
              value | pLightCtl_status[i] << 8,
              value | pLightCtl_status[i] << 8);
    }
    else if(i == 5)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2b05      	cmp	r3, #5
 8005280:	d118      	bne.n	80052b4 <Appli_Light_Ctl_Status+0x10c>
    {
      TRACE_M(TF_LIGHT,"Target CTL Lightness: 0x%x (%d)\r\n",
 8005282:	2100      	movs	r1, #0
 8005284:	482a      	ldr	r0, [pc, #168]	; (8005330 <Appli_Light_Ctl_Status+0x188>)
 8005286:	f008 f97f 	bl	800d588 <TraceHeader>
 800528a:	8a7a      	ldrh	r2, [r7, #18]
 800528c:	68f9      	ldr	r1, [r7, #12]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	440b      	add	r3, r1
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	ea42 0003 	orr.w	r0, r2, r3
 800529a:	8a7a      	ldrh	r2, [r7, #18]
 800529c:	68f9      	ldr	r1, [r7, #12]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	440b      	add	r3, r1
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	4313      	orrs	r3, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	4601      	mov	r1, r0
 80052ac:	4825      	ldr	r0, [pc, #148]	; (8005344 <Appli_Light_Ctl_Status+0x19c>)
 80052ae:	f024 fa53 	bl	8029758 <iprintf>
 80052b2:	e02f      	b.n	8005314 <Appli_Light_Ctl_Status+0x16c>
              value | pLightCtl_status[i] << 8,
              value | pLightCtl_status[i] << 8);
    }
    else if(i == 7)
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2b07      	cmp	r3, #7
 80052b8:	d118      	bne.n	80052ec <Appli_Light_Ctl_Status+0x144>
    {
      TRACE_M(TF_LIGHT,"Target CTL Temperature: 0x%x (%d)\r\n",
 80052ba:	2100      	movs	r1, #0
 80052bc:	481c      	ldr	r0, [pc, #112]	; (8005330 <Appli_Light_Ctl_Status+0x188>)
 80052be:	f008 f963 	bl	800d588 <TraceHeader>
 80052c2:	8a7a      	ldrh	r2, [r7, #18]
 80052c4:	68f9      	ldr	r1, [r7, #12]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	440b      	add	r3, r1
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	ea42 0003 	orr.w	r0, r2, r3
 80052d2:	8a7a      	ldrh	r2, [r7, #18]
 80052d4:	68f9      	ldr	r1, [r7, #12]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	440b      	add	r3, r1
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	4313      	orrs	r3, r2
 80052e0:	461a      	mov	r2, r3
 80052e2:	4601      	mov	r1, r0
 80052e4:	4818      	ldr	r0, [pc, #96]	; (8005348 <Appli_Light_Ctl_Status+0x1a0>)
 80052e6:	f024 fa37 	bl	8029758 <iprintf>
 80052ea:	e013      	b.n	8005314 <Appli_Light_Ctl_Status+0x16c>
              value | pLightCtl_status[i] << 8,
              value | pLightCtl_status[i] << 8);
    }
    else if(i == 8)
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d110      	bne.n	8005314 <Appli_Light_Ctl_Status+0x16c>
    {
      TRACE_M(TF_LIGHT,"Remaining Time:0x%x (%d)\r\n",
 80052f2:	2100      	movs	r1, #0
 80052f4:	480e      	ldr	r0, [pc, #56]	; (8005330 <Appli_Light_Ctl_Status+0x188>)
 80052f6:	f008 f947 	bl	800d588 <TraceHeader>
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	4413      	add	r3, r2
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	4619      	mov	r1, r3
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	4413      	add	r3, r2
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	480f      	ldr	r0, [pc, #60]	; (800534c <Appli_Light_Ctl_Status+0x1a4>)
 8005310:	f024 fa22 	bl	8029758 <iprintf>
  for(i = 0; i < pLength; i++)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	3301      	adds	r3, #1
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	429a      	cmp	r2, r3
 8005320:	f4ff af62 	bcc.w	80051e8 <Appli_Light_Ctl_Status+0x40>
              pLightCtl_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	080329dc 	.word	0x080329dc
 8005334:	0802e298 	.word	0x0802e298
 8005338:	0802e2d0 	.word	0x0802e2d0
 800533c:	0802e2d8 	.word	0x0802e2d8
 8005340:	0802e2fc 	.word	0x0802e2fc
 8005344:	0802e324 	.word	0x0802e324
 8005348:	0802e348 	.word	0x0802e348
 800534c:	0802e36c 	.word	0x0802e36c

08005350 <Appli_Light_CtlTemperature_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_CtlTemperature_Status(MOBLEUINT8 const *pLightCtlTemp_status, MOBLEUINT32 pLength
                                               , MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	4611      	mov	r1, r2
 800535c:	461a      	mov	r2, r3
 800535e:	460b      	mov	r3, r1
 8005360:	80fb      	strh	r3, [r7, #6]
 8005362:	4613      	mov	r3, r2
 8005364:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_CtlTemperature_Status callback received for element %d \r\n", elementIndex);
 800536a:	2100      	movs	r1, #0
 800536c:	485a      	ldr	r0, [pc, #360]	; (80054d8 <Appli_Light_CtlTemperature_Status+0x188>)
 800536e:	f008 f90b 	bl	800d588 <TraceHeader>
 8005372:	797b      	ldrb	r3, [r7, #5]
 8005374:	4619      	mov	r1, r3
 8005376:	4859      	ldr	r0, [pc, #356]	; (80054dc <Appli_Light_CtlTemperature_Status+0x18c>)
 8005378:	f024 f9ee 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8266!\r\n");
 800537c:	2100      	movs	r1, #0
 800537e:	4856      	ldr	r0, [pc, #344]	; (80054d8 <Appli_Light_CtlTemperature_Status+0x188>)
 8005380:	f008 f902 	bl	800d588 <TraceHeader>
 8005384:	4856      	ldr	r0, [pc, #344]	; (80054e0 <Appli_Light_CtlTemperature_Status+0x190>)
 8005386:	f024 fa6d 	bl	8029864 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e098      	b.n	80054c2 <Appli_Light_CtlTemperature_Status+0x172>
  {
    if((i == 0) || (i == 2) || (i == 4) || (i == 6))
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <Appli_Light_CtlTemperature_Status+0x58>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d005      	beq.n	80053a8 <Appli_Light_CtlTemperature_Status+0x58>
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d002      	beq.n	80053a8 <Appli_Light_CtlTemperature_Status+0x58>
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b06      	cmp	r3, #6
 80053a6:	d105      	bne.n	80053b4 <Appli_Light_CtlTemperature_Status+0x64>
    {
      value = pLightCtlTemp_status[i];
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	4413      	add	r3, r2
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	827b      	strh	r3, [r7, #18]
 80053b2:	e083      	b.n	80054bc <Appli_Light_CtlTemperature_Status+0x16c>
    }
    else if(i == 1)
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d118      	bne.n	80053ec <Appli_Light_CtlTemperature_Status+0x9c>
    {
      TRACE_M(TF_LIGHT,"Present CTL Temperature: 0x%x (%d)\r\n",
 80053ba:	2100      	movs	r1, #0
 80053bc:	4846      	ldr	r0, [pc, #280]	; (80054d8 <Appli_Light_CtlTemperature_Status+0x188>)
 80053be:	f008 f8e3 	bl	800d588 <TraceHeader>
 80053c2:	8a7a      	ldrh	r2, [r7, #18]
 80053c4:	68f9      	ldr	r1, [r7, #12]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	440b      	add	r3, r1
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	ea42 0003 	orr.w	r0, r2, r3
 80053d2:	8a7a      	ldrh	r2, [r7, #18]
 80053d4:	68f9      	ldr	r1, [r7, #12]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	440b      	add	r3, r1
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	4313      	orrs	r3, r2
 80053e0:	461a      	mov	r2, r3
 80053e2:	4601      	mov	r1, r0
 80053e4:	483f      	ldr	r0, [pc, #252]	; (80054e4 <Appli_Light_CtlTemperature_Status+0x194>)
 80053e6:	f024 f9b7 	bl	8029758 <iprintf>
 80053ea:	e067      	b.n	80054bc <Appli_Light_CtlTemperature_Status+0x16c>
              value | pLightCtlTemp_status[i] << 8,
              value | pLightCtlTemp_status[i] << 8);
    }
    else if(i == 3)
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d118      	bne.n	8005424 <Appli_Light_CtlTemperature_Status+0xd4>
    {
      TRACE_M(TF_LIGHT,"Present CTL Delta UV: 0x%x (%d)\r\n",
 80053f2:	2100      	movs	r1, #0
 80053f4:	4838      	ldr	r0, [pc, #224]	; (80054d8 <Appli_Light_CtlTemperature_Status+0x188>)
 80053f6:	f008 f8c7 	bl	800d588 <TraceHeader>
 80053fa:	8a7a      	ldrh	r2, [r7, #18]
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	440b      	add	r3, r1
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	021b      	lsls	r3, r3, #8
 8005406:	ea42 0003 	orr.w	r0, r2, r3
 800540a:	8a7a      	ldrh	r2, [r7, #18]
 800540c:	68f9      	ldr	r1, [r7, #12]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	440b      	add	r3, r1
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	4313      	orrs	r3, r2
 8005418:	461a      	mov	r2, r3
 800541a:	4601      	mov	r1, r0
 800541c:	4832      	ldr	r0, [pc, #200]	; (80054e8 <Appli_Light_CtlTemperature_Status+0x198>)
 800541e:	f024 f99b 	bl	8029758 <iprintf>
 8005422:	e04b      	b.n	80054bc <Appli_Light_CtlTemperature_Status+0x16c>
              value | pLightCtlTemp_status[i] << 8,
              value | pLightCtlTemp_status[i] << 8);
    }
    else if(i == 5)
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b05      	cmp	r3, #5
 8005428:	d118      	bne.n	800545c <Appli_Light_CtlTemperature_Status+0x10c>
    {
      TRACE_M(TF_LIGHT,"Target CTL Temperature: 0x%x (%d)\r\n",
 800542a:	2100      	movs	r1, #0
 800542c:	482a      	ldr	r0, [pc, #168]	; (80054d8 <Appli_Light_CtlTemperature_Status+0x188>)
 800542e:	f008 f8ab 	bl	800d588 <TraceHeader>
 8005432:	8a7a      	ldrh	r2, [r7, #18]
 8005434:	68f9      	ldr	r1, [r7, #12]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	440b      	add	r3, r1
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	ea42 0003 	orr.w	r0, r2, r3
 8005442:	8a7a      	ldrh	r2, [r7, #18]
 8005444:	68f9      	ldr	r1, [r7, #12]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	440b      	add	r3, r1
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	4313      	orrs	r3, r2
 8005450:	461a      	mov	r2, r3
 8005452:	4601      	mov	r1, r0
 8005454:	4825      	ldr	r0, [pc, #148]	; (80054ec <Appli_Light_CtlTemperature_Status+0x19c>)
 8005456:	f024 f97f 	bl	8029758 <iprintf>
 800545a:	e02f      	b.n	80054bc <Appli_Light_CtlTemperature_Status+0x16c>
              value | pLightCtlTemp_status[i] << 8,
              value | pLightCtlTemp_status[i] << 8);
    }
    else if(i == 7)
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b07      	cmp	r3, #7
 8005460:	d118      	bne.n	8005494 <Appli_Light_CtlTemperature_Status+0x144>
    {
      TRACE_M(TF_LIGHT,"Target CTL Delta UV: 0x%x (%d)\r\n",
 8005462:	2100      	movs	r1, #0
 8005464:	481c      	ldr	r0, [pc, #112]	; (80054d8 <Appli_Light_CtlTemperature_Status+0x188>)
 8005466:	f008 f88f 	bl	800d588 <TraceHeader>
 800546a:	8a7a      	ldrh	r2, [r7, #18]
 800546c:	68f9      	ldr	r1, [r7, #12]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	440b      	add	r3, r1
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	ea42 0003 	orr.w	r0, r2, r3
 800547a:	8a7a      	ldrh	r2, [r7, #18]
 800547c:	68f9      	ldr	r1, [r7, #12]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	440b      	add	r3, r1
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	4313      	orrs	r3, r2
 8005488:	461a      	mov	r2, r3
 800548a:	4601      	mov	r1, r0
 800548c:	4818      	ldr	r0, [pc, #96]	; (80054f0 <Appli_Light_CtlTemperature_Status+0x1a0>)
 800548e:	f024 f963 	bl	8029758 <iprintf>
 8005492:	e013      	b.n	80054bc <Appli_Light_CtlTemperature_Status+0x16c>
              value | pLightCtlTemp_status[i] << 8,
              value | pLightCtlTemp_status[i] << 8);
    }
    else if(i == 8)
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	2b08      	cmp	r3, #8
 8005498:	d110      	bne.n	80054bc <Appli_Light_CtlTemperature_Status+0x16c>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\r\n",
 800549a:	2100      	movs	r1, #0
 800549c:	480e      	ldr	r0, [pc, #56]	; (80054d8 <Appli_Light_CtlTemperature_Status+0x188>)
 800549e:	f008 f873 	bl	800d588 <TraceHeader>
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	4413      	add	r3, r2
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	4619      	mov	r1, r3
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	4413      	add	r3, r2
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	480f      	ldr	r0, [pc, #60]	; (80054f4 <Appli_Light_CtlTemperature_Status+0x1a4>)
 80054b8:	f024 f94e 	bl	8029758 <iprintf>
  for(i = 0; i < pLength; i++)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	3301      	adds	r3, #1
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	f4ff af62 	bcc.w	8005390 <Appli_Light_CtlTemperature_Status+0x40>
              pLightCtlTemp_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	080329f4 	.word	0x080329f4
 80054dc:	0802e388 	.word	0x0802e388
 80054e0:	0802e3c8 	.word	0x0802e3c8
 80054e4:	0802e2fc 	.word	0x0802e2fc
 80054e8:	0802e3d0 	.word	0x0802e3d0
 80054ec:	0802e348 	.word	0x0802e348
 80054f0:	0802e3f4 	.word	0x0802e3f4
 80054f4:	0802e0d0 	.word	0x0802e0d0

080054f8 <Appli_Light_CtlTemperature_Range_Status>:
*/ 
MOBLE_RESULT Appli_Light_CtlTemperature_Range_Status(MOBLEUINT8 const *pCtlTempRange_status, 
                                                     MOBLEUINT32 pLength, 
                                                     MOBLEUINT16 dstPeer, 
                                                     MOBLEUINT8 elementIndex)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	4611      	mov	r1, r2
 8005504:	461a      	mov	r2, r3
 8005506:	460b      	mov	r3, r1
 8005508:	80fb      	strh	r3, [r7, #6]
 800550a:	4613      	mov	r3, r2
 800550c:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value;
#endif
  
  TRACE_M(TF_LIGHT,"Light_CtlTemperature_Range_Status callback received for element %d \r\n", elementIndex);
 800550e:	2100      	movs	r1, #0
 8005510:	483a      	ldr	r0, [pc, #232]	; (80055fc <Appli_Light_CtlTemperature_Range_Status+0x104>)
 8005512:	f008 f839 	bl	800d588 <TraceHeader>
 8005516:	797b      	ldrb	r3, [r7, #5]
 8005518:	4619      	mov	r1, r3
 800551a:	4839      	ldr	r0, [pc, #228]	; (8005600 <Appli_Light_CtlTemperature_Range_Status+0x108>)
 800551c:	f024 f91c 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8263!\r\n");
 8005520:	2100      	movs	r1, #0
 8005522:	4836      	ldr	r0, [pc, #216]	; (80055fc <Appli_Light_CtlTemperature_Range_Status+0x104>)
 8005524:	f008 f830 	bl	800d588 <TraceHeader>
 8005528:	4836      	ldr	r0, [pc, #216]	; (8005604 <Appli_Light_CtlTemperature_Range_Status+0x10c>)
 800552a:	f024 f99b 	bl	8029864 <puts>
    
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	e05a      	b.n	80055ea <Appli_Light_CtlTemperature_Range_Status+0xf2>
  {
    if(i == 0)
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d111      	bne.n	800555e <Appli_Light_CtlTemperature_Range_Status+0x66>
    {
      TRACE_M(TF_LIGHT,"Status Code: 0x%x (%d)\r\n",
 800553a:	2100      	movs	r1, #0
 800553c:	482f      	ldr	r0, [pc, #188]	; (80055fc <Appli_Light_CtlTemperature_Range_Status+0x104>)
 800553e:	f008 f823 	bl	800d588 <TraceHeader>
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	4413      	add	r3, r2
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	4619      	mov	r1, r3
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	4413      	add	r3, r2
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	482c      	ldr	r0, [pc, #176]	; (8005608 <Appli_Light_CtlTemperature_Range_Status+0x110>)
 8005558:	f024 f8fe 	bl	8029758 <iprintf>
 800555c:	e042      	b.n	80055e4 <Appli_Light_CtlTemperature_Range_Status+0xec>
              pCtlTempRange_status[i],
              pCtlTempRange_status[i]);
    }
    else if((i == 1) || (i == 3))
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d002      	beq.n	800556a <Appli_Light_CtlTemperature_Range_Status+0x72>
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b03      	cmp	r3, #3
 8005568:	d105      	bne.n	8005576 <Appli_Light_CtlTemperature_Range_Status+0x7e>
    {
      value = pCtlTempRange_status[i];
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	4413      	add	r3, r2
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	827b      	strh	r3, [r7, #18]
 8005574:	e036      	b.n	80055e4 <Appli_Light_CtlTemperature_Range_Status+0xec>
    }
    else if(i == 2)
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d118      	bne.n	80055ae <Appli_Light_CtlTemperature_Range_Status+0xb6>
    {
      TRACE_M(TF_LIGHT,"Range Min: 0x%x (%d)\r\n",
 800557c:	2100      	movs	r1, #0
 800557e:	481f      	ldr	r0, [pc, #124]	; (80055fc <Appli_Light_CtlTemperature_Range_Status+0x104>)
 8005580:	f008 f802 	bl	800d588 <TraceHeader>
 8005584:	8a7a      	ldrh	r2, [r7, #18]
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	440b      	add	r3, r1
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	ea42 0003 	orr.w	r0, r2, r3
 8005594:	8a7a      	ldrh	r2, [r7, #18]
 8005596:	68f9      	ldr	r1, [r7, #12]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	440b      	add	r3, r1
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	4313      	orrs	r3, r2
 80055a2:	461a      	mov	r2, r3
 80055a4:	4601      	mov	r1, r0
 80055a6:	4819      	ldr	r0, [pc, #100]	; (800560c <Appli_Light_CtlTemperature_Range_Status+0x114>)
 80055a8:	f024 f8d6 	bl	8029758 <iprintf>
 80055ac:	e01a      	b.n	80055e4 <Appli_Light_CtlTemperature_Range_Status+0xec>
              value | pCtlTempRange_status[i] << 8,
              value | pCtlTempRange_status[i] << 8 );
    }
    else if(i == 4)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d117      	bne.n	80055e4 <Appli_Light_CtlTemperature_Range_Status+0xec>
    {
      TRACE_M(TF_LIGHT,"Range Max: 0x%x (%d)\r\n",
 80055b4:	2100      	movs	r1, #0
 80055b6:	4811      	ldr	r0, [pc, #68]	; (80055fc <Appli_Light_CtlTemperature_Range_Status+0x104>)
 80055b8:	f007 ffe6 	bl	800d588 <TraceHeader>
 80055bc:	8a7a      	ldrh	r2, [r7, #18]
 80055be:	68f9      	ldr	r1, [r7, #12]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	440b      	add	r3, r1
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	ea42 0003 	orr.w	r0, r2, r3
 80055cc:	8a7a      	ldrh	r2, [r7, #18]
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	440b      	add	r3, r1
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	4313      	orrs	r3, r2
 80055da:	461a      	mov	r2, r3
 80055dc:	4601      	mov	r1, r0
 80055de:	480c      	ldr	r0, [pc, #48]	; (8005610 <Appli_Light_CtlTemperature_Range_Status+0x118>)
 80055e0:	f024 f8ba 	bl	8029758 <iprintf>
  for(i = 0; i < pLength; i++)
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	3301      	adds	r3, #1
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d3a0      	bcc.n	8005534 <Appli_Light_CtlTemperature_Range_Status+0x3c>
              value | pCtlTempRange_status[i] << 8 );
    }
  }
#endif

  return MOBLE_RESULT_SUCCESS;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	08032a18 	.word	0x08032a18
 8005600:	0802e418 	.word	0x0802e418
 8005604:	0802e460 	.word	0x0802e460
 8005608:	0802e24c 	.word	0x0802e24c
 800560c:	0802e268 	.word	0x0802e268
 8005610:	0802e280 	.word	0x0802e280

08005614 <Appli_Light_CtlDefault_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_CtlDefault_Status(MOBLEUINT8 const *pCtlDefault_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	4611      	mov	r1, r2
 8005620:	461a      	mov	r2, r3
 8005622:	460b      	mov	r3, r1
 8005624:	80fb      	strh	r3, [r7, #6]
 8005626:	4613      	mov	r3, r2
 8005628:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_Ctl_DefaultStatus callback received for element %d \r\n", elementIndex);
 800562e:	2100      	movs	r1, #0
 8005630:	483f      	ldr	r0, [pc, #252]	; (8005730 <Appli_Light_CtlDefault_Status+0x11c>)
 8005632:	f007 ffa9 	bl	800d588 <TraceHeader>
 8005636:	797b      	ldrb	r3, [r7, #5]
 8005638:	4619      	mov	r1, r3
 800563a:	483e      	ldr	r0, [pc, #248]	; (8005734 <Appli_Light_CtlDefault_Status+0x120>)
 800563c:	f024 f88c 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8268!\r\n");
 8005640:	2100      	movs	r1, #0
 8005642:	483b      	ldr	r0, [pc, #236]	; (8005730 <Appli_Light_CtlDefault_Status+0x11c>)
 8005644:	f007 ffa0 	bl	800d588 <TraceHeader>
 8005648:	483b      	ldr	r0, [pc, #236]	; (8005738 <Appli_Light_CtlDefault_Status+0x124>)
 800564a:	f024 f90b 	bl	8029864 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	e064      	b.n	800571e <Appli_Light_CtlDefault_Status+0x10a>
  {
    if((i == 0) || (i == 2) || (i == 4))
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <Appli_Light_CtlDefault_Status+0x52>
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d002      	beq.n	8005666 <Appli_Light_CtlDefault_Status+0x52>
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b04      	cmp	r3, #4
 8005664:	d105      	bne.n	8005672 <Appli_Light_CtlDefault_Status+0x5e>
    {
      value = pCtlDefault_status[i];
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	4413      	add	r3, r2
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	827b      	strh	r3, [r7, #18]
 8005670:	e052      	b.n	8005718 <Appli_Light_CtlDefault_Status+0x104>
    }
    else if(i == 1)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d118      	bne.n	80056aa <Appli_Light_CtlDefault_Status+0x96>
    {
      TRACE_M(TF_LIGHT,"Lightness: 0x%x (%d)\n\r",
 8005678:	2100      	movs	r1, #0
 800567a:	482d      	ldr	r0, [pc, #180]	; (8005730 <Appli_Light_CtlDefault_Status+0x11c>)
 800567c:	f007 ff84 	bl	800d588 <TraceHeader>
 8005680:	8a7a      	ldrh	r2, [r7, #18]
 8005682:	68f9      	ldr	r1, [r7, #12]
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	440b      	add	r3, r1
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	ea42 0003 	orr.w	r0, r2, r3
 8005690:	8a7a      	ldrh	r2, [r7, #18]
 8005692:	68f9      	ldr	r1, [r7, #12]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	440b      	add	r3, r1
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	4313      	orrs	r3, r2
 800569e:	461a      	mov	r2, r3
 80056a0:	4601      	mov	r1, r0
 80056a2:	4826      	ldr	r0, [pc, #152]	; (800573c <Appli_Light_CtlDefault_Status+0x128>)
 80056a4:	f024 f858 	bl	8029758 <iprintf>
 80056a8:	e036      	b.n	8005718 <Appli_Light_CtlDefault_Status+0x104>
              value | pCtlDefault_status[i] << 8,
              value | pCtlDefault_status[i] << 8);
    }
    else if(i == 3)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d118      	bne.n	80056e2 <Appli_Light_CtlDefault_Status+0xce>
    {
      TRACE_M(TF_LIGHT,"Temperature: 0x%x (%d)\n\r",
 80056b0:	2100      	movs	r1, #0
 80056b2:	481f      	ldr	r0, [pc, #124]	; (8005730 <Appli_Light_CtlDefault_Status+0x11c>)
 80056b4:	f007 ff68 	bl	800d588 <TraceHeader>
 80056b8:	8a7a      	ldrh	r2, [r7, #18]
 80056ba:	68f9      	ldr	r1, [r7, #12]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	440b      	add	r3, r1
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	ea42 0003 	orr.w	r0, r2, r3
 80056c8:	8a7a      	ldrh	r2, [r7, #18]
 80056ca:	68f9      	ldr	r1, [r7, #12]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	440b      	add	r3, r1
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	4313      	orrs	r3, r2
 80056d6:	461a      	mov	r2, r3
 80056d8:	4601      	mov	r1, r0
 80056da:	4819      	ldr	r0, [pc, #100]	; (8005740 <Appli_Light_CtlDefault_Status+0x12c>)
 80056dc:	f024 f83c 	bl	8029758 <iprintf>
 80056e0:	e01a      	b.n	8005718 <Appli_Light_CtlDefault_Status+0x104>
              value | pCtlDefault_status[i] << 8,
              value | pCtlDefault_status[i] << 8);
    }
    else if(i == 5)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b05      	cmp	r3, #5
 80056e6:	d117      	bne.n	8005718 <Appli_Light_CtlDefault_Status+0x104>
    {
      TRACE_M(TF_LIGHT,"Delta UV: 0x%x (%d)\n\r",
 80056e8:	2100      	movs	r1, #0
 80056ea:	4811      	ldr	r0, [pc, #68]	; (8005730 <Appli_Light_CtlDefault_Status+0x11c>)
 80056ec:	f007 ff4c 	bl	800d588 <TraceHeader>
 80056f0:	8a7a      	ldrh	r2, [r7, #18]
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	440b      	add	r3, r1
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	021b      	lsls	r3, r3, #8
 80056fc:	ea42 0003 	orr.w	r0, r2, r3
 8005700:	8a7a      	ldrh	r2, [r7, #18]
 8005702:	68f9      	ldr	r1, [r7, #12]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	440b      	add	r3, r1
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	4313      	orrs	r3, r2
 800570e:	461a      	mov	r2, r3
 8005710:	4601      	mov	r1, r0
 8005712:	480c      	ldr	r0, [pc, #48]	; (8005744 <Appli_Light_CtlDefault_Status+0x130>)
 8005714:	f024 f820 	bl	8029758 <iprintf>
  for(i = 0; i < pLength; i++)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	3301      	adds	r3, #1
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	429a      	cmp	r2, r3
 8005724:	d396      	bcc.n	8005654 <Appli_Light_CtlDefault_Status+0x40>
              value | pCtlDefault_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005726:	2300      	movs	r3, #0
} 
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	08032a40 	.word	0x08032a40
 8005734:	0802e468 	.word	0x0802e468
 8005738:	0802e4a4 	.word	0x0802e4a4
 800573c:	0802e4ac 	.word	0x0802e4ac
 8005740:	0802e4c4 	.word	0x0802e4c4
 8005744:	0802e4e0 	.word	0x0802e4e0

08005748 <Appli_Light_Hsl_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_Hsl_Status(MOBLEUINT8 const *pHsl_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	4611      	mov	r1, r2
 8005754:	461a      	mov	r2, r3
 8005756:	460b      	mov	r3, r1
 8005758:	80fb      	strh	r3, [r7, #6]
 800575a:	4613      	mov	r3, r2
 800575c:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	827b      	strh	r3, [r7, #18]
#endif

  TRACE_M(TF_LIGHT,"Light_Hsl_Status callback received for element %d \r\n", elementIndex);
 8005762:	2100      	movs	r1, #0
 8005764:	484a      	ldr	r0, [pc, #296]	; (8005890 <Appli_Light_Hsl_Status+0x148>)
 8005766:	f007 ff0f 	bl	800d588 <TraceHeader>
 800576a:	797b      	ldrb	r3, [r7, #5]
 800576c:	4619      	mov	r1, r3
 800576e:	4849      	ldr	r0, [pc, #292]	; (8005894 <Appli_Light_Hsl_Status+0x14c>)
 8005770:	f023 fff2 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8278!\r\n");
 8005774:	2100      	movs	r1, #0
 8005776:	4846      	ldr	r0, [pc, #280]	; (8005890 <Appli_Light_Hsl_Status+0x148>)
 8005778:	f007 ff06 	bl	800d588 <TraceHeader>
 800577c:	4846      	ldr	r0, [pc, #280]	; (8005898 <Appli_Light_Hsl_Status+0x150>)
 800577e:	f024 f871 	bl	8029864 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	e079      	b.n	800587c <Appli_Light_Hsl_Status+0x134>
  {
    if((i == 0) || (i == 2) || (i == 4))
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <Appli_Light_Hsl_Status+0x52>
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d002      	beq.n	800579a <Appli_Light_Hsl_Status+0x52>
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b04      	cmp	r3, #4
 8005798:	d105      	bne.n	80057a6 <Appli_Light_Hsl_Status+0x5e>
    {
      value = pHsl_status[i];
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	827b      	strh	r3, [r7, #18]
 80057a4:	e067      	b.n	8005876 <Appli_Light_Hsl_Status+0x12e>
    }
    else if(i == 1)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d118      	bne.n	80057de <Appli_Light_Hsl_Status+0x96>
    {
      TRACE_M(TF_LIGHT,"HSL Lightness: 0x%x (%d)\n\r",
 80057ac:	2100      	movs	r1, #0
 80057ae:	4838      	ldr	r0, [pc, #224]	; (8005890 <Appli_Light_Hsl_Status+0x148>)
 80057b0:	f007 feea 	bl	800d588 <TraceHeader>
 80057b4:	8a7a      	ldrh	r2, [r7, #18]
 80057b6:	68f9      	ldr	r1, [r7, #12]
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	440b      	add	r3, r1
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	021b      	lsls	r3, r3, #8
 80057c0:	ea42 0003 	orr.w	r0, r2, r3
 80057c4:	8a7a      	ldrh	r2, [r7, #18]
 80057c6:	68f9      	ldr	r1, [r7, #12]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	440b      	add	r3, r1
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	021b      	lsls	r3, r3, #8
 80057d0:	4313      	orrs	r3, r2
 80057d2:	461a      	mov	r2, r3
 80057d4:	4601      	mov	r1, r0
 80057d6:	4831      	ldr	r0, [pc, #196]	; (800589c <Appli_Light_Hsl_Status+0x154>)
 80057d8:	f023 ffbe 	bl	8029758 <iprintf>
 80057dc:	e04b      	b.n	8005876 <Appli_Light_Hsl_Status+0x12e>
              value | pHsl_status[i] << 8,
              value | pHsl_status[i] << 8);
    }
    else if(i == 3)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d118      	bne.n	8005816 <Appli_Light_Hsl_Status+0xce>
    {
      TRACE_M(TF_LIGHT,"HSL Hue: 0x%x (%d)\n\r",
 80057e4:	2100      	movs	r1, #0
 80057e6:	482a      	ldr	r0, [pc, #168]	; (8005890 <Appli_Light_Hsl_Status+0x148>)
 80057e8:	f007 fece 	bl	800d588 <TraceHeader>
 80057ec:	8a7a      	ldrh	r2, [r7, #18]
 80057ee:	68f9      	ldr	r1, [r7, #12]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	440b      	add	r3, r1
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	ea42 0003 	orr.w	r0, r2, r3
 80057fc:	8a7a      	ldrh	r2, [r7, #18]
 80057fe:	68f9      	ldr	r1, [r7, #12]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	440b      	add	r3, r1
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	4313      	orrs	r3, r2
 800580a:	461a      	mov	r2, r3
 800580c:	4601      	mov	r1, r0
 800580e:	4824      	ldr	r0, [pc, #144]	; (80058a0 <Appli_Light_Hsl_Status+0x158>)
 8005810:	f023 ffa2 	bl	8029758 <iprintf>
 8005814:	e02f      	b.n	8005876 <Appli_Light_Hsl_Status+0x12e>
              value | pHsl_status[i] << 8,
              value | pHsl_status[i] << 8);
    }
    else if(i == 5)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b05      	cmp	r3, #5
 800581a:	d118      	bne.n	800584e <Appli_Light_Hsl_Status+0x106>
    {
      TRACE_M(TF_LIGHT,"HSL Saturation: 0x%x (%d)\n\r",
 800581c:	2100      	movs	r1, #0
 800581e:	481c      	ldr	r0, [pc, #112]	; (8005890 <Appli_Light_Hsl_Status+0x148>)
 8005820:	f007 feb2 	bl	800d588 <TraceHeader>
 8005824:	8a7a      	ldrh	r2, [r7, #18]
 8005826:	68f9      	ldr	r1, [r7, #12]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	440b      	add	r3, r1
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	021b      	lsls	r3, r3, #8
 8005830:	ea42 0003 	orr.w	r0, r2, r3
 8005834:	8a7a      	ldrh	r2, [r7, #18]
 8005836:	68f9      	ldr	r1, [r7, #12]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	440b      	add	r3, r1
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	4313      	orrs	r3, r2
 8005842:	461a      	mov	r2, r3
 8005844:	4601      	mov	r1, r0
 8005846:	4817      	ldr	r0, [pc, #92]	; (80058a4 <Appli_Light_Hsl_Status+0x15c>)
 8005848:	f023 ff86 	bl	8029758 <iprintf>
 800584c:	e013      	b.n	8005876 <Appli_Light_Hsl_Status+0x12e>
              value | pHsl_status[i] << 8,
              value | pHsl_status[i] << 8);
    }
    else if(i == 6)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b06      	cmp	r3, #6
 8005852:	d110      	bne.n	8005876 <Appli_Light_Hsl_Status+0x12e>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\n\r",
 8005854:	2100      	movs	r1, #0
 8005856:	480e      	ldr	r0, [pc, #56]	; (8005890 <Appli_Light_Hsl_Status+0x148>)
 8005858:	f007 fe96 	bl	800d588 <TraceHeader>
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	4413      	add	r3, r2
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	4619      	mov	r1, r3
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4413      	add	r3, r2
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	480d      	ldr	r0, [pc, #52]	; (80058a8 <Appli_Light_Hsl_Status+0x160>)
 8005872:	f023 ff71 	bl	8029758 <iprintf>
  for(i = 0; i < pLength; i++)
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	3301      	adds	r3, #1
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	429a      	cmp	r2, r3
 8005882:	d381      	bcc.n	8005788 <Appli_Light_Hsl_Status+0x40>
              pHsl_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	08032a60 	.word	0x08032a60
 8005894:	0802e4f8 	.word	0x0802e4f8
 8005898:	0802e530 	.word	0x0802e530
 800589c:	0802e538 	.word	0x0802e538
 80058a0:	0802e554 	.word	0x0802e554
 80058a4:	0802e56c 	.word	0x0802e56c
 80058a8:	0802e588 	.word	0x0802e588

080058ac <Appli_Light_HslHue_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_HslHue_Status(MOBLEUINT8 const *pHslHue_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	4611      	mov	r1, r2
 80058b8:	461a      	mov	r2, r3
 80058ba:	460b      	mov	r3, r1
 80058bc:	80fb      	strh	r3, [r7, #6]
 80058be:	4613      	mov	r3, r2
 80058c0:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 80058c2:	2300      	movs	r3, #0
 80058c4:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_HslHue_Status callback received for element %d \r\n", elementIndex);
 80058c6:	2100      	movs	r1, #0
 80058c8:	483a      	ldr	r0, [pc, #232]	; (80059b4 <Appli_Light_HslHue_Status+0x108>)
 80058ca:	f007 fe5d 	bl	800d588 <TraceHeader>
 80058ce:	797b      	ldrb	r3, [r7, #5]
 80058d0:	4619      	mov	r1, r3
 80058d2:	4839      	ldr	r0, [pc, #228]	; (80059b8 <Appli_Light_HslHue_Status+0x10c>)
 80058d4:	f023 ff40 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8271!\r\n");
 80058d8:	2100      	movs	r1, #0
 80058da:	4836      	ldr	r0, [pc, #216]	; (80059b4 <Appli_Light_HslHue_Status+0x108>)
 80058dc:	f007 fe54 	bl	800d588 <TraceHeader>
 80058e0:	4836      	ldr	r0, [pc, #216]	; (80059bc <Appli_Light_HslHue_Status+0x110>)
 80058e2:	f023 ffbf 	bl	8029864 <puts>
    
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 80058e6:	2300      	movs	r3, #0
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	e05a      	b.n	80059a2 <Appli_Light_HslHue_Status+0xf6>
  {
    if((i == 0) || (i == 2))
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <Appli_Light_HslHue_Status+0x4c>
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d105      	bne.n	8005904 <Appli_Light_HslHue_Status+0x58>
    {
      value = pHslHue_status[i];
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	4413      	add	r3, r2
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	827b      	strh	r3, [r7, #18]
 8005902:	e04b      	b.n	800599c <Appli_Light_HslHue_Status+0xf0>
    }
    else if(i == 1)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d118      	bne.n	800593c <Appli_Light_HslHue_Status+0x90>
    {
      TRACE_M(TF_LIGHT,"Present Hue: 0x%x (%d)\n\r",
 800590a:	2100      	movs	r1, #0
 800590c:	4829      	ldr	r0, [pc, #164]	; (80059b4 <Appli_Light_HslHue_Status+0x108>)
 800590e:	f007 fe3b 	bl	800d588 <TraceHeader>
 8005912:	8a7a      	ldrh	r2, [r7, #18]
 8005914:	68f9      	ldr	r1, [r7, #12]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	440b      	add	r3, r1
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	ea42 0003 	orr.w	r0, r2, r3
 8005922:	8a7a      	ldrh	r2, [r7, #18]
 8005924:	68f9      	ldr	r1, [r7, #12]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	440b      	add	r3, r1
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	4313      	orrs	r3, r2
 8005930:	461a      	mov	r2, r3
 8005932:	4601      	mov	r1, r0
 8005934:	4822      	ldr	r0, [pc, #136]	; (80059c0 <Appli_Light_HslHue_Status+0x114>)
 8005936:	f023 ff0f 	bl	8029758 <iprintf>
 800593a:	e02f      	b.n	800599c <Appli_Light_HslHue_Status+0xf0>
              value | pHslHue_status[i] << 8,
              value | pHslHue_status[i] << 8);
    }
    else if(i == 3)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b03      	cmp	r3, #3
 8005940:	d118      	bne.n	8005974 <Appli_Light_HslHue_Status+0xc8>
    {
      TRACE_M(TF_LIGHT,"Target Hue: 0x%x (%d)\n\r",
 8005942:	2100      	movs	r1, #0
 8005944:	481b      	ldr	r0, [pc, #108]	; (80059b4 <Appli_Light_HslHue_Status+0x108>)
 8005946:	f007 fe1f 	bl	800d588 <TraceHeader>
 800594a:	8a7a      	ldrh	r2, [r7, #18]
 800594c:	68f9      	ldr	r1, [r7, #12]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	440b      	add	r3, r1
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	ea42 0003 	orr.w	r0, r2, r3
 800595a:	8a7a      	ldrh	r2, [r7, #18]
 800595c:	68f9      	ldr	r1, [r7, #12]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	440b      	add	r3, r1
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	4313      	orrs	r3, r2
 8005968:	461a      	mov	r2, r3
 800596a:	4601      	mov	r1, r0
 800596c:	4815      	ldr	r0, [pc, #84]	; (80059c4 <Appli_Light_HslHue_Status+0x118>)
 800596e:	f023 fef3 	bl	8029758 <iprintf>
 8005972:	e013      	b.n	800599c <Appli_Light_HslHue_Status+0xf0>
              value | pHslHue_status[i] << 8,
              value | pHslHue_status[i] << 8);
    }
    else if(i == 4)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b04      	cmp	r3, #4
 8005978:	d110      	bne.n	800599c <Appli_Light_HslHue_Status+0xf0>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\n\r",
 800597a:	2100      	movs	r1, #0
 800597c:	480d      	ldr	r0, [pc, #52]	; (80059b4 <Appli_Light_HslHue_Status+0x108>)
 800597e:	f007 fe03 	bl	800d588 <TraceHeader>
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	4413      	add	r3, r2
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	4619      	mov	r1, r3
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4413      	add	r3, r2
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	461a      	mov	r2, r3
 8005996:	480c      	ldr	r0, [pc, #48]	; (80059c8 <Appli_Light_HslHue_Status+0x11c>)
 8005998:	f023 fede 	bl	8029758 <iprintf>
  for(i = 0; i < pLength; i++)
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	3301      	adds	r3, #1
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d3a0      	bcc.n	80058ec <Appli_Light_HslHue_Status+0x40>
              pHslHue_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 80059aa:	2300      	movs	r3, #0
} 
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	08032a78 	.word	0x08032a78
 80059b8:	0802e5a4 	.word	0x0802e5a4
 80059bc:	0802e5dc 	.word	0x0802e5dc
 80059c0:	0802e5e4 	.word	0x0802e5e4
 80059c4:	0802e600 	.word	0x0802e600
 80059c8:	0802e588 	.word	0x0802e588

080059cc <Appli_Light_HslSaturation_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_HslSaturation_Status(MOBLEUINT8 const *pHslSaturation_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	4611      	mov	r1, r2
 80059d8:	461a      	mov	r2, r3
 80059da:	460b      	mov	r3, r1
 80059dc:	80fb      	strh	r3, [r7, #6]
 80059de:	4613      	mov	r3, r2
 80059e0:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_HslSaturation_Status callback received for element %d \r\n", elementIndex);
 80059e6:	2100      	movs	r1, #0
 80059e8:	483a      	ldr	r0, [pc, #232]	; (8005ad4 <Appli_Light_HslSaturation_Status+0x108>)
 80059ea:	f007 fdcd 	bl	800d588 <TraceHeader>
 80059ee:	797b      	ldrb	r3, [r7, #5]
 80059f0:	4619      	mov	r1, r3
 80059f2:	4839      	ldr	r0, [pc, #228]	; (8005ad8 <Appli_Light_HslSaturation_Status+0x10c>)
 80059f4:	f023 feb0 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8275!\r\n");
 80059f8:	2100      	movs	r1, #0
 80059fa:	4836      	ldr	r0, [pc, #216]	; (8005ad4 <Appli_Light_HslSaturation_Status+0x108>)
 80059fc:	f007 fdc4 	bl	800d588 <TraceHeader>
 8005a00:	4836      	ldr	r0, [pc, #216]	; (8005adc <Appli_Light_HslSaturation_Status+0x110>)
 8005a02:	f023 ff2f 	bl	8029864 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e05a      	b.n	8005ac2 <Appli_Light_HslSaturation_Status+0xf6>
  {
    if((i == 0) || (i == 2))
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <Appli_Light_HslSaturation_Status+0x4c>
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d105      	bne.n	8005a24 <Appli_Light_HslSaturation_Status+0x58>
    {
      value = pHslSaturation_status[i];
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	827b      	strh	r3, [r7, #18]
 8005a22:	e04b      	b.n	8005abc <Appli_Light_HslSaturation_Status+0xf0>
    }
    else if(i == 1)
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d118      	bne.n	8005a5c <Appli_Light_HslSaturation_Status+0x90>
    {
      TRACE_M(TF_LIGHT,"Present Saturation: 0x%x (%d)\n\r",
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4829      	ldr	r0, [pc, #164]	; (8005ad4 <Appli_Light_HslSaturation_Status+0x108>)
 8005a2e:	f007 fdab 	bl	800d588 <TraceHeader>
 8005a32:	8a7a      	ldrh	r2, [r7, #18]
 8005a34:	68f9      	ldr	r1, [r7, #12]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	440b      	add	r3, r1
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	ea42 0003 	orr.w	r0, r2, r3
 8005a42:	8a7a      	ldrh	r2, [r7, #18]
 8005a44:	68f9      	ldr	r1, [r7, #12]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	440b      	add	r3, r1
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	021b      	lsls	r3, r3, #8
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	461a      	mov	r2, r3
 8005a52:	4601      	mov	r1, r0
 8005a54:	4822      	ldr	r0, [pc, #136]	; (8005ae0 <Appli_Light_HslSaturation_Status+0x114>)
 8005a56:	f023 fe7f 	bl	8029758 <iprintf>
 8005a5a:	e02f      	b.n	8005abc <Appli_Light_HslSaturation_Status+0xf0>
              value | pHslSaturation_status[i] << 8,
              value | pHslSaturation_status[i] << 8);
    }
    else if(i == 3)
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d118      	bne.n	8005a94 <Appli_Light_HslSaturation_Status+0xc8>
    {
      TRACE_M(TF_LIGHT,"Target Saturation: 0x%x (%d)\n\r",
 8005a62:	2100      	movs	r1, #0
 8005a64:	481b      	ldr	r0, [pc, #108]	; (8005ad4 <Appli_Light_HslSaturation_Status+0x108>)
 8005a66:	f007 fd8f 	bl	800d588 <TraceHeader>
 8005a6a:	8a7a      	ldrh	r2, [r7, #18]
 8005a6c:	68f9      	ldr	r1, [r7, #12]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	440b      	add	r3, r1
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	ea42 0003 	orr.w	r0, r2, r3
 8005a7a:	8a7a      	ldrh	r2, [r7, #18]
 8005a7c:	68f9      	ldr	r1, [r7, #12]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	440b      	add	r3, r1
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	4313      	orrs	r3, r2
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	4815      	ldr	r0, [pc, #84]	; (8005ae4 <Appli_Light_HslSaturation_Status+0x118>)
 8005a8e:	f023 fe63 	bl	8029758 <iprintf>
 8005a92:	e013      	b.n	8005abc <Appli_Light_HslSaturation_Status+0xf0>
              value | pHslSaturation_status[i] << 8,
              value | pHslSaturation_status[i] << 8);
    }
    else if(i == 4)
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d110      	bne.n	8005abc <Appli_Light_HslSaturation_Status+0xf0>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\n\r",
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	480d      	ldr	r0, [pc, #52]	; (8005ad4 <Appli_Light_HslSaturation_Status+0x108>)
 8005a9e:	f007 fd73 	bl	800d588 <TraceHeader>
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	480c      	ldr	r0, [pc, #48]	; (8005ae8 <Appli_Light_HslSaturation_Status+0x11c>)
 8005ab8:	f023 fe4e 	bl	8029758 <iprintf>
  for(i = 0; i < pLength; i++)
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d3a0      	bcc.n	8005a0c <Appli_Light_HslSaturation_Status+0x40>
              pHslSaturation_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	08032a94 	.word	0x08032a94
 8005ad8:	0802e618 	.word	0x0802e618
 8005adc:	0802e658 	.word	0x0802e658
 8005ae0:	0802e660 	.word	0x0802e660
 8005ae4:	0802e680 	.word	0x0802e680
 8005ae8:	0802e588 	.word	0x0802e588

08005aec <Appli_Light_HslDefault_Status>:
* @param  pLength: length of data
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_HslDefault_Status(MOBLEUINT8 const *pHslDefault_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	4611      	mov	r1, r2
 8005af8:	461a      	mov	r2, r3
 8005afa:	460b      	mov	r3, r1
 8005afc:	80fb      	strh	r3, [r7, #6]
 8005afe:	4613      	mov	r3, r2
 8005b00:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_HslDefault_Status callback received for element %d \r\n", elementIndex);  
 8005b06:	2100      	movs	r1, #0
 8005b08:	483f      	ldr	r0, [pc, #252]	; (8005c08 <Appli_Light_HslDefault_Status+0x11c>)
 8005b0a:	f007 fd3d 	bl	800d588 <TraceHeader>
 8005b0e:	797b      	ldrb	r3, [r7, #5]
 8005b10:	4619      	mov	r1, r3
 8005b12:	483e      	ldr	r0, [pc, #248]	; (8005c0c <Appli_Light_HslDefault_Status+0x120>)
 8005b14:	f023 fe20 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#827C!\r\n");
 8005b18:	2100      	movs	r1, #0
 8005b1a:	483b      	ldr	r0, [pc, #236]	; (8005c08 <Appli_Light_HslDefault_Status+0x11c>)
 8005b1c:	f007 fd34 	bl	800d588 <TraceHeader>
 8005b20:	483b      	ldr	r0, [pc, #236]	; (8005c10 <Appli_Light_HslDefault_Status+0x124>)
 8005b22:	f023 fe9f 	bl	8029864 <puts>

#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	e064      	b.n	8005bf6 <Appli_Light_HslDefault_Status+0x10a>
  {
    if((i == 0) || (i == 2) || (i == 4))
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <Appli_Light_HslDefault_Status+0x52>
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d002      	beq.n	8005b3e <Appli_Light_HslDefault_Status+0x52>
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d105      	bne.n	8005b4a <Appli_Light_HslDefault_Status+0x5e>
    {
      value = pHslDefault_status[i];
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	4413      	add	r3, r2
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	827b      	strh	r3, [r7, #18]
 8005b48:	e052      	b.n	8005bf0 <Appli_Light_HslDefault_Status+0x104>
    }
    else if(i == 1)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d118      	bne.n	8005b82 <Appli_Light_HslDefault_Status+0x96>
    {
      TRACE_M(TF_LIGHT,"Lightness: 0x%x (%d)\n\r",
 8005b50:	2100      	movs	r1, #0
 8005b52:	482d      	ldr	r0, [pc, #180]	; (8005c08 <Appli_Light_HslDefault_Status+0x11c>)
 8005b54:	f007 fd18 	bl	800d588 <TraceHeader>
 8005b58:	8a7a      	ldrh	r2, [r7, #18]
 8005b5a:	68f9      	ldr	r1, [r7, #12]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	440b      	add	r3, r1
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	021b      	lsls	r3, r3, #8
 8005b64:	ea42 0003 	orr.w	r0, r2, r3
 8005b68:	8a7a      	ldrh	r2, [r7, #18]
 8005b6a:	68f9      	ldr	r1, [r7, #12]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	440b      	add	r3, r1
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	4313      	orrs	r3, r2
 8005b76:	461a      	mov	r2, r3
 8005b78:	4601      	mov	r1, r0
 8005b7a:	4826      	ldr	r0, [pc, #152]	; (8005c14 <Appli_Light_HslDefault_Status+0x128>)
 8005b7c:	f023 fdec 	bl	8029758 <iprintf>
 8005b80:	e036      	b.n	8005bf0 <Appli_Light_HslDefault_Status+0x104>
              value | pHslDefault_status[i] << 8,
              value | pHslDefault_status[i] << 8);
    }
    else if(i == 3)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d118      	bne.n	8005bba <Appli_Light_HslDefault_Status+0xce>
    {
      TRACE_M(TF_LIGHT,"Hue: 0x%x (%d)\n\r",
 8005b88:	2100      	movs	r1, #0
 8005b8a:	481f      	ldr	r0, [pc, #124]	; (8005c08 <Appli_Light_HslDefault_Status+0x11c>)
 8005b8c:	f007 fcfc 	bl	800d588 <TraceHeader>
 8005b90:	8a7a      	ldrh	r2, [r7, #18]
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	440b      	add	r3, r1
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	ea42 0003 	orr.w	r0, r2, r3
 8005ba0:	8a7a      	ldrh	r2, [r7, #18]
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	440b      	add	r3, r1
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	4313      	orrs	r3, r2
 8005bae:	461a      	mov	r2, r3
 8005bb0:	4601      	mov	r1, r0
 8005bb2:	4819      	ldr	r0, [pc, #100]	; (8005c18 <Appli_Light_HslDefault_Status+0x12c>)
 8005bb4:	f023 fdd0 	bl	8029758 <iprintf>
 8005bb8:	e01a      	b.n	8005bf0 <Appli_Light_HslDefault_Status+0x104>
              value | pHslDefault_status[i] << 8,
              value | pHslDefault_status[i] << 8);
    }
    else if(i == 5)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b05      	cmp	r3, #5
 8005bbe:	d117      	bne.n	8005bf0 <Appli_Light_HslDefault_Status+0x104>
    {
      TRACE_M(TF_LIGHT,"Saturation: 0x%x (%d)\n\r",
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4811      	ldr	r0, [pc, #68]	; (8005c08 <Appli_Light_HslDefault_Status+0x11c>)
 8005bc4:	f007 fce0 	bl	800d588 <TraceHeader>
 8005bc8:	8a7a      	ldrh	r2, [r7, #18]
 8005bca:	68f9      	ldr	r1, [r7, #12]
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	440b      	add	r3, r1
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	021b      	lsls	r3, r3, #8
 8005bd4:	ea42 0003 	orr.w	r0, r2, r3
 8005bd8:	8a7a      	ldrh	r2, [r7, #18]
 8005bda:	68f9      	ldr	r1, [r7, #12]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	440b      	add	r3, r1
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	021b      	lsls	r3, r3, #8
 8005be4:	4313      	orrs	r3, r2
 8005be6:	461a      	mov	r2, r3
 8005be8:	4601      	mov	r1, r0
 8005bea:	480c      	ldr	r0, [pc, #48]	; (8005c1c <Appli_Light_HslDefault_Status+0x130>)
 8005bec:	f023 fdb4 	bl	8029758 <iprintf>
  for(i = 0; i < pLength; i++)
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d396      	bcc.n	8005b2c <Appli_Light_HslDefault_Status+0x40>
              value | pHslDefault_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	08032ab8 	.word	0x08032ab8
 8005c0c:	0802e6a0 	.word	0x0802e6a0
 8005c10:	0802e6dc 	.word	0x0802e6dc
 8005c14:	0802e4ac 	.word	0x0802e4ac
 8005c18:	0802e6e4 	.word	0x0802e6e4
 8005c1c:	0802e6f8 	.word	0x0802e6f8

08005c20 <Appli_Light_HslRange_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_HslRange_Status(MOBLEUINT8 const *pHslRange_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	460b      	mov	r3, r1
 8005c30:	80fb      	strh	r3, [r7, #6]
 8005c32:	4613      	mov	r3, r2
 8005c34:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_HslRange_Status callback received for element %d \r\n", elementIndex); 
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	485a      	ldr	r0, [pc, #360]	; (8005da8 <Appli_Light_HslRange_Status+0x188>)
 8005c3e:	f007 fca3 	bl	800d588 <TraceHeader>
 8005c42:	797b      	ldrb	r3, [r7, #5]
 8005c44:	4619      	mov	r1, r3
 8005c46:	4859      	ldr	r0, [pc, #356]	; (8005dac <Appli_Light_HslRange_Status+0x18c>)
 8005c48:	f023 fd86 	bl	8029758 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#827E!\r\n");
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4856      	ldr	r0, [pc, #344]	; (8005da8 <Appli_Light_HslRange_Status+0x188>)
 8005c50:	f007 fc9a 	bl	800d588 <TraceHeader>
 8005c54:	4856      	ldr	r0, [pc, #344]	; (8005db0 <Appli_Light_HslRange_Status+0x190>)
 8005c56:	f023 fe05 	bl	8029864 <puts>
  
    
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e098      	b.n	8005d92 <Appli_Light_HslRange_Status+0x172>
  {
    if(i == 0)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d111      	bne.n	8005c8a <Appli_Light_HslRange_Status+0x6a>
    {
      TRACE_M(TF_LIGHT,"Status Code: 0x%x (%d)\n\r",
 8005c66:	2100      	movs	r1, #0
 8005c68:	484f      	ldr	r0, [pc, #316]	; (8005da8 <Appli_Light_HslRange_Status+0x188>)
 8005c6a:	f007 fc8d 	bl	800d588 <TraceHeader>
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4413      	add	r3, r2
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	4619      	mov	r1, r3
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	484c      	ldr	r0, [pc, #304]	; (8005db4 <Appli_Light_HslRange_Status+0x194>)
 8005c84:	f023 fd68 	bl	8029758 <iprintf>
 8005c88:	e080      	b.n	8005d8c <Appli_Light_HslRange_Status+0x16c>
              pHslRange_status[i],
              pHslRange_status[i]);
    }
    else if((i == 1) || (i == 3) || (i == 5) || (i == 7))
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d008      	beq.n	8005ca2 <Appli_Light_HslRange_Status+0x82>
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d005      	beq.n	8005ca2 <Appli_Light_HslRange_Status+0x82>
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b05      	cmp	r3, #5
 8005c9a:	d002      	beq.n	8005ca2 <Appli_Light_HslRange_Status+0x82>
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2b07      	cmp	r3, #7
 8005ca0:	d105      	bne.n	8005cae <Appli_Light_HslRange_Status+0x8e>
    {
      value = pHslRange_status[i];
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	827b      	strh	r3, [r7, #18]
 8005cac:	e06e      	b.n	8005d8c <Appli_Light_HslRange_Status+0x16c>
    }
    else if(i == 2)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d118      	bne.n	8005ce6 <Appli_Light_HslRange_Status+0xc6>
    {
      TRACE_M(TF_LIGHT,"Hue Range Min: 0x%x (%d)\n\r",
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	483c      	ldr	r0, [pc, #240]	; (8005da8 <Appli_Light_HslRange_Status+0x188>)
 8005cb8:	f007 fc66 	bl	800d588 <TraceHeader>
 8005cbc:	8a7a      	ldrh	r2, [r7, #18]
 8005cbe:	68f9      	ldr	r1, [r7, #12]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	440b      	add	r3, r1
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	ea42 0003 	orr.w	r0, r2, r3
 8005ccc:	8a7a      	ldrh	r2, [r7, #18]
 8005cce:	68f9      	ldr	r1, [r7, #12]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	440b      	add	r3, r1
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4601      	mov	r1, r0
 8005cde:	4836      	ldr	r0, [pc, #216]	; (8005db8 <Appli_Light_HslRange_Status+0x198>)
 8005ce0:	f023 fd3a 	bl	8029758 <iprintf>
 8005ce4:	e052      	b.n	8005d8c <Appli_Light_HslRange_Status+0x16c>
              value | pHslRange_status[i] << 8,
              value | pHslRange_status[i] << 8);
    }
    else if(i == 4)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d118      	bne.n	8005d1e <Appli_Light_HslRange_Status+0xfe>
    {
      TRACE_M(TF_LIGHT,"Hue Range Max: 0x%x (%d)\n\r",
 8005cec:	2100      	movs	r1, #0
 8005cee:	482e      	ldr	r0, [pc, #184]	; (8005da8 <Appli_Light_HslRange_Status+0x188>)
 8005cf0:	f007 fc4a 	bl	800d588 <TraceHeader>
 8005cf4:	8a7a      	ldrh	r2, [r7, #18]
 8005cf6:	68f9      	ldr	r1, [r7, #12]
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	440b      	add	r3, r1
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	ea42 0003 	orr.w	r0, r2, r3
 8005d04:	8a7a      	ldrh	r2, [r7, #18]
 8005d06:	68f9      	ldr	r1, [r7, #12]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	440b      	add	r3, r1
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	021b      	lsls	r3, r3, #8
 8005d10:	4313      	orrs	r3, r2
 8005d12:	461a      	mov	r2, r3
 8005d14:	4601      	mov	r1, r0
 8005d16:	4829      	ldr	r0, [pc, #164]	; (8005dbc <Appli_Light_HslRange_Status+0x19c>)
 8005d18:	f023 fd1e 	bl	8029758 <iprintf>
 8005d1c:	e036      	b.n	8005d8c <Appli_Light_HslRange_Status+0x16c>
              value | pHslRange_status[i] << 8,
              value | pHslRange_status[i] << 8);
    }
    else if(i == 6)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b06      	cmp	r3, #6
 8005d22:	d118      	bne.n	8005d56 <Appli_Light_HslRange_Status+0x136>
    {
      TRACE_M(TF_LIGHT,"Saturation Range Min: 0x%x (%d)\n\r",
 8005d24:	2100      	movs	r1, #0
 8005d26:	4820      	ldr	r0, [pc, #128]	; (8005da8 <Appli_Light_HslRange_Status+0x188>)
 8005d28:	f007 fc2e 	bl	800d588 <TraceHeader>
 8005d2c:	8a7a      	ldrh	r2, [r7, #18]
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	440b      	add	r3, r1
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	021b      	lsls	r3, r3, #8
 8005d38:	ea42 0003 	orr.w	r0, r2, r3
 8005d3c:	8a7a      	ldrh	r2, [r7, #18]
 8005d3e:	68f9      	ldr	r1, [r7, #12]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	440b      	add	r3, r1
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4601      	mov	r1, r0
 8005d4e:	481c      	ldr	r0, [pc, #112]	; (8005dc0 <Appli_Light_HslRange_Status+0x1a0>)
 8005d50:	f023 fd02 	bl	8029758 <iprintf>
 8005d54:	e01a      	b.n	8005d8c <Appli_Light_HslRange_Status+0x16c>
              value | pHslRange_status[i] << 8,
              value | pHslRange_status[i] << 8);
    }
    else if(i == 8)
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d117      	bne.n	8005d8c <Appli_Light_HslRange_Status+0x16c>
    {
      TRACE_M(TF_LIGHT,"Saturation Range Max: 0x%x (%d)\n\r",
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4812      	ldr	r0, [pc, #72]	; (8005da8 <Appli_Light_HslRange_Status+0x188>)
 8005d60:	f007 fc12 	bl	800d588 <TraceHeader>
 8005d64:	8a7a      	ldrh	r2, [r7, #18]
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	440b      	add	r3, r1
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	ea42 0003 	orr.w	r0, r2, r3
 8005d74:	8a7a      	ldrh	r2, [r7, #18]
 8005d76:	68f9      	ldr	r1, [r7, #12]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	440b      	add	r3, r1
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	4313      	orrs	r3, r2
 8005d82:	461a      	mov	r2, r3
 8005d84:	4601      	mov	r1, r0
 8005d86:	480f      	ldr	r0, [pc, #60]	; (8005dc4 <Appli_Light_HslRange_Status+0x1a4>)
 8005d88:	f023 fce6 	bl	8029758 <iprintf>
  for(i = 0; i < pLength; i++)
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	f4ff af62 	bcc.w	8005c60 <Appli_Light_HslRange_Status+0x40>
              value | pHslRange_status[i] << 8);
    }
  }
#endif

  return MOBLE_RESULT_SUCCESS;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	08032ad8 	.word	0x08032ad8
 8005dac:	0802e710 	.word	0x0802e710
 8005db0:	0802e74c 	.word	0x0802e74c
 8005db4:	0802e754 	.word	0x0802e754
 8005db8:	0802e770 	.word	0x0802e770
 8005dbc:	0802e78c 	.word	0x0802e78c
 8005dc0:	0802e7a8 	.word	0x0802e7a8
 8005dc4:	0802e7cc 	.word	0x0802e7cc

08005dc8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005dcc:	f3bf 8f4f 	dsb	sy
}
 8005dd0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005dd2:	4b06      	ldr	r3, [pc, #24]	; (8005dec <__NVIC_SystemReset+0x24>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005dda:	4904      	ldr	r1, [pc, #16]	; (8005dec <__NVIC_SystemReset+0x24>)
 8005ddc:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <__NVIC_SystemReset+0x28>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005de2:	f3bf 8f4f 	dsb	sy
}
 8005de6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005de8:	bf00      	nop
 8005dea:	e7fd      	b.n	8005de8 <__NVIC_SystemReset+0x20>
 8005dec:	e000ed00 	.word	0xe000ed00
 8005df0:	05fa0004 	.word	0x05fa0004

08005df4 <LL_FLASH_IsActiveFlag_OperationSuspended>:
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8005df8:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <LL_FLASH_IsActiveFlag_OperationSuspended+0x24>)
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e04:	d101      	bne.n	8005e0a <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	58004000 	.word	0x58004000

08005e1c <Appli_ShortButtonPress>:
* @brief  Function calls when a button is pressed for short duration  
* @param  void
* @retval void
*/ 
static void Appli_ShortButtonPress(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  BLEMesh_ModelsCommand();
 8005e20:	f001 f91a 	bl	8007058 <BLEMesh_ModelsCommand>
}
 8005e24:	bf00      	nop
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <Appli_LongButtonPress>:
* @brief  Function calls when a button is pressed for Long duration  
* @param  void
* @retval void
*/ 
static void Appli_LongButtonPress(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
//  TRACE_M(TF_LIGHT_CLIENT_M, "----------- API LIGHT LC ON OFF GET ------------- \r\n");
//  Appli_LightClient_API(0, LIGHT_LC_ON_OFF_GET, NULL);
  
  /** LIGHT LC PROPERTY **/
//LIGHT_CONTROL_AMBIENT_LUXLEVEL_ON_PID  : 0x002B
  pPropertyId[0]= 0x2B;           // Property ID byte 0 : Property ID identifying a Light LC Property.
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <Appli_LongButtonPress+0x30>)
 8005e2e:	222b      	movs	r2, #43	; 0x2b
 8005e30:	701a      	strb	r2, [r3, #0]
  pPropertyId[1]= 0x00;           // Property ID byte 1 : Property ID identifying a Light LC Property.
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <Appli_LongButtonPress+0x30>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	705a      	strb	r2, [r3, #1]
//  Appli_LightClient_API(0, LIGHT_LC_PROPERTY_GET, pPropertyId);
  

  /* SENSOR APIs */
  //PRESENT_AMBIENT_TEMPERATURE_PID : 0x004F
  pPropertyId[0]= 0x4F;           // Property ID byte 0 : Property ID for the sensor
 8005e38:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <Appli_LongButtonPress+0x30>)
 8005e3a:	224f      	movs	r2, #79	; 0x4f
 8005e3c:	701a      	strb	r2, [r3, #0]
  pPropertyId[1]= 0x00;           // Property ID byte 1 : Property ID for the sensor
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <Appli_LongButtonPress+0x30>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	705a      	strb	r2, [r3, #1]
    /** SENSOR SETTINGS **/
//  TRACE_M(TF_SENSOR_CLIENT_M, "----------- API SENSOR SETTINGS GET ------------- \r\n");
//  Appli_SensorsClient_API(0, SENSOR_SETTINGS_GET, pPropertyId);
  
    /** SENSOR SETTING **/
  pPropertyId[2]= 0xAD;           // Sensor Setting Property ID byte 0 : Property ID for the sensor setting
 8005e44:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <Appli_LongButtonPress+0x30>)
 8005e46:	22ad      	movs	r2, #173	; 0xad
 8005e48:	709a      	strb	r2, [r3, #2]
  pPropertyId[3]= 0x00;           // Sensor Setting Property ID byte 1 : Property ID for the sensor setting
 8005e4a:	4b03      	ldr	r3, [pc, #12]	; (8005e58 <Appli_LongButtonPress+0x30>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	70da      	strb	r2, [r3, #3]
//  pPropertyId[2]= 0x01;           // Raw Value X1 byte 0 : Raw value identifying a starting column.
//  pPropertyId[3]= 0x02;           // Raw Value X2 byte 0 : Raw value identifying an ending column.
//  TRACE_M(TF_SENSOR_CLIENT_M, "----------- API SENSOR SERIES GET ------------- \r\n");
//  Appli_SensorsClient_API(0, SENSOR_SERIES_GET, pPropertyId);
  
  IntensityPublish();
 8005e50:	f000 fc5e 	bl	8006710 <IntensityPublish>
  
}
 8005e54:	bf00      	nop
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	2000443c 	.word	0x2000443c

08005e5c <Appli_UpdateButtonState>:
* @brief  Updates the button status  
* @param  int isPressed
* @retval void
*/ 
static void Appli_UpdateButtonState(int isPressed)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t t0 = 0,t1 = 1;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	2301      	movs	r3, #1
 8005e6a:	60bb      	str	r3, [r7, #8]

  t0 = Clock_Time(); /* SW1 press timing */
 8005e6c:	f002 f806 	bl	8007e7c <HAL_GetTick>
 8005e70:	60f8      	str	r0, [r7, #12]
  
  while(BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED);
 8005e72:	bf00      	nop
 8005e74:	2000      	movs	r0, #0
 8005e76:	f001 ff03 	bl	8007c80 <BSP_PB_GetState>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0f9      	beq.n	8005e74 <Appli_UpdateButtonState+0x18>
  t1 = Clock_Time(); /* SW1 release timing */
 8005e80:	f001 fffc 	bl	8007e7c <HAL_GetTick>
 8005e84:	60b8      	str	r0, [r7, #8]
  
  if((t1 - t0) > LONG_PRESS_THRESHOLD)
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e90:	d902      	bls.n	8005e98 <Appli_UpdateButtonState+0x3c>
  {
    Appli_LongButtonPress();
 8005e92:	f7ff ffc9 	bl	8005e28 <Appli_LongButtonPress>
  else if((t1 - t0) > BOUNCE_THRESHOLD)
  {
    /* Button 1 short press action */
    Appli_ShortButtonPress();
  }
}
 8005e96:	e006      	b.n	8005ea6 <Appli_UpdateButtonState+0x4a>
  else if((t1 - t0) > BOUNCE_THRESHOLD)
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b14      	cmp	r3, #20
 8005ea0:	d901      	bls.n	8005ea6 <Appli_UpdateButtonState+0x4a>
    Appli_ShortButtonPress();
 8005ea2:	f7ff ffbb 	bl	8005e1c <Appli_ShortButtonPress>
}
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <Mesh_Task>:
* @brief  task for the BLE MESH, the MESH Models and the Appli processes  
* @param  void
* @retval void
*/ 
static void Mesh_Task()
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  BLEMesh_Process();
 8005eb4:	f020 fb36 	bl	8026524 <BLEMesh_Process>
  BLEMesh_ModelsProcess(); /* Models Processing */
 8005eb8:	f001 f8c4 	bl	8007044 <BLEMesh_ModelsProcess>
  
  if((UnprovisionInProgress > 0) &&
 8005ebc:	4b13      	ldr	r3, [pc, #76]	; (8005f0c <Mesh_Task+0x5c>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01d      	beq.n	8005f00 <Mesh_Task+0x50>
     (!LL_FLASH_IsActiveFlag_OperationSuspended()))
 8005ec4:	f7ff ff96 	bl	8005df4 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8005ec8:	4603      	mov	r3, r0
  if((UnprovisionInProgress > 0) &&
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d118      	bne.n	8005f00 <Mesh_Task+0x50>
  {
    UnprovisionInProgress = 0;
 8005ece:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <Mesh_Task+0x5c>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	701a      	strb	r2, [r3, #0]
    AppliNvm_ClearModelState();
 8005ed4:	f000 fcc7 	bl	8006866 <AppliNvm_ClearModelState>
    PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 8005ed8:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <Mesh_Task+0x60>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2104      	movs	r1, #4
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f001 fad8 	bl	8007494 <PalNvmErase>
    TRACE_M(TF_PROVISION,"NVM erased\r\n");      
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	480b      	ldr	r0, [pc, #44]	; (8005f14 <Mesh_Task+0x64>)
 8005ee8:	f007 fb4e 	bl	800d588 <TraceHeader>
 8005eec:	480a      	ldr	r0, [pc, #40]	; (8005f18 <Mesh_Task+0x68>)
 8005eee:	f023 fcb9 	bl	8029864 <puts>
    TRACE_M(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	4807      	ldr	r0, [pc, #28]	; (8005f14 <Mesh_Task+0x64>)
 8005ef6:	f007 fb47 	bl	800d588 <TraceHeader>
 8005efa:	4808      	ldr	r0, [pc, #32]	; (8005f1c <Mesh_Task+0x6c>)
 8005efc:	f023 fcb2 	bl	8029864 <puts>
  }
    
#if (APPLI_OPTIM == 0)
  /* Set the task in the scheduler for the next execution */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);
 8005f00:	2100      	movs	r1, #0
 8005f02:	2002      	movs	r0, #2
 8005f04:	f010 fe80 	bl	8016c08 <UTIL_SEQ_SetTask>
#endif
#endif
}
 8005f08:	bf00      	nop
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20004435 	.word	0x20004435
 8005f10:	20004450 	.word	0x20004450
 8005f14:	08032b58 	.word	0x08032b58
 8005f18:	0802e7f0 	.word	0x0802e7f0
 8005f1c:	0802e7fc 	.word	0x0802e7fc

08005f20 <Appli_Task>:
* @brief  task for the BLE MESH, the MESH Models and the Appli processes  
* @param  void
* @retval void
*/ 
static void Appli_Task()
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  Appli_Process();
 8005f24:	f000 fbfb 	bl	800671e <Appli_Process>
  
#if (APPLI_OPTIM == 0)
  /* Set the task in the scheduler for the next execution */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_APPLI_REQ_ID, CFG_SCH_PRIO_0);
 8005f28:	2100      	movs	r1, #0
 8005f2a:	2020      	movs	r0, #32
 8005f2c:	f010 fe6c 	bl	8016c08 <UTIL_SEQ_SetTask>
#endif
#endif
}
 8005f30:	bf00      	nop
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <Appli_LedCtrl>:
* @brief  Controls the state of on board LED
* @param  void
* @retval void
*/ 
void Appli_LedCtrl(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  if(Appli_LedState)
 8005f38:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <Appli_LedCtrl+0x20>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <Appli_LedCtrl+0x14>
  {
    BSP_LED_On(LED_BLUE);
 8005f40:	2000      	movs	r0, #0
 8005f42:	f001 fdf9 	bl	8007b38 <BSP_LED_On>
  else
  {
    BSP_LED_Off(LED_BLUE);

  }
}
 8005f46:	e002      	b.n	8005f4e <Appli_LedCtrl+0x1a>
    BSP_LED_Off(LED_BLUE);
 8005f48:	2000      	movs	r0, #0
 8005f4a:	f001 fe0f 	bl	8007b6c <BSP_LED_Off>
}
 8005f4e:	bf00      	nop
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	2000442e 	.word	0x2000442e

08005f58 <Appli_LedBlink>:
* @brief  Blinks the on board LED  
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_LedBlink(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
  /* Switch On the LED */
  Appli_LedState = 1;
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <Appli_LedBlink+0x30>)
 8005f5e:	2201      	movs	r2, #1
 8005f60:	701a      	strb	r2, [r3, #0]
  Appli_LedCtrl();
 8005f62:	f7ff ffe7 	bl	8005f34 <Appli_LedCtrl>
  Clock_Wait(500);
 8005f66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f6a:	f7fb fcca 	bl	8001902 <HAL_Delay>
  
  /* Switch Off the LED */
  Appli_LedState = 0;
 8005f6e:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <Appli_LedBlink+0x30>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	701a      	strb	r2, [r3, #0]
  Appli_LedCtrl();
 8005f74:	f7ff ffde 	bl	8005f34 <Appli_LedCtrl>
  Clock_Wait(500);
 8005f78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f7c:	f7fb fcc1 	bl	8001902 <HAL_Delay>
  
  return MOBLE_RESULT_SUCCESS;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	2000442e 	.word	0x2000442e

08005f8c <Appli_BleStackInitCb>:
* @brief  initializes BLE Stack    
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleStackInitCb()
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  /* BLE Stack initialization */
  /* Not Required in BLE */
  return MOBLE_RESULT_SUCCESS;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <Appli_BleSetTxPowerCb>:
* @brief  Sets transmission power of RF 
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleSetTxPowerCb(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
  /* API to change the Transmission power of BLE Device */
  /* uint8_t en_high_power, uint8_t pa_level
  en_high_power Can be only 0 or 1. Set high power bit on or off.
  pa_level Can be from 0 to 7. Set the PA level value
  */ 
  status = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8005fa2:	2118      	movs	r1, #24
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	f00f fa74 	bl	8015492 <aci_hal_set_tx_power_level>
 8005faa:	4603      	mov	r3, r0
 8005fac:	71fb      	strb	r3, [r7, #7]
  if (status)
 8005fae:	79fb      	ldrb	r3, [r7, #7]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <Appli_BleSetTxPowerCb+0x1c>
    return MOBLE_RESULT_FAIL;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e000      	b.n	8005fba <Appli_BleSetTxPowerCb+0x1e>
  else
    return MOBLE_RESULT_SUCCESS;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <Appli_BleSetUUIDCb>:
* @brief  SET UUID value 
* @param  uuid_prefix_data : Pointer of UUID buffer data
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleSetUUIDCb(MOBLEUINT8 *uuid_prefix_data)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
      Y = 4 i.e. Conforming to the current spec 
    For UUID information refer RFC4122
  */
  
  /* copy UUID prefix data*/
  uint8_t uuid_buff[10] = {0xF8,0x1D,0x4F,0xAE,0x7D,0xEC};/*random value by user */
 8005fcc:	4a16      	ldr	r2, [pc, #88]	; (8006028 <Appli_BleSetUUIDCb+0x64>)
 8005fce:	f107 030c 	add.w	r3, r7, #12
 8005fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fd6:	6018      	str	r0, [r3, #0]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	8019      	strh	r1, [r3, #0]
 8005fdc:	3302      	adds	r3, #2
 8005fde:	0c0a      	lsrs	r2, r1, #16
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	f107 0313 	add.w	r3, r7, #19
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	709a      	strb	r2, [r3, #2]

   uuid_buff[6] = 0x4B;  /* 0x4B => 4 : Random */
 8005fec:	234b      	movs	r3, #75	; 0x4b
 8005fee:	74bb      	strb	r3, [r7, #18]
   uuid_buff[7] = 'S' ;  /* User define value */
 8005ff0:	2353      	movs	r3, #83	; 0x53
 8005ff2:	74fb      	strb	r3, [r7, #19]
   uuid_buff[8] = 0xA1;  /* 0xA1 => A : Conforming to the current Spec */
 8005ff4:	23a1      	movs	r3, #161	; 0xa1
 8005ff6:	753b      	strb	r3, [r7, #20]
   uuid_buff[9] = 'T' ;  /* User define value */  
 8005ff8:	2354      	movs	r3, #84	; 0x54
 8005ffa:	757b      	strb	r3, [r7, #21]

   memcpy(uuid_prefix_data,uuid_buff,sizeof(uuid_buff));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	461a      	mov	r2, r3
 8006000:	f107 030c 	add.w	r3, r7, #12
 8006004:	cb03      	ldmia	r3!, {r0, r1}
 8006006:	6010      	str	r0, [r2, #0]
 8006008:	6051      	str	r1, [r2, #4]
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	8113      	strh	r3, [r2, #8]
   memcpy(&uuid_prefix_data[10],bdaddr,6);  /* Copy bdaddr to last 6 bytes of UUID */
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	330a      	adds	r3, #10
 8006012:	2206      	movs	r2, #6
 8006014:	4905      	ldr	r1, [pc, #20]	; (800602c <Appli_BleSetUUIDCb+0x68>)
 8006016:	4618      	mov	r0, r3
 8006018:	f022 fdaa 	bl	8028b70 <memcpy>
   
   return MOBLE_RESULT_SUCCESS;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	0802e828 	.word	0x0802e828
 800602c:	20004440 	.word	0x20004440

08006030 <Appli_BleSetProductInfoCB>:
* @brief  SET CID , PID and VID values 
* @param  company_product_info : vendor fill product information in this buffer
* @retval MOBLE_RESULT status of result
*/
MOBLE_RESULT Appli_BleSetProductInfoCB(MOBLEUINT8 *company_product_info)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* CID : provide 16-bit company identifier assigned by the Bluetooth SIG */
  uint16_t company_id                   = COMPANY_ID;
 8006038:	2330      	movs	r3, #48	; 0x30
 800603a:	81fb      	strh	r3, [r7, #14]
  
  /* PID : Provide 16-bit vendor-assigned product identifier */
  uint16_t product_id                   = PRODUCT_ID;
 800603c:	2302      	movs	r3, #2
 800603e:	81bb      	strh	r3, [r7, #12]
  
  /* VID : Provide 16-bit vendor-assigned product version identifier*/
  uint16_t product_version_id           = PRODUCT_VERSION_ID;
 8006040:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8006044:	817b      	strh	r3, [r7, #10]
 8006046:	89fa      	ldrh	r2, [r7, #14]
  
  memcpy(company_product_info + 0,(void *)&company_id,sizeof(company_id));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	801a      	strh	r2, [r3, #0]
  memcpy(company_product_info + 2 ,(void *)&product_id,sizeof(product_id));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3302      	adds	r3, #2
 8006050:	89ba      	ldrh	r2, [r7, #12]
 8006052:	801a      	strh	r2, [r3, #0]
  memcpy(company_product_info + 4 ,(void *)&product_version_id,sizeof(product_version_id));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3304      	adds	r3, #4
 8006058:	897a      	ldrh	r2, [r7, #10]
 800605a:	801a      	strh	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <Appli_BleGattConnectionCompleteCb>:
* @brief  Call back function called when GATT Connection Created  
* @param  none
* @retval none
*/ 
void Appli_BleGattConnectionCompleteCb(void)
{ 
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  ProvisionFlag = 1;
 8006070:	4b05      	ldr	r3, [pc, #20]	; (8006088 <Appli_BleGattConnectionCompleteCb+0x1c>)
 8006072:	2201      	movs	r2, #1
 8006074:	701a      	strb	r2, [r3, #0]
  /* Proxy Node, will be called whenever Gatt connection is established */
  /* Turn ON Red LED*/
  ProxyFlag = 1;
 8006076:	4b05      	ldr	r3, [pc, #20]	; (800608c <Appli_BleGattConnectionCompleteCb+0x20>)
 8006078:	2201      	movs	r2, #1
 800607a:	701a      	strb	r2, [r3, #0]
  BSP_LED_On(LED_GREEN);
 800607c:	2001      	movs	r0, #1
 800607e:	f001 fd5b 	bl	8007b38 <BSP_LED_On>
}
 8006082:	bf00      	nop
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20004434 	.word	0x20004434
 800608c:	20004433 	.word	0x20004433

08006090 <Appli_BleGattDisconnectionCompleteCb>:
* @brief  Call back function called when GATT Disconnection Complete  
* @param  none
* @retval none
*/ 
void Appli_BleGattDisconnectionCompleteCb(void)
{ 
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  ProvisionFlag = 0;
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <Appli_BleGattDisconnectionCompleteCb+0x1c>)
 8006096:	2200      	movs	r2, #0
 8006098:	701a      	strb	r2, [r3, #0]
  /* Proxy Node, will be called whenever Gatt disconnected */
  /* Turn Off Red LED*/
  ProxyFlag = 0;
 800609a:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <Appli_BleGattDisconnectionCompleteCb+0x20>)
 800609c:	2200      	movs	r2, #0
 800609e:	701a      	strb	r2, [r3, #0]
  BSP_LED_Off(LED_GREEN);
 80060a0:	2001      	movs	r0, #1
 80060a2:	f001 fd63 	bl	8007b6c <BSP_LED_Off>
}
 80060a6:	bf00      	nop
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20004434 	.word	0x20004434
 80060b0:	20004433 	.word	0x20004433

080060b4 <Appli_BleUnprovisionedIdentifyCb>:
* @brief Unprovisioned Node Identification
* @param MOBLEUINT8 data 
* @retval none
*/
void Appli_BleUnprovisionedIdentifyCb(MOBLEUINT8 data)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	71fb      	strb	r3, [r7, #7]
#ifdef ENABLE_AUTH_TYPE_OUTPUT_OOB
  PrvngInProcess = 1;  
#endif   
  TRACE_M(TF_PROVISION,"Unprovisioned Node Identifier received: %02x\n\r", data);    
 80060be:	2100      	movs	r1, #0
 80060c0:	4805      	ldr	r0, [pc, #20]	; (80060d8 <Appli_BleUnprovisionedIdentifyCb+0x24>)
 80060c2:	f007 fa61 	bl	800d588 <TraceHeader>
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	4619      	mov	r1, r3
 80060ca:	4804      	ldr	r0, [pc, #16]	; (80060dc <Appli_BleUnprovisionedIdentifyCb+0x28>)
 80060cc:	f023 fb44 	bl	8029758 <iprintf>
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	08032b64 	.word	0x08032b64
 80060dc:	0802e834 	.word	0x0802e834

080060e0 <Appli_BleSetNumberOfElementsCb>:
* @brief  Set Number of Elements in a Node
* @param  none
* @retval Sending the value to BLE Mesh Library
*/ 
MOBLEUINT8 Appli_BleSetNumberOfElementsCb(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  if(NumberOfElements > BLEMesh_GetNumberOfElements())
 80060e4:	f017 f800 	bl	801d0e8 <BLEMesh_GetNumberOfElements>
 80060e8:	4603      	mov	r3, r0
 80060ea:	461a      	mov	r2, r3
 80060ec:	4b0f      	ldr	r3, [pc, #60]	; (800612c <Appli_BleSetNumberOfElementsCb+0x4c>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d20a      	bcs.n	800610a <Appli_BleSetNumberOfElementsCb+0x2a>
  {
    TRACE_M(TF_MISC, "Number of Elements enabled in application exceeding from Library Capability!\r\n"); 
 80060f4:	2100      	movs	r1, #0
 80060f6:	480e      	ldr	r0, [pc, #56]	; (8006130 <Appli_BleSetNumberOfElementsCb+0x50>)
 80060f8:	f007 fa46 	bl	800d588 <TraceHeader>
 80060fc:	480d      	ldr	r0, [pc, #52]	; (8006134 <Appli_BleSetNumberOfElementsCb+0x54>)
 80060fe:	f023 fbb1 	bl	8029864 <puts>
    return BLEMesh_GetNumberOfElements();
 8006102:	f016 fff1 	bl	801d0e8 <BLEMesh_GetNumberOfElements>
 8006106:	4603      	mov	r3, r0
 8006108:	e00e      	b.n	8006128 <Appli_BleSetNumberOfElementsCb+0x48>
  }
  
  else if(NumberOfElements == 0)
 800610a:	4b08      	ldr	r3, [pc, #32]	; (800612c <Appli_BleSetNumberOfElementsCb+0x4c>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d108      	bne.n	8006124 <Appli_BleSetNumberOfElementsCb+0x44>
  {
    TRACE_M(TF_MISC,"Number Of Elements must be 1 or greater than 1!\r\n"); 
 8006112:	2100      	movs	r1, #0
 8006114:	4806      	ldr	r0, [pc, #24]	; (8006130 <Appli_BleSetNumberOfElementsCb+0x50>)
 8006116:	f007 fa37 	bl	800d588 <TraceHeader>
 800611a:	4807      	ldr	r0, [pc, #28]	; (8006138 <Appli_BleSetNumberOfElementsCb+0x58>)
 800611c:	f023 fba2 	bl	8029864 <puts>
    return 1;
 8006120:	2301      	movs	r3, #1
 8006122:	e001      	b.n	8006128 <Appli_BleSetNumberOfElementsCb+0x48>
  }
  
  else
  {
    return NumberOfElements;
 8006124:	4b01      	ldr	r3, [pc, #4]	; (800612c <Appli_BleSetNumberOfElementsCb+0x4c>)
 8006126:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006128:	4618      	mov	r0, r3
 800612a:	bd80      	pop	{r7, pc}
 800612c:	2000007f 	.word	0x2000007f
 8006130:	08032b88 	.word	0x08032b88
 8006134:	0802e864 	.word	0x0802e864
 8006138:	0802e8b4 	.word	0x0802e8b4

0800613c <Appli_BleAttentionTimerCb>:
* @brief  Sets the Attention Timer Callback function
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleAttentionTimerCb(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
/* avoid printf, if low power feature is supported */  
#if (LOW_POWER_FEATURE == 0)
  TRACE_M(TF_MISC, " \r\n");
 8006140:	2100      	movs	r1, #0
 8006142:	4804      	ldr	r0, [pc, #16]	; (8006154 <Appli_BleAttentionTimerCb+0x18>)
 8006144:	f007 fa20 	bl	800d588 <TraceHeader>
 8006148:	4803      	ldr	r0, [pc, #12]	; (8006158 <Appli_BleAttentionTimerCb+0x1c>)
 800614a:	f023 fb8b 	bl	8029864 <puts>
#endif /* LOW_POWER_FEATURE == 0 */
  return MOBLE_RESULT_SUCCESS;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	bd80      	pop	{r7, pc}
 8006154:	08032ba8 	.word	0x08032ba8
 8006158:	0802e8e8 	.word	0x0802e8e8

0800615c <Appli_BleOutputOOBAuthCb>:
* @param  MOBLEUINT8* output_oob
* @param  MOBLEUINT8 size
* @retval void
*/ 
void Appli_BleOutputOOBAuthCb(MOBLEUINT8* output_oob, MOBLEUINT8 size)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
        ooBData |= (output_oob[i] << 8*i);
    }
    OutputOobData = ooBData;
    TRACE_M(TF_PROVISION,"Output OOB information for provisioner: %ld\n\r", ooBData);
  #endif
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <Appli_BleInputOOBAuthCb>:
* @brief  Call back function to provide Input OOB information
* @param  MOBLEUINT8 size
* @retval MOBLEUINT8*  
*/ 
MOBLEUINT8* Appli_BleInputOOBAuthCb(MOBLEUINT8 size)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	71fb      	strb	r3, [r7, #7]
  
  inputOOBDataReady = 0;
  return InputOobData; 
#endif
#else
  return NULL;
 800617e:	2300      	movs	r3, #0
#endif
}
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <Appli_BleDisableFilterCb>:
* @brief  Application BLE Disable Filter 
* @param  none
* @retval Status is replied
*/
MOBLEUINT8 Appli_BleDisableFilterCb(void)
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
    return DisableFilter;
 8006190:	4b03      	ldr	r3, [pc, #12]	; (80061a0 <Appli_BleDisableFilterCb+0x14>)
 8006192:	781b      	ldrb	r3, [r3, #0]
}
 8006194:	4618      	mov	r0, r3
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	20004436 	.word	0x20004436

080061a4 <Appli_CheckForUnprovision>:
* @brief  Checks and do Manual Unprovision of board  
* @param  void
* @retval void
*/ 
void Appli_CheckForUnprovision(void)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
  /* Checks if the User button is pressed or not at the startup */
  if (BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED)
 80061aa:	2000      	movs	r0, #0
 80061ac:	f001 fd68 	bl	8007c80 <BSP_PB_GetState>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d153      	bne.n	800625e <Appli_CheckForUnprovision+0xba>
  {
    BSP_LED_On(LED_BLUE);
 80061b6:	2000      	movs	r0, #0
 80061b8:	f001 fcbe 	bl	8007b38 <BSP_LED_On>
    tClockTime t = Clock_Time();
 80061bc:	f001 fe5e 	bl	8007e7c <HAL_GetTick>
 80061c0:	6038      	str	r0, [r7, #0]
    int interrupted = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	607b      	str	r3, [r7, #4]
    
    /*Wait to check if user is pressing the button persistently*/
    while ((Clock_Time() - t) < MANUAL_UNPROVISION_TIMER)
 80061c6:	e008      	b.n	80061da <Appli_CheckForUnprovision+0x36>
    {
      if (BSP_PB_GetState(BUTTON_SW1) != BUTTON_PRESSED)
 80061c8:	2000      	movs	r0, #0
 80061ca:	f001 fd59 	bl	8007c80 <BSP_PB_GetState>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <Appli_CheckForUnprovision+0x36>
      {
        interrupted = 1;
 80061d4:	2301      	movs	r3, #1
 80061d6:	607b      	str	r3, [r7, #4]
        break;
 80061d8:	e008      	b.n	80061ec <Appli_CheckForUnprovision+0x48>
    while ((Clock_Time() - t) < MANUAL_UNPROVISION_TIMER)
 80061da:	f001 fe4f 	bl	8007e7c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d9ed      	bls.n	80061c8 <Appli_CheckForUnprovision+0x24>
      }
    }
    /* Unprovision, show that unprovisioning is completed, and 
    wait until user releases button*/
    if (!interrupted)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d132      	bne.n	8006258 <Appli_CheckForUnprovision+0xb4>
    {
      /* No GATT connection */
      BLEMesh_StopAdvScan();
 80061f2:	f019 f9c2 	bl	801f57a <BLEMesh_StopAdvScan>
      HAL_Delay(10);
 80061f6:	200a      	movs	r0, #10
 80061f8:	f7fb fb83 	bl	8001902 <HAL_Delay>

      PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 80061fc:	4b23      	ldr	r3, [pc, #140]	; (800628c <Appli_CheckForUnprovision+0xe8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2104      	movs	r1, #4
 8006202:	4618      	mov	r0, r3
 8006204:	f001 f946 	bl	8007494 <PalNvmErase>
      TRACE_M(TF_PROVISION,"NVM erased\r\n");      
 8006208:	2100      	movs	r1, #0
 800620a:	4821      	ldr	r0, [pc, #132]	; (8006290 <Appli_CheckForUnprovision+0xec>)
 800620c:	f007 f9bc 	bl	800d588 <TraceHeader>
 8006210:	4820      	ldr	r0, [pc, #128]	; (8006294 <Appli_CheckForUnprovision+0xf0>)
 8006212:	f023 fb27 	bl	8029864 <puts>
      
      BLEMesh_Unprovision();
 8006216:	f01a fef1 	bl	8020ffc <BLEMesh_Unprovision>
      AppliNvm_ClearModelState();     
 800621a:	f000 fb24 	bl	8006866 <AppliNvm_ClearModelState>
      TRACE_M(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 800621e:	2100      	movs	r1, #0
 8006220:	481b      	ldr	r0, [pc, #108]	; (8006290 <Appli_CheckForUnprovision+0xec>)
 8006222:	f007 f9b1 	bl	800d588 <TraceHeader>
 8006226:	481c      	ldr	r0, [pc, #112]	; (8006298 <Appli_CheckForUnprovision+0xf4>)
 8006228:	f023 fb1c 	bl	8029864 <puts>
      t = Clock_Time();
 800622c:	f001 fe26 	bl	8007e7c <HAL_GetTick>
 8006230:	6038      	str	r0, [r7, #0]
      while ((Clock_Time() - t) < FLASH_ERASE_TIME)
 8006232:	e001      	b.n	8006238 <Appli_CheckForUnprovision+0x94>
      {
        BLEMesh_Process();
 8006234:	f020 f976 	bl	8026524 <BLEMesh_Process>
      while ((Clock_Time() - t) < FLASH_ERASE_TIME)
 8006238:	f001 fe20 	bl	8007e7c <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b63      	cmp	r3, #99	; 0x63
 8006244:	d9f6      	bls.n	8006234 <Appli_CheckForUnprovision+0x90>
      }
      
      while (BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED)
 8006246:	e001      	b.n	800624c <Appli_CheckForUnprovision+0xa8>
      {
        Appli_LedBlink();
 8006248:	f7ff fe86 	bl	8005f58 <Appli_LedBlink>
      while (BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED)
 800624c:	2000      	movs	r0, #0
 800624e:	f001 fd17 	bl	8007c80 <BSP_PB_GetState>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f7      	beq.n	8006248 <Appli_CheckForUnprovision+0xa4>
      }
    }
    BSP_LED_Off(LED_BLUE);
 8006258:	2000      	movs	r0, #0
 800625a:	f001 fc87 	bl	8007b6c <BSP_LED_Off>
  }
  
  /* Register the task for all MESH dedicated processes */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_REQ_ID, UTIL_SEQ_RFU, Mesh_Task );
 800625e:	4a0f      	ldr	r2, [pc, #60]	; (800629c <Appli_CheckForUnprovision+0xf8>)
 8006260:	2100      	movs	r1, #0
 8006262:	2002      	movs	r0, #2
 8006264:	f010 fcae 	bl	8016bc4 <UTIL_SEQ_RegTask>
  /* Set the task in the scheduler for the next scheduling */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);  
 8006268:	2100      	movs	r1, #0
 800626a:	2002      	movs	r0, #2
 800626c:	f010 fccc 	bl	8016c08 <UTIL_SEQ_SetTask>
#else
  BleProcessInit = 1;
#endif
  
  /* Register the task for all MESH dedicated processes */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_APPLI_REQ_ID, UTIL_SEQ_RFU, Appli_Task );
 8006270:	4a0b      	ldr	r2, [pc, #44]	; (80062a0 <Appli_CheckForUnprovision+0xfc>)
 8006272:	2100      	movs	r1, #0
 8006274:	2020      	movs	r0, #32
 8006276:	f010 fca5 	bl	8016bc4 <UTIL_SEQ_RegTask>
  /* Set the task in the scheduler for the next scheduling */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_APPLI_REQ_ID, CFG_SCH_PRIO_0);
 800627a:	2100      	movs	r1, #0
 800627c:	2020      	movs	r0, #32
 800627e:	f010 fcc3 	bl	8016c08 <UTIL_SEQ_SetTask>
#if (APPLI_OPTIM == 1)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &appliTaskTimer_Id, hw_ts_Repeated, AppliMeshTask);
  
  HW_TS_Start(appliTaskTimer_Id, APPLI_MESH_TIMER_INTERVAL);
#endif
}
 8006282:	bf00      	nop
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20004450 	.word	0x20004450
 8006290:	08032bc4 	.word	0x08032bc4
 8006294:	0802e7f0 	.word	0x0802e7f0
 8006298:	0802e7fc 	.word	0x0802e7fc
 800629c:	08005eb1 	.word	0x08005eb1
 80062a0:	08005f21 	.word	0x08005f21

080062a4 <Appli_Unprovision>:

void Appli_Unprovision(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  if(!ProxyFlag)
 80062a8:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <Appli_Unprovision+0x4c>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d11c      	bne.n	80062ea <Appli_Unprovision+0x46>
  {
    /* No GATT connection */
    BLEMesh_StopAdvScan();
 80062b0:	f019 f963 	bl	801f57a <BLEMesh_StopAdvScan>
    HAL_Delay(10);
 80062b4:	200a      	movs	r0, #10
 80062b6:	f7fb fb24 	bl	8001902 <HAL_Delay>
      
    PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 80062ba:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <Appli_Unprovision+0x50>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2104      	movs	r1, #4
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 f8e7 	bl	8007494 <PalNvmErase>
    TRACE_M(TF_PROVISION,"NVM erased\r\n");      
 80062c6:	2100      	movs	r1, #0
 80062c8:	480b      	ldr	r0, [pc, #44]	; (80062f8 <Appli_Unprovision+0x54>)
 80062ca:	f007 f95d 	bl	800d588 <TraceHeader>
 80062ce:	480b      	ldr	r0, [pc, #44]	; (80062fc <Appli_Unprovision+0x58>)
 80062d0:	f023 fac8 	bl	8029864 <puts>
  
    TRACE_M(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 80062d4:	2100      	movs	r1, #0
 80062d6:	4808      	ldr	r0, [pc, #32]	; (80062f8 <Appli_Unprovision+0x54>)
 80062d8:	f007 f956 	bl	800d588 <TraceHeader>
 80062dc:	4808      	ldr	r0, [pc, #32]	; (8006300 <Appli_Unprovision+0x5c>)
 80062de:	f023 fac1 	bl	8029864 <puts>

    BLEMesh_Process();
 80062e2:	f020 f91f 	bl	8026524 <BLEMesh_Process>
    NVIC_SystemReset();
 80062e6:	f7ff fd6f 	bl	8005dc8 <__NVIC_SystemReset>
  }
}
 80062ea:	bf00      	nop
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20004433 	.word	0x20004433
 80062f4:	20004450 	.word	0x20004450
 80062f8:	08032be0 	.word	0x08032be0
 80062fc:	0802e7f0 	.word	0x0802e7f0
 8006300:	0802e7fc 	.word	0x0802e7fc

08006304 <Appli_CheckBdMacAddr>:
* @brief  Checks and updates Mac address to generate MAC Address
* @param  void
* @retval MOBLEUINT8 sum return the sum calculated mac
*/ 
int Appli_CheckBdMacAddr(void)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
  MOBLEUINT8 sum = 239;
 800630a:	23ef      	movs	r3, #239	; 0xef
 800630c:	73fb      	strb	r3, [r7, #15]
  MOBLEUINT8 result = 0;
 800630e:	2300      	movs	r3, #0
 8006310:	73bb      	strb	r3, [r7, #14]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006312:	2300      	movs	r3, #0
 8006314:	71fb      	strb	r3, [r7, #7]
  memcpy(bdaddr, (MOBLEUINT8 *)CFG_ADV_BD_ADDRESS, 7);
  bdaddr[7] = (EXTERNAL_MAC_ADDR_MGMT | EXTERNAL_MAC_TYPE);
#endif
  
#ifdef INTERNAL_UNIQUE_NUMBER_MAC
  status = aci_hal_read_config_data(CONFIG_DATA_PUBADDR_OFFSET, 
 8006316:	4a1e      	ldr	r2, [pc, #120]	; (8006390 <Appli_CheckBdMacAddr+0x8c>)
 8006318:	491e      	ldr	r1, [pc, #120]	; (8006394 <Appli_CheckBdMacAddr+0x90>)
 800631a:	2000      	movs	r0, #0
 800631c:	f00f f834 	bl	8015388 <aci_hal_read_config_data>
 8006320:	4603      	mov	r3, r0
 8006322:	71fb      	strb	r3, [r7, #7]
                                    &bdaddr[7],
                                    bdaddr); 
  if(status != BLE_STATUS_SUCCESS) 
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <Appli_CheckBdMacAddr+0x38>
  {
    TRACE_M(TF_PROVISION, "Failed to read Public Address %d", status);
 800632a:	2100      	movs	r1, #0
 800632c:	481a      	ldr	r0, [pc, #104]	; (8006398 <Appli_CheckBdMacAddr+0x94>)
 800632e:	f007 f92b 	bl	800d588 <TraceHeader>
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	4619      	mov	r1, r3
 8006336:	4819      	ldr	r0, [pc, #100]	; (800639c <Appli_CheckBdMacAddr+0x98>)
 8006338:	f023 fa0e 	bl	8029758 <iprintf>
  }

  Appli_GetMACfromUniqueNumber();
 800633c:	f000 f830 	bl	80063a0 <Appli_GetMACfromUniqueNumber>
  bdaddr[7] = INTERNAL_UNIQUE_NUMBER_MAC;
 8006340:	4b13      	ldr	r3, [pc, #76]	; (8006390 <Appli_CheckBdMacAddr+0x8c>)
 8006342:	2203      	movs	r2, #3
 8006344:	71da      	strb	r2, [r3, #7]
#endif

  for (int i = 0; i < 6; ++i)
 8006346:	2300      	movs	r3, #0
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	e00b      	b.n	8006364 <Appli_CheckBdMacAddr+0x60>
  {
    sum = (sum << 1) + bdaddr[i];
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	b2da      	uxtb	r2, r3
 8006352:	490f      	ldr	r1, [pc, #60]	; (8006390 <Appli_CheckBdMacAddr+0x8c>)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	440b      	add	r3, r1
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	4413      	add	r3, r2
 800635c:	73fb      	strb	r3, [r7, #15]
  for (int i = 0; i < 6; ++i)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	3301      	adds	r3, #1
 8006362:	60bb      	str	r3, [r7, #8]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b05      	cmp	r3, #5
 8006368:	ddf0      	ble.n	800634c <Appli_CheckBdMacAddr+0x48>
  }

  if (sum == bdaddr[6])
 800636a:	4b09      	ldr	r3, [pc, #36]	; (8006390 <Appli_CheckBdMacAddr+0x8c>)
 800636c:	799b      	ldrb	r3, [r3, #6]
 800636e:	7bfa      	ldrb	r2, [r7, #15]
 8006370:	429a      	cmp	r2, r3
 8006372:	d101      	bne.n	8006378 <Appli_CheckBdMacAddr+0x74>
  {
    result = 1;
 8006374:	2301      	movs	r3, #1
 8006376:	73bb      	strb	r3, [r7, #14]
  }
  
#if defined(EXTERNAL_MAC_ADDR_MGMT) && defined(EXTERNAL_MAC_IS_PUBLIC_ADDR)
   /* Do nothing for modification of 2 MSb */
#else
  bdaddr[5] |= 0xC0;    /* 2 Msb bits shall be 11b for Static Random Address */
 8006378:	4b05      	ldr	r3, [pc, #20]	; (8006390 <Appli_CheckBdMacAddr+0x8c>)
 800637a:	795b      	ldrb	r3, [r3, #5]
 800637c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006380:	b2da      	uxtb	r2, r3
 8006382:	4b03      	ldr	r3, [pc, #12]	; (8006390 <Appli_CheckBdMacAddr+0x8c>)
 8006384:	715a      	strb	r2, [r3, #5]
                      /* Do nothing for bdaddr, just pass the identification */
  result = 1;         /* This will overwrite the above for loop result, 
                          which is redundant for this case */
#endif  
  
  return result;
 8006386:	7bbb      	ldrb	r3, [r7, #14]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	20004440 	.word	0x20004440
 8006394:	20004447 	.word	0x20004447
 8006398:	08032bf4 	.word	0x08032bf4
 800639c:	0802e8ec 	.word	0x0802e8ec

080063a0 <Appli_GetMACfromUniqueNumber>:
* @param  void
* @retval void
*/
#ifdef INTERNAL_UNIQUE_NUMBER_MAC
static void Appli_GetMACfromUniqueNumber(void)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
  DEVICE_ID_REG1 could be identical for same batch samples, 
  4 bytes have been taken from DEVICE_ID_REG2
  */
  
  uint8_t i;
  uint8_t sum = 239;
 80063a6:	23ef      	movs	r3, #239	; 0xef
 80063a8:	71bb      	strb	r3, [r7, #6]
  /* Static Device Address: 
  The two most significant bits 
  of the address shall be equal to 1, 
  hence ORed with 0xC0)*/
  
  for (i = 0; i < 6; ++i)
 80063aa:	2300      	movs	r3, #0
 80063ac:	71fb      	strb	r3, [r7, #7]
 80063ae:	e00a      	b.n	80063c6 <Appli_GetMACfromUniqueNumber+0x26>
  {
    sum = (sum << 1) + bdaddr[i];
 80063b0:	79bb      	ldrb	r3, [r7, #6]
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	4909      	ldr	r1, [pc, #36]	; (80063e0 <Appli_GetMACfromUniqueNumber+0x40>)
 80063ba:	5ccb      	ldrb	r3, [r1, r3]
 80063bc:	4413      	add	r3, r2
 80063be:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 6; ++i)
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	3301      	adds	r3, #1
 80063c4:	71fb      	strb	r3, [r7, #7]
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	2b05      	cmp	r3, #5
 80063ca:	d9f1      	bls.n	80063b0 <Appli_GetMACfromUniqueNumber+0x10>
  }
  bdaddr[6] = sum;
 80063cc:	4a04      	ldr	r2, [pc, #16]	; (80063e0 <Appli_GetMACfromUniqueNumber+0x40>)
 80063ce:	79bb      	ldrb	r3, [r7, #6]
 80063d0:	7193      	strb	r3, [r2, #6]
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20004440 	.word	0x20004440

080063e4 <BLEMesh_UnprovisionCallback>:
* @brief  callback for unprovision the node by provisioner.
* @param  status reserved for future 
* @retval void
*/
void BLEMesh_UnprovisionCallback(MOBLEUINT8 reason)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	71fb      	strb	r3, [r7, #7]
  ProvisionFlag = 0; 
 80063ee:	4b12      	ldr	r3, [pc, #72]	; (8006438 <BLEMesh_UnprovisionCallback+0x54>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
  
  TRACE_I(TF_PROVISION,"Device is unprovisioned by provisioner \n\r");
 80063f4:	4811      	ldr	r0, [pc, #68]	; (800643c <BLEMesh_UnprovisionCallback+0x58>)
 80063f6:	f023 f9af 	bl	8029758 <iprintf>
#if PB_ADV_SUPPORTED
  BLEMesh_SetUnprovisionedDevBeaconInterval(PBADV_UNPROV_DEV_BEACON_INTERVAL);
 80063fa:	2064      	movs	r0, #100	; 0x64
 80063fc:	f016 feb0 	bl	801d160 <BLEMesh_SetUnprovisionedDevBeaconInterval>
#endif
  BLEMesh_StopAdvScan();
 8006400:	f019 f8bb 	bl	801f57a <BLEMesh_StopAdvScan>
  HAL_Delay(10);
 8006404:	200a      	movs	r0, #10
 8006406:	f7fb fa7c 	bl	8001902 <HAL_Delay>
    
  PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 800640a:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <BLEMesh_UnprovisionCallback+0x5c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2104      	movs	r1, #4
 8006410:	4618      	mov	r0, r3
 8006412:	f001 f83f 	bl	8007494 <PalNvmErase>
  TRACE_M(TF_PROVISION,"NVM erased\r\n");      
 8006416:	2100      	movs	r1, #0
 8006418:	480a      	ldr	r0, [pc, #40]	; (8006444 <BLEMesh_UnprovisionCallback+0x60>)
 800641a:	f007 f8b5 	bl	800d588 <TraceHeader>
 800641e:	480a      	ldr	r0, [pc, #40]	; (8006448 <BLEMesh_UnprovisionCallback+0x64>)
 8006420:	f023 fa20 	bl	8029864 <puts>
  
  TRACE_M(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 8006424:	2100      	movs	r1, #0
 8006426:	4807      	ldr	r0, [pc, #28]	; (8006444 <BLEMesh_UnprovisionCallback+0x60>)
 8006428:	f007 f8ae 	bl	800d588 <TraceHeader>
 800642c:	4807      	ldr	r0, [pc, #28]	; (800644c <BLEMesh_UnprovisionCallback+0x68>)
 800642e:	f023 fa19 	bl	8029864 <puts>

  NVIC_SystemReset();
 8006432:	f7ff fcc9 	bl	8005dc8 <__NVIC_SystemReset>
 8006436:	bf00      	nop
 8006438:	20004434 	.word	0x20004434
 800643c:	0802e910 	.word	0x0802e910
 8006440:	20004450 	.word	0x20004450
 8006444:	08032c0c 	.word	0x08032c0c
 8006448:	0802e7f0 	.word	0x0802e7f0
 800644c:	0802e7fc 	.word	0x0802e7fc

08006450 <BLEMesh_PbAdvLinkOpenCb>:
* @brief  Call back function called when PB-ADV link Opened  
* @param  none
* @retval none
*/ 
void BLEMesh_PbAdvLinkOpenCb(void)
{ 
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  ProvisionFlag = 0;
 8006454:	4b07      	ldr	r3, [pc, #28]	; (8006474 <BLEMesh_PbAdvLinkOpenCb+0x24>)
 8006456:	2200      	movs	r2, #0
 8006458:	701a      	strb	r2, [r3, #0]
  TRACE_M(TF_PROVISION,"PB-ADV Link opened successfully \n\r");    
 800645a:	2100      	movs	r1, #0
 800645c:	4806      	ldr	r0, [pc, #24]	; (8006478 <BLEMesh_PbAdvLinkOpenCb+0x28>)
 800645e:	f007 f893 	bl	800d588 <TraceHeader>
 8006462:	4806      	ldr	r0, [pc, #24]	; (800647c <BLEMesh_PbAdvLinkOpenCb+0x2c>)
 8006464:	f023 f978 	bl	8029758 <iprintf>
  /* Turn ON Red LED*/
#if LOW_POWER_FEATURE
  /* do nothing */
#else
  BSP_LED_On(LED_RED);
 8006468:	2002      	movs	r0, #2
 800646a:	f001 fb65 	bl	8007b38 <BSP_LED_On>
#endif
}
 800646e:	bf00      	nop
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20004434 	.word	0x20004434
 8006478:	08032c28 	.word	0x08032c28
 800647c:	0802e970 	.word	0x0802e970

08006480 <BLEMesh_ProvisionCallback>:
* @brief  callback for provision the node by provisioner.
* @param  void
* @retval void
*/
void BLEMesh_ProvisionCallback(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  ProvisionFlag = 1;
 8006484:	4b03      	ldr	r3, [pc, #12]	; (8006494 <BLEMesh_ProvisionCallback+0x14>)
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_AUTH_TYPE_OUTPUT_OOB
  PrvngInProcess = 0;
#endif
  TRACE_I(TF_PROVISION,"Device is provisioned by provisioner \r\n");
 800648a:	4803      	ldr	r0, [pc, #12]	; (8006498 <BLEMesh_ProvisionCallback+0x18>)
 800648c:	f023 f9ea 	bl	8029864 <puts>
  
#if (LOW_POWER_FEATURE == 1)
  /* Call API LPN_API_TIMER_INTERVAL after LPN provisioning */
//  HW_TS_Start(lowPowerNodeApiTimer_Id, LPN_API_TIMER_INTERVAL);
#endif
}
 8006490:	bf00      	nop
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20004434 	.word	0x20004434
 8006498:	0802e9b8 	.word	0x0802e9b8

0800649c <BLEMesh_ConfigurationCallback>:
* @brief  callback for configuration the node by provisioner.
* @param  void
* @retval void
*/
void BLEMesh_ConfigurationCallback(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
  {
    HW_TS_Start(lowPowerNodeApiTimer_Id, LPN_API_TIMER_INTERVAL);
    LPN_scan_enabled = MOBLE_TRUE;
  }
#endif
}
 80064a0:	bf00      	nop
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <BLEMesh_FnFriendshipEstablishedCallback>:
void BLEMesh_FnFriendshipEstablishedCallback(MOBLE_ADDRESS lpnAddress,
                                             MOBLEUINT8 lpnReceiveDelay,
                                             MOBLEUINT32 lpnPollTimeout,
                                             MOBLEUINT8 lpnNumElements,
                                             MOBLE_ADDRESS lpnPrevFriendAddress)
{ 
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	603a      	str	r2, [r7, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	4603      	mov	r3, r0
 80064b8:	80fb      	strh	r3, [r7, #6]
 80064ba:	460b      	mov	r3, r1
 80064bc:	717b      	strb	r3, [r7, #5]
 80064be:	4613      	mov	r3, r2
 80064c0:	713b      	strb	r3, [r7, #4]
  TRACE_M(TF_LPN_FRND,"Friendship established. Low power node address 0x%.4X \r\n", lpnAddress);
 80064c2:	2100      	movs	r1, #0
 80064c4:	481a      	ldr	r0, [pc, #104]	; (8006530 <BLEMesh_FnFriendshipEstablishedCallback+0x84>)
 80064c6:	f007 f85f 	bl	800d588 <TraceHeader>
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	4619      	mov	r1, r3
 80064ce:	4819      	ldr	r0, [pc, #100]	; (8006534 <BLEMesh_FnFriendshipEstablishedCallback+0x88>)
 80064d0:	f023 f942 	bl	8029758 <iprintf>
  TRACE_M(TF_LPN_FRND,"Low power node receive delay %dms \r\n", lpnReceiveDelay);
 80064d4:	2100      	movs	r1, #0
 80064d6:	4816      	ldr	r0, [pc, #88]	; (8006530 <BLEMesh_FnFriendshipEstablishedCallback+0x84>)
 80064d8:	f007 f856 	bl	800d588 <TraceHeader>
 80064dc:	797b      	ldrb	r3, [r7, #5]
 80064de:	4619      	mov	r1, r3
 80064e0:	4815      	ldr	r0, [pc, #84]	; (8006538 <BLEMesh_FnFriendshipEstablishedCallback+0x8c>)
 80064e2:	f023 f939 	bl	8029758 <iprintf>
  TRACE_M(TF_LPN_FRND,"Low power node poll timeout %ldms \r\n", lpnPollTimeout*100);
 80064e6:	2100      	movs	r1, #0
 80064e8:	4811      	ldr	r0, [pc, #68]	; (8006530 <BLEMesh_FnFriendshipEstablishedCallback+0x84>)
 80064ea:	f007 f84d 	bl	800d588 <TraceHeader>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2264      	movs	r2, #100	; 0x64
 80064f2:	fb02 f303 	mul.w	r3, r2, r3
 80064f6:	4619      	mov	r1, r3
 80064f8:	4810      	ldr	r0, [pc, #64]	; (800653c <BLEMesh_FnFriendshipEstablishedCallback+0x90>)
 80064fa:	f023 f92d 	bl	8029758 <iprintf>
  TRACE_M(TF_LPN_FRND,"Low power node number of elements %d \r\n", lpnNumElements);
 80064fe:	2100      	movs	r1, #0
 8006500:	480b      	ldr	r0, [pc, #44]	; (8006530 <BLEMesh_FnFriendshipEstablishedCallback+0x84>)
 8006502:	f007 f841 	bl	800d588 <TraceHeader>
 8006506:	793b      	ldrb	r3, [r7, #4]
 8006508:	4619      	mov	r1, r3
 800650a:	480d      	ldr	r0, [pc, #52]	; (8006540 <BLEMesh_FnFriendshipEstablishedCallback+0x94>)
 800650c:	f023 f924 	bl	8029758 <iprintf>
  if (lpnPrevFriendAddress != MOBLE_ADDRESS_UNASSIGNED)
 8006510:	8a3b      	ldrh	r3, [r7, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d008      	beq.n	8006528 <BLEMesh_FnFriendshipEstablishedCallback+0x7c>
  {
    TRACE_M(TF_LPN_FRND,"Low power node previous friend address 0x%.4X \r\n", lpnPrevFriendAddress);
 8006516:	2100      	movs	r1, #0
 8006518:	4805      	ldr	r0, [pc, #20]	; (8006530 <BLEMesh_FnFriendshipEstablishedCallback+0x84>)
 800651a:	f007 f835 	bl	800d588 <TraceHeader>
 800651e:	8a3b      	ldrh	r3, [r7, #16]
 8006520:	4619      	mov	r1, r3
 8006522:	4808      	ldr	r0, [pc, #32]	; (8006544 <BLEMesh_FnFriendshipEstablishedCallback+0x98>)
 8006524:	f023 f918 	bl	8029758 <iprintf>
  }
}
 8006528:	bf00      	nop
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	08032c40 	.word	0x08032c40
 8006534:	0802e9e0 	.word	0x0802e9e0
 8006538:	0802ea1c 	.word	0x0802ea1c
 800653c:	0802ea44 	.word	0x0802ea44
 8006540:	0802ea6c 	.word	0x0802ea6c
 8006544:	0802ea94 	.word	0x0802ea94

08006548 <BLEMesh_FnFriendshipClearedCallback>:
*         3: friend clear received
* @param  previous friend address of low power node (can be invalid address)
* @retval void
*/
void BLEMesh_FnFriendshipClearedCallback(MOBLEUINT8 reason, MOBLE_ADDRESS lpnAddress)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	4603      	mov	r3, r0
 8006550:	460a      	mov	r2, r1
 8006552:	71fb      	strb	r3, [r7, #7]
 8006554:	4613      	mov	r3, r2
 8006556:	80bb      	strh	r3, [r7, #4]
  TRACE_M(TF_LPN_FRND,"Friendship cleared. Low power node address 0x%.4X \r\n", lpnAddress);
 8006558:	2100      	movs	r1, #0
 800655a:	481b      	ldr	r0, [pc, #108]	; (80065c8 <BLEMesh_FnFriendshipClearedCallback+0x80>)
 800655c:	f007 f814 	bl	800d588 <TraceHeader>
 8006560:	88bb      	ldrh	r3, [r7, #4]
 8006562:	4619      	mov	r1, r3
 8006564:	4819      	ldr	r0, [pc, #100]	; (80065cc <BLEMesh_FnFriendshipClearedCallback+0x84>)
 8006566:	f023 f8f7 	bl	8029758 <iprintf>
  
  switch(reason)
 800656a:	79fb      	ldrb	r3, [r7, #7]
 800656c:	2b03      	cmp	r3, #3
 800656e:	d016      	beq.n	800659e <BLEMesh_FnFriendshipClearedCallback+0x56>
 8006570:	2b03      	cmp	r3, #3
 8006572:	dc1c      	bgt.n	80065ae <BLEMesh_FnFriendshipClearedCallback+0x66>
 8006574:	2b01      	cmp	r3, #1
 8006576:	d002      	beq.n	800657e <BLEMesh_FnFriendshipClearedCallback+0x36>
 8006578:	2b02      	cmp	r3, #2
 800657a:	d008      	beq.n	800658e <BLEMesh_FnFriendshipClearedCallback+0x46>
 800657c:	e017      	b.n	80065ae <BLEMesh_FnFriendshipClearedCallback+0x66>
  {
  case FN_CLEARED_REPEAT_REQUEST: 
    TRACE_M(TF_LPN_FRND,"Reason: New friend request received from existing low power node \r\n");
 800657e:	2100      	movs	r1, #0
 8006580:	4811      	ldr	r0, [pc, #68]	; (80065c8 <BLEMesh_FnFriendshipClearedCallback+0x80>)
 8006582:	f007 f801 	bl	800d588 <TraceHeader>
 8006586:	4812      	ldr	r0, [pc, #72]	; (80065d0 <BLEMesh_FnFriendshipClearedCallback+0x88>)
 8006588:	f023 f96c 	bl	8029864 <puts>
    break;
 800658c:	e017      	b.n	80065be <BLEMesh_FnFriendshipClearedCallback+0x76>
  case FN_CLEARED_POLL_TIMEOUT:
    TRACE_M(TF_LPN_FRND,"Reason: Low power node poll timeout occurred \r\n");
 800658e:	2100      	movs	r1, #0
 8006590:	480d      	ldr	r0, [pc, #52]	; (80065c8 <BLEMesh_FnFriendshipClearedCallback+0x80>)
 8006592:	f006 fff9 	bl	800d588 <TraceHeader>
 8006596:	480f      	ldr	r0, [pc, #60]	; (80065d4 <BLEMesh_FnFriendshipClearedCallback+0x8c>)
 8006598:	f023 f964 	bl	8029864 <puts>
    break;
 800659c:	e00f      	b.n	80065be <BLEMesh_FnFriendshipClearedCallback+0x76>
  case FN_CLEARED_FRIEND_CLEAR:
    TRACE_M(TF_LPN_FRND,"Reason: Friend clear received \r\n");
 800659e:	2100      	movs	r1, #0
 80065a0:	4809      	ldr	r0, [pc, #36]	; (80065c8 <BLEMesh_FnFriendshipClearedCallback+0x80>)
 80065a2:	f006 fff1 	bl	800d588 <TraceHeader>
 80065a6:	480c      	ldr	r0, [pc, #48]	; (80065d8 <BLEMesh_FnFriendshipClearedCallback+0x90>)
 80065a8:	f023 f95c 	bl	8029864 <puts>
    break;
 80065ac:	e007      	b.n	80065be <BLEMesh_FnFriendshipClearedCallback+0x76>
  default:
    TRACE_M(TF_LPN_FRND,"Reason: Invalid \r\n");
 80065ae:	2100      	movs	r1, #0
 80065b0:	4805      	ldr	r0, [pc, #20]	; (80065c8 <BLEMesh_FnFriendshipClearedCallback+0x80>)
 80065b2:	f006 ffe9 	bl	800d588 <TraceHeader>
 80065b6:	4809      	ldr	r0, [pc, #36]	; (80065dc <BLEMesh_FnFriendshipClearedCallback+0x94>)
 80065b8:	f023 f954 	bl	8029864 <puts>
    break;
 80065bc:	bf00      	nop
  }
}
 80065be:	bf00      	nop
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	08032c68 	.word	0x08032c68
 80065cc:	0802eac8 	.word	0x0802eac8
 80065d0:	0802eb00 	.word	0x0802eb00
 80065d4:	0802eb44 	.word	0x0802eb44
 80065d8:	0802eb74 	.word	0x0802eb74
 80065dc:	0802eb94 	.word	0x0802eb94

080065e0 <BLEMesh_NeighborAppearedCallback>:
void BLEMesh_NeighborAppearedCallback(const MOBLEUINT8* bdAddr,
                                          MOBLEBOOL provisioned,
                                          const MOBLEUINT8* uuid,
                                          MOBLE_ADDRESS networkAddress,
                                          MOBLEINT8 rssi)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	607a      	str	r2, [r7, #4]
 80065ea:	461a      	mov	r2, r3
 80065ec:	460b      	mov	r3, r1
 80065ee:	72fb      	strb	r3, [r7, #11]
 80065f0:	4613      	mov	r3, r2
 80065f2:	813b      	strh	r3, [r7, #8]
  TRACE_M(TF_NEIGHBOUR,"New neighbor appeared. Neighbor MAC address:");
  
  for (MOBLEUINT8 count=0 ; count<6; count++)
 80065f4:	2300      	movs	r3, #0
 80065f6:	75fb      	strb	r3, [r7, #23]
 80065f8:	e002      	b.n	8006600 <BLEMesh_NeighborAppearedCallback+0x20>
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	3301      	adds	r3, #1
 80065fe:	75fb      	strb	r3, [r7, #23]
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	2b05      	cmp	r3, #5
 8006604:	d9f9      	bls.n	80065fa <BLEMesh_NeighborAppearedCallback+0x1a>
  else
  {
    TRACE_M(TF_NEIGHBOUR,"Network address not available\n\r");
  }

  for (MOBLEUINT8 i=0; i<16; i++)
 8006606:	2300      	movs	r3, #0
 8006608:	75bb      	strb	r3, [r7, #22]
 800660a:	e013      	b.n	8006634 <BLEMesh_NeighborAppearedCallback+0x54>
  {
    if (uuid[i] == 0x00)
 800660c:	7dbb      	ldrb	r3, [r7, #22]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	4413      	add	r3, r2
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d103      	bne.n	8006620 <BLEMesh_NeighborAppearedCallback+0x40>
  for (MOBLEUINT8 i=0; i<16; i++)
 8006618:	7dbb      	ldrb	r3, [r7, #22]
 800661a:	3301      	adds	r3, #1
 800661c:	75bb      	strb	r3, [r7, #22]
 800661e:	e009      	b.n	8006634 <BLEMesh_NeighborAppearedCallback+0x54>
    }
    else
    {
      TRACE_M(TF_NEIGHBOUR,"UUID: ");
      
      for (MOBLEUINT8 count=0 ; count<16; count++)
 8006620:	2300      	movs	r3, #0
 8006622:	757b      	strb	r3, [r7, #21]
 8006624:	e002      	b.n	800662c <BLEMesh_NeighborAppearedCallback+0x4c>
 8006626:	7d7b      	ldrb	r3, [r7, #21]
 8006628:	3301      	adds	r3, #1
 800662a:	757b      	strb	r3, [r7, #21]
 800662c:	7d7b      	ldrb	r3, [r7, #21]
 800662e:	2b0f      	cmp	r3, #15
 8006630:	d9f9      	bls.n	8006626 <BLEMesh_NeighborAppearedCallback+0x46>
      {
        TRACE_M(TF_NEIGHBOUR,"%.2x ", uuid[count]);
      }
      
      break;
 8006632:	e003      	b.n	800663c <BLEMesh_NeighborAppearedCallback+0x5c>
  for (MOBLEUINT8 i=0; i<16; i++)
 8006634:	7dbb      	ldrb	r3, [r7, #22]
 8006636:	2b0f      	cmp	r3, #15
 8006638:	d9e8      	bls.n	800660c <BLEMesh_NeighborAppearedCallback+0x2c>
    }
  }
  
  TRACE_M(TF_NEIGHBOUR,"\n\r");
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	371c      	adds	r7, #28
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <BLEMesh_NeighborRefreshedCallback>:
void BLEMesh_NeighborRefreshedCallback(const MOBLEUINT8* bdAddr,
                                          MOBLEBOOL provisioned,
                                          const MOBLEUINT8* uuid,
                                          MOBLE_ADDRESS networkAddress,
                                          MOBLEINT8 rssi)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	607a      	str	r2, [r7, #4]
 8006652:	461a      	mov	r2, r3
 8006654:	460b      	mov	r3, r1
 8006656:	72fb      	strb	r3, [r7, #11]
 8006658:	4613      	mov	r3, r2
 800665a:	813b      	strh	r3, [r7, #8]
  TRACE_M(TF_NEIGHBOUR,"Existing neighbor refreshed. Neighbor MAC address:");
  
  for (MOBLEUINT8 count=0 ; count<6; count++)
 800665c:	2300      	movs	r3, #0
 800665e:	75fb      	strb	r3, [r7, #23]
 8006660:	e002      	b.n	8006668 <BLEMesh_NeighborRefreshedCallback+0x20>
 8006662:	7dfb      	ldrb	r3, [r7, #23]
 8006664:	3301      	adds	r3, #1
 8006666:	75fb      	strb	r3, [r7, #23]
 8006668:	7dfb      	ldrb	r3, [r7, #23]
 800666a:	2b05      	cmp	r3, #5
 800666c:	d9f9      	bls.n	8006662 <BLEMesh_NeighborRefreshedCallback+0x1a>
  else
  {
    TRACE_M(TF_NEIGHBOUR,"Network address not available\n\r");
  }
  
  for (MOBLEUINT8 i=0; i<16; i++)
 800666e:	2300      	movs	r3, #0
 8006670:	75bb      	strb	r3, [r7, #22]
 8006672:	e013      	b.n	800669c <BLEMesh_NeighborRefreshedCallback+0x54>
  {
    if (uuid[i] == 0x00)
 8006674:	7dbb      	ldrb	r3, [r7, #22]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	4413      	add	r3, r2
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d103      	bne.n	8006688 <BLEMesh_NeighborRefreshedCallback+0x40>
  for (MOBLEUINT8 i=0; i<16; i++)
 8006680:	7dbb      	ldrb	r3, [r7, #22]
 8006682:	3301      	adds	r3, #1
 8006684:	75bb      	strb	r3, [r7, #22]
 8006686:	e009      	b.n	800669c <BLEMesh_NeighborRefreshedCallback+0x54>
    }
    else
    {
      TRACE_M(TF_NEIGHBOUR,"UUID: ");
      
      for (MOBLEUINT8 count=0 ; count<16; count++)
 8006688:	2300      	movs	r3, #0
 800668a:	757b      	strb	r3, [r7, #21]
 800668c:	e002      	b.n	8006694 <BLEMesh_NeighborRefreshedCallback+0x4c>
 800668e:	7d7b      	ldrb	r3, [r7, #21]
 8006690:	3301      	adds	r3, #1
 8006692:	757b      	strb	r3, [r7, #21]
 8006694:	7d7b      	ldrb	r3, [r7, #21]
 8006696:	2b0f      	cmp	r3, #15
 8006698:	d9f9      	bls.n	800668e <BLEMesh_NeighborRefreshedCallback+0x46>
      {
        TRACE_M(TF_NEIGHBOUR,"%.2x ", uuid[count]);
      }
      
      break;
 800669a:	e003      	b.n	80066a4 <BLEMesh_NeighborRefreshedCallback+0x5c>
  for (MOBLEUINT8 i=0; i<16; i++)
 800669c:	7dbb      	ldrb	r3, [r7, #22]
 800669e:	2b0f      	cmp	r3, #15
 80066a0:	d9e8      	bls.n	8006674 <BLEMesh_NeighborRefreshedCallback+0x2c>
    }
  }
  
  TRACE_M(TF_NEIGHBOUR,"\n\r");
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <BLEMesh_CustomBeaconGeneratorCallback>:
* @param  beacon data buffer. It includes length and AD type fields
*         buffer size
* @retval void
*/
void BLEMesh_CustomBeaconGeneratorCallback(void* buffer, MOBLEUINT8* size)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 adType = CUSTOM_BEACON_AD_TYPE;
 80066ba:	2300      	movs	r3, #0
 80066bc:	75fb      	strb	r3, [r7, #23]
  MOBLEUINT8 dataLength = 5;
 80066be:	2305      	movs	r3, #5
 80066c0:	75bb      	strb	r3, [r7, #22]
  MOBLEUINT8 data[5] = {0x00,0x01,0x02,0x03,0x04};
 80066c2:	4a12      	ldr	r2, [pc, #72]	; (800670c <BLEMesh_CustomBeaconGeneratorCallback+0x5c>)
 80066c4:	f107 0308 	add.w	r3, r7, #8
 80066c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066cc:	6018      	str	r0, [r3, #0]
 80066ce:	3304      	adds	r3, #4
 80066d0:	7019      	strb	r1, [r3, #0]
  MOBLEUINT8* buf = (MOBLEUINT8*)buffer;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	613b      	str	r3, [r7, #16]
  
  buf[0] = dataLength+1;
 80066d6:	7dbb      	ldrb	r3, [r7, #22]
 80066d8:	3301      	adds	r3, #1
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	701a      	strb	r2, [r3, #0]
  buf[1] = adType;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	3301      	adds	r3, #1
 80066e4:	7dfa      	ldrb	r2, [r7, #23]
 80066e6:	701a      	strb	r2, [r3, #0]
  memcpy(buf+2, data, dataLength);
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	3302      	adds	r3, #2
 80066ec:	7dba      	ldrb	r2, [r7, #22]
 80066ee:	f107 0108 	add.w	r1, r7, #8
 80066f2:	4618      	mov	r0, r3
 80066f4:	f022 fa3c 	bl	8028b70 <memcpy>
  
  *size = dataLength+2;  
 80066f8:	7dbb      	ldrb	r3, [r7, #22]
 80066fa:	3302      	adds	r3, #2
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	701a      	strb	r2, [r3, #0]
}
 8006702:	bf00      	nop
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	0802ec38 	.word	0x0802ec38

08006710 <IntensityPublish>:
*         This function should be called in main loop
* @param  void
* @retval void
*/
void IntensityPublish(void)
{  
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
  
  Appli_IntensityControlPublishing(pGeneric_LevelParam);
  Appli_GenericClient_API(elementIndex, GENERIC_LEVEL_SET_ACK, pGeneric_LevelParam); 
#endif  
#endif
}
 8006714:	bf00      	nop
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <Appli_Process>:
*         This function should be called in main loop
* @param  void
* @retval void
*/
void Appli_Process(void)
{
 800671e:	b480      	push	{r7}
 8006720:	af00      	add	r7, sp, #0
  else
  {
    //SdkEvalLedOff(LED1);
  }
#endif      
}
 8006722:	bf00      	nop
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <UnprovisionedDeviceBeaconApp>:

#if PB_ADV_SUPPORTED
static void UnprovisionedDeviceBeaconApp(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
  BLEMesh_SetUnprovisionedDevBeaconInterval(0);
 8006730:	2000      	movs	r0, #0
 8006732:	f016 fd15 	bl	801d160 <BLEMesh_SetUnprovisionedDevBeaconInterval>
}
 8006736:	bf00      	nop
 8006738:	bd80      	pop	{r7, pc}

0800673a <UnprovisionedDeviceBeaconTask>:

static void UnprovisionedDeviceBeaconTask(void)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_BEACON_REQ_ID, CFG_SCH_PRIO_0);
 800673e:	2100      	movs	r1, #0
 8006740:	2004      	movs	r0, #4
 8006742:	f010 fa61 	bl	8016c08 <UTIL_SEQ_SetTask>

  return;
 8006746:	bf00      	nop
}
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <AppliMeshSW1Task>:
  return;
}
#endif

static void AppliMeshSW1Task(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* Check if button action is emulated with SW1 command on USART1 */
#if ENABLE_SERIAL_INTERFACE
  if(!button_emulation)
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <AppliMeshSW1Task+0x34>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10c      	bne.n	8006772 <AppliMeshSW1Task+0x26>
  {
  Appli_UpdateButtonState(BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED);
 8006758:	2000      	movs	r0, #0
 800675a:	f001 fa91 	bl	8007c80 <BSP_PB_GetState>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff fb76 	bl	8005e5c <Appli_UpdateButtonState>
    button_emulation = 0;
  }
#else
  Appli_UpdateButtonState(BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED);
#endif  
  return;
 8006770:	e005      	b.n	800677e <AppliMeshSW1Task+0x32>
    Appli_ShortButtonPress();
 8006772:	f7ff fb53 	bl	8005e1c <Appli_ShortButtonPress>
    button_emulation = 0;
 8006776:	4b02      	ldr	r3, [pc, #8]	; (8006780 <AppliMeshSW1Task+0x34>)
 8006778:	2200      	movs	r2, #0
 800677a:	701a      	strb	r2, [r3, #0]
  return;
 800677c:	bf00      	nop
}
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20004654 	.word	0x20004654

08006784 <Appli_Init>:
* @brief  Initializes the Application  
* @param  void
* @retval void
*/
void Appli_Init(MOBLEUINT8 *flag)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  AppliNvm_FactorySettingReset();
#endif
#endif
  
#if PB_ADV_SUPPORTED
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_BEACON_REQ_ID, UTIL_SEQ_RFU, UnprovisionedDeviceBeaconApp );
 800678c:	4a0d      	ldr	r2, [pc, #52]	; (80067c4 <Appli_Init+0x40>)
 800678e:	2100      	movs	r1, #0
 8006790:	2004      	movs	r0, #4
 8006792:	f010 fa17 	bl	8016bc4 <UTIL_SEQ_RegTask>
  /**
   * Create Timer to control unprovisioned device beacons
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &discoverTimer_Id, hw_ts_SingleShot, UnprovisionedDeviceBeaconTask);
 8006796:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <Appli_Init+0x44>)
 8006798:	2200      	movs	r2, #0
 800679a:	490c      	ldr	r1, [pc, #48]	; (80067cc <Appli_Init+0x48>)
 800679c:	2000      	movs	r0, #0
 800679e:	f7fb ffb9 	bl	8002714 <HW_TS_Create>
  
  HW_TS_Start(discoverTimer_Id, DISCOVER_TIMER_INTERVAL);
 80067a2:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <Appli_Init+0x48>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	490a      	ldr	r1, [pc, #40]	; (80067d0 <Appli_Init+0x4c>)
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fc f8b1 	bl	8002910 <HW_TS_Start>
#endif
  
#if ENABLE_SERIAL_INTERFACE
  Serial_Init();
 80067ae:	f00b ff2d 	bl	801260c <Serial_Init>
  Modify_PWM(BLUE_LED, 1);
#endif
#endif
#endif
  
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_SW1_REQ_ID, UTIL_SEQ_RFU, AppliMeshSW1Task );
 80067b2:	4a08      	ldr	r2, [pc, #32]	; (80067d4 <Appli_Init+0x50>)
 80067b4:	2100      	movs	r1, #0
 80067b6:	2040      	movs	r0, #64	; 0x40
 80067b8:	f010 fa04 	bl	8016bc4 <UTIL_SEQ_RegTask>
  * Create Timer to control Input OOB information
  */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &InputOOBTimeOut_Id, hw_ts_SingleShot, InputOOBTimeOutTask);
#endif

}
 80067bc:	bf00      	nop
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	0800672d 	.word	0x0800672d
 80067c8:	0800673b 	.word	0x0800673b
 80067cc:	2000443a 	.word	0x2000443a
 80067d0:	0012c258 	.word	0x0012c258
 80067d4:	0800674d 	.word	0x0800674d

080067d8 <PwmValueMapping>:
* @param  maxRange: Max range of the parameter
* @param  minRange: Min range of the parameter
* @retval MOBLEUINT8
*/
MOBLEUINT16 PwmValueMapping(MOBLEUINT16 setValue , MOBLEUINT16 maxRange , MOBLEINT16 minRange)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	80fb      	strh	r3, [r7, #6]
 80067e2:	460b      	mov	r3, r1
 80067e4:	80bb      	strh	r3, [r7, #4]
 80067e6:	4613      	mov	r3, r2
 80067e8:	807b      	strh	r3, [r7, #2]
   else if(percentValue > 90)
   {
     duty = 10;
   }
#else
   if(minRange > 0x00)
 80067ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	dd15      	ble.n	800681e <PwmValueMapping+0x46>
   {
     percentValue =  (setValue - 800)/ (maxRange - minRange);
 80067f2:	88fb      	ldrh	r3, [r7, #6]
 80067f4:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 80067f8:	88b9      	ldrh	r1, [r7, #4]
 80067fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067fe:	1acb      	subs	r3, r1, r3
 8006800:	fb92 f3f3 	sdiv	r3, r2, r3
 8006804:	81fb      	strh	r3, [r7, #14]
     percentValue = (percentValue*100);
 8006806:	89fb      	ldrh	r3, [r7, #14]
 8006808:	461a      	mov	r2, r3
 800680a:	0092      	lsls	r2, r2, #2
 800680c:	4413      	add	r3, r2
 800680e:	461a      	mov	r2, r3
 8006810:	0091      	lsls	r1, r2, #2
 8006812:	461a      	mov	r2, r3
 8006814:	460b      	mov	r3, r1
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	81fb      	strh	r3, [r7, #14]
 800681c:	e00a      	b.n	8006834 <PwmValueMapping+0x5c>
   }
   else
   {
     percentValue =  (setValue * 100)/ (maxRange - minRange);
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	2264      	movs	r2, #100	; 0x64
 8006822:	fb03 f202 	mul.w	r2, r3, r2
 8006826:	88b9      	ldrh	r1, [r7, #4]
 8006828:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800682c:	1acb      	subs	r3, r1, r3
 800682e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006832:	81fb      	strh	r3, [r7, #14]
   }
   
   duty = percentValue*320 ;
 8006834:	89fb      	ldrh	r3, [r7, #14]
 8006836:	461a      	mov	r2, r3
 8006838:	0092      	lsls	r2, r2, #2
 800683a:	4413      	add	r3, r2
 800683c:	019b      	lsls	r3, r3, #6
 800683e:	81bb      	strh	r3, [r7, #12]
   
   if(duty >= 32000)
 8006840:	89bb      	ldrh	r3, [r7, #12]
 8006842:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8006846:	d302      	bcc.n	800684e <PwmValueMapping+0x76>
   {
     duty = 31999;
 8006848:	f647 43ff 	movw	r3, #31999	; 0x7cff
 800684c:	81bb      	strh	r3, [r7, #12]
   }
   if(duty == 0)
 800684e:	89bb      	ldrh	r3, [r7, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <PwmValueMapping+0x80>
   {
     duty = 1;
 8006854:	2301      	movs	r3, #1
 8006856:	81bb      	strh	r3, [r7, #12]
   }
#endif
     
   return duty;
 8006858:	89bb      	ldrh	r3, [r7, #12]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <AppliNvm_ClearModelState>:
* @brief  Clear model states in nvm
* @param  none
* @retval MOBLE_RESULT_SUCCESS on success
*/
MOBLE_RESULT AppliNvm_ClearModelState(void)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
  MOBLE_RESULT result = MOBLE_RESULT_FAIL; /* if save model state not defined, return MOBLE_RESULT_FAIL */
 800686c:	2302      	movs	r3, #2
 800686e:	71fb      	strb	r3, [r7, #7]
                                     (uint32_t*)&subPageTemp, 
                                     APP_NVM_SUBPAGE_SIZE);
    }
  }
#endif /* SAVE_MODEL_STATE_NVM */  
  return result;
 8006870:	79fb      	ldrb	r3, [r7, #7]
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <AppliNvm_LoadModelState>:
* @param  model state buff size
* @retval MOBLE_RESULT_SUCCESS on success
*/
MOBLE_RESULT AppliNvm_LoadModelState(uint8_t state[], 
                                     uint16_t* size)
{  
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
      *size = APP_NVM_MODEL_SIZE;
    }
  }
  return result;  
#else /* SAVE_MODEL_STATE_NVM */  
  *size = 0;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2200      	movs	r2, #0
 800688c:	801a      	strh	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS;
 800688e:	2300      	movs	r3, #0
#endif /* SAVE_MODEL_STATE_NVM */
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <AppliNvm_SaveMessageParam>:
  states in flash.
* @param  void
* @retval void
*/
void AppliNvm_SaveMessageParam (void)
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
#ifdef SAVE_MODEL_STATE_FOR_ALL_MESSAGES
  PowerOnOff_flag = FLAG_SET;
#endif 
} 
 80068a0:	bf00      	nop
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
	...

080068ac <Appli_Vendor_DeviceInfo>:
* @param  data: Pointer to the data received from peer_addr
* @param  length: Length of the data
* @retval MOBLE_RESULT status of result
*/          
MOBLE_RESULT Appli_Vendor_DeviceInfo(MOBLEUINT8 const *data, MOBLEUINT32 length)
{
 80068ac:	b590      	push	{r4, r7, lr}
 80068ae:	b089      	sub	sp, #36	; 0x24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 tempBuffer[10];
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;  
 80068b6:	2300      	movs	r3, #0
 80068b8:	77fb      	strb	r3, [r7, #31]
  
  MOBLEUINT8 subCmd = data[0];
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	74bb      	strb	r3, [r7, #18]
  char *libVersion;
  char *subLibVersion;
  MOBLEUINT8 inc = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	74fb      	strb	r3, [r7, #19]
        /*First Byte is sending the Sub Command*/      
  ResponseBuffer[0] = subCmd;
 80068c4:	4a78      	ldr	r2, [pc, #480]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 80068c6:	7cbb      	ldrb	r3, [r7, #18]
 80068c8:	7013      	strb	r3, [r2, #0]
        TRACE_M(TF_VENDOR,"#02-%02hx! \n\r",data[0]);
 80068ca:	2100      	movs	r1, #0
 80068cc:	4877      	ldr	r0, [pc, #476]	; (8006aac <Appli_Vendor_DeviceInfo+0x200>)
 80068ce:	f006 fe5b 	bl	800d588 <TraceHeader>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	4619      	mov	r1, r3
 80068d8:	4875      	ldr	r0, [pc, #468]	; (8006ab0 <Appli_Vendor_DeviceInfo+0x204>)
 80068da:	f022 ff3d 	bl	8029758 <iprintf>
  
  switch(subCmd)
 80068de:	7cbb      	ldrb	r3, [r7, #18]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	f200 80d7 	bhi.w	8006a96 <Appli_Vendor_DeviceInfo+0x1ea>
 80068e8:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <Appli_Vendor_DeviceInfo+0x44>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	08006901 	.word	0x08006901
 80068f4:	0800690f 	.word	0x0800690f
 80068f8:	080069cf 	.word	0x080069cf
 80068fc:	08006a9d 	.word	0x08006a9d
#ifdef BLUENRG_MS    
      ResponseBuffer[1] = BLUENRG_MS_BRD;               
#endif
      
#ifdef STM32WB55xx
      ResponseBuffer[1] = STM32WB55XX_BRD;               
 8006900:	4b69      	ldr	r3, [pc, #420]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 8006902:	2204      	movs	r2, #4
 8006904:	705a      	strb	r2, [r3, #1]
#endif      

      BuffLength = 2;
 8006906:	4b6b      	ldr	r3, [pc, #428]	; (8006ab4 <Appli_Vendor_DeviceInfo+0x208>)
 8006908:	2202      	movs	r2, #2
 800690a:	801a      	strh	r2, [r3, #0]
      break;
 800690c:	e0c7      	b.n	8006a9e <Appli_Vendor_DeviceInfo+0x1f2>
    }
  case LIB_VER:
    {
      libVersion = BLEMesh_GetLibraryVersion();
 800690e:	f016 fe0b 	bl	801d528 <BLEMesh_GetLibraryVersion>
 8006912:	61b8      	str	r0, [r7, #24]
      while(*libVersion != '\0')
 8006914:	e03e      	b.n	8006994 <Appli_Vendor_DeviceInfo+0xe8>
      {
        tempBuffer[inc] = *libVersion;
 8006916:	7cfb      	ldrb	r3, [r7, #19]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	7812      	ldrb	r2, [r2, #0]
 800691c:	3320      	adds	r3, #32
 800691e:	443b      	add	r3, r7
 8006920:	f803 2c18 	strb.w	r2, [r3, #-24]
        if(tempBuffer[inc] != 0x2E)
 8006924:	7cfb      	ldrb	r3, [r7, #19]
 8006926:	3320      	adds	r3, #32
 8006928:	443b      	add	r3, r7
 800692a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800692e:	2b2e      	cmp	r3, #46	; 0x2e
 8006930:	d01d      	beq.n	800696e <Appli_Vendor_DeviceInfo+0xc2>
        {
          tempBuffer[inc] = BLEMesh_ModelsASCII_To_Char(tempBuffer[inc]);
 8006932:	7cfb      	ldrb	r3, [r7, #19]
 8006934:	3320      	adds	r3, #32
 8006936:	443b      	add	r3, r7
 8006938:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800693c:	7cfc      	ldrb	r4, [r7, #19]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fcc0 	bl	80072c4 <BLEMesh_ModelsASCII_To_Char>
 8006944:	4603      	mov	r3, r0
 8006946:	461a      	mov	r2, r3
 8006948:	f104 0320 	add.w	r3, r4, #32
 800694c:	443b      	add	r3, r7
 800694e:	f803 2c18 	strb.w	r2, [r3, #-24]
          TRACE_M(TF_VENDOR,"Lib version is %x\n\r" ,(unsigned char)tempBuffer[inc]);
 8006952:	2100      	movs	r1, #0
 8006954:	4855      	ldr	r0, [pc, #340]	; (8006aac <Appli_Vendor_DeviceInfo+0x200>)
 8006956:	f006 fe17 	bl	800d588 <TraceHeader>
 800695a:	7cfb      	ldrb	r3, [r7, #19]
 800695c:	3320      	adds	r3, #32
 800695e:	443b      	add	r3, r7
 8006960:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006964:	4619      	mov	r1, r3
 8006966:	4854      	ldr	r0, [pc, #336]	; (8006ab8 <Appli_Vendor_DeviceInfo+0x20c>)
 8006968:	f022 fef6 	bl	8029758 <iprintf>
 800696c:	e00c      	b.n	8006988 <Appli_Vendor_DeviceInfo+0xdc>
        }
        else
        {
          TRACE_M(TF_VENDOR,"Lib version is %c\n\r" ,(unsigned char)tempBuffer[inc]);
 800696e:	2100      	movs	r1, #0
 8006970:	484e      	ldr	r0, [pc, #312]	; (8006aac <Appli_Vendor_DeviceInfo+0x200>)
 8006972:	f006 fe09 	bl	800d588 <TraceHeader>
 8006976:	7cfb      	ldrb	r3, [r7, #19]
 8006978:	3320      	adds	r3, #32
 800697a:	443b      	add	r3, r7
 800697c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006980:	4619      	mov	r1, r3
 8006982:	484e      	ldr	r0, [pc, #312]	; (8006abc <Appli_Vendor_DeviceInfo+0x210>)
 8006984:	f022 fee8 	bl	8029758 <iprintf>
        }             
        libVersion++;  
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	3301      	adds	r3, #1
 800698c:	61bb      	str	r3, [r7, #24]
             
        inc++;
 800698e:	7cfb      	ldrb	r3, [r7, #19]
 8006990:	3301      	adds	r3, #1
 8006992:	74fb      	strb	r3, [r7, #19]
      while(*libVersion != '\0')
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1bc      	bne.n	8006916 <Appli_Vendor_DeviceInfo+0x6a>
      } 
      ResponseBuffer[1]= tempBuffer[0];
 800699c:	7a3a      	ldrb	r2, [r7, #8]
 800699e:	4b42      	ldr	r3, [pc, #264]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 80069a0:	705a      	strb	r2, [r3, #1]
      ResponseBuffer[2]= tempBuffer[1];
 80069a2:	7a7a      	ldrb	r2, [r7, #9]
 80069a4:	4b40      	ldr	r3, [pc, #256]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 80069a6:	709a      	strb	r2, [r3, #2]
      ResponseBuffer[3]= tempBuffer[3];
 80069a8:	7afa      	ldrb	r2, [r7, #11]
 80069aa:	4b3f      	ldr	r3, [pc, #252]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 80069ac:	70da      	strb	r2, [r3, #3]
      ResponseBuffer[4]= tempBuffer[4];
 80069ae:	7b3a      	ldrb	r2, [r7, #12]
 80069b0:	4b3d      	ldr	r3, [pc, #244]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 80069b2:	711a      	strb	r2, [r3, #4]
      ResponseBuffer[5]= tempBuffer[6];
 80069b4:	7bba      	ldrb	r2, [r7, #14]
 80069b6:	4b3c      	ldr	r3, [pc, #240]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 80069b8:	715a      	strb	r2, [r3, #5]
      ResponseBuffer[6]= tempBuffer[7];
 80069ba:	7bfa      	ldrb	r2, [r7, #15]
 80069bc:	4b3a      	ldr	r3, [pc, #232]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 80069be:	719a      	strb	r2, [r3, #6]
      ResponseBuffer[7]= tempBuffer[8];
 80069c0:	7c3a      	ldrb	r2, [r7, #16]
 80069c2:	4b39      	ldr	r3, [pc, #228]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 80069c4:	71da      	strb	r2, [r3, #7]
      BuffLength = 8;      
 80069c6:	4b3b      	ldr	r3, [pc, #236]	; (8006ab4 <Appli_Vendor_DeviceInfo+0x208>)
 80069c8:	2208      	movs	r2, #8
 80069ca:	801a      	strh	r2, [r3, #0]
      break;
 80069cc:	e067      	b.n	8006a9e <Appli_Vendor_DeviceInfo+0x1f2>
    }
  case LIB_SUB_VER:
    {
      subLibVersion = BLEMesh_GetLibrarySubVersion();
 80069ce:	f016 fdaf 	bl	801d530 <BLEMesh_GetLibrarySubVersion>
 80069d2:	6178      	str	r0, [r7, #20]
      while(*subLibVersion != '\0')
 80069d4:	e045      	b.n	8006a62 <Appli_Vendor_DeviceInfo+0x1b6>
      {
        tempBuffer[inc] = * subLibVersion;
 80069d6:	7cfb      	ldrb	r3, [r7, #19]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	7812      	ldrb	r2, [r2, #0]
 80069dc:	3320      	adds	r3, #32
 80069de:	443b      	add	r3, r7
 80069e0:	f803 2c18 	strb.w	r2, [r3, #-24]
        if((tempBuffer[inc] != 0x2E) && (tempBuffer[inc] != 0x52))
 80069e4:	7cfb      	ldrb	r3, [r7, #19]
 80069e6:	3320      	adds	r3, #32
 80069e8:	443b      	add	r3, r7
 80069ea:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80069ee:	2b2e      	cmp	r3, #46	; 0x2e
 80069f0:	d024      	beq.n	8006a3c <Appli_Vendor_DeviceInfo+0x190>
 80069f2:	7cfb      	ldrb	r3, [r7, #19]
 80069f4:	3320      	adds	r3, #32
 80069f6:	443b      	add	r3, r7
 80069f8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80069fc:	2b52      	cmp	r3, #82	; 0x52
 80069fe:	d01d      	beq.n	8006a3c <Appli_Vendor_DeviceInfo+0x190>
        {               
          tempBuffer[inc] = BLEMesh_ModelsASCII_To_Char(tempBuffer[inc]);
 8006a00:	7cfb      	ldrb	r3, [r7, #19]
 8006a02:	3320      	adds	r3, #32
 8006a04:	443b      	add	r3, r7
 8006a06:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006a0a:	7cfc      	ldrb	r4, [r7, #19]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 fc59 	bl	80072c4 <BLEMesh_ModelsASCII_To_Char>
 8006a12:	4603      	mov	r3, r0
 8006a14:	461a      	mov	r2, r3
 8006a16:	f104 0320 	add.w	r3, r4, #32
 8006a1a:	443b      	add	r3, r7
 8006a1c:	f803 2c18 	strb.w	r2, [r3, #-24]
          TRACE_M(TF_VENDOR,"Sub Lib version is %x\n\r" ,(unsigned char)tempBuffer[inc]);
 8006a20:	2100      	movs	r1, #0
 8006a22:	4822      	ldr	r0, [pc, #136]	; (8006aac <Appli_Vendor_DeviceInfo+0x200>)
 8006a24:	f006 fdb0 	bl	800d588 <TraceHeader>
 8006a28:	7cfb      	ldrb	r3, [r7, #19]
 8006a2a:	3320      	adds	r3, #32
 8006a2c:	443b      	add	r3, r7
 8006a2e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006a32:	4619      	mov	r1, r3
 8006a34:	4822      	ldr	r0, [pc, #136]	; (8006ac0 <Appli_Vendor_DeviceInfo+0x214>)
 8006a36:	f022 fe8f 	bl	8029758 <iprintf>
 8006a3a:	e00c      	b.n	8006a56 <Appli_Vendor_DeviceInfo+0x1aa>
        }
        else
        {
          TRACE_M(TF_VENDOR,"Sub Lib version is %c\n\r" ,(unsigned char)tempBuffer[inc]);
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	481b      	ldr	r0, [pc, #108]	; (8006aac <Appli_Vendor_DeviceInfo+0x200>)
 8006a40:	f006 fda2 	bl	800d588 <TraceHeader>
 8006a44:	7cfb      	ldrb	r3, [r7, #19]
 8006a46:	3320      	adds	r3, #32
 8006a48:	443b      	add	r3, r7
 8006a4a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	481c      	ldr	r0, [pc, #112]	; (8006ac4 <Appli_Vendor_DeviceInfo+0x218>)
 8006a52:	f022 fe81 	bl	8029758 <iprintf>
        } 
        subLibVersion++;  
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]
        inc++;
 8006a5c:	7cfb      	ldrb	r3, [r7, #19]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	74fb      	strb	r3, [r7, #19]
      while(*subLibVersion != '\0')
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1b5      	bne.n	80069d6 <Appli_Vendor_DeviceInfo+0x12a>
      } 
      ResponseBuffer[1]= tempBuffer[0];
 8006a6a:	7a3a      	ldrb	r2, [r7, #8]
 8006a6c:	4b0e      	ldr	r3, [pc, #56]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a6e:	705a      	strb	r2, [r3, #1]
      ResponseBuffer[2]= tempBuffer[1];
 8006a70:	7a7a      	ldrb	r2, [r7, #9]
 8006a72:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a74:	709a      	strb	r2, [r3, #2]
      ResponseBuffer[3]= tempBuffer[3];
 8006a76:	7afa      	ldrb	r2, [r7, #11]
 8006a78:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a7a:	70da      	strb	r2, [r3, #3]
      ResponseBuffer[4]= tempBuffer[5];
 8006a7c:	7b7a      	ldrb	r2, [r7, #13]
 8006a7e:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a80:	711a      	strb	r2, [r3, #4]
      ResponseBuffer[5]= tempBuffer[7];
 8006a82:	7bfa      	ldrb	r2, [r7, #15]
 8006a84:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a86:	715a      	strb	r2, [r3, #5]
      ResponseBuffer[6]= tempBuffer[9];
 8006a88:	7c7a      	ldrb	r2, [r7, #17]
 8006a8a:	4b07      	ldr	r3, [pc, #28]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a8c:	719a      	strb	r2, [r3, #6]
      
      BuffLength = 7;
 8006a8e:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <Appli_Vendor_DeviceInfo+0x208>)
 8006a90:	2207      	movs	r2, #7
 8006a92:	801a      	strh	r2, [r3, #0]
      
      break;
 8006a94:	e003      	b.n	8006a9e <Appli_Vendor_DeviceInfo+0x1f2>
      break;
    }
    
  default:
    {
      status = MOBLE_RESULT_FALSE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	77fb      	strb	r3, [r7, #31]
      break;
 8006a9a:	e000      	b.n	8006a9e <Appli_Vendor_DeviceInfo+0x1f2>
      break;
 8006a9c:	bf00      	nop
    }
    
  }
  
  return status;
 8006a9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3724      	adds	r7, #36	; 0x24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd90      	pop	{r4, r7, pc}
 8006aa8:	20004454 	.word	0x20004454
 8006aac:	08032c8c 	.word	0x08032c8c
 8006ab0:	0802ec40 	.word	0x0802ec40
 8006ab4:	20004490 	.word	0x20004490
 8006ab8:	0802ec50 	.word	0x0802ec50
 8006abc:	0802ec64 	.word	0x0802ec64
 8006ac0:	0802ec78 	.word	0x0802ec78
 8006ac4:	0802ec90 	.word	0x0802ec90

08006ac8 <Appli_Vendor_Test>:
* @param  data: Pointer to the data received from peer_addr
* @param  length: Length of the data
* @retval MOBLE_RESULT status of result
*/          
MOBLE_RESULT Appli_Vendor_Test(MOBLEUINT8 const *data, MOBLEUINT32 length)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;  
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]
  MOBLEUINT8 subCmd = data[0];
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	737b      	strb	r3, [r7, #13]
       /*First Byte is sending the Sub Command*/      
       ResponseBuffer[0]=subCmd;
 8006adc:	4a2b      	ldr	r2, [pc, #172]	; (8006b8c <Appli_Vendor_Test+0xc4>)
 8006ade:	7b7b      	ldrb	r3, [r7, #13]
 8006ae0:	7013      	strb	r3, [r2, #0]
       TRACE_M(TF_VENDOR,"#01-%02hx! \n\r",data[0]);
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	482a      	ldr	r0, [pc, #168]	; (8006b90 <Appli_Vendor_Test+0xc8>)
 8006ae6:	f006 fd4f 	bl	800d588 <TraceHeader>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	4619      	mov	r1, r3
 8006af0:	4828      	ldr	r0, [pc, #160]	; (8006b94 <Appli_Vendor_Test+0xcc>)
 8006af2:	f022 fe31 	bl	8029758 <iprintf>
  switch(subCmd)
 8006af6:	7b7b      	ldrb	r3, [r7, #13]
 8006af8:	3b02      	subs	r3, #2
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d83c      	bhi.n	8006b78 <Appli_Vendor_Test+0xb0>
 8006afe:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <Appli_Vendor_Test+0x3c>)
 8006b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b04:	08006b19 	.word	0x08006b19
 8006b08:	08006b7f 	.word	0x08006b7f
 8006b0c:	08006b7f 	.word	0x08006b7f
 8006b10:	08006b7f 	.word	0x08006b7f
 8006b14:	08006b4b 	.word	0x08006b4b
  {             
  case APPLI_TEST_ECHO: 
    {
      if(length > sizeof(ResponseBuffer))
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b3c      	cmp	r3, #60	; 0x3c
 8006b1c:	d908      	bls.n	8006b30 <Appli_Vendor_Test+0x68>
      {
        length = sizeof(ResponseBuffer);
 8006b1e:	233c      	movs	r3, #60	; 0x3c
 8006b20:	603b      	str	r3, [r7, #0]
        TRACE_M(TF_VENDOR,"Length received greater than size of response buffer \r\n");
 8006b22:	2100      	movs	r1, #0
 8006b24:	481a      	ldr	r0, [pc, #104]	; (8006b90 <Appli_Vendor_Test+0xc8>)
 8006b26:	f006 fd2f 	bl	800d588 <TraceHeader>
 8006b2a:	481b      	ldr	r0, [pc, #108]	; (8006b98 <Appli_Vendor_Test+0xd0>)
 8006b2c:	f022 fe9a 	bl	8029864 <puts>
      }
      memcpy (&(ResponseBuffer[1]),&(data[1]),(length-1));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	1c59      	adds	r1, r3, #1
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	461a      	mov	r2, r3
 8006b3a:	4818      	ldr	r0, [pc, #96]	; (8006b9c <Appli_Vendor_Test+0xd4>)
 8006b3c:	f022 f818 	bl	8028b70 <memcpy>
      BuffLength = length;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	4b16      	ldr	r3, [pc, #88]	; (8006ba0 <Appli_Vendor_Test+0xd8>)
 8006b46:	801a      	strh	r2, [r3, #0]
      break;
 8006b48:	e01a      	b.n	8006b80 <Appli_Vendor_Test+0xb8>
      /*Insert Test related Commands here*/
      break;
    }
  case APPLI_MODEL_PUBLISH_SELECT:
    {
       for (MOBLEUINT8 idx=0; idx<length; idx++)
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	73bb      	strb	r3, [r7, #14]
 8006b4e:	e00e      	b.n	8006b6e <Appli_Vendor_Test+0xa6>
       {
         TRACE_I(TF_VENDOR,"data[%d]= %d",idx,data[idx]);  
 8006b50:	7bb9      	ldrb	r1, [r7, #14]
 8006b52:	7bbb      	ldrb	r3, [r7, #14]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	4413      	add	r3, r2
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	4811      	ldr	r0, [pc, #68]	; (8006ba4 <Appli_Vendor_Test+0xdc>)
 8006b5e:	f022 fdfb 	bl	8029758 <iprintf>
         TRACE_I(TF_VENDOR,"\n\r");
 8006b62:	4811      	ldr	r0, [pc, #68]	; (8006ba8 <Appli_Vendor_Test+0xe0>)
 8006b64:	f022 fdf8 	bl	8029758 <iprintf>
       for (MOBLEUINT8 idx=0; idx<length; idx++)
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	73bb      	strb	r3, [r7, #14]
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d8ec      	bhi.n	8006b50 <Appli_Vendor_Test+0x88>
       } 
       break;
 8006b76:	e003      	b.n	8006b80 <Appli_Vendor_Test+0xb8>
     }
             
  default:
    {
      status = MOBLE_RESULT_FALSE;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b7c:	e000      	b.n	8006b80 <Appli_Vendor_Test+0xb8>
      break;
 8006b7e:	bf00      	nop
    }
  }
       
  return status;
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20004454 	.word	0x20004454
 8006b90:	08032ca4 	.word	0x08032ca4
 8006b94:	0802eca8 	.word	0x0802eca8
 8006b98:	0802ecb8 	.word	0x0802ecb8
 8006b9c:	20004455 	.word	0x20004455
 8006ba0:	20004490 	.word	0x20004490
 8006ba4:	0802ecf0 	.word	0x0802ecf0
 8006ba8:	0802ed00 	.word	0x0802ed00

08006bac <Appli_Vendor_LEDControl>:
* @param  elementIndex : selected element where '0' is first element       
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_Vendor_LEDControl( MOBLEUINT8 const *data, MOBLEUINT32 length,
                                       MOBLEUINT8 elementIndex , MOBLE_ADDRESS dst_peer)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	461a      	mov	r2, r3
 8006bba:	460b      	mov	r3, r1
 8006bbc:	71fb      	strb	r3, [r7, #7]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	80bb      	strh	r3, [r7, #4]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	75fb      	strb	r3, [r7, #23]
  MOBLEUINT8 subCommand; 
  subCommand = data[0];
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	74fb      	strb	r3, [r7, #19]
  MOBLEUINT16 duty;
  MOBLEUINT16 intensityValue = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	82bb      	strh	r3, [r7, #20]
      
  TRACE_M(TF_VENDOR,"#03-%02hx!\n\r",data[0]);
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	488a      	ldr	r0, [pc, #552]	; (8006dfc <Appli_Vendor_LEDControl+0x250>)
 8006bd4:	f006 fcd8 	bl	800d588 <TraceHeader>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4888      	ldr	r0, [pc, #544]	; (8006e00 <Appli_Vendor_LEDControl+0x254>)
 8006be0:	f022 fdba 	bl	8029758 <iprintf>
  switch(subCommand)
 8006be4:	7cfb      	ldrb	r3, [r7, #19]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	2b05      	cmp	r3, #5
 8006bea:	f200 80e3 	bhi.w	8006db4 <Appli_Vendor_LEDControl+0x208>
 8006bee:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <Appli_Vendor_LEDControl+0x48>)
 8006bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf4:	08006cbd 	.word	0x08006cbd
 8006bf8:	08006d03 	.word	0x08006d03
 8006bfc:	08006c3f 	.word	0x08006c3f
 8006c00:	08006db5 	.word	0x08006db5
 8006c04:	08006c0d 	.word	0x08006c0d
 8006c08:	08006d45 	.word	0x08006d45
    */
  case APPLI_CMD_LED_BULB:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_Control callback received for elementIndex %d \r\n", elementIndex);
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	487b      	ldr	r0, [pc, #492]	; (8006dfc <Appli_Vendor_LEDControl+0x250>)
 8006c10:	f006 fcba 	bl	800d588 <TraceHeader>
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	4619      	mov	r1, r3
 8006c18:	487a      	ldr	r0, [pc, #488]	; (8006e04 <Appli_Vendor_LEDControl+0x258>)
 8006c1a:	f022 fd9d 	bl	8029758 <iprintf>
      Appli_LedState = *(data+1); /* Toggle the state of the Blue LED */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	785a      	ldrb	r2, [r3, #1]
 8006c22:	4b79      	ldr	r3, [pc, #484]	; (8006e08 <Appli_Vendor_LEDControl+0x25c>)
 8006c24:	701a      	strb	r2, [r3, #0]
      if( Appli_LedState == 1)
 8006c26:	4b78      	ldr	r3, [pc, #480]	; (8006e08 <Appli_Vendor_LEDControl+0x25c>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d103      	bne.n	8006c36 <Appli_Vendor_LEDControl+0x8a>
      {
        BSP_LED_On(LED_BLUE);
 8006c2e:	2000      	movs	r0, #0
 8006c30:	f000 ff82 	bl	8007b38 <BSP_LED_On>
      }
      else
      {
        BSP_LED_Off(LED_BLUE);
      }  
      break;
 8006c34:	e0c1      	b.n	8006dba <Appli_Vendor_LEDControl+0x20e>
        BSP_LED_Off(LED_BLUE);
 8006c36:	2000      	movs	r0, #0
 8006c38:	f000 ff98 	bl	8007b6c <BSP_LED_Off>
      break;
 8006c3c:	e0bd      	b.n	8006dba <Appli_Vendor_LEDControl+0x20e>
    /* Toggle Command */  
  case APPLI_CMD_TOGGLE:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_Toggle callback received for elementIndex %d \r\n", elementIndex);
 8006c3e:	2100      	movs	r1, #0
 8006c40:	486e      	ldr	r0, [pc, #440]	; (8006dfc <Appli_Vendor_LEDControl+0x250>)
 8006c42:	f006 fca1 	bl	800d588 <TraceHeader>
 8006c46:	79fb      	ldrb	r3, [r7, #7]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4870      	ldr	r0, [pc, #448]	; (8006e0c <Appli_Vendor_LEDControl+0x260>)
 8006c4c:	f022 fd84 	bl	8029758 <iprintf>
      if(Appli_LedState == 1)
 8006c50:	4b6d      	ldr	r3, [pc, #436]	; (8006e08 <Appli_Vendor_LEDControl+0x25c>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d117      	bne.n	8006c88 <Appli_Vendor_LEDControl+0xdc>
      {
        Appli_LightPwmValue.IntensityValue = LED_OFF_VALUE;
 8006c58:	4b6d      	ldr	r3, [pc, #436]	; (8006e10 <Appli_Vendor_LEDControl+0x264>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f042 0201 	orr.w	r2, r2, #1
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	705a      	strb	r2, [r3, #1]
                                    
#ifndef CUSTOM_BOARD_PWM_SELECTION            
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
 8006c66:	4b6a      	ldr	r3, [pc, #424]	; (8006e10 <Appli_Vendor_LEDControl+0x264>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	6858      	ldr	r0, [r3, #4]
 8006c6e:	4602      	mov	r2, r0
 8006c70:	6898      	ldr	r0, [r3, #8]
 8006c72:	4603      	mov	r3, r0
 8006c74:	2004      	movs	r0, #4
 8006c76:	f7fe f82f 	bl	8004cd8 <Light_UpdateLedValue>
#else
        Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
#endif            
        Appli_LedState = 0;
 8006c7a:	4b63      	ldr	r3, [pc, #396]	; (8006e08 <Appli_Vendor_LEDControl+0x25c>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED_BLUE);
 8006c80:	2000      	movs	r0, #0
 8006c82:	f000 ff73 	bl	8007b6c <BSP_LED_Off>
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
        Appli_LedState = 1;
        BSP_LED_On(LED_BLUE);
      }
              
      break;
 8006c86:	e098      	b.n	8006dba <Appli_Vendor_LEDControl+0x20e>
        Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
 8006c88:	4b61      	ldr	r3, [pc, #388]	; (8006e10 <Appli_Vendor_LEDControl+0x264>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f062 0209 	orn	r2, r2, #9
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f042 027c 	orr.w	r2, r2, #124	; 0x7c
 8006c98:	705a      	strb	r2, [r3, #1]
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 8006c9a:	4b5d      	ldr	r3, [pc, #372]	; (8006e10 <Appli_Vendor_LEDControl+0x264>)
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	6858      	ldr	r0, [r3, #4]
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	6898      	ldr	r0, [r3, #8]
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2004      	movs	r0, #4
 8006caa:	f7fe f815 	bl	8004cd8 <Light_UpdateLedValue>
        Appli_LedState = 1;
 8006cae:	4b56      	ldr	r3, [pc, #344]	; (8006e08 <Appli_Vendor_LEDControl+0x25c>)
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	701a      	strb	r2, [r3, #0]
        BSP_LED_On(LED_BLUE);
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	f000 ff3f 	bl	8007b38 <BSP_LED_On>
      break;
 8006cba:	e07e      	b.n	8006dba <Appli_Vendor_LEDControl+0x20e>
    /* On Command */  
  case APPLI_CMD_ON:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_ON callback received for elementIndex %d \r\n", elementIndex);     
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	484f      	ldr	r0, [pc, #316]	; (8006dfc <Appli_Vendor_LEDControl+0x250>)
 8006cc0:	f006 fc62 	bl	800d588 <TraceHeader>
 8006cc4:	79fb      	ldrb	r3, [r7, #7]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4852      	ldr	r0, [pc, #328]	; (8006e14 <Appli_Vendor_LEDControl+0x268>)
 8006cca:	f022 fd45 	bl	8029758 <iprintf>
      Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
 8006cce:	4b50      	ldr	r3, [pc, #320]	; (8006e10 <Appli_Vendor_LEDControl+0x264>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f062 0209 	orn	r2, r2, #9
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f042 027c 	orr.w	r2, r2, #124	; 0x7c
 8006cde:	705a      	strb	r2, [r3, #1]
      Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
 8006ce0:	4b4b      	ldr	r3, [pc, #300]	; (8006e10 <Appli_Vendor_LEDControl+0x264>)
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	6858      	ldr	r0, [r3, #4]
 8006ce8:	4602      	mov	r2, r0
 8006cea:	6898      	ldr	r0, [r3, #8]
 8006cec:	4603      	mov	r3, r0
 8006cee:	2004      	movs	r0, #4
 8006cf0:	f7fd fff2 	bl	8004cd8 <Light_UpdateLedValue>
      BSP_LED_On(LED_BLUE);
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	f000 ff1f 	bl	8007b38 <BSP_LED_On>
      Appli_LedState = 1;
 8006cfa:	4b43      	ldr	r3, [pc, #268]	; (8006e08 <Appli_Vendor_LEDControl+0x25c>)
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	701a      	strb	r2, [r3, #0]
          
      break;
 8006d00:	e05b      	b.n	8006dba <Appli_Vendor_LEDControl+0x20e>
    /* Off Command */  
  case APPLI_CMD_OFF:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_OFF callback received for elementIndex %d \r\n", elementIndex);                   
 8006d02:	2100      	movs	r1, #0
 8006d04:	483d      	ldr	r0, [pc, #244]	; (8006dfc <Appli_Vendor_LEDControl+0x250>)
 8006d06:	f006 fc3f 	bl	800d588 <TraceHeader>
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4842      	ldr	r0, [pc, #264]	; (8006e18 <Appli_Vendor_LEDControl+0x26c>)
 8006d10:	f022 fd22 	bl	8029758 <iprintf>
      Appli_LightPwmValue.IntensityValue = LED_OFF_VALUE;
 8006d14:	4b3e      	ldr	r3, [pc, #248]	; (8006e10 <Appli_Vendor_LEDControl+0x264>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	f042 0201 	orr.w	r2, r2, #1
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	705a      	strb	r2, [r3, #1]
            
#ifndef CUSTOM_BOARD_PWM_SELECTION            
      Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
 8006d22:	4b3b      	ldr	r3, [pc, #236]	; (8006e10 <Appli_Vendor_LEDControl+0x264>)
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	4611      	mov	r1, r2
 8006d28:	6858      	ldr	r0, [r3, #4]
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	6898      	ldr	r0, [r3, #8]
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2004      	movs	r0, #4
 8006d32:	f7fd ffd1 	bl	8004cd8 <Light_UpdateLedValue>
#else
      Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
#endif            
      Appli_LedState = 0;
 8006d36:	4b34      	ldr	r3, [pc, #208]	; (8006e08 <Appli_Vendor_LEDControl+0x25c>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]
      BSP_LED_Off(LED_BLUE);
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	f000 ff15 	bl	8007b6c <BSP_LED_Off>
          
      break;
 8006d42:	e03a      	b.n	8006dba <Appli_Vendor_LEDControl+0x20e>
        /* intensity command */
    case APPLI_CMD_LED_INTENSITY:
      {
        /*User Need to write the commands as per the element selected*/
          
        TRACE_M(TF_VENDOR,"Appli_LED_Intensity callback received for elementIndex %d \r\n", elementIndex);    
 8006d44:	2100      	movs	r1, #0
 8006d46:	482d      	ldr	r0, [pc, #180]	; (8006dfc <Appli_Vendor_LEDControl+0x250>)
 8006d48:	f006 fc1e 	bl	800d588 <TraceHeader>
 8006d4c:	79fb      	ldrb	r3, [r7, #7]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4832      	ldr	r0, [pc, #200]	; (8006e1c <Appli_Vendor_LEDControl+0x270>)
 8006d52:	f022 fd01 	bl	8029758 <iprintf>
        intensityValue = data[2] << 8;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3302      	adds	r3, #2
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	82bb      	strh	r3, [r7, #20]
        intensityValue |= data[1];
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	3301      	adds	r3, #1
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	8abb      	ldrh	r3, [r7, #20]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	82bb      	strh	r3, [r7, #20]
                    
        duty = PwmValueMapping(intensityValue , 0x7FFF ,0);                         
 8006d70:	8abb      	ldrh	r3, [r7, #20]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff fd2d 	bl	80067d8 <PwmValueMapping>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	823b      	strh	r3, [r7, #16]
        Appli_LightPwmValue.IntensityValue = duty;
 8006d82:	4b23      	ldr	r3, [pc, #140]	; (8006e10 <Appli_Vendor_LEDControl+0x264>)
 8006d84:	8a3a      	ldrh	r2, [r7, #16]
 8006d86:	801a      	strh	r2, [r3, #0]
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);             
 8006d88:	4b21      	ldr	r3, [pc, #132]	; (8006e10 <Appli_Vendor_LEDControl+0x264>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	6858      	ldr	r0, [r3, #4]
 8006d90:	4602      	mov	r2, r0
 8006d92:	6898      	ldr	r0, [r3, #8]
 8006d94:	4603      	mov	r3, r0
 8006d96:	2004      	movs	r0, #4
 8006d98:	f7fd ff9e 	bl	8004cd8 <Light_UpdateLedValue>
        if(duty > 16000)
 8006d9c:	8a3b      	ldrh	r3, [r7, #16]
 8006d9e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006da2:	d903      	bls.n	8006dac <Appli_Vendor_LEDControl+0x200>
        {
          BSP_LED_On(LED_BLUE);
 8006da4:	2000      	movs	r0, #0
 8006da6:	f000 fec7 	bl	8007b38 <BSP_LED_On>
        }
        else
        {
          BSP_LED_Off(LED_BLUE);
        }
        break;
 8006daa:	e006      	b.n	8006dba <Appli_Vendor_LEDControl+0x20e>
          BSP_LED_Off(LED_BLUE);
 8006dac:	2000      	movs	r0, #0
 8006dae:	f000 fedd 	bl	8007b6c <BSP_LED_Off>
        break;
 8006db2:	e002      	b.n	8006dba <Appli_Vendor_LEDControl+0x20e>
      }
    /* Default case - Not valid command */
  default:
    {
      status = MOBLE_RESULT_FALSE;
 8006db4:	2301      	movs	r3, #1
 8006db6:	75fb      	strb	r3, [r7, #23]
      break;
 8006db8:	bf00      	nop
    }
  }
  /*Buffer will be sent for Reliable Response*/
  /*First Byte is Sub Command and 2nd Byte is LED Status*/
  ResponseBuffer[0] = subCommand;
 8006dba:	4a19      	ldr	r2, [pc, #100]	; (8006e20 <Appli_Vendor_LEDControl+0x274>)
 8006dbc:	7cfb      	ldrb	r3, [r7, #19]
 8006dbe:	7013      	strb	r3, [r2, #0]
  if(subCommand == APPLI_CMD_LED_INTENSITY)
 8006dc0:	7cfb      	ldrb	r3, [r7, #19]
 8006dc2:	2b06      	cmp	r3, #6
 8006dc4:	d10d      	bne.n	8006de2 <Appli_Vendor_LEDControl+0x236>
  {
    ResponseBuffer[1] = intensityValue >> 8 ;
 8006dc6:	8abb      	ldrh	r3, [r7, #20]
 8006dc8:	0a1b      	lsrs	r3, r3, #8
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <Appli_Vendor_LEDControl+0x274>)
 8006dd0:	705a      	strb	r2, [r3, #1]
    ResponseBuffer[2] = intensityValue ;
 8006dd2:	8abb      	ldrh	r3, [r7, #20]
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	4b12      	ldr	r3, [pc, #72]	; (8006e20 <Appli_Vendor_LEDControl+0x274>)
 8006dd8:	709a      	strb	r2, [r3, #2]
    BuffLength = 3;
 8006dda:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <Appli_Vendor_LEDControl+0x278>)
 8006ddc:	2203      	movs	r2, #3
 8006dde:	801a      	strh	r2, [r3, #0]
 8006de0:	e006      	b.n	8006df0 <Appli_Vendor_LEDControl+0x244>
  }
  else
  {
    ResponseBuffer[1] = Appli_LedState ;
 8006de2:	4b09      	ldr	r3, [pc, #36]	; (8006e08 <Appli_Vendor_LEDControl+0x25c>)
 8006de4:	781a      	ldrb	r2, [r3, #0]
 8006de6:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <Appli_Vendor_LEDControl+0x274>)
 8006de8:	705a      	strb	r2, [r3, #1]
    BuffLength = 2; 
 8006dea:	4b0e      	ldr	r3, [pc, #56]	; (8006e24 <Appli_Vendor_LEDControl+0x278>)
 8006dec:	2202      	movs	r2, #2
 8006dee:	801a      	strh	r2, [r3, #0]
  }
      
  return status;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	08032cb8 	.word	0x08032cb8
 8006e00:	0802ed04 	.word	0x0802ed04
 8006e04:	0802ed14 	.word	0x0802ed14
 8006e08:	2000442e 	.word	0x2000442e
 8006e0c:	0802ed50 	.word	0x0802ed50
 8006e10:	20004420 	.word	0x20004420
 8006e14:	0802ed8c 	.word	0x0802ed8c
 8006e18:	0802edc4 	.word	0x0802edc4
 8006e1c:	0802edfc 	.word	0x0802edfc
 8006e20:	20004454 	.word	0x20004454
 8006e24:	20004490 	.word	0x20004490

08006e28 <Appli_Vendor_Data_write>:
* @param  data: Pointer to the data received from peer_addr
* @param  length: Length of the data
* @retval MOBLE_RESULT status of result
*/          
MOBLE_RESULT Appli_Vendor_Data_write(MOBLEUINT8 const *data, MOBLEUINT32 length)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;  
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]
  MOBLEUINT8 subCmd = data[0];
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	72fb      	strb	r3, [r7, #11]
  /*First Byte is sending the Sub Command*/      
  ResponseBuffer[0]=subCmd;
 8006e3c:	4a1b      	ldr	r2, [pc, #108]	; (8006eac <Appli_Vendor_Data_write+0x84>)
 8006e3e:	7afb      	ldrb	r3, [r7, #11]
 8006e40:	7013      	strb	r3, [r2, #0]
       
  TRACE_M(TF_VENDOR, "#0E-%02hx %02lx! \n\r",data[0], length);
 8006e42:	2100      	movs	r1, #0
 8006e44:	481a      	ldr	r0, [pc, #104]	; (8006eb0 <Appli_Vendor_Data_write+0x88>)
 8006e46:	f006 fb9f 	bl	800d588 <TraceHeader>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	4619      	mov	r1, r3
 8006e52:	4818      	ldr	r0, [pc, #96]	; (8006eb4 <Appli_Vendor_Data_write+0x8c>)
 8006e54:	f022 fc80 	bl	8029758 <iprintf>
  for(MOBLEUINT16 i=0; i<length; i++)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	81bb      	strh	r3, [r7, #12]
 8006e5c:	e00a      	b.n	8006e74 <Appli_Vendor_Data_write+0x4c>
  {
    TRACE_I(TF_VENDOR,"%02hx ",data[i]);
 8006e5e:	89bb      	ldrh	r3, [r7, #12]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	4413      	add	r3, r2
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	4619      	mov	r1, r3
 8006e68:	4813      	ldr	r0, [pc, #76]	; (8006eb8 <Appli_Vendor_Data_write+0x90>)
 8006e6a:	f022 fc75 	bl	8029758 <iprintf>
  for(MOBLEUINT16 i=0; i<length; i++)
 8006e6e:	89bb      	ldrh	r3, [r7, #12]
 8006e70:	3301      	adds	r3, #1
 8006e72:	81bb      	strh	r3, [r7, #12]
 8006e74:	89bb      	ldrh	r3, [r7, #12]
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d8f0      	bhi.n	8006e5e <Appli_Vendor_Data_write+0x36>
  }
  TRACE_I(TF_VENDOR,"\n\r");
 8006e7c:	480f      	ldr	r0, [pc, #60]	; (8006ebc <Appli_Vendor_Data_write+0x94>)
 8006e7e:	f022 fc6b 	bl	8029758 <iprintf>
  switch(subCmd)
 8006e82:	7afb      	ldrb	r3, [r7, #11]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d109      	bne.n	8006e9c <Appli_Vendor_Data_write+0x74>
  {     
    case APPLI_STRING_WRITE:
    {            
      memcpy(&ResponseBuffer,data,length);
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	4807      	ldr	r0, [pc, #28]	; (8006eac <Appli_Vendor_Data_write+0x84>)
 8006e8e:	f021 fe6f 	bl	8028b70 <memcpy>
      BuffLength = length;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <Appli_Vendor_Data_write+0x98>)
 8006e98:	801a      	strh	r2, [r3, #0]
      break;
 8006e9a:	e002      	b.n	8006ea2 <Appli_Vendor_Data_write+0x7a>
    }
    default:
    {
      status = MOBLE_RESULT_FALSE;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea0:	bf00      	nop
    }
  }
  return status;        
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	20004454 	.word	0x20004454
 8006eb0:	08032cd0 	.word	0x08032cd0
 8006eb4:	0802ee3c 	.word	0x0802ee3c
 8006eb8:	0802ee50 	.word	0x0802ee50
 8006ebc:	0802ed00 	.word	0x0802ed00
 8006ec0:	20004490 	.word	0x20004490

08006ec4 <Appli_GetTestValue>:
*          when Vensor application test command received then status message is to be provided
* @param  responseValue: Pointer to the status message
* @retval void
*/ 
void Appli_GetTestValue (MOBLEUINT8 *responseValue)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  *responseValue = TestHitCounter;
 8006ecc:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <Appli_GetTestValue+0x50>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	701a      	strb	r2, [r3, #0]
  *(responseValue+1)  = TestHitCounter >> 8;
 8006ed6:	4b0f      	ldr	r3, [pc, #60]	; (8006f14 <Appli_GetTestValue+0x50>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	0a1a      	lsrs	r2, r3, #8
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	b2d2      	uxtb	r2, r2
 8006ee2:	701a      	strb	r2, [r3, #0]
  *(responseValue+2)  = TestHitCounter >> 16;
 8006ee4:	4b0b      	ldr	r3, [pc, #44]	; (8006f14 <Appli_GetTestValue+0x50>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	0c1a      	lsrs	r2, r3, #16
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3302      	adds	r3, #2
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]
  *(responseValue+3)  = TestHitCounter >> 24;
 8006ef2:	4b08      	ldr	r3, [pc, #32]	; (8006f14 <Appli_GetTestValue+0x50>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	0e1a      	lsrs	r2, r3, #24
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3303      	adds	r3, #3
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	701a      	strb	r2, [r3, #0]
  TestHitCounter = 0;
 8006f00:	4b04      	ldr	r3, [pc, #16]	; (8006f14 <Appli_GetTestValue+0x50>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	200044dc 	.word	0x200044dc

08006f18 <Appli_Vendor_SetBigDataPacket>:
* @param  dst_peer : Destination address
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_Vendor_SetBigDataPacket(MOBLEUINT8 *data, MOBLEUINT32 length,
                                       MOBLEUINT8 elementIndex , MOBLE_ADDRESS dst_peer)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	4611      	mov	r1, r2
 8006f24:	461a      	mov	r2, r3
 8006f26:	460b      	mov	r3, r1
 8006f28:	71fb      	strb	r3, [r7, #7]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80bb      	strh	r3, [r7, #4]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	75fb      	strb	r3, [r7, #23]
  
  if (length > VENDOR_DATA_BUFFER_SIZE)
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b3c      	cmp	r3, #60	; 0x3c
 8006f36:	d901      	bls.n	8006f3c <Appli_Vendor_SetBigDataPacket+0x24>
  {
    status = MOBLE_RESULT_INVALIDARG;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	75fb      	strb	r3, [r7, #23]
  }
  memmove(Appli_VendorBigData.data, data, length);
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	68f9      	ldr	r1, [r7, #12]
 8006f40:	4808      	ldr	r0, [pc, #32]	; (8006f64 <Appli_Vendor_SetBigDataPacket+0x4c>)
 8006f42:	f021 fe23 	bl	8028b8c <memmove>
  Appli_VendorBigData.dst = dst_peer;
 8006f46:	4a08      	ldr	r2, [pc, #32]	; (8006f68 <Appli_Vendor_SetBigDataPacket+0x50>)
 8006f48:	88bb      	ldrh	r3, [r7, #4]
 8006f4a:	8013      	strh	r3, [r2, #0]
  Appli_VendorBigData.length = length;
 8006f4c:	4a06      	ldr	r2, [pc, #24]	; (8006f68 <Appli_Vendor_SetBigDataPacket+0x50>)
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6413      	str	r3, [r2, #64]	; 0x40
  Appli_VendorBigData.elementIndex = elementIndex;
 8006f52:	4a05      	ldr	r2, [pc, #20]	; (8006f68 <Appli_Vendor_SetBigDataPacket+0x50>)
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  return status;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20004496 	.word	0x20004496
 8006f68:	20004494 	.word	0x20004494

08006f6c <Appli_Vendor_SendBigDataPacket>:
* @brief  Send Vendor big data packet
* @param  void      
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_Vendor_SendBigDataPacket(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af04      	add	r7, sp, #16
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8006f72:	2300      	movs	r3, #0
 8006f74:	71fb      	strb	r3, [r7, #7]
  
  if(BLEMesh_TrsptIsBusyState())
 8006f76:	f016 f927 	bl	801d1c8 <BLEMesh_TrsptIsBusyState>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d005      	beq.n	8006f8c <Appli_Vendor_SendBigDataPacket+0x20>
  {
    BSP_LED_On(LED_BLUE);
 8006f80:	2000      	movs	r0, #0
 8006f82:	f000 fdd9 	bl	8007b38 <BSP_LED_On>
    status = MOBLE_RESULT_FALSE;
 8006f86:	2301      	movs	r3, #1
 8006f88:	71fb      	strb	r3, [r7, #7]
 8006f8a:	e014      	b.n	8006fb6 <Appli_Vendor_SendBigDataPacket+0x4a>
  }
  else
  {
    BSP_LED_Off(LED_BLUE);
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	f000 fded 	bl	8007b6c <BSP_LED_Off>
    status = BLEMesh_SetRemoteData(Appli_VendorBigData.dst,
 8006f92:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <Appli_Vendor_SendBigDataPacket+0x54>)
 8006f94:	8818      	ldrh	r0, [r3, #0]
 8006f96:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <Appli_Vendor_SendBigDataPacket+0x54>)
 8006f98:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8006f9c:	4b08      	ldr	r3, [pc, #32]	; (8006fc0 <Appli_Vendor_SendBigDataPacket+0x54>)
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	9202      	str	r2, [sp, #8]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	9201      	str	r2, [sp, #4]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <Appli_Vendor_SendBigDataPacket+0x58>)
 8006fac:	220e      	movs	r2, #14
 8006fae:	f021 fac3 	bl	8028538 <BLEMesh_SetRemoteData>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	71fb      	strb	r3, [r7, #7]
                                       Appli_VendorBigData.length,
                                       MOBLE_FALSE, 
                                       MOBLE_TRUE);

  }
  return status;
 8006fb6:	79fb      	ldrb	r3, [r7, #7]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20004494 	.word	0x20004494
 8006fc4:	20004496 	.word	0x20004496

08006fc8 <GetApplicationVendorModels>:

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

void GetApplicationVendorModels(const MODEL_Vendor_cb_t** pModelsTable, MOBLEUINT32* VendorModelscount)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
#ifdef ENABLE_VENDOR_MODEL_SERVER
  *pModelsTable = Model_Vendor_cb       ;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a07      	ldr	r2, [pc, #28]	; (8006ff4 <GetApplicationVendorModels+0x2c>)
 8006fd6:	601a      	str	r2, [r3, #0]
  *VendorModelscount = MODEL_VENDOR_COUNT;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
  
   TRACE_M(TF_VENDOR_M, "GetApplicationVendorModels \r\n");
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4805      	ldr	r0, [pc, #20]	; (8006ff8 <GetApplicationVendorModels+0x30>)
 8006fe2:	f006 fad1 	bl	800d588 <TraceHeader>
 8006fe6:	4805      	ldr	r0, [pc, #20]	; (8006ffc <GetApplicationVendorModels+0x34>)
 8006fe8:	f022 fc3c 	bl	8029864 <puts>
#endif
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	08032e14 	.word	0x08032e14
 8006ff8:	08032e2c 	.word	0x08032e2c
 8006ffc:	0802ee6c 	.word	0x0802ee6c

08007000 <BLEMesh_ModelsInit>:
* @brief  Initialization Commands for Models
* @param  void
* @retval void
*/    
void BLEMesh_ModelsInit(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b092      	sub	sp, #72	; 0x48
 8007004:	af00      	add	r7, sp, #0
#endif	
#endif
  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
  /* Inintialise the light model range states with default values */
  Light_ModelRangeInit();
 8007006:	f009 fe99 	bl	8010d3c <Light_ModelRangeInit>
#endif
  
  /* Callbacks used by BlueNRG-Mesh Models */
  BLEMesh_SetSIGModelsCbMap(Model_SIG_cb, MODEL_SIG_COUNT);
 800700a:	2102      	movs	r1, #2
 800700c:	480c      	ldr	r0, [pc, #48]	; (8007040 <BLEMesh_ModelsInit+0x40>)
 800700e:	f021 f99f 	bl	8028350 <BLEMesh_SetSIGModelsCbMap>
#ifdef ENABLE_LIGHT_MODEL_SERVER_LC
  Appli_Light_LCs_Init();
#endif
  
  /* Load generic model states from nvm */
  AppliNvm_LoadModelState(modelStateLoadBuff, &modelStateLoad_Size);
 8007012:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8007016:	1d3b      	adds	r3, r7, #4
 8007018:	4611      	mov	r1, r2
 800701a:	4618      	mov	r0, r3
 800701c:	f7ff fc2f 	bl	800687e <AppliNvm_LoadModelState>
  if (modelStateLoad_Size != 0)
 8007020:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <BLEMesh_ModelsInit+0x38>
  {
    /* update states of generic model */
    Model_RestoreStates(modelStateLoadBuff, modelStateLoad_Size);
 8007028:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800702c:	b2da      	uxtb	r2, r3
 800702e:	1d3b      	adds	r3, r7, #4
 8007030:	4611      	mov	r1, r2
 8007032:	4618      	mov	r0, r3
 8007034:	f006 faca 	bl	800d5cc <Model_RestoreStates>
  }
}
 8007038:	bf00      	nop
 800703a:	3748      	adds	r7, #72	; 0x48
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	08032df0 	.word	0x08032df0

08007044 <BLEMesh_ModelsProcess>:
* @brief  Process Commands for Models
* @param  void
* @retval void
*/    
void BLEMesh_ModelsProcess(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
#ifdef ENABLE_GENERIC_MODEL_SERVER  
  Generic_Process();
 8007048:	f008 f856 	bl	800f0f8 <Generic_Process>
#endif

#ifdef ENABLE_LIGHT_MODEL_SERVER  
  Lighting_Process();
 800704c:	f009 fce2 	bl	8010a14 <Lighting_Process>
#endif

#ifdef ENABLE_VENDOR_MODEL_SERVER  
  Vendor_Process();
 8007050:	f00d f89c 	bl	801418c <Vendor_Process>
#endif
  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LC   
  Light_LC_Process();
#endif
}
 8007054:	bf00      	nop
 8007056:	bd80      	pop	{r7, pc}

08007058 <BLEMesh_ModelsCommand>:
* @brief  Publish Command for Models
* @param  void
* @retval void
*/    
void BLEMesh_ModelsCommand(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  
      
/* if CLIENT and SERVER => Publish is already done in CLIENT */
#ifdef GENERIC_SERVER_MODEL_PUBLISH 
#ifndef GENERIC_CLIENT_MODEL_PUBLISH  
  Generic_Publish(BLEMesh_GetAddress());
 800705c:	f016 f80e 	bl	801d07c <BLEMesh_GetAddress>
 8007060:	4603      	mov	r3, r0
 8007062:	4618      	mov	r0, r3
 8007064:	f008 f9e0 	bl	800f428 <Generic_Publish>
#endif
#endif
}
 8007068:	bf00      	nop
 800706a:	bd80      	pop	{r7, pc}

0800706c <BLEMesh_ModelsDelayPacket>:
*/ 
void BLEMesh_ModelsDelayPacket(MODEL_MessageHeader_t *pmsgParams,
                               MOBLEUINT8 command, 
                               MOBLEUINT8 const * data, 
                               MOBLEUINT32 length)
{
 800706c:	b590      	push	{r4, r7, lr}
 800706e:	b089      	sub	sp, #36	; 0x24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	607a      	str	r2, [r7, #4]
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	460b      	mov	r3, r1
 800707a:	72fb      	strb	r3, [r7, #11]
  MOBLEUINT8 random_time[8];
  
  if (Appli_PendingPackets.packet_count == 0)
 800707c:	4b55      	ldr	r3, [pc, #340]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d136      	bne.n	80070f2 <BLEMesh_ModelsDelayPacket+0x86>
  {
    Appli_PendingPackets.packet_count = 1;
 8007084:	4b53      	ldr	r3, [pc, #332]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 8007086:	2201      	movs	r2, #1
 8007088:	701a      	strb	r2, [r3, #0]
    hci_le_rand(random_time);
 800708a:	f107 0314 	add.w	r3, r7, #20
 800708e:	4618      	mov	r0, r3
 8007090:	f00e fc2e 	bl	80158f0 <hci_le_rand>
    Appli_PendingPackets.send_time = Clock_Time() + 
 8007094:	f000 fef2 	bl	8007e7c <HAL_GetTick>
 8007098:	4601      	mov	r1, r0
      DEFAULT_DELAY_PACKET_FROM + 
        (random_time[0] + random_time[1]*256)\
 800709a:	7d3b      	ldrb	r3, [r7, #20]
 800709c:	461a      	mov	r2, r3
 800709e:	7d7b      	ldrb	r3, [r7, #21]
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	4413      	add	r3, r2
 80070a4:	461a      	mov	r2, r3
          %DEFAULT_DELAY_PACKET_RANDOM_TIME;    
 80070a6:	4b4c      	ldr	r3, [pc, #304]	; (80071d8 <BLEMesh_ModelsDelayPacket+0x16c>)
 80070a8:	fba3 0302 	umull	r0, r3, r3, r2
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80070b2:	fb00 f303 	mul.w	r3, r0, r3
 80070b6:	1ad3      	subs	r3, r2, r3
      DEFAULT_DELAY_PACKET_FROM + 
 80070b8:	440b      	add	r3, r1
 80070ba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    Appli_PendingPackets.send_time = Clock_Time() + 
 80070be:	4a45      	ldr	r2, [pc, #276]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 80070c0:	f8c2 3001 	str.w	r3, [r2, #1]
    Appli_PendingPackets.head = Appli_PendingPackets.packet;
 80070c4:	4b43      	ldr	r3, [pc, #268]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 80070c6:	4a45      	ldr	r2, [pc, #276]	; (80071dc <BLEMesh_ModelsDelayPacket+0x170>)
 80070c8:	f8c3 2005 	str.w	r2, [r3, #5]
    Appli_PendingPackets.head_index = 0;
 80070cc:	4b41      	ldr	r3, [pc, #260]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	725a      	strb	r2, [r3, #9]
    TRACE_M(TF_MISC, "Randomized time: %ld\n\r", Appli_PendingPackets.send_time - Clock_Time());
 80070d2:	2100      	movs	r1, #0
 80070d4:	4842      	ldr	r0, [pc, #264]	; (80071e0 <BLEMesh_ModelsDelayPacket+0x174>)
 80070d6:	f006 fa57 	bl	800d588 <TraceHeader>
 80070da:	4b3e      	ldr	r3, [pc, #248]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 80070dc:	f8d3 4001 	ldr.w	r4, [r3, #1]
 80070e0:	f000 fecc 	bl	8007e7c <HAL_GetTick>
 80070e4:	4603      	mov	r3, r0
 80070e6:	1ae3      	subs	r3, r4, r3
 80070e8:	4619      	mov	r1, r3
 80070ea:	483e      	ldr	r0, [pc, #248]	; (80071e4 <BLEMesh_ModelsDelayPacket+0x178>)
 80070ec:	f022 fb34 	bl	8029758 <iprintf>
 80070f0:	e02d      	b.n	800714e <BLEMesh_ModelsDelayPacket+0xe2>
  }
  else 
  {
    Appli_PendingPackets.packet_count += 1;
 80070f2:	4b38      	ldr	r3, [pc, #224]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	3301      	adds	r3, #1
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	4b36      	ldr	r3, [pc, #216]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 80070fc:	701a      	strb	r2, [r3, #0]
    Appli_PendingPackets.packet_count = (Appli_PendingPackets.packet_count)%\
 80070fe:	4b35      	ldr	r3, [pc, #212]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 8007100:	781a      	ldrb	r2, [r3, #0]
 8007102:	4b39      	ldr	r3, [pc, #228]	; (80071e8 <BLEMesh_ModelsDelayPacket+0x17c>)
 8007104:	fba3 1302 	umull	r1, r3, r3, r2
 8007108:	0859      	lsrs	r1, r3, #1
 800710a:	460b      	mov	r3, r1
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	440b      	add	r3, r1
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	b2da      	uxtb	r2, r3
 8007114:	4b2f      	ldr	r3, [pc, #188]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 8007116:	701a      	strb	r2, [r3, #0]
      (MAX_PENDING_PACKETS_QUE_SIZE+1);
    
    if (Appli_PendingPackets.head != (Appli_PendingPackets.packet + \
 8007118:	4b2e      	ldr	r3, [pc, #184]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 800711a:	f8d3 3005 	ldr.w	r3, [r3, #5]
      MAX_PENDING_PACKETS_QUE_SIZE - 1))
 800711e:	4a33      	ldr	r2, [pc, #204]	; (80071ec <BLEMesh_ModelsDelayPacket+0x180>)
    if (Appli_PendingPackets.head != (Appli_PendingPackets.packet + \
 8007120:	4293      	cmp	r3, r2
 8007122:	d00d      	beq.n	8007140 <BLEMesh_ModelsDelayPacket+0xd4>
    {
      Appli_PendingPackets.head = Appli_PendingPackets.head +1;
 8007124:	4b2b      	ldr	r3, [pc, #172]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 8007126:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800712a:	331c      	adds	r3, #28
 800712c:	4a29      	ldr	r2, [pc, #164]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 800712e:	f8c2 3005 	str.w	r3, [r2, #5]
      Appli_PendingPackets.head_index = Appli_PendingPackets.head_index+1;
 8007132:	4b28      	ldr	r3, [pc, #160]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 8007134:	7a5b      	ldrb	r3, [r3, #9]
 8007136:	3301      	adds	r3, #1
 8007138:	b2da      	uxtb	r2, r3
 800713a:	4b26      	ldr	r3, [pc, #152]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 800713c:	725a      	strb	r2, [r3, #9]
 800713e:	e006      	b.n	800714e <BLEMesh_ModelsDelayPacket+0xe2>
    }
    else
    {
      Appli_PendingPackets.head = Appli_PendingPackets.packet;
 8007140:	4b24      	ldr	r3, [pc, #144]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 8007142:	4a26      	ldr	r2, [pc, #152]	; (80071dc <BLEMesh_ModelsDelayPacket+0x170>)
 8007144:	f8c3 2005 	str.w	r2, [r3, #5]
      Appli_PendingPackets.head_index = 0;
 8007148:	4b22      	ldr	r3, [pc, #136]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 800714a:	2200      	movs	r2, #0
 800714c:	725a      	strb	r2, [r3, #9]
    }
  }  
  
  Appli_PendingPackets.head->peer = pmsgParams->peer_addr;
 800714e:	4b21      	ldr	r3, [pc, #132]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 8007150:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	8892      	ldrh	r2, [r2, #4]
 8007158:	801a      	strh	r2, [r3, #0]
  Appli_PendingPackets.head->dst = pmsgParams->dst_peer;
 800715a:	4b1e      	ldr	r3, [pc, #120]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 800715c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	88d2      	ldrh	r2, [r2, #6]
 8007164:	805a      	strh	r2, [r3, #2]
  Appli_PendingPackets.head->elementIndex = pmsgParams->elementIndex;
 8007166:	4b1b      	ldr	r3, [pc, #108]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 8007168:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	7812      	ldrb	r2, [r2, #0]
 8007170:	715a      	strb	r2, [r3, #5]
  Appli_PendingPackets.head->appKeyOffset = pmsgParams->rcvdAppKeyOffset;
 8007172:	4b18      	ldr	r3, [pc, #96]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 8007174:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	7a92      	ldrb	r2, [r2, #10]
 800717c:	719a      	strb	r2, [r3, #6]
  Appli_PendingPackets.head->netKeyOffset = pmsgParams->rcvdNetKeyOffset;
 800717e:	4b15      	ldr	r3, [pc, #84]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 8007180:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	7ad2      	ldrb	r2, [r2, #11]
 8007188:	71da      	strb	r2, [r3, #7]
  Appli_PendingPackets.head->command = command;
 800718a:	4b12      	ldr	r3, [pc, #72]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 800718c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007190:	7afa      	ldrb	r2, [r7, #11]
 8007192:	711a      	strb	r2, [r3, #4]
  Appli_PendingPackets.head->length = length;
 8007194:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 8007196:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	619a      	str	r2, [r3, #24]
  for (MOBLEUINT8 count=0; count<length; count++)
 800719e:	2300      	movs	r3, #0
 80071a0:	77fb      	strb	r3, [r7, #31]
 80071a2:	e00d      	b.n	80071c0 <BLEMesh_ModelsDelayPacket+0x154>
    Appli_PendingPackets.head->data[count] = data[count];
 80071a4:	7ffb      	ldrb	r3, [r7, #31]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	18d1      	adds	r1, r2, r3
 80071aa:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x168>)
 80071ac:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80071b0:	7ffb      	ldrb	r3, [r7, #31]
 80071b2:	7809      	ldrb	r1, [r1, #0]
 80071b4:	4413      	add	r3, r2
 80071b6:	460a      	mov	r2, r1
 80071b8:	721a      	strb	r2, [r3, #8]
  for (MOBLEUINT8 count=0; count<length; count++)
 80071ba:	7ffb      	ldrb	r3, [r7, #31]
 80071bc:	3301      	adds	r3, #1
 80071be:	77fb      	strb	r3, [r7, #31]
 80071c0:	7ffb      	ldrb	r3, [r7, #31]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d8ed      	bhi.n	80071a4 <BLEMesh_ModelsDelayPacket+0x138>
}   
 80071c8:	bf00      	nop
 80071ca:	bf00      	nop
 80071cc:	3724      	adds	r7, #36	; 0x24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd90      	pop	{r4, r7, pc}
 80071d2:	bf00      	nop
 80071d4:	200044e0 	.word	0x200044e0
 80071d8:	10624dd3 	.word	0x10624dd3
 80071dc:	200044ea 	.word	0x200044ea
 80071e0:	08032e48 	.word	0x08032e48
 80071e4:	0802ee8c 	.word	0x0802ee8c
 80071e8:	aaaaaaab 	.word	0xaaaaaaab
 80071ec:	20004506 	.word	0x20004506

080071f0 <BLEMesh_ModelsSendDelayedPacket>:
* @brief  If send timestamp is reached and que is not empty, send all packets
* @param  None
* @retval None
*/
void BLEMesh_ModelsSendDelayedPacket(void)
{
 80071f0:	b590      	push	{r4, r7, lr}
 80071f2:	b089      	sub	sp, #36	; 0x24
 80071f4:	af02      	add	r7, sp, #8
  APPLI_SEND_RESPONSE_MODULE* ptr;
  MODEL_MessageHeader_t msgParam;
  MOBLEUINT8 temp_index;
  
  if ((Appli_PendingPackets.packet_count != 0) && 
 80071f6:	4b2f      	ldr	r3, [pc, #188]	; (80072b4 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d055      	beq.n	80072aa <BLEMesh_ModelsSendDelayedPacket+0xba>
      (Appli_PendingPackets.send_time <= Clock_Time()))
 80071fe:	4b2d      	ldr	r3, [pc, #180]	; (80072b4 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 8007200:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8007204:	f000 fe3a 	bl	8007e7c <HAL_GetTick>
 8007208:	4603      	mov	r3, r0
  if ((Appli_PendingPackets.packet_count != 0) && 
 800720a:	429c      	cmp	r4, r3
 800720c:	d84d      	bhi.n	80072aa <BLEMesh_ModelsSendDelayedPacket+0xba>
  {
    for (MOBLEUINT8 count=Appli_PendingPackets.packet_count; count!=0; count--)
 800720e:	4b29      	ldr	r3, [pc, #164]	; (80072b4 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	75fb      	strb	r3, [r7, #23]
 8007214:	e043      	b.n	800729e <BLEMesh_ModelsSendDelayedPacket+0xae>
    {
    TRACE_M(TF_MISC, "Sending randomized packets. Packet count: %d \n\r",\
 8007216:	2100      	movs	r1, #0
 8007218:	4827      	ldr	r0, [pc, #156]	; (80072b8 <BLEMesh_ModelsSendDelayedPacket+0xc8>)
 800721a:	f006 f9b5 	bl	800d588 <TraceHeader>
 800721e:	4b25      	ldr	r3, [pc, #148]	; (80072b4 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	3301      	adds	r3, #1
 800722a:	4619      	mov	r1, r3
 800722c:	4823      	ldr	r0, [pc, #140]	; (80072bc <BLEMesh_ModelsSendDelayedPacket+0xcc>)
 800722e:	f022 fa93 	bl	8029758 <iprintf>
        Appli_PendingPackets.packet_count - count + 1);
      temp_index = ((Appli_PendingPackets.head_index+MAX_PENDING_PACKETS_QUE_SIZE+1)\
 8007232:	4b20      	ldr	r3, [pc, #128]	; (80072b4 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 8007234:	7a5b      	ldrb	r3, [r3, #9]
 8007236:	1cda      	adds	r2, r3, #3
        -count)%MAX_PENDING_PACKETS_QUE_SIZE;
 8007238:	7dfb      	ldrb	r3, [r7, #23]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	bfb8      	it	lt
 8007244:	425b      	neglt	r3, r3
      temp_index = ((Appli_PendingPackets.head_index+MAX_PENDING_PACKETS_QUE_SIZE+1)\
 8007246:	75bb      	strb	r3, [r7, #22]
      ptr = Appli_PendingPackets.packet + temp_index;
 8007248:	7dba      	ldrb	r2, [r7, #22]
 800724a:	4613      	mov	r3, r2
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	1a9b      	subs	r3, r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	461a      	mov	r2, r3
 8007254:	4b1a      	ldr	r3, [pc, #104]	; (80072c0 <BLEMesh_ModelsSendDelayedPacket+0xd0>)
 8007256:	4413      	add	r3, r2
 8007258:	613b      	str	r3, [r7, #16]
      
      /* Initialize the messageParam*/
      msgParam.dst_peer = ptr->dst;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	885b      	ldrh	r3, [r3, #2]
 800725e:	b29b      	uxth	r3, r3
 8007260:	817b      	strh	r3, [r7, #10]
      msgParam.peer_addr = ptr->peer;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	813b      	strh	r3, [r7, #8]
      msgParam.elementIndex = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	713b      	strb	r3, [r7, #4]
      msgParam.rcvdAppKeyOffset = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	73bb      	strb	r3, [r7, #14]
      msgParam.rcvdNetKeyOffset = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	73fb      	strb	r3, [r7, #15]
      msgParam.rssi = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	737b      	strb	r3, [r7, #13]
      msgParam.ttl = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	733b      	strb	r3, [r7, #12]
      
      VendorModel_SendResponse(VENDOR_STMICRO_CID, 
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	791a      	ldrb	r2, [r3, #4]
                               &msgParam,
                               ptr->command,
                               ptr->data,
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f103 0008 	add.w	r0, r3, #8
      VendorModel_SendResponse(VENDOR_STMICRO_CID, 
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	1d39      	adds	r1, r7, #4
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	4603      	mov	r3, r0
 8007292:	2030      	movs	r0, #48	; 0x30
 8007294:	f01e fb80 	bl	8025998 <VendorModel_SendResponse>
    for (MOBLEUINT8 count=Appli_PendingPackets.packet_count; count!=0; count--)
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	3b01      	subs	r3, #1
 800729c:	75fb      	strb	r3, [r7, #23]
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1b8      	bne.n	8007216 <BLEMesh_ModelsSendDelayedPacket+0x26>
                               ptr->length);
    }
    
    Appli_PendingPackets.packet_count = 0;
 80072a4:	4b03      	ldr	r3, [pc, #12]	; (80072b4 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	701a      	strb	r2, [r3, #0]
  }
}
 80072aa:	bf00      	nop
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd90      	pop	{r4, r7, pc}
 80072b2:	bf00      	nop
 80072b4:	200044e0 	.word	0x200044e0
 80072b8:	08032e64 	.word	0x08032e64
 80072bc:	0802eea4 	.word	0x0802eea4
 80072c0:	200044ea 	.word	0x200044ea

080072c4 <BLEMesh_ModelsASCII_To_Char>:
* @brief  Convert ASCII value into Character
* @param  tempValue : 8bit value for conversion
* @retval MOBLEUINT8 
*/         
MOBLEUINT8 BLEMesh_ModelsASCII_To_Char(MOBLEUINT8 tempValue)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	71fb      	strb	r3, [r7, #7]
  tempValue = tempValue - 0x30;
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	3b30      	subs	r3, #48	; 0x30
 80072d2:	71fb      	strb	r3, [r7, #7]
  return tempValue;
 80072d4:	79fb      	ldrb	r3, [r7, #7]
} 
 80072d6:	4618      	mov	r0, r3
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
	...

080072e4 <GetPage>:
  * @brief  Gets the page of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The page of a given address
  */
static MOBLEUINT32 GetPage(MOBLEUINT32 Addr)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  MOBLEUINT32 page = 0;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80072f0:	4b10      	ldr	r3, [pc, #64]	; (8007334 <GetPage+0x50>)
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	029a      	lsls	r2, r3, #10
 80072f6:	4b10      	ldr	r3, [pc, #64]	; (8007338 <GetPage+0x54>)
 80072f8:	4013      	ands	r3, r2
 80072fa:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	429a      	cmp	r2, r3
 8007302:	d205      	bcs.n	8007310 <GetPage+0x2c>
  {
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800730a:	0b1b      	lsrs	r3, r3, #12
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	e00a      	b.n	8007326 <GetPage+0x42>
  }
  else
  {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8007310:	4b08      	ldr	r3, [pc, #32]	; (8007334 <GetPage+0x50>)
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	029a      	lsls	r2, r3, #10
 8007316:	4b08      	ldr	r3, [pc, #32]	; (8007338 <GetPage+0x54>)
 8007318:	4013      	ands	r3, r2
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8007322:	0b1b      	lsrs	r3, r3, #12
 8007324:	60fb      	str	r3, [r7, #12]
  }

  return page;
 8007326:	68fb      	ldr	r3, [r7, #12]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	1fff75e0 	.word	0x1fff75e0
 8007338:	001ffc00 	.word	0x001ffc00

0800733c <PalNvmIsWriteProtected>:
* @brief  returns NVM write protect status
* @param  None
* @retval TRUE if flash is write protected
*/
MOBLEBOOL PalNvmIsWriteProtected(void)
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
    /* All flash is writable */
    return MOBLE_FALSE;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <PalNvmRead>:
*/
MOBLE_RESULT PalNvmRead(MOBLEUINT32 address,
                        void *buf, 
                        MOBLEUINT32 size, 
                        MOBLEBOOL backup)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	70fb      	strb	r3, [r7, #3]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800735a:	2300      	movs	r3, #0
 800735c:	75fb      	strb	r3, [r7, #23]
  
//  printf("MoblePalNvmRead >>>\r\n");  

  if (address > (NVM_BASE + NVM_SIZE))
 800735e:	4b13      	ldr	r3, [pc, #76]	; (80073ac <PalNvmRead+0x60>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	429a      	cmp	r2, r3
 800736a:	d902      	bls.n	8007372 <PalNvmRead+0x26>
  {
    result = MOBLE_RESULT_INVALIDARG;
 800736c:	2303      	movs	r3, #3
 800736e:	75fb      	strb	r3, [r7, #23]
 8007370:	e017      	b.n	80073a2 <PalNvmRead+0x56>
  }
  else if (size == 0)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d102      	bne.n	800737e <PalNvmRead+0x32>
  {
    result = MOBLE_RESULT_FALSE;
 8007378:	2301      	movs	r3, #1
 800737a:	75fb      	strb	r3, [r7, #23]
 800737c:	e011      	b.n	80073a2 <PalNvmRead+0x56>
  }
  else if ((address + size) > (NVM_BASE + NVM_SIZE))
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	441a      	add	r2, r3
 8007384:	4b09      	ldr	r3, [pc, #36]	; (80073ac <PalNvmRead+0x60>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800738c:	429a      	cmp	r2, r3
 800738e:	d902      	bls.n	8007396 <PalNvmRead+0x4a>
  {
    result = MOBLE_RESULT_INVALIDARG;
 8007390:	2303      	movs	r3, #3
 8007392:	75fb      	strb	r3, [r7, #23]
 8007394:	e005      	b.n	80073a2 <PalNvmRead+0x56>
  }
  else
  {
    memcpy(buf, (void *)(address), size);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	4619      	mov	r1, r3
 800739c:	68b8      	ldr	r0, [r7, #8]
 800739e:	f021 fbe7 	bl	8028b70 <memcpy>
  }
  
//  printf("MoblePalNvmRead <<<\r\n");  
  return result;
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20004448 	.word	0x20004448

080073b0 <PalNvmCompare>:
*/
MOBLE_RESULT PalNvmCompare(MOBLEUINT32 address,
                           void const *buf, 
                           MOBLEUINT32 size, 
                           MOBLE_NVM_COMPARE* comparison)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b089      	sub	sp, #36	; 0x24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 80073be:	2300      	movs	r3, #0
 80073c0:	77fb      	strb	r3, [r7, #31]
  MOBLEUINT32 i;

//  printf("MoblePalNvmCompare >>>\r\n");
  
  if ((comparison == NULL) || (buf == NULL))
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <PalNvmCompare+0x1e>
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d102      	bne.n	80073d4 <PalNvmCompare+0x24>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80073ce:	2303      	movs	r3, #3
 80073d0:	77fb      	strb	r3, [r7, #31]
 80073d2:	e055      	b.n	8007480 <PalNvmCompare+0xd0>
  }
  else if (address > (NVM_BASE + NVM_SIZE))
 80073d4:	4b2e      	ldr	r3, [pc, #184]	; (8007490 <PalNvmCompare+0xe0>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d902      	bls.n	80073e8 <PalNvmCompare+0x38>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80073e2:	2303      	movs	r3, #3
 80073e4:	77fb      	strb	r3, [r7, #31]
 80073e6:	e04b      	b.n	8007480 <PalNvmCompare+0xd0>
  }
  else if (size == 0)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d102      	bne.n	80073f4 <PalNvmCompare+0x44>
  {
    result = MOBLE_RESULT_FALSE;
 80073ee:	2301      	movs	r3, #1
 80073f0:	77fb      	strb	r3, [r7, #31]
 80073f2:	e045      	b.n	8007480 <PalNvmCompare+0xd0>
  }
  else if ((address + size) > (NVM_BASE + NVM_SIZE))
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	441a      	add	r2, r3
 80073fa:	4b25      	ldr	r3, [pc, #148]	; (8007490 <PalNvmCompare+0xe0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007402:	429a      	cmp	r2, r3
 8007404:	d902      	bls.n	800740c <PalNvmCompare+0x5c>
  {
    result = MOBLE_RESULT_INVALIDARG;
 8007406:	2303      	movs	r3, #3
 8007408:	77fb      	strb	r3, [r7, #31]
 800740a:	e039      	b.n	8007480 <PalNvmCompare+0xd0>
  }
  else if (address & 3)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <PalNvmCompare+0x6c>
  {
    result = MOBLE_RESULT_INVALIDARG;
 8007416:	2303      	movs	r3, #3
 8007418:	77fb      	strb	r3, [r7, #31]
 800741a:	e031      	b.n	8007480 <PalNvmCompare+0xd0>
  }
  else if (size & 3)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <PalNvmCompare+0x7c>
  {
    result = MOBLE_RESULT_INVALIDARG;
 8007426:	2303      	movs	r3, #3
 8007428:	77fb      	strb	r3, [r7, #31]
 800742a:	e029      	b.n	8007480 <PalNvmCompare+0xd0>
  }
  else
  {
    *comparison = MOBLE_NVM_COMPARE_EQUAL;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2200      	movs	r2, #0
 8007430:	701a      	strb	r2, [r3, #0]
    size >>= 2;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	089b      	lsrs	r3, r3, #2
 8007436:	607b      	str	r3, [r7, #4]

    MOBLEUINT32 * src = (MOBLEUINT32*)buf;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	617b      	str	r3, [r7, #20]
    MOBLEUINT32 * dst = (MOBLEUINT32*)(address);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	613b      	str	r3, [r7, #16]
    
    i = 0;
 8007440:	2300      	movs	r3, #0
 8007442:	61bb      	str	r3, [r7, #24]
    do
    {
      if ((src[i] != dst[i]) && (*comparison == MOBLE_NVM_COMPARE_EQUAL))
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4413      	add	r3, r2
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	6939      	ldr	r1, [r7, #16]
 8007454:	440b      	add	r3, r1
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d006      	beq.n	800746a <PalNvmCompare+0xba>
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d102      	bne.n	800746a <PalNvmCompare+0xba>
      {
        *comparison = MOBLE_NVM_COMPARE_NOT_EQUAL;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	2201      	movs	r2, #1
 8007468:	701a      	strb	r2, [r3, #0]
      }
      i++;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	3301      	adds	r3, #1
 800746e:	61bb      	str	r3, [r7, #24]
    } while((*comparison != MOBLE_NVM_COMPARE_NOT_EQUAL) && (i < size));
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d003      	beq.n	8007480 <PalNvmCompare+0xd0>
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	429a      	cmp	r2, r3
 800747e:	d3e1      	bcc.n	8007444 <PalNvmCompare+0x94>
  }
  
//  printf("MoblePalNvmCompare <<<\r\n");
  return result;
 8007480:	7ffb      	ldrb	r3, [r7, #31]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3724      	adds	r7, #36	; 0x24
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20004448 	.word	0x20004448

08007494 <PalNvmErase>:
* @param  None
* @retval Result
*/
MOBLE_RESULT PalNvmErase(MOBLEUINT32 address,
                         MOBLEUINT8 nb_pages)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]
  if(FD_EraseSectors(GetPage(address), nb_pages) != nb_pages)
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7ff ff1f 	bl	80072e4 <GetPage>
 80074a6:	4602      	mov	r2, r0
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	4619      	mov	r1, r3
 80074ac:	4610      	mov	r0, r2
 80074ae:	f7fa faf3 	bl	8001a98 <FD_EraseSectors>
 80074b2:	4602      	mov	r2, r0
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d001      	beq.n	80074be <PalNvmErase+0x2a>
  {
    return MOBLE_RESULT_FAIL;
 80074ba:	2302      	movs	r3, #2
 80074bc:	e000      	b.n	80074c0 <PalNvmErase+0x2c>
  }

  return MOBLE_RESULT_SUCCESS;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <PalNvmWrite>:
* @retval Result
*/
MOBLE_RESULT PalNvmWrite(MOBLEUINT32 address,
                          void const *buf, 
                          MOBLEUINT32 size)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 80074d4:	2300      	movs	r3, #0
 80074d6:	77fb      	strb	r3, [r7, #31]

  if (address > (NVM_BASE + NVM_SIZE))
 80074d8:	4b26      	ldr	r3, [pc, #152]	; (8007574 <PalNvmWrite+0xac>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d902      	bls.n	80074ec <PalNvmWrite+0x24>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80074e6:	2303      	movs	r3, #3
 80074e8:	77fb      	strb	r3, [r7, #31]
 80074ea:	e03d      	b.n	8007568 <PalNvmWrite+0xa0>
  }
  else if (size == 0)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d102      	bne.n	80074f8 <PalNvmWrite+0x30>
  {
    result = MOBLE_RESULT_FALSE;
 80074f2:	2301      	movs	r3, #1
 80074f4:	77fb      	strb	r3, [r7, #31]
 80074f6:	e037      	b.n	8007568 <PalNvmWrite+0xa0>
  }
  else if ((address + size) > (NVM_BASE + NVM_SIZE))
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	441a      	add	r2, r3
 80074fe:	4b1d      	ldr	r3, [pc, #116]	; (8007574 <PalNvmWrite+0xac>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007506:	429a      	cmp	r2, r3
 8007508:	d902      	bls.n	8007510 <PalNvmWrite+0x48>
  {
    result = MOBLE_RESULT_INVALIDARG;
 800750a:	2303      	movs	r3, #3
 800750c:	77fb      	strb	r3, [r7, #31]
 800750e:	e02b      	b.n	8007568 <PalNvmWrite+0xa0>
  }
  else if (address & 3)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f003 0303 	and.w	r3, r3, #3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <PalNvmWrite+0x58>
  {
    result = MOBLE_RESULT_INVALIDARG;
 800751a:	2303      	movs	r3, #3
 800751c:	77fb      	strb	r3, [r7, #31]
 800751e:	e023      	b.n	8007568 <PalNvmWrite+0xa0>
  }
  else if (size & 3)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <PalNvmWrite+0x68>
  {
    result = MOBLE_RESULT_INVALIDARG;
 800752a:	2303      	movs	r3, #3
 800752c:	77fb      	strb	r3, [r7, #31]
 800752e:	e01b      	b.n	8007568 <PalNvmWrite+0xa0>
  }
  else
  {
    MOBLEUINT32 remain = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]
    MOBLEUINT32 nb_dword = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	61bb      	str	r3, [r7, #24]
  
    nb_dword = (size >> 3);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	08db      	lsrs	r3, r3, #3
 800753c:	61bb      	str	r3, [r7, #24]
    remain = size - ((nb_dword) << 3);
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	617b      	str	r3, [r7, #20]
    if(remain > 0)
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <PalNvmWrite+0x8c>
      nb_dword += 1;
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	3301      	adds	r3, #1
 8007552:	61bb      	str	r3, [r7, #24]
    
  if(FD_WriteData(address, (uint64_t*)buf, nb_dword) != 0)
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	68b9      	ldr	r1, [r7, #8]
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f7fa fae3 	bl	8001b24 <FD_WriteData>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <PalNvmWrite+0xa0>
    result = MOBLE_RESULT_FAIL;
 8007564:	2302      	movs	r3, #2
 8007566:	77fb      	strb	r3, [r7, #31]
  }
  
  return result;
 8007568:	7ffb      	ldrb	r3, [r7, #31]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3720      	adds	r7, #32
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	20004448 	.word	0x20004448

08007578 <PalNvmProcess>:
* @brief  NVM process
* @param  None
* @retval Result
*/
MOBLE_RESULT PalNvmProcess(void)
{
 8007578:	b480      	push	{r7}
 800757a:	af00      	add	r7, sp, #0
  /* do nothing */
  return MOBLE_RESULT_SUCCESS;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007590:	4b06      	ldr	r3, [pc, #24]	; (80075ac <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007592:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007596:	4905      	ldr	r1, [pc, #20]	; (80075ac <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	58000800 	.word	0x58000800

080075b0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80075b8:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80075ba:	6a1a      	ldr	r2, [r3, #32]
 80075bc:	4904      	ldr	r1, [pc, #16]	; (80075d0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	620b      	str	r3, [r1, #32]
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	58000800 	.word	0x58000800

080075d4 <LL_PWR_EnableBootC2>:
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80075d8:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <LL_PWR_EnableBootC2+0x1c>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	4a04      	ldr	r2, [pc, #16]	; (80075f0 <LL_PWR_EnableBootC2+0x1c>)
 80075de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075e2:	60d3      	str	r3, [r2, #12]
}
 80075e4:	bf00      	nop
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	58000400 	.word	0x58000400

080075f4 <LL_AHB3_GRP1_EnableClock>:
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80075fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007602:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4313      	orrs	r3, r2
 800760a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800760c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007610:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4013      	ands	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007618:	68fb      	ldr	r3, [r7, #12]
}
 800761a:	bf00      	nop
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007626:	b480      	push	{r7}
 8007628:	b085      	sub	sp, #20
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800762e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007632:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8007636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4313      	orrs	r3, r2
 800763e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8007642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007646:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4013      	ands	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007650:	68fb      	ldr	r3, [r7, #12]
}
 8007652:	bf00      	nop
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <LL_C1_IPCC_EnableIT_TXF>:
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	601a      	str	r2, [r3, #0]
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <LL_C1_IPCC_EnableIT_RXO>:
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f043 0201 	orr.w	r2, r3, #1
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	601a      	str	r2, [r3, #0]
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <LL_C1_IPCC_EnableTransmitChannel>:
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	041b      	lsls	r3, r3, #16
 80076b0:	43db      	mvns	r3, r3
 80076b2:	401a      	ands	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	605a      	str	r2, [r3, #4]
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	041b      	lsls	r3, r3, #16
 80076d6:	431a      	orrs	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	605a      	str	r2, [r3, #4]
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	43db      	mvns	r3, r3
 80076fa:	401a      	ands	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	605a      	str	r2, [r3, #4]
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <LL_C1_IPCC_ClearFlag_CHx>:
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	609a      	str	r2, [r3, #8]
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <LL_C1_IPCC_SetFlag_CHx>:
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	041a      	lsls	r2, r3, #16
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	609a      	str	r2, [r3, #8]
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	4013      	ands	r3, r2
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	429a      	cmp	r2, r3
 800775c:	d101      	bne.n	8007762 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69da      	ldr	r2, [r3, #28]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	4013      	ands	r3, r2
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d101      	bne.n	800778c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8007788:	2301      	movs	r3, #1
 800778a:	e000      	b.n	800778e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
	...

0800779c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80077a0:	2102      	movs	r1, #2
 80077a2:	4819      	ldr	r0, [pc, #100]	; (8007808 <HW_IPCC_Rx_Handler+0x6c>)
 80077a4:	f7ff ffe4 	bl	8007770 <LL_C2_IPCC_IsActiveFlag_CHx>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d009      	beq.n	80077c2 <HW_IPCC_Rx_Handler+0x26>
 80077ae:	4b16      	ldr	r3, [pc, #88]	; (8007808 <HW_IPCC_Rx_Handler+0x6c>)
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	43db      	mvns	r3, r3
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80077bc:	f000 f8da 	bl	8007974 <HW_IPCC_SYS_EvtHandler>
 80077c0:	e01f      	b.n	8007802 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80077c2:	2101      	movs	r1, #1
 80077c4:	4810      	ldr	r0, [pc, #64]	; (8007808 <HW_IPCC_Rx_Handler+0x6c>)
 80077c6:	f7ff ffd3 	bl	8007770 <LL_C2_IPCC_IsActiveFlag_CHx>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d008      	beq.n	80077e2 <HW_IPCC_Rx_Handler+0x46>
 80077d0:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <HW_IPCC_Rx_Handler+0x6c>)
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d102      	bne.n	80077e2 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80077dc:	f000 f88e 	bl	80078fc <HW_IPCC_BLE_EvtHandler>
 80077e0:	e00f      	b.n	8007802 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80077e2:	2108      	movs	r1, #8
 80077e4:	4808      	ldr	r0, [pc, #32]	; (8007808 <HW_IPCC_Rx_Handler+0x6c>)
 80077e6:	f7ff ffc3 	bl	8007770 <LL_C2_IPCC_IsActiveFlag_CHx>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d009      	beq.n	8007804 <HW_IPCC_Rx_Handler+0x68>
 80077f0:	4b05      	ldr	r3, [pc, #20]	; (8007808 <HW_IPCC_Rx_Handler+0x6c>)
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	43db      	mvns	r3, r3
 80077f6:	f003 0308 	and.w	r3, r3, #8
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80077fe:	f000 f905 	bl	8007a0c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8007802:	bf00      	nop
 8007804:	bf00      	nop
}
 8007806:	bd80      	pop	{r7, pc}
 8007808:	58000c00 	.word	0x58000c00

0800780c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007810:	2102      	movs	r1, #2
 8007812:	481a      	ldr	r0, [pc, #104]	; (800787c <HW_IPCC_Tx_Handler+0x70>)
 8007814:	f7ff ff97 	bl	8007746 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d109      	bne.n	8007832 <HW_IPCC_Tx_Handler+0x26>
 800781e:	4b17      	ldr	r3, [pc, #92]	; (800787c <HW_IPCC_Tx_Handler+0x70>)
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	43db      	mvns	r3, r3
 8007824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800782c:	f000 f896 	bl	800795c <HW_IPCC_SYS_CmdEvtHandler>
 8007830:	e020      	b.n	8007874 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8007832:	2108      	movs	r1, #8
 8007834:	4811      	ldr	r0, [pc, #68]	; (800787c <HW_IPCC_Tx_Handler+0x70>)
 8007836:	f7ff ff86 	bl	8007746 <LL_C1_IPCC_IsActiveFlag_CHx>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d109      	bne.n	8007854 <HW_IPCC_Tx_Handler+0x48>
 8007840:	4b0e      	ldr	r3, [pc, #56]	; (800787c <HW_IPCC_Tx_Handler+0x70>)
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	43db      	mvns	r3, r3
 8007846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800784e:	f000 f8bf 	bl	80079d0 <HW_IPCC_MM_FreeBufHandler>
 8007852:	e00f      	b.n	8007874 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8007854:	2120      	movs	r1, #32
 8007856:	4809      	ldr	r0, [pc, #36]	; (800787c <HW_IPCC_Tx_Handler+0x70>)
 8007858:	f7ff ff75 	bl	8007746 <LL_C1_IPCC_IsActiveFlag_CHx>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d109      	bne.n	8007876 <HW_IPCC_Tx_Handler+0x6a>
 8007862:	4b06      	ldr	r3, [pc, #24]	; (800787c <HW_IPCC_Tx_Handler+0x70>)
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	43db      	mvns	r3, r3
 8007868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8007870:	f000 f850 	bl	8007914 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8007874:	bf00      	nop
 8007876:	bf00      	nop
}
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	58000c00 	.word	0x58000c00

08007880 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8007884:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007888:	f7ff fecd 	bl	8007626 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800788c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007890:	f7ff fe8e 	bl	80075b0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8007894:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007898:	f7ff fe76 	bl	8007588 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800789c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800789e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80078a0:	f7ff fe98 	bl	80075d4 <LL_PWR_EnableBootC2>

  return;
 80078a4:	bf00      	nop
}
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80078ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80078b0:	f7ff fea0 	bl	80075f4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80078b4:	4806      	ldr	r0, [pc, #24]	; (80078d0 <HW_IPCC_Init+0x28>)
 80078b6:	f7ff fee2 	bl	800767e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80078ba:	4805      	ldr	r0, [pc, #20]	; (80078d0 <HW_IPCC_Init+0x28>)
 80078bc:	f7ff fecf 	bl	800765e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80078c0:	202c      	movs	r0, #44	; 0x2c
 80078c2:	f000 fc60 	bl	8008186 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80078c6:	202d      	movs	r0, #45	; 0x2d
 80078c8:	f000 fc5d 	bl	8008186 <HAL_NVIC_EnableIRQ>

  return;
 80078cc:	bf00      	nop
}
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	58000c00 	.word	0x58000c00

080078d4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80078d8:	2101      	movs	r1, #1
 80078da:	4802      	ldr	r0, [pc, #8]	; (80078e4 <HW_IPCC_BLE_Init+0x10>)
 80078dc:	f7ff ff04 	bl	80076e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80078e0:	bf00      	nop
}
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	58000c00 	.word	0x58000c00

080078e8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80078ec:	2101      	movs	r1, #1
 80078ee:	4802      	ldr	r0, [pc, #8]	; (80078f8 <HW_IPCC_BLE_SendCmd+0x10>)
 80078f0:	f7ff ff1a 	bl	8007728 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80078f4:	bf00      	nop
}
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	58000c00 	.word	0x58000c00

080078fc <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8007900:	f00e fd5c 	bl	80163bc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007904:	2101      	movs	r1, #1
 8007906:	4802      	ldr	r0, [pc, #8]	; (8007910 <HW_IPCC_BLE_EvtHandler+0x14>)
 8007908:	f7ff ff00 	bl	800770c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800790c:	bf00      	nop
}
 800790e:	bd80      	pop	{r7, pc}
 8007910:	58000c00 	.word	0x58000c00

08007914 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8007918:	2120      	movs	r1, #32
 800791a:	4803      	ldr	r0, [pc, #12]	; (8007928 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800791c:	f7ff fed2 	bl	80076c4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8007920:	f00e fd7c 	bl	801641c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8007924:	bf00      	nop
}
 8007926:	bd80      	pop	{r7, pc}
 8007928:	58000c00 	.word	0x58000c00

0800792c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007930:	2102      	movs	r1, #2
 8007932:	4802      	ldr	r0, [pc, #8]	; (800793c <HW_IPCC_SYS_Init+0x10>)
 8007934:	f7ff fed8 	bl	80076e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007938:	bf00      	nop
}
 800793a:	bd80      	pop	{r7, pc}
 800793c:	58000c00 	.word	0x58000c00

08007940 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007944:	2102      	movs	r1, #2
 8007946:	4804      	ldr	r0, [pc, #16]	; (8007958 <HW_IPCC_SYS_SendCmd+0x18>)
 8007948:	f7ff feee 	bl	8007728 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800794c:	2102      	movs	r1, #2
 800794e:	4802      	ldr	r0, [pc, #8]	; (8007958 <HW_IPCC_SYS_SendCmd+0x18>)
 8007950:	f7ff fea5 	bl	800769e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8007954:	bf00      	nop
}
 8007956:	bd80      	pop	{r7, pc}
 8007958:	58000c00 	.word	0x58000c00

0800795c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007960:	2102      	movs	r1, #2
 8007962:	4803      	ldr	r0, [pc, #12]	; (8007970 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8007964:	f7ff feae 	bl	80076c4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8007968:	f00e fda8 	bl	80164bc <HW_IPCC_SYS_CmdEvtNot>

  return;
 800796c:	bf00      	nop
}
 800796e:	bd80      	pop	{r7, pc}
 8007970:	58000c00 	.word	0x58000c00

08007974 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8007978:	f00e fdb6 	bl	80164e8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800797c:	2102      	movs	r1, #2
 800797e:	4802      	ldr	r0, [pc, #8]	; (8007988 <HW_IPCC_SYS_EvtHandler+0x14>)
 8007980:	f7ff fec4 	bl	800770c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007984:	bf00      	nop
}
 8007986:	bd80      	pop	{r7, pc}
 8007988:	58000c00 	.word	0x58000c00

0800798c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8007994:	2108      	movs	r1, #8
 8007996:	480c      	ldr	r0, [pc, #48]	; (80079c8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007998:	f7ff fed5 	bl	8007746 <LL_C1_IPCC_IsActiveFlag_CHx>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d007      	beq.n	80079b2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80079a2:	4a0a      	ldr	r2, [pc, #40]	; (80079cc <HW_IPCC_MM_SendFreeBuf+0x40>)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80079a8:	2108      	movs	r1, #8
 80079aa:	4807      	ldr	r0, [pc, #28]	; (80079c8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80079ac:	f7ff fe77 	bl	800769e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80079b0:	e006      	b.n	80079c0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80079b6:	2108      	movs	r1, #8
 80079b8:	4803      	ldr	r0, [pc, #12]	; (80079c8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80079ba:	f7ff feb5 	bl	8007728 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80079be:	bf00      	nop
}
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	58000c00 	.word	0x58000c00
 80079cc:	20004524 	.word	0x20004524

080079d0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80079d4:	2108      	movs	r1, #8
 80079d6:	4806      	ldr	r0, [pc, #24]	; (80079f0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80079d8:	f7ff fe74 	bl	80076c4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80079dc:	4b05      	ldr	r3, [pc, #20]	; (80079f4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80079e2:	2108      	movs	r1, #8
 80079e4:	4802      	ldr	r0, [pc, #8]	; (80079f0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80079e6:	f7ff fe9f 	bl	8007728 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80079ea:	bf00      	nop
}
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	58000c00 	.word	0x58000c00
 80079f4:	20004524 	.word	0x20004524

080079f8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80079fc:	2108      	movs	r1, #8
 80079fe:	4802      	ldr	r0, [pc, #8]	; (8007a08 <HW_IPCC_TRACES_Init+0x10>)
 8007a00:	f7ff fe72 	bl	80076e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007a04:	bf00      	nop
}
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	58000c00 	.word	0x58000c00

08007a0c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8007a10:	f00e fe12 	bl	8016638 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007a14:	2108      	movs	r1, #8
 8007a16:	4802      	ldr	r0, [pc, #8]	; (8007a20 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8007a18:	f7ff fe78 	bl	800770c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007a1c:	bf00      	nop
}
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	58000c00 	.word	0x58000c00

08007a24 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8007a24:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a26:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a28:	3304      	adds	r3, #4

08007a2a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007a2a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007a2c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8007a2e:	d3f9      	bcc.n	8007a24 <CopyDataInit>
  bx lr
 8007a30:	4770      	bx	lr

08007a32 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8007a32:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8007a34:	3004      	adds	r0, #4

08007a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8007a36:	4288      	cmp	r0, r1
  bcc FillZerobss
 8007a38:	d3fb      	bcc.n	8007a32 <FillZerobss>
  bx lr
 8007a3a:	4770      	bx	lr

08007a3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007a3c:	480c      	ldr	r0, [pc, #48]	; (8007a70 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8007a3e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007a40:	f000 f938 	bl	8007cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8007a44:	480b      	ldr	r0, [pc, #44]	; (8007a74 <LoopForever+0x8>)
 8007a46:	490c      	ldr	r1, [pc, #48]	; (8007a78 <LoopForever+0xc>)
 8007a48:	4a0c      	ldr	r2, [pc, #48]	; (8007a7c <LoopForever+0x10>)
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f7ff ffed 	bl	8007a2a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8007a50:	480b      	ldr	r0, [pc, #44]	; (8007a80 <LoopForever+0x14>)
 8007a52:	490c      	ldr	r1, [pc, #48]	; (8007a84 <LoopForever+0x18>)
 8007a54:	2300      	movs	r3, #0
 8007a56:	f7ff ffee 	bl	8007a36 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8007a5a:	480b      	ldr	r0, [pc, #44]	; (8007a88 <LoopForever+0x1c>)
 8007a5c:	490b      	ldr	r1, [pc, #44]	; (8007a8c <LoopForever+0x20>)
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f7ff ffe9 	bl	8007a36 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007a64:	f021 f850 	bl	8028b08 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8007a68:	f7fb f8e4 	bl	8002c34 <main>

08007a6c <LoopForever>:

LoopForever:
  b LoopForever
 8007a6c:	e7fe      	b.n	8007a6c <LoopForever>
 8007a6e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8007a70:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007a74:	20000008 	.word	0x20000008
 8007a78:	2000029c 	.word	0x2000029c
 8007a7c:	08034388 	.word	0x08034388
  INIT_BSS _sbss, _ebss
 8007a80:	200002fc 	.word	0x200002fc
 8007a84:	20007fbc 	.word	0x20007fbc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8007a88:	200301e4 	.word	0x200301e4
 8007a8c:	20030a67 	.word	0x20030a67

08007a90 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007a90:	e7fe      	b.n	8007a90 <ADC1_IRQHandler>

08007a92 <LL_AHB2_GRP1_EnableClock>:
{
 8007a92:	b480      	push	{r7}
 8007a94:	b085      	sub	sp, #20
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007aa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
}
 8007ab8:	bf00      	nop
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b088      	sub	sp, #32
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8007ace:	f107 030c 	add.w	r3, r7, #12
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	605a      	str	r2, [r3, #4]
 8007ad8:	609a      	str	r2, [r3, #8]
 8007ada:	60da      	str	r2, [r3, #12]
 8007adc:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8007ade:	2002      	movs	r0, #2
 8007ae0:	f7ff ffd7 	bl	8007a92 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8007ae4:	79fb      	ldrb	r3, [r7, #7]
 8007ae6:	4a12      	ldr	r2, [pc, #72]	; (8007b30 <BSP_LED_Init+0x6c>)
 8007ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aec:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007aee:	2301      	movs	r3, #1
 8007af0:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8007af2:	2300      	movs	r3, #0
 8007af4:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007af6:	2302      	movs	r3, #2
 8007af8:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	4a0d      	ldr	r2, [pc, #52]	; (8007b34 <BSP_LED_Init+0x70>)
 8007afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b02:	f107 020c 	add.w	r2, r7, #12
 8007b06:	4611      	mov	r1, r2
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f001 f8ef 	bl	8008cec <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	4a08      	ldr	r2, [pc, #32]	; (8007b34 <BSP_LED_Init+0x70>)
 8007b12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	4a05      	ldr	r2, [pc, #20]	; (8007b30 <BSP_LED_Init+0x6c>)
 8007b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	4619      	mov	r1, r3
 8007b22:	f001 fa6b 	bl	8008ffc <HAL_GPIO_WritePin>
}
 8007b26:	bf00      	nop
 8007b28:	3720      	adds	r7, #32
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	08032e84 	.word	0x08032e84
 8007b34:	20000080 	.word	0x20000080

08007b38 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	4a07      	ldr	r2, [pc, #28]	; (8007b64 <BSP_LED_On+0x2c>)
 8007b46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	4a06      	ldr	r2, [pc, #24]	; (8007b68 <BSP_LED_On+0x30>)
 8007b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b52:	2201      	movs	r2, #1
 8007b54:	4619      	mov	r1, r3
 8007b56:	f001 fa51 	bl	8008ffc <HAL_GPIO_WritePin>
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20000080 	.word	0x20000080
 8007b68:	08032e84 	.word	0x08032e84

08007b6c <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	4a07      	ldr	r2, [pc, #28]	; (8007b98 <BSP_LED_Off+0x2c>)
 8007b7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	4a06      	ldr	r2, [pc, #24]	; (8007b9c <BSP_LED_Off+0x30>)
 8007b82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b86:	2200      	movs	r2, #0
 8007b88:	4619      	mov	r1, r3
 8007b8a:	f001 fa37 	bl	8008ffc <HAL_GPIO_WritePin>
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20000080 	.word	0x20000080
 8007b9c:	08032e84 	.word	0x08032e84

08007ba0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	460a      	mov	r2, r1
 8007baa:	71fb      	strb	r3, [r7, #7]
 8007bac:	4613      	mov	r3, r2
 8007bae:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8007bb0:	f107 030c 	add.w	r3, r7, #12
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	605a      	str	r2, [r3, #4]
 8007bba:	609a      	str	r2, [r3, #8]
 8007bbc:	60da      	str	r2, [r3, #12]
 8007bbe:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d103      	bne.n	8007bce <BSP_PB_Init+0x2e>
 8007bc6:	2004      	movs	r0, #4
 8007bc8:	f7ff ff63 	bl	8007a92 <LL_AHB2_GRP1_EnableClock>
 8007bcc:	e00c      	b.n	8007be8 <BSP_PB_Init+0x48>
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d103      	bne.n	8007bdc <BSP_PB_Init+0x3c>
 8007bd4:	2008      	movs	r0, #8
 8007bd6:	f7ff ff5c 	bl	8007a92 <LL_AHB2_GRP1_EnableClock>
 8007bda:	e005      	b.n	8007be8 <BSP_PB_Init+0x48>
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d102      	bne.n	8007be8 <BSP_PB_Init+0x48>
 8007be2:	2008      	movs	r0, #8
 8007be4:	f7ff ff55 	bl	8007a92 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8007be8:	79bb      	ldrb	r3, [r7, #6]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d117      	bne.n	8007c1e <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	4a20      	ldr	r2, [pc, #128]	; (8007c74 <BSP_PB_Init+0xd4>)
 8007bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bf6:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007c00:	2302      	movs	r3, #2
 8007c02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	4a1c      	ldr	r2, [pc, #112]	; (8007c78 <BSP_PB_Init+0xd8>)
 8007c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c0c:	f107 020c 	add.w	r2, r7, #12
 8007c10:	4611      	mov	r1, r2
 8007c12:	4618      	mov	r0, r3
 8007c14:	f001 f86a 	bl	8008cec <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8007c18:	2001      	movs	r0, #1
 8007c1a:	f7f9 fe72 	bl	8001902 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8007c1e:	79bb      	ldrb	r3, [r7, #6]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d123      	bne.n	8007c6c <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	4a13      	ldr	r2, [pc, #76]	; (8007c74 <BSP_PB_Init+0xd4>)
 8007c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c2c:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8007c32:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8007c36:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	4a0f      	ldr	r2, [pc, #60]	; (8007c78 <BSP_PB_Init+0xd8>)
 8007c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c40:	f107 020c 	add.w	r2, r7, #12
 8007c44:	4611      	mov	r1, r2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f001 f850 	bl	8008cec <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	4a0b      	ldr	r2, [pc, #44]	; (8007c7c <BSP_PB_Init+0xdc>)
 8007c50:	5cd3      	ldrb	r3, [r2, r3]
 8007c52:	b25b      	sxtb	r3, r3
 8007c54:	2200      	movs	r2, #0
 8007c56:	210f      	movs	r1, #15
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fa7a 	bl	8008152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	4a06      	ldr	r2, [pc, #24]	; (8007c7c <BSP_PB_Init+0xdc>)
 8007c62:	5cd3      	ldrb	r3, [r2, r3]
 8007c64:	b25b      	sxtb	r3, r3
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 fa8d 	bl	8008186 <HAL_NVIC_EnableIRQ>
  }
}
 8007c6c:	bf00      	nop
 8007c6e:	3720      	adds	r7, #32
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	08032e8c 	.word	0x08032e8c
 8007c78:	2000008c 	.word	0x2000008c
 8007c7c:	08032e94 	.word	0x08032e94

08007c80 <BSP_PB_GetState>:
  *     @arg BUTTON_SW2
  *     @arg BUTTON_SW3
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8007c8a:	79fb      	ldrb	r3, [r7, #7]
 8007c8c:	4a07      	ldr	r2, [pc, #28]	; (8007cac <BSP_PB_GetState+0x2c>)
 8007c8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	4906      	ldr	r1, [pc, #24]	; (8007cb0 <BSP_PB_GetState+0x30>)
 8007c96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	f001 f995 	bl	8008fcc <HAL_GPIO_ReadPin>
 8007ca2:	4603      	mov	r3, r0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	2000008c 	.word	0x2000008c
 8007cb0:	08032e8c 	.word	0x08032e8c

08007cb4 <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8007cb8:	4b26      	ldr	r3, [pc, #152]	; (8007d54 <SystemInit+0xa0>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	609a      	str	r2, [r3, #8]
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8007cbe:	4b25      	ldr	r3, [pc, #148]	; (8007d54 <SystemInit+0xa0>)
 8007cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc4:	4a23      	ldr	r2, [pc, #140]	; (8007d54 <SystemInit+0xa0>)
 8007cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cd8:	f043 0301 	orr.w	r3, r3, #1
 8007cdc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8007cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ce2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8007ce6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8007ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cf2:	4b19      	ldr	r3, [pc, #100]	; (8007d58 <SystemInit+0xa4>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8007cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d04:	f023 0305 	bic.w	r3, r3, #5
 8007d08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d18:	f023 0301 	bic.w	r3, r3, #1
 8007d1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8007d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d24:	4a0d      	ldr	r2, [pc, #52]	; (8007d5c <SystemInit+0xa8>)
 8007d26:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8007d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d2c:	4a0b      	ldr	r2, [pc, #44]	; (8007d5c <SystemInit+0xa8>)
 8007d2e:	611a      	str	r2, [r3, #16]
#endif

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d44:	2200      	movs	r2, #0
 8007d46:	619a      	str	r2, [r3, #24]
}
 8007d48:	bf00      	nop
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	e000ed00 	.word	0xe000ed00
 8007d58:	faf6fefb 	.word	0xfaf6fefb
 8007d5c:	22041000 	.word	0x22041000

08007d60 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8007d60:	b480      	push	{r7}
 8007d62:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8007d64:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	4a04      	ldr	r2, [pc, #16]	; (8007d7c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8007d6a:	f043 0301 	orr.w	r3, r3, #1
 8007d6e:	6053      	str	r3, [r2, #4]
}
 8007d70:	bf00      	nop
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	e0042000 	.word	0xe0042000

08007d80 <LL_DBGMCU_EnableDBGStopMode>:
{
 8007d80:	b480      	push	{r7}
 8007d82:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8007d84:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	4a04      	ldr	r2, [pc, #16]	; (8007d9c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8007d8a:	f043 0302 	orr.w	r3, r3, #2
 8007d8e:	6053      	str	r3, [r2, #4]
}
 8007d90:	bf00      	nop
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	e0042000 	.word	0xe0042000

08007da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007daa:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <HAL_Init+0x3c>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a0b      	ldr	r2, [pc, #44]	; (8007ddc <HAL_Init+0x3c>)
 8007db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007db4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007db6:	2003      	movs	r0, #3
 8007db8:	f000 f9c0 	bl	800813c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f000 f80f 	bl	8007de0 <HAL_InitTick>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	71fb      	strb	r3, [r7, #7]
 8007dcc:	e001      	b.n	8007dd2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007dce:	f7fb f942 	bl	8003056 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007dd2:	79fb      	ldrb	r3, [r7, #7]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	58004000 	.word	0x58004000

08007de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007dec:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <HAL_InitTick+0x6c>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d024      	beq.n	8007e3e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007df4:	f002 fa90 	bl	800a318 <HAL_RCC_GetHCLKFreq>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	4b14      	ldr	r3, [pc, #80]	; (8007e4c <HAL_InitTick+0x6c>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e04:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 f9d6 	bl	80081be <HAL_SYSTICK_Config>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10f      	bne.n	8007e38 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b0f      	cmp	r3, #15
 8007e1c:	d809      	bhi.n	8007e32 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e1e:	2200      	movs	r2, #0
 8007e20:	6879      	ldr	r1, [r7, #4]
 8007e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e26:	f000 f994 	bl	8008152 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007e2a:	4a09      	ldr	r2, [pc, #36]	; (8007e50 <HAL_InitTick+0x70>)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	e007      	b.n	8007e42 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	73fb      	strb	r3, [r7, #15]
 8007e36:	e004      	b.n	8007e42 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
 8007e3c:	e001      	b.n	8007e42 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	200000a0 	.word	0x200000a0
 8007e50:	2000009c 	.word	0x2000009c

08007e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007e58:	4b06      	ldr	r3, [pc, #24]	; (8007e74 <HAL_IncTick+0x20>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <HAL_IncTick+0x24>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4413      	add	r3, r2
 8007e64:	4a04      	ldr	r2, [pc, #16]	; (8007e78 <HAL_IncTick+0x24>)
 8007e66:	6013      	str	r3, [r2, #0]
}
 8007e68:	bf00      	nop
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	200000a0 	.word	0x200000a0
 8007e78:	20004528 	.word	0x20004528

08007e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8007e80:	4b03      	ldr	r3, [pc, #12]	; (8007e90 <HAL_GetTick+0x14>)
 8007e82:	681b      	ldr	r3, [r3, #0]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	20004528 	.word	0x20004528

08007e94 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007e98:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <HAL_GetTickPrio+0x14>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	2000009c 	.word	0x2000009c

08007eac <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007eb0:	4b03      	ldr	r3, [pc, #12]	; (8007ec0 <HAL_GetTickFreq+0x14>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	200000a0 	.word	0x200000a0

08007ec4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8007ec8:	f7ff ff4a 	bl	8007d60 <LL_DBGMCU_EnableDBGSleepMode>
}
 8007ecc:	bf00      	nop
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8007ed4:	f7ff ff54 	bl	8007d80 <LL_DBGMCU_EnableDBGStopMode>
}
 8007ed8:	bf00      	nop
 8007eda:	bd80      	pop	{r7, pc}

08007edc <__NVIC_SetPriorityGrouping>:
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f003 0307 	and.w	r3, r3, #7
 8007eea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007eec:	4b0c      	ldr	r3, [pc, #48]	; (8007f20 <__NVIC_SetPriorityGrouping+0x44>)
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ef8:	4013      	ands	r3, r2
 8007efa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f0e:	4a04      	ldr	r2, [pc, #16]	; (8007f20 <__NVIC_SetPriorityGrouping+0x44>)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	60d3      	str	r3, [r2, #12]
}
 8007f14:	bf00      	nop
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	e000ed00 	.word	0xe000ed00

08007f24 <__NVIC_GetPriorityGrouping>:
{
 8007f24:	b480      	push	{r7}
 8007f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f28:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <__NVIC_GetPriorityGrouping+0x18>)
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	0a1b      	lsrs	r3, r3, #8
 8007f2e:	f003 0307 	and.w	r3, r3, #7
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	e000ed00 	.word	0xe000ed00

08007f40 <__NVIC_EnableIRQ>:
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	db0b      	blt.n	8007f6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f52:	79fb      	ldrb	r3, [r7, #7]
 8007f54:	f003 021f 	and.w	r2, r3, #31
 8007f58:	4907      	ldr	r1, [pc, #28]	; (8007f78 <__NVIC_EnableIRQ+0x38>)
 8007f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f5e:	095b      	lsrs	r3, r3, #5
 8007f60:	2001      	movs	r0, #1
 8007f62:	fa00 f202 	lsl.w	r2, r0, r2
 8007f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007f6a:	bf00      	nop
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	e000e100 	.word	0xe000e100

08007f7c <__NVIC_DisableIRQ>:
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	db12      	blt.n	8007fb4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	f003 021f 	and.w	r2, r3, #31
 8007f94:	490a      	ldr	r1, [pc, #40]	; (8007fc0 <__NVIC_DisableIRQ+0x44>)
 8007f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f9a:	095b      	lsrs	r3, r3, #5
 8007f9c:	2001      	movs	r0, #1
 8007f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8007fa2:	3320      	adds	r3, #32
 8007fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007fa8:	f3bf 8f4f 	dsb	sy
}
 8007fac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007fae:	f3bf 8f6f 	isb	sy
}
 8007fb2:	bf00      	nop
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	e000e100 	.word	0xe000e100

08007fc4 <__NVIC_SetPendingIRQ>:
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	4603      	mov	r3, r0
 8007fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	db0c      	blt.n	8007ff0 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fd6:	79fb      	ldrb	r3, [r7, #7]
 8007fd8:	f003 021f 	and.w	r2, r3, #31
 8007fdc:	4907      	ldr	r1, [pc, #28]	; (8007ffc <__NVIC_SetPendingIRQ+0x38>)
 8007fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fe2:	095b      	lsrs	r3, r3, #5
 8007fe4:	2001      	movs	r0, #1
 8007fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8007fea:	3340      	adds	r3, #64	; 0x40
 8007fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	e000e100 	.word	0xe000e100

08008000 <__NVIC_ClearPendingIRQ>:
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800800a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800800e:	2b00      	cmp	r3, #0
 8008010:	db0c      	blt.n	800802c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	f003 021f 	and.w	r2, r3, #31
 8008018:	4907      	ldr	r1, [pc, #28]	; (8008038 <__NVIC_ClearPendingIRQ+0x38>)
 800801a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800801e:	095b      	lsrs	r3, r3, #5
 8008020:	2001      	movs	r0, #1
 8008022:	fa00 f202 	lsl.w	r2, r0, r2
 8008026:	3360      	adds	r3, #96	; 0x60
 8008028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	e000e100 	.word	0xe000e100

0800803c <__NVIC_SetPriority>:
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	6039      	str	r1, [r7, #0]
 8008046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800804c:	2b00      	cmp	r3, #0
 800804e:	db0a      	blt.n	8008066 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	b2da      	uxtb	r2, r3
 8008054:	490c      	ldr	r1, [pc, #48]	; (8008088 <__NVIC_SetPriority+0x4c>)
 8008056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800805a:	0112      	lsls	r2, r2, #4
 800805c:	b2d2      	uxtb	r2, r2
 800805e:	440b      	add	r3, r1
 8008060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008064:	e00a      	b.n	800807c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	b2da      	uxtb	r2, r3
 800806a:	4908      	ldr	r1, [pc, #32]	; (800808c <__NVIC_SetPriority+0x50>)
 800806c:	79fb      	ldrb	r3, [r7, #7]
 800806e:	f003 030f 	and.w	r3, r3, #15
 8008072:	3b04      	subs	r3, #4
 8008074:	0112      	lsls	r2, r2, #4
 8008076:	b2d2      	uxtb	r2, r2
 8008078:	440b      	add	r3, r1
 800807a:	761a      	strb	r2, [r3, #24]
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	e000e100 	.word	0xe000e100
 800808c:	e000ed00 	.word	0xe000ed00

08008090 <NVIC_EncodePriority>:
{
 8008090:	b480      	push	{r7}
 8008092:	b089      	sub	sp, #36	; 0x24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f003 0307 	and.w	r3, r3, #7
 80080a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	f1c3 0307 	rsb	r3, r3, #7
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	bf28      	it	cs
 80080ae:	2304      	movcs	r3, #4
 80080b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	3304      	adds	r3, #4
 80080b6:	2b06      	cmp	r3, #6
 80080b8:	d902      	bls.n	80080c0 <NVIC_EncodePriority+0x30>
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	3b03      	subs	r3, #3
 80080be:	e000      	b.n	80080c2 <NVIC_EncodePriority+0x32>
 80080c0:	2300      	movs	r3, #0
 80080c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	fa02 f303 	lsl.w	r3, r2, r3
 80080ce:	43da      	mvns	r2, r3
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	401a      	ands	r2, r3
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	fa01 f303 	lsl.w	r3, r1, r3
 80080e2:	43d9      	mvns	r1, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080e8:	4313      	orrs	r3, r2
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3724      	adds	r7, #36	; 0x24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
	...

080080f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3b01      	subs	r3, #1
 8008104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008108:	d301      	bcc.n	800810e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800810a:	2301      	movs	r3, #1
 800810c:	e00f      	b.n	800812e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800810e:	4a0a      	ldr	r2, [pc, #40]	; (8008138 <SysTick_Config+0x40>)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3b01      	subs	r3, #1
 8008114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008116:	210f      	movs	r1, #15
 8008118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800811c:	f7ff ff8e 	bl	800803c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008120:	4b05      	ldr	r3, [pc, #20]	; (8008138 <SysTick_Config+0x40>)
 8008122:	2200      	movs	r2, #0
 8008124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008126:	4b04      	ldr	r3, [pc, #16]	; (8008138 <SysTick_Config+0x40>)
 8008128:	2207      	movs	r2, #7
 800812a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	e000e010 	.word	0xe000e010

0800813c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff fec9 	bl	8007edc <__NVIC_SetPriorityGrouping>
}
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b086      	sub	sp, #24
 8008156:	af00      	add	r7, sp, #0
 8008158:	4603      	mov	r3, r0
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
 800815e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008160:	f7ff fee0 	bl	8007f24 <__NVIC_GetPriorityGrouping>
 8008164:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	68b9      	ldr	r1, [r7, #8]
 800816a:	6978      	ldr	r0, [r7, #20]
 800816c:	f7ff ff90 	bl	8008090 <NVIC_EncodePriority>
 8008170:	4602      	mov	r2, r0
 8008172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008176:	4611      	mov	r1, r2
 8008178:	4618      	mov	r0, r3
 800817a:	f7ff ff5f 	bl	800803c <__NVIC_SetPriority>
}
 800817e:	bf00      	nop
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b082      	sub	sp, #8
 800818a:	af00      	add	r7, sp, #0
 800818c:	4603      	mov	r3, r0
 800818e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008194:	4618      	mov	r0, r3
 8008196:	f7ff fed3 	bl	8007f40 <__NVIC_EnableIRQ>
}
 800819a:	bf00      	nop
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b082      	sub	sp, #8
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	4603      	mov	r3, r0
 80081aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80081ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff fee3 	bl	8007f7c <__NVIC_DisableIRQ>
}
 80081b6:	bf00      	nop
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7ff ff96 	bl	80080f8 <SysTick_Config>
 80081cc:	4603      	mov	r3, r0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	4603      	mov	r3, r0
 80081de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80081e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff feed 	bl	8007fc4 <__NVIC_SetPendingIRQ>
}
 80081ea:	bf00      	nop
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	4603      	mov	r3, r0
 80081fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80081fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff fefd 	bl	8008000 <__NVIC_ClearPendingIRQ>
}
 8008206:	bf00      	nop
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e08e      	b.n	8008340 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	4b47      	ldr	r3, [pc, #284]	; (8008348 <HAL_DMA_Init+0x138>)
 800822a:	429a      	cmp	r2, r3
 800822c:	d80f      	bhi.n	800824e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	4b45      	ldr	r3, [pc, #276]	; (800834c <HAL_DMA_Init+0x13c>)
 8008236:	4413      	add	r3, r2
 8008238:	4a45      	ldr	r2, [pc, #276]	; (8008350 <HAL_DMA_Init+0x140>)
 800823a:	fba2 2303 	umull	r2, r3, r2, r3
 800823e:	091b      	lsrs	r3, r3, #4
 8008240:	009a      	lsls	r2, r3, #2
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a42      	ldr	r2, [pc, #264]	; (8008354 <HAL_DMA_Init+0x144>)
 800824a:	641a      	str	r2, [r3, #64]	; 0x40
 800824c:	e00e      	b.n	800826c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	4b40      	ldr	r3, [pc, #256]	; (8008358 <HAL_DMA_Init+0x148>)
 8008256:	4413      	add	r3, r2
 8008258:	4a3d      	ldr	r2, [pc, #244]	; (8008350 <HAL_DMA_Init+0x140>)
 800825a:	fba2 2303 	umull	r2, r3, r2, r3
 800825e:	091b      	lsrs	r3, r3, #4
 8008260:	009a      	lsls	r2, r3, #2
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a3c      	ldr	r2, [pc, #240]	; (800835c <HAL_DMA_Init+0x14c>)
 800826a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2202      	movs	r2, #2
 8008270:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008286:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800829c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fa74 	bl	80087ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082cc:	d102      	bne.n	80082d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80082e0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80082ea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d010      	beq.n	8008316 <HAL_DMA_Init+0x106>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	2b04      	cmp	r3, #4
 80082fa:	d80c      	bhi.n	8008316 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fa93 	bl	8008828 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008306:	2200      	movs	r2, #0
 8008308:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008312:	605a      	str	r2, [r3, #4]
 8008314:	e008      	b.n	8008328 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	40020407 	.word	0x40020407
 800834c:	bffdfff8 	.word	0xbffdfff8
 8008350:	cccccccd 	.word	0xcccccccd
 8008354:	40020000 	.word	0x40020000
 8008358:	bffdfbf8 	.word	0xbffdfbf8
 800835c:	40020400 	.word	0x40020400

08008360 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008378:	2b01      	cmp	r3, #1
 800837a:	d101      	bne.n	8008380 <HAL_DMA_Start_IT+0x20>
 800837c:	2302      	movs	r3, #2
 800837e:	e066      	b.n	800844e <HAL_DMA_Start_IT+0xee>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b01      	cmp	r3, #1
 8008392:	d155      	bne.n	8008440 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 0201 	bic.w	r2, r2, #1
 80083b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	68b9      	ldr	r1, [r7, #8]
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 f9b9 	bl	8008730 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d008      	beq.n	80083d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f042 020e 	orr.w	r2, r2, #14
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	e00f      	b.n	80083f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0204 	bic.w	r2, r2, #4
 80083e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 020a 	orr.w	r2, r2, #10
 80083f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d007      	beq.n	8008416 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008414:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841a:	2b00      	cmp	r3, #0
 800841c:	d007      	beq.n	800842e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800842c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f042 0201 	orr.w	r2, r2, #1
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	e005      	b.n	800844c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008448:	2302      	movs	r3, #2
 800844a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800844c:	7dfb      	ldrb	r3, [r7, #23]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e04f      	b.n	8008508 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d008      	beq.n	8008486 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2204      	movs	r2, #4
 8008478:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e040      	b.n	8008508 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 020e 	bic.w	r2, r2, #14
 8008494:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0201 	bic.w	r2, r2, #1
 80084b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ba:	f003 021c 	and.w	r2, r3, #28
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	2101      	movs	r1, #1
 80084c4:	fa01 f202 	lsl.w	r2, r1, r2
 80084c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80084d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00c      	beq.n	80084f6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80084f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b02      	cmp	r3, #2
 800852a:	d005      	beq.n	8008538 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2204      	movs	r2, #4
 8008530:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	73fb      	strb	r3, [r7, #15]
 8008536:	e047      	b.n	80085c8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 020e 	bic.w	r2, r2, #14
 8008546:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f022 0201 	bic.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008562:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008566:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856c:	f003 021c 	and.w	r2, r3, #28
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008574:	2101      	movs	r1, #1
 8008576:	fa01 f202 	lsl.w	r2, r1, r2
 800857a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008584:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00c      	beq.n	80085a8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800859c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80085a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	4798      	blx	r3
    }
  }
  return status;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ee:	f003 031c 	and.w	r3, r3, #28
 80085f2:	2204      	movs	r2, #4
 80085f4:	409a      	lsls	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	4013      	ands	r3, r2
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d026      	beq.n	800864c <HAL_DMA_IRQHandler+0x7a>
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	f003 0304 	and.w	r3, r3, #4
 8008604:	2b00      	cmp	r3, #0
 8008606:	d021      	beq.n	800864c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	2b00      	cmp	r3, #0
 8008614:	d107      	bne.n	8008626 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f022 0204 	bic.w	r2, r2, #4
 8008624:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862a:	f003 021c 	and.w	r2, r3, #28
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	2104      	movs	r1, #4
 8008634:	fa01 f202 	lsl.w	r2, r1, r2
 8008638:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863e:	2b00      	cmp	r3, #0
 8008640:	d071      	beq.n	8008726 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800864a:	e06c      	b.n	8008726 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008650:	f003 031c 	and.w	r3, r3, #28
 8008654:	2202      	movs	r2, #2
 8008656:	409a      	lsls	r2, r3
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	4013      	ands	r3, r2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d02e      	beq.n	80086be <HAL_DMA_IRQHandler+0xec>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	2b00      	cmp	r3, #0
 8008668:	d029      	beq.n	80086be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0320 	and.w	r3, r3, #32
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10b      	bne.n	8008690 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 020a 	bic.w	r2, r2, #10
 8008686:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008694:	f003 021c 	and.w	r2, r3, #28
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	2102      	movs	r1, #2
 800869e:	fa01 f202 	lsl.w	r2, r1, r2
 80086a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d038      	beq.n	8008726 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80086bc:	e033      	b.n	8008726 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c2:	f003 031c 	and.w	r3, r3, #28
 80086c6:	2208      	movs	r2, #8
 80086c8:	409a      	lsls	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4013      	ands	r3, r2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d02a      	beq.n	8008728 <HAL_DMA_IRQHandler+0x156>
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	f003 0308 	and.w	r3, r3, #8
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d025      	beq.n	8008728 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f022 020e 	bic.w	r2, r2, #14
 80086ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f0:	f003 021c 	and.w	r2, r3, #28
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f8:	2101      	movs	r1, #1
 80086fa:	fa01 f202 	lsl.w	r2, r1, r2
 80086fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871a:	2b00      	cmp	r3, #0
 800871c:	d004      	beq.n	8008728 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008726:	bf00      	nop
 8008728:	bf00      	nop
}
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008746:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800874c:	2b00      	cmp	r3, #0
 800874e:	d004      	beq.n	800875a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008758:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800875e:	f003 021c 	and.w	r2, r3, #28
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	2101      	movs	r1, #1
 8008768:	fa01 f202 	lsl.w	r2, r1, r2
 800876c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	2b10      	cmp	r3, #16
 800877c:	d108      	bne.n	8008790 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800878e:	e007      	b.n	80087a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	60da      	str	r2, [r3, #12]
}
 80087a0:	bf00      	nop
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	4b17      	ldr	r3, [pc, #92]	; (8008818 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80087bc:	429a      	cmp	r2, r3
 80087be:	d80a      	bhi.n	80087d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c4:	089b      	lsrs	r3, r3, #2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087cc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	6493      	str	r3, [r2, #72]	; 0x48
 80087d4:	e007      	b.n	80087e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087da:	089b      	lsrs	r3, r3, #2
 80087dc:	009a      	lsls	r2, r3, #2
 80087de:	4b0f      	ldr	r3, [pc, #60]	; (800881c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80087e0:	4413      	add	r3, r2
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	3b08      	subs	r3, #8
 80087ee:	4a0c      	ldr	r2, [pc, #48]	; (8008820 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80087f0:	fba2 2303 	umull	r2, r3, r2, r3
 80087f4:	091b      	lsrs	r3, r3, #4
 80087f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a0a      	ldr	r2, [pc, #40]	; (8008824 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80087fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f003 031f 	and.w	r3, r3, #31
 8008804:	2201      	movs	r2, #1
 8008806:	409a      	lsls	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800880c:	bf00      	nop
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	40020407 	.word	0x40020407
 800881c:	4002081c 	.word	0x4002081c
 8008820:	cccccccd 	.word	0xcccccccd
 8008824:	40020880 	.word	0x40020880

08008828 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008838:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	4b0b      	ldr	r3, [pc, #44]	; (800886c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800883e:	4413      	add	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	461a      	mov	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a09      	ldr	r2, [pc, #36]	; (8008870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800884c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3b01      	subs	r3, #1
 8008852:	f003 0303 	and.w	r3, r3, #3
 8008856:	2201      	movs	r2, #1
 8008858:	409a      	lsls	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800885e:	bf00      	nop
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	1000823f 	.word	0x1000823f
 8008870:	40020940 	.word	0x40020940

08008874 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b01      	cmp	r3, #1
 8008888:	d12b      	bne.n	80088e2 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008890:	2b01      	cmp	r3, #1
 8008892:	d101      	bne.n	8008898 <HAL_DMAEx_ConfigMuxSync+0x24>
 8008894:	2302      	movs	r3, #2
 8008896:	e025      	b.n	80088e4 <HAL_DMAEx_ConfigMuxSync+0x70>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	4b12      	ldr	r3, [pc, #72]	; (80088f0 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 80088a8:	4013      	ands	r3, r2
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	6811      	ldr	r1, [r2, #0]
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	68d2      	ldr	r2, [r2, #12]
 80088b2:	3a01      	subs	r2, #1
 80088b4:	04d2      	lsls	r2, r2, #19
 80088b6:	4311      	orrs	r1, r2
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	6852      	ldr	r2, [r2, #4]
 80088bc:	4311      	orrs	r1, r2
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	7a12      	ldrb	r2, [r2, #8]
 80088c2:	0412      	lsls	r2, r2, #16
 80088c4:	4311      	orrs	r1, r2
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	7a52      	ldrb	r2, [r2, #9]
 80088ca:	0252      	lsls	r2, r2, #9
 80088cc:	4311      	orrs	r1, r2
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80088d2:	430b      	orrs	r3, r1
 80088d4:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	e000      	b.n	80088e4 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
  }
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	e000fdff 	.word	0xe000fdff

080088f4 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b087      	sub	sp, #28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	0c1b      	lsrs	r3, r3, #16
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 031f 	and.w	r3, r3, #31
 8008910:	2201      	movs	r2, #1
 8008912:	fa02 f303 	lsl.w	r3, r2, r3
 8008916:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	015b      	lsls	r3, r3, #5
 800891c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8008920:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8008924:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	601a      	str	r2, [r3, #0]
}
 800892c:	bf00      	nop
 800892e:	371c      	adds	r7, #28
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008946:	4b1c      	ldr	r3, [pc, #112]	; (80089b8 <HAL_FLASH_Program+0x80>)
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d101      	bne.n	8008952 <HAL_FLASH_Program+0x1a>
 800894e:	2302      	movs	r3, #2
 8008950:	e02d      	b.n	80089ae <HAL_FLASH_Program+0x76>
 8008952:	4b19      	ldr	r3, [pc, #100]	; (80089b8 <HAL_FLASH_Program+0x80>)
 8008954:	2201      	movs	r2, #1
 8008956:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008958:	4b17      	ldr	r3, [pc, #92]	; (80089b8 <HAL_FLASH_Program+0x80>)
 800895a:	2200      	movs	r2, #0
 800895c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800895e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008962:	f000 f869 	bl	8008a38 <FLASH_WaitForLastOperation>
 8008966:	4603      	mov	r3, r0
 8008968:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800896a:	7dfb      	ldrb	r3, [r7, #23]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d11a      	bne.n	80089a6 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d105      	bne.n	8008982 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8008976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800897a:	68b8      	ldr	r0, [r7, #8]
 800897c:	f000 f8cc 	bl	8008b18 <FLASH_Program_DoubleWord>
 8008980:	e004      	b.n	800898c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	4619      	mov	r1, r3
 8008986:	68b8      	ldr	r0, [r7, #8]
 8008988:	f024 fae8 	bl	802cf5c <_etext>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800898c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008990:	f000 f852 	bl	8008a38 <FLASH_WaitForLastOperation>
 8008994:	4603      	mov	r3, r0
 8008996:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8008998:	4b08      	ldr	r3, [pc, #32]	; (80089bc <HAL_FLASH_Program+0x84>)
 800899a:	695a      	ldr	r2, [r3, #20]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	43db      	mvns	r3, r3
 80089a0:	4906      	ldr	r1, [pc, #24]	; (80089bc <HAL_FLASH_Program+0x84>)
 80089a2:	4013      	ands	r3, r2
 80089a4:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80089a6:	4b04      	ldr	r3, [pc, #16]	; (80089b8 <HAL_FLASH_Program+0x80>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	2000452c 	.word	0x2000452c
 80089bc:	58004000 	.word	0x58004000

080089c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80089ca:	4b0b      	ldr	r3, [pc, #44]	; (80089f8 <HAL_FLASH_Unlock+0x38>)
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	da0b      	bge.n	80089ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80089d2:	4b09      	ldr	r3, [pc, #36]	; (80089f8 <HAL_FLASH_Unlock+0x38>)
 80089d4:	4a09      	ldr	r2, [pc, #36]	; (80089fc <HAL_FLASH_Unlock+0x3c>)
 80089d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80089d8:	4b07      	ldr	r3, [pc, #28]	; (80089f8 <HAL_FLASH_Unlock+0x38>)
 80089da:	4a09      	ldr	r2, [pc, #36]	; (8008a00 <HAL_FLASH_Unlock+0x40>)
 80089dc:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80089de:	4b06      	ldr	r3, [pc, #24]	; (80089f8 <HAL_FLASH_Unlock+0x38>)
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	da01      	bge.n	80089ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80089ea:	79fb      	ldrb	r3, [r7, #7]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	58004000 	.word	0x58004000
 80089fc:	45670123 	.word	0x45670123
 8008a00:	cdef89ab 	.word	0xcdef89ab

08008a04 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008a0e:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <HAL_FLASH_Lock+0x30>)
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	4a08      	ldr	r2, [pc, #32]	; (8008a34 <HAL_FLASH_Lock+0x30>)
 8008a14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a18:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8008a1a:	4b06      	ldr	r3, [pc, #24]	; (8008a34 <HAL_FLASH_Lock+0x30>)
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	db01      	blt.n	8008a26 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008a26:	79fb      	ldrb	r3, [r7, #7]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	58004000 	.word	0x58004000

08008a38 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8008a40:	f7ff fa1c 	bl	8007e7c <HAL_GetTick>
 8008a44:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008a46:	e009      	b.n	8008a5c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8008a48:	f7ff fa18 	bl	8007e7c <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d801      	bhi.n	8008a5c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e054      	b.n	8008b06 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008a5c:	4b2c      	ldr	r3, [pc, #176]	; (8008b10 <FLASH_WaitForLastOperation+0xd8>)
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a68:	d0ee      	beq.n	8008a48 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8008a6a:	4b29      	ldr	r3, [pc, #164]	; (8008b10 <FLASH_WaitForLastOperation+0xd8>)
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008a7a:	4b25      	ldr	r3, [pc, #148]	; (8008b10 <FLASH_WaitForLastOperation+0xd8>)
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d007      	beq.n	8008a9a <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8008a8a:	4b21      	ldr	r3, [pc, #132]	; (8008b10 <FLASH_WaitForLastOperation+0xd8>)
 8008a8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008a90:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a98:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d007      	beq.n	8008abe <FLASH_WaitForLastOperation+0x86>
 8008aae:	4b18      	ldr	r3, [pc, #96]	; (8008b10 <FLASH_WaitForLastOperation+0xd8>)
 8008ab0:	699a      	ldr	r2, [r3, #24]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008ab8:	4915      	ldr	r1, [pc, #84]	; (8008b10 <FLASH_WaitForLastOperation+0xd8>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	618b      	str	r3, [r1, #24]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d004      	beq.n	8008ad2 <FLASH_WaitForLastOperation+0x9a>
 8008ac8:	4a11      	ldr	r2, [pc, #68]	; (8008b10 <FLASH_WaitForLastOperation+0xd8>)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008ad0:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00e      	beq.n	8008af6 <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8008ad8:	4a0e      	ldr	r2, [pc, #56]	; (8008b14 <FLASH_WaitForLastOperation+0xdc>)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e011      	b.n	8008b06 <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8008ae2:	f7ff f9cb 	bl	8007e7c <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d801      	bhi.n	8008af6 <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e007      	b.n	8008b06 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8008af6:	4b06      	ldr	r3, [pc, #24]	; (8008b10 <FLASH_WaitForLastOperation+0xd8>)
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008afe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b02:	d0ee      	beq.n	8008ae2 <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	58004000 	.word	0x58004000
 8008b14:	2000452c 	.word	0x2000452c

08008b18 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008b24:	4b0e      	ldr	r3, [pc, #56]	; (8008b60 <FLASH_Program_DoubleWord+0x48>)
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	4a0d      	ldr	r2, [pc, #52]	; (8008b60 <FLASH_Program_DoubleWord+0x48>)
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008b36:	f3bf 8f6f 	isb	sy
}
 8008b3a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b40:	f04f 0200 	mov.w	r2, #0
 8008b44:	f04f 0300 	mov.w	r3, #0
 8008b48:	000a      	movs	r2, r1
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	68f9      	ldr	r1, [r7, #12]
 8008b4e:	3104      	adds	r1, #4
 8008b50:	4613      	mov	r3, r2
 8008b52:	600b      	str	r3, [r1, #0]
}
 8008b54:	bf00      	nop
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	58004000 	.word	0x58004000

08008b64 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008b6e:	4b24      	ldr	r3, [pc, #144]	; (8008c00 <HAL_FLASHEx_Erase+0x9c>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d101      	bne.n	8008b7a <HAL_FLASHEx_Erase+0x16>
 8008b76:	2302      	movs	r3, #2
 8008b78:	e03d      	b.n	8008bf6 <HAL_FLASHEx_Erase+0x92>
 8008b7a:	4b21      	ldr	r3, [pc, #132]	; (8008c00 <HAL_FLASHEx_Erase+0x9c>)
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008b80:	4b1f      	ldr	r3, [pc, #124]	; (8008c00 <HAL_FLASHEx_Erase+0x9c>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008b86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008b8a:	f7ff ff55 	bl	8008a38 <FLASH_WaitForLastOperation>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d12a      	bne.n	8008bee <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d124      	bne.n	8008bea <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ba6:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	60bb      	str	r3, [r7, #8]
 8008bae:	e012      	b.n	8008bd6 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8008bb0:	68b8      	ldr	r0, [r7, #8]
 8008bb2:	f000 f827 	bl	8008c04 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008bba:	f7ff ff3d 	bl	8008a38 <FLASH_WaitForLastOperation>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	601a      	str	r2, [r3, #0]
          break;
 8008bce:	e00a      	b.n	8008be6 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	60bb      	str	r3, [r7, #8]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	4413      	add	r3, r2
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d3e4      	bcc.n	8008bb0 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8008be6:	f000 f86f 	bl	8008cc8 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008bea:	f000 f825 	bl	8008c38 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008bee:	4b04      	ldr	r3, [pc, #16]	; (8008c00 <HAL_FLASHEx_Erase+0x9c>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	701a      	strb	r2, [r3, #0]

  return status;
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	2000452c 	.word	0x2000452c

08008c04 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8008c0c:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <FLASH_PageErase+0x30>)
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	4a06      	ldr	r2, [pc, #24]	; (8008c34 <FLASH_PageErase+0x30>)
 8008c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c20:	f043 0302 	orr.w	r3, r3, #2
 8008c24:	6153      	str	r3, [r2, #20]
}
 8008c26:	bf00      	nop
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	58004000 	.word	0x58004000

08008c38 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8008c3c:	4b21      	ldr	r3, [pc, #132]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c48:	d117      	bne.n	8008c7a <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008c4a:	4b1e      	ldr	r3, [pc, #120]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a1d      	ldr	r2, [pc, #116]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c54:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008c56:	4b1b      	ldr	r3, [pc, #108]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a1a      	ldr	r2, [pc, #104]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008c5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008c60:	6013      	str	r3, [r2, #0]
 8008c62:	4b18      	ldr	r3, [pc, #96]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a17      	ldr	r2, [pc, #92]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008c68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c6c:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008c6e:	4b15      	ldr	r3, [pc, #84]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a14      	ldr	r2, [pc, #80]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008c74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c78:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8008c7a:	4b12      	ldr	r3, [pc, #72]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c86:	d117      	bne.n	8008cb8 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008c88:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a0d      	ldr	r2, [pc, #52]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008c8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c92:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008c94:	4b0b      	ldr	r3, [pc, #44]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a0a      	ldr	r2, [pc, #40]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008c9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	4b08      	ldr	r3, [pc, #32]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a07      	ldr	r2, [pc, #28]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008caa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008cac:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a04      	ldr	r2, [pc, #16]	; (8008cc4 <FLASH_FlushCaches+0x8c>)
 8008cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008cb6:	6013      	str	r3, [r2, #0]
  }
}
 8008cb8:	bf00      	nop
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	58004000 	.word	0x58004000

08008cc8 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8008ccc:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <FLASH_AcknowledgePageErase+0x20>)
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	4a05      	ldr	r2, [pc, #20]	; (8008ce8 <FLASH_AcknowledgePageErase+0x20>)
 8008cd2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008cd6:	f023 0302 	bic.w	r3, r3, #2
 8008cda:	6153      	str	r3, [r2, #20]
}
 8008cdc:	bf00      	nop
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	58004000 	.word	0x58004000

08008cec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b087      	sub	sp, #28
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008cfa:	e14c      	b.n	8008f96 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	2101      	movs	r1, #1
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	fa01 f303 	lsl.w	r3, r1, r3
 8008d08:	4013      	ands	r3, r2
 8008d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 813e 	beq.w	8008f90 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f003 0303 	and.w	r3, r3, #3
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d005      	beq.n	8008d2c <HAL_GPIO_Init+0x40>
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f003 0303 	and.w	r3, r3, #3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d130      	bne.n	8008d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	005b      	lsls	r3, r3, #1
 8008d36:	2203      	movs	r2, #3
 8008d38:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3c:	43db      	mvns	r3, r3
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	4013      	ands	r3, r2
 8008d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d62:	2201      	movs	r2, #1
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6a:	43db      	mvns	r3, r3
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	4013      	ands	r3, r2
 8008d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	091b      	lsrs	r3, r3, #4
 8008d78:	f003 0201 	and.w	r2, r3, #1
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d017      	beq.n	8008dca <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	005b      	lsls	r3, r3, #1
 8008da4:	2203      	movs	r2, #3
 8008da6:	fa02 f303 	lsl.w	r3, r2, r3
 8008daa:	43db      	mvns	r3, r3
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	4013      	ands	r3, r2
 8008db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f003 0303 	and.w	r3, r3, #3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d123      	bne.n	8008e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	08da      	lsrs	r2, r3, #3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	3208      	adds	r2, #8
 8008dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f003 0307 	and.w	r3, r3, #7
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	220f      	movs	r2, #15
 8008dee:	fa02 f303 	lsl.w	r3, r2, r3
 8008df2:	43db      	mvns	r3, r3
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	4013      	ands	r3, r2
 8008df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	691a      	ldr	r2, [r3, #16]
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f003 0307 	and.w	r3, r3, #7
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	08da      	lsrs	r2, r3, #3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	3208      	adds	r2, #8
 8008e18:	6939      	ldr	r1, [r7, #16]
 8008e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	005b      	lsls	r3, r3, #1
 8008e28:	2203      	movs	r2, #3
 8008e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2e:	43db      	mvns	r3, r3
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4013      	ands	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f003 0203 	and.w	r2, r3, #3
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	005b      	lsls	r3, r3, #1
 8008e42:	fa02 f303 	lsl.w	r3, r2, r3
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 8098 	beq.w	8008f90 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008e60:	4a54      	ldr	r2, [pc, #336]	; (8008fb4 <HAL_GPIO_Init+0x2c8>)
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	089b      	lsrs	r3, r3, #2
 8008e66:	3302      	adds	r3, #2
 8008e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f003 0303 	and.w	r3, r3, #3
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	220f      	movs	r2, #15
 8008e78:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7c:	43db      	mvns	r3, r3
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	4013      	ands	r3, r2
 8008e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008e8a:	d019      	beq.n	8008ec0 <HAL_GPIO_Init+0x1d4>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a4a      	ldr	r2, [pc, #296]	; (8008fb8 <HAL_GPIO_Init+0x2cc>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d013      	beq.n	8008ebc <HAL_GPIO_Init+0x1d0>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a49      	ldr	r2, [pc, #292]	; (8008fbc <HAL_GPIO_Init+0x2d0>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d00d      	beq.n	8008eb8 <HAL_GPIO_Init+0x1cc>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a48      	ldr	r2, [pc, #288]	; (8008fc0 <HAL_GPIO_Init+0x2d4>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d007      	beq.n	8008eb4 <HAL_GPIO_Init+0x1c8>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a47      	ldr	r2, [pc, #284]	; (8008fc4 <HAL_GPIO_Init+0x2d8>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d101      	bne.n	8008eb0 <HAL_GPIO_Init+0x1c4>
 8008eac:	2304      	movs	r3, #4
 8008eae:	e008      	b.n	8008ec2 <HAL_GPIO_Init+0x1d6>
 8008eb0:	2307      	movs	r3, #7
 8008eb2:	e006      	b.n	8008ec2 <HAL_GPIO_Init+0x1d6>
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e004      	b.n	8008ec2 <HAL_GPIO_Init+0x1d6>
 8008eb8:	2302      	movs	r3, #2
 8008eba:	e002      	b.n	8008ec2 <HAL_GPIO_Init+0x1d6>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e000      	b.n	8008ec2 <HAL_GPIO_Init+0x1d6>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	f002 0203 	and.w	r2, r2, #3
 8008ec8:	0092      	lsls	r2, r2, #2
 8008eca:	4093      	lsls	r3, r2
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008ed2:	4938      	ldr	r1, [pc, #224]	; (8008fb4 <HAL_GPIO_Init+0x2c8>)
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	089b      	lsrs	r3, r3, #2
 8008ed8:	3302      	adds	r3, #2
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008ee0:	4b39      	ldr	r3, [pc, #228]	; (8008fc8 <HAL_GPIO_Init+0x2dc>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	43db      	mvns	r3, r3
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	4013      	ands	r3, r2
 8008eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008f04:	4a30      	ldr	r2, [pc, #192]	; (8008fc8 <HAL_GPIO_Init+0x2dc>)
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008f0a:	4b2f      	ldr	r3, [pc, #188]	; (8008fc8 <HAL_GPIO_Init+0x2dc>)
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	43db      	mvns	r3, r3
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	4013      	ands	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008f2e:	4a26      	ldr	r2, [pc, #152]	; (8008fc8 <HAL_GPIO_Init+0x2dc>)
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008f34:	4b24      	ldr	r3, [pc, #144]	; (8008fc8 <HAL_GPIO_Init+0x2dc>)
 8008f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	43db      	mvns	r3, r3
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	4013      	ands	r3, r2
 8008f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008f5a:	4a1b      	ldr	r2, [pc, #108]	; (8008fc8 <HAL_GPIO_Init+0x2dc>)
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8008f62:	4b19      	ldr	r3, [pc, #100]	; (8008fc8 <HAL_GPIO_Init+0x2dc>)
 8008f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	43db      	mvns	r3, r3
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	4013      	ands	r3, r2
 8008f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d003      	beq.n	8008f88 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008f88:	4a0f      	ldr	r2, [pc, #60]	; (8008fc8 <HAL_GPIO_Init+0x2dc>)
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	3301      	adds	r3, #1
 8008f94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f47f aeab 	bne.w	8008cfc <HAL_GPIO_Init+0x10>
  }
}
 8008fa6:	bf00      	nop
 8008fa8:	bf00      	nop
 8008faa:	371c      	adds	r7, #28
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	40010000 	.word	0x40010000
 8008fb8:	48000400 	.word	0x48000400
 8008fbc:	48000800 	.word	0x48000800
 8008fc0:	48000c00 	.word	0x48000c00
 8008fc4:	48001000 	.word	0x48001000
 8008fc8:	58000800 	.word	0x58000800

08008fcc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691a      	ldr	r2, [r3, #16]
 8008fdc:	887b      	ldrh	r3, [r7, #2]
 8008fde:	4013      	ands	r3, r2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	73fb      	strb	r3, [r7, #15]
 8008fe8:	e001      	b.n	8008fee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008fea:	2300      	movs	r3, #0
 8008fec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	807b      	strh	r3, [r7, #2]
 8009008:	4613      	mov	r3, r2
 800900a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800900c:	787b      	ldrb	r3, [r7, #1]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009012:	887a      	ldrh	r2, [r7, #2]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009018:	e002      	b.n	8009020 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800901a:	887a      	ldrh	r2, [r7, #2]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009036:	4b08      	ldr	r3, [pc, #32]	; (8009058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009038:	68da      	ldr	r2, [r3, #12]
 800903a:	88fb      	ldrh	r3, [r7, #6]
 800903c:	4013      	ands	r3, r2
 800903e:	2b00      	cmp	r3, #0
 8009040:	d006      	beq.n	8009050 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009042:	4a05      	ldr	r2, [pc, #20]	; (8009058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009044:	88fb      	ldrh	r3, [r7, #6]
 8009046:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009048:	88fb      	ldrh	r3, [r7, #6]
 800904a:	4618      	mov	r0, r3
 800904c:	f7f8 fcbd 	bl	80019ca <HAL_GPIO_EXTI_Callback>
  }
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	58000800 	.word	0x58000800

0800905c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8009062:	4b0a      	ldr	r3, [pc, #40]	; (800908c <HAL_HSEM_IRQHandler+0x30>)
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8009068:	4b08      	ldr	r3, [pc, #32]	; (800908c <HAL_HSEM_IRQHandler+0x30>)
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	43db      	mvns	r3, r3
 8009070:	4906      	ldr	r1, [pc, #24]	; (800908c <HAL_HSEM_IRQHandler+0x30>)
 8009072:	4013      	ands	r3, r2
 8009074:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8009076:	4a05      	ldr	r2, [pc, #20]	; (800908c <HAL_HSEM_IRQHandler+0x30>)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f807 	bl	8009090 <HAL_HSEM_FreeCallback>
}
 8009082:	bf00      	nop
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	58001500 	.word	0x58001500

08009090 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d01e      	beq.n	80090f4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80090b6:	4b13      	ldr	r3, [pc, #76]	; (8009104 <HAL_IPCC_Init+0x60>)
 80090b8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d102      	bne.n	80090cc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7f9 ffd6 	bl	8003078 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80090cc:	68b8      	ldr	r0, [r7, #8]
 80090ce:	f000 f85b 	bl	8009188 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f82c 	bl	800913c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80090f2:	e001      	b.n	80090f8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	58000c00 	.word	0x58000c00

08009108 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	4613      	mov	r3, r2
 8009114:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8009116:	bf00      	nop
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009122:	b480      	push	{r7}
 8009124:	b085      	sub	sp, #20
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	60b9      	str	r1, [r7, #8]
 800912c:	4613      	mov	r3, r2
 800912e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8009130:	bf00      	nop
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009144:	2300      	movs	r3, #0
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	e00f      	b.n	800916a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	4a0b      	ldr	r2, [pc, #44]	; (8009180 <IPCC_SetDefaultCallbacks+0x44>)
 8009154:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3306      	adds	r3, #6
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	4a08      	ldr	r2, [pc, #32]	; (8009184 <IPCC_SetDefaultCallbacks+0x48>)
 8009162:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	3301      	adds	r3, #1
 8009168:	60fb      	str	r3, [r7, #12]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b05      	cmp	r3, #5
 800916e:	d9ec      	bls.n	800914a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8009170:	bf00      	nop
 8009172:	bf00      	nop
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	08009109 	.word	0x08009109
 8009184:	08009123 	.word	0x08009123

08009188 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800919c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	223f      	movs	r2, #63	; 0x3f
 80091a2:	609a      	str	r2, [r3, #8]
}
 80091a4:	bf00      	nop
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80091b0:	b480      	push	{r7}
 80091b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091b4:	4b05      	ldr	r3, [pc, #20]	; (80091cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a04      	ldr	r2, [pc, #16]	; (80091cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80091ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091be:	6013      	str	r3, [r2, #0]
}
 80091c0:	bf00      	nop
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	58000400 	.word	0x58000400

080091d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80091d4:	4b04      	ldr	r3, [pc, #16]	; (80091e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80091dc:	4618      	mov	r0, r3
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	58000400 	.word	0x58000400

080091ec <LL_RCC_HSE_IsEnabledDiv2>:
{
 80091ec:	b480      	push	{r7}
 80091ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80091f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091fe:	d101      	bne.n	8009204 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8009200:	2301      	movs	r3, #1
 8009202:	e000      	b.n	8009206 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <LL_RCC_HSE_Enable>:
{
 8009210:	b480      	push	{r7}
 8009212:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8009214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800921e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009222:	6013      	str	r3, [r2, #0]
}
 8009224:	bf00      	nop
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <LL_RCC_HSE_Disable>:
{
 800922e:	b480      	push	{r7}
 8009230:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8009232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800923c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009240:	6013      	str	r3, [r2, #0]
}
 8009242:	bf00      	nop
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <LL_RCC_HSE_IsReady>:
{
 800924c:	b480      	push	{r7}
 800924e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8009250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800925a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800925e:	d101      	bne.n	8009264 <LL_RCC_HSE_IsReady+0x18>
 8009260:	2301      	movs	r3, #1
 8009262:	e000      	b.n	8009266 <LL_RCC_HSE_IsReady+0x1a>
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <LL_RCC_HSI_Enable>:
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800927e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009282:	6013      	str	r3, [r2, #0]
}
 8009284:	bf00      	nop
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <LL_RCC_HSI_Disable>:
{
 800928e:	b480      	push	{r7}
 8009290:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8009292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800929c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092a0:	6013      	str	r3, [r2, #0]
}
 80092a2:	bf00      	nop
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <LL_RCC_HSI_IsReady>:
{
 80092ac:	b480      	push	{r7}
 80092ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80092b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092be:	d101      	bne.n	80092c4 <LL_RCC_HSI_IsReady+0x18>
 80092c0:	2301      	movs	r3, #1
 80092c2:	e000      	b.n	80092c6 <LL_RCC_HSI_IsReady+0x1a>
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80092d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	061b      	lsls	r3, r3, #24
 80092e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80092ea:	4313      	orrs	r3, r2
 80092ec:	604b      	str	r3, [r1, #4]
}
 80092ee:	bf00      	nop
 80092f0:	370c      	adds	r7, #12
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <LL_RCC_HSI48_Enable>:
{
 80092fa:	b480      	push	{r7}
 80092fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80092fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800930a:	f043 0301 	orr.w	r3, r3, #1
 800930e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8009312:	bf00      	nop
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <LL_RCC_HSI48_Disable>:
{
 800931c:	b480      	push	{r7}
 800931e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8009320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800932c:	f023 0301 	bic.w	r3, r3, #1
 8009330:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8009334:	bf00      	nop
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <LL_RCC_HSI48_IsReady>:
{
 800933e:	b480      	push	{r7}
 8009340:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8009342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800934a:	f003 0302 	and.w	r3, r3, #2
 800934e:	2b02      	cmp	r3, #2
 8009350:	d101      	bne.n	8009356 <LL_RCC_HSI48_IsReady+0x18>
 8009352:	2301      	movs	r3, #1
 8009354:	e000      	b.n	8009358 <LL_RCC_HSI48_IsReady+0x1a>
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <LL_RCC_LSE_Enable>:
{
 8009362:	b480      	push	{r7}
 8009364:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800936a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800936e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009372:	f043 0301 	orr.w	r3, r3, #1
 8009376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800937a:	bf00      	nop
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <LL_RCC_LSE_Disable>:
{
 8009384:	b480      	push	{r7}
 8009386:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800938c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009394:	f023 0301 	bic.w	r3, r3, #1
 8009398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800939c:	bf00      	nop
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <LL_RCC_LSE_EnableBypass>:
{
 80093a6:	b480      	push	{r7}
 80093a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80093aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093b6:	f043 0304 	orr.w	r3, r3, #4
 80093ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80093be:	bf00      	nop
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <LL_RCC_LSE_DisableBypass>:
{
 80093c8:	b480      	push	{r7}
 80093ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80093cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093d8:	f023 0304 	bic.w	r3, r3, #4
 80093dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80093e0:	bf00      	nop
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <LL_RCC_LSE_IsReady>:
{
 80093ea:	b480      	push	{r7}
 80093ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80093ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093f6:	f003 0302 	and.w	r3, r3, #2
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d101      	bne.n	8009402 <LL_RCC_LSE_IsReady+0x18>
 80093fe:	2301      	movs	r3, #1
 8009400:	e000      	b.n	8009404 <LL_RCC_LSE_IsReady+0x1a>
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <LL_RCC_LSI1_Enable>:
{
 800940e:	b480      	push	{r7}
 8009410:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8009412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800941a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800941e:	f043 0301 	orr.w	r3, r3, #1
 8009422:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009426:	bf00      	nop
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <LL_RCC_LSI1_Disable>:
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8009434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800943c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009440:	f023 0301 	bic.w	r3, r3, #1
 8009444:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009448:	bf00      	nop
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <LL_RCC_LSI1_IsReady>:
{
 8009452:	b480      	push	{r7}
 8009454:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8009456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800945a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b02      	cmp	r3, #2
 8009464:	d101      	bne.n	800946a <LL_RCC_LSI1_IsReady+0x18>
 8009466:	2301      	movs	r3, #1
 8009468:	e000      	b.n	800946c <LL_RCC_LSI1_IsReady+0x1a>
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <LL_RCC_LSI2_Enable>:
{
 8009476:	b480      	push	{r7}
 8009478:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800947a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800947e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009486:	f043 0304 	orr.w	r3, r3, #4
 800948a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800948e:	bf00      	nop
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <LL_RCC_LSI2_Disable>:
{
 8009498:	b480      	push	{r7}
 800949a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800949c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094a8:	f023 0304 	bic.w	r3, r3, #4
 80094ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80094b0:	bf00      	nop
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <LL_RCC_LSI2_IsReady>:
{
 80094ba:	b480      	push	{r7}
 80094bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80094be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094c6:	f003 0308 	and.w	r3, r3, #8
 80094ca:	2b08      	cmp	r3, #8
 80094cc:	d101      	bne.n	80094d2 <LL_RCC_LSI2_IsReady+0x18>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e000      	b.n	80094d4 <LL_RCC_LSI2_IsReady+0x1a>
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <LL_RCC_LSI2_SetTrimming>:
{
 80094de:	b480      	push	{r7}
 80094e0:	b083      	sub	sp, #12
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80094e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	021b      	lsls	r3, r3, #8
 80094f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <LL_RCC_MSI_Enable>:
{
 800950c:	b480      	push	{r7}
 800950e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8009510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800951a:	f043 0301 	orr.w	r3, r3, #1
 800951e:	6013      	str	r3, [r2, #0]
}
 8009520:	bf00      	nop
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <LL_RCC_MSI_Disable>:
{
 800952a:	b480      	push	{r7}
 800952c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800952e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009538:	f023 0301 	bic.w	r3, r3, #1
 800953c:	6013      	str	r3, [r2, #0]
}
 800953e:	bf00      	nop
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <LL_RCC_MSI_IsReady>:
{
 8009548:	b480      	push	{r7}
 800954a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800954c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 0302 	and.w	r3, r3, #2
 8009556:	2b02      	cmp	r3, #2
 8009558:	d101      	bne.n	800955e <LL_RCC_MSI_IsReady+0x16>
 800955a:	2301      	movs	r3, #1
 800955c:	e000      	b.n	8009560 <LL_RCC_MSI_IsReady+0x18>
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <LL_RCC_MSI_SetRange>:
{
 800956a:	b480      	push	{r7}
 800956c:	b083      	sub	sp, #12
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8009572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800957c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4313      	orrs	r3, r2
 8009584:	600b      	str	r3, [r1, #0]
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <LL_RCC_MSI_GetRange>:
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8009598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095a2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2bb0      	cmp	r3, #176	; 0xb0
 80095a8:	d901      	bls.n	80095ae <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80095aa:	23b0      	movs	r3, #176	; 0xb0
 80095ac:	607b      	str	r3, [r7, #4]
  return msiRange;
 80095ae:	687b      	ldr	r3, [r7, #4]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <LL_RCC_MSI_SetCalibTrimming>:
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80095c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	021b      	lsls	r3, r3, #8
 80095d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095d6:	4313      	orrs	r3, r2
 80095d8:	604b      	str	r3, [r1, #4]
}
 80095da:	bf00      	nop
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <LL_RCC_SetSysClkSource>:
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80095ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f023 0203 	bic.w	r2, r3, #3
 80095f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4313      	orrs	r3, r2
 8009600:	608b      	str	r3, [r1, #8]
}
 8009602:	bf00      	nop
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <LL_RCC_GetSysClkSource>:
{
 800960e:	b480      	push	{r7}
 8009610:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f003 030c 	and.w	r3, r3, #12
}
 800961c:	4618      	mov	r0, r3
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <LL_RCC_SetAHBPrescaler>:
{
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800962e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009638:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4313      	orrs	r3, r2
 8009640:	608b      	str	r3, [r1, #8]
}
 8009642:	bf00      	nop
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <LL_C2_RCC_SetAHBPrescaler>:
{
 800964e:	b480      	push	{r7}
 8009650:	b083      	sub	sp, #12
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8009656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800965a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800965e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4313      	orrs	r3, r2
 800966a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800966e:	bf00      	nop
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <LL_RCC_SetAHB4Prescaler>:
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8009682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009686:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800968a:	f023 020f 	bic.w	r2, r3, #15
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	091b      	lsrs	r3, r3, #4
 8009692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009696:	4313      	orrs	r3, r2
 8009698:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <LL_RCC_SetAPB1Prescaler>:
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80096b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	608b      	str	r3, [r1, #8]
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <LL_RCC_SetAPB2Prescaler>:
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80096d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80096e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	608b      	str	r3, [r1, #8]
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <LL_RCC_GetAHBPrescaler>:
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80096fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009706:	4618      	mov	r0, r3
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <LL_RCC_GetAHB4Prescaler>:
{
 8009710:	b480      	push	{r7}
 8009712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8009714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009718:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800971c:	011b      	lsls	r3, r3, #4
 800971e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009722:	4618      	mov	r0, r3
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <LL_RCC_GetAPB1Prescaler>:
{
 800972c:	b480      	push	{r7}
 800972e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800973a:	4618      	mov	r0, r3
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <LL_RCC_GetAPB2Prescaler>:
{
 8009744:	b480      	push	{r7}
 8009746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8009752:	4618      	mov	r0, r3
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <LL_RCC_PLL_Enable>:
{
 800975c:	b480      	push	{r7}
 800975e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8009760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800976a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800976e:	6013      	str	r3, [r2, #0]
}
 8009770:	bf00      	nop
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <LL_RCC_PLL_Disable>:
{
 800977a:	b480      	push	{r7}
 800977c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800977e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800978c:	6013      	str	r3, [r2, #0]
}
 800978e:	bf00      	nop
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <LL_RCC_PLL_IsReady>:
{
 8009798:	b480      	push	{r7}
 800979a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800979c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097aa:	d101      	bne.n	80097b0 <LL_RCC_PLL_IsReady+0x18>
 80097ac:	2301      	movs	r3, #1
 80097ae:	e000      	b.n	80097b2 <LL_RCC_PLL_IsReady+0x1a>
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <LL_RCC_PLL_GetN>:
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80097c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	0a1b      	lsrs	r3, r3, #8
 80097c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <LL_RCC_PLL_GetR>:
{
 80097d6:	b480      	push	{r7}
 80097d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80097da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <LL_RCC_PLL_GetDivider>:
{
 80097ee:	b480      	push	{r7}
 80097f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80097f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <LL_RCC_PLL_GetMainSource>:
{
 8009806:	b480      	push	{r7}
 8009808:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800980a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f003 0303 	and.w	r3, r3, #3
}
 8009814:	4618      	mov	r0, r3
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <LL_RCC_IsActiveFlag_HPRE>:
{
 800981e:	b480      	push	{r7}
 8009820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8009822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800982c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009830:	d101      	bne.n	8009836 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8009832:	2301      	movs	r3, #1
 8009834:	e000      	b.n	8009838 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr

08009842 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8009842:	b480      	push	{r7}
 8009844:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8009846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800984a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800984e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009856:	d101      	bne.n	800985c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8009858:	2301      	movs	r3, #1
 800985a:	e000      	b.n	800985e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8009868:	b480      	push	{r7}
 800986a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800986c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009870:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800987c:	d101      	bne.n	8009882 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800987e:	2301      	movs	r3, #1
 8009880:	e000      	b.n	8009884 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800988e:	b480      	push	{r7}
 8009890:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8009892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800989c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098a0:	d101      	bne.n	80098a6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80098a2:	2301      	movs	r3, #1
 80098a4:	e000      	b.n	80098a8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80098b2:	b480      	push	{r7}
 80098b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80098b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80098c4:	d101      	bne.n	80098ca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80098c6:	2301      	movs	r3, #1
 80098c8:	e000      	b.n	80098cc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
	...

080098d8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80098d8:	b590      	push	{r4, r7, lr}
 80098da:	b08d      	sub	sp, #52	; 0x34
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d101      	bne.n	80098ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e363      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 0320 	and.w	r3, r3, #32
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f000 808d 	beq.w	8009a12 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098f8:	f7ff fe89 	bl	800960e <LL_RCC_GetSysClkSource>
 80098fc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80098fe:	f7ff ff82 	bl	8009806 <LL_RCC_PLL_GetMainSource>
 8009902:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d005      	beq.n	8009916 <HAL_RCC_OscConfig+0x3e>
 800990a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990c:	2b0c      	cmp	r3, #12
 800990e:	d147      	bne.n	80099a0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	2b01      	cmp	r3, #1
 8009914:	d144      	bne.n	80099a0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	69db      	ldr	r3, [r3, #28]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d101      	bne.n	8009922 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e347      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009926:	f7ff fe34 	bl	8009592 <LL_RCC_MSI_GetRange>
 800992a:	4603      	mov	r3, r0
 800992c:	429c      	cmp	r4, r3
 800992e:	d914      	bls.n	800995a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	4618      	mov	r0, r3
 8009936:	f000 fd2f 	bl	800a398 <RCC_SetFlashLatencyFromMSIRange>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e336      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fe0e 	bl	800956a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff fe32 	bl	80095bc <LL_RCC_MSI_SetCalibTrimming>
 8009958:	e013      	b.n	8009982 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995e:	4618      	mov	r0, r3
 8009960:	f7ff fe03 	bl	800956a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a1b      	ldr	r3, [r3, #32]
 8009968:	4618      	mov	r0, r3
 800996a:	f7ff fe27 	bl	80095bc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009972:	4618      	mov	r0, r3
 8009974:	f000 fd10 	bl	800a398 <RCC_SetFlashLatencyFromMSIRange>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e317      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009982:	f000 fcc9 	bl	800a318 <HAL_RCC_GetHCLKFreq>
 8009986:	4603      	mov	r3, r0
 8009988:	4aa4      	ldr	r2, [pc, #656]	; (8009c1c <HAL_RCC_OscConfig+0x344>)
 800998a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800998c:	4ba4      	ldr	r3, [pc, #656]	; (8009c20 <HAL_RCC_OscConfig+0x348>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4618      	mov	r0, r3
 8009992:	f7fe fa25 	bl	8007de0 <HAL_InitTick>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d039      	beq.n	8009a10 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	e308      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d01e      	beq.n	80099e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80099a8:	f7ff fdb0 	bl	800950c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80099ac:	f7fe fa66 	bl	8007e7c <HAL_GetTick>
 80099b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80099b2:	e008      	b.n	80099c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80099b4:	f7fe fa62 	bl	8007e7c <HAL_GetTick>
 80099b8:	4602      	mov	r2, r0
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d901      	bls.n	80099c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e2f5      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80099c6:	f7ff fdbf 	bl	8009548 <LL_RCC_MSI_IsReady>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d0f1      	beq.n	80099b4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7ff fdc8 	bl	800956a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	4618      	mov	r0, r3
 80099e0:	f7ff fdec 	bl	80095bc <LL_RCC_MSI_SetCalibTrimming>
 80099e4:	e015      	b.n	8009a12 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80099e6:	f7ff fda0 	bl	800952a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80099ea:	f7fe fa47 	bl	8007e7c <HAL_GetTick>
 80099ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80099f0:	e008      	b.n	8009a04 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80099f2:	f7fe fa43 	bl	8007e7c <HAL_GetTick>
 80099f6:	4602      	mov	r2, r0
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d901      	bls.n	8009a04 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	e2d6      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8009a04:	f7ff fda0 	bl	8009548 <LL_RCC_MSI_IsReady>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1f1      	bne.n	80099f2 <HAL_RCC_OscConfig+0x11a>
 8009a0e:	e000      	b.n	8009a12 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009a10:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d047      	beq.n	8009aae <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a1e:	f7ff fdf6 	bl	800960e <LL_RCC_GetSysClkSource>
 8009a22:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a24:	f7ff feef 	bl	8009806 <LL_RCC_PLL_GetMainSource>
 8009a28:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	2b08      	cmp	r3, #8
 8009a2e:	d005      	beq.n	8009a3c <HAL_RCC_OscConfig+0x164>
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	2b0c      	cmp	r3, #12
 8009a34:	d108      	bne.n	8009a48 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	2b03      	cmp	r3, #3
 8009a3a:	d105      	bne.n	8009a48 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d134      	bne.n	8009aae <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e2b4      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a50:	d102      	bne.n	8009a58 <HAL_RCC_OscConfig+0x180>
 8009a52:	f7ff fbdd 	bl	8009210 <LL_RCC_HSE_Enable>
 8009a56:	e001      	b.n	8009a5c <HAL_RCC_OscConfig+0x184>
 8009a58:	f7ff fbe9 	bl	800922e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d012      	beq.n	8009a8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a64:	f7fe fa0a 	bl	8007e7c <HAL_GetTick>
 8009a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8009a6a:	e008      	b.n	8009a7e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a6c:	f7fe fa06 	bl	8007e7c <HAL_GetTick>
 8009a70:	4602      	mov	r2, r0
 8009a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	2b64      	cmp	r3, #100	; 0x64
 8009a78:	d901      	bls.n	8009a7e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e299      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8009a7e:	f7ff fbe5 	bl	800924c <LL_RCC_HSE_IsReady>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d0f1      	beq.n	8009a6c <HAL_RCC_OscConfig+0x194>
 8009a88:	e011      	b.n	8009aae <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a8a:	f7fe f9f7 	bl	8007e7c <HAL_GetTick>
 8009a8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8009a90:	e008      	b.n	8009aa4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a92:	f7fe f9f3 	bl	8007e7c <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	2b64      	cmp	r3, #100	; 0x64
 8009a9e:	d901      	bls.n	8009aa4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	e286      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8009aa4:	f7ff fbd2 	bl	800924c <LL_RCC_HSE_IsReady>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1f1      	bne.n	8009a92 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0302 	and.w	r3, r3, #2
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d04c      	beq.n	8009b54 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009aba:	f7ff fda8 	bl	800960e <LL_RCC_GetSysClkSource>
 8009abe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ac0:	f7ff fea1 	bl	8009806 <LL_RCC_PLL_GetMainSource>
 8009ac4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	2b04      	cmp	r3, #4
 8009aca:	d005      	beq.n	8009ad8 <HAL_RCC_OscConfig+0x200>
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	2b0c      	cmp	r3, #12
 8009ad0:	d10e      	bne.n	8009af0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d10b      	bne.n	8009af0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d101      	bne.n	8009ae4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e266      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7ff fbf1 	bl	80092d0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009aee:	e031      	b.n	8009b54 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d019      	beq.n	8009b2c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009af8:	f7ff fbba 	bl	8009270 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009afc:	f7fe f9be 	bl	8007e7c <HAL_GetTick>
 8009b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8009b02:	e008      	b.n	8009b16 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b04:	f7fe f9ba 	bl	8007e7c <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d901      	bls.n	8009b16 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e24d      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8009b16:	f7ff fbc9 	bl	80092ac <LL_RCC_HSI_IsReady>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d0f1      	beq.n	8009b04 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7ff fbd3 	bl	80092d0 <LL_RCC_HSI_SetCalibTrimming>
 8009b2a:	e013      	b.n	8009b54 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b2c:	f7ff fbaf 	bl	800928e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b30:	f7fe f9a4 	bl	8007e7c <HAL_GetTick>
 8009b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8009b36:	e008      	b.n	8009b4a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b38:	f7fe f9a0 	bl	8007e7c <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d901      	bls.n	8009b4a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e233      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8009b4a:	f7ff fbaf 	bl	80092ac <LL_RCC_HSI_IsReady>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1f1      	bne.n	8009b38 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0308 	and.w	r3, r3, #8
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d106      	bne.n	8009b6e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 80a3 	beq.w	8009cb4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d076      	beq.n	8009c64 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0310 	and.w	r3, r3, #16
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d046      	beq.n	8009c10 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8009b82:	f7ff fc66 	bl	8009452 <LL_RCC_LSI1_IsReady>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d113      	bne.n	8009bb4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8009b8c:	f7ff fc3f 	bl	800940e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009b90:	f7fe f974 	bl	8007e7c <HAL_GetTick>
 8009b94:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009b96:	e008      	b.n	8009baa <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009b98:	f7fe f970 	bl	8007e7c <HAL_GetTick>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d901      	bls.n	8009baa <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	e203      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009baa:	f7ff fc52 	bl	8009452 <LL_RCC_LSI1_IsReady>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d0f1      	beq.n	8009b98 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8009bb4:	f7ff fc5f 	bl	8009476 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb8:	f7fe f960 	bl	8007e7c <HAL_GetTick>
 8009bbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009bbe:	e008      	b.n	8009bd2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009bc0:	f7fe f95c 	bl	8007e7c <HAL_GetTick>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d901      	bls.n	8009bd2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e1ef      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009bd2:	f7ff fc72 	bl	80094ba <LL_RCC_LSI2_IsReady>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d0f1      	beq.n	8009bc0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7ff fc7c 	bl	80094de <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8009be6:	f7ff fc23 	bl	8009430 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bea:	f7fe f947 	bl	8007e7c <HAL_GetTick>
 8009bee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009bf0:	e008      	b.n	8009c04 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009bf2:	f7fe f943 	bl	8007e7c <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d901      	bls.n	8009c04 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e1d6      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009c04:	f7ff fc25 	bl	8009452 <LL_RCC_LSI1_IsReady>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1f1      	bne.n	8009bf2 <HAL_RCC_OscConfig+0x31a>
 8009c0e:	e051      	b.n	8009cb4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8009c10:	f7ff fbfd 	bl	800940e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c14:	f7fe f932 	bl	8007e7c <HAL_GetTick>
 8009c18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009c1a:	e00c      	b.n	8009c36 <HAL_RCC_OscConfig+0x35e>
 8009c1c:	20000098 	.word	0x20000098
 8009c20:	2000009c 	.word	0x2000009c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009c24:	f7fe f92a 	bl	8007e7c <HAL_GetTick>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d901      	bls.n	8009c36 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8009c32:	2303      	movs	r3, #3
 8009c34:	e1bd      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009c36:	f7ff fc0c 	bl	8009452 <LL_RCC_LSI1_IsReady>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d0f1      	beq.n	8009c24 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8009c40:	f7ff fc2a 	bl	8009498 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009c44:	e008      	b.n	8009c58 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009c46:	f7fe f919 	bl	8007e7c <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	2b03      	cmp	r3, #3
 8009c52:	d901      	bls.n	8009c58 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e1ac      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009c58:	f7ff fc2f 	bl	80094ba <LL_RCC_LSI2_IsReady>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1f1      	bne.n	8009c46 <HAL_RCC_OscConfig+0x36e>
 8009c62:	e027      	b.n	8009cb4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8009c64:	f7ff fc18 	bl	8009498 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c68:	f7fe f908 	bl	8007e7c <HAL_GetTick>
 8009c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009c6e:	e008      	b.n	8009c82 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009c70:	f7fe f904 	bl	8007e7c <HAL_GetTick>
 8009c74:	4602      	mov	r2, r0
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	2b03      	cmp	r3, #3
 8009c7c:	d901      	bls.n	8009c82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	e197      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009c82:	f7ff fc1a 	bl	80094ba <LL_RCC_LSI2_IsReady>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1f1      	bne.n	8009c70 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8009c8c:	f7ff fbd0 	bl	8009430 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c90:	f7fe f8f4 	bl	8007e7c <HAL_GetTick>
 8009c94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009c96:	e008      	b.n	8009caa <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009c98:	f7fe f8f0 	bl	8007e7c <HAL_GetTick>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d901      	bls.n	8009caa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e183      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009caa:	f7ff fbd2 	bl	8009452 <LL_RCC_LSI1_IsReady>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1f1      	bne.n	8009c98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d05b      	beq.n	8009d78 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cc0:	4ba7      	ldr	r3, [pc, #668]	; (8009f60 <HAL_RCC_OscConfig+0x688>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d114      	bne.n	8009cf6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009ccc:	f7ff fa70 	bl	80091b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009cd0:	f7fe f8d4 	bl	8007e7c <HAL_GetTick>
 8009cd4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cd6:	e008      	b.n	8009cea <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cd8:	f7fe f8d0 	bl	8007e7c <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d901      	bls.n	8009cea <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e163      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cea:	4b9d      	ldr	r3, [pc, #628]	; (8009f60 <HAL_RCC_OscConfig+0x688>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0f0      	beq.n	8009cd8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d102      	bne.n	8009d04 <HAL_RCC_OscConfig+0x42c>
 8009cfe:	f7ff fb30 	bl	8009362 <LL_RCC_LSE_Enable>
 8009d02:	e00c      	b.n	8009d1e <HAL_RCC_OscConfig+0x446>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	2b05      	cmp	r3, #5
 8009d0a:	d104      	bne.n	8009d16 <HAL_RCC_OscConfig+0x43e>
 8009d0c:	f7ff fb4b 	bl	80093a6 <LL_RCC_LSE_EnableBypass>
 8009d10:	f7ff fb27 	bl	8009362 <LL_RCC_LSE_Enable>
 8009d14:	e003      	b.n	8009d1e <HAL_RCC_OscConfig+0x446>
 8009d16:	f7ff fb35 	bl	8009384 <LL_RCC_LSE_Disable>
 8009d1a:	f7ff fb55 	bl	80093c8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d014      	beq.n	8009d50 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d26:	f7fe f8a9 	bl	8007e7c <HAL_GetTick>
 8009d2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009d2c:	e00a      	b.n	8009d44 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d2e:	f7fe f8a5 	bl	8007e7c <HAL_GetTick>
 8009d32:	4602      	mov	r2, r0
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d901      	bls.n	8009d44 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e136      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009d44:	f7ff fb51 	bl	80093ea <LL_RCC_LSE_IsReady>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0ef      	beq.n	8009d2e <HAL_RCC_OscConfig+0x456>
 8009d4e:	e013      	b.n	8009d78 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d50:	f7fe f894 	bl	8007e7c <HAL_GetTick>
 8009d54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8009d56:	e00a      	b.n	8009d6e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d58:	f7fe f890 	bl	8007e7c <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d901      	bls.n	8009d6e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	e121      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8009d6e:	f7ff fb3c 	bl	80093ea <LL_RCC_LSE_IsReady>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1ef      	bne.n	8009d58 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d02c      	beq.n	8009dde <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d014      	beq.n	8009db6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d8c:	f7ff fab5 	bl	80092fa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d90:	f7fe f874 	bl	8007e7c <HAL_GetTick>
 8009d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009d96:	e008      	b.n	8009daa <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d98:	f7fe f870 	bl	8007e7c <HAL_GetTick>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d901      	bls.n	8009daa <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e103      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009daa:	f7ff fac8 	bl	800933e <LL_RCC_HSI48_IsReady>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d0f1      	beq.n	8009d98 <HAL_RCC_OscConfig+0x4c0>
 8009db4:	e013      	b.n	8009dde <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009db6:	f7ff fab1 	bl	800931c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dba:	f7fe f85f 	bl	8007e7c <HAL_GetTick>
 8009dbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009dc0:	e008      	b.n	8009dd4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009dc2:	f7fe f85b 	bl	8007e7c <HAL_GetTick>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	1ad3      	subs	r3, r2, r3
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d901      	bls.n	8009dd4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	e0ee      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009dd4:	f7ff fab3 	bl	800933e <LL_RCC_HSI48_IsReady>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1f1      	bne.n	8009dc2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f000 80e4 	beq.w	8009fb0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009de8:	f7ff fc11 	bl	800960e <LL_RCC_GetSysClkSource>
 8009dec:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8009dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	f040 80b4 	bne.w	8009f68 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f003 0203 	and.w	r2, r3, #3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d123      	bne.n	8009e56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d11c      	bne.n	8009e56 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	0a1b      	lsrs	r3, r3, #8
 8009e20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d114      	bne.n	8009e56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d10d      	bne.n	8009e56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d106      	bne.n	8009e56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d05d      	beq.n	8009f12 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	2b0c      	cmp	r3, #12
 8009e5a:	d058      	beq.n	8009f0e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e0a1      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009e6e:	f7ff fc84 	bl	800977a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009e72:	f7fe f803 	bl	8007e7c <HAL_GetTick>
 8009e76:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e78:	e008      	b.n	8009e8c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e7a:	f7fd ffff 	bl	8007e7c <HAL_GetTick>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d901      	bls.n	8009e8c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e092      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1ef      	bne.n	8009e7a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e9e:	68da      	ldr	r2, [r3, #12]
 8009ea0:	4b30      	ldr	r3, [pc, #192]	; (8009f64 <HAL_RCC_OscConfig+0x68c>)
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009eac:	4311      	orrs	r1, r2
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009eb2:	0212      	lsls	r2, r2, #8
 8009eb4:	4311      	orrs	r1, r2
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009eba:	4311      	orrs	r1, r2
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009ec0:	4311      	orrs	r1, r2
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009ec6:	430a      	orrs	r2, r1
 8009ec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009ed0:	f7ff fc44 	bl	800975c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ee2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009ee4:	f7fd ffca 	bl	8007e7c <HAL_GetTick>
 8009ee8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009eea:	e008      	b.n	8009efe <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009eec:	f7fd ffc6 	bl	8007e7c <HAL_GetTick>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d901      	bls.n	8009efe <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8009efa:	2303      	movs	r3, #3
 8009efc:	e059      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0ef      	beq.n	8009eec <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f0c:	e050      	b.n	8009fb0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e04f      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d147      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009f20:	f7ff fc1c 	bl	800975c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009f34:	f7fd ffa2 	bl	8007e7c <HAL_GetTick>
 8009f38:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f3a:	e008      	b.n	8009f4e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f3c:	f7fd ff9e 	bl	8007e7c <HAL_GetTick>
 8009f40:	4602      	mov	r2, r0
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	1ad3      	subs	r3, r2, r3
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d901      	bls.n	8009f4e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	e031      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0ef      	beq.n	8009f3c <HAL_RCC_OscConfig+0x664>
 8009f5c:	e028      	b.n	8009fb0 <HAL_RCC_OscConfig+0x6d8>
 8009f5e:	bf00      	nop
 8009f60:	58000400 	.word	0x58000400
 8009f64:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	2b0c      	cmp	r3, #12
 8009f6c:	d01e      	beq.n	8009fac <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f6e:	f7ff fc04 	bl	800977a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f72:	f7fd ff83 	bl	8007e7c <HAL_GetTick>
 8009f76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f78:	e008      	b.n	8009f8c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f7a:	f7fd ff7f 	bl	8007e7c <HAL_GetTick>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d901      	bls.n	8009f8c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	e012      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1ef      	bne.n	8009f7a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8009f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f9e:	68da      	ldr	r2, [r3, #12]
 8009fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009fa4:	4b05      	ldr	r3, [pc, #20]	; (8009fbc <HAL_RCC_OscConfig+0x6e4>)
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	60cb      	str	r3, [r1, #12]
 8009faa:	e001      	b.n	8009fb0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e000      	b.n	8009fb2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3734      	adds	r7, #52	; 0x34
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd90      	pop	{r4, r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	eefefffc 	.word	0xeefefffc

08009fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e12d      	b.n	800a230 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009fd4:	4b98      	ldr	r3, [pc, #608]	; (800a238 <HAL_RCC_ClockConfig+0x278>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0307 	and.w	r3, r3, #7
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d91b      	bls.n	800a01a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fe2:	4b95      	ldr	r3, [pc, #596]	; (800a238 <HAL_RCC_ClockConfig+0x278>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f023 0207 	bic.w	r2, r3, #7
 8009fea:	4993      	ldr	r1, [pc, #588]	; (800a238 <HAL_RCC_ClockConfig+0x278>)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ff2:	f7fd ff43 	bl	8007e7c <HAL_GetTick>
 8009ff6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ff8:	e008      	b.n	800a00c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009ffa:	f7fd ff3f 	bl	8007e7c <HAL_GetTick>
 8009ffe:	4602      	mov	r2, r0
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	2b02      	cmp	r3, #2
 800a006:	d901      	bls.n	800a00c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800a008:	2303      	movs	r3, #3
 800a00a:	e111      	b.n	800a230 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a00c:	4b8a      	ldr	r3, [pc, #552]	; (800a238 <HAL_RCC_ClockConfig+0x278>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0307 	and.w	r3, r3, #7
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	429a      	cmp	r2, r3
 800a018:	d1ef      	bne.n	8009ffa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 0302 	and.w	r3, r3, #2
 800a022:	2b00      	cmp	r3, #0
 800a024:	d016      	beq.n	800a054 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7ff fafb 	bl	8009626 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a030:	f7fd ff24 	bl	8007e7c <HAL_GetTick>
 800a034:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800a036:	e008      	b.n	800a04a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a038:	f7fd ff20 	bl	8007e7c <HAL_GetTick>
 800a03c:	4602      	mov	r2, r0
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	2b02      	cmp	r3, #2
 800a044:	d901      	bls.n	800a04a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e0f2      	b.n	800a230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800a04a:	f7ff fbe8 	bl	800981e <LL_RCC_IsActiveFlag_HPRE>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d0f1      	beq.n	800a038 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 0320 	and.w	r3, r3, #32
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d016      	beq.n	800a08e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	695b      	ldr	r3, [r3, #20]
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff faf2 	bl	800964e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a06a:	f7fd ff07 	bl	8007e7c <HAL_GetTick>
 800a06e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800a070:	e008      	b.n	800a084 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a072:	f7fd ff03 	bl	8007e7c <HAL_GetTick>
 800a076:	4602      	mov	r2, r0
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	1ad3      	subs	r3, r2, r3
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d901      	bls.n	800a084 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800a080:	2303      	movs	r3, #3
 800a082:	e0d5      	b.n	800a230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800a084:	f7ff fbdd 	bl	8009842 <LL_RCC_IsActiveFlag_C2HPRE>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0f1      	beq.n	800a072 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a096:	2b00      	cmp	r3, #0
 800a098:	d016      	beq.n	800a0c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	699b      	ldr	r3, [r3, #24]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff faeb 	bl	800967a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a0a4:	f7fd feea 	bl	8007e7c <HAL_GetTick>
 800a0a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800a0aa:	e008      	b.n	800a0be <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a0ac:	f7fd fee6 	bl	8007e7c <HAL_GetTick>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d901      	bls.n	800a0be <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e0b8      	b.n	800a230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800a0be:	f7ff fbd3 	bl	8009868 <LL_RCC_IsActiveFlag_SHDHPRE>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d0f1      	beq.n	800a0ac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f003 0304 	and.w	r3, r3, #4
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d016      	beq.n	800a102 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7ff fae5 	bl	80096a8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a0de:	f7fd fecd 	bl	8007e7c <HAL_GetTick>
 800a0e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800a0e4:	e008      	b.n	800a0f8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a0e6:	f7fd fec9 	bl	8007e7c <HAL_GetTick>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d901      	bls.n	800a0f8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	e09b      	b.n	800a230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800a0f8:	f7ff fbc9 	bl	800988e <LL_RCC_IsActiveFlag_PPRE1>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d0f1      	beq.n	800a0e6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0308 	and.w	r3, r3, #8
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d017      	beq.n	800a13e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	00db      	lsls	r3, r3, #3
 800a114:	4618      	mov	r0, r3
 800a116:	f7ff fadb 	bl	80096d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a11a:	f7fd feaf 	bl	8007e7c <HAL_GetTick>
 800a11e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a120:	e008      	b.n	800a134 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a122:	f7fd feab 	bl	8007e7c <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d901      	bls.n	800a134 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e07d      	b.n	800a230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a134:	f7ff fbbd 	bl	80098b2 <LL_RCC_IsActiveFlag_PPRE2>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d0f1      	beq.n	800a122 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0301 	and.w	r3, r3, #1
 800a146:	2b00      	cmp	r3, #0
 800a148:	d043      	beq.n	800a1d2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d106      	bne.n	800a160 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800a152:	f7ff f87b 	bl	800924c <LL_RCC_HSE_IsReady>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d11e      	bne.n	800a19a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e067      	b.n	800a230 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	2b03      	cmp	r3, #3
 800a166:	d106      	bne.n	800a176 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800a168:	f7ff fb16 	bl	8009798 <LL_RCC_PLL_IsReady>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d113      	bne.n	800a19a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e05c      	b.n	800a230 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d106      	bne.n	800a18c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800a17e:	f7ff f9e3 	bl	8009548 <LL_RCC_MSI_IsReady>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d108      	bne.n	800a19a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e051      	b.n	800a230 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800a18c:	f7ff f88e 	bl	80092ac <LL_RCC_HSI_IsReady>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e04a      	b.n	800a230 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7ff fa21 	bl	80095e6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1a4:	f7fd fe6a 	bl	8007e7c <HAL_GetTick>
 800a1a8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1aa:	e00a      	b.n	800a1c2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1ac:	f7fd fe66 	bl	8007e7c <HAL_GetTick>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d901      	bls.n	800a1c2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e036      	b.n	800a230 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1c2:	f7ff fa24 	bl	800960e <LL_RCC_GetSysClkSource>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d1ec      	bne.n	800a1ac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a1d2:	4b19      	ldr	r3, [pc, #100]	; (800a238 <HAL_RCC_ClockConfig+0x278>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0307 	and.w	r3, r3, #7
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d21b      	bcs.n	800a218 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1e0:	4b15      	ldr	r3, [pc, #84]	; (800a238 <HAL_RCC_ClockConfig+0x278>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f023 0207 	bic.w	r2, r3, #7
 800a1e8:	4913      	ldr	r1, [pc, #76]	; (800a238 <HAL_RCC_ClockConfig+0x278>)
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1f0:	f7fd fe44 	bl	8007e7c <HAL_GetTick>
 800a1f4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1f6:	e008      	b.n	800a20a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a1f8:	f7fd fe40 	bl	8007e7c <HAL_GetTick>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	2b02      	cmp	r3, #2
 800a204:	d901      	bls.n	800a20a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e012      	b.n	800a230 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a20a:	4b0b      	ldr	r3, [pc, #44]	; (800a238 <HAL_RCC_ClockConfig+0x278>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 0307 	and.w	r3, r3, #7
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	429a      	cmp	r2, r3
 800a216:	d1ef      	bne.n	800a1f8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a218:	f000 f87e 	bl	800a318 <HAL_RCC_GetHCLKFreq>
 800a21c:	4603      	mov	r3, r0
 800a21e:	4a07      	ldr	r2, [pc, #28]	; (800a23c <HAL_RCC_ClockConfig+0x27c>)
 800a220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800a222:	f7fd fe37 	bl	8007e94 <HAL_GetTickPrio>
 800a226:	4603      	mov	r3, r0
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fd fdd9 	bl	8007de0 <HAL_InitTick>
 800a22e:	4603      	mov	r3, r0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	58004000 	.word	0x58004000
 800a23c:	20000098 	.word	0x20000098

0800a240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a240:	b590      	push	{r4, r7, lr}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a246:	f7ff f9e2 	bl	800960e <LL_RCC_GetSysClkSource>
 800a24a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10a      	bne.n	800a268 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a252:	f7ff f99e 	bl	8009592 <LL_RCC_MSI_GetRange>
 800a256:	4603      	mov	r3, r0
 800a258:	091b      	lsrs	r3, r3, #4
 800a25a:	f003 030f 	and.w	r3, r3, #15
 800a25e:	4a2b      	ldr	r2, [pc, #172]	; (800a30c <HAL_RCC_GetSysClockFreq+0xcc>)
 800a260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	e04b      	b.n	800a300 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b04      	cmp	r3, #4
 800a26c:	d102      	bne.n	800a274 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a26e:	4b28      	ldr	r3, [pc, #160]	; (800a310 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a270:	60fb      	str	r3, [r7, #12]
 800a272:	e045      	b.n	800a300 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b08      	cmp	r3, #8
 800a278:	d10a      	bne.n	800a290 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a27a:	f7fe ffb7 	bl	80091ec <LL_RCC_HSE_IsEnabledDiv2>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b01      	cmp	r3, #1
 800a282:	d102      	bne.n	800a28a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800a284:	4b22      	ldr	r3, [pc, #136]	; (800a310 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a286:	60fb      	str	r3, [r7, #12]
 800a288:	e03a      	b.n	800a300 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800a28a:	4b22      	ldr	r3, [pc, #136]	; (800a314 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a28c:	60fb      	str	r3, [r7, #12]
 800a28e:	e037      	b.n	800a300 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800a290:	f7ff fab9 	bl	8009806 <LL_RCC_PLL_GetMainSource>
 800a294:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d003      	beq.n	800a2a4 <HAL_RCC_GetSysClockFreq+0x64>
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	d003      	beq.n	800a2aa <HAL_RCC_GetSysClockFreq+0x6a>
 800a2a2:	e00d      	b.n	800a2c0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800a2a4:	4b1a      	ldr	r3, [pc, #104]	; (800a310 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a2a6:	60bb      	str	r3, [r7, #8]
        break;
 800a2a8:	e015      	b.n	800a2d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a2aa:	f7fe ff9f 	bl	80091ec <LL_RCC_HSE_IsEnabledDiv2>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d102      	bne.n	800a2ba <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800a2b4:	4b16      	ldr	r3, [pc, #88]	; (800a310 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a2b6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800a2b8:	e00d      	b.n	800a2d6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800a2ba:	4b16      	ldr	r3, [pc, #88]	; (800a314 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a2bc:	60bb      	str	r3, [r7, #8]
        break;
 800a2be:	e00a      	b.n	800a2d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a2c0:	f7ff f967 	bl	8009592 <LL_RCC_MSI_GetRange>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	091b      	lsrs	r3, r3, #4
 800a2c8:	f003 030f 	and.w	r3, r3, #15
 800a2cc:	4a0f      	ldr	r2, [pc, #60]	; (800a30c <HAL_RCC_GetSysClockFreq+0xcc>)
 800a2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2d2:	60bb      	str	r3, [r7, #8]
        break;
 800a2d4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800a2d6:	f7ff fa71 	bl	80097bc <LL_RCC_PLL_GetN>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	fb03 f402 	mul.w	r4, r3, r2
 800a2e2:	f7ff fa84 	bl	80097ee <LL_RCC_PLL_GetDivider>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	091b      	lsrs	r3, r3, #4
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	fbb4 f4f3 	udiv	r4, r4, r3
 800a2f0:	f7ff fa71 	bl	80097d6 <LL_RCC_PLL_GetR>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	0f5b      	lsrs	r3, r3, #29
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	fbb4 f3f3 	udiv	r3, r4, r3
 800a2fe:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800a300:	68fb      	ldr	r3, [r7, #12]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3714      	adds	r7, #20
 800a306:	46bd      	mov	sp, r7
 800a308:	bd90      	pop	{r4, r7, pc}
 800a30a:	bf00      	nop
 800a30c:	08032ef8 	.word	0x08032ef8
 800a310:	00f42400 	.word	0x00f42400
 800a314:	01e84800 	.word	0x01e84800

0800a318 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a318:	b598      	push	{r3, r4, r7, lr}
 800a31a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800a31c:	f7ff ff90 	bl	800a240 <HAL_RCC_GetSysClockFreq>
 800a320:	4604      	mov	r4, r0
 800a322:	f7ff f9e9 	bl	80096f8 <LL_RCC_GetAHBPrescaler>
 800a326:	4603      	mov	r3, r0
 800a328:	091b      	lsrs	r3, r3, #4
 800a32a:	f003 030f 	and.w	r3, r3, #15
 800a32e:	4a03      	ldr	r2, [pc, #12]	; (800a33c <HAL_RCC_GetHCLKFreq+0x24>)
 800a330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a334:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800a338:	4618      	mov	r0, r3
 800a33a:	bd98      	pop	{r3, r4, r7, pc}
 800a33c:	08032e98 	.word	0x08032e98

0800a340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a340:	b598      	push	{r3, r4, r7, lr}
 800a342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a344:	f7ff ffe8 	bl	800a318 <HAL_RCC_GetHCLKFreq>
 800a348:	4604      	mov	r4, r0
 800a34a:	f7ff f9ef 	bl	800972c <LL_RCC_GetAPB1Prescaler>
 800a34e:	4603      	mov	r3, r0
 800a350:	0a1b      	lsrs	r3, r3, #8
 800a352:	f003 0307 	and.w	r3, r3, #7
 800a356:	4a04      	ldr	r2, [pc, #16]	; (800a368 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a35c:	f003 031f 	and.w	r3, r3, #31
 800a360:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a364:	4618      	mov	r0, r3
 800a366:	bd98      	pop	{r3, r4, r7, pc}
 800a368:	08032ed8 	.word	0x08032ed8

0800a36c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a36c:	b598      	push	{r3, r4, r7, lr}
 800a36e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800a370:	f7ff ffd2 	bl	800a318 <HAL_RCC_GetHCLKFreq>
 800a374:	4604      	mov	r4, r0
 800a376:	f7ff f9e5 	bl	8009744 <LL_RCC_GetAPB2Prescaler>
 800a37a:	4603      	mov	r3, r0
 800a37c:	0adb      	lsrs	r3, r3, #11
 800a37e:	f003 0307 	and.w	r3, r3, #7
 800a382:	4a04      	ldr	r2, [pc, #16]	; (800a394 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a388:	f003 031f 	and.w	r3, r3, #31
 800a38c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a390:	4618      	mov	r0, r3
 800a392:	bd98      	pop	{r3, r4, r7, pc}
 800a394:	08032ed8 	.word	0x08032ed8

0800a398 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800a398:	b590      	push	{r4, r7, lr}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2bb0      	cmp	r3, #176	; 0xb0
 800a3a4:	d903      	bls.n	800a3ae <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800a3a6:	4b15      	ldr	r3, [pc, #84]	; (800a3fc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3aa:	60fb      	str	r3, [r7, #12]
 800a3ac:	e007      	b.n	800a3be <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	091b      	lsrs	r3, r3, #4
 800a3b2:	f003 030f 	and.w	r3, r3, #15
 800a3b6:	4a11      	ldr	r2, [pc, #68]	; (800a3fc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3bc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800a3be:	f7ff f9a7 	bl	8009710 <LL_RCC_GetAHB4Prescaler>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	091b      	lsrs	r3, r3, #4
 800a3c6:	f003 030f 	and.w	r3, r3, #15
 800a3ca:	4a0d      	ldr	r2, [pc, #52]	; (800a400 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800a3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	4a0a      	ldr	r2, [pc, #40]	; (800a404 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800a3dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e0:	0c9c      	lsrs	r4, r3, #18
 800a3e2:	f7fe fef5 	bl	80091d0 <HAL_PWREx_GetVoltageRange>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f000 f80c 	bl	800a408 <RCC_SetFlashLatency>
 800a3f0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd90      	pop	{r4, r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	08032ef8 	.word	0x08032ef8
 800a400:	08032e98 	.word	0x08032e98
 800a404:	431bde83 	.word	0x431bde83

0800a408 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800a408:	b590      	push	{r4, r7, lr}
 800a40a:	b093      	sub	sp, #76	; 0x4c
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800a412:	4b37      	ldr	r3, [pc, #220]	; (800a4f0 <RCC_SetFlashLatency+0xe8>)
 800a414:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a418:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a41a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800a41e:	4a35      	ldr	r2, [pc, #212]	; (800a4f4 <RCC_SetFlashLatency+0xec>)
 800a420:	f107 031c 	add.w	r3, r7, #28
 800a424:	ca07      	ldmia	r2, {r0, r1, r2}
 800a426:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800a42a:	4b33      	ldr	r3, [pc, #204]	; (800a4f8 <RCC_SetFlashLatency+0xf0>)
 800a42c:	f107 040c 	add.w	r4, r7, #12
 800a430:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a432:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800a436:	2300      	movs	r3, #0
 800a438:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a440:	d11a      	bne.n	800a478 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a442:	2300      	movs	r3, #0
 800a444:	643b      	str	r3, [r7, #64]	; 0x40
 800a446:	e013      	b.n	800a470 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800a448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	3348      	adds	r3, #72	; 0x48
 800a44e:	443b      	add	r3, r7
 800a450:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	429a      	cmp	r2, r3
 800a458:	d807      	bhi.n	800a46a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	3348      	adds	r3, #72	; 0x48
 800a460:	443b      	add	r3, r7
 800a462:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a466:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a468:	e020      	b.n	800a4ac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46c:	3301      	adds	r3, #1
 800a46e:	643b      	str	r3, [r7, #64]	; 0x40
 800a470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a472:	2b03      	cmp	r3, #3
 800a474:	d9e8      	bls.n	800a448 <RCC_SetFlashLatency+0x40>
 800a476:	e019      	b.n	800a4ac <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a478:	2300      	movs	r3, #0
 800a47a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a47c:	e013      	b.n	800a4a6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800a47e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	3348      	adds	r3, #72	; 0x48
 800a484:	443b      	add	r3, r7
 800a486:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d807      	bhi.n	800a4a0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	3348      	adds	r3, #72	; 0x48
 800a496:	443b      	add	r3, r7
 800a498:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a49c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a49e:	e005      	b.n	800a4ac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d9e8      	bls.n	800a47e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800a4ac:	4b13      	ldr	r3, [pc, #76]	; (800a4fc <RCC_SetFlashLatency+0xf4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f023 0207 	bic.w	r2, r3, #7
 800a4b4:	4911      	ldr	r1, [pc, #68]	; (800a4fc <RCC_SetFlashLatency+0xf4>)
 800a4b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a4bc:	f7fd fcde 	bl	8007e7c <HAL_GetTick>
 800a4c0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a4c2:	e008      	b.n	800a4d6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a4c4:	f7fd fcda 	bl	8007e7c <HAL_GetTick>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d901      	bls.n	800a4d6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e007      	b.n	800a4e6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a4d6:	4b09      	ldr	r3, [pc, #36]	; (800a4fc <RCC_SetFlashLatency+0xf4>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0307 	and.w	r3, r3, #7
 800a4de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d1ef      	bne.n	800a4c4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	374c      	adds	r7, #76	; 0x4c
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd90      	pop	{r4, r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	0802eed4 	.word	0x0802eed4
 800a4f4:	0802eee4 	.word	0x0802eee4
 800a4f8:	0802eef0 	.word	0x0802eef0
 800a4fc:	58004000 	.word	0x58004000

0800a500 <LL_RCC_LSE_IsEnabled>:
{
 800a500:	b480      	push	{r7}
 800a502:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800a504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a50c:	f003 0301 	and.w	r3, r3, #1
 800a510:	2b01      	cmp	r3, #1
 800a512:	d101      	bne.n	800a518 <LL_RCC_LSE_IsEnabled+0x18>
 800a514:	2301      	movs	r3, #1
 800a516:	e000      	b.n	800a51a <LL_RCC_LSE_IsEnabled+0x1a>
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <LL_RCC_LSE_IsReady>:
{
 800a524:	b480      	push	{r7}
 800a526:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a530:	f003 0302 	and.w	r3, r3, #2
 800a534:	2b02      	cmp	r3, #2
 800a536:	d101      	bne.n	800a53c <LL_RCC_LSE_IsReady+0x18>
 800a538:	2301      	movs	r3, #1
 800a53a:	e000      	b.n	800a53e <LL_RCC_LSE_IsReady+0x1a>
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <LL_RCC_SetRFWKPClockSource>:
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800a550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a558:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a55c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4313      	orrs	r3, r2
 800a564:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <LL_RCC_SetSMPSClockSource>:
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800a57c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a582:	f023 0203 	bic.w	r2, r3, #3
 800a586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <LL_RCC_SetSMPSPrescaler>:
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800a5a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a5ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <LL_RCC_SetUSARTClockSource>:
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800a5cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d4:	f023 0203 	bic.w	r2, r3, #3
 800a5d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <LL_RCC_SetLPUARTClockSource>:
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800a5f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a600:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a604:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <LL_RCC_SetI2CClockSource>:
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a628:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	091b      	lsrs	r3, r3, #4
 800a630:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a634:	43db      	mvns	r3, r3
 800a636:	401a      	ands	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	011b      	lsls	r3, r3, #4
 800a63c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a640:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a644:	4313      	orrs	r3, r2
 800a646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a64a:	bf00      	nop
 800a64c:	370c      	adds	r7, #12
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <LL_RCC_SetLPTIMClockSource>:
{
 800a656:	b480      	push	{r7}
 800a658:	b083      	sub	sp, #12
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800a65e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a662:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	0c1b      	lsrs	r3, r3, #16
 800a66a:	041b      	lsls	r3, r3, #16
 800a66c:	43db      	mvns	r3, r3
 800a66e:	401a      	ands	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	041b      	lsls	r3, r3, #16
 800a674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a678:	4313      	orrs	r3, r2
 800a67a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a67e:	bf00      	nop
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <LL_RCC_SetSAIClockSource>:
{
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800a692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a69a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a69e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a6aa:	bf00      	nop
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <LL_RCC_SetRNGClockSource>:
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b083      	sub	sp, #12
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800a6be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a6ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a6d6:	bf00      	nop
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr

0800a6e2 <LL_RCC_SetCLK48ClockSource>:
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	b083      	sub	sp, #12
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800a6ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a6f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a702:	bf00      	nop
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <LL_RCC_SetUSBClockSource>:
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b082      	sub	sp, #8
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7ff ffe3 	bl	800a6e2 <LL_RCC_SetCLK48ClockSource>
}
 800a71c:	bf00      	nop
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <LL_RCC_SetADCClockSource>:
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800a72c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a734:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a738:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4313      	orrs	r3, r2
 800a740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <LL_RCC_SetRTCClockSource>:
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a75c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a764:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <LL_RCC_GetRTCClockSource>:
{
 800a77c:	b480      	push	{r7}
 800a77e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800a780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a788:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <LL_RCC_ForceBackupDomainReset>:
{
 800a796:	b480      	push	{r7}
 800a798:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a79a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a79e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a7ae:	bf00      	nop
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <LL_RCC_ReleaseBackupDomainReset>:
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a7bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a7d0:	bf00      	nop
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <LL_RCC_PLLSAI1_Enable>:
{
 800a7da:	b480      	push	{r7}
 800a7dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a7de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7ec:	6013      	str	r3, [r2, #0]
}
 800a7ee:	bf00      	nop
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <LL_RCC_PLLSAI1_Disable>:
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a7fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a806:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a80a:	6013      	str	r3, [r2, #0]
}
 800a80c:	bf00      	nop
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <LL_RCC_PLLSAI1_IsReady>:
{
 800a816:	b480      	push	{r7}
 800a818:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800a81a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a828:	d101      	bne.n	800a82e <LL_RCC_PLLSAI1_IsReady+0x18>
 800a82a:	2301      	movs	r3, #1
 800a82c:	e000      	b.n	800a830 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b088      	sub	sp, #32
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800a842:	2300      	movs	r3, #0
 800a844:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800a846:	2300      	movs	r3, #0
 800a848:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a852:	2b00      	cmp	r3, #0
 800a854:	d034      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a85e:	d021      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a860:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a864:	d81b      	bhi.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a866:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a86a:	d01d      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a86c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a870:	d815      	bhi.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00b      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x54>
 800a876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a87a:	d110      	bne.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800a87c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a88a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800a88c:	e00d      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	3304      	adds	r3, #4
 800a892:	4618      	mov	r0, r3
 800a894:	f000 f947 	bl	800ab26 <RCCEx_PLLSAI1_ConfigNP>
 800a898:	4603      	mov	r3, r0
 800a89a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a89c:	e005      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	77fb      	strb	r3, [r7, #31]
        break;
 800a8a2:	e002      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a8a4:	bf00      	nop
 800a8a6:	e000      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a8a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8aa:	7ffb      	ldrb	r3, [r7, #31]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d105      	bne.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff fee8 	bl	800a68a <LL_RCC_SetSAIClockSource>
 800a8ba:	e001      	b.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8bc:	7ffb      	ldrb	r3, [r7, #31]
 800a8be:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d046      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800a8cc:	f7ff ff56 	bl	800a77c <LL_RCC_GetRTCClockSource>
 800a8d0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d6:	69ba      	ldr	r2, [r7, #24]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d03c      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a8dc:	f7fe fc68 	bl	80091b0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d105      	bne.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7ff ff30 	bl	800a750 <LL_RCC_SetRTCClockSource>
 800a8f0:	e02e      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800a8f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8fa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800a8fc:	f7ff ff4b 	bl	800a796 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800a900:	f7ff ff5a 	bl	800a7b8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90e:	4313      	orrs	r3, r2
 800a910:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800a912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800a91c:	f7ff fdf0 	bl	800a500 <LL_RCC_LSE_IsEnabled>
 800a920:	4603      	mov	r3, r0
 800a922:	2b01      	cmp	r3, #1
 800a924:	d114      	bne.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a926:	f7fd faa9 	bl	8007e7c <HAL_GetTick>
 800a92a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800a92c:	e00b      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a92e:	f7fd faa5 	bl	8007e7c <HAL_GetTick>
 800a932:	4602      	mov	r2, r0
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	f241 3288 	movw	r2, #5000	; 0x1388
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d902      	bls.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800a940:	2303      	movs	r3, #3
 800a942:	77fb      	strb	r3, [r7, #31]
              break;
 800a944:	e004      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800a946:	f7ff fded 	bl	800a524 <LL_RCC_LSE_IsReady>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d1ee      	bne.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800a950:	7ffb      	ldrb	r3, [r7, #31]
 800a952:	77bb      	strb	r3, [r7, #30]
 800a954:	e001      	b.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a956:	7ffb      	ldrb	r3, [r7, #31]
 800a958:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	2b00      	cmp	r3, #0
 800a964:	d004      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	699b      	ldr	r3, [r3, #24]
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7ff fe2a 	bl	800a5c4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 0302 	and.w	r3, r3, #2
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d004      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	69db      	ldr	r3, [r3, #28]
 800a980:	4618      	mov	r0, r3
 800a982:	f7ff fe35 	bl	800a5f0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 0310 	and.w	r3, r3, #16
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d004      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff fe5d 	bl	800a656 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 0320 	and.w	r3, r3, #32
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d004      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7ff fe52 	bl	800a656 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f003 0304 	and.w	r3, r3, #4
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d004      	beq.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7ff fe2a 	bl	800a61c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 0308 	and.w	r3, r3, #8
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d004      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7ff fe1f 	bl	800a61c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d022      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7ff fe8d 	bl	800a70e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9fc:	d107      	bne.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800a9fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa0c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa16:	d10b      	bne.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 f8dd 	bl	800abdc <RCCEx_PLLSAI1_ConfigNQ>
 800aa22:	4603      	mov	r3, r0
 800aa24:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800aa26:	7ffb      	ldrb	r3, [r7, #31]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d001      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800aa2c:	7ffb      	ldrb	r3, [r7, #31]
 800aa2e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d02b      	beq.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa44:	d008      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa4e:	d003      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d105      	bne.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7ff fe2a 	bl	800a6b6 <LL_RCC_SetRNGClockSource>
 800aa62:	e00a      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x240>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	2000      	movs	r0, #0
 800aa70:	f7ff fe21 	bl	800a6b6 <LL_RCC_SetRNGClockSource>
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f7ff fe34 	bl	800a6e2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800aa82:	d107      	bne.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800aa84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d022      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7ff fe3d 	bl	800a724 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aab2:	d107      	bne.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800aab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aabe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aac2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aacc:	d10b      	bne.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	3304      	adds	r3, #4
 800aad2:	4618      	mov	r0, r3
 800aad4:	f000 f8dd 	bl	800ac92 <RCCEx_PLLSAI1_ConfigNR>
 800aad8:	4603      	mov	r3, r0
 800aada:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800aadc:	7ffb      	ldrb	r3, [r7, #31]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800aae2:	7ffb      	ldrb	r3, [r7, #31]
 800aae4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d004      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7ff fd26 	bl	800a548 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d009      	beq.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7ff fd45 	bl	800a59c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7ff fd2c 	bl	800a574 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800ab1c:	7fbb      	ldrb	r3, [r7, #30]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3720      	adds	r7, #32
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b084      	sub	sp, #16
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ab32:	f7ff fe61 	bl	800a7f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ab36:	f7fd f9a1 	bl	8007e7c <HAL_GetTick>
 800ab3a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ab3c:	e009      	b.n	800ab52 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ab3e:	f7fd f99d 	bl	8007e7c <HAL_GetTick>
 800ab42:	4602      	mov	r2, r0
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d902      	bls.n	800ab52 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab50:	e004      	b.n	800ab5c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ab52:	f7ff fe60 	bl	800a816 <LL_RCC_PLLSAI1_IsReady>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1f0      	bne.n	800ab3e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d137      	bne.n	800abd2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ab62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	021b      	lsls	r3, r3, #8
 800ab72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ab76:	4313      	orrs	r3, r2
 800ab78:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800ab7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ab90:	f7ff fe23 	bl	800a7da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab94:	f7fd f972 	bl	8007e7c <HAL_GetTick>
 800ab98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ab9a:	e009      	b.n	800abb0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ab9c:	f7fd f96e 	bl	8007e7c <HAL_GetTick>
 800aba0:	4602      	mov	r2, r0
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d902      	bls.n	800abb0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800abaa:	2303      	movs	r3, #3
 800abac:	73fb      	strb	r3, [r7, #15]
        break;
 800abae:	e004      	b.n	800abba <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800abb0:	f7ff fe31 	bl	800a816 <LL_RCC_PLLSAI1_IsReady>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d1f0      	bne.n	800ab9c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800abba:	7bfb      	ldrb	r3, [r7, #15]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d108      	bne.n	800abd2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800abc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abc4:	691a      	ldr	r2, [r3, #16]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800abce:	4313      	orrs	r3, r2
 800abd0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800abd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800abe8:	f7ff fe06 	bl	800a7f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800abec:	f7fd f946 	bl	8007e7c <HAL_GetTick>
 800abf0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800abf2:	e009      	b.n	800ac08 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800abf4:	f7fd f942 	bl	8007e7c <HAL_GetTick>
 800abf8:	4602      	mov	r2, r0
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	1ad3      	subs	r3, r2, r3
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d902      	bls.n	800ac08 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800ac02:	2303      	movs	r3, #3
 800ac04:	73fb      	strb	r3, [r7, #15]
      break;
 800ac06:	e004      	b.n	800ac12 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ac08:	f7ff fe05 	bl	800a816 <LL_RCC_PLLSAI1_IsReady>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1f0      	bne.n	800abf4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d137      	bne.n	800ac88 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ac18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	021b      	lsls	r3, r3, #8
 800ac28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800ac30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac42:	4313      	orrs	r3, r2
 800ac44:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ac46:	f7ff fdc8 	bl	800a7da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac4a:	f7fd f917 	bl	8007e7c <HAL_GetTick>
 800ac4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ac50:	e009      	b.n	800ac66 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ac52:	f7fd f913 	bl	8007e7c <HAL_GetTick>
 800ac56:	4602      	mov	r2, r0
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d902      	bls.n	800ac66 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800ac60:	2303      	movs	r3, #3
 800ac62:	73fb      	strb	r3, [r7, #15]
        break;
 800ac64:	e004      	b.n	800ac70 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ac66:	f7ff fdd6 	bl	800a816 <LL_RCC_PLLSAI1_IsReady>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d1f0      	bne.n	800ac52 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800ac70:	7bfb      	ldrb	r3, [r7, #15]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d108      	bne.n	800ac88 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ac76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac7a:	691a      	ldr	r2, [r3, #16]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac84:	4313      	orrs	r3, r2
 800ac86:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ac88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b084      	sub	sp, #16
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ac9e:	f7ff fdab 	bl	800a7f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800aca2:	f7fd f8eb 	bl	8007e7c <HAL_GetTick>
 800aca6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aca8:	e009      	b.n	800acbe <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800acaa:	f7fd f8e7 	bl	8007e7c <HAL_GetTick>
 800acae:	4602      	mov	r2, r0
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	d902      	bls.n	800acbe <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800acb8:	2303      	movs	r3, #3
 800acba:	73fb      	strb	r3, [r7, #15]
      break;
 800acbc:	e004      	b.n	800acc8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800acbe:	f7ff fdaa 	bl	800a816 <LL_RCC_PLLSAI1_IsReady>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1f0      	bne.n	800acaa <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d137      	bne.n	800ad3e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800acce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	021b      	lsls	r3, r3, #8
 800acde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ace2:	4313      	orrs	r3, r2
 800ace4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800ace6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800acf8:	4313      	orrs	r3, r2
 800acfa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800acfc:	f7ff fd6d 	bl	800a7da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad00:	f7fd f8bc 	bl	8007e7c <HAL_GetTick>
 800ad04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ad06:	e009      	b.n	800ad1c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ad08:	f7fd f8b8 	bl	8007e7c <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d902      	bls.n	800ad1c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800ad16:	2303      	movs	r3, #3
 800ad18:	73fb      	strb	r3, [r7, #15]
        break;
 800ad1a:	e004      	b.n	800ad26 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ad1c:	f7ff fd7b 	bl	800a816 <LL_RCC_PLLSAI1_IsReady>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d1f0      	bne.n	800ad08 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800ad26:	7bfb      	ldrb	r3, [r7, #15]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d108      	bne.n	800ad3e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ad2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad30:	691a      	ldr	r2, [r3, #16]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d101      	bne.n	800ad5a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e027      	b.n	800adaa <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	7a5b      	ldrb	r3, [r3, #9]
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d105      	bne.n	800ad70 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7f8 fa9c 	bl	80032a8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2202      	movs	r2, #2
 800ad74:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f023 0120 	bic.w	r1, r3, #32
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	685a      	ldr	r2, [r3, #4]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	430a      	orrs	r2, r1
 800ad8a:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f042 0204 	orr.w	r2, r2, #4
 800ad9a:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
	...

0800adb4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d101      	bne.n	800adc6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e09f      	b.n	800af06 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	2b00      	cmp	r3, #0
 800add0:	d106      	bne.n	800ade0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f7f8 fa8e 	bl	80032fc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2202      	movs	r2, #2
 800ade4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ade8:	4b49      	ldr	r3, [pc, #292]	; (800af10 <HAL_RTC_Init+0x15c>)
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	f003 0310 	and.w	r3, r3, #16
 800adf0:	2b10      	cmp	r3, #16
 800adf2:	d07e      	beq.n	800aef2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	22ca      	movs	r2, #202	; 0xca
 800adfa:	625a      	str	r2, [r3, #36]	; 0x24
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2253      	movs	r2, #83	; 0x53
 800ae02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 f8ab 	bl	800af60 <RTC_EnterInitMode>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00a      	beq.n	800ae26 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	22ff      	movs	r2, #255	; 0xff
 800ae16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2204      	movs	r2, #4
 800ae1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	73fb      	strb	r3, [r7, #15]
 800ae24:	e067      	b.n	800aef6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	6812      	ldr	r2, [r2, #0]
 800ae30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae38:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6899      	ldr	r1, [r3, #8]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685a      	ldr	r2, [r3, #4]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	431a      	orrs	r2, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	430a      	orrs	r2, r1
 800ae56:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	68d2      	ldr	r2, [r2, #12]
 800ae60:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6919      	ldr	r1, [r3, #16]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	041a      	lsls	r2, r3, #16
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	430a      	orrs	r2, r1
 800ae74:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68da      	ldr	r2, [r3, #12]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae84:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f022 0203 	bic.w	r2, r2, #3
 800ae94:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	69da      	ldr	r2, [r3, #28]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	695b      	ldr	r3, [r3, #20]
 800aea4:	431a      	orrs	r2, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	430a      	orrs	r2, r1
 800aeac:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	f003 0320 	and.w	r3, r3, #32
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d113      	bne.n	800aee4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f829 	bl	800af14 <HAL_RTC_WaitForSynchro>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00d      	beq.n	800aee4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	22ff      	movs	r2, #255	; 0xff
 800aece:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2204      	movs	r2, #4
 800aed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	e010      	b.n	800af06 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	22ff      	movs	r2, #255	; 0xff
 800aeea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800aeec:	2300      	movs	r3, #0
 800aeee:	73fb      	strb	r3, [r7, #15]
 800aef0:	e001      	b.n	800aef6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800aef2:	2300      	movs	r3, #0
 800aef4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800aef6:	7bfb      	ldrb	r3, [r7, #15]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d103      	bne.n	800af04 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800af04:	7bfb      	ldrb	r3, [r7, #15]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	40002800 	.word	0x40002800

0800af14 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	68da      	ldr	r2, [r3, #12]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800af2a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800af2c:	f7fc ffa6 	bl	8007e7c <HAL_GetTick>
 800af30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800af32:	e009      	b.n	800af48 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800af34:	f7fc ffa2 	bl	8007e7c <HAL_GetTick>
 800af38:	4602      	mov	r2, r0
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af42:	d901      	bls.n	800af48 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800af44:	2303      	movs	r3, #3
 800af46:	e007      	b.n	800af58 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	f003 0320 	and.w	r3, r3, #32
 800af52:	2b00      	cmp	r3, #0
 800af54:	d0ee      	beq.n	800af34 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af72:	2b00      	cmp	r3, #0
 800af74:	d119      	bne.n	800afaa <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800af80:	f7fc ff7c 	bl	8007e7c <HAL_GetTick>
 800af84:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800af86:	e009      	b.n	800af9c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800af88:	f7fc ff78 	bl	8007e7c <HAL_GetTick>
 800af8c:	4602      	mov	r2, r0
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af96:	d901      	bls.n	800af9c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800af98:	2303      	movs	r3, #3
 800af9a:	e007      	b.n	800afac <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d0ee      	beq.n	800af88 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d101      	bne.n	800afce <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800afca:	2302      	movs	r3, #2
 800afcc:	e0a8      	b.n	800b120 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2202      	movs	r2, #2
 800afda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	22ca      	movs	r2, #202	; 0xca
 800afe4:	625a      	str	r2, [r3, #36]	; 0x24
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2253      	movs	r2, #83	; 0x53
 800afec:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d020      	beq.n	800b03e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800affc:	f7fc ff3e 	bl	8007e7c <HAL_GetTick>
 800b000:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800b002:	e015      	b.n	800b030 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b004:	f7fc ff3a 	bl	8007e7c <HAL_GetTick>
 800b008:	4602      	mov	r2, r0
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b012:	d90d      	bls.n	800b030 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	22ff      	movs	r2, #255	; 0xff
 800b01a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2203      	movs	r2, #3
 800b020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800b02c:	2303      	movs	r3, #3
 800b02e:	e077      	b.n	800b120 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	f003 0304 	and.w	r3, r3, #4
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1e2      	bne.n	800b004 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	689a      	ldr	r2, [r3, #8]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b04c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	b2da      	uxtb	r2, r3
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800b05e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b060:	f7fc ff0c 	bl	8007e7c <HAL_GetTick>
 800b064:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800b066:	e015      	b.n	800b094 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b068:	f7fc ff08 	bl	8007e7c <HAL_GetTick>
 800b06c:	4602      	mov	r2, r0
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b076:	d90d      	bls.n	800b094 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	22ff      	movs	r2, #255	; 0xff
 800b07e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2203      	movs	r2, #3
 800b084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800b090:	2303      	movs	r3, #3
 800b092:	e045      	b.n	800b120 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	f003 0304 	and.w	r3, r3, #4
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d0e2      	beq.n	800b068 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	689a      	ldr	r2, [r3, #8]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f022 0207 	bic.w	r2, r2, #7
 800b0b8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6899      	ldr	r1, [r3, #8]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	430a      	orrs	r2, r1
 800b0c8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800b0ca:	4b17      	ldr	r3, [pc, #92]	; (800b128 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b0cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0d0:	4a15      	ldr	r2, [pc, #84]	; (800b128 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b0d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800b0da:	4b13      	ldr	r3, [pc, #76]	; (800b128 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a12      	ldr	r2, [pc, #72]	; (800b128 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b0e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0e4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	689a      	ldr	r2, [r3, #8]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b0f4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	689a      	ldr	r2, [r3, #8]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b104:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	22ff      	movs	r2, #255	; 0xff
 800b10c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2201      	movs	r2, #1
 800b112:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	58000800 	.word	0x58000800

0800b12c <LL_RCC_GetUSARTClockSource>:
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800b134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b138:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4013      	ands	r3, r2
}
 800b140:	4618      	mov	r0, r3
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <LL_RCC_GetLPUARTClockSource>:
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b158:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4013      	ands	r3, r2
}
 800b160:	4618      	mov	r0, r3
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d101      	bne.n	800b17e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	e042      	b.n	800b204 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b184:	2b00      	cmp	r3, #0
 800b186:	d106      	bne.n	800b196 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7f7 ff95 	bl	80030c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2224      	movs	r2, #36	; 0x24
 800b19a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f022 0201 	bic.w	r2, r2, #1
 800b1ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d002      	beq.n	800b1bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fe60 	bl	800be7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fc35 	bl	800ba2c <UART_SetConfig>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d101      	bne.n	800b1cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e01b      	b.n	800b204 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	685a      	ldr	r2, [r3, #4]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	689a      	ldr	r2, [r3, #8]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f042 0201 	orr.w	r2, r2, #1
 800b1fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fedf 	bl	800bfc0 <UART_CheckIdleState>
 800b202:	4603      	mov	r3, r0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b08a      	sub	sp, #40	; 0x28
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	4613      	mov	r3, r2
 800b218:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b220:	2b20      	cmp	r3, #32
 800b222:	d137      	bne.n	800b294 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <HAL_UART_Receive_IT+0x24>
 800b22a:	88fb      	ldrh	r3, [r7, #6]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	e030      	b.n	800b296 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a18      	ldr	r2, [pc, #96]	; (800b2a0 <HAL_UART_Receive_IT+0x94>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d01f      	beq.n	800b284 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d018      	beq.n	800b284 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	e853 3f00 	ldrex	r3, [r3]
 800b25e:	613b      	str	r3, [r7, #16]
   return(result);
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b266:	627b      	str	r3, [r7, #36]	; 0x24
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	461a      	mov	r2, r3
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	623b      	str	r3, [r7, #32]
 800b272:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b274:	69f9      	ldr	r1, [r7, #28]
 800b276:	6a3a      	ldr	r2, [r7, #32]
 800b278:	e841 2300 	strex	r3, r2, [r1]
 800b27c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1e6      	bne.n	800b252 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b284:	88fb      	ldrh	r3, [r7, #6]
 800b286:	461a      	mov	r2, r3
 800b288:	68b9      	ldr	r1, [r7, #8]
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f000 ffb0 	bl	800c1f0 <UART_Start_Receive_IT>
 800b290:	4603      	mov	r3, r0
 800b292:	e000      	b.n	800b296 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b294:	2302      	movs	r3, #2
  }
}
 800b296:	4618      	mov	r0, r3
 800b298:	3728      	adds	r7, #40	; 0x28
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	40008000 	.word	0x40008000

0800b2a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b08a      	sub	sp, #40	; 0x28
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2b8:	2b20      	cmp	r3, #32
 800b2ba:	d167      	bne.n	800b38c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d002      	beq.n	800b2c8 <HAL_UART_Transmit_DMA+0x24>
 800b2c2:	88fb      	ldrh	r3, [r7, #6]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d101      	bne.n	800b2cc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e060      	b.n	800b38e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	88fa      	ldrh	r2, [r7, #6]
 800b2d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	88fa      	ldrh	r2, [r7, #6]
 800b2de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2221      	movs	r2, #33	; 0x21
 800b2ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d028      	beq.n	800b34c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2fe:	4a26      	ldr	r2, [pc, #152]	; (800b398 <HAL_UART_Transmit_DMA+0xf4>)
 800b300:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b306:	4a25      	ldr	r2, [pc, #148]	; (800b39c <HAL_UART_Transmit_DMA+0xf8>)
 800b308:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b30e:	4a24      	ldr	r2, [pc, #144]	; (800b3a0 <HAL_UART_Transmit_DMA+0xfc>)
 800b310:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b316:	2200      	movs	r2, #0
 800b318:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b322:	4619      	mov	r1, r3
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3328      	adds	r3, #40	; 0x28
 800b32a:	461a      	mov	r2, r3
 800b32c:	88fb      	ldrh	r3, [r7, #6]
 800b32e:	f7fd f817 	bl	8008360 <HAL_DMA_Start_IT>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d009      	beq.n	800b34c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2210      	movs	r2, #16
 800b33c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2220      	movs	r2, #32
 800b344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	e020      	b.n	800b38e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2240      	movs	r2, #64	; 0x40
 800b352:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3308      	adds	r3, #8
 800b35a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	e853 3f00 	ldrex	r3, [r3]
 800b362:	613b      	str	r3, [r7, #16]
   return(result);
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b36a:	627b      	str	r3, [r7, #36]	; 0x24
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3308      	adds	r3, #8
 800b372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b374:	623a      	str	r2, [r7, #32]
 800b376:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b378:	69f9      	ldr	r1, [r7, #28]
 800b37a:	6a3a      	ldr	r2, [r7, #32]
 800b37c:	e841 2300 	strex	r3, r2, [r1]
 800b380:	61bb      	str	r3, [r7, #24]
   return(result);
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1e5      	bne.n	800b354 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b388:	2300      	movs	r3, #0
 800b38a:	e000      	b.n	800b38e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b38c:	2302      	movs	r3, #2
  }
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3728      	adds	r7, #40	; 0x28
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	0800c583 	.word	0x0800c583
 800b39c:	0800c61d 	.word	0x0800c61d
 800b3a0:	0800c639 	.word	0x0800c639

0800b3a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b0ba      	sub	sp, #232	; 0xe8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	69db      	ldr	r3, [r3, #28]
 800b3b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b3ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b3ce:	f640 030f 	movw	r3, #2063	; 0x80f
 800b3d2:	4013      	ands	r3, r2
 800b3d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b3d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d11b      	bne.n	800b418 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3e4:	f003 0320 	and.w	r3, r3, #32
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d015      	beq.n	800b418 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3f0:	f003 0320 	and.w	r3, r3, #32
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d105      	bne.n	800b404 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b400:	2b00      	cmp	r3, #0
 800b402:	d009      	beq.n	800b418 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 82e3 	beq.w	800b9d4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	4798      	blx	r3
      }
      return;
 800b416:	e2dd      	b.n	800b9d4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b418:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f000 8123 	beq.w	800b668 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b422:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b426:	4b8d      	ldr	r3, [pc, #564]	; (800b65c <HAL_UART_IRQHandler+0x2b8>)
 800b428:	4013      	ands	r3, r2
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d106      	bne.n	800b43c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b42e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b432:	4b8b      	ldr	r3, [pc, #556]	; (800b660 <HAL_UART_IRQHandler+0x2bc>)
 800b434:	4013      	ands	r3, r2
 800b436:	2b00      	cmp	r3, #0
 800b438:	f000 8116 	beq.w	800b668 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b440:	f003 0301 	and.w	r3, r3, #1
 800b444:	2b00      	cmp	r3, #0
 800b446:	d011      	beq.n	800b46c <HAL_UART_IRQHandler+0xc8>
 800b448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b44c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00b      	beq.n	800b46c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2201      	movs	r2, #1
 800b45a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b462:	f043 0201 	orr.w	r2, r3, #1
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b470:	f003 0302 	and.w	r3, r3, #2
 800b474:	2b00      	cmp	r3, #0
 800b476:	d011      	beq.n	800b49c <HAL_UART_IRQHandler+0xf8>
 800b478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	2b00      	cmp	r3, #0
 800b482:	d00b      	beq.n	800b49c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2202      	movs	r2, #2
 800b48a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b492:	f043 0204 	orr.w	r2, r3, #4
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4a0:	f003 0304 	and.w	r3, r3, #4
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d011      	beq.n	800b4cc <HAL_UART_IRQHandler+0x128>
 800b4a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4ac:	f003 0301 	and.w	r3, r3, #1
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00b      	beq.n	800b4cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2204      	movs	r2, #4
 800b4ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4c2:	f043 0202 	orr.w	r2, r3, #2
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b4cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4d0:	f003 0308 	and.w	r3, r3, #8
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d017      	beq.n	800b508 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4dc:	f003 0320 	and.w	r3, r3, #32
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d105      	bne.n	800b4f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b4e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b4e8:	4b5c      	ldr	r3, [pc, #368]	; (800b65c <HAL_UART_IRQHandler+0x2b8>)
 800b4ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00b      	beq.n	800b508 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2208      	movs	r2, #8
 800b4f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4fe:	f043 0208 	orr.w	r2, r3, #8
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b50c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b510:	2b00      	cmp	r3, #0
 800b512:	d012      	beq.n	800b53a <HAL_UART_IRQHandler+0x196>
 800b514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b518:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00c      	beq.n	800b53a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b528:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b530:	f043 0220 	orr.w	r2, r3, #32
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b540:	2b00      	cmp	r3, #0
 800b542:	f000 8249 	beq.w	800b9d8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b54a:	f003 0320 	and.w	r3, r3, #32
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d013      	beq.n	800b57a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b556:	f003 0320 	and.w	r3, r3, #32
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d105      	bne.n	800b56a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b55e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b566:	2b00      	cmp	r3, #0
 800b568:	d007      	beq.n	800b57a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d003      	beq.n	800b57a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b580:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b58e:	2b40      	cmp	r3, #64	; 0x40
 800b590:	d005      	beq.n	800b59e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b596:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d054      	beq.n	800b648 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 ff89 	bl	800c4b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5ae:	2b40      	cmp	r3, #64	; 0x40
 800b5b0:	d146      	bne.n	800b640 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	3308      	adds	r3, #8
 800b5b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5c0:	e853 3f00 	ldrex	r3, [r3]
 800b5c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b5c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3308      	adds	r3, #8
 800b5da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b5de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b5e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b5ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b5ee:	e841 2300 	strex	r3, r2, [r1]
 800b5f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b5f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1d9      	bne.n	800b5b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b604:	2b00      	cmp	r3, #0
 800b606:	d017      	beq.n	800b638 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b60e:	4a15      	ldr	r2, [pc, #84]	; (800b664 <HAL_UART_IRQHandler+0x2c0>)
 800b610:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b618:	4618      	mov	r0, r3
 800b61a:	f7fc ff7b 	bl	8008514 <HAL_DMA_Abort_IT>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d019      	beq.n	800b658 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b632:	4610      	mov	r0, r2
 800b634:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b636:	e00f      	b.n	800b658 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f9e1 	bl	800ba00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b63e:	e00b      	b.n	800b658 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 f9dd 	bl	800ba00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b646:	e007      	b.n	800b658 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f9d9 	bl	800ba00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b656:	e1bf      	b.n	800b9d8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b658:	bf00      	nop
    return;
 800b65a:	e1bd      	b.n	800b9d8 <HAL_UART_IRQHandler+0x634>
 800b65c:	10000001 	.word	0x10000001
 800b660:	04000120 	.word	0x04000120
 800b664:	0800c6b9 	.word	0x0800c6b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	f040 8153 	bne.w	800b918 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b676:	f003 0310 	and.w	r3, r3, #16
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f000 814c 	beq.w	800b918 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b684:	f003 0310 	and.w	r3, r3, #16
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f000 8145 	beq.w	800b918 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2210      	movs	r2, #16
 800b694:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a0:	2b40      	cmp	r3, #64	; 0x40
 800b6a2:	f040 80bb 	bne.w	800b81c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b6b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 818f 	beq.w	800b9dc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b6c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	f080 8187 	bcs.w	800b9dc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b6d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f003 0320 	and.w	r3, r3, #32
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f040 8087 	bne.w	800b7fa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6f8:	e853 3f00 	ldrex	r3, [r3]
 800b6fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	461a      	mov	r2, r3
 800b712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b71a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b71e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b726:	e841 2300 	strex	r3, r2, [r1]
 800b72a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b72e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b732:	2b00      	cmp	r3, #0
 800b734:	d1da      	bne.n	800b6ec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3308      	adds	r3, #8
 800b73c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b740:	e853 3f00 	ldrex	r3, [r3]
 800b744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b748:	f023 0301 	bic.w	r3, r3, #1
 800b74c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	3308      	adds	r3, #8
 800b756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b75a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b75e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b766:	e841 2300 	strex	r3, r2, [r1]
 800b76a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b76c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1e1      	bne.n	800b736 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3308      	adds	r3, #8
 800b778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b77c:	e853 3f00 	ldrex	r3, [r3]
 800b780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3308      	adds	r3, #8
 800b792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b796:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b79c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b79e:	e841 2300 	strex	r3, r2, [r1]
 800b7a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b7a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d1e3      	bne.n	800b772 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2220      	movs	r2, #32
 800b7ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c0:	e853 3f00 	ldrex	r3, [r3]
 800b7c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b7c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7c8:	f023 0310 	bic.w	r3, r3, #16
 800b7cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7da:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b7e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7e2:	e841 2300 	strex	r3, r2, [r1]
 800b7e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b7e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1e4      	bne.n	800b7b8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fc fe2e 	bl	8008456 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	1ad3      	subs	r3, r2, r3
 800b810:	b29b      	uxth	r3, r3
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 f8fd 	bl	800ba14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b81a:	e0df      	b.n	800b9dc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b828:	b29b      	uxth	r3, r3
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b836:	b29b      	uxth	r3, r3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 80d1 	beq.w	800b9e0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b83e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b842:	2b00      	cmp	r3, #0
 800b844:	f000 80cc 	beq.w	800b9e0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b850:	e853 3f00 	ldrex	r3, [r3]
 800b854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b85c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	461a      	mov	r2, r3
 800b866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b86a:	647b      	str	r3, [r7, #68]	; 0x44
 800b86c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b872:	e841 2300 	strex	r3, r2, [r1]
 800b876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1e4      	bne.n	800b848 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3308      	adds	r3, #8
 800b884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	e853 3f00 	ldrex	r3, [r3]
 800b88c:	623b      	str	r3, [r7, #32]
   return(result);
 800b88e:	6a3b      	ldr	r3, [r7, #32]
 800b890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b894:	f023 0301 	bic.w	r3, r3, #1
 800b898:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3308      	adds	r3, #8
 800b8a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b8a6:	633a      	str	r2, [r7, #48]	; 0x30
 800b8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ae:	e841 2300 	strex	r3, r2, [r1]
 800b8b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1e1      	bne.n	800b87e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2220      	movs	r2, #32
 800b8be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	e853 3f00 	ldrex	r3, [r3]
 800b8da:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f023 0310 	bic.w	r3, r3, #16
 800b8e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b8f0:	61fb      	str	r3, [r7, #28]
 800b8f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f4:	69b9      	ldr	r1, [r7, #24]
 800b8f6:	69fa      	ldr	r2, [r7, #28]
 800b8f8:	e841 2300 	strex	r3, r2, [r1]
 800b8fc:	617b      	str	r3, [r7, #20]
   return(result);
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1e4      	bne.n	800b8ce <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2202      	movs	r2, #2
 800b908:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b90a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b90e:	4619      	mov	r1, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 f87f 	bl	800ba14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b916:	e063      	b.n	800b9e0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b91c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00e      	beq.n	800b942 <HAL_UART_IRQHandler+0x59e>
 800b924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d008      	beq.n	800b942 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b938:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f001 fc1a 	bl	800d174 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b940:	e051      	b.n	800b9e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d014      	beq.n	800b978 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b94e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b956:	2b00      	cmp	r3, #0
 800b958:	d105      	bne.n	800b966 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b95a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b95e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b962:	2b00      	cmp	r3, #0
 800b964:	d008      	beq.n	800b978 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d03a      	beq.n	800b9e4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	4798      	blx	r3
    }
    return;
 800b976:	e035      	b.n	800b9e4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b97c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b980:	2b00      	cmp	r3, #0
 800b982:	d009      	beq.n	800b998 <HAL_UART_IRQHandler+0x5f4>
 800b984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d003      	beq.n	800b998 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 fea7 	bl	800c6e4 <UART_EndTransmit_IT>
    return;
 800b996:	e026      	b.n	800b9e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b99c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d009      	beq.n	800b9b8 <HAL_UART_IRQHandler+0x614>
 800b9a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d003      	beq.n	800b9b8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f001 fbf3 	bl	800d19c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9b6:	e016      	b.n	800b9e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b9b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d010      	beq.n	800b9e6 <HAL_UART_IRQHandler+0x642>
 800b9c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	da0c      	bge.n	800b9e6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f001 fbdb 	bl	800d188 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9d2:	e008      	b.n	800b9e6 <HAL_UART_IRQHandler+0x642>
      return;
 800b9d4:	bf00      	nop
 800b9d6:	e006      	b.n	800b9e6 <HAL_UART_IRQHandler+0x642>
    return;
 800b9d8:	bf00      	nop
 800b9da:	e004      	b.n	800b9e6 <HAL_UART_IRQHandler+0x642>
      return;
 800b9dc:	bf00      	nop
 800b9de:	e002      	b.n	800b9e6 <HAL_UART_IRQHandler+0x642>
      return;
 800b9e0:	bf00      	nop
 800b9e2:	e000      	b.n	800b9e6 <HAL_UART_IRQHandler+0x642>
    return;
 800b9e4:	bf00      	nop
  }
}
 800b9e6:	37e8      	adds	r7, #232	; 0xe8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba20:	bf00      	nop
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba30:	b08c      	sub	sp, #48	; 0x30
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	689a      	ldr	r2, [r3, #8]
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	691b      	ldr	r3, [r3, #16]
 800ba44:	431a      	orrs	r2, r3
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	431a      	orrs	r2, r3
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	69db      	ldr	r3, [r3, #28]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	4baf      	ldr	r3, [pc, #700]	; (800bd18 <UART_SetConfig+0x2ec>)
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	697a      	ldr	r2, [r7, #20]
 800ba60:	6812      	ldr	r2, [r2, #0]
 800ba62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba64:	430b      	orrs	r3, r1
 800ba66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	68da      	ldr	r2, [r3, #12]
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	430a      	orrs	r2, r1
 800ba7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4aa4      	ldr	r2, [pc, #656]	; (800bd1c <UART_SetConfig+0x2f0>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d004      	beq.n	800ba98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	6a1b      	ldr	r3, [r3, #32]
 800ba92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba94:	4313      	orrs	r3, r2
 800ba96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800baa2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	6812      	ldr	r2, [r2, #0]
 800baaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800baac:	430b      	orrs	r3, r1
 800baae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab6:	f023 010f 	bic.w	r1, r3, #15
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	430a      	orrs	r2, r1
 800bac4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a95      	ldr	r2, [pc, #596]	; (800bd20 <UART_SetConfig+0x2f4>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d125      	bne.n	800bb1c <UART_SetConfig+0xf0>
 800bad0:	2003      	movs	r0, #3
 800bad2:	f7ff fb2b 	bl	800b12c <LL_RCC_GetUSARTClockSource>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b03      	cmp	r3, #3
 800bada:	d81b      	bhi.n	800bb14 <UART_SetConfig+0xe8>
 800badc:	a201      	add	r2, pc, #4	; (adr r2, 800bae4 <UART_SetConfig+0xb8>)
 800bade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae2:	bf00      	nop
 800bae4:	0800baf5 	.word	0x0800baf5
 800bae8:	0800bb05 	.word	0x0800bb05
 800baec:	0800bafd 	.word	0x0800bafd
 800baf0:	0800bb0d 	.word	0x0800bb0d
 800baf4:	2301      	movs	r3, #1
 800baf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bafa:	e042      	b.n	800bb82 <UART_SetConfig+0x156>
 800bafc:	2302      	movs	r3, #2
 800bafe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb02:	e03e      	b.n	800bb82 <UART_SetConfig+0x156>
 800bb04:	2304      	movs	r3, #4
 800bb06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb0a:	e03a      	b.n	800bb82 <UART_SetConfig+0x156>
 800bb0c:	2308      	movs	r3, #8
 800bb0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb12:	e036      	b.n	800bb82 <UART_SetConfig+0x156>
 800bb14:	2310      	movs	r3, #16
 800bb16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb1a:	e032      	b.n	800bb82 <UART_SetConfig+0x156>
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a7e      	ldr	r2, [pc, #504]	; (800bd1c <UART_SetConfig+0x2f0>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d12a      	bne.n	800bb7c <UART_SetConfig+0x150>
 800bb26:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bb2a:	f7ff fb0f 	bl	800b14c <LL_RCC_GetLPUARTClockSource>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb34:	d01a      	beq.n	800bb6c <UART_SetConfig+0x140>
 800bb36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb3a:	d81b      	bhi.n	800bb74 <UART_SetConfig+0x148>
 800bb3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb40:	d00c      	beq.n	800bb5c <UART_SetConfig+0x130>
 800bb42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb46:	d815      	bhi.n	800bb74 <UART_SetConfig+0x148>
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d003      	beq.n	800bb54 <UART_SetConfig+0x128>
 800bb4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb50:	d008      	beq.n	800bb64 <UART_SetConfig+0x138>
 800bb52:	e00f      	b.n	800bb74 <UART_SetConfig+0x148>
 800bb54:	2300      	movs	r3, #0
 800bb56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb5a:	e012      	b.n	800bb82 <UART_SetConfig+0x156>
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb62:	e00e      	b.n	800bb82 <UART_SetConfig+0x156>
 800bb64:	2304      	movs	r3, #4
 800bb66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb6a:	e00a      	b.n	800bb82 <UART_SetConfig+0x156>
 800bb6c:	2308      	movs	r3, #8
 800bb6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb72:	e006      	b.n	800bb82 <UART_SetConfig+0x156>
 800bb74:	2310      	movs	r3, #16
 800bb76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb7a:	e002      	b.n	800bb82 <UART_SetConfig+0x156>
 800bb7c:	2310      	movs	r3, #16
 800bb7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a65      	ldr	r2, [pc, #404]	; (800bd1c <UART_SetConfig+0x2f0>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	f040 8097 	bne.w	800bcbc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb92:	2b08      	cmp	r3, #8
 800bb94:	d823      	bhi.n	800bbde <UART_SetConfig+0x1b2>
 800bb96:	a201      	add	r2, pc, #4	; (adr r2, 800bb9c <UART_SetConfig+0x170>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bbc1 	.word	0x0800bbc1
 800bba0:	0800bbdf 	.word	0x0800bbdf
 800bba4:	0800bbc9 	.word	0x0800bbc9
 800bba8:	0800bbdf 	.word	0x0800bbdf
 800bbac:	0800bbcf 	.word	0x0800bbcf
 800bbb0:	0800bbdf 	.word	0x0800bbdf
 800bbb4:	0800bbdf 	.word	0x0800bbdf
 800bbb8:	0800bbdf 	.word	0x0800bbdf
 800bbbc:	0800bbd7 	.word	0x0800bbd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbc0:	f7fe fbbe 	bl	800a340 <HAL_RCC_GetPCLK1Freq>
 800bbc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bbc6:	e010      	b.n	800bbea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbc8:	4b56      	ldr	r3, [pc, #344]	; (800bd24 <UART_SetConfig+0x2f8>)
 800bbca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bbcc:	e00d      	b.n	800bbea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbce:	f7fe fb37 	bl	800a240 <HAL_RCC_GetSysClockFreq>
 800bbd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bbd4:	e009      	b.n	800bbea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bbdc:	e005      	b.n	800bbea <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bbe8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f000 812b 	beq.w	800be48 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf6:	4a4c      	ldr	r2, [pc, #304]	; (800bd28 <UART_SetConfig+0x2fc>)
 800bbf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc00:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	005b      	lsls	r3, r3, #1
 800bc0e:	4413      	add	r3, r2
 800bc10:	69ba      	ldr	r2, [r7, #24]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d305      	bcc.n	800bc22 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc1c:	69ba      	ldr	r2, [r7, #24]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d903      	bls.n	800bc2a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bc28:	e10e      	b.n	800be48 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	60bb      	str	r3, [r7, #8]
 800bc30:	60fa      	str	r2, [r7, #12]
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc36:	4a3c      	ldr	r2, [pc, #240]	; (800bd28 <UART_SetConfig+0x2fc>)
 800bc38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	2200      	movs	r2, #0
 800bc40:	603b      	str	r3, [r7, #0]
 800bc42:	607a      	str	r2, [r7, #4]
 800bc44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bc4c:	f7f4 ffd4 	bl	8000bf8 <__aeabi_uldivmod>
 800bc50:	4602      	mov	r2, r0
 800bc52:	460b      	mov	r3, r1
 800bc54:	4610      	mov	r0, r2
 800bc56:	4619      	mov	r1, r3
 800bc58:	f04f 0200 	mov.w	r2, #0
 800bc5c:	f04f 0300 	mov.w	r3, #0
 800bc60:	020b      	lsls	r3, r1, #8
 800bc62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc66:	0202      	lsls	r2, r0, #8
 800bc68:	6979      	ldr	r1, [r7, #20]
 800bc6a:	6849      	ldr	r1, [r1, #4]
 800bc6c:	0849      	lsrs	r1, r1, #1
 800bc6e:	2000      	movs	r0, #0
 800bc70:	460c      	mov	r4, r1
 800bc72:	4605      	mov	r5, r0
 800bc74:	eb12 0804 	adds.w	r8, r2, r4
 800bc78:	eb43 0905 	adc.w	r9, r3, r5
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	469a      	mov	sl, r3
 800bc84:	4693      	mov	fp, r2
 800bc86:	4652      	mov	r2, sl
 800bc88:	465b      	mov	r3, fp
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	4649      	mov	r1, r9
 800bc8e:	f7f4 ffb3 	bl	8000bf8 <__aeabi_uldivmod>
 800bc92:	4602      	mov	r2, r0
 800bc94:	460b      	mov	r3, r1
 800bc96:	4613      	mov	r3, r2
 800bc98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bca0:	d308      	bcc.n	800bcb4 <UART_SetConfig+0x288>
 800bca2:	6a3b      	ldr	r3, [r7, #32]
 800bca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bca8:	d204      	bcs.n	800bcb4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	6a3a      	ldr	r2, [r7, #32]
 800bcb0:	60da      	str	r2, [r3, #12]
 800bcb2:	e0c9      	b.n	800be48 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bcba:	e0c5      	b.n	800be48 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	69db      	ldr	r3, [r3, #28]
 800bcc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcc4:	d16d      	bne.n	800bda2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800bcc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bcca:	3b01      	subs	r3, #1
 800bccc:	2b07      	cmp	r3, #7
 800bcce:	d82d      	bhi.n	800bd2c <UART_SetConfig+0x300>
 800bcd0:	a201      	add	r2, pc, #4	; (adr r2, 800bcd8 <UART_SetConfig+0x2ac>)
 800bcd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd6:	bf00      	nop
 800bcd8:	0800bcf9 	.word	0x0800bcf9
 800bcdc:	0800bd01 	.word	0x0800bd01
 800bce0:	0800bd2d 	.word	0x0800bd2d
 800bce4:	0800bd07 	.word	0x0800bd07
 800bce8:	0800bd2d 	.word	0x0800bd2d
 800bcec:	0800bd2d 	.word	0x0800bd2d
 800bcf0:	0800bd2d 	.word	0x0800bd2d
 800bcf4:	0800bd0f 	.word	0x0800bd0f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcf8:	f7fe fb38 	bl	800a36c <HAL_RCC_GetPCLK2Freq>
 800bcfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bcfe:	e01b      	b.n	800bd38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd00:	4b08      	ldr	r3, [pc, #32]	; (800bd24 <UART_SetConfig+0x2f8>)
 800bd02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd04:	e018      	b.n	800bd38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd06:	f7fe fa9b 	bl	800a240 <HAL_RCC_GetSysClockFreq>
 800bd0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd0c:	e014      	b.n	800bd38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd14:	e010      	b.n	800bd38 <UART_SetConfig+0x30c>
 800bd16:	bf00      	nop
 800bd18:	cfff69f3 	.word	0xcfff69f3
 800bd1c:	40008000 	.word	0x40008000
 800bd20:	40013800 	.word	0x40013800
 800bd24:	00f42400 	.word	0x00f42400
 800bd28:	08032f38 	.word	0x08032f38
      default:
        pclk = 0U;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bd36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f000 8084 	beq.w	800be48 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd44:	4a4b      	ldr	r2, [pc, #300]	; (800be74 <UART_SetConfig+0x448>)
 800bd46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd52:	005a      	lsls	r2, r3, #1
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	085b      	lsrs	r3, r3, #1
 800bd5a:	441a      	add	r2, r3
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd64:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd66:	6a3b      	ldr	r3, [r7, #32]
 800bd68:	2b0f      	cmp	r3, #15
 800bd6a:	d916      	bls.n	800bd9a <UART_SetConfig+0x36e>
 800bd6c:	6a3b      	ldr	r3, [r7, #32]
 800bd6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd72:	d212      	bcs.n	800bd9a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd74:	6a3b      	ldr	r3, [r7, #32]
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	f023 030f 	bic.w	r3, r3, #15
 800bd7c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd7e:	6a3b      	ldr	r3, [r7, #32]
 800bd80:	085b      	lsrs	r3, r3, #1
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	f003 0307 	and.w	r3, r3, #7
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	8bfb      	ldrh	r3, [r7, #30]
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	8bfa      	ldrh	r2, [r7, #30]
 800bd96:	60da      	str	r2, [r3, #12]
 800bd98:	e056      	b.n	800be48 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bda0:	e052      	b.n	800be48 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bda2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bda6:	3b01      	subs	r3, #1
 800bda8:	2b07      	cmp	r3, #7
 800bdaa:	d822      	bhi.n	800bdf2 <UART_SetConfig+0x3c6>
 800bdac:	a201      	add	r2, pc, #4	; (adr r2, 800bdb4 <UART_SetConfig+0x388>)
 800bdae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb2:	bf00      	nop
 800bdb4:	0800bdd5 	.word	0x0800bdd5
 800bdb8:	0800bddd 	.word	0x0800bddd
 800bdbc:	0800bdf3 	.word	0x0800bdf3
 800bdc0:	0800bde3 	.word	0x0800bde3
 800bdc4:	0800bdf3 	.word	0x0800bdf3
 800bdc8:	0800bdf3 	.word	0x0800bdf3
 800bdcc:	0800bdf3 	.word	0x0800bdf3
 800bdd0:	0800bdeb 	.word	0x0800bdeb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdd4:	f7fe faca 	bl	800a36c <HAL_RCC_GetPCLK2Freq>
 800bdd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bdda:	e010      	b.n	800bdfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bddc:	4b26      	ldr	r3, [pc, #152]	; (800be78 <UART_SetConfig+0x44c>)
 800bdde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bde0:	e00d      	b.n	800bdfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bde2:	f7fe fa2d 	bl	800a240 <HAL_RCC_GetSysClockFreq>
 800bde6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bde8:	e009      	b.n	800bdfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bdf0:	e005      	b.n	800bdfe <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bdfc:	bf00      	nop
    }

    if (pclk != 0U)
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	2b00      	cmp	r3, #0
 800be02:	d021      	beq.n	800be48 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	4a1a      	ldr	r2, [pc, #104]	; (800be74 <UART_SetConfig+0x448>)
 800be0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be0e:	461a      	mov	r2, r3
 800be10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be12:	fbb3 f2f2 	udiv	r2, r3, r2
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	085b      	lsrs	r3, r3, #1
 800be1c:	441a      	add	r2, r3
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	fbb2 f3f3 	udiv	r3, r2, r3
 800be26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be28:	6a3b      	ldr	r3, [r7, #32]
 800be2a:	2b0f      	cmp	r3, #15
 800be2c:	d909      	bls.n	800be42 <UART_SetConfig+0x416>
 800be2e:	6a3b      	ldr	r3, [r7, #32]
 800be30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be34:	d205      	bcs.n	800be42 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be36:	6a3b      	ldr	r3, [r7, #32]
 800be38:	b29a      	uxth	r2, r3
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	60da      	str	r2, [r3, #12]
 800be40:	e002      	b.n	800be48 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	2201      	movs	r2, #1
 800be54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2200      	movs	r2, #0
 800be5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2200      	movs	r2, #0
 800be62:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800be64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3730      	adds	r7, #48	; 0x30
 800be6c:	46bd      	mov	sp, r7
 800be6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be72:	bf00      	nop
 800be74:	08032f38 	.word	0x08032f38
 800be78:	00f42400 	.word	0x00f42400

0800be7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be88:	f003 0308 	and.w	r3, r3, #8
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00a      	beq.n	800bea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	430a      	orrs	r2, r1
 800bea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00a      	beq.n	800bec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	430a      	orrs	r2, r1
 800bec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800becc:	f003 0302 	and.w	r3, r3, #2
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00a      	beq.n	800beea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	430a      	orrs	r2, r1
 800bee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beee:	f003 0304 	and.w	r3, r3, #4
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00a      	beq.n	800bf0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	430a      	orrs	r2, r1
 800bf0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf10:	f003 0310 	and.w	r3, r3, #16
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00a      	beq.n	800bf2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	430a      	orrs	r2, r1
 800bf2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf32:	f003 0320 	and.w	r3, r3, #32
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00a      	beq.n	800bf50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	430a      	orrs	r2, r1
 800bf4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d01a      	beq.n	800bf92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	430a      	orrs	r2, r1
 800bf70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf7a:	d10a      	bne.n	800bf92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	430a      	orrs	r2, r1
 800bf90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00a      	beq.n	800bfb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	430a      	orrs	r2, r1
 800bfb2:	605a      	str	r2, [r3, #4]
  }
}
 800bfb4:	bf00      	nop
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b098      	sub	sp, #96	; 0x60
 800bfc4:	af02      	add	r7, sp, #8
 800bfc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfd0:	f7fb ff54 	bl	8007e7c <HAL_GetTick>
 800bfd4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f003 0308 	and.w	r3, r3, #8
 800bfe0:	2b08      	cmp	r3, #8
 800bfe2:	d12f      	bne.n	800c044 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bfe8:	9300      	str	r3, [sp, #0]
 800bfea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfec:	2200      	movs	r2, #0
 800bfee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f88e 	bl	800c114 <UART_WaitOnFlagUntilTimeout>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d022      	beq.n	800c044 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c006:	e853 3f00 	ldrex	r3, [r3]
 800c00a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c00e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c012:	653b      	str	r3, [r7, #80]	; 0x50
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	461a      	mov	r2, r3
 800c01a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c01c:	647b      	str	r3, [r7, #68]	; 0x44
 800c01e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c020:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c024:	e841 2300 	strex	r3, r2, [r1]
 800c028:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1e6      	bne.n	800bffe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2220      	movs	r2, #32
 800c034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c040:	2303      	movs	r3, #3
 800c042:	e063      	b.n	800c10c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 0304 	and.w	r3, r3, #4
 800c04e:	2b04      	cmp	r3, #4
 800c050:	d149      	bne.n	800c0e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c052:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c05a:	2200      	movs	r2, #0
 800c05c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 f857 	bl	800c114 <UART_WaitOnFlagUntilTimeout>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d03c      	beq.n	800c0e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c074:	e853 3f00 	ldrex	r3, [r3]
 800c078:	623b      	str	r3, [r7, #32]
   return(result);
 800c07a:	6a3b      	ldr	r3, [r7, #32]
 800c07c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c080:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	461a      	mov	r2, r3
 800c088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c08a:	633b      	str	r3, [r7, #48]	; 0x30
 800c08c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c092:	e841 2300 	strex	r3, r2, [r1]
 800c096:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d1e6      	bne.n	800c06c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	3308      	adds	r3, #8
 800c0a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	e853 3f00 	ldrex	r3, [r3]
 800c0ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f023 0301 	bic.w	r3, r3, #1
 800c0b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	3308      	adds	r3, #8
 800c0bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0be:	61fa      	str	r2, [r7, #28]
 800c0c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c2:	69b9      	ldr	r1, [r7, #24]
 800c0c4:	69fa      	ldr	r2, [r7, #28]
 800c0c6:	e841 2300 	strex	r3, r2, [r1]
 800c0ca:	617b      	str	r3, [r7, #20]
   return(result);
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d1e5      	bne.n	800c09e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2220      	movs	r2, #32
 800c0d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0e2:	2303      	movs	r3, #3
 800c0e4:	e012      	b.n	800c10c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2220      	movs	r2, #32
 800c0ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2220      	movs	r2, #32
 800c0f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3758      	adds	r7, #88	; 0x58
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	603b      	str	r3, [r7, #0]
 800c120:	4613      	mov	r3, r2
 800c122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c124:	e04f      	b.n	800c1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c12c:	d04b      	beq.n	800c1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c12e:	f7fb fea5 	bl	8007e7c <HAL_GetTick>
 800c132:	4602      	mov	r2, r0
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	1ad3      	subs	r3, r2, r3
 800c138:	69ba      	ldr	r2, [r7, #24]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d302      	bcc.n	800c144 <UART_WaitOnFlagUntilTimeout+0x30>
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d101      	bne.n	800c148 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c144:	2303      	movs	r3, #3
 800c146:	e04e      	b.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 0304 	and.w	r3, r3, #4
 800c152:	2b00      	cmp	r3, #0
 800c154:	d037      	beq.n	800c1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	2b80      	cmp	r3, #128	; 0x80
 800c15a:	d034      	beq.n	800c1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	2b40      	cmp	r3, #64	; 0x40
 800c160:	d031      	beq.n	800c1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	69db      	ldr	r3, [r3, #28]
 800c168:	f003 0308 	and.w	r3, r3, #8
 800c16c:	2b08      	cmp	r3, #8
 800c16e:	d110      	bne.n	800c192 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2208      	movs	r2, #8
 800c176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f000 f99c 	bl	800c4b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2208      	movs	r2, #8
 800c182:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2200      	movs	r2, #0
 800c18a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c18e:	2301      	movs	r3, #1
 800c190:	e029      	b.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	69db      	ldr	r3, [r3, #28]
 800c198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c19c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1a0:	d111      	bne.n	800c1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f000 f982 	bl	800c4b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2220      	movs	r2, #32
 800c1b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c1c2:	2303      	movs	r3, #3
 800c1c4:	e00f      	b.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	69da      	ldr	r2, [r3, #28]
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	4013      	ands	r3, r2
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	bf0c      	ite	eq
 800c1d6:	2301      	moveq	r3, #1
 800c1d8:	2300      	movne	r3, #0
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	461a      	mov	r2, r3
 800c1de:	79fb      	ldrb	r3, [r7, #7]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d0a0      	beq.n	800c126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
	...

0800c1f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b0a3      	sub	sp, #140	; 0x8c
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	68ba      	ldr	r2, [r7, #8]
 800c202:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	88fa      	ldrh	r2, [r7, #6]
 800c208:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	88fa      	ldrh	r2, [r7, #6]
 800c210:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2200      	movs	r2, #0
 800c218:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c222:	d10e      	bne.n	800c242 <UART_Start_Receive_IT+0x52>
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d105      	bne.n	800c238 <UART_Start_Receive_IT+0x48>
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c232:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c236:	e02d      	b.n	800c294 <UART_Start_Receive_IT+0xa4>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	22ff      	movs	r2, #255	; 0xff
 800c23c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c240:	e028      	b.n	800c294 <UART_Start_Receive_IT+0xa4>
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d10d      	bne.n	800c266 <UART_Start_Receive_IT+0x76>
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d104      	bne.n	800c25c <UART_Start_Receive_IT+0x6c>
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	22ff      	movs	r2, #255	; 0xff
 800c256:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c25a:	e01b      	b.n	800c294 <UART_Start_Receive_IT+0xa4>
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	227f      	movs	r2, #127	; 0x7f
 800c260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c264:	e016      	b.n	800c294 <UART_Start_Receive_IT+0xa4>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c26e:	d10d      	bne.n	800c28c <UART_Start_Receive_IT+0x9c>
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	691b      	ldr	r3, [r3, #16]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d104      	bne.n	800c282 <UART_Start_Receive_IT+0x92>
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	227f      	movs	r2, #127	; 0x7f
 800c27c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c280:	e008      	b.n	800c294 <UART_Start_Receive_IT+0xa4>
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	223f      	movs	r2, #63	; 0x3f
 800c286:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c28a:	e003      	b.n	800c294 <UART_Start_Receive_IT+0xa4>
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2200      	movs	r2, #0
 800c298:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2222      	movs	r2, #34	; 0x22
 800c2a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	3308      	adds	r3, #8
 800c2aa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2ae:	e853 3f00 	ldrex	r3, [r3]
 800c2b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c2b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2b6:	f043 0301 	orr.w	r3, r3, #1
 800c2ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	3308      	adds	r3, #8
 800c2c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c2c8:	673a      	str	r2, [r7, #112]	; 0x70
 800c2ca:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2cc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c2ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c2d0:	e841 2300 	strex	r3, r2, [r1]
 800c2d4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c2d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1e3      	bne.n	800c2a4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2e4:	d14f      	bne.n	800c386 <UART_Start_Receive_IT+0x196>
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c2ec:	88fa      	ldrh	r2, [r7, #6]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d349      	bcc.n	800c386 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2fa:	d107      	bne.n	800c30c <UART_Start_Receive_IT+0x11c>
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d103      	bne.n	800c30c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	4a47      	ldr	r2, [pc, #284]	; (800c424 <UART_Start_Receive_IT+0x234>)
 800c308:	675a      	str	r2, [r3, #116]	; 0x74
 800c30a:	e002      	b.n	800c312 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	4a46      	ldr	r2, [pc, #280]	; (800c428 <UART_Start_Receive_IT+0x238>)
 800c310:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d01a      	beq.n	800c350 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c322:	e853 3f00 	ldrex	r3, [r3]
 800c326:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c32a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c32e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	461a      	mov	r2, r3
 800c338:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c33c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c33e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c340:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c342:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c344:	e841 2300 	strex	r3, r2, [r1]
 800c348:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c34a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d1e4      	bne.n	800c31a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	3308      	adds	r3, #8
 800c356:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c35a:	e853 3f00 	ldrex	r3, [r3]
 800c35e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c366:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	3308      	adds	r3, #8
 800c36e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c370:	64ba      	str	r2, [r7, #72]	; 0x48
 800c372:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c374:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c378:	e841 2300 	strex	r3, r2, [r1]
 800c37c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c37e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c380:	2b00      	cmp	r3, #0
 800c382:	d1e5      	bne.n	800c350 <UART_Start_Receive_IT+0x160>
 800c384:	e046      	b.n	800c414 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c38e:	d107      	bne.n	800c3a0 <UART_Start_Receive_IT+0x1b0>
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	691b      	ldr	r3, [r3, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d103      	bne.n	800c3a0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	4a24      	ldr	r2, [pc, #144]	; (800c42c <UART_Start_Receive_IT+0x23c>)
 800c39c:	675a      	str	r2, [r3, #116]	; 0x74
 800c39e:	e002      	b.n	800c3a6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4a23      	ldr	r2, [pc, #140]	; (800c430 <UART_Start_Receive_IT+0x240>)
 800c3a4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	691b      	ldr	r3, [r3, #16]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d019      	beq.n	800c3e2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b6:	e853 3f00 	ldrex	r3, [r3]
 800c3ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c3c2:	677b      	str	r3, [r7, #116]	; 0x74
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3cc:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3d4:	e841 2300 	strex	r3, r2, [r1]
 800c3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1e6      	bne.n	800c3ae <UART_Start_Receive_IT+0x1be>
 800c3e0:	e018      	b.n	800c414 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	e853 3f00 	ldrex	r3, [r3]
 800c3ee:	613b      	str	r3, [r7, #16]
   return(result);
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	f043 0320 	orr.w	r3, r3, #32
 800c3f6:	67bb      	str	r3, [r7, #120]	; 0x78
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c400:	623b      	str	r3, [r7, #32]
 800c402:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c404:	69f9      	ldr	r1, [r7, #28]
 800c406:	6a3a      	ldr	r2, [r7, #32]
 800c408:	e841 2300 	strex	r3, r2, [r1]
 800c40c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1e6      	bne.n	800c3e2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	378c      	adds	r7, #140	; 0x8c
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	0800ce0d 	.word	0x0800ce0d
 800c428:	0800caad 	.word	0x0800caad
 800c42c:	0800c8f5 	.word	0x0800c8f5
 800c430:	0800c73d 	.word	0x0800c73d

0800c434 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c434:	b480      	push	{r7}
 800c436:	b08f      	sub	sp, #60	; 0x3c
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c442:	6a3b      	ldr	r3, [r7, #32]
 800c444:	e853 3f00 	ldrex	r3, [r3]
 800c448:	61fb      	str	r3, [r7, #28]
   return(result);
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c450:	637b      	str	r3, [r7, #52]	; 0x34
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	461a      	mov	r2, r3
 800c458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c45a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c45c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c45e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c462:	e841 2300 	strex	r3, r2, [r1]
 800c466:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1e6      	bne.n	800c43c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	3308      	adds	r3, #8
 800c474:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	e853 3f00 	ldrex	r3, [r3]
 800c47c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c484:	633b      	str	r3, [r7, #48]	; 0x30
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	3308      	adds	r3, #8
 800c48c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c48e:	61ba      	str	r2, [r7, #24]
 800c490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c492:	6979      	ldr	r1, [r7, #20]
 800c494:	69ba      	ldr	r2, [r7, #24]
 800c496:	e841 2300 	strex	r3, r2, [r1]
 800c49a:	613b      	str	r3, [r7, #16]
   return(result);
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1e5      	bne.n	800c46e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2220      	movs	r2, #32
 800c4a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800c4aa:	bf00      	nop
 800c4ac:	373c      	adds	r7, #60	; 0x3c
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr

0800c4b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c4b6:	b480      	push	{r7}
 800c4b8:	b095      	sub	sp, #84	; 0x54
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c6:	e853 3f00 	ldrex	r3, [r3]
 800c4ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c4d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	461a      	mov	r2, r3
 800c4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4dc:	643b      	str	r3, [r7, #64]	; 0x40
 800c4de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c4e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4e4:	e841 2300 	strex	r3, r2, [r1]
 800c4e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1e6      	bne.n	800c4be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	3308      	adds	r3, #8
 800c4f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f8:	6a3b      	ldr	r3, [r7, #32]
 800c4fa:	e853 3f00 	ldrex	r3, [r3]
 800c4fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c506:	f023 0301 	bic.w	r3, r3, #1
 800c50a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	3308      	adds	r3, #8
 800c512:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c514:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c51a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c51c:	e841 2300 	strex	r3, r2, [r1]
 800c520:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1e3      	bne.n	800c4f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d118      	bne.n	800c562 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	e853 3f00 	ldrex	r3, [r3]
 800c53c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	f023 0310 	bic.w	r3, r3, #16
 800c544:	647b      	str	r3, [r7, #68]	; 0x44
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	461a      	mov	r2, r3
 800c54c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c54e:	61bb      	str	r3, [r7, #24]
 800c550:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c552:	6979      	ldr	r1, [r7, #20]
 800c554:	69ba      	ldr	r2, [r7, #24]
 800c556:	e841 2300 	strex	r3, r2, [r1]
 800c55a:	613b      	str	r3, [r7, #16]
   return(result);
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1e6      	bne.n	800c530 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2220      	movs	r2, #32
 800c566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2200      	movs	r2, #0
 800c56e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c576:	bf00      	nop
 800c578:	3754      	adds	r7, #84	; 0x54
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr

0800c582 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b090      	sub	sp, #64	; 0x40
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 0320 	and.w	r3, r3, #32
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d137      	bne.n	800c60e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	3308      	adds	r3, #8
 800c5ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b0:	e853 3f00 	ldrex	r3, [r3]
 800c5b4:	623b      	str	r3, [r7, #32]
   return(result);
 800c5b6:	6a3b      	ldr	r3, [r7, #32]
 800c5b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	3308      	adds	r3, #8
 800c5c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5c6:	633a      	str	r2, [r7, #48]	; 0x30
 800c5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5ce:	e841 2300 	strex	r3, r2, [r1]
 800c5d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1e5      	bne.n	800c5a6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	e853 3f00 	ldrex	r3, [r3]
 800c5e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c5f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f8:	61fb      	str	r3, [r7, #28]
 800c5fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fc:	69b9      	ldr	r1, [r7, #24]
 800c5fe:	69fa      	ldr	r2, [r7, #28]
 800c600:	e841 2300 	strex	r3, r2, [r1]
 800c604:	617b      	str	r3, [r7, #20]
   return(result);
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d1e6      	bne.n	800c5da <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c60c:	e002      	b.n	800c614 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c60e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c610:	f7f6 faaa 	bl	8002b68 <HAL_UART_TxCpltCallback>
}
 800c614:	bf00      	nop
 800c616:	3740      	adds	r7, #64	; 0x40
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c628:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f7ff f9de 	bl	800b9ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c630:	bf00      	nop
 800c632:	3710      	adds	r7, #16
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b086      	sub	sp, #24
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c644:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c64c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c654:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c660:	2b80      	cmp	r3, #128	; 0x80
 800c662:	d109      	bne.n	800c678 <UART_DMAError+0x40>
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	2b21      	cmp	r3, #33	; 0x21
 800c668:	d106      	bne.n	800c678 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c672:	6978      	ldr	r0, [r7, #20]
 800c674:	f7ff fede 	bl	800c434 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c682:	2b40      	cmp	r3, #64	; 0x40
 800c684:	d109      	bne.n	800c69a <UART_DMAError+0x62>
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2b22      	cmp	r3, #34	; 0x22
 800c68a:	d106      	bne.n	800c69a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	2200      	movs	r2, #0
 800c690:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c694:	6978      	ldr	r0, [r7, #20]
 800c696:	f7ff ff0e 	bl	800c4b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6a0:	f043 0210 	orr.w	r2, r3, #16
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6aa:	6978      	ldr	r0, [r7, #20]
 800c6ac:	f7ff f9a8 	bl	800ba00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6b0:	bf00      	nop
 800c6b2:	3718      	adds	r7, #24
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6d6:	68f8      	ldr	r0, [r7, #12]
 800c6d8:	f7ff f992 	bl	800ba00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6dc:	bf00      	nop
 800c6de:	3710      	adds	r7, #16
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b088      	sub	sp, #32
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	e853 3f00 	ldrex	r3, [r3]
 800c6f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c700:	61fb      	str	r3, [r7, #28]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	461a      	mov	r2, r3
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	61bb      	str	r3, [r7, #24]
 800c70c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70e:	6979      	ldr	r1, [r7, #20]
 800c710:	69ba      	ldr	r2, [r7, #24]
 800c712:	e841 2300 	strex	r3, r2, [r1]
 800c716:	613b      	str	r3, [r7, #16]
   return(result);
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1e6      	bne.n	800c6ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2220      	movs	r2, #32
 800c722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f7f6 fa1b 	bl	8002b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c732:	bf00      	nop
 800c734:	3720      	adds	r7, #32
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
	...

0800c73c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b09c      	sub	sp, #112	; 0x70
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c74a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c754:	2b22      	cmp	r3, #34	; 0x22
 800c756:	f040 80be 	bne.w	800c8d6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c760:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c764:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c768:	b2d9      	uxtb	r1, r3
 800c76a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c76e:	b2da      	uxtb	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c774:	400a      	ands	r2, r1
 800c776:	b2d2      	uxtb	r2, r2
 800c778:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	3b01      	subs	r3, #1
 800c78e:	b29a      	uxth	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f040 80a1 	bne.w	800c8e6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7ac:	e853 3f00 	ldrex	r3, [r3]
 800c7b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c7b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7b8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c7c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c7c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c7c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7ca:	e841 2300 	strex	r3, r2, [r1]
 800c7ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c7d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1e6      	bne.n	800c7a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	3308      	adds	r3, #8
 800c7dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e0:	e853 3f00 	ldrex	r3, [r3]
 800c7e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7e8:	f023 0301 	bic.w	r3, r3, #1
 800c7ec:	667b      	str	r3, [r7, #100]	; 0x64
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c7f6:	647a      	str	r2, [r7, #68]	; 0x44
 800c7f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c7fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7fe:	e841 2300 	strex	r3, r2, [r1]
 800c802:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1e5      	bne.n	800c7d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2220      	movs	r2, #32
 800c80e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a33      	ldr	r2, [pc, #204]	; (800c8f0 <UART_RxISR_8BIT+0x1b4>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d01f      	beq.n	800c868 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c832:	2b00      	cmp	r3, #0
 800c834:	d018      	beq.n	800c868 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83e:	e853 3f00 	ldrex	r3, [r3]
 800c842:	623b      	str	r3, [r7, #32]
   return(result);
 800c844:	6a3b      	ldr	r3, [r7, #32]
 800c846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c84a:	663b      	str	r3, [r7, #96]	; 0x60
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	461a      	mov	r2, r3
 800c852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c854:	633b      	str	r3, [r7, #48]	; 0x30
 800c856:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c858:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c85a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c85c:	e841 2300 	strex	r3, r2, [r1]
 800c860:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c864:	2b00      	cmp	r3, #0
 800c866:	d1e6      	bne.n	800c836 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d12e      	bne.n	800c8ce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	e853 3f00 	ldrex	r3, [r3]
 800c882:	60fb      	str	r3, [r7, #12]
   return(result);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f023 0310 	bic.w	r3, r3, #16
 800c88a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	461a      	mov	r2, r3
 800c892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c894:	61fb      	str	r3, [r7, #28]
 800c896:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c898:	69b9      	ldr	r1, [r7, #24]
 800c89a:	69fa      	ldr	r2, [r7, #28]
 800c89c:	e841 2300 	strex	r3, r2, [r1]
 800c8a0:	617b      	str	r3, [r7, #20]
   return(result);
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d1e6      	bne.n	800c876 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	69db      	ldr	r3, [r3, #28]
 800c8ae:	f003 0310 	and.w	r3, r3, #16
 800c8b2:	2b10      	cmp	r3, #16
 800c8b4:	d103      	bne.n	800c8be <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2210      	movs	r2, #16
 800c8bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f7ff f8a4 	bl	800ba14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c8cc:	e00b      	b.n	800c8e6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7f6 f92c 	bl	8002b2c <HAL_UART_RxCpltCallback>
}
 800c8d4:	e007      	b.n	800c8e6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	699a      	ldr	r2, [r3, #24]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f042 0208 	orr.w	r2, r2, #8
 800c8e4:	619a      	str	r2, [r3, #24]
}
 800c8e6:	bf00      	nop
 800c8e8:	3770      	adds	r7, #112	; 0x70
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	40008000 	.word	0x40008000

0800c8f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b09c      	sub	sp, #112	; 0x70
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c902:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c90c:	2b22      	cmp	r3, #34	; 0x22
 800c90e:	f040 80be 	bne.w	800ca8e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c918:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c920:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c922:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c926:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c92a:	4013      	ands	r3, r2
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c930:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c936:	1c9a      	adds	r2, r3, #2
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c942:	b29b      	uxth	r3, r3
 800c944:	3b01      	subs	r3, #1
 800c946:	b29a      	uxth	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c954:	b29b      	uxth	r3, r3
 800c956:	2b00      	cmp	r3, #0
 800c958:	f040 80a1 	bne.w	800ca9e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c964:	e853 3f00 	ldrex	r3, [r3]
 800c968:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c96a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c96c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c970:	667b      	str	r3, [r7, #100]	; 0x64
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	461a      	mov	r2, r3
 800c978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c97a:	657b      	str	r3, [r7, #84]	; 0x54
 800c97c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c980:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c982:	e841 2300 	strex	r3, r2, [r1]
 800c986:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1e6      	bne.n	800c95c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	3308      	adds	r3, #8
 800c994:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c998:	e853 3f00 	ldrex	r3, [r3]
 800c99c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a0:	f023 0301 	bic.w	r3, r3, #1
 800c9a4:	663b      	str	r3, [r7, #96]	; 0x60
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	3308      	adds	r3, #8
 800c9ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c9ae:	643a      	str	r2, [r7, #64]	; 0x40
 800c9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c9b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9b6:	e841 2300 	strex	r3, r2, [r1]
 800c9ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1e5      	bne.n	800c98e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2220      	movs	r2, #32
 800c9c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a33      	ldr	r2, [pc, #204]	; (800caa8 <UART_RxISR_16BIT+0x1b4>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d01f      	beq.n	800ca20 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d018      	beq.n	800ca20 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f4:	6a3b      	ldr	r3, [r7, #32]
 800c9f6:	e853 3f00 	ldrex	r3, [r3]
 800c9fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	461a      	mov	r2, r3
 800ca0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca0e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca14:	e841 2300 	strex	r3, r2, [r1]
 800ca18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1e6      	bne.n	800c9ee <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d12e      	bne.n	800ca86 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	e853 3f00 	ldrex	r3, [r3]
 800ca3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	f023 0310 	bic.w	r3, r3, #16
 800ca42:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	461a      	mov	r2, r3
 800ca4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca4c:	61bb      	str	r3, [r7, #24]
 800ca4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca50:	6979      	ldr	r1, [r7, #20]
 800ca52:	69ba      	ldr	r2, [r7, #24]
 800ca54:	e841 2300 	strex	r3, r2, [r1]
 800ca58:	613b      	str	r3, [r7, #16]
   return(result);
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1e6      	bne.n	800ca2e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	69db      	ldr	r3, [r3, #28]
 800ca66:	f003 0310 	and.w	r3, r3, #16
 800ca6a:	2b10      	cmp	r3, #16
 800ca6c:	d103      	bne.n	800ca76 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2210      	movs	r2, #16
 800ca74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f7fe ffc8 	bl	800ba14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca84:	e00b      	b.n	800ca9e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f7f6 f850 	bl	8002b2c <HAL_UART_RxCpltCallback>
}
 800ca8c:	e007      	b.n	800ca9e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	699a      	ldr	r2, [r3, #24]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f042 0208 	orr.w	r2, r2, #8
 800ca9c:	619a      	str	r2, [r3, #24]
}
 800ca9e:	bf00      	nop
 800caa0:	3770      	adds	r7, #112	; 0x70
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	40008000 	.word	0x40008000

0800caac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b0ac      	sub	sp, #176	; 0xb0
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800caba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	69db      	ldr	r3, [r3, #28]
 800cac4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	689b      	ldr	r3, [r3, #8]
 800cad8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cae2:	2b22      	cmp	r3, #34	; 0x22
 800cae4:	f040 8182 	bne.w	800cdec <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800caee:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800caf2:	e125      	b.n	800cd40 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cafe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800cb02:	b2d9      	uxtb	r1, r3
 800cb04:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb0e:	400a      	ands	r2, r1
 800cb10:	b2d2      	uxtb	r2, r2
 800cb12:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb18:	1c5a      	adds	r2, r3, #1
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	3b01      	subs	r3, #1
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	69db      	ldr	r3, [r3, #28]
 800cb36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cb3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb3e:	f003 0307 	and.w	r3, r3, #7
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d053      	beq.n	800cbee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cb46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb4a:	f003 0301 	and.w	r3, r3, #1
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d011      	beq.n	800cb76 <UART_RxISR_8BIT_FIFOEN+0xca>
 800cb52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cb56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00b      	beq.n	800cb76 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2201      	movs	r2, #1
 800cb64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb6c:	f043 0201 	orr.w	r2, r3, #1
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb7a:	f003 0302 	and.w	r3, r3, #2
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d011      	beq.n	800cba6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800cb82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb86:	f003 0301 	and.w	r3, r3, #1
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d00b      	beq.n	800cba6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2202      	movs	r2, #2
 800cb94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb9c:	f043 0204 	orr.w	r2, r3, #4
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cbaa:	f003 0304 	and.w	r3, r3, #4
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d011      	beq.n	800cbd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800cbb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cbb6:	f003 0301 	and.w	r3, r3, #1
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00b      	beq.n	800cbd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2204      	movs	r2, #4
 800cbc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbcc:	f043 0202 	orr.w	r2, r3, #2
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d006      	beq.n	800cbee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7fe ff0d 	bl	800ba00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f040 80a2 	bne.w	800cd40 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc04:	e853 3f00 	ldrex	r3, [r3]
 800cc08:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800cc0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	461a      	mov	r2, r3
 800cc1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cc20:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc22:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cc24:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cc26:	e841 2300 	strex	r3, r2, [r1]
 800cc2a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800cc2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d1e4      	bne.n	800cbfc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	3308      	adds	r3, #8
 800cc38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc3c:	e853 3f00 	ldrex	r3, [r3]
 800cc40:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800cc42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc48:	f023 0301 	bic.w	r3, r3, #1
 800cc4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	3308      	adds	r3, #8
 800cc56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cc5a:	66ba      	str	r2, [r7, #104]	; 0x68
 800cc5c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc5e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cc60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc62:	e841 2300 	strex	r3, r2, [r1]
 800cc66:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cc68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d1e1      	bne.n	800cc32 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2220      	movs	r2, #32
 800cc72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a5f      	ldr	r2, [pc, #380]	; (800ce04 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d021      	beq.n	800ccd0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d01a      	beq.n	800ccd0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cca2:	e853 3f00 	ldrex	r3, [r3]
 800cca6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ccae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ccbc:	657b      	str	r3, [r7, #84]	; 0x54
 800ccbe:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ccc2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ccc4:	e841 2300 	strex	r3, r2, [r1]
 800ccc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ccca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1e4      	bne.n	800cc9a <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d130      	bne.n	800cd3a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cce6:	e853 3f00 	ldrex	r3, [r3]
 800ccea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccee:	f023 0310 	bic.w	r3, r3, #16
 800ccf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd00:	643b      	str	r3, [r7, #64]	; 0x40
 800cd02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cd06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd08:	e841 2300 	strex	r3, r2, [r1]
 800cd0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1e4      	bne.n	800ccde <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	69db      	ldr	r3, [r3, #28]
 800cd1a:	f003 0310 	and.w	r3, r3, #16
 800cd1e:	2b10      	cmp	r3, #16
 800cd20:	d103      	bne.n	800cd2a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	2210      	movs	r2, #16
 800cd28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cd30:	4619      	mov	r1, r3
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7fe fe6e 	bl	800ba14 <HAL_UARTEx_RxEventCallback>
 800cd38:	e002      	b.n	800cd40 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7f5 fef6 	bl	8002b2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cd40:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d006      	beq.n	800cd56 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800cd48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cd4c:	f003 0320 	and.w	r3, r3, #32
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f47f aecf 	bne.w	800caf4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd5c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cd60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d049      	beq.n	800cdfc <UART_RxISR_8BIT_FIFOEN+0x350>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd6e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d242      	bcs.n	800cdfc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	3308      	adds	r3, #8
 800cd7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7e:	6a3b      	ldr	r3, [r7, #32]
 800cd80:	e853 3f00 	ldrex	r3, [r3]
 800cd84:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	3308      	adds	r3, #8
 800cd96:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cd9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cd9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cda0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cda2:	e841 2300 	strex	r3, r2, [r1]
 800cda6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1e3      	bne.n	800cd76 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	4a15      	ldr	r2, [pc, #84]	; (800ce08 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800cdb2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	e853 3f00 	ldrex	r3, [r3]
 800cdc0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	f043 0320 	orr.w	r3, r3, #32
 800cdc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cdd6:	61bb      	str	r3, [r7, #24]
 800cdd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdda:	6979      	ldr	r1, [r7, #20]
 800cddc:	69ba      	ldr	r2, [r7, #24]
 800cdde:	e841 2300 	strex	r3, r2, [r1]
 800cde2:	613b      	str	r3, [r7, #16]
   return(result);
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d1e4      	bne.n	800cdb4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cdea:	e007      	b.n	800cdfc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	699a      	ldr	r2, [r3, #24]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f042 0208 	orr.w	r2, r2, #8
 800cdfa:	619a      	str	r2, [r3, #24]
}
 800cdfc:	bf00      	nop
 800cdfe:	37b0      	adds	r7, #176	; 0xb0
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	40008000 	.word	0x40008000
 800ce08:	0800c73d 	.word	0x0800c73d

0800ce0c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b0ae      	sub	sp, #184	; 0xb8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce1a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	69db      	ldr	r3, [r3, #28]
 800ce24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce42:	2b22      	cmp	r3, #34	; 0x22
 800ce44:	f040 8186 	bne.w	800d154 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce4e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ce52:	e129      	b.n	800d0a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ce66:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800ce6a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800ce6e:	4013      	ands	r3, r2
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ce76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce7c:	1c9a      	adds	r2, r3, #2
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	3b01      	subs	r3, #1
 800ce8c:	b29a      	uxth	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	69db      	ldr	r3, [r3, #28]
 800ce9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ce9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cea2:	f003 0307 	and.w	r3, r3, #7
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d053      	beq.n	800cf52 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ceaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ceae:	f003 0301 	and.w	r3, r3, #1
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d011      	beq.n	800ceda <UART_RxISR_16BIT_FIFOEN+0xce>
 800ceb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ceba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00b      	beq.n	800ceda <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2201      	movs	r2, #1
 800cec8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ced0:	f043 0201 	orr.w	r2, r3, #1
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ceda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cede:	f003 0302 	and.w	r3, r3, #2
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d011      	beq.n	800cf0a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cee6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ceea:	f003 0301 	and.w	r3, r3, #1
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d00b      	beq.n	800cf0a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	2202      	movs	r2, #2
 800cef8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf00:	f043 0204 	orr.w	r2, r3, #4
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf0e:	f003 0304 	and.w	r3, r3, #4
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d011      	beq.n	800cf3a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800cf16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cf1a:	f003 0301 	and.w	r3, r3, #1
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00b      	beq.n	800cf3a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2204      	movs	r2, #4
 800cf28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf30:	f043 0202 	orr.w	r2, r3, #2
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d006      	beq.n	800cf52 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7fe fd5b 	bl	800ba00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f040 80a4 	bne.w	800d0a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf68:	e853 3f00 	ldrex	r3, [r3]
 800cf6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cf6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cf86:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cf8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cf8e:	e841 2300 	strex	r3, r2, [r1]
 800cf92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cf94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d1e2      	bne.n	800cf60 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	3308      	adds	r3, #8
 800cfa0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfa4:	e853 3f00 	ldrex	r3, [r3]
 800cfa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cfaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfb0:	f023 0301 	bic.w	r3, r3, #1
 800cfb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	3308      	adds	r3, #8
 800cfbe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cfc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cfc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cfc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cfca:	e841 2300 	strex	r3, r2, [r1]
 800cfce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cfd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1e1      	bne.n	800cf9a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2220      	movs	r2, #32
 800cfda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a5f      	ldr	r2, [pc, #380]	; (800d16c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d021      	beq.n	800d038 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d01a      	beq.n	800d038 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d00a:	e853 3f00 	ldrex	r3, [r3]
 800d00e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d012:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	461a      	mov	r2, r3
 800d020:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d024:	65bb      	str	r3, [r7, #88]	; 0x58
 800d026:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d028:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d02a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d02c:	e841 2300 	strex	r3, r2, [r1]
 800d030:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1e4      	bne.n	800d002 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d130      	bne.n	800d0a2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04e:	e853 3f00 	ldrex	r3, [r3]
 800d052:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d056:	f023 0310 	bic.w	r3, r3, #16
 800d05a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	461a      	mov	r2, r3
 800d064:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d068:	647b      	str	r3, [r7, #68]	; 0x44
 800d06a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d06e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d070:	e841 2300 	strex	r3, r2, [r1]
 800d074:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1e4      	bne.n	800d046 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	69db      	ldr	r3, [r3, #28]
 800d082:	f003 0310 	and.w	r3, r3, #16
 800d086:	2b10      	cmp	r3, #16
 800d088:	d103      	bne.n	800d092 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2210      	movs	r2, #16
 800d090:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d098:	4619      	mov	r1, r3
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f7fe fcba 	bl	800ba14 <HAL_UARTEx_RxEventCallback>
 800d0a0:	e002      	b.n	800d0a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f7f5 fd42 	bl	8002b2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d0a8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d006      	beq.n	800d0be <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800d0b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d0b4:	f003 0320 	and.w	r3, r3, #32
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f47f aecb 	bne.w	800ce54 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0c4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d0c8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d049      	beq.n	800d164 <UART_RxISR_16BIT_FIFOEN+0x358>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d0d6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d242      	bcs.n	800d164 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	3308      	adds	r3, #8
 800d0e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e8:	e853 3f00 	ldrex	r3, [r3]
 800d0ec:	623b      	str	r3, [r7, #32]
   return(result);
 800d0ee:	6a3b      	ldr	r3, [r7, #32]
 800d0f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	3308      	adds	r3, #8
 800d0fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d102:	633a      	str	r2, [r7, #48]	; 0x30
 800d104:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d10a:	e841 2300 	strex	r3, r2, [r1]
 800d10e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d112:	2b00      	cmp	r3, #0
 800d114:	d1e3      	bne.n	800d0de <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	4a15      	ldr	r2, [pc, #84]	; (800d170 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d11a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	e853 3f00 	ldrex	r3, [r3]
 800d128:	60fb      	str	r3, [r7, #12]
   return(result);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f043 0320 	orr.w	r3, r3, #32
 800d130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	461a      	mov	r2, r3
 800d13a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d13e:	61fb      	str	r3, [r7, #28]
 800d140:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d142:	69b9      	ldr	r1, [r7, #24]
 800d144:	69fa      	ldr	r2, [r7, #28]
 800d146:	e841 2300 	strex	r3, r2, [r1]
 800d14a:	617b      	str	r3, [r7, #20]
   return(result);
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1e4      	bne.n	800d11c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d152:	e007      	b.n	800d164 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	699a      	ldr	r2, [r3, #24]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f042 0208 	orr.w	r2, r2, #8
 800d162:	619a      	str	r2, [r3, #24]
}
 800d164:	bf00      	nop
 800d166:	37b8      	adds	r7, #184	; 0xb8
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	40008000 	.word	0x40008000
 800d170:	0800c8f5 	.word	0x0800c8f5

0800d174 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d17c:	bf00      	nop
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d190:	bf00      	nop
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d1a4:	bf00      	nop
 800d1a6:	370c      	adds	r7, #12
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	d101      	bne.n	800d1c6 <HAL_UARTEx_EnableFifoMode+0x16>
 800d1c2:	2302      	movs	r3, #2
 800d1c4:	e02b      	b.n	800d21e <HAL_UARTEx_EnableFifoMode+0x6e>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2224      	movs	r2, #36	; 0x24
 800d1d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f022 0201 	bic.w	r2, r2, #1
 800d1ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d1f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d1fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f88a 	bl	800d320 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2220      	movs	r2, #32
 800d210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b084      	sub	sp, #16
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
 800d22e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d236:	2b01      	cmp	r3, #1
 800d238:	d101      	bne.n	800d23e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d23a:	2302      	movs	r3, #2
 800d23c:	e02d      	b.n	800d29a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2201      	movs	r2, #1
 800d242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2224      	movs	r2, #36	; 0x24
 800d24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f022 0201 	bic.w	r2, r2, #1
 800d264:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	689b      	ldr	r3, [r3, #8]
 800d26c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	683a      	ldr	r2, [r7, #0]
 800d276:	430a      	orrs	r2, r1
 800d278:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f850 	bl	800d320 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	68fa      	ldr	r2, [r7, #12]
 800d286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2220      	movs	r2, #32
 800d28c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d298:	2300      	movs	r3, #0
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b084      	sub	sp, #16
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d101      	bne.n	800d2ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d2b6:	2302      	movs	r3, #2
 800d2b8:	e02d      	b.n	800d316 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2201      	movs	r2, #1
 800d2be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2224      	movs	r2, #36	; 0x24
 800d2c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f022 0201 	bic.w	r2, r2, #1
 800d2e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	683a      	ldr	r2, [r7, #0]
 800d2f2:	430a      	orrs	r2, r1
 800d2f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 f812 	bl	800d320 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2220      	movs	r2, #32
 800d308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2200      	movs	r2, #0
 800d310:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d314:	2300      	movs	r3, #0
}
 800d316:	4618      	mov	r0, r3
 800d318:	3710      	adds	r7, #16
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
	...

0800d320 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d108      	bne.n	800d342 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2201      	movs	r2, #1
 800d334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2201      	movs	r2, #1
 800d33c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d340:	e031      	b.n	800d3a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d342:	2308      	movs	r3, #8
 800d344:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d346:	2308      	movs	r3, #8
 800d348:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	0e5b      	lsrs	r3, r3, #25
 800d352:	b2db      	uxtb	r3, r3
 800d354:	f003 0307 	and.w	r3, r3, #7
 800d358:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	0f5b      	lsrs	r3, r3, #29
 800d362:	b2db      	uxtb	r3, r3
 800d364:	f003 0307 	and.w	r3, r3, #7
 800d368:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d36a:	7bbb      	ldrb	r3, [r7, #14]
 800d36c:	7b3a      	ldrb	r2, [r7, #12]
 800d36e:	4911      	ldr	r1, [pc, #68]	; (800d3b4 <UARTEx_SetNbDataToProcess+0x94>)
 800d370:	5c8a      	ldrb	r2, [r1, r2]
 800d372:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d376:	7b3a      	ldrb	r2, [r7, #12]
 800d378:	490f      	ldr	r1, [pc, #60]	; (800d3b8 <UARTEx_SetNbDataToProcess+0x98>)
 800d37a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d37c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d380:	b29a      	uxth	r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d388:	7bfb      	ldrb	r3, [r7, #15]
 800d38a:	7b7a      	ldrb	r2, [r7, #13]
 800d38c:	4909      	ldr	r1, [pc, #36]	; (800d3b4 <UARTEx_SetNbDataToProcess+0x94>)
 800d38e:	5c8a      	ldrb	r2, [r1, r2]
 800d390:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d394:	7b7a      	ldrb	r2, [r7, #13]
 800d396:	4908      	ldr	r1, [pc, #32]	; (800d3b8 <UARTEx_SetNbDataToProcess+0x98>)
 800d398:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d39a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d39e:	b29a      	uxth	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d3a6:	bf00      	nop
 800d3a8:	3714      	adds	r7, #20
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop
 800d3b4:	08032f50 	.word	0x08032f50
 800d3b8:	08032f58 	.word	0x08032f58

0800d3bc <Chk_ParamValidity>:
* @param  param: Parameter 
* @param  max_param_value: Max Parameter Value 
* @retval MOBLE_RESULT
*/ 
 MOBLE_RESULT Chk_ParamValidity(MOBLEUINT8 param, MOBLEUINT8 max_param_val )
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	460a      	mov	r2, r1
 800d3c6:	71fb      	strb	r3, [r7, #7]
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	71bb      	strb	r3, [r7, #6]
  if (param > max_param_val) 
 800d3cc:	79fa      	ldrb	r2, [r7, #7]
 800d3ce:	79bb      	ldrb	r3, [r7, #6]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d901      	bls.n	800d3d8 <Chk_ParamValidity+0x1c>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	e000      	b.n	800d3da <Chk_ParamValidity+0x1e>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800d3d8:	2300      	movs	r3, #0
  }
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	370c      	adds	r7, #12
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr

0800d3e6 <Chk_RangeValidity>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Chk_RangeValidity(MOBLEUINT16 min_param_value, 
                                const MOBLEUINT8* param,
                                                     MOBLEUINT16 max_param_value )
{
 800d3e6:	b480      	push	{r7}
 800d3e8:	b085      	sub	sp, #20
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	6039      	str	r1, [r7, #0]
 800d3f0:	80fb      	strh	r3, [r7, #6]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	80bb      	strh	r3, [r7, #4]
   MOBLEUINT16 minRange;
   MOBLEUINT16 maxRange;
    
    minRange =  param[1] << 8;
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	021b      	lsls	r3, r3, #8
 800d400:	81fb      	strh	r3, [r7, #14]
    minRange |= param[0];
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	b29a      	uxth	r2, r3
 800d408:	89fb      	ldrh	r3, [r7, #14]
 800d40a:	4313      	orrs	r3, r2
 800d40c:	81fb      	strh	r3, [r7, #14]
    
    maxRange =  param[3] << 8;
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	3303      	adds	r3, #3
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	b29b      	uxth	r3, r3
 800d416:	021b      	lsls	r3, r3, #8
 800d418:	81bb      	strh	r3, [r7, #12]
    maxRange |= param[2];
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	3302      	adds	r3, #2
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	b29a      	uxth	r2, r3
 800d422:	89bb      	ldrh	r3, [r7, #12]
 800d424:	4313      	orrs	r3, r2
 800d426:	81bb      	strh	r3, [r7, #12]
    
  if(minRange < min_param_value)
 800d428:	89fa      	ldrh	r2, [r7, #14]
 800d42a:	88fb      	ldrh	r3, [r7, #6]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d201      	bcs.n	800d434 <Chk_RangeValidity+0x4e>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d430:	2303      	movs	r3, #3
 800d432:	e00a      	b.n	800d44a <Chk_RangeValidity+0x64>
  }
  
  if((maxRange > max_param_value) || (maxRange < minRange))        
 800d434:	89ba      	ldrh	r2, [r7, #12]
 800d436:	88bb      	ldrh	r3, [r7, #4]
 800d438:	429a      	cmp	r2, r3
 800d43a:	d803      	bhi.n	800d444 <Chk_RangeValidity+0x5e>
 800d43c:	89ba      	ldrh	r2, [r7, #12]
 800d43e:	89fb      	ldrh	r3, [r7, #14]
 800d440:	429a      	cmp	r2, r3
 800d442:	d201      	bcs.n	800d448 <Chk_RangeValidity+0x62>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d444:	2303      	movs	r3, #3
 800d446:	e000      	b.n	800d44a <Chk_RangeValidity+0x64>
  } 
  
  return MOBLE_RESULT_SUCCESS;  
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3714      	adds	r7, #20
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr

0800d456 <Chk_OptionalParamValidity>:
*/ 
MOBLE_RESULT Chk_OptionalParamValidity(MOBLEUINT8 param_length,
                                       MOBLEUINT8 mandatory_length,
                                       MOBLEUINT8 param, 
                                       MOBLEUINT8 max_param_value  )
{
 800d456:	b490      	push	{r4, r7}
 800d458:	b082      	sub	sp, #8
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	4604      	mov	r4, r0
 800d45e:	4608      	mov	r0, r1
 800d460:	4611      	mov	r1, r2
 800d462:	461a      	mov	r2, r3
 800d464:	4623      	mov	r3, r4
 800d466:	71fb      	strb	r3, [r7, #7]
 800d468:	4603      	mov	r3, r0
 800d46a:	71bb      	strb	r3, [r7, #6]
 800d46c:	460b      	mov	r3, r1
 800d46e:	717b      	strb	r3, [r7, #5]
 800d470:	4613      	mov	r3, r2
 800d472:	713b      	strb	r3, [r7, #4]
  if ((param_length > mandatory_length) && (param > max_param_value))
 800d474:	79fa      	ldrb	r2, [r7, #7]
 800d476:	79bb      	ldrb	r3, [r7, #6]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d905      	bls.n	800d488 <Chk_OptionalParamValidity+0x32>
 800d47c:	797a      	ldrb	r2, [r7, #5]
 800d47e:	793b      	ldrb	r3, [r7, #4]
 800d480:	429a      	cmp	r2, r3
 800d482:	d901      	bls.n	800d488 <Chk_OptionalParamValidity+0x32>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d484:	2303      	movs	r3, #3
 800d486:	e000      	b.n	800d48a <Chk_OptionalParamValidity+0x34>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800d488:	2300      	movs	r3, #0
  }
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3708      	adds	r7, #8
 800d48e:	46bd      	mov	sp, r7
 800d490:	bc90      	pop	{r4, r7}
 800d492:	4770      	bx	lr

0800d494 <Chk_ParamMinMaxIntValidity>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Chk_ParamMinMaxIntValidity(MOBLEINT16 min_param_value,
                                        const MOBLEUINT8* param,
                                                     MOBLEINT16 max_param_value )
{
 800d494:	b480      	push	{r7}
 800d496:	b085      	sub	sp, #20
 800d498:	af00      	add	r7, sp, #0
 800d49a:	4603      	mov	r3, r0
 800d49c:	6039      	str	r1, [r7, #0]
 800d49e:	80fb      	strh	r3, [r7, #6]
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	80bb      	strh	r3, [r7, #4]
  MOBLEINT16 param_State1;
    
  param_State1 =  param[1] << 8;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	021b      	lsls	r3, r3, #8
 800d4ac:	81fb      	strh	r3, [r7, #14]
  param_State1 |= param[0];
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	b21a      	sxth	r2, r3
 800d4b4:	89fb      	ldrh	r3, [r7, #14]
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	81fb      	strh	r3, [r7, #14]
    
  if((param_State1 < min_param_value) || (param_State1 > max_param_value))
 800d4ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d4be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	db05      	blt.n	800d4d2 <Chk_ParamMinMaxIntValidity+0x3e>
 800d4c6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d4ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	dd01      	ble.n	800d4d6 <Chk_ParamMinMaxIntValidity+0x42>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d4d2:	2303      	movs	r3, #3
 800d4d4:	e000      	b.n	800d4d8 <Chk_ParamMinMaxIntValidity+0x44>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800d4d6:	2300      	movs	r3, #0
  }
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3714      	adds	r7, #20
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <Chk_ParamMinMaxValidity>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Chk_ParamMinMaxValidity(MOBLEUINT16 min_param_value,
                                     const MOBLEUINT8* param,
                                                     MOBLEUINT16 max_param_value )
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	6039      	str	r1, [r7, #0]
 800d4ee:	80fb      	strh	r3, [r7, #6]
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	80bb      	strh	r3, [r7, #4]
   MOBLEUINT16 param_State1;
    
    param_State1 =  param[1] << 8;
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	b29b      	uxth	r3, r3
 800d4fc:	021b      	lsls	r3, r3, #8
 800d4fe:	81fb      	strh	r3, [r7, #14]
    param_State1 |= param[0];
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	b29a      	uxth	r2, r3
 800d506:	89fb      	ldrh	r3, [r7, #14]
 800d508:	4313      	orrs	r3, r2
 800d50a:	81fb      	strh	r3, [r7, #14]

  if((param_State1 < min_param_value) || (param_State1 > max_param_value))
 800d50c:	89fa      	ldrh	r2, [r7, #14]
 800d50e:	88fb      	ldrh	r3, [r7, #6]
 800d510:	429a      	cmp	r2, r3
 800d512:	d303      	bcc.n	800d51c <Chk_ParamMinMaxValidity+0x38>
 800d514:	89fa      	ldrh	r2, [r7, #14]
 800d516:	88bb      	ldrh	r3, [r7, #4]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d901      	bls.n	800d520 <Chk_ParamMinMaxValidity+0x3c>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d51c:	2303      	movs	r3, #3
 800d51e:	e000      	b.n	800d522 <Chk_ParamMinMaxValidity+0x3e>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800d520:	2300      	movs	r3, #0
  }
}
 800d522:	4618      	mov	r0, r3
 800d524:	3714      	adds	r7, #20
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr
	...

0800d530 <Get_StepResolutionValue>:
* @brief  Get actual value in milliseconds from default transition step resolution 
* @param  time_param: integer value received for transition time
* @retval stepResolution 
 */                                         
MOBLEUINT32 Get_StepResolutionValue(MOBLEUINT8 time_param)
{
 800d530:	b480      	push	{r7}
 800d532:	b085      	sub	sp, #20
 800d534:	af00      	add	r7, sp, #0
 800d536:	4603      	mov	r3, r0
 800d538:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT32 stepResolution = 0;
 800d53a:	2300      	movs	r3, #0
 800d53c:	60fb      	str	r3, [r7, #12]
  
  if(time_param == STEP_HEX_VALUE_0)
 800d53e:	79fb      	ldrb	r3, [r7, #7]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d102      	bne.n	800d54a <Get_StepResolutionValue+0x1a>
  {
    stepResolution = STEP_RESOLUTION_100MS;   
 800d544:	2364      	movs	r3, #100	; 0x64
 800d546:	60fb      	str	r3, [r7, #12]
 800d548:	e015      	b.n	800d576 <Get_StepResolutionValue+0x46>
  }
  else if(time_param == STEP_HEX_VALUE_1)
 800d54a:	79fb      	ldrb	r3, [r7, #7]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d103      	bne.n	800d558 <Get_StepResolutionValue+0x28>
  {
    stepResolution = STEP_RESOLUTION_1S;   
 800d550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d554:	60fb      	str	r3, [r7, #12]
 800d556:	e00e      	b.n	800d576 <Get_StepResolutionValue+0x46>
  }
  else if(time_param == STEP_HEX_VALUE_2)
 800d558:	79fb      	ldrb	r3, [r7, #7]
 800d55a:	2b02      	cmp	r3, #2
 800d55c:	d103      	bne.n	800d566 <Get_StepResolutionValue+0x36>
  {
    stepResolution = STEP_RESOLUTION_10S;   
 800d55e:	f242 7310 	movw	r3, #10000	; 0x2710
 800d562:	60fb      	str	r3, [r7, #12]
 800d564:	e007      	b.n	800d576 <Get_StepResolutionValue+0x46>
  }
  else if(time_param == STEP_HEX_VALUE_3)
 800d566:	79fb      	ldrb	r3, [r7, #7]
 800d568:	2b03      	cmp	r3, #3
 800d56a:	d102      	bne.n	800d572 <Get_StepResolutionValue+0x42>
  {
    stepResolution = STEP_RESOLUTION_10M;
 800d56c:	4b05      	ldr	r3, [pc, #20]	; (800d584 <Get_StepResolutionValue+0x54>)
 800d56e:	60fb      	str	r3, [r7, #12]
 800d570:	e001      	b.n	800d576 <Get_StepResolutionValue+0x46>
  }
  else
  {
    stepResolution = 0;   
 800d572:	2300      	movs	r3, #0
 800d574:	60fb      	str	r3, [r7, #12]
  }  
  
  return stepResolution;  
 800d576:	68fb      	ldr	r3, [r7, #12]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3714      	adds	r7, #20
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr
 800d584:	000927c0 	.word	0x000927c0

0800d588 <TraceHeader>:
* @param  func_name: function pointer.
* @param  mode: Flag
* @retval void
*/ 
void TraceHeader(const char* func_name, int mode)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
    if (mode >= 0)
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	db08      	blt.n	800d5aa <TraceHeader+0x22>
        printf("%ld %s - ", Clock_Time(), func_name);
 800d598:	f7fa fc70 	bl	8007e7c <HAL_GetTick>
 800d59c:	4603      	mov	r3, r0
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	4808      	ldr	r0, [pc, #32]	; (800d5c4 <TraceHeader+0x3c>)
 800d5a4:	f01c f8d8 	bl	8029758 <iprintf>
    else
        printf("%ld %s - <<<ERROR>>>", Clock_Time(), func_name);
}    
 800d5a8:	e007      	b.n	800d5ba <TraceHeader+0x32>
        printf("%ld %s - <<<ERROR>>>", Clock_Time(), func_name);
 800d5aa:	f7fa fc67 	bl	8007e7c <HAL_GetTick>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	4804      	ldr	r0, [pc, #16]	; (800d5c8 <TraceHeader+0x40>)
 800d5b6:	f01c f8cf 	bl	8029758 <iprintf>
}    
 800d5ba:	bf00      	nop
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	0802ef00 	.word	0x0802ef00
 800d5c8:	0802ef0c 	.word	0x0802ef0c

0800d5cc <Model_RestoreStates>:
*        saved states.
* @param void.
* return void.
*/
void Model_RestoreStates(MOBLEUINT8 const *pModelState_Load, MOBLEUINT8 size)
{ 
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b090      	sub	sp, #64	; 0x40
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	70fb      	strb	r3, [r7, #3]
  MOBLEUINT8 setData[4];
  MOBLE_ADDRESS publishAddress;
  MOBLEUINT16 model_ID = 0;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	87fb      	strh	r3, [r7, #62]	; 0x3e
  MOBLEUINT16 opcode = 0;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	87bb      	strh	r3, [r7, #60]	; 0x3c
  MOBLEUINT32 length = 0;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	637b      	str	r3, [r7, #52]	; 0x34
  MOBLEUINT16 dstPeer;
  MODEL_MessageHeader_t msgParam;
  
  MOBLEUINT16 saveBuffSize;
  
  my_Address = BLEMesh_GetAddress(); /* Get the Primary address */
 800d5e4:	f00f fd4a 	bl	801d07c <BLEMesh_GetAddress>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	877b      	strh	r3, [r7, #58]	; 0x3a
  
  Models_ParamNvm_t Models_ParamNvm[APPLICATION_NUMBER_OF_ELEMENTS];
  
  saveBuffSize = sizeof(Models_ParamNvm);
 800d5ec:	2310      	movs	r3, #16
 800d5ee:	867b      	strh	r3, [r7, #50]	; 0x32
  
  TRACE_I(TF_NVM,"Retrieved data from flash \r\n");
  for(MOBLEUINT8 count=0;count<saveBuffSize;count++)
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d5f6:	e004      	b.n	800d602 <Model_RestoreStates+0x36>
 800d5f8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d602:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d606:	b29b      	uxth	r3, r3
 800d608:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d8f4      	bhi.n	800d5f8 <Model_RestoreStates+0x2c>
  {
    TRACE_I(TF_NVM,"%.2x %c",pModelState_Load[count],' ');
  }
  TRACE_I(TF_NVM,"\r\n");
  
  if (size > 0)
 800d60e:	78fb      	ldrb	r3, [r7, #3]
 800d610:	2b00      	cmp	r3, #0
 800d612:	f000 80d0 	beq.w	800d7b6 <Model_RestoreStates+0x1ea>
  {
    for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800d616:	2300      	movs	r3, #0
 800d618:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d61c:	e0c6      	b.n	800d7ac <Model_RestoreStates+0x1e0>
    {
      
      memcpy((void*)&Models_ParamNvm,pModelState_Load,sizeof(Models_ParamNvm));
 800d61e:	f107 030c 	add.w	r3, r7, #12
 800d622:	2210      	movs	r2, #16
 800d624:	6879      	ldr	r1, [r7, #4]
 800d626:	4618      	mov	r0, r3
 800d628:	f01b faa2 	bl	8028b70 <memcpy>
      
      Generic_RestoreModelStates(&Models_ParamNvm[elementIndex] , elementIndex);
 800d62c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d630:	f107 020c 	add.w	r2, r7, #12
 800d634:	011b      	lsls	r3, r3, #4
 800d636:	4413      	add	r3, r2
 800d638:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d63c:	4611      	mov	r1, r2
 800d63e:	4618      	mov	r0, r3
 800d640:	f001 fff4 	bl	800f62c <Generic_RestoreModelStates>
      Light_RestoreModelStates(&Models_ParamNvm[elementIndex] , elementIndex);
 800d644:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d648:	f107 020c 	add.w	r2, r7, #12
 800d64c:	011b      	lsls	r3, r3, #4
 800d64e:	4413      	add	r3, r2
 800d650:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d654:	4611      	mov	r1, r2
 800d656:	4618      	mov	r0, r3
 800d658:	f004 fad4 	bl	8011c04 <Light_RestoreModelStates>
      
      dstPeer = my_Address+elementIndex;
 800d65c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d660:	b29a      	uxth	r2, r3
 800d662:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d664:	4413      	add	r3, r2
 800d666:	863b      	strh	r3, [r7, #48]	; 0x30
    
      /* Initialize the messageParam */
      msgParam.dst_peer = dstPeer;
 800d668:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d66a:	847b      	strh	r3, [r7, #34]	; 0x22
      msgParam.peer_addr = dstPeer;
 800d66c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d66e:	843b      	strh	r3, [r7, #32]
      msgParam.elementIndex = elementIndex;
 800d670:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d674:	773b      	strb	r3, [r7, #28]
      msgParam.rcvdAppKeyOffset = 0;
 800d676:	2300      	movs	r3, #0
 800d678:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      msgParam.rcvdNetKeyOffset = 0;
 800d67c:	2300      	movs	r3, #0
 800d67e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      msgParam.rssi = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      msgParam.ttl = 0;
 800d688:	2300      	movs	r3, #0
 800d68a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      
      switch(Models_ParamNvm[elementIndex].Restore_Flag)  
 800d68e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d692:	011b      	lsls	r3, r3, #4
 800d694:	3340      	adds	r3, #64	; 0x40
 800d696:	443b      	add	r3, r7
 800d698:	3b34      	subs	r3, #52	; 0x34
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2bfe      	cmp	r3, #254	; 0xfe
 800d69e:	d057      	beq.n	800d750 <Model_RestoreStates+0x184>
 800d6a0:	2bfe      	cmp	r3, #254	; 0xfe
 800d6a2:	dc61      	bgt.n	800d768 <Model_RestoreStates+0x19c>
 800d6a4:	2b03      	cmp	r3, #3
 800d6a6:	d02f      	beq.n	800d708 <Model_RestoreStates+0x13c>
 800d6a8:	2b03      	cmp	r3, #3
 800d6aa:	dc5d      	bgt.n	800d768 <Model_RestoreStates+0x19c>
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d002      	beq.n	800d6b6 <Model_RestoreStates+0xea>
 800d6b0:	2b02      	cmp	r3, #2
 800d6b2:	d013      	beq.n	800d6dc <Model_RestoreStates+0x110>
        }
        
        default: 
        {
          TRACE_M(TF_LIGHT_M, "No Saved Data Found \r\n");
          break;
 800d6b4:	e058      	b.n	800d768 <Model_RestoreStates+0x19c>
          Generic_OnOffPowerOnValue(&Models_ParamNvm[elementIndex], &msgParam);				
 800d6b6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d6ba:	f107 020c 	add.w	r2, r7, #12
 800d6be:	011b      	lsls	r3, r3, #4
 800d6c0:	4413      	add	r3, r2
 800d6c2:	f107 021c 	add.w	r2, r7, #28
 800d6c6:	4611      	mov	r1, r2
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f000 f87d 	bl	800d7c8 <Generic_OnOffPowerOnValue>
          opcode = GENERIC_ON_OFF_SET_UNACK;
 800d6ce:	f248 2303 	movw	r3, #33283	; 0x8203
 800d6d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
          model_ID = GENERIC_ONOFF_SERVER_MODEL_ID;
 800d6d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
          break;
 800d6da:	e046      	b.n	800d76a <Model_RestoreStates+0x19e>
          CopyU8LittleEndienArray_fromU16word (setData, Models_ParamNvm[elementIndex].Generic_Level);
 800d6dc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d6e0:	011b      	lsls	r3, r3, #4
 800d6e2:	3340      	adds	r3, #64	; 0x40
 800d6e4:	443b      	add	r3, r7
 800d6e6:	3b2e      	subs	r3, #46	; 0x2e
 800d6e8:	881a      	ldrh	r2, [r3, #0]
 800d6ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d6ee:	4611      	mov	r1, r2
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f000 f94f 	bl	800d994 <CopyU8LittleEndienArray_fromU16word>
          Generic_Level_Set(setData,2, &msgParam);
 800d6f6:	f107 021c 	add.w	r2, r7, #28
 800d6fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d6fe:	2102      	movs	r1, #2
 800d700:	4618      	mov	r0, r3
 800d702:	f000 fb91 	bl	800de28 <Generic_Level_Set>
          break;
 800d706:	e030      	b.n	800d76a <Model_RestoreStates+0x19e>
          light_LightnessValue = Light_lightnessPowerOnValue(&Models_ParamNvm[elementIndex], &msgParam);
 800d708:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d70c:	f107 020c 	add.w	r2, r7, #12
 800d710:	011b      	lsls	r3, r3, #4
 800d712:	4413      	add	r3, r2
 800d714:	f107 021c 	add.w	r2, r7, #28
 800d718:	4611      	mov	r1, r2
 800d71a:	4618      	mov	r0, r3
 800d71c:	f000 f891 	bl	800d842 <Light_lightnessPowerOnValue>
 800d720:	4603      	mov	r3, r0
 800d722:	85fb      	strh	r3, [r7, #46]	; 0x2e
          CopyU8LittleEndienArray_fromU16word (setData, light_LightnessValue);
 800d724:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d72a:	4611      	mov	r1, r2
 800d72c:	4618      	mov	r0, r3
 800d72e:	f000 f931 	bl	800d994 <CopyU8LittleEndienArray_fromU16word>
          Light_Lightness_Set(setData, 2, &msgParam);
 800d732:	f107 021c 	add.w	r2, r7, #28
 800d736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d73a:	2102      	movs	r1, #2
 800d73c:	4618      	mov	r0, r3
 800d73e:	f001 ffef 	bl	800f720 <Light_Lightness_Set>
          opcode = LIGHT_LIGHTNESS_SET_UNACK;
 800d742:	f248 234d 	movw	r3, #33357	; 0x824d
 800d746:	87bb      	strh	r3, [r7, #60]	; 0x3c
          model_ID = LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 800d748:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 800d74c:	87fb      	strh	r3, [r7, #62]	; 0x3e
          break;
 800d74e:	e00c      	b.n	800d76a <Model_RestoreStates+0x19e>
          TRACE_M(TF_GENERIC_M, "Power OnOff value stored = %d \r\n",pModelState_Load[4]);
 800d750:	2100      	movs	r1, #0
 800d752:	481b      	ldr	r0, [pc, #108]	; (800d7c0 <Model_RestoreStates+0x1f4>)
 800d754:	f7ff ff18 	bl	800d588 <TraceHeader>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	3304      	adds	r3, #4
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	4619      	mov	r1, r3
 800d760:	4818      	ldr	r0, [pc, #96]	; (800d7c4 <Model_RestoreStates+0x1f8>)
 800d762:	f01b fff9 	bl	8029758 <iprintf>
          break;
 800d766:	e000      	b.n	800d76a <Model_RestoreStates+0x19e>
          break;
 800d768:	bf00      	nop
        }
        
      } /* switch(pModelState_Load[GENERIC_VALID_FLAG_OFFSET]) */    
    
      my_Address = BLEMesh_GetAddress();
 800d76a:	f00f fc87 	bl	801d07c <BLEMesh_GetAddress>
 800d76e:	4603      	mov	r3, r0
 800d770:	877b      	strh	r3, [r7, #58]	; 0x3a
      publishAddress = BLEMesh_GetPublishAddress(elementIndex, model_ID);
 800d772:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d774:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d778:	4611      	mov	r1, r2
 800d77a:	4618      	mov	r0, r3
 800d77c:	f00f fc8e 	bl	801d09c <BLEMesh_GetPublishAddress>
 800d780:	4603      	mov	r3, r0
 800d782:	85bb      	strh	r3, [r7, #44]	; 0x2c
      
      if(publishAddress != 0x0000 )
 800d784:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00b      	beq.n	800d7a2 <Model_RestoreStates+0x1d6>
      {
        msgParam.peer_addr = publishAddress;
 800d78a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d78c:	843b      	strh	r3, [r7, #32]
        msgParam.dst_peer = dstPeer;
 800d78e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d790:	847b      	strh	r3, [r7, #34]	; 0x22
      
        Model_SendResponse(&msgParam, opcode, setData,length);
 800d792:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d796:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800d798:	f107 001c 	add.w	r0, r7, #28
 800d79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d79e:	f01a fe7b 	bl	8028498 <Model_SendResponse>
    for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800d7a2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d7ac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	f43f af34 	beq.w	800d61e <Model_RestoreStates+0x52>
      } /* if(publishAddress != 0x0000) */
     
     // break; /* Run only once for element index 0 */
    } /* for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++) */
  } /* if (size > 0) */
}
 800d7b6:	bf00      	nop
 800d7b8:	3740      	adds	r7, #64	; 0x40
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	08032f60 	.word	0x08032f60
 800d7c4:	0802ef30 	.word	0x0802ef30

0800d7c8 <Generic_OnOffPowerOnValue>:
* @param  *pmsgParam: Pointer to structure of message header for parameters:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & ApkmpKey Offset
* @retval MOBLEUINT16
*/
void Generic_OnOffPowerOnValue(Models_ParamNvm_t *state_Value, MODEL_MessageHeader_t *pmsgParam)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 transitionStatus;
  MOBLEUINT8 setData[2]; 
  
  transitionStatus = state_Value->GenericTransitionStatus;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	789b      	ldrb	r3, [r3, #2]
 800d7d6:	73fb      	strb	r3, [r7, #15]
  
  if(transitionStatus)
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d003      	beq.n	800d7e6 <Generic_OnOffPowerOnValue+0x1e>
  {
    setData[0] = state_Value->GenericTarget;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	795b      	ldrb	r3, [r3, #5]
 800d7e2:	733b      	strb	r3, [r7, #12]
 800d7e4:	e002      	b.n	800d7ec <Generic_OnOffPowerOnValue+0x24>
  }
  else
  {
    setData[0] = state_Value->Generic_OnOff;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	791b      	ldrb	r3, [r3, #4]
 800d7ea:	733b      	strb	r3, [r7, #12]
  }
  
  if(state_Value->PowerOnOff == GENERIC_POWER_OFF_STATE)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	78db      	ldrb	r3, [r3, #3]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d109      	bne.n	800d808 <Generic_OnOffPowerOnValue+0x40>
  {
    setData[0] = APPLI_LED_OFF;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	733b      	strb	r3, [r7, #12]
    Generic_OnOff_Set(setData,1,pmsgParam); 
 800d7f8:	f107 030c 	add.w	r3, r7, #12
 800d7fc:	683a      	ldr	r2, [r7, #0]
 800d7fe:	2101      	movs	r1, #1
 800d800:	4618      	mov	r0, r3
 800d802:	f000 f98f 	bl	800db24 <Generic_OnOff_Set>
  }
  else
  {
    
  }           
}
 800d806:	e018      	b.n	800d83a <Generic_OnOffPowerOnValue+0x72>
  else if(state_Value->PowerOnOff == GENERIC_POWER_ON_STATE)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	78db      	ldrb	r3, [r3, #3]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d109      	bne.n	800d824 <Generic_OnOffPowerOnValue+0x5c>
    setData[0] = APPLI_LED_ON;
 800d810:	2301      	movs	r3, #1
 800d812:	733b      	strb	r3, [r7, #12]
    Generic_OnOff_Set(setData,1,pmsgParam);
 800d814:	f107 030c 	add.w	r3, r7, #12
 800d818:	683a      	ldr	r2, [r7, #0]
 800d81a:	2101      	movs	r1, #1
 800d81c:	4618      	mov	r0, r3
 800d81e:	f000 f981 	bl	800db24 <Generic_OnOff_Set>
}
 800d822:	e00a      	b.n	800d83a <Generic_OnOffPowerOnValue+0x72>
  else if(state_Value->PowerOnOff == GENERIC_POWER_RESTORE_STATE)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	78db      	ldrb	r3, [r3, #3]
 800d828:	2b02      	cmp	r3, #2
 800d82a:	d106      	bne.n	800d83a <Generic_OnOffPowerOnValue+0x72>
    Generic_OnOff_Set(setData, 1,pmsgParam);
 800d82c:	f107 030c 	add.w	r3, r7, #12
 800d830:	683a      	ldr	r2, [r7, #0]
 800d832:	2101      	movs	r1, #1
 800d834:	4618      	mov	r0, r3
 800d836:	f000 f975 	bl	800db24 <Generic_OnOff_Set>
}
 800d83a:	bf00      	nop
 800d83c:	3710      	adds	r7, #16
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <Light_lightnessPowerOnValue>:
* @param  *pmsgParam: Pointer to structure of message header for parameters:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & ApkmpKey Offset
* @retval MOBLEUINT16
*/
MOBLEUINT16 Light_lightnessPowerOnValue(Models_ParamNvm_t *state_Value, MODEL_MessageHeader_t *pmsgParam)
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b086      	sub	sp, #24
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 powerOn_Value;
  MOBLEUINT16 light_Actual = 0;
 800d84c:	2300      	movs	r3, #0
 800d84e:	82fb      	strh	r3, [r7, #22]
  MOBLEUINT16 last_KnownValue;
  MOBLEUINT8 transitionStatus;
  MOBLEUINT8 setData[4];
  transitionStatus = state_Value->LightTransitionStatus;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	785b      	ldrb	r3, [r3, #1]
 800d854:	74fb      	strb	r3, [r7, #19]
  
  if(transitionStatus)
 800d856:	7cfb      	ldrb	r3, [r7, #19]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d003      	beq.n	800d864 <Light_lightnessPowerOnValue+0x22>
  {
    last_KnownValue = state_Value->LightTarget;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	895b      	ldrh	r3, [r3, #10]
 800d860:	82bb      	strh	r3, [r7, #20]
 800d862:	e002      	b.n	800d86a <Light_lightnessPowerOnValue+0x28>
    TRACE_M(TF_COMMON,"Transition Flag is = %.2x, Last_Known Value = 0x%.2x \r\n",\
            transitionStatus, last_KnownValue);
  }
  else
  {
    last_KnownValue = state_Value->LightLightness;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	891b      	ldrh	r3, [r3, #8]
 800d868:	82bb      	strh	r3, [r7, #20]
    
    TRACE_M(TF_COMMON,"Transition Flag is = %.2x, Last_Known Value = 0x%.2x \r\n",\
            transitionStatus, last_KnownValue);
  }
  
  powerOn_Value = state_Value->PowerOnOff;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	78db      	ldrb	r3, [r3, #3]
 800d86e:	74bb      	strb	r3, [r7, #18]
  
  CopyU8LittleEndienArray_fromU16word (setData, state_Value->LightLast);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	89da      	ldrh	r2, [r3, #14]
 800d874:	f107 030c 	add.w	r3, r7, #12
 800d878:	4611      	mov	r1, r2
 800d87a:	4618      	mov	r0, r3
 800d87c:	f000 f88a 	bl	800d994 <CopyU8LittleEndienArray_fromU16word>
  
  Light_LightnessLast_Set(setData,2, pmsgParam);
 800d880:	f107 030c 	add.w	r3, r7, #12
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	2102      	movs	r1, #2
 800d888:	4618      	mov	r0, r3
 800d88a:	f002 fa5d 	bl	800fd48 <Light_LightnessLast_Set>
  
  CopyU8LittleEndienArray_fromU16word (setData, state_Value->LightDefault);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	899a      	ldrh	r2, [r3, #12]
 800d892:	f107 030c 	add.w	r3, r7, #12
 800d896:	4611      	mov	r1, r2
 800d898:	4618      	mov	r0, r3
 800d89a:	f000 f87b 	bl	800d994 <CopyU8LittleEndienArray_fromU16word>
  Light_LightnessDefault_Set(setData,2, pmsgParam);
 800d89e:	f107 030c 	add.w	r3, r7, #12
 800d8a2:	683a      	ldr	r2, [r7, #0]
 800d8a4:	2102      	movs	r1, #2
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f002 fac2 	bl	800fe30 <Light_LightnessDefault_Set>
   
  if(powerOn_Value == GENERIC_POWER_OFF_STATE)
 800d8ac:	7cbb      	ldrb	r3, [r7, #18]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d102      	bne.n	800d8b8 <Light_lightnessPowerOnValue+0x76>
  { /* Light Lightness Actual = 0 for value of the Generic OnPowerUp state equal 
       to 0x00 */
    light_Actual = 0x00;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	82fb      	strh	r3, [r7, #22]
 800d8b6:	e01a      	b.n	800d8ee <Light_lightnessPowerOnValue+0xac>
  }
  else if((powerOn_Value == GENERIC_POWER_ON_STATE) && (state_Value->LightDefault != 0x00))
 800d8b8:	7cbb      	ldrb	r3, [r7, #18]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d107      	bne.n	800d8ce <Light_lightnessPowerOnValue+0x8c>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	899b      	ldrh	r3, [r3, #12]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d003      	beq.n	800d8ce <Light_lightnessPowerOnValue+0x8c>
  {
    /* Light Lightness Actual = Light Lightness Default for value of the Generic 
        OnPowerUp state equal to 0x01 and Light Lightness Default not equal to zero, */
    light_Actual = state_Value->LightDefault;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	899b      	ldrh	r3, [r3, #12]
 800d8ca:	82fb      	strh	r3, [r7, #22]
 800d8cc:	e00f      	b.n	800d8ee <Light_lightnessPowerOnValue+0xac>
  }
  else if((powerOn_Value == GENERIC_POWER_ON_STATE) && (state_Value->LightDefault == 0x00))
 800d8ce:	7cbb      	ldrb	r3, [r7, #18]
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d107      	bne.n	800d8e4 <Light_lightnessPowerOnValue+0xa2>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	899b      	ldrh	r3, [r3, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d103      	bne.n	800d8e4 <Light_lightnessPowerOnValue+0xa2>
  {
    /* Light Lightness Actual = Light Lightness Last (see Section 6.1.2.3)
       for value of the Generic OnPowerUp state equal to 0x01 and 
       Light Lightness Default equal to zero */
    light_Actual = state_Value->LightLast;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	89db      	ldrh	r3, [r3, #14]
 800d8e0:	82fb      	strh	r3, [r7, #22]
 800d8e2:	e004      	b.n	800d8ee <Light_lightnessPowerOnValue+0xac>
  }
  else if(powerOn_Value == GENERIC_POWER_RESTORE_STATE)
 800d8e4:	7cbb      	ldrb	r3, [r7, #18]
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d101      	bne.n	800d8ee <Light_lightnessPowerOnValue+0xac>
  {
    light_Actual = last_KnownValue;
 800d8ea:	8abb      	ldrh	r3, [r7, #20]
 800d8ec:	82fb      	strh	r3, [r7, #22]
  {
     
  }

  TRACE_I(TF_COMMON, "LIGHT LIGHTNESS VALUE ON POWER UP %.2x \r\n",light_Actual);
  return light_Actual;
 800d8ee:	8afb      	ldrh	r3, [r7, #22]
}  
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3718      	adds	r7, #24
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <Chk_TidValidity>:
  * @brief  
  * @param  
  * @retval 
  */
MOBLE_RESULT Chk_TidValidity(MOBLE_ADDRESS peerAddr, MOBLE_ADDRESS dstAddr, MOBLEUINT8 tidValue)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	4603      	mov	r3, r0
 800d900:	80fb      	strh	r3, [r7, #6]
 800d902:	460b      	mov	r3, r1
 800d904:	80bb      	strh	r3, [r7, #4]
 800d906:	4613      	mov	r3, r2
 800d908:	70fb      	strb	r3, [r7, #3]
  static MOBLEUINT32 Check_time;
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 800d90a:	2300      	movs	r3, #0
 800d90c:	73fb      	strb	r3, [r7, #15]
  
  TRACE_M(TF_COMMON, "dst_peer %.2X peer_add %.2X, tid %d\r\n", dstAddr, peerAddr, tidValue);
  
  if(((Clock_Time()- Check_time) <= 6000))
 800d90e:	f7fa fab5 	bl	8007e7c <HAL_GetTick>
 800d912:	4602      	mov	r2, r0
 800d914:	4b1d      	ldr	r3, [pc, #116]	; (800d98c <Chk_TidValidity+0x94>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	1ad3      	subs	r3, r2, r3
 800d91a:	f241 7270 	movw	r2, #6000	; 0x1770
 800d91e:	4293      	cmp	r3, r2
 800d920:	d820      	bhi.n	800d964 <Chk_TidValidity+0x6c>
  {
    if((Model_Tid.Peer_Addrs == peerAddr)&&(Model_Tid.Dst_Addrs == dstAddr)&&(Model_Tid.Tid_Value == tidValue))
 800d922:	4b1b      	ldr	r3, [pc, #108]	; (800d990 <Chk_TidValidity+0x98>)
 800d924:	885b      	ldrh	r3, [r3, #2]
 800d926:	88fa      	ldrh	r2, [r7, #6]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d10c      	bne.n	800d946 <Chk_TidValidity+0x4e>
 800d92c:	4b18      	ldr	r3, [pc, #96]	; (800d990 <Chk_TidValidity+0x98>)
 800d92e:	889b      	ldrh	r3, [r3, #4]
 800d930:	88ba      	ldrh	r2, [r7, #4]
 800d932:	429a      	cmp	r2, r3
 800d934:	d107      	bne.n	800d946 <Chk_TidValidity+0x4e>
 800d936:	4b16      	ldr	r3, [pc, #88]	; (800d990 <Chk_TidValidity+0x98>)
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	78fa      	ldrb	r2, [r7, #3]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d102      	bne.n	800d946 <Chk_TidValidity+0x4e>
    {
      TRACE_M(TF_COMMON,"Duplicate Message Parameter within six second \r\n");
      status =  MOBLE_RESULT_INVALIDARG;       
 800d940:	2303      	movs	r3, #3
 800d942:	73fb      	strb	r3, [r7, #15]
 800d944:	e01c      	b.n	800d980 <Chk_TidValidity+0x88>
    }
    else
    {
      Check_time = Clock_Time();
 800d946:	f7fa fa99 	bl	8007e7c <HAL_GetTick>
 800d94a:	4603      	mov	r3, r0
 800d94c:	4a0f      	ldr	r2, [pc, #60]	; (800d98c <Chk_TidValidity+0x94>)
 800d94e:	6013      	str	r3, [r2, #0]
      Model_Tid.Peer_Addrs = peerAddr;
 800d950:	4a0f      	ldr	r2, [pc, #60]	; (800d990 <Chk_TidValidity+0x98>)
 800d952:	88fb      	ldrh	r3, [r7, #6]
 800d954:	8053      	strh	r3, [r2, #2]
      Model_Tid.Dst_Addrs = dstAddr;
 800d956:	4a0e      	ldr	r2, [pc, #56]	; (800d990 <Chk_TidValidity+0x98>)
 800d958:	88bb      	ldrh	r3, [r7, #4]
 800d95a:	8093      	strh	r3, [r2, #4]
      Model_Tid.Tid_Value = tidValue; 
 800d95c:	4a0c      	ldr	r2, [pc, #48]	; (800d990 <Chk_TidValidity+0x98>)
 800d95e:	78fb      	ldrb	r3, [r7, #3]
 800d960:	7013      	strb	r3, [r2, #0]
 800d962:	e00d      	b.n	800d980 <Chk_TidValidity+0x88>
      TRACE_M(TF_COMMON,"New Message Parameter within six second \r\n");
    }
  }
  else
  {
    Check_time = Clock_Time();
 800d964:	f7fa fa8a 	bl	8007e7c <HAL_GetTick>
 800d968:	4603      	mov	r3, r0
 800d96a:	4a08      	ldr	r2, [pc, #32]	; (800d98c <Chk_TidValidity+0x94>)
 800d96c:	6013      	str	r3, [r2, #0]
    Model_Tid.Peer_Addrs = peerAddr;
 800d96e:	4a08      	ldr	r2, [pc, #32]	; (800d990 <Chk_TidValidity+0x98>)
 800d970:	88fb      	ldrh	r3, [r7, #6]
 800d972:	8053      	strh	r3, [r2, #2]
    Model_Tid.Dst_Addrs = dstAddr;
 800d974:	4a06      	ldr	r2, [pc, #24]	; (800d990 <Chk_TidValidity+0x98>)
 800d976:	88bb      	ldrh	r3, [r7, #4]
 800d978:	8093      	strh	r3, [r2, #4]
    Model_Tid.Tid_Value = tidValue;
 800d97a:	4a05      	ldr	r2, [pc, #20]	; (800d990 <Chk_TidValidity+0x98>)
 800d97c:	78fb      	ldrb	r3, [r7, #3]
 800d97e:	7013      	strb	r3, [r2, #0]
    TRACE_M(TF_COMMON,"New Message Parameter after six second\r\n");
  }
  
  return status;
 800d980:	7bfb      	ldrb	r3, [r7, #15]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	20004558 	.word	0x20004558
 800d990:	20004548 	.word	0x20004548

0800d994 <CopyU8LittleEndienArray_fromU16word>:
  * and copy in one byte size array.  
  * @param pArray: pointer too the input array
  * @param inputWord: 16 bit variabale  
*/
void CopyU8LittleEndienArray_fromU16word (MOBLEUINT8* pArray, MOBLEUINT16 inputWord)
{
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	460b      	mov	r3, r1
 800d99e:	807b      	strh	r3, [r7, #2]
  *(pArray) = (MOBLEUINT8)(inputWord & 0x00ff);  /* Copy the LSB first */
 800d9a0:	887b      	ldrh	r3, [r7, #2]
 800d9a2:	b2da      	uxtb	r2, r3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	701a      	strb	r2, [r3, #0]
  *(pArray+1) = (MOBLEUINT8)((inputWord & 0xff00) >> 0x08); /* Copy the MSB later */
 800d9a8:	887b      	ldrh	r3, [r7, #2]
 800d9aa:	0a1b      	lsrs	r3, r3, #8
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	b2d2      	uxtb	r2, r2
 800d9b4:	701a      	strb	r2, [r3, #0]
}
 800d9b6:	bf00      	nop
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <CopyU8LittleEndienArrayToU16word>:
  * bit variable
  * @param pArray: pointer too the input array
  * @retval u16Word : 16 bit value. 
*/
MOBLEUINT16 CopyU8LittleEndienArrayToU16word (MOBLEUINT8* pArray) 
{
 800d9c2:	b480      	push	{r7}
 800d9c4:	b085      	sub	sp, #20
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
  MOBLEUINT16 u16Word=0;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	81fb      	strh	r3, [r7, #14]
  MOBLEUINT8 lsb_byte=0;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	737b      	strb	r3, [r7, #13]
  MOBLEUINT8 msb_byte=0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	733b      	strb	r3, [r7, #12]
  
  lsb_byte = *pArray;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	737b      	strb	r3, [r7, #13]
  pArray++;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	607b      	str	r3, [r7, #4]
  msb_byte = *pArray;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	733b      	strb	r3, [r7, #12]
  u16Word = (msb_byte<<8);
 800d9e8:	7b3b      	ldrb	r3, [r7, #12]
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	021b      	lsls	r3, r3, #8
 800d9ee:	81fb      	strh	r3, [r7, #14]
  u16Word &= 0xFF00;
 800d9f0:	89fb      	ldrh	r3, [r7, #14]
 800d9f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d9f6:	81fb      	strh	r3, [r7, #14]
  u16Word |= lsb_byte;
 800d9f8:	7b7b      	ldrb	r3, [r7, #13]
 800d9fa:	b29a      	uxth	r2, r3
 800d9fc:	89fb      	ldrh	r3, [r7, #14]
 800d9fe:	4313      	orrs	r3, r2
 800da00:	81fb      	strh	r3, [r7, #14]

  return u16Word;
 800da02:	89fb      	ldrh	r3, [r7, #14]
}
 800da04:	4618      	mov	r0, r3
 800da06:	3714      	adds	r7, #20
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <NvmStatePowerFlag_Set>:
* @brief  Update parameters for ModelSaveProcess to save model states
* @param  NVM flag for model
* @retval None
*/
void NvmStatePowerFlag_Set(MOBLEUINT8 nvmModelFlag, MOBLEUINT8 elementIndex)
{
 800da10:	b480      	push	{r7}
 800da12:	b083      	sub	sp, #12
 800da14:	af00      	add	r7, sp, #0
 800da16:	4603      	mov	r3, r0
 800da18:	460a      	mov	r2, r1
 800da1a:	71fb      	strb	r3, [r7, #7]
 800da1c:	4613      	mov	r3, r2
 800da1e:	71bb      	strb	r3, [r7, #6]
#ifdef SAVE_MODEL_STATE_FOR_ALL_MESSAGES
  PowerOnOff_flag = FLAG_SET;
  RestoreFlag[elementIndex] = nvmModelFlag;
#endif
}
 800da20:	bf00      	nop
 800da22:	370c      	adds	r7, #12
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr

0800da2c <Binding_GenericOnOff_LightLcLightOnOff>:
MOBLE_RESULT Binding_GenericOnOff_LightLcLightOnOff(MOBLEUINT8 genericElementIndex, 
                                                    MOBLEUINT8 genericOnOff,
                                                    MOBLEUINT8 optionalParams,
                                                    MOBLEUINT32 delayMs,
                                                      MOBLEUINT8 transitionParam)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af02      	add	r7, sp, #8
 800da32:	603b      	str	r3, [r7, #0]
 800da34:	4603      	mov	r3, r0
 800da36:	71fb      	strb	r3, [r7, #7]
 800da38:	460b      	mov	r3, r1
 800da3a:	71bb      	strb	r3, [r7, #6]
 800da3c:	4613      	mov	r3, r2
 800da3e:	717b      	strb	r3, [r7, #5]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800da40:	2300      	movs	r3, #0
 800da42:	73fb      	strb	r3, [r7, #15]
  
  /* optional params to be inserted */
  Light_LC_LcOnOffUpdate(genericElementIndex, genericOnOff, 0, 0, 0, 0);
 800da44:	79b9      	ldrb	r1, [r7, #6]
 800da46:	79f8      	ldrb	r0, [r7, #7]
 800da48:	2300      	movs	r3, #0
 800da4a:	9301      	str	r3, [sp, #4]
 800da4c:	2300      	movs	r3, #0
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	2300      	movs	r3, #0
 800da52:	2200      	movs	r2, #0
 800da54:	f005 fdde 	bl	8013614 <Light_LC_LcOnOffUpdate>
  
  return result;
 800da58:	7bfb      	ldrb	r3, [r7, #15]
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3710      	adds	r7, #16
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}

0800da62 <BindingDisable_LcLinearOut_LightLightnessLinear>:
  *         Extract target LC Server element index
  * @param  element index of Light Lightness Server
  * @retval None
  */
void BindingDisable_LcLinearOut_LightLightnessLinear(MOBLEUINT8 lightnessLinearElementIndex)
{
 800da62:	b580      	push	{r7, lr}
 800da64:	b082      	sub	sp, #8
 800da66:	af00      	add	r7, sp, #0
 800da68:	4603      	mov	r3, r0
 800da6a:	71fb      	strb	r3, [r7, #7]
  if(lightnessLinearElementIndex == LIGHT_LIGHTNESS_SERVER_MAIN_ELEMENT_INDEX)
 800da6c:	79fb      	ldrb	r3, [r7, #7]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d103      	bne.n	800da7a <BindingDisable_LcLinearOut_LightLightnessLinear+0x18>
  {
    Light_LC_LigtnessLinearUnsolicitedChange(lightnessLinearElementIndex);
 800da72:	79fb      	ldrb	r3, [r7, #7]
 800da74:	4618      	mov	r0, r3
 800da76:	f005 fdc2 	bl	80135fe <Light_LC_LigtnessLinearUnsolicitedChange>
  }
}
 800da7a:	bf00      	nop
 800da7c:	3708      	adds	r7, #8
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <ApplicationGetConfigServerDeviceKey>:


WEAK_FUNCTION ( MOBLE_RESULT ApplicationGetConfigServerDeviceKey(MOBLE_ADDRESS src, 
                                                 const MOBLEUINT8 **ppkeyTbUse))
{
 800da82:	b480      	push	{r7}
 800da84:	b083      	sub	sp, #12
 800da86:	af00      	add	r7, sp, #0
 800da88:	4603      	mov	r3, r0
 800da8a:	6039      	str	r1, [r7, #0]
 800da8c:	80fb      	strh	r3, [r7, #6]
  return MOBLE_RESULT_SUCCESS;
 800da8e:	2300      	movs	r3, #0
}
 800da90:	4618      	mov	r0, r3
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <Wait_RandomTime>:
* @brief  Function used to calculate the delay with random time..
* @param  MOBLEUINT16
* @retval MOBLEUINT8
*/
MOBLEBOOL Wait_RandomTime(void)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b082      	sub	sp, #8
 800daa0:	af00      	add	r7, sp, #0
   static MOBLEUINT8 Clockflag = 0;
   static MOBLEUINT32 wait_Time;
   static MOBLEUINT32 check_Time;
   MOBLEUINT8 random_time[8];
 
   if(Clockflag == 0)
 800daa2:	4b1c      	ldr	r3, [pc, #112]	; (800db14 <Wait_RandomTime+0x78>)
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d120      	bne.n	800daec <Wait_RandomTime+0x50>
   {   
    hci_le_rand(random_time);
 800daaa:	463b      	mov	r3, r7
 800daac:	4618      	mov	r0, r3
 800daae:	f007 ff1f 	bl	80158f0 <hci_le_rand>
    check_Time = Clock_Time();
 800dab2:	f7fa f9e3 	bl	8007e7c <HAL_GetTick>
 800dab6:	4603      	mov	r3, r0
 800dab8:	4a17      	ldr	r2, [pc, #92]	; (800db18 <Wait_RandomTime+0x7c>)
 800daba:	6013      	str	r3, [r2, #0]
    wait_Time = DEFAULT_RANDOM_DELAY_VALUE + 
                                     (random_time[0] + random_time[1]*256)\
 800dabc:	783b      	ldrb	r3, [r7, #0]
 800dabe:	461a      	mov	r2, r3
 800dac0:	787b      	ldrb	r3, [r7, #1]
 800dac2:	021b      	lsls	r3, r3, #8
 800dac4:	441a      	add	r2, r3
                                         %DEFAULT_RANDOM_DELAY_VALUE; 
 800dac6:	4b15      	ldr	r3, [pc, #84]	; (800db1c <Wait_RandomTime+0x80>)
 800dac8:	fb83 1302 	smull	r1, r3, r3, r2
 800dacc:	1159      	asrs	r1, r3, #5
 800dace:	17d3      	asrs	r3, r2, #31
 800dad0:	1acb      	subs	r3, r1, r3
 800dad2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800dad6:	fb01 f303 	mul.w	r3, r1, r3
 800dada:	1ad3      	subs	r3, r2, r3
    wait_Time = DEFAULT_RANDOM_DELAY_VALUE + 
 800dadc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800dae0:	461a      	mov	r2, r3
 800dae2:	4b0f      	ldr	r3, [pc, #60]	; (800db20 <Wait_RandomTime+0x84>)
 800dae4:	601a      	str	r2, [r3, #0]
                                        
     Clockflag = 1;
 800dae6:	4b0b      	ldr	r3, [pc, #44]	; (800db14 <Wait_RandomTime+0x78>)
 800dae8:	2201      	movs	r2, #1
 800daea:	701a      	strb	r2, [r3, #0]
   } 
/* The function will called until the testcount will not become zero */     

     if((Clock_Time() - check_Time) >=  wait_Time)
 800daec:	f7fa f9c6 	bl	8007e7c <HAL_GetTick>
 800daf0:	4602      	mov	r2, r0
 800daf2:	4b09      	ldr	r3, [pc, #36]	; (800db18 <Wait_RandomTime+0x7c>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	1ad2      	subs	r2, r2, r3
 800daf8:	4b09      	ldr	r3, [pc, #36]	; (800db20 <Wait_RandomTime+0x84>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d304      	bcc.n	800db0a <Wait_RandomTime+0x6e>
     {
        Clockflag = 0;
 800db00:	4b04      	ldr	r3, [pc, #16]	; (800db14 <Wait_RandomTime+0x78>)
 800db02:	2200      	movs	r2, #0
 800db04:	701a      	strb	r2, [r3, #0]
        return MOBLE_TRUE;
 800db06:	2301      	movs	r3, #1
 800db08:	e000      	b.n	800db0c <Wait_RandomTime+0x70>

       }
   return MOBLE_FALSE;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3708      	adds	r7, #8
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	2000455c 	.word	0x2000455c
 800db18:	20004560 	.word	0x20004560
 800db1c:	1b4e81b5 	.word	0x1b4e81b5
 800db20:	20004564 	.word	0x20004564

0800db24 <Generic_OnOff_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_OnOff_Set(MOBLEUINT8 const *pOnOff_param, 
                               MOBLEUINT32 length,
                               MODEL_MessageHeader_t *pmsgParam)  
{
 800db24:	b5b0      	push	{r4, r5, r7, lr}
 800db26:	b088      	sub	sp, #32
 800db28:	af02      	add	r7, sp, #8
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	607a      	str	r2, [r7, #4]
  TID :  1B Transaction Identifier
  Transition Time: 1B Format as defined in Section 3.1.3. (Optional)
  Delay: 1B Message execution delay in 5 millisecond steps (C.1)
  */
  
  TRACE_M(TF_GENERIC_M, "Generic_OnOff_Set callback received \r\n");  
 800db30:	2100      	movs	r1, #0
 800db32:	486a      	ldr	r0, [pc, #424]	; (800dcdc <Generic_OnOff_Set+0x1b8>)
 800db34:	f7ff fd28 	bl	800d588 <TraceHeader>
 800db38:	4869      	ldr	r0, [pc, #420]	; (800dce0 <Generic_OnOff_Set+0x1bc>)
 800db3a:	f01b fe93 	bl	8029864 <puts>
  
  Generic_OnOffParam_t Generic_OnOffParam; 
  Generic_OnOffParam.TargetOnOffState = pOnOff_param[0];
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	753b      	strb	r3, [r7, #20]
  Generic_OnOffParam.Generic_TID = pOnOff_param[1];
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	785b      	ldrb	r3, [r3, #1]
 800db48:	757b      	strb	r3, [r7, #21]
  Generic_OnOffParam.Transition_Time = 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	75bb      	strb	r3, [r7, #22]
  Generic_OnOffParam.Delay_Time = 0;
 800db4e:	2300      	movs	r3, #0
 800db50:	75fb      	strb	r3, [r7, #23]
  Checking for optional parameters
  length > 2 , 4 values  received(OnOff status, TID, Trasmisition time(optional),
  Delay(optional)),length < 2 OnOff status and TID   
  */
  
  if((length > 2) && (pOnOff_param[2] !=0))
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	2b02      	cmp	r3, #2
 800db56:	d96d      	bls.n	800dc34 <Generic_OnOff_Set+0x110>
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	3302      	adds	r3, #2
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d068      	beq.n	800dc34 <Generic_OnOff_Set+0x110>
  {
    /* Transition_Time & Delay_Time Present */
    Generic_OnOffParam.Transition_Time = pOnOff_param[2];
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	789b      	ldrb	r3, [r3, #2]
 800db66:	75bb      	strb	r3, [r7, #22]
    Generic_OnOffParam.Delay_Time = pOnOff_param[3];
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	78db      	ldrb	r3, [r3, #3]
 800db6c:	75fb      	strb	r3, [r7, #23]
      
    /* 3.1.1.1 Binary state transitions: Because binary states cannot support transitions, 
       when changing to 0x01 (On), the Generic OnOff state shall change immediately 
       when the transition starts, and when changing to 0x00, the state shall
       change when the transition finishes.*/
    if(pOnOff_param[0] == 1)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	2b01      	cmp	r3, #1
 800db74:	d10c      	bne.n	800db90 <Generic_OnOff_Set+0x6c>
    {
      Generic_OnOffStatus[pmsgParam->elementIndex].Present_OnOff_State = pOnOff_param[0];
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	4619      	mov	r1, r3
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	7818      	ldrb	r0, [r3, #0]
 800db80:	4a58      	ldr	r2, [pc, #352]	; (800dce4 <Generic_OnOff_Set+0x1c0>)
 800db82:	460b      	mov	r3, r1
 800db84:	005b      	lsls	r3, r3, #1
 800db86:	440b      	add	r3, r1
 800db88:	005b      	lsls	r3, r3, #1
 800db8a:	4413      	add	r3, r2
 800db8c:	4602      	mov	r2, r0
 800db8e:	701a      	strb	r2, [r3, #0]
    }
    Generic_OnOffStatus[pmsgParam->elementIndex].Target_OnOff = Generic_OnOffParam.TargetOnOffState;
 800db90:	7d3a      	ldrb	r2, [r7, #20]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	4619      	mov	r1, r3
 800db98:	b290      	uxth	r0, r2
 800db9a:	4a52      	ldr	r2, [pc, #328]	; (800dce4 <Generic_OnOff_Set+0x1c0>)
 800db9c:	460b      	mov	r3, r1
 800db9e:	005b      	lsls	r3, r3, #1
 800dba0:	440b      	add	r3, r1
 800dba2:	005b      	lsls	r3, r3, #1
 800dba4:	4413      	add	r3, r2
 800dba6:	4602      	mov	r2, r0
 800dba8:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_OnOffStatus[pmsgParam->elementIndex].RemainingTime = Generic_OnOffParam.Transition_Time;   
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	7db8      	ldrb	r0, [r7, #22]
 800dbb4:	4a4b      	ldr	r2, [pc, #300]	; (800dce4 <Generic_OnOff_Set+0x1c0>)
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	005b      	lsls	r3, r3, #1
 800dbba:	440b      	add	r3, r1
 800dbbc:	005b      	lsls	r3, r3, #1
 800dbbe:	4413      	add	r3, r2
 800dbc0:	3305      	adds	r3, #5
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	701a      	strb	r2, [r3, #0]
    
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Generic_OnOffStatus[pmsgParam->elementIndex].RemainingTime;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	4618      	mov	r0, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	4a44      	ldr	r2, [pc, #272]	; (800dce4 <Generic_OnOff_Set+0x1c0>)
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	005b      	lsls	r3, r3, #1
 800dbd8:	4403      	add	r3, r0
 800dbda:	005b      	lsls	r3, r3, #1
 800dbdc:	4413      	add	r3, r2
 800dbde:	3305      	adds	r3, #5
 800dbe0:	7818      	ldrb	r0, [r3, #0]
 800dbe2:	4a41      	ldr	r2, [pc, #260]	; (800dce8 <Generic_OnOff_Set+0x1c4>)
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	009b      	lsls	r3, r3, #2
 800dbe8:	440b      	add	r3, r1
 800dbea:	4413      	add	r3, r2
 800dbec:	4602      	mov	r2, r0
 800dbee:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
      step size for transition state machine
    */
    Generic_GetStepValue(pOnOff_param[2], pmsgParam->elementIndex);   
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	3302      	adds	r3, #2
 800dbf4:	781a      	ldrb	r2, [r3, #0]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	4610      	mov	r0, r2
 800dbfe:	f001 f9d1 	bl	800efa4 <Generic_GetStepValue>
    /*option parameter flag, enable to send optional parameters in status.*/         
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	4619      	mov	r1, r3
 800dc08:	4a38      	ldr	r2, [pc, #224]	; (800dcec <Generic_OnOff_Set+0x1c8>)
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	005b      	lsls	r3, r3, #1
 800dc0e:	440b      	add	r3, r1
 800dc10:	4413      	add	r3, r2
 800dc12:	3301      	adds	r3, #1
 800dc14:	2201      	movs	r2, #1
 800dc16:	701a      	strb	r2, [r3, #0]
    /*Flag to enable the on Off transition state machine */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_ON_OFF_TRANSITION_START;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	4a33      	ldr	r2, [pc, #204]	; (800dcec <Generic_OnOff_Set+0x1c8>)
 800dc20:	460b      	mov	r3, r1
 800dc22:	005b      	lsls	r3, r3, #1
 800dc24:	440b      	add	r3, r1
 800dc26:	4413      	add	r3, r2
 800dc28:	2201      	movs	r2, #1
 800dc2a:	701a      	strb	r2, [r3, #0]
    /* flag is used for the application to get the information about the transition 
       time parameter is included or not in the received message.
    */
    OptionalParam = IN_TRANSITION;
 800dc2c:	4b30      	ldr	r3, [pc, #192]	; (800dcf0 <Generic_OnOff_Set+0x1cc>)
 800dc2e:	2202      	movs	r2, #2
 800dc30:	701a      	strb	r2, [r3, #0]
 800dc32:	e013      	b.n	800dc5c <Generic_OnOff_Set+0x138>
/* EME END: management of Present_OnOff_Value and Target_OnOff on immediate transition */
#else
    /* When no optional parameter received, target value will be set as present
       value in application.
    */  
    OptionalParam = NO_TRANSITION;
 800dc34:	4b2e      	ldr	r3, [pc, #184]	; (800dcf0 <Generic_OnOff_Set+0x1cc>)
 800dc36:	2201      	movs	r2, #1
 800dc38:	701a      	strb	r2, [r3, #0]
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f001 fcc8 	bl	800f5d4 <Generic_TransitionParameterReset>
#endif       
    
    Generic_OnOffStatus[pmsgParam->elementIndex].Present_OnOff_State = Generic_OnOffParam.TargetOnOffState;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	4619      	mov	r1, r3
 800dc4a:	7d38      	ldrb	r0, [r7, #20]
 800dc4c:	4a25      	ldr	r2, [pc, #148]	; (800dce4 <Generic_OnOff_Set+0x1c0>)
 800dc4e:	460b      	mov	r3, r1
 800dc50:	005b      	lsls	r3, r3, #1
 800dc52:	440b      	add	r3, r1
 800dc54:	005b      	lsls	r3, r3, #1
 800dc56:	4413      	add	r3, r2
 800dc58:	4602      	mov	r2, r0
 800dc5a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Application Callback */
  (GenericAppli_cb.OnOff_Set_cb)(&Generic_OnOffStatus[pmsgParam->elementIndex], OptionalParam, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800dc5c:	4b25      	ldr	r3, [pc, #148]	; (800dcf4 <Generic_OnOff_Set+0x1d0>)
 800dc5e:	681c      	ldr	r4, [r3, #0]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	461a      	mov	r2, r3
 800dc66:	4613      	mov	r3, r2
 800dc68:	005b      	lsls	r3, r3, #1
 800dc6a:	4413      	add	r3, r2
 800dc6c:	005b      	lsls	r3, r3, #1
 800dc6e:	4a1d      	ldr	r2, [pc, #116]	; (800dce4 <Generic_OnOff_Set+0x1c0>)
 800dc70:	1898      	adds	r0, r3, r2
 800dc72:	4b1f      	ldr	r3, [pc, #124]	; (800dcf0 <Generic_OnOff_Set+0x1cc>)
 800dc74:	7819      	ldrb	r1, [r3, #0]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	88da      	ldrh	r2, [r3, #6]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	47a0      	blx	r4
#ifdef ENABLE_MODEL_BINDING    

#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS  
  /* Binding of data b/w Generic on off and Light lightness Actual model */
  GenericOnOff_LightActualBinding(&Generic_OnOffStatus[pmsgParam->elementIndex],pmsgParam->elementIndex,
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	461a      	mov	r2, r3
 800dc86:	4613      	mov	r3, r2
 800dc88:	005b      	lsls	r3, r3, #1
 800dc8a:	4413      	add	r3, r2
 800dc8c:	005b      	lsls	r3, r3, #1
 800dc8e:	4a15      	ldr	r2, [pc, #84]	; (800dce4 <Generic_OnOff_Set+0x1c0>)
 800dc90:	1898      	adds	r0, r3, r2
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	7819      	ldrb	r1, [r3, #0]
           Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	461c      	mov	r4, r3
  GenericOnOff_LightActualBinding(&Generic_OnOffStatus[pmsgParam->elementIndex],pmsgParam->elementIndex,
 800dc9c:	4a13      	ldr	r2, [pc, #76]	; (800dcec <Generic_OnOff_Set+0x1c8>)
 800dc9e:	4623      	mov	r3, r4
 800dca0:	005b      	lsls	r3, r3, #1
 800dca2:	4423      	add	r3, r4
 800dca4:	4413      	add	r3, r2
 800dca6:	781a      	ldrb	r2, [r3, #0]
           Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	461d      	mov	r5, r3
  GenericOnOff_LightActualBinding(&Generic_OnOffStatus[pmsgParam->elementIndex],pmsgParam->elementIndex,
 800dcae:	4c0f      	ldr	r4, [pc, #60]	; (800dcec <Generic_OnOff_Set+0x1c8>)
 800dcb0:	462b      	mov	r3, r5
 800dcb2:	005b      	lsls	r3, r3, #1
 800dcb4:	442b      	add	r3, r5
 800dcb6:	4423      	add	r3, r4
 800dcb8:	3302      	adds	r3, #2
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	f003 fbb4 	bl	8011428 <GenericOnOff_LightActualBinding>
#endif

  /* For corresponding element which supports Light LC Server */
  Binding_GenericOnOff_LightLcLightOnOff(pmsgParam->elementIndex,
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	7818      	ldrb	r0, [r3, #0]
 800dcc4:	7d39      	ldrb	r1, [r7, #20]
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	2300      	movs	r3, #0
 800dccc:	2200      	movs	r2, #0
 800dcce:	f7ff fead 	bl	800da2c <Binding_GenericOnOff_LightLcLightOnOff>
                                         Generic_OnOffParam.TargetOnOffState,
                                          0, 0, 0);
  
#endif
  
  return MOBLE_RESULT_SUCCESS;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3718      	adds	r7, #24
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bdb0      	pop	{r4, r5, r7, pc}
 800dcdc:	0803301c 	.word	0x0803301c
 800dce0:	0802ef54 	.word	0x0802ef54
 800dce4:	20004588 	.word	0x20004588
 800dce8:	20004568 	.word	0x20004568
 800dcec:	20004590 	.word	0x20004590
 800dcf0:	20004594 	.word	0x20004594
 800dcf4:	08032d00 	.word	0x08032d00

0800dcf8 <Generic_OnOff_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_OnOff_Status(MOBLEUINT8* pOnOff_status, 
                                  MOBLEUINT32 *plength,
                                  MODEL_MessageHeader_t *pmsgParam) 
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
  Present OnOff The present value of the Generic OnOff state. 
  Target OnOff The target value of the Generic OnOff state (optional).
  Remaining Time is transition time. 
  */
  
  TRACE_M(TF_GENERIC_M, ">>>\r\n");
 800dd04:	2100      	movs	r1, #0
 800dd06:	483f      	ldr	r0, [pc, #252]	; (800de04 <Generic_OnOff_Status+0x10c>)
 800dd08:	f7ff fc3e 	bl	800d588 <TraceHeader>
 800dd0c:	483e      	ldr	r0, [pc, #248]	; (800de08 <Generic_OnOff_Status+0x110>)
 800dd0e:	f01b fda9 	bl	8029864 <puts>
  TRACE_M(TF_SERIAL_CTRL,"#8201! \n\r");
 800dd12:	2100      	movs	r1, #0
 800dd14:	483b      	ldr	r0, [pc, #236]	; (800de04 <Generic_OnOff_Status+0x10c>)
 800dd16:	f7ff fc37 	bl	800d588 <TraceHeader>
 800dd1a:	483c      	ldr	r0, [pc, #240]	; (800de0c <Generic_OnOff_Status+0x114>)
 800dd1c:	f01b fd1c 	bl	8029758 <iprintf>
  /* 
  Default value of GenericOptionalParam=0, 
  GenericOptionalParam set equal to 1 in Generic_OnOff_Set for Generic_OnOff_Status 
  */
  if((Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam == 1) || (Generic_TimeParam[pmsgParam->elementIndex].StepValue != 0))
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	4619      	mov	r1, r3
 800dd26:	4a3a      	ldr	r2, [pc, #232]	; (800de10 <Generic_OnOff_Status+0x118>)
 800dd28:	460b      	mov	r3, r1
 800dd2a:	005b      	lsls	r3, r3, #1
 800dd2c:	440b      	add	r3, r1
 800dd2e:	4413      	add	r3, r2
 800dd30:	3301      	adds	r3, #1
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d00c      	beq.n	800dd52 <Generic_OnOff_Status+0x5a>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	4619      	mov	r1, r3
 800dd3e:	4a35      	ldr	r2, [pc, #212]	; (800de14 <Generic_OnOff_Status+0x11c>)
 800dd40:	460b      	mov	r3, r1
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	440b      	add	r3, r1
 800dd46:	005b      	lsls	r3, r3, #1
 800dd48:	4413      	add	r3, r2
 800dd4a:	f993 3000 	ldrsb.w	r3, [r3]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d033      	beq.n	800ddba <Generic_OnOff_Status+0xc2>
  {   
    /*  
    When optional parameter received present value,targert value, remaining time be sent in status message
    length of received data is equal to 4B
    */
    TRACE_M(TF_GENERIC_M, "Generic_OnOff_Status sent with Transition \r\n"); 
 800dd52:	2100      	movs	r1, #0
 800dd54:	482b      	ldr	r0, [pc, #172]	; (800de04 <Generic_OnOff_Status+0x10c>)
 800dd56:	f7ff fc17 	bl	800d588 <TraceHeader>
 800dd5a:	482f      	ldr	r0, [pc, #188]	; (800de18 <Generic_OnOff_Status+0x120>)
 800dd5c:	f01b fd82 	bl	8029864 <puts>

    *(pOnOff_status+1) = Generic_OnOffStatus[pmsgParam->elementIndex].Target_OnOff;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	4619      	mov	r1, r3
 800dd66:	4a2d      	ldr	r2, [pc, #180]	; (800de1c <Generic_OnOff_Status+0x124>)
 800dd68:	460b      	mov	r3, r1
 800dd6a:	005b      	lsls	r3, r3, #1
 800dd6c:	440b      	add	r3, r1
 800dd6e:	005b      	lsls	r3, r3, #1
 800dd70:	4413      	add	r3, r2
 800dd72:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	b2d2      	uxtb	r2, r2
 800dd7e:	701a      	strb	r2, [r3, #0]
    *(pOnOff_status+2) = Generic_OnOffStatus[pmsgParam->elementIndex].RemainingTime;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	4618      	mov	r0, r3
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	1c9a      	adds	r2, r3, #2
 800dd8a:	4924      	ldr	r1, [pc, #144]	; (800de1c <Generic_OnOff_Status+0x124>)
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	005b      	lsls	r3, r3, #1
 800dd90:	4403      	add	r3, r0
 800dd92:	005b      	lsls	r3, r3, #1
 800dd94:	440b      	add	r3, r1
 800dd96:	3305      	adds	r3, #5
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	7013      	strb	r3, [r2, #0]
       *plength = 3; 
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	2203      	movs	r2, #3
 800dda0:	601a      	str	r2, [r3, #0]
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 0;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	4619      	mov	r1, r3
 800dda8:	4a19      	ldr	r2, [pc, #100]	; (800de10 <Generic_OnOff_Status+0x118>)
 800ddaa:	460b      	mov	r3, r1
 800ddac:	005b      	lsls	r3, r3, #1
 800ddae:	440b      	add	r3, r1
 800ddb0:	4413      	add	r3, r2
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	701a      	strb	r2, [r3, #0]
 800ddb8:	e013      	b.n	800dde2 <Generic_OnOff_Status+0xea>
  else
  { /* When no optional parameter received, target value will
       be sent in status message.
       length of received data is equal to 2B
    */
    TRACE_M(TF_GENERIC_M, "Generic_OnOff_Status sent without Transition \r\n"); 
 800ddba:	2100      	movs	r1, #0
 800ddbc:	4811      	ldr	r0, [pc, #68]	; (800de04 <Generic_OnOff_Status+0x10c>)
 800ddbe:	f7ff fbe3 	bl	800d588 <TraceHeader>
 800ddc2:	4817      	ldr	r0, [pc, #92]	; (800de20 <Generic_OnOff_Status+0x128>)
 800ddc4:	f01b fd4e 	bl	8029864 <puts>
    TRACE_M(TF_GENERIC_M, "%d \r\n",*pOnOff_status);
 800ddc8:	2100      	movs	r1, #0
 800ddca:	480e      	ldr	r0, [pc, #56]	; (800de04 <Generic_OnOff_Status+0x10c>)
 800ddcc:	f7ff fbdc 	bl	800d588 <TraceHeader>
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	4813      	ldr	r0, [pc, #76]	; (800de24 <Generic_OnOff_Status+0x12c>)
 800ddd8:	f01b fcbe 	bl	8029758 <iprintf>
    *plength = 1;
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	2201      	movs	r2, #1
 800dde0:	601a      	str	r2, [r3, #0]
  }
  *pOnOff_status = Generic_OnOffStatus[pmsgParam->elementIndex].Present_OnOff_State; 
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	4619      	mov	r1, r3
 800dde8:	4a0c      	ldr	r2, [pc, #48]	; (800de1c <Generic_OnOff_Status+0x124>)
 800ddea:	460b      	mov	r3, r1
 800ddec:	005b      	lsls	r3, r3, #1
 800ddee:	440b      	add	r3, r1
 800ddf0:	005b      	lsls	r3, r3, #1
 800ddf2:	4413      	add	r3, r2
 800ddf4:	781a      	ldrb	r2, [r3, #0]
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS;
 800ddfa:	2300      	movs	r3, #0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}
 800de04:	08033030 	.word	0x08033030
 800de08:	0802ef7c 	.word	0x0802ef7c
 800de0c:	0802ef84 	.word	0x0802ef84
 800de10:	20004590 	.word	0x20004590
 800de14:	20004570 	.word	0x20004570
 800de18:	0802ef90 	.word	0x0802ef90
 800de1c:	20004588 	.word	0x20004588
 800de20:	0802efbc 	.word	0x0802efbc
 800de24:	0802efec 	.word	0x0802efec

0800de28 <Generic_Level_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Level_Set(const MOBLEUINT8* plevel_param, 
                               MOBLEUINT32 length,
                               MODEL_MessageHeader_t *pmsgParam) 
{
 800de28:	b5b0      	push	{r4, r5, r7, lr}
 800de2a:	b088      	sub	sp, #32
 800de2c:	af02      	add	r7, sp, #8
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	607a      	str	r2, [r7, #4]
  TID :  1B Transaction Identifier
  Transition Time: 1B Format as defined in Section 3.1.3. (Optional)
  Delay:1B Message execution delay in 5 milliseconds steps (C.1)
  */
  
  TRACE_M(TF_GENERIC_M, "Generic_Level_Set callback received \r\n");
 800de34:	2100      	movs	r1, #0
 800de36:	4877      	ldr	r0, [pc, #476]	; (800e014 <Generic_Level_Set+0x1ec>)
 800de38:	f7ff fba6 	bl	800d588 <TraceHeader>
 800de3c:	4876      	ldr	r0, [pc, #472]	; (800e018 <Generic_Level_Set+0x1f0>)
 800de3e:	f01b fd11 	bl	8029864 <puts>
  
  Generic_LevelParam_t Generic_LevelParam;
  MOBLEINT16 setValue;
  
  Generic_LevelParam.TargetLevel = CopyU8LittleEndienArrayToU16word((MOBLEUINT8*)plevel_param);
 800de42:	68f8      	ldr	r0, [r7, #12]
 800de44:	f7ff fdbd 	bl	800d9c2 <CopyU8LittleEndienArrayToU16word>
 800de48:	4603      	mov	r3, r0
 800de4a:	b21b      	sxth	r3, r3
 800de4c:	823b      	strh	r3, [r7, #16]
  Generic_LevelParam.Generic_TID = plevel_param[2]; 
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	789b      	ldrb	r3, [r3, #2]
 800de52:	74bb      	strb	r3, [r7, #18]
  
  setValue =  Generic_LevelParam.TargetLevel;
 800de54:	8a3b      	ldrh	r3, [r7, #16]
 800de56:	82fb      	strh	r3, [r7, #22]
  /* Check for Optional Parameters. 
     length > 3  plevel_param has level,TID,Transition Time, Delay      
     length < 3  plevel_param has level,TID
  */ 
  if((length > 3) && (plevel_param[3] !=0))
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	2b03      	cmp	r3, #3
 800de5c:	d96e      	bls.n	800df3c <Generic_Level_Set+0x114>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	3303      	adds	r3, #3
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d069      	beq.n	800df3c <Generic_Level_Set+0x114>
  {
     Generic_LevelParam.Transition_Time = plevel_param[3];
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	78db      	ldrb	r3, [r3, #3]
 800de6c:	74fb      	strb	r3, [r7, #19]
     Generic_LevelParam.Delay_Time = plevel_param[4];
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	791b      	ldrb	r3, [r3, #4]
 800de72:	753b      	strb	r3, [r7, #20]
     /* Copy the data into status message which needs to be update in 
       application message.
     */
    Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = setValue;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	4619      	mov	r1, r3
 800de7a:	4a68      	ldr	r2, [pc, #416]	; (800e01c <Generic_Level_Set+0x1f4>)
 800de7c:	460b      	mov	r3, r1
 800de7e:	005b      	lsls	r3, r3, #1
 800de80:	440b      	add	r3, r1
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	4413      	add	r3, r2
 800de86:	3302      	adds	r3, #2
 800de88:	8afa      	ldrh	r2, [r7, #22]
 800de8a:	801a      	strh	r2, [r3, #0]
    Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime = Generic_LevelParam.Transition_Time;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	4619      	mov	r1, r3
 800de92:	7cf8      	ldrb	r0, [r7, #19]
 800de94:	4a61      	ldr	r2, [pc, #388]	; (800e01c <Generic_Level_Set+0x1f4>)
 800de96:	460b      	mov	r3, r1
 800de98:	005b      	lsls	r3, r3, #1
 800de9a:	440b      	add	r3, r1
 800de9c:	009b      	lsls	r3, r3, #2
 800de9e:	4413      	add	r3, r2
 800dea0:	3304      	adds	r3, #4
 800dea2:	4602      	mov	r2, r0
 800dea4:	701a      	strb	r2, [r3, #0]
    /* copy status parameters in Temporary parameters for transition 
       process.
    */
    Generic_TemporaryStatus[pmsgParam->elementIndex].TargetValue16 = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	4618      	mov	r0, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	4619      	mov	r1, r3
 800deb2:	4a5a      	ldr	r2, [pc, #360]	; (800e01c <Generic_Level_Set+0x1f4>)
 800deb4:	4603      	mov	r3, r0
 800deb6:	005b      	lsls	r3, r3, #1
 800deb8:	4403      	add	r3, r0
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	4413      	add	r3, r2
 800debe:	3302      	adds	r3, #2
 800dec0:	f9b3 0000 	ldrsh.w	r0, [r3]
 800dec4:	4a56      	ldr	r2, [pc, #344]	; (800e020 <Generic_Level_Set+0x1f8>)
 800dec6:	460b      	mov	r3, r1
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	440b      	add	r3, r1
 800decc:	4413      	add	r3, r2
 800dece:	4602      	mov	r2, r0
 800ded0:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	4618      	mov	r0, r3
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	4619      	mov	r1, r3
 800dee0:	4a4e      	ldr	r2, [pc, #312]	; (800e01c <Generic_Level_Set+0x1f4>)
 800dee2:	4603      	mov	r3, r0
 800dee4:	005b      	lsls	r3, r3, #1
 800dee6:	4403      	add	r3, r0
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	4413      	add	r3, r2
 800deec:	3304      	adds	r3, #4
 800deee:	7818      	ldrb	r0, [r3, #0]
 800def0:	4a4b      	ldr	r2, [pc, #300]	; (800e020 <Generic_Level_Set+0x1f8>)
 800def2:	460b      	mov	r3, r1
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	440b      	add	r3, r1
 800def8:	4413      	add	r3, r2
 800defa:	4602      	mov	r2, r0
 800defc:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
      step size for transition state machine
    */
    Generic_GetStepValue(plevel_param[3], pmsgParam->elementIndex); 
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	3303      	adds	r3, #3
 800df02:	781a      	ldrb	r2, [r3, #0]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	4619      	mov	r1, r3
 800df0a:	4610      	mov	r0, r2
 800df0c:	f001 f84a 	bl	800efa4 <Generic_GetStepValue>
    /*option parameter flag, enable to sent all required parameter in status.*/
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	4619      	mov	r1, r3
 800df16:	4a43      	ldr	r2, [pc, #268]	; (800e024 <Generic_Level_Set+0x1fc>)
 800df18:	460b      	mov	r3, r1
 800df1a:	005b      	lsls	r3, r3, #1
 800df1c:	440b      	add	r3, r1
 800df1e:	4413      	add	r3, r2
 800df20:	3301      	adds	r3, #1
 800df22:	2201      	movs	r2, #1
 800df24:	701a      	strb	r2, [r3, #0]
    /*transition process enable flag. */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_LEVEL_TRANSITION_START;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	4619      	mov	r1, r3
 800df2c:	4a3d      	ldr	r2, [pc, #244]	; (800e024 <Generic_Level_Set+0x1fc>)
 800df2e:	460b      	mov	r3, r1
 800df30:	005b      	lsls	r3, r3, #1
 800df32:	440b      	add	r3, r1
 800df34:	4413      	add	r3, r2
 800df36:	2202      	movs	r2, #2
 800df38:	701a      	strb	r2, [r3, #0]
 800df3a:	e01a      	b.n	800df72 <Generic_Level_Set+0x14a>

#else
     /* When no optional parameter received, target value will
         be set as present value in application.
     */
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	4618      	mov	r0, r3
 800df42:	f001 fb47 	bl	800f5d4 <Generic_TransitionParameterReset>
    Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16= setValue;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	4619      	mov	r1, r3
 800df4c:	4a33      	ldr	r2, [pc, #204]	; (800e01c <Generic_Level_Set+0x1f4>)
 800df4e:	460b      	mov	r3, r1
 800df50:	005b      	lsls	r3, r3, #1
 800df52:	440b      	add	r3, r1
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	4413      	add	r3, r2
 800df58:	8afa      	ldrh	r2, [r7, #22]
 800df5a:	801a      	strh	r2, [r3, #0]
    Generic_TimeParam[pmsgParam->elementIndex].StepValue = 0;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	4619      	mov	r1, r3
 800df62:	4a31      	ldr	r2, [pc, #196]	; (800e028 <Generic_Level_Set+0x200>)
 800df64:	460b      	mov	r3, r1
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	440b      	add	r3, r1
 800df6a:	005b      	lsls	r3, r3, #1
 800df6c:	4413      	add	r3, r2
 800df6e:	2200      	movs	r2, #0
 800df70:	701a      	strb	r2, [r3, #0]
#endif    
  }  
  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	4618      	mov	r0, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	4619      	mov	r1, r3
 800df7e:	4a27      	ldr	r2, [pc, #156]	; (800e01c <Generic_Level_Set+0x1f4>)
 800df80:	4603      	mov	r3, r0
 800df82:	005b      	lsls	r3, r3, #1
 800df84:	4403      	add	r3, r0
 800df86:	009b      	lsls	r3, r3, #2
 800df88:	4413      	add	r3, r2
 800df8a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800df8e:	4a23      	ldr	r2, [pc, #140]	; (800e01c <Generic_Level_Set+0x1f4>)
 800df90:	460b      	mov	r3, r1
 800df92:	005b      	lsls	r3, r3, #1
 800df94:	440b      	add	r3, r1
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	4413      	add	r3, r2
 800df9a:	3306      	adds	r3, #6
 800df9c:	4602      	mov	r2, r0
 800df9e:	801a      	strh	r2, [r3, #0]
 
  /* Application Callback */
  (GenericAppli_cb.Level_Set_cb)(&Generic_LevelStatus[pmsgParam->elementIndex], 0, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800dfa0:	4b22      	ldr	r3, [pc, #136]	; (800e02c <Generic_Level_Set+0x204>)
 800dfa2:	689c      	ldr	r4, [r3, #8]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	4613      	mov	r3, r2
 800dfac:	005b      	lsls	r3, r3, #1
 800dfae:	4413      	add	r3, r2
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	4a1a      	ldr	r2, [pc, #104]	; (800e01c <Generic_Level_Set+0x1f4>)
 800dfb4:	1898      	adds	r0, r3, r2
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	88da      	ldrh	r2, [r3, #6]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	2100      	movs	r1, #0
 800dfc0:	47a0      	blx	r4
#ifdef ENABLE_MODEL_BINDING       
  /* Binding of Generic level with light lightnes actual */
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET, pmsgParam->elementIndex,
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	4613      	mov	r3, r2
 800dfca:	005b      	lsls	r3, r3, #1
 800dfcc:	4413      	add	r3, r2
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	4a12      	ldr	r2, [pc, #72]	; (800e01c <Generic_Level_Set+0x1f4>)
 800dfd2:	1898      	adds	r0, r3, r2
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	781a      	ldrb	r2, [r3, #0]
        Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	461c      	mov	r4, r3
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET, pmsgParam->elementIndex,
 800dfde:	4911      	ldr	r1, [pc, #68]	; (800e024 <Generic_Level_Set+0x1fc>)
 800dfe0:	4623      	mov	r3, r4
 800dfe2:	005b      	lsls	r3, r3, #1
 800dfe4:	4423      	add	r3, r4
 800dfe6:	440b      	add	r3, r1
 800dfe8:	7819      	ldrb	r1, [r3, #0]
        Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	461d      	mov	r5, r3
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET, pmsgParam->elementIndex,
 800dff0:	4c0c      	ldr	r4, [pc, #48]	; (800e024 <Generic_Level_Set+0x1fc>)
 800dff2:	462b      	mov	r3, r5
 800dff4:	005b      	lsls	r3, r3, #1
 800dff6:	442b      	add	r3, r5
 800dff8:	4423      	add	r3, r4
 800dffa:	3302      	adds	r3, #2
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	9300      	str	r3, [sp, #0]
 800e000:	460b      	mov	r3, r1
 800e002:	2101      	movs	r1, #1
 800e004:	f003 fada 	bl	80115bc <GenericLevel_LightBinding>
#endif 
        
  return MOBLE_RESULT_SUCCESS;
 800e008:	2300      	movs	r3, #0
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3718      	adds	r7, #24
 800e00e:	46bd      	mov	sp, r7
 800e010:	bdb0      	pop	{r4, r5, r7, pc}
 800e012:	bf00      	nop
 800e014:	08033048 	.word	0x08033048
 800e018:	0802eff4 	.word	0x0802eff4
 800e01c:	2000457c 	.word	0x2000457c
 800e020:	20004568 	.word	0x20004568
 800e024:	20004590 	.word	0x20004590
 800e028:	20004570 	.word	0x20004570
 800e02c:	08032d00 	.word	0x08032d00

0800e030 <Generic_Delta_Set>:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & AppKey Offset
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Delta_Set(const MOBLEUINT8* plevel_param, MOBLEUINT32 length,\
                               MODEL_MessageHeader_t *pmsgParam) 
{
 800e030:	b5b0      	push	{r4, r5, r7, lr}
 800e032:	b08a      	sub	sp, #40	; 0x28
 800e034:	af02      	add	r7, sp, #8
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	607a      	str	r2, [r7, #4]
  TID:   1B Transaction Identifier
  Transition Time: 1B Format as defined in Section 3.1.3. (Optional)
  Delay: 1B Message execution delay in 5 milliseconds steps (C.1)
  */
  
  TRACE_M(TF_GENERIC_M, "Generic_Delta_Set callback received \r\n");
 800e03c:	2100      	movs	r1, #0
 800e03e:	4894      	ldr	r0, [pc, #592]	; (800e290 <Generic_Delta_Set+0x260>)
 800e040:	f7ff faa2 	bl	800d588 <TraceHeader>
 800e044:	4893      	ldr	r0, [pc, #588]	; (800e294 <Generic_Delta_Set+0x264>)
 800e046:	f01b fc0d 	bl	8029864 <puts>
  
  Generic_DeltaLevelParam_t Generic_DeltaLevelParam ;
  MOBLEUINT32 delta;
  
  /* Copy the 4Bytes data to local variable */
  delta = (plevel_param[3] << 24);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	3303      	adds	r3, #3
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	061b      	lsls	r3, r3, #24
 800e052:	61fb      	str	r3, [r7, #28]
  delta |= (plevel_param[2] << 16);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	3302      	adds	r3, #2
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	041b      	lsls	r3, r3, #16
 800e05c:	461a      	mov	r2, r3
 800e05e:	69fb      	ldr	r3, [r7, #28]
 800e060:	4313      	orrs	r3, r2
 800e062:	61fb      	str	r3, [r7, #28]
  delta |= (plevel_param[1] << 8);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	3301      	adds	r3, #1
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	021b      	lsls	r3, r3, #8
 800e06c:	461a      	mov	r2, r3
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	4313      	orrs	r3, r2
 800e072:	61fb      	str	r3, [r7, #28]
  delta |= (plevel_param[0]);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	461a      	mov	r2, r3
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	4313      	orrs	r3, r2
 800e07e:	61fb      	str	r3, [r7, #28]
  Generic_DeltaLevelParam.TargetDeltaLevel32 = delta;
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	617b      	str	r3, [r7, #20]
  
  TRACE_M(TF_GENERIC_M,"Generic delta value %.2lx \r\n",
 800e084:	2100      	movs	r1, #0
 800e086:	4882      	ldr	r0, [pc, #520]	; (800e290 <Generic_Delta_Set+0x260>)
 800e088:	f7ff fa7e 	bl	800d588 <TraceHeader>
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	4619      	mov	r1, r3
 800e090:	4881      	ldr	r0, [pc, #516]	; (800e298 <Generic_Delta_Set+0x268>)
 800e092:	f01b fb61 	bl	8029758 <iprintf>
          Generic_DeltaLevelParam.TargetDeltaLevel32);
  
  Generic_DeltaLevelParam.Generic_TID = plevel_param[4];
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	791b      	ldrb	r3, [r3, #4]
 800e09a:	763b      	strb	r3, [r7, #24]
  /* 
     Check for Optional Parameters 
     length > 5  Delata level,TID, Trasition Time(optional),Delay(optional)
     length < 5  Delta level,TID
  */    
  if((length > 5) && (plevel_param[5] !=0))
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	2b05      	cmp	r3, #5
 800e0a0:	d97f      	bls.n	800e1a2 <Generic_Delta_Set+0x172>
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	3305      	adds	r3, #5
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d07a      	beq.n	800e1a2 <Generic_Delta_Set+0x172>
  {
    Generic_DeltaLevelParam.Transition_Time = plevel_param[5];
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	795b      	ldrb	r3, [r3, #5]
 800e0b0:	767b      	strb	r3, [r7, #25]
    Generic_DeltaLevelParam.Delay_Time = plevel_param[6];
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	799b      	ldrb	r3, [r3, #6]
 800e0b6:	76bb      	strb	r3, [r7, #26]
    /* Copy the data into status message which needs to be update in 
     application message.
    */ 
    Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 + 
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	4619      	mov	r1, r3
 800e0be:	4a77      	ldr	r2, [pc, #476]	; (800e29c <Generic_Delta_Set+0x26c>)
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	005b      	lsls	r3, r3, #1
 800e0c4:	440b      	add	r3, r1
 800e0c6:	009b      	lsls	r3, r3, #2
 800e0c8:	4413      	add	r3, r2
 800e0ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0ce:	b29a      	uxth	r2, r3
                                                Generic_DeltaLevelParam.TargetDeltaLevel32;
 800e0d0:	697b      	ldr	r3, [r7, #20]
    Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 + 
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	4413      	add	r3, r2
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	4619      	mov	r1, r3
 800e0de:	b210      	sxth	r0, r2
 800e0e0:	4a6e      	ldr	r2, [pc, #440]	; (800e29c <Generic_Delta_Set+0x26c>)
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	005b      	lsls	r3, r3, #1
 800e0e6:	440b      	add	r3, r1
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	4413      	add	r3, r2
 800e0ec:	3302      	adds	r3, #2
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	801a      	strh	r2, [r3, #0]
    Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime = Generic_DeltaLevelParam.Transition_Time;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	7e78      	ldrb	r0, [r7, #25]
 800e0fa:	4a68      	ldr	r2, [pc, #416]	; (800e29c <Generic_Delta_Set+0x26c>)
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	005b      	lsls	r3, r3, #1
 800e100:	440b      	add	r3, r1
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	4413      	add	r3, r2
 800e106:	3304      	adds	r3, #4
 800e108:	4602      	mov	r2, r0
 800e10a:	701a      	strb	r2, [r3, #0]
       
    /* copy status parameters in Temporary parameters for transition 
     process.
    */
    Generic_TemporaryStatus[pmsgParam->elementIndex].TargetValue16 = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	4618      	mov	r0, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	4619      	mov	r1, r3
 800e118:	4a60      	ldr	r2, [pc, #384]	; (800e29c <Generic_Delta_Set+0x26c>)
 800e11a:	4603      	mov	r3, r0
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	4403      	add	r3, r0
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	4413      	add	r3, r2
 800e124:	3302      	adds	r3, #2
 800e126:	f9b3 0000 	ldrsh.w	r0, [r3]
 800e12a:	4a5d      	ldr	r2, [pc, #372]	; (800e2a0 <Generic_Delta_Set+0x270>)
 800e12c:	460b      	mov	r3, r1
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	440b      	add	r3, r1
 800e132:	4413      	add	r3, r2
 800e134:	4602      	mov	r2, r0
 800e136:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	4618      	mov	r0, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	4619      	mov	r1, r3
 800e146:	4a55      	ldr	r2, [pc, #340]	; (800e29c <Generic_Delta_Set+0x26c>)
 800e148:	4603      	mov	r3, r0
 800e14a:	005b      	lsls	r3, r3, #1
 800e14c:	4403      	add	r3, r0
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	4413      	add	r3, r2
 800e152:	3304      	adds	r3, #4
 800e154:	7818      	ldrb	r0, [r3, #0]
 800e156:	4a52      	ldr	r2, [pc, #328]	; (800e2a0 <Generic_Delta_Set+0x270>)
 800e158:	460b      	mov	r3, r1
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	440b      	add	r3, r1
 800e15e:	4413      	add	r3, r2
 800e160:	4602      	mov	r2, r0
 800e162:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
    step size for transition state machine.
    */
    Generic_GetStepValue(plevel_param[5], pmsgParam->elementIndex);   
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	3305      	adds	r3, #5
 800e168:	781a      	ldrb	r2, [r3, #0]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	4619      	mov	r1, r3
 800e170:	4610      	mov	r0, r2
 800e172:	f000 ff17 	bl	800efa4 <Generic_GetStepValue>
       
    /*option parameter flag, enable to sent all required parameter in status.*/ 
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	4619      	mov	r1, r3
 800e17c:	4a49      	ldr	r2, [pc, #292]	; (800e2a4 <Generic_Delta_Set+0x274>)
 800e17e:	460b      	mov	r3, r1
 800e180:	005b      	lsls	r3, r3, #1
 800e182:	440b      	add	r3, r1
 800e184:	4413      	add	r3, r2
 800e186:	3301      	adds	r3, #1
 800e188:	2201      	movs	r2, #1
 800e18a:	701a      	strb	r2, [r3, #0]
       
    /*transition process enable flag. */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_LEVEL_TRANSITION_START;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	4619      	mov	r1, r3
 800e192:	4a44      	ldr	r2, [pc, #272]	; (800e2a4 <Generic_Delta_Set+0x274>)
 800e194:	460b      	mov	r3, r1
 800e196:	005b      	lsls	r3, r3, #1
 800e198:	440b      	add	r3, r1
 800e19a:	4413      	add	r3, r2
 800e19c:	2202      	movs	r2, #2
 800e19e:	701a      	strb	r2, [r3, #0]
 800e1a0:	e0a3      	b.n	800e2ea <Generic_Delta_Set+0x2ba>
  }
  else
  {   
		
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f001 fa14 	bl	800f5d4 <Generic_TransitionParameterReset>
    
    if(Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID == Generic_DeltaLevelParam.Generic_TID)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	4a3a      	ldr	r2, [pc, #232]	; (800e29c <Generic_Delta_Set+0x26c>)
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	005b      	lsls	r3, r3, #1
 800e1b8:	440b      	add	r3, r1
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	4413      	add	r3, r2
 800e1be:	3305      	adds	r3, #5
 800e1c0:	781a      	ldrb	r2, [r3, #0]
 800e1c2:	7e3b      	ldrb	r3, [r7, #24]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d16f      	bne.n	800e2a8 <Generic_Delta_Set+0x278>
    {
        if(Generic_DeltaLevelParam.TargetDeltaLevel32 > Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level)
 800e1c8:	697a      	ldr	r2, [r7, #20]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	4932      	ldr	r1, [pc, #200]	; (800e29c <Generic_Delta_Set+0x26c>)
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	005b      	lsls	r3, r3, #1
 800e1d6:	4403      	add	r3, r0
 800e1d8:	009b      	lsls	r3, r3, #2
 800e1da:	440b      	add	r3, r1
 800e1dc:	3308      	adds	r3, #8
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	dd2a      	ble.n	800e23a <Generic_Delta_Set+0x20a>
      {
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 += (Generic_DeltaLevelParam.TargetDeltaLevel32  
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	4a2c      	ldr	r2, [pc, #176]	; (800e29c <Generic_Delta_Set+0x26c>)
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	005b      	lsls	r3, r3, #1
 800e1f0:	440b      	add	r3, r1
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	4413      	add	r3, r2
 800e1f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	697b      	ldr	r3, [r7, #20]
          - Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level);     
 800e1fe:	b299      	uxth	r1, r3
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	461c      	mov	r4, r3
 800e206:	4825      	ldr	r0, [pc, #148]	; (800e29c <Generic_Delta_Set+0x26c>)
 800e208:	4623      	mov	r3, r4
 800e20a:	005b      	lsls	r3, r3, #1
 800e20c:	4423      	add	r3, r4
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	4403      	add	r3, r0
 800e212:	3308      	adds	r3, #8
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	b29b      	uxth	r3, r3
 800e218:	1acb      	subs	r3, r1, r3
 800e21a:	b29b      	uxth	r3, r3
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 += (Generic_DeltaLevelParam.TargetDeltaLevel32  
 800e21c:	4413      	add	r3, r2
 800e21e:	b29a      	uxth	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	4619      	mov	r1, r3
 800e226:	b210      	sxth	r0, r2
 800e228:	4a1c      	ldr	r2, [pc, #112]	; (800e29c <Generic_Delta_Set+0x26c>)
 800e22a:	460b      	mov	r3, r1
 800e22c:	005b      	lsls	r3, r3, #1
 800e22e:	440b      	add	r3, r1
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	4413      	add	r3, r2
 800e234:	4602      	mov	r2, r0
 800e236:	801a      	strh	r2, [r3, #0]
 800e238:	e052      	b.n	800e2e0 <Generic_Delta_Set+0x2b0>
      }
      else
      {
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 -= (Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	4619      	mov	r1, r3
 800e240:	4a16      	ldr	r2, [pc, #88]	; (800e29c <Generic_Delta_Set+0x26c>)
 800e242:	460b      	mov	r3, r1
 800e244:	005b      	lsls	r3, r3, #1
 800e246:	440b      	add	r3, r1
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	4413      	add	r3, r2
 800e24c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e250:	b29a      	uxth	r2, r3
            -Generic_DeltaLevelParam.TargetDeltaLevel32) ;           
 800e252:	697b      	ldr	r3, [r7, #20]
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 -= (Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level
 800e254:	b299      	uxth	r1, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	461c      	mov	r4, r3
 800e25c:	480f      	ldr	r0, [pc, #60]	; (800e29c <Generic_Delta_Set+0x26c>)
 800e25e:	4623      	mov	r3, r4
 800e260:	005b      	lsls	r3, r3, #1
 800e262:	4423      	add	r3, r4
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	4403      	add	r3, r0
 800e268:	3308      	adds	r3, #8
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	1acb      	subs	r3, r1, r3
 800e270:	b29b      	uxth	r3, r3
 800e272:	4413      	add	r3, r2
 800e274:	b29a      	uxth	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	4619      	mov	r1, r3
 800e27c:	b210      	sxth	r0, r2
 800e27e:	4a07      	ldr	r2, [pc, #28]	; (800e29c <Generic_Delta_Set+0x26c>)
 800e280:	460b      	mov	r3, r1
 800e282:	005b      	lsls	r3, r3, #1
 800e284:	440b      	add	r3, r1
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4413      	add	r3, r2
 800e28a:	4602      	mov	r2, r0
 800e28c:	801a      	strh	r2, [r3, #0]
 800e28e:	e027      	b.n	800e2e0 <Generic_Delta_Set+0x2b0>
 800e290:	0803305c 	.word	0x0803305c
 800e294:	0802f01c 	.word	0x0802f01c
 800e298:	0802f044 	.word	0x0802f044
 800e29c:	2000457c 	.word	0x2000457c
 800e2a0:	20004568 	.word	0x20004568
 800e2a4:	20004590 	.word	0x20004590
      }       
    }
    else
    {    /*If TID value is different from the last TID, then new transaction has been started*/
        Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 += Generic_DeltaLevelParam.TargetDeltaLevel32;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	781b      	ldrb	r3, [r3, #0]
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	4a41      	ldr	r2, [pc, #260]	; (800e3b4 <Generic_Delta_Set+0x384>)
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	005b      	lsls	r3, r3, #1
 800e2b4:	440b      	add	r3, r1
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	4413      	add	r3, r2
 800e2ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	4413      	add	r3, r2
 800e2c6:	b29a      	uxth	r2, r3
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	b210      	sxth	r0, r2
 800e2d0:	4a38      	ldr	r2, [pc, #224]	; (800e3b4 <Generic_Delta_Set+0x384>)
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	005b      	lsls	r3, r3, #1
 800e2d6:	440b      	add	r3, r1
 800e2d8:	009b      	lsls	r3, r3, #2
 800e2da:	4413      	add	r3, r2
 800e2dc:	4602      	mov	r2, r0
 800e2de:	801a      	strh	r2, [r3, #0]
    
#else
    /* When no optional parameter received, target value will
    be set as present value in application.
    */
	Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f001 f975 	bl	800f5d4 <Generic_TransitionParameterReset>
#endif   
  }
  
  TRACE_M(TF_GENERIC_M, "Generic Level value %.2x \r\n" ,Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16);
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	4832      	ldr	r0, [pc, #200]	; (800e3b8 <Generic_Delta_Set+0x388>)
 800e2ee:	f7ff f94b 	bl	800d588 <TraceHeader>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	4a2e      	ldr	r2, [pc, #184]	; (800e3b4 <Generic_Delta_Set+0x384>)
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	005b      	lsls	r3, r3, #1
 800e2fe:	440b      	add	r3, r1
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	4413      	add	r3, r2
 800e304:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e308:	4619      	mov	r1, r3
 800e30a:	482c      	ldr	r0, [pc, #176]	; (800e3bc <Generic_Delta_Set+0x38c>)
 800e30c:	f01b fa24 	bl	8029758 <iprintf>
  
  Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level = Generic_DeltaLevelParam.TargetDeltaLevel32;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	4618      	mov	r0, r3
 800e316:	697a      	ldr	r2, [r7, #20]
 800e318:	4926      	ldr	r1, [pc, #152]	; (800e3b4 <Generic_Delta_Set+0x384>)
 800e31a:	4603      	mov	r3, r0
 800e31c:	005b      	lsls	r3, r3, #1
 800e31e:	4403      	add	r3, r0
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	440b      	add	r3, r1
 800e324:	3308      	adds	r3, #8
 800e326:	601a      	str	r2, [r3, #0]
  Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID = Generic_DeltaLevelParam.Generic_TID; 
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	4619      	mov	r1, r3
 800e32e:	7e38      	ldrb	r0, [r7, #24]
 800e330:	4a20      	ldr	r2, [pc, #128]	; (800e3b4 <Generic_Delta_Set+0x384>)
 800e332:	460b      	mov	r3, r1
 800e334:	005b      	lsls	r3, r3, #1
 800e336:	440b      	add	r3, r1
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	4413      	add	r3, r2
 800e33c:	3305      	adds	r3, #5
 800e33e:	4602      	mov	r2, r0
 800e340:	701a      	strb	r2, [r3, #0]
      
  /* Application Callback */
  (GenericAppli_cb.Level_Set_cb)(&Generic_LevelStatus[pmsgParam->elementIndex], 0, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800e342:	4b1f      	ldr	r3, [pc, #124]	; (800e3c0 <Generic_Delta_Set+0x390>)
 800e344:	689c      	ldr	r4, [r3, #8]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	461a      	mov	r2, r3
 800e34c:	4613      	mov	r3, r2
 800e34e:	005b      	lsls	r3, r3, #1
 800e350:	4413      	add	r3, r2
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	4a17      	ldr	r2, [pc, #92]	; (800e3b4 <Generic_Delta_Set+0x384>)
 800e356:	1898      	adds	r0, r3, r2
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	88da      	ldrh	r2, [r3, #6]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	2100      	movs	r1, #0
 800e362:	47a0      	blx	r4
#ifdef ENABLE_MODEL_BINDING    
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS  
  /* Binding of Generic level with light lightnes actual */
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET,pmsgParam->elementIndex,
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	461a      	mov	r2, r3
 800e36a:	4613      	mov	r3, r2
 800e36c:	005b      	lsls	r3, r3, #1
 800e36e:	4413      	add	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	4a10      	ldr	r2, [pc, #64]	; (800e3b4 <Generic_Delta_Set+0x384>)
 800e374:	1898      	adds	r0, r3, r2
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	781a      	ldrb	r2, [r3, #0]
         Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	461c      	mov	r4, r3
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET,pmsgParam->elementIndex,
 800e380:	4910      	ldr	r1, [pc, #64]	; (800e3c4 <Generic_Delta_Set+0x394>)
 800e382:	4623      	mov	r3, r4
 800e384:	005b      	lsls	r3, r3, #1
 800e386:	4423      	add	r3, r4
 800e388:	440b      	add	r3, r1
 800e38a:	7819      	ldrb	r1, [r3, #0]
         Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	461d      	mov	r5, r3
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET,pmsgParam->elementIndex,
 800e392:	4c0c      	ldr	r4, [pc, #48]	; (800e3c4 <Generic_Delta_Set+0x394>)
 800e394:	462b      	mov	r3, r5
 800e396:	005b      	lsls	r3, r3, #1
 800e398:	442b      	add	r3, r5
 800e39a:	4423      	add	r3, r4
 800e39c:	3302      	adds	r3, #2
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	9300      	str	r3, [sp, #0]
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	2101      	movs	r1, #1
 800e3a6:	f003 f909 	bl	80115bc <GenericLevel_LightBinding>
#endif  
#endif  
  return MOBLE_RESULT_SUCCESS;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3720      	adds	r7, #32
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bdb0      	pop	{r4, r5, r7, pc}
 800e3b4:	2000457c 	.word	0x2000457c
 800e3b8:	0803305c 	.word	0x0803305c
 800e3bc:	0802f064 	.word	0x0802f064
 800e3c0:	08032d00 	.word	0x08032d00
 800e3c4:	20004590 	.word	0x20004590

0800e3c8 <Generic_Move_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Move_Set(const MOBLEUINT8* plevel_param, 
                              MOBLEUINT32 length,
                              MODEL_MessageHeader_t *pmsgParam) 
{
 800e3c8:	b590      	push	{r4, r7, lr}
 800e3ca:	b087      	sub	sp, #28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	607a      	str	r2, [r7, #4]
  Level: 2B The target value of the Generic Level state
  TID:   1B Transaction Identifier
  Transition Time: 1B Format as defined in Section 3.1.3. (Optional)
  Delay: 1B Message execution delay in 5 milliseconds steps (C.1)
  */
  TRACE_M(TF_GENERIC_M, "Generic_Move_Set callback received \r\n");
 800e3d4:	2100      	movs	r1, #0
 800e3d6:	4871      	ldr	r0, [pc, #452]	; (800e59c <Generic_Move_Set+0x1d4>)
 800e3d8:	f7ff f8d6 	bl	800d588 <TraceHeader>
 800e3dc:	4870      	ldr	r0, [pc, #448]	; (800e5a0 <Generic_Move_Set+0x1d8>)
 800e3de:	f01b fa41 	bl	8029864 <puts>
  
  Generic_LevelMoveParam_t  Generic_LevelMoveParam;
  
  Generic_LevelMoveParam.TargetMoveLevel16  = (plevel_param[1] << 8);
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	021b      	lsls	r3, r3, #8
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	823b      	strh	r3, [r7, #16]
  Generic_LevelMoveParam.TargetMoveLevel16 |= (plevel_param[0]);
 800e3f0:	8a3a      	ldrh	r2, [r7, #16]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	823b      	strh	r3, [r7, #16]
  Generic_LevelMoveParam.Generic_TID = plevel_param[2];
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	789b      	ldrb	r3, [r3, #2]
 800e402:	74bb      	strb	r3, [r7, #18]
  /* Check for Optional Parameters 
  
    length > 3 plevel_param has level,TID,Trasition Time,Delay
    length < 3 plevel_param has level,TID
  */     
  if((length > 3) && (plevel_param[3] !=0))
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	2b03      	cmp	r3, #3
 800e408:	d975      	bls.n	800e4f6 <Generic_Move_Set+0x12e>
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	3303      	adds	r3, #3
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d070      	beq.n	800e4f6 <Generic_Move_Set+0x12e>
  {
    Generic_LevelMoveParam.Transition_Time = plevel_param[3];
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	78db      	ldrb	r3, [r3, #3]
 800e418:	74fb      	strb	r3, [r7, #19]
    Generic_LevelMoveParam.Delay_Time = plevel_param[4];
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	791b      	ldrb	r3, [r3, #4]
 800e41e:	753b      	strb	r3, [r7, #20]
    /* Copy the data into status message which needs to be update in 
      application message.
    */ 
    /* The assumption here is that the move command starts transition with each 
       step of size delta, which terminates only at max or min value */
    if (Generic_LevelMoveParam.TargetMoveLevel16 <= 0x7FFF)
 800e420:	8a3b      	ldrh	r3, [r7, #16]
 800e422:	b21b      	sxth	r3, r3
 800e424:	2b00      	cmp	r3, #0
 800e426:	db0d      	blt.n	800e444 <Generic_Move_Set+0x7c>
    {
        Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = 0x7FFF;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	4619      	mov	r1, r3
 800e42e:	4a5d      	ldr	r2, [pc, #372]	; (800e5a4 <Generic_Move_Set+0x1dc>)
 800e430:	460b      	mov	r3, r1
 800e432:	005b      	lsls	r3, r3, #1
 800e434:	440b      	add	r3, r1
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	4413      	add	r3, r2
 800e43a:	3302      	adds	r3, #2
 800e43c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e440:	801a      	strh	r2, [r3, #0]
 800e442:	e00c      	b.n	800e45e <Generic_Move_Set+0x96>
    }
    else
    {
        Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = 0x8000;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	4619      	mov	r1, r3
 800e44a:	4a56      	ldr	r2, [pc, #344]	; (800e5a4 <Generic_Move_Set+0x1dc>)
 800e44c:	460b      	mov	r3, r1
 800e44e:	005b      	lsls	r3, r3, #1
 800e450:	440b      	add	r3, r1
 800e452:	009b      	lsls	r3, r3, #2
 800e454:	4413      	add	r3, r2
 800e456:	3302      	adds	r3, #2
 800e458:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e45c:	801a      	strh	r2, [r3, #0]
    }
    Generic_TemporaryStatus[pmsgParam->elementIndex].TargetValue16 = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	4618      	mov	r0, r3
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	4619      	mov	r1, r3
 800e46a:	4a4e      	ldr	r2, [pc, #312]	; (800e5a4 <Generic_Move_Set+0x1dc>)
 800e46c:	4603      	mov	r3, r0
 800e46e:	005b      	lsls	r3, r3, #1
 800e470:	4403      	add	r3, r0
 800e472:	009b      	lsls	r3, r3, #2
 800e474:	4413      	add	r3, r2
 800e476:	3302      	adds	r3, #2
 800e478:	f9b3 0000 	ldrsh.w	r0, [r3]
 800e47c:	4a4a      	ldr	r2, [pc, #296]	; (800e5a8 <Generic_Move_Set+0x1e0>)
 800e47e:	460b      	mov	r3, r1
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	440b      	add	r3, r1
 800e484:	4413      	add	r3, r2
 800e486:	4602      	mov	r2, r0
 800e488:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = UNDEFSTEPVAL;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	4619      	mov	r1, r3
 800e492:	4a45      	ldr	r2, [pc, #276]	; (800e5a8 <Generic_Move_Set+0x1e0>)
 800e494:	460b      	mov	r3, r1
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	440b      	add	r3, r1
 800e49a:	4413      	add	r3, r2
 800e49c:	223f      	movs	r2, #63	; 0x3f
 800e49e:	701a      	strb	r2, [r3, #0]
    Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime = UNDEFSTEPVAL;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	4a3f      	ldr	r2, [pc, #252]	; (800e5a4 <Generic_Move_Set+0x1dc>)
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	005b      	lsls	r3, r3, #1
 800e4ac:	440b      	add	r3, r1
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	4413      	add	r3, r2
 800e4b2:	3304      	adds	r3, #4
 800e4b4:	223f      	movs	r2, #63	; 0x3f
 800e4b6:	701a      	strb	r2, [r3, #0]
    
    /* Function to calculate time parameters, step resolution
      step size for transition state machine.
    */
    Generic_GetStepValue(plevel_param[3], pmsgParam->elementIndex);   
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	3303      	adds	r3, #3
 800e4bc:	781a      	ldrb	r2, [r3, #0]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	4610      	mov	r0, r2
 800e4c6:	f000 fd6d 	bl	800efa4 <Generic_GetStepValue>
    /* option parameter flag, enable to sent all required parameter in status.*/
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;  
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	4a36      	ldr	r2, [pc, #216]	; (800e5ac <Generic_Move_Set+0x1e4>)
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	005b      	lsls	r3, r3, #1
 800e4d6:	440b      	add	r3, r1
 800e4d8:	4413      	add	r3, r2
 800e4da:	3301      	adds	r3, #1
 800e4dc:	2201      	movs	r2, #1
 800e4de:	701a      	strb	r2, [r3, #0]
    /* transition process enable flag. */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_LEVEL_TRANSITION_START;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	4a31      	ldr	r2, [pc, #196]	; (800e5ac <Generic_Move_Set+0x1e4>)
 800e4e8:	460b      	mov	r3, r1
 800e4ea:	005b      	lsls	r3, r3, #1
 800e4ec:	440b      	add	r3, r1
 800e4ee:	4413      	add	r3, r2
 800e4f0:	2202      	movs	r2, #2
 800e4f2:	701a      	strb	r2, [r3, #0]
 800e4f4:	e02e      	b.n	800e554 <Generic_Move_Set+0x18c>
  }
  else
  {   
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f001 f86a 	bl	800f5d4 <Generic_TransitionParameterReset>
    
    if(Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID == Generic_LevelMoveParam.Generic_TID)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	4619      	mov	r1, r3
 800e506:	4a27      	ldr	r2, [pc, #156]	; (800e5a4 <Generic_Move_Set+0x1dc>)
 800e508:	460b      	mov	r3, r1
 800e50a:	005b      	lsls	r3, r3, #1
 800e50c:	440b      	add	r3, r1
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	4413      	add	r3, r2
 800e512:	3305      	adds	r3, #5
 800e514:	781a      	ldrb	r2, [r3, #0]
 800e516:	7cbb      	ldrb	r3, [r7, #18]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d11b      	bne.n	800e554 <Generic_Move_Set+0x18c>
    {
      Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 =  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	4619      	mov	r1, r3
 800e522:	4a20      	ldr	r2, [pc, #128]	; (800e5a4 <Generic_Move_Set+0x1dc>)
 800e524:	460b      	mov	r3, r1
 800e526:	005b      	lsls	r3, r3, #1
 800e528:	440b      	add	r3, r1
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	4413      	add	r3, r2
 800e52e:	3306      	adds	r3, #6
 800e530:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e534:	b29a      	uxth	r2, r3
        + Generic_LevelMoveParam.TargetMoveLevel16;
 800e536:	8a3b      	ldrh	r3, [r7, #16]
 800e538:	4413      	add	r3, r2
 800e53a:	b29a      	uxth	r2, r3
      Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 =  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	4619      	mov	r1, r3
        + Generic_LevelMoveParam.TargetMoveLevel16;
 800e542:	b210      	sxth	r0, r2
      Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 =  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 
 800e544:	4a17      	ldr	r2, [pc, #92]	; (800e5a4 <Generic_Move_Set+0x1dc>)
 800e546:	460b      	mov	r3, r1
 800e548:	005b      	lsls	r3, r3, #1
 800e54a:	440b      	add	r3, r1
 800e54c:	009b      	lsls	r3, r3, #2
 800e54e:	4413      	add	r3, r2
 800e550:	4602      	mov	r2, r0
 800e552:	801a      	strh	r2, [r3, #0]
    {
      
    }
    }
    
  Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID = Generic_LevelMoveParam.Generic_TID; 
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	4619      	mov	r1, r3
 800e55a:	7cb8      	ldrb	r0, [r7, #18]
 800e55c:	4a11      	ldr	r2, [pc, #68]	; (800e5a4 <Generic_Move_Set+0x1dc>)
 800e55e:	460b      	mov	r3, r1
 800e560:	005b      	lsls	r3, r3, #1
 800e562:	440b      	add	r3, r1
 800e564:	009b      	lsls	r3, r3, #2
 800e566:	4413      	add	r3, r2
 800e568:	3305      	adds	r3, #5
 800e56a:	4602      	mov	r2, r0
 800e56c:	701a      	strb	r2, [r3, #0]
 
  /* Application Callback */
  (GenericAppli_cb.LevelDeltaMove_Set_cb)(&Generic_LevelStatus[pmsgParam->elementIndex], 0, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800e56e:	4b10      	ldr	r3, [pc, #64]	; (800e5b0 <Generic_Move_Set+0x1e8>)
 800e570:	691c      	ldr	r4, [r3, #16]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	461a      	mov	r2, r3
 800e578:	4613      	mov	r3, r2
 800e57a:	005b      	lsls	r3, r3, #1
 800e57c:	4413      	add	r3, r2
 800e57e:	009b      	lsls	r3, r3, #2
 800e580:	4a08      	ldr	r2, [pc, #32]	; (800e5a4 <Generic_Move_Set+0x1dc>)
 800e582:	1898      	adds	r0, r3, r2
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	88da      	ldrh	r2, [r3, #6]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	2100      	movs	r1, #0
 800e58e:	47a0      	blx	r4
     
  return MOBLE_RESULT_SUCCESS;
 800e590:	2300      	movs	r3, #0
}
 800e592:	4618      	mov	r0, r3
 800e594:	371c      	adds	r7, #28
 800e596:	46bd      	mov	sp, r7
 800e598:	bd90      	pop	{r4, r7, pc}
 800e59a:	bf00      	nop
 800e59c:	08033070 	.word	0x08033070
 800e5a0:	0802f080 	.word	0x0802f080
 800e5a4:	2000457c 	.word	0x2000457c
 800e5a8:	20004568 	.word	0x20004568
 800e5ac:	20004590 	.word	0x20004590
 800e5b0:	08032d00 	.word	0x08032d00

0800e5b4 <Generic_Level_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Level_Status(MOBLEUINT8* plevel_status, 
                                  MOBLEUINT32 *plength,
                                  MODEL_MessageHeader_t *pmsgParam) 
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	607a      	str	r2, [r7, #4]
  Target Level: 2B The target value of the Generic Level state (Optional). 
  Remaining Time: 1B Format as defined in Section 3.1.3 (C.1).
  
  */
  
  TRACE_M(TF_GENERIC_M, "Generic_Level_Status callback received \r\n");
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	4856      	ldr	r0, [pc, #344]	; (800e71c <Generic_Level_Status+0x168>)
 800e5c4:	f7fe ffe0 	bl	800d588 <TraceHeader>
 800e5c8:	4855      	ldr	r0, [pc, #340]	; (800e720 <Generic_Level_Status+0x16c>)
 800e5ca:	f01b f94b 	bl	8029864 <puts>
  TRACE_M(TF_SERIAL_CTRL,"#8205! \n\r");
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	4852      	ldr	r0, [pc, #328]	; (800e71c <Generic_Level_Status+0x168>)
 800e5d2:	f7fe ffd9 	bl	800d588 <TraceHeader>
 800e5d6:	4853      	ldr	r0, [pc, #332]	; (800e724 <Generic_Level_Status+0x170>)
 800e5d8:	f01b f8be 	bl	8029758 <iprintf>
  
  /* checking the transition is in process.
  checking for remaining time is not equal to zero.
  */
  
  if((Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam ==1) || (Generic_TimeParam[pmsgParam->elementIndex].StepValue != 0))
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	4a51      	ldr	r2, [pc, #324]	; (800e728 <Generic_Level_Status+0x174>)
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	005b      	lsls	r3, r3, #1
 800e5e8:	440b      	add	r3, r1
 800e5ea:	4413      	add	r3, r2
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d00c      	beq.n	800e60e <Generic_Level_Status+0x5a>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	4a4c      	ldr	r2, [pc, #304]	; (800e72c <Generic_Level_Status+0x178>)
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	440b      	add	r3, r1
 800e602:	005b      	lsls	r3, r3, #1
 800e604:	4413      	add	r3, r2
 800e606:	f993 3000 	ldrsb.w	r3, [r3]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d045      	beq.n	800e69a <Generic_Level_Status+0xe6>
  {
    TRACE_M(TF_GENERIC_M, "Generic_Level_Status sent with Transition \r\n"); 
 800e60e:	2100      	movs	r1, #0
 800e610:	4842      	ldr	r0, [pc, #264]	; (800e71c <Generic_Level_Status+0x168>)
 800e612:	f7fe ffb9 	bl	800d588 <TraceHeader>
 800e616:	4846      	ldr	r0, [pc, #280]	; (800e730 <Generic_Level_Status+0x17c>)
 800e618:	f01b f924 	bl	8029864 <puts>

    *(plevel_status+2) = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	4619      	mov	r1, r3
 800e622:	4a44      	ldr	r2, [pc, #272]	; (800e734 <Generic_Level_Status+0x180>)
 800e624:	460b      	mov	r3, r1
 800e626:	005b      	lsls	r3, r3, #1
 800e628:	440b      	add	r3, r1
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	4413      	add	r3, r2
 800e62e:	3302      	adds	r3, #2
 800e630:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	3302      	adds	r3, #2
 800e638:	b2d2      	uxtb	r2, r2
 800e63a:	701a      	strb	r2, [r3, #0]
    *(plevel_status+3) = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 >> 8;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	4619      	mov	r1, r3
 800e642:	4a3c      	ldr	r2, [pc, #240]	; (800e734 <Generic_Level_Status+0x180>)
 800e644:	460b      	mov	r3, r1
 800e646:	005b      	lsls	r3, r3, #1
 800e648:	440b      	add	r3, r1
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	4413      	add	r3, r2
 800e64e:	3302      	adds	r3, #2
 800e650:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e654:	121b      	asrs	r3, r3, #8
 800e656:	b21a      	sxth	r2, r3
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	3303      	adds	r3, #3
 800e65c:	b2d2      	uxtb	r2, r2
 800e65e:	701a      	strb	r2, [r3, #0]
    *(plevel_status+4) = Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	4618      	mov	r0, r3
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	1d1a      	adds	r2, r3, #4
 800e66a:	4932      	ldr	r1, [pc, #200]	; (800e734 <Generic_Level_Status+0x180>)
 800e66c:	4603      	mov	r3, r0
 800e66e:	005b      	lsls	r3, r3, #1
 800e670:	4403      	add	r3, r0
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	440b      	add	r3, r1
 800e676:	3304      	adds	r3, #4
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	7013      	strb	r3, [r2, #0]
    *plength = 5;
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	2205      	movs	r2, #5
 800e680:	601a      	str	r2, [r3, #0]
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 0;    
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	4619      	mov	r1, r3
 800e688:	4a27      	ldr	r2, [pc, #156]	; (800e728 <Generic_Level_Status+0x174>)
 800e68a:	460b      	mov	r3, r1
 800e68c:	005b      	lsls	r3, r3, #1
 800e68e:	440b      	add	r3, r1
 800e690:	4413      	add	r3, r2
 800e692:	3301      	adds	r3, #1
 800e694:	2200      	movs	r2, #0
 800e696:	701a      	strb	r2, [r3, #0]
 800e698:	e009      	b.n	800e6ae <Generic_Level_Status+0xfa>
  }
  else
  {
    TRACE_M(TF_GENERIC_M, "Generic_Level_Status sent without Transition \r\n"); 
 800e69a:	2100      	movs	r1, #0
 800e69c:	481f      	ldr	r0, [pc, #124]	; (800e71c <Generic_Level_Status+0x168>)
 800e69e:	f7fe ff73 	bl	800d588 <TraceHeader>
 800e6a2:	4825      	ldr	r0, [pc, #148]	; (800e738 <Generic_Level_Status+0x184>)
 800e6a4:	f01b f8de 	bl	8029864 <puts>
    *plength = 2;             
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	2202      	movs	r2, #2
 800e6ac:	601a      	str	r2, [r3, #0]
  }
     
  *(plevel_status) = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	4a1f      	ldr	r2, [pc, #124]	; (800e734 <Generic_Level_Status+0x180>)
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	005b      	lsls	r3, r3, #1
 800e6ba:	440b      	add	r3, r1
 800e6bc:	009b      	lsls	r3, r3, #2
 800e6be:	4413      	add	r3, r2
 800e6c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6c4:	b2da      	uxtb	r2, r3
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	701a      	strb	r2, [r3, #0]
  *(plevel_status+1) = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 >> 8;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	4a18      	ldr	r2, [pc, #96]	; (800e734 <Generic_Level_Status+0x180>)
 800e6d2:	460b      	mov	r3, r1
 800e6d4:	005b      	lsls	r3, r3, #1
 800e6d6:	440b      	add	r3, r1
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	4413      	add	r3, r2
 800e6dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6e0:	121b      	asrs	r3, r3, #8
 800e6e2:	b21a      	sxth	r2, r3
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	b2d2      	uxtb	r2, r2
 800e6ea:	701a      	strb	r2, [r3, #0]
  TRACE_M(TF_GENERIC_M, "%d \r\n", Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16); 
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	480b      	ldr	r0, [pc, #44]	; (800e71c <Generic_Level_Status+0x168>)
 800e6f0:	f7fe ff4a 	bl	800d588 <TraceHeader>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	4a0e      	ldr	r2, [pc, #56]	; (800e734 <Generic_Level_Status+0x180>)
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	005b      	lsls	r3, r3, #1
 800e700:	440b      	add	r3, r1
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4413      	add	r3, r2
 800e706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e70a:	4619      	mov	r1, r3
 800e70c:	480b      	ldr	r0, [pc, #44]	; (800e73c <Generic_Level_Status+0x188>)
 800e70e:	f01b f823 	bl	8029758 <iprintf>
  return MOBLE_RESULT_SUCCESS;   
 800e712:	2300      	movs	r3, #0
}
 800e714:	4618      	mov	r0, r3
 800e716:	3710      	adds	r7, #16
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	08033084 	.word	0x08033084
 800e720:	0802f0a8 	.word	0x0802f0a8
 800e724:	0802f0d4 	.word	0x0802f0d4
 800e728:	20004590 	.word	0x20004590
 800e72c:	20004570 	.word	0x20004570
 800e730:	0802f0e0 	.word	0x0802f0e0
 800e734:	2000457c 	.word	0x2000457c
 800e738:	0802f10c 	.word	0x0802f10c
 800e73c:	0802efec 	.word	0x0802efec

0800e740 <Generic_PowerOnOff_Set>:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & AppKey Offset
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_PowerOnOff_Set(const MOBLEUINT8 *powerOnOff_param , MOBLEUINT32 length,\
                                   MODEL_MessageHeader_t *pmsgParam) 
{
 800e740:	b590      	push	{r4, r7, lr}
 800e742:	b087      	sub	sp, #28
 800e744:	af00      	add	r7, sp, #0
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	60b9      	str	r1, [r7, #8]
 800e74a:	607a      	str	r2, [r7, #4]
  /* 
  3.2.4.2 Generic Power On Off Time
  Following is the set message:
  powerOnOff_param:1B parameter is received to set the power on off model.  
  */
  TRACE_M(TF_GENERIC_M, "Generic_PowerOnOff_Set callback received \r\n");
 800e74c:	2100      	movs	r1, #0
 800e74e:	4817      	ldr	r0, [pc, #92]	; (800e7ac <Generic_PowerOnOff_Set+0x6c>)
 800e750:	f7fe ff1a 	bl	800d588 <TraceHeader>
 800e754:	4816      	ldr	r0, [pc, #88]	; (800e7b0 <Generic_PowerOnOff_Set+0x70>)
 800e756:	f01b f885 	bl	8029864 <puts>
  TRACE_M(TF_GENERIC_M,"Generic_PowerOnOff_Set is %d\r\n", powerOnOff_param[0]);
 800e75a:	2100      	movs	r1, #0
 800e75c:	4813      	ldr	r0, [pc, #76]	; (800e7ac <Generic_PowerOnOff_Set+0x6c>)
 800e75e:	f7fe ff13 	bl	800d588 <TraceHeader>
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	4619      	mov	r1, r3
 800e768:	4812      	ldr	r0, [pc, #72]	; (800e7b4 <Generic_PowerOnOff_Set+0x74>)
 800e76a:	f01a fff5 	bl	8029758 <iprintf>
  
  Generic_PowerOnOffParam_t Generic_PowerOnOffParam[APPLICATION_NUMBER_OF_ELEMENTS];
  
  Generic_PowerOnOffParam[pmsgParam->elementIndex].PowerOnOffState = powerOnOff_param[0];
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	4619      	mov	r1, r3
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	781a      	ldrb	r2, [r3, #0]
 800e778:	f101 0318 	add.w	r3, r1, #24
 800e77c:	443b      	add	r3, r7
 800e77e:	f803 2c04 	strb.w	r2, [r3, #-4]
  
  /* Application Callback */
  (GenericAppli_cb.GenericPowerOnOff_cb)(&Generic_PowerOnOffParam[pmsgParam->elementIndex], length, pmsgParam->dst_peer,\
 800e782:	4b0d      	ldr	r3, [pc, #52]	; (800e7b8 <Generic_PowerOnOff_Set+0x78>)
 800e784:	699c      	ldr	r4, [r3, #24]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	461a      	mov	r2, r3
 800e78c:	f107 0314 	add.w	r3, r7, #20
 800e790:	1898      	adds	r0, r3, r2
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	b2d9      	uxtb	r1, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	88da      	ldrh	r2, [r3, #6]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	47a0      	blx	r4
                                                     pmsgParam->elementIndex);
  return MOBLE_RESULT_SUCCESS;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	371c      	adds	r7, #28
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd90      	pop	{r4, r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	0803309c 	.word	0x0803309c
 800e7b0:	0802f13c 	.word	0x0802f13c
 800e7b4:	0802f168 	.word	0x0802f168
 800e7b8:	08032d00 	.word	0x08032d00

0800e7bc <Generic_PowerOnOff_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_PowerOnOff_Status(MOBLEUINT8 *powerOnOff_status , 
                                       MOBLEUINT32 *plength,
                                       MODEL_MessageHeader_t *pmsgParam) 
{  
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b086      	sub	sp, #24
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
  3.2.4.4 Generic OnPowerUp Status
  Following is the status message:
  powerOnOff_status: 1B is the status parameter of the Power on off model. 
  */  
  MOBLEUINT8 Generic_GetBuff[2] ;
  TRACE_M(TF_GENERIC_M, "Generic_PowerOnOff_Status callback received \r\n");
 800e7c8:	2100      	movs	r1, #0
 800e7ca:	4810      	ldr	r0, [pc, #64]	; (800e80c <Generic_PowerOnOff_Status+0x50>)
 800e7cc:	f7fe fedc 	bl	800d588 <TraceHeader>
 800e7d0:	480f      	ldr	r0, [pc, #60]	; (800e810 <Generic_PowerOnOff_Status+0x54>)
 800e7d2:	f01b f847 	bl	8029864 <puts>
  TRACE_M(TF_SERIAL_CTRL,"#8211! \n\r");
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	480c      	ldr	r0, [pc, #48]	; (800e80c <Generic_PowerOnOff_Status+0x50>)
 800e7da:	f7fe fed5 	bl	800d588 <TraceHeader>
 800e7de:	480d      	ldr	r0, [pc, #52]	; (800e814 <Generic_PowerOnOff_Status+0x58>)
 800e7e0:	f01a ffba 	bl	8029758 <iprintf>
  
  /* Function call back to get the values from application*/
  (Appli_GenericState_cb.GetPowerOnOffStatus_cb)(Generic_GetBuff, pmsgParam->dst_peer,\
 800e7e4:	4b0c      	ldr	r3, [pc, #48]	; (800e818 <Generic_PowerOnOff_Status+0x5c>)
 800e7e6:	68db      	ldr	r3, [r3, #12]
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	88d1      	ldrh	r1, [r2, #6]
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	7812      	ldrb	r2, [r2, #0]
 800e7f0:	f107 0014 	add.w	r0, r7, #20
 800e7f4:	4798      	blx	r3
                                                        pmsgParam->elementIndex);
   
  *(powerOnOff_status) = Generic_GetBuff[0];
 800e7f6:	7d3a      	ldrb	r2, [r7, #20]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	701a      	strb	r2, [r3, #0]
  *plength = 1;
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	2201      	movs	r2, #1
 800e800:	601a      	str	r2, [r3, #0]
 
  return MOBLE_RESULT_SUCCESS;
 800e802:	2300      	movs	r3, #0
}
 800e804:	4618      	mov	r0, r3
 800e806:	3718      	adds	r7, #24
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	080330b4 	.word	0x080330b4
 800e810:	0802f188 	.word	0x0802f188
 800e814:	0802f1b8 	.word	0x0802f1b8
 800e818:	08032d28 	.word	0x08032d28

0800e81c <GenericModelServer_GetOpcodeTableCb>:
* @param  length: Pointer to the Length of Generic Model opcode array
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT GenericModelServer_GetOpcodeTableCb(const MODEL_OpcodeTableParam_t **data, 
                                                 MOBLEUINT16 *length)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
  *data = Generic_Opcodes_Table;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4a05      	ldr	r2, [pc, #20]	; (800e840 <GenericModelServer_GetOpcodeTableCb+0x24>)
 800e82a:	601a      	str	r2, [r3, #0]
  *length = sizeof(Generic_Opcodes_Table)/sizeof(Generic_Opcodes_Table[0]);
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	220e      	movs	r2, #14
 800e830:	801a      	strh	r2, [r3, #0]

  return MOBLE_RESULT_SUCCESS;
 800e832:	2300      	movs	r3, #0
}
 800e834:	4618      	mov	r0, r3
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr
 800e840:	08032f74 	.word	0x08032f74

0800e844 <GenericModelServer_GetStatusRequestCb>:
                                                   MOBLEUINT32 *plength, 
                                                   MOBLEUINT8 const *pRxData,
                                                   MOBLEUINT32 dataLength,
                                                   MOBLEBOOL response)

{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	607a      	str	r2, [r7, #4]
 800e84e:	603b      	str	r3, [r7, #0]
 800e850:	460b      	mov	r3, r1
 800e852:	817b      	strh	r3, [r7, #10]
  TRACE_M(TF_GENERIC_M, "response status enable \n\r");
 800e854:	2100      	movs	r1, #0
 800e856:	4818      	ldr	r0, [pc, #96]	; (800e8b8 <GenericModelServer_GetStatusRequestCb+0x74>)
 800e858:	f7fe fe96 	bl	800d588 <TraceHeader>
 800e85c:	4817      	ldr	r0, [pc, #92]	; (800e8bc <GenericModelServer_GetStatusRequestCb+0x78>)
 800e85e:	f01a ff7b 	bl	8029758 <iprintf>
  switch(opcode)
 800e862:	897b      	ldrh	r3, [r7, #10]
 800e864:	f248 2212 	movw	r2, #33298	; 0x8212
 800e868:	4293      	cmp	r3, r2
 800e86a:	d018      	beq.n	800e89e <GenericModelServer_GetStatusRequestCb+0x5a>
 800e86c:	f248 2212 	movw	r2, #33298	; 0x8212
 800e870:	4293      	cmp	r3, r2
 800e872:	dc1a      	bgt.n	800e8aa <GenericModelServer_GetStatusRequestCb+0x66>
 800e874:	f248 2204 	movw	r2, #33284	; 0x8204
 800e878:	4293      	cmp	r3, r2
 800e87a:	d004      	beq.n	800e886 <GenericModelServer_GetStatusRequestCb+0x42>
 800e87c:	f248 2208 	movw	r2, #33288	; 0x8208
 800e880:	4293      	cmp	r3, r2
 800e882:	d006      	beq.n	800e892 <GenericModelServer_GetStatusRequestCb+0x4e>
      Generic_DefaultTransitionTime_Status(pResponsedata, plength, pmsgParam);
    }
#endif    
    default:
    {
      break;
 800e884:	e011      	b.n	800e8aa <GenericModelServer_GetStatusRequestCb+0x66>
      Generic_OnOff_Status(pResponsedata, plength, pmsgParam);       
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	6839      	ldr	r1, [r7, #0]
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f7ff fa34 	bl	800dcf8 <Generic_OnOff_Status>
      break;
 800e890:	e00c      	b.n	800e8ac <GenericModelServer_GetStatusRequestCb+0x68>
      Generic_Level_Status(pResponsedata, plength, pmsgParam);     
 800e892:	68fa      	ldr	r2, [r7, #12]
 800e894:	6839      	ldr	r1, [r7, #0]
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7ff fe8c 	bl	800e5b4 <Generic_Level_Status>
      break;
 800e89c:	e006      	b.n	800e8ac <GenericModelServer_GetStatusRequestCb+0x68>
      Generic_PowerOnOff_Status(pResponsedata, plength, pmsgParam);
 800e89e:	68fa      	ldr	r2, [r7, #12]
 800e8a0:	6839      	ldr	r1, [r7, #0]
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f7ff ff8a 	bl	800e7bc <Generic_PowerOnOff_Status>
      break;
 800e8a8:	e000      	b.n	800e8ac <GenericModelServer_GetStatusRequestCb+0x68>
      break;
 800e8aa:	bf00      	nop
    }
  }
  return MOBLE_RESULT_SUCCESS;    
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	080330d0 	.word	0x080330d0
 800e8bc:	0802f2a0 	.word	0x0802f2a0

0800e8c0 <GenericModelServer_ProcessMessageCb>:
MOBLE_RESULT GenericModelServer_ProcessMessageCb(MODEL_MessageHeader_t *pmsgParam,
                                                 MOBLEUINT16 opcode, 
                                                 MOBLEUINT8 const *pRxData, 
                                                 MOBLEUINT32 dataLength, 
                                                 MOBLEBOOL response)
{
 800e8c0:	b590      	push	{r4, r7, lr}
 800e8c2:	b089      	sub	sp, #36	; 0x24
 800e8c4:	af02      	add	r7, sp, #8
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	607a      	str	r2, [r7, #4]
 800e8ca:	603b      	str	r3, [r7, #0]
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	817b      	strh	r3, [r7, #10]
  Model_Binding_Var.Dst_Peer = pmsgParam->dst_peer;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	88da      	ldrh	r2, [r3, #6]
 800e8d4:	4b94      	ldr	r3, [pc, #592]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800e8d6:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	75fb      	strb	r3, [r7, #23]
  MOBLE_ADDRESS publishAddress;
  MOBLEUINT8 modelStateChangeFlag = MOBLE_FALSE; 
 800e8dc:	2300      	movs	r3, #0
 800e8de:	75bb      	strb	r3, [r7, #22]
  
  TRACE_M(TF_GENERIC_M, "elementIndex %.2x dst_peer %.2X peer_add %.2X opcode %.2X response %.2X\r\n",
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	4892      	ldr	r0, [pc, #584]	; (800eb2c <GenericModelServer_ProcessMessageCb+0x26c>)
 800e8e4:	f7fe fe50 	bl	800d588 <TraceHeader>
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	88db      	ldrh	r3, [r3, #6]
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	889b      	ldrh	r3, [r3, #4]
 800e8f8:	461c      	mov	r4, r3
 800e8fa:	897b      	ldrh	r3, [r7, #10]
 800e8fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e900:	9201      	str	r2, [sp, #4]
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	4623      	mov	r3, r4
 800e906:	4602      	mov	r2, r0
 800e908:	4889      	ldr	r0, [pc, #548]	; (800eb30 <GenericModelServer_ProcessMessageCb+0x270>)
 800e90a:	f01a ff25 	bl	8029758 <iprintf>
          pmsgParam->elementIndex, pmsgParam->dst_peer, pmsgParam->peer_addr, opcode, response);   
                                                      
  switch(opcode)
 800e90e:	897b      	ldrh	r3, [r7, #10]
 800e910:	f5a3 4302 	sub.w	r3, r3, #33280	; 0x8200
 800e914:	3b02      	subs	r3, #2
 800e916:	2b12      	cmp	r3, #18
 800e918:	f200 80e4 	bhi.w	800eae4 <GenericModelServer_ProcessMessageCb+0x224>
 800e91c:	a201      	add	r2, pc, #4	; (adr r2, 800e924 <GenericModelServer_ProcessMessageCb+0x64>)
 800e91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e922:	bf00      	nop
 800e924:	0800e971 	.word	0x0800e971
 800e928:	0800e971 	.word	0x0800e971
 800e92c:	0800eae5 	.word	0x0800eae5
 800e930:	0800eae5 	.word	0x0800eae5
 800e934:	0800e9ef 	.word	0x0800e9ef
 800e938:	0800e9ef 	.word	0x0800e9ef
 800e93c:	0800eae5 	.word	0x0800eae5
 800e940:	0800ea47 	.word	0x0800ea47
 800e944:	0800ea47 	.word	0x0800ea47
 800e948:	0800ea6b 	.word	0x0800ea6b
 800e94c:	0800ea6b 	.word	0x0800ea6b
 800e950:	0800eae5 	.word	0x0800eae5
 800e954:	0800eae5 	.word	0x0800eae5
 800e958:	0800eae5 	.word	0x0800eae5
 800e95c:	0800eae5 	.word	0x0800eae5
 800e960:	0800eae5 	.word	0x0800eae5
 800e964:	0800eae5 	.word	0x0800eae5
 800e968:	0800eaab 	.word	0x0800eaab
 800e96c:	0800eaab 	.word	0x0800eaab
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF
    
    case GENERIC_ON_OFF_SET_ACK:
    case GENERIC_ON_OFF_SET_UNACK:
    {
      result = Chk_ParamValidity(pRxData[0], 1); 
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	2101      	movs	r1, #1
 800e976:	4618      	mov	r0, r3
 800e978:	f7fe fd20 	bl	800d3bc <Chk_ParamValidity>
 800e97c:	4603      	mov	r3, r0
 800e97e:	75fb      	strb	r3, [r7, #23]
      /* 3.2.1.2 Generic OnOff Set 
      Check if Transition Time field is present or Not,
      If present, Only values of 0x00 through 0x3E shall be used to specify 
      the value of the Transition Number of Steps field. */

      result |= Chk_OptionalParamValidity (dataLength, 2, (pRxData[2]&0x3F), 0x3E );        
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	b2d8      	uxtb	r0, r3
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	3302      	adds	r3, #2
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e98e:	b2da      	uxtb	r2, r3
 800e990:	233e      	movs	r3, #62	; 0x3e
 800e992:	2102      	movs	r1, #2
 800e994:	f7fe fd5f 	bl	800d456 <Chk_OptionalParamValidity>
 800e998:	4603      	mov	r3, r0
 800e99a:	461a      	mov	r2, r3
 800e99c:	7dfb      	ldrb	r3, [r7, #23]
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	75fb      	strb	r3, [r7, #23]
    
      if(result == MOBLE_RESULT_SUCCESS)
 800e9a2:	7dfb      	ldrb	r3, [r7, #23]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f040 809f 	bne.w	800eae8 <GenericModelServer_ProcessMessageCb+0x228>
      {
        /* when device is working as proxy and is a part of node
           delay is included in LED toggle */              
        if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr,\
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	8898      	ldrh	r0, [r3, #4]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	88d9      	ldrh	r1, [r3, #6]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	f7fe ff9d 	bl	800d8f8 <Chk_TidValidity>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	75fb      	strb	r3, [r7, #23]
 800e9c2:	7dfb      	ldrb	r3, [r7, #23]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	f200 808f 	bhi.w	800eae8 <GenericModelServer_ProcessMessageCb+0x228>
                                             pmsgParam->dst_peer, pRxData[1])))
        {
          Generic_OnOff_Set(pRxData, dataLength, pmsgParam);  
 800e9ca:	68fa      	ldr	r2, [r7, #12]
 800e9cc:	6839      	ldr	r1, [r7, #0]
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f7ff f8a8 	bl	800db24 <Generic_OnOff_Set>
          Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_ONOFF_SERVER_MODEL_ID;
 800e9d4:	4b54      	ldr	r3, [pc, #336]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800e9d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e9da:	805a      	strh	r2, [r3, #2]
          Model_Binding_Var.Model_Rx_Opcode = opcode;
 800e9dc:	4a52      	ldr	r2, [pc, #328]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800e9de:	897b      	ldrh	r3, [r7, #10]
 800e9e0:	8013      	strh	r3, [r2, #0]
          modelStateChangeFlag = MOBLE_TRUE;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	75bb      	strb	r3, [r7, #22]
          Publication1SecFlag.count = 0;
 800e9e6:	4b53      	ldr	r3, [pc, #332]	; (800eb34 <GenericModelServer_ProcessMessageCb+0x274>)
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	709a      	strb	r2, [r3, #2]
        }
      }
        
      break;
 800e9ec:	e07c      	b.n	800eae8 <GenericModelServer_ProcessMessageCb+0x228>
  
    case GENERIC_LEVEL_SET_ACK:
    case GENERIC_LEVEL_SET_UNACK: 
    {   
       
      result = Chk_ParamMinMaxIntValidity(INT16_MIN ,pRxData , INT16_MAX );        
 800e9ee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e9f2:	6879      	ldr	r1, [r7, #4]
 800e9f4:	4850      	ldr	r0, [pc, #320]	; (800eb38 <GenericModelServer_ProcessMessageCb+0x278>)
 800e9f6:	f7fe fd4d 	bl	800d494 <Chk_ParamMinMaxIntValidity>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	75fb      	strb	r3, [r7, #23]
      if(result == MOBLE_RESULT_SUCCESS)
 800e9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d173      	bne.n	800eaec <GenericModelServer_ProcessMessageCb+0x22c>
      {
        if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr, 
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	8898      	ldrh	r0, [r3, #4]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	88d9      	ldrh	r1, [r3, #6]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	3302      	adds	r3, #2
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	461a      	mov	r2, r3
 800ea14:	f7fe ff70 	bl	800d8f8 <Chk_TidValidity>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	75fb      	strb	r3, [r7, #23]
 800ea1c:	7dfb      	ldrb	r3, [r7, #23]
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d864      	bhi.n	800eaec <GenericModelServer_ProcessMessageCb+0x22c>
                                                  pmsgParam->dst_peer,
                                                  pRxData[2])))
        {
          Generic_Level_Set(pRxData, dataLength, pmsgParam);  
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	6839      	ldr	r1, [r7, #0]
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f7ff f9fe 	bl	800de28 <Generic_Level_Set>
          Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_LEVEL_SERVER_MODEL_ID;
 800ea2c:	4b3e      	ldr	r3, [pc, #248]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800ea2e:	f241 0202 	movw	r2, #4098	; 0x1002
 800ea32:	805a      	strh	r2, [r3, #2]
          Model_Binding_Var.Model_Rx_Opcode = opcode;
 800ea34:	4a3c      	ldr	r2, [pc, #240]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800ea36:	897b      	ldrh	r3, [r7, #10]
 800ea38:	8013      	strh	r3, [r2, #0]
          modelStateChangeFlag = MOBLE_TRUE;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	75bb      	strb	r3, [r7, #22]
          Publication1SecFlag.count = 0;
 800ea3e:	4b3d      	ldr	r3, [pc, #244]	; (800eb34 <GenericModelServer_ProcessMessageCb+0x274>)
 800ea40:	2200      	movs	r2, #0
 800ea42:	709a      	strb	r2, [r3, #2]
        }
      }
       
      break;
 800ea44:	e052      	b.n	800eaec <GenericModelServer_ProcessMessageCb+0x22c>
        Delta Level 4 The Delta change of the Generic Level state 
        TID 1 Transaction Identifier 
        Transition Time 1 Format as defined in Section 3.1.3. (Optional) 
        Delay 1 Message execution delay in 5 milliseconds steps (C.1)
      */
      Generic_Delta_Set(pRxData,dataLength, pmsgParam);   
 800ea46:	68fa      	ldr	r2, [r7, #12]
 800ea48:	6839      	ldr	r1, [r7, #0]
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f7ff faf0 	bl	800e030 <Generic_Delta_Set>
      Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_LEVEL_SERVER_MODEL_ID;
 800ea50:	4b35      	ldr	r3, [pc, #212]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800ea52:	f241 0202 	movw	r2, #4098	; 0x1002
 800ea56:	805a      	strh	r2, [r3, #2]
      Model_Binding_Var.Model_Rx_Opcode = opcode;
 800ea58:	4a33      	ldr	r2, [pc, #204]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800ea5a:	897b      	ldrh	r3, [r7, #10]
 800ea5c:	8013      	strh	r3, [r2, #0]
      modelStateChangeFlag = MOBLE_TRUE;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	75bb      	strb	r3, [r7, #22]
      Publication1SecFlag.count = 0;
 800ea62:	4b34      	ldr	r3, [pc, #208]	; (800eb34 <GenericModelServer_ProcessMessageCb+0x274>)
 800ea64:	2200      	movs	r2, #0
 800ea66:	709a      	strb	r2, [r3, #2]
      break;
 800ea68:	e045      	b.n	800eaf6 <GenericModelServer_ProcessMessageCb+0x236>
      
    case GENERIC_MOVE_SET:
    case GENERIC_MOVE_SET_UNACK:
    {    
       
      result = Chk_ParamMinMaxIntValidity(INT16_MIN ,pRxData , INT16_MAX );       
 800ea6a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ea6e:	6879      	ldr	r1, [r7, #4]
 800ea70:	4831      	ldr	r0, [pc, #196]	; (800eb38 <GenericModelServer_ProcessMessageCb+0x278>)
 800ea72:	f7fe fd0f 	bl	800d494 <Chk_ParamMinMaxIntValidity>
 800ea76:	4603      	mov	r3, r0
 800ea78:	75fb      	strb	r3, [r7, #23]
      if(result == MOBLE_RESULT_SUCCESS)
 800ea7a:	7dfb      	ldrb	r3, [r7, #23]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d137      	bne.n	800eaf0 <GenericModelServer_ProcessMessageCb+0x230>
      {
        if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr, 
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	8898      	ldrh	r0, [r3, #4]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	88d9      	ldrh	r1, [r3, #6]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	3302      	adds	r3, #2
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	461a      	mov	r2, r3
 800ea90:	f7fe ff32 	bl	800d8f8 <Chk_TidValidity>
 800ea94:	4603      	mov	r3, r0
 800ea96:	75fb      	strb	r3, [r7, #23]
 800ea98:	7dfb      	ldrb	r3, [r7, #23]
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d828      	bhi.n	800eaf0 <GenericModelServer_ProcessMessageCb+0x230>
                                                  pmsgParam->dst_peer,
                                                  pRxData[2])))
        {
          Generic_Move_Set(pRxData, dataLength, pmsgParam);  
 800ea9e:	68fa      	ldr	r2, [r7, #12]
 800eaa0:	6839      	ldr	r1, [r7, #0]
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f7ff fc90 	bl	800e3c8 <Generic_Move_Set>
        }
      }
      break;
 800eaa8:	e022      	b.n	800eaf0 <GenericModelServer_ProcessMessageCb+0x230>
#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF
    
    case GENERIC_POWER_ON_OFF_SET: 
    case GENERIC_POWER_ON_OFF_SET_UNACK:
    {
      result = Chk_ParamValidity(pRxData[0], GENERIC_POWER_RESTORE_STATE); 
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	2102      	movs	r1, #2
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fe fc83 	bl	800d3bc <Chk_ParamValidity>
 800eab6:	4603      	mov	r3, r0
 800eab8:	75fb      	strb	r3, [r7, #23]
      if(result == MOBLE_RESULT_SUCCESS)
 800eaba:	7dfb      	ldrb	r3, [r7, #23]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d119      	bne.n	800eaf4 <GenericModelServer_ProcessMessageCb+0x234>
      {
        Generic_PowerOnOff_Set(pRxData, dataLength, pmsgParam); 
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	6839      	ldr	r1, [r7, #0]
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7ff fe3b 	bl	800e740 <Generic_PowerOnOff_Set>
        Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_POWER_ONOFF_SERVER_MODEL_ID;
 800eaca:	4b17      	ldr	r3, [pc, #92]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800eacc:	f241 0206 	movw	r2, #4102	; 0x1006
 800ead0:	805a      	strh	r2, [r3, #2]
        Model_Binding_Var.Model_Rx_Opcode = opcode;
 800ead2:	4a15      	ldr	r2, [pc, #84]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800ead4:	897b      	ldrh	r3, [r7, #10]
 800ead6:	8013      	strh	r3, [r2, #0]
        modelStateChangeFlag = MOBLE_TRUE;
 800ead8:	2301      	movs	r3, #1
 800eada:	75bb      	strb	r3, [r7, #22]
        Publication1SecFlag.count = 0;
 800eadc:	4b15      	ldr	r3, [pc, #84]	; (800eb34 <GenericModelServer_ProcessMessageCb+0x274>)
 800eade:	2200      	movs	r2, #0
 800eae0:	709a      	strb	r2, [r3, #2]
      }
      break;
 800eae2:	e007      	b.n	800eaf4 <GenericModelServer_ProcessMessageCb+0x234>
  
#endif    
    
    default:
    {
      break;
 800eae4:	bf00      	nop
 800eae6:	e006      	b.n	800eaf6 <GenericModelServer_ProcessMessageCb+0x236>
      break;
 800eae8:	bf00      	nop
 800eaea:	e004      	b.n	800eaf6 <GenericModelServer_ProcessMessageCb+0x236>
      break;
 800eaec:	bf00      	nop
 800eaee:	e002      	b.n	800eaf6 <GenericModelServer_ProcessMessageCb+0x236>
      break;
 800eaf0:	bf00      	nop
 800eaf2:	e000      	b.n	800eaf6 <GenericModelServer_ProcessMessageCb+0x236>
      break;
 800eaf4:	bf00      	nop
    }          
  } /* Switch ends */
          
  if((result == MOBLE_RESULT_SUCCESS) && (response == MOBLE_TRUE))
 800eaf6:	7dfb      	ldrb	r3, [r7, #23]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d12b      	bne.n	800eb54 <GenericModelServer_ProcessMessageCb+0x294>
 800eafc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d127      	bne.n	800eb54 <GenericModelServer_ProcessMessageCb+0x294>
  {
    if(ADDRESS_IS_UNICAST(pmsgParam->dst_peer))
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	88db      	ldrh	r3, [r3, #6]
 800eb08:	b21b      	sxth	r3, r3
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	dd16      	ble.n	800eb3c <GenericModelServer_ProcessMessageCb+0x27c>
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	88db      	ldrh	r3, [r3, #6]
 800eb12:	b21b      	sxth	r3, r3
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	db11      	blt.n	800eb3c <GenericModelServer_ProcessMessageCb+0x27c>
    {
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800eb18:	8979      	ldrh	r1, [r7, #10]
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	687a      	ldr	r2, [r7, #4]
 800eb1e:	68f8      	ldr	r0, [r7, #12]
 800eb20:	f019 fcba 	bl	8028498 <Model_SendResponse>
 800eb24:	e016      	b.n	800eb54 <GenericModelServer_ProcessMessageCb+0x294>
 800eb26:	bf00      	nop
 800eb28:	20004550 	.word	0x20004550
 800eb2c:	080330f8 	.word	0x080330f8
 800eb30:	0802f2bc 	.word	0x0802f2bc
 800eb34:	200045ac 	.word	0x200045ac
 800eb38:	ffff8000 	.word	0xffff8000
    }
    else
    {

      pmsgParam->dst_peer = BLEMesh_GetAddress();       // Replace group address by the single node address for response
 800eb3c:	f00e fa9e 	bl	801d07c <BLEMesh_GetAddress>
 800eb40:	4603      	mov	r3, r0
 800eb42:	461a      	mov	r2, r3
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	80da      	strh	r2, [r3, #6]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800eb48:	8979      	ldrh	r1, [r7, #10]
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	68f8      	ldr	r0, [r7, #12]
 800eb50:	f019 fca2 	bl	8028498 <Model_SendResponse>
     Publish the status to publish address if the publication is set by client 
     publication is independent of the response of the message.if thek condition 
     for publication is full filled as per specification then the status will be 
     published.
  */
  publishAddress = BLEMesh_GetPublishAddress(pmsgParam->elementIndex, Model_Binding_Var.Model_ID);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	4a1f      	ldr	r2, [pc, #124]	; (800ebd8 <GenericModelServer_ProcessMessageCb+0x318>)
 800eb5a:	8852      	ldrh	r2, [r2, #2]
 800eb5c:	4611      	mov	r1, r2
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f00e fa9c 	bl	801d09c <BLEMesh_GetPublishAddress>
 800eb64:	4603      	mov	r3, r0
 800eb66:	82bb      	strh	r3, [r7, #20]
    
  if((result == MOBLE_RESULT_SUCCESS) && 
 800eb68:	7dfb      	ldrb	r3, [r7, #23]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d12f      	bne.n	800ebce <GenericModelServer_ProcessMessageCb+0x30e>
 800eb6e:	8abb      	ldrh	r3, [r7, #20]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d02c      	beq.n	800ebce <GenericModelServer_ProcessMessageCb+0x30e>
     (publishAddress != 0x0000) && 
 800eb74:	7dbb      	ldrb	r3, [r7, #22]
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d129      	bne.n	800ebce <GenericModelServer_ProcessMessageCb+0x30e>
       (modelStateChangeFlag == MOBLE_TRUE))
  {
    if(ADDRESS_IS_UNICAST(pmsgParam->dst_peer))
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	88db      	ldrh	r3, [r3, #6]
 800eb7e:	b21b      	sxth	r3, r3
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	dd0e      	ble.n	800eba2 <GenericModelServer_ProcessMessageCb+0x2e2>
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	88db      	ldrh	r3, [r3, #6]
 800eb88:	b21b      	sxth	r3, r3
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	db09      	blt.n	800eba2 <GenericModelServer_ProcessMessageCb+0x2e2>
    {
      pmsgParam->peer_addr = publishAddress;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	8aba      	ldrh	r2, [r7, #20]
 800eb92:	809a      	strh	r2, [r3, #4]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800eb94:	8979      	ldrh	r1, [r7, #10]
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	68f8      	ldr	r0, [r7, #12]
 800eb9c:	f019 fc7c 	bl	8028498 <Model_SendResponse>
 800eba0:	e00e      	b.n	800ebc0 <GenericModelServer_ProcessMessageCb+0x300>
    }
        else
    {

      pmsgParam->peer_addr = publishAddress;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	8aba      	ldrh	r2, [r7, #20]
 800eba6:	809a      	strh	r2, [r3, #4]
      pmsgParam->dst_peer = BLEMesh_GetAddress();       // Replace group address by the single node address for response
 800eba8:	f00e fa68 	bl	801d07c <BLEMesh_GetAddress>
 800ebac:	4603      	mov	r3, r0
 800ebae:	461a      	mov	r2, r3
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	80da      	strh	r2, [r3, #6]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800ebb4:	8979      	ldrh	r1, [r7, #10]
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	68f8      	ldr	r0, [r7, #12]
 800ebbc:	f019 fc6c 	bl	8028498 <Model_SendResponse>
    }
                
      modelStateChangeFlag = MOBLE_FALSE;   
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	75bb      	strb	r3, [r7, #22]
      TRACE_I(TF_GENERIC_M,"Publishing state when change to the address %.2X \r\n",publishAddress);
 800ebc4:	8abb      	ldrh	r3, [r7, #20]
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	4804      	ldr	r0, [pc, #16]	; (800ebdc <GenericModelServer_ProcessMessageCb+0x31c>)
 800ebca:	f01a fdc5 	bl	8029758 <iprintf>
  }
  return MOBLE_RESULT_SUCCESS;
 800ebce:	2300      	movs	r3, #0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	371c      	adds	r7, #28
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd90      	pop	{r4, r7, pc}
 800ebd8:	20004550 	.word	0x20004550
 800ebdc:	0802f308 	.word	0x0802f308

0800ebe0 <Generic_TransitionBehaviour>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Generic_TransitionBehaviour(MOBLEUINT8 *GetValue, 
                                         MOBLEUINT8 elementIndex)
{
 800ebe0:	b5b0      	push	{r4, r5, r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af02      	add	r7, sp, #8
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	460b      	mov	r3, r1
 800ebea:	70fb      	strb	r3, [r7, #3]
  static MOBLEUINT32 Check_time;
  MOBLEUINT16 targetRange;
  MOBLEUINT16 targetSlot;
  
  /* Taking the time stamp for particular time */
  if(Clockflag == 0)
 800ebec:	4b5e      	ldr	r3, [pc, #376]	; (800ed68 <Generic_TransitionBehaviour+0x188>)
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d107      	bne.n	800ec04 <Generic_TransitionBehaviour+0x24>
  {
    Check_time = Clock_Time();
 800ebf4:	f7f9 f942 	bl	8007e7c <HAL_GetTick>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	4a5c      	ldr	r2, [pc, #368]	; (800ed6c <Generic_TransitionBehaviour+0x18c>)
 800ebfc:	6013      	str	r3, [r2, #0]
    Clockflag = 1;
 800ebfe:	4b5a      	ldr	r3, [pc, #360]	; (800ed68 <Generic_TransitionBehaviour+0x188>)
 800ec00:	2201      	movs	r2, #1
 800ec02:	701a      	strb	r2, [r3, #0]
  }
  
  /* Publication after 1 second if total transition time is greater than 2 sec.*/
  if(Generic_TimeParam[elementIndex].TotalTime >2000)
 800ec04:	78fa      	ldrb	r2, [r7, #3]
 800ec06:	495a      	ldr	r1, [pc, #360]	; (800ed70 <Generic_TransitionBehaviour+0x190>)
 800ec08:	4613      	mov	r3, r2
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	4413      	add	r3, r2
 800ec0e:	005b      	lsls	r3, r3, #1
 800ec10:	440b      	add	r3, r1
 800ec12:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800ec16:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ec1a:	d901      	bls.n	800ec20 <Generic_TransitionBehaviour+0x40>
  {
    Punblication_OneSecTimer();
 800ec1c:	f002 ffce 	bl	8011bbc <Punblication_OneSecTimer>
  }
  /* Values from application are copied into Temporary variables for processing */
  
  Generic_TemporaryStatus[elementIndex].PresentValue16  = GetValue[1] << 8;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	3301      	adds	r3, #1
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	021b      	lsls	r3, r3, #8
 800ec28:	78fa      	ldrb	r2, [r7, #3]
 800ec2a:	b218      	sxth	r0, r3
 800ec2c:	4951      	ldr	r1, [pc, #324]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ec2e:	4613      	mov	r3, r2
 800ec30:	009b      	lsls	r3, r3, #2
 800ec32:	4413      	add	r3, r2
 800ec34:	440b      	add	r3, r1
 800ec36:	4602      	mov	r2, r0
 800ec38:	f8a3 2001 	strh.w	r2, [r3, #1]
  Generic_TemporaryStatus[elementIndex].PresentValue16 |= GetValue[0];
 800ec3c:	78fa      	ldrb	r2, [r7, #3]
 800ec3e:	494d      	ldr	r1, [pc, #308]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ec40:	4613      	mov	r3, r2
 800ec42:	009b      	lsls	r3, r3, #2
 800ec44:	4413      	add	r3, r2
 800ec46:	440b      	add	r3, r1
 800ec48:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ec4c:	b219      	sxth	r1, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	b21b      	sxth	r3, r3
 800ec54:	78fa      	ldrb	r2, [r7, #3]
 800ec56:	430b      	orrs	r3, r1
 800ec58:	b218      	sxth	r0, r3
 800ec5a:	4946      	ldr	r1, [pc, #280]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ec5c:	4613      	mov	r3, r2
 800ec5e:	009b      	lsls	r3, r3, #2
 800ec60:	4413      	add	r3, r2
 800ec62:	440b      	add	r3, r1
 800ec64:	4602      	mov	r2, r0
 800ec66:	f8a3 2001 	strh.w	r2, [r3, #1]
  /* if condition to wait until the time is equal to the given resolution time */
  if(((Clock_Time()- Check_time) >= Generic_TimeParam[elementIndex].Res_Value))
 800ec6a:	f7f9 f907 	bl	8007e7c <HAL_GetTick>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	4b3e      	ldr	r3, [pc, #248]	; (800ed6c <Generic_TransitionBehaviour+0x18c>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	1ad1      	subs	r1, r2, r3
 800ec76:	78fa      	ldrb	r2, [r7, #3]
 800ec78:	483d      	ldr	r0, [pc, #244]	; (800ed70 <Generic_TransitionBehaviour+0x190>)
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	009b      	lsls	r3, r3, #2
 800ec7e:	4413      	add	r3, r2
 800ec80:	005b      	lsls	r3, r3, #1
 800ec82:	4403      	add	r3, r0
 800ec84:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ec88:	4299      	cmp	r1, r3
 800ec8a:	f0c0 8171 	bcc.w	800ef70 <Generic_TransitionBehaviour+0x390>
  {     
    if(Generic_TimeParam[elementIndex].StepValue == 0)
 800ec8e:	78fa      	ldrb	r2, [r7, #3]
 800ec90:	4937      	ldr	r1, [pc, #220]	; (800ed70 <Generic_TransitionBehaviour+0x190>)
 800ec92:	4613      	mov	r3, r2
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	4413      	add	r3, r2
 800ec98:	005b      	lsls	r3, r3, #1
 800ec9a:	440b      	add	r3, r1
 800ec9c:	f993 3000 	ldrsb.w	r3, [r3]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d108      	bne.n	800ecb6 <Generic_TransitionBehaviour+0xd6>
    {
      Generic_TimeParam[elementIndex].StepValue = 1;
 800eca4:	78fa      	ldrb	r2, [r7, #3]
 800eca6:	4932      	ldr	r1, [pc, #200]	; (800ed70 <Generic_TransitionBehaviour+0x190>)
 800eca8:	4613      	mov	r3, r2
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	4413      	add	r3, r2
 800ecae:	005b      	lsls	r3, r3, #1
 800ecb0:	440b      	add	r3, r1
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	701a      	strb	r2, [r3, #0]
    }

    if(Generic_TemporaryStatus[elementIndex].TargetValue16 > Generic_TemporaryStatus[elementIndex].PresentValue16)
 800ecb6:	78fa      	ldrb	r2, [r7, #3]
 800ecb8:	492e      	ldr	r1, [pc, #184]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ecba:	4613      	mov	r3, r2
 800ecbc:	009b      	lsls	r3, r3, #2
 800ecbe:	4413      	add	r3, r2
 800ecc0:	440b      	add	r3, r1
 800ecc2:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ecc6:	b219      	sxth	r1, r3
 800ecc8:	78fa      	ldrb	r2, [r7, #3]
 800ecca:	482a      	ldr	r0, [pc, #168]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800eccc:	4613      	mov	r3, r2
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	4413      	add	r3, r2
 800ecd2:	4403      	add	r3, r0
 800ecd4:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ecd8:	b21b      	sxth	r3, r3
 800ecda:	4299      	cmp	r1, r3
 800ecdc:	dd4e      	ble.n	800ed7c <Generic_TransitionBehaviour+0x19c>
    {
      Generic_OnOffStatus[elementIndex].Present_OnOff_State = 1;
 800ecde:	78fa      	ldrb	r2, [r7, #3]
 800ece0:	4925      	ldr	r1, [pc, #148]	; (800ed78 <Generic_TransitionBehaviour+0x198>)
 800ece2:	4613      	mov	r3, r2
 800ece4:	005b      	lsls	r3, r3, #1
 800ece6:	4413      	add	r3, r2
 800ece8:	005b      	lsls	r3, r3, #1
 800ecea:	440b      	add	r3, r1
 800ecec:	2201      	movs	r2, #1
 800ecee:	701a      	strb	r2, [r3, #0]
      /* target range = total range to be covered */
      targetRange = 
        Generic_TemporaryStatus[elementIndex].TargetValue16 - Generic_TemporaryStatus[elementIndex].PresentValue16;
 800ecf0:	78fa      	ldrb	r2, [r7, #3]
 800ecf2:	4920      	ldr	r1, [pc, #128]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	4413      	add	r3, r2
 800ecfa:	440b      	add	r3, r1
 800ecfc:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ed00:	b21b      	sxth	r3, r3
 800ed02:	b299      	uxth	r1, r3
 800ed04:	78fa      	ldrb	r2, [r7, #3]
 800ed06:	481b      	ldr	r0, [pc, #108]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ed08:	4613      	mov	r3, r2
 800ed0a:	009b      	lsls	r3, r3, #2
 800ed0c:	4413      	add	r3, r2
 800ed0e:	4403      	add	r3, r0
 800ed10:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ed14:	b21b      	sxth	r3, r3
 800ed16:	b29b      	uxth	r3, r3
      targetRange = 
 800ed18:	1acb      	subs	r3, r1, r3
 800ed1a:	81fb      	strh	r3, [r7, #14]
      
      /* target slot = time to cover in single step */
      targetSlot = targetRange / Generic_TimeParam[elementIndex].StepValue;
 800ed1c:	89f9      	ldrh	r1, [r7, #14]
 800ed1e:	78fa      	ldrb	r2, [r7, #3]
 800ed20:	4813      	ldr	r0, [pc, #76]	; (800ed70 <Generic_TransitionBehaviour+0x190>)
 800ed22:	4613      	mov	r3, r2
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	4413      	add	r3, r2
 800ed28:	005b      	lsls	r3, r3, #1
 800ed2a:	4403      	add	r3, r0
 800ed2c:	f993 3000 	ldrsb.w	r3, [r3]
 800ed30:	fb91 f3f3 	sdiv	r3, r1, r3
 800ed34:	81bb      	strh	r3, [r7, #12]
      /* target slot added to present value to achieve target value */
      Generic_TemporaryStatus[elementIndex].PresentValue16 += targetSlot;      
 800ed36:	78fa      	ldrb	r2, [r7, #3]
 800ed38:	490e      	ldr	r1, [pc, #56]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	4413      	add	r3, r2
 800ed40:	440b      	add	r3, r1
 800ed42:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ed46:	b21b      	sxth	r3, r3
 800ed48:	b29a      	uxth	r2, r3
 800ed4a:	89bb      	ldrh	r3, [r7, #12]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	78fa      	ldrb	r2, [r7, #3]
 800ed52:	b218      	sxth	r0, r3
 800ed54:	4907      	ldr	r1, [pc, #28]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ed56:	4613      	mov	r3, r2
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	4413      	add	r3, r2
 800ed5c:	440b      	add	r3, r1
 800ed5e:	4602      	mov	r2, r0
 800ed60:	f8a3 2001 	strh.w	r2, [r3, #1]
 800ed64:	e061      	b.n	800ee2a <Generic_TransitionBehaviour+0x24a>
 800ed66:	bf00      	nop
 800ed68:	20004595 	.word	0x20004595
 800ed6c:	20004598 	.word	0x20004598
 800ed70:	20004570 	.word	0x20004570
 800ed74:	20004568 	.word	0x20004568
 800ed78:	20004588 	.word	0x20004588
    }              
    else if(Generic_TemporaryStatus[elementIndex].TargetValue16 < Generic_TemporaryStatus[elementIndex].PresentValue16)
 800ed7c:	78fa      	ldrb	r2, [r7, #3]
 800ed7e:	497f      	ldr	r1, [pc, #508]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ed80:	4613      	mov	r3, r2
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	4413      	add	r3, r2
 800ed86:	440b      	add	r3, r1
 800ed88:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ed8c:	b219      	sxth	r1, r3
 800ed8e:	78fa      	ldrb	r2, [r7, #3]
 800ed90:	487a      	ldr	r0, [pc, #488]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ed92:	4613      	mov	r3, r2
 800ed94:	009b      	lsls	r3, r3, #2
 800ed96:	4413      	add	r3, r2
 800ed98:	4403      	add	r3, r0
 800ed9a:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ed9e:	b21b      	sxth	r3, r3
 800eda0:	4299      	cmp	r1, r3
 800eda2:	da42      	bge.n	800ee2a <Generic_TransitionBehaviour+0x24a>
    {  
      Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0;
 800eda4:	78fa      	ldrb	r2, [r7, #3]
 800eda6:	4976      	ldr	r1, [pc, #472]	; (800ef80 <Generic_TransitionBehaviour+0x3a0>)
 800eda8:	4613      	mov	r3, r2
 800edaa:	005b      	lsls	r3, r3, #1
 800edac:	4413      	add	r3, r2
 800edae:	005b      	lsls	r3, r3, #1
 800edb0:	440b      	add	r3, r1
 800edb2:	2200      	movs	r2, #0
 800edb4:	701a      	strb	r2, [r3, #0]
      /* condition execute when transition is negative */
      /* target range = total range to be covered */ 
      targetRange = Generic_TemporaryStatus[elementIndex].PresentValue16 - Generic_TemporaryStatus[elementIndex].TargetValue16;
 800edb6:	78fa      	ldrb	r2, [r7, #3]
 800edb8:	4970      	ldr	r1, [pc, #448]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800edba:	4613      	mov	r3, r2
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	4413      	add	r3, r2
 800edc0:	440b      	add	r3, r1
 800edc2:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800edc6:	b21b      	sxth	r3, r3
 800edc8:	b299      	uxth	r1, r3
 800edca:	78fa      	ldrb	r2, [r7, #3]
 800edcc:	486b      	ldr	r0, [pc, #428]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800edce:	4613      	mov	r3, r2
 800edd0:	009b      	lsls	r3, r3, #2
 800edd2:	4413      	add	r3, r2
 800edd4:	4403      	add	r3, r0
 800edd6:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800edda:	b21b      	sxth	r3, r3
 800eddc:	b29b      	uxth	r3, r3
 800edde:	1acb      	subs	r3, r1, r3
 800ede0:	81fb      	strh	r3, [r7, #14]
      /* target slot = time to cover in single step */
      targetSlot = targetRange / Generic_TimeParam[elementIndex].StepValue;
 800ede2:	89f9      	ldrh	r1, [r7, #14]
 800ede4:	78fa      	ldrb	r2, [r7, #3]
 800ede6:	4867      	ldr	r0, [pc, #412]	; (800ef84 <Generic_TransitionBehaviour+0x3a4>)
 800ede8:	4613      	mov	r3, r2
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	4413      	add	r3, r2
 800edee:	005b      	lsls	r3, r3, #1
 800edf0:	4403      	add	r3, r0
 800edf2:	f993 3000 	ldrsb.w	r3, [r3]
 800edf6:	fb91 f3f3 	sdiv	r3, r1, r3
 800edfa:	81bb      	strh	r3, [r7, #12]
      /* target slot = time to cover in single step */
      Generic_TemporaryStatus[elementIndex].PresentValue16 -= targetSlot; 
 800edfc:	78fa      	ldrb	r2, [r7, #3]
 800edfe:	495f      	ldr	r1, [pc, #380]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ee00:	4613      	mov	r3, r2
 800ee02:	009b      	lsls	r3, r3, #2
 800ee04:	4413      	add	r3, r2
 800ee06:	440b      	add	r3, r1
 800ee08:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ee0c:	b21b      	sxth	r3, r3
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	89bb      	ldrh	r3, [r7, #12]
 800ee12:	1ad3      	subs	r3, r2, r3
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	78fa      	ldrb	r2, [r7, #3]
 800ee18:	b218      	sxth	r0, r3
 800ee1a:	4958      	ldr	r1, [pc, #352]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	4413      	add	r3, r2
 800ee22:	440b      	add	r3, r1
 800ee24:	4602      	mov	r2, r0
 800ee26:	f8a3 2001 	strh.w	r2, [r3, #1]
    }     
    else
    {
      
    }
    Generic_TimeParam[elementIndex].StepValue--;
 800ee2a:	78fa      	ldrb	r2, [r7, #3]
 800ee2c:	4955      	ldr	r1, [pc, #340]	; (800ef84 <Generic_TransitionBehaviour+0x3a4>)
 800ee2e:	4613      	mov	r3, r2
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	4413      	add	r3, r2
 800ee34:	005b      	lsls	r3, r3, #1
 800ee36:	440b      	add	r3, r1
 800ee38:	f993 3000 	ldrsb.w	r3, [r3]
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	3b01      	subs	r3, #1
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	b258      	sxtb	r0, r3
 800ee44:	494f      	ldr	r1, [pc, #316]	; (800ef84 <Generic_TransitionBehaviour+0x3a4>)
 800ee46:	4613      	mov	r3, r2
 800ee48:	009b      	lsls	r3, r3, #2
 800ee4a:	4413      	add	r3, r2
 800ee4c:	005b      	lsls	r3, r3, #1
 800ee4e:	440b      	add	r3, r1
 800ee50:	4602      	mov	r2, r0
 800ee52:	701a      	strb	r2, [r3, #0]
    /* updating the remaining time after each step covered*/
    Generic_TemporaryStatus[elementIndex].RemainingTime = Generic_TimeParam[elementIndex].StepValue | (Generic_TimeParam[elementIndex].ResBitValue << 6) ;
 800ee54:	78fa      	ldrb	r2, [r7, #3]
 800ee56:	494b      	ldr	r1, [pc, #300]	; (800ef84 <Generic_TransitionBehaviour+0x3a4>)
 800ee58:	4613      	mov	r3, r2
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	4413      	add	r3, r2
 800ee5e:	005b      	lsls	r3, r3, #1
 800ee60:	440b      	add	r3, r1
 800ee62:	f993 1000 	ldrsb.w	r1, [r3]
 800ee66:	78fa      	ldrb	r2, [r7, #3]
 800ee68:	4846      	ldr	r0, [pc, #280]	; (800ef84 <Generic_TransitionBehaviour+0x3a4>)
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	4413      	add	r3, r2
 800ee70:	005b      	lsls	r3, r3, #1
 800ee72:	4403      	add	r3, r0
 800ee74:	3301      	adds	r3, #1
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	019b      	lsls	r3, r3, #6
 800ee7a:	b25b      	sxtb	r3, r3
 800ee7c:	430b      	orrs	r3, r1
 800ee7e:	b25b      	sxtb	r3, r3
 800ee80:	78fa      	ldrb	r2, [r7, #3]
 800ee82:	b2d8      	uxtb	r0, r3
 800ee84:	493d      	ldr	r1, [pc, #244]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ee86:	4613      	mov	r3, r2
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	4413      	add	r3, r2
 800ee8c:	440b      	add	r3, r1
 800ee8e:	4602      	mov	r2, r0
 800ee90:	701a      	strb	r2, [r3, #0]
   
    Check_time = 0;
 800ee92:	4b3d      	ldr	r3, [pc, #244]	; (800ef88 <Generic_TransitionBehaviour+0x3a8>)
 800ee94:	2200      	movs	r2, #0
 800ee96:	601a      	str	r2, [r3, #0]
    Clockflag = 0;
 800ee98:	4b3c      	ldr	r3, [pc, #240]	; (800ef8c <Generic_TransitionBehaviour+0x3ac>)
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	701a      	strb	r2, [r3, #0]
    GenericUpdateFlag = VALUE_UPDATE_SET;
 800ee9e:	4b3c      	ldr	r3, [pc, #240]	; (800ef90 <Generic_TransitionBehaviour+0x3b0>)
 800eea0:	2201      	movs	r2, #1
 800eea2:	701a      	strb	r2, [r3, #0]
    /* when transition is completed, disable the transition by disabling 
       transition flag
    */
    if(Generic_TimeParam[elementIndex].StepValue <= 0)
 800eea4:	78fa      	ldrb	r2, [r7, #3]
 800eea6:	4937      	ldr	r1, [pc, #220]	; (800ef84 <Generic_TransitionBehaviour+0x3a4>)
 800eea8:	4613      	mov	r3, r2
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	4413      	add	r3, r2
 800eeae:	005b      	lsls	r3, r3, #1
 800eeb0:	440b      	add	r3, r1
 800eeb2:	f993 3000 	ldrsb.w	r3, [r3]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	dc32      	bgt.n	800ef20 <Generic_TransitionBehaviour+0x340>
    {
      if((Generic_OnOffStatus[elementIndex].Present_OnOff_State == 1) && (Generic_OnOffStatus[elementIndex].Target_OnOff == 0))
 800eeba:	78fa      	ldrb	r2, [r7, #3]
 800eebc:	4930      	ldr	r1, [pc, #192]	; (800ef80 <Generic_TransitionBehaviour+0x3a0>)
 800eebe:	4613      	mov	r3, r2
 800eec0:	005b      	lsls	r3, r3, #1
 800eec2:	4413      	add	r3, r2
 800eec4:	005b      	lsls	r3, r3, #1
 800eec6:	440b      	add	r3, r1
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	2b01      	cmp	r3, #1
 800eecc:	d114      	bne.n	800eef8 <Generic_TransitionBehaviour+0x318>
 800eece:	78fa      	ldrb	r2, [r7, #3]
 800eed0:	492b      	ldr	r1, [pc, #172]	; (800ef80 <Generic_TransitionBehaviour+0x3a0>)
 800eed2:	4613      	mov	r3, r2
 800eed4:	005b      	lsls	r3, r3, #1
 800eed6:	4413      	add	r3, r2
 800eed8:	005b      	lsls	r3, r3, #1
 800eeda:	440b      	add	r3, r1
 800eedc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d108      	bne.n	800eef8 <Generic_TransitionBehaviour+0x318>
      {
        Generic_OnOffStatus[elementIndex].Present_OnOff_State=0;
 800eee6:	78fa      	ldrb	r2, [r7, #3]
 800eee8:	4925      	ldr	r1, [pc, #148]	; (800ef80 <Generic_TransitionBehaviour+0x3a0>)
 800eeea:	4613      	mov	r3, r2
 800eeec:	005b      	lsls	r3, r3, #1
 800eeee:	4413      	add	r3, r2
 800eef0:	005b      	lsls	r3, r3, #1
 800eef2:	440b      	add	r3, r1
 800eef4:	2200      	movs	r2, #0
 800eef6:	701a      	strb	r2, [r3, #0]
      }
      Generic_ModelFlag[elementIndex].GenericTransitionFlag = MODEL_TRANSITION_STOP; 
 800eef8:	78fa      	ldrb	r2, [r7, #3]
 800eefa:	4926      	ldr	r1, [pc, #152]	; (800ef94 <Generic_TransitionBehaviour+0x3b4>)
 800eefc:	4613      	mov	r3, r2
 800eefe:	005b      	lsls	r3, r3, #1
 800ef00:	4413      	add	r3, r2
 800ef02:	440b      	add	r3, r1
 800ef04:	2200      	movs	r2, #0
 800ef06:	701a      	strb	r2, [r3, #0]
      Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt = MOBLE_TRUE;
 800ef08:	78fa      	ldrb	r2, [r7, #3]
 800ef0a:	4922      	ldr	r1, [pc, #136]	; (800ef94 <Generic_TransitionBehaviour+0x3b4>)
 800ef0c:	4613      	mov	r3, r2
 800ef0e:	005b      	lsls	r3, r3, #1
 800ef10:	4413      	add	r3, r2
 800ef12:	440b      	add	r3, r1
 800ef14:	3302      	adds	r3, #2
 800ef16:	2201      	movs	r2, #1
 800ef18:	701a      	strb	r2, [r3, #0]
      Publication1SecFlag.TimeStampFlag = MOBLE_FALSE;  
 800ef1a:	4b1f      	ldr	r3, [pc, #124]	; (800ef98 <Generic_TransitionBehaviour+0x3b8>)
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	705a      	strb	r2, [r3, #1]
    }
    TRACE_M(TF_GENERIC_M, "Inside virtual application at %ld, Current state 0x%.2x, Target state 0x%.2x, Remaining Time 0x%.2x \n\r",
 800ef20:	2100      	movs	r1, #0
 800ef22:	481e      	ldr	r0, [pc, #120]	; (800ef9c <Generic_TransitionBehaviour+0x3bc>)
 800ef24:	f7fe fb30 	bl	800d588 <TraceHeader>
 800ef28:	f7f8 ffa8 	bl	8007e7c <HAL_GetTick>
 800ef2c:	4601      	mov	r1, r0
 800ef2e:	78fa      	ldrb	r2, [r7, #3]
 800ef30:	4812      	ldr	r0, [pc, #72]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ef32:	4613      	mov	r3, r2
 800ef34:	009b      	lsls	r3, r3, #2
 800ef36:	4413      	add	r3, r2
 800ef38:	4403      	add	r3, r0
 800ef3a:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ef3e:	b21b      	sxth	r3, r3
 800ef40:	461c      	mov	r4, r3
 800ef42:	78fa      	ldrb	r2, [r7, #3]
 800ef44:	480d      	ldr	r0, [pc, #52]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ef46:	4613      	mov	r3, r2
 800ef48:	009b      	lsls	r3, r3, #2
 800ef4a:	4413      	add	r3, r2
 800ef4c:	4403      	add	r3, r0
 800ef4e:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ef52:	b21b      	sxth	r3, r3
 800ef54:	461d      	mov	r5, r3
 800ef56:	78fa      	ldrb	r2, [r7, #3]
 800ef58:	4808      	ldr	r0, [pc, #32]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ef5a:	4613      	mov	r3, r2
 800ef5c:	009b      	lsls	r3, r3, #2
 800ef5e:	4413      	add	r3, r2
 800ef60:	4403      	add	r3, r0
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	462b      	mov	r3, r5
 800ef68:	4622      	mov	r2, r4
 800ef6a:	480d      	ldr	r0, [pc, #52]	; (800efa0 <Generic_TransitionBehaviour+0x3c0>)
 800ef6c:	f01a fbf4 	bl	8029758 <iprintf>
            Clock_Time(), Generic_TemporaryStatus[elementIndex].PresentValue16,Generic_TemporaryStatus[elementIndex].TargetValue16,Generic_TemporaryStatus[elementIndex].RemainingTime);                     
  }
  return MOBLE_RESULT_SUCCESS;       
 800ef70:	2300      	movs	r3, #0

} 
 800ef72:	4618      	mov	r0, r3
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bdb0      	pop	{r4, r5, r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	20004568 	.word	0x20004568
 800ef80:	20004588 	.word	0x20004588
 800ef84:	20004570 	.word	0x20004570
 800ef88:	20004598 	.word	0x20004598
 800ef8c:	20004595 	.word	0x20004595
 800ef90:	20004593 	.word	0x20004593
 800ef94:	20004590 	.word	0x20004590
 800ef98:	200045ac 	.word	0x200045ac
 800ef9c:	0803311c 	.word	0x0803311c
 800efa0:	0802f33c 	.word	0x0802f33c

0800efa4 <Generic_GetStepValue>:
*                     is elementNumber-1
* retval void
*/
void Generic_GetStepValue(MOBLEUINT8 stepParam, 
                          MOBLEUINT8 elementIndex)
{
 800efa4:	b590      	push	{r4, r7, lr}
 800efa6:	b083      	sub	sp, #12
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	4603      	mov	r3, r0
 800efac:	460a      	mov	r2, r1
 800efae:	71fb      	strb	r3, [r7, #7]
 800efb0:	4613      	mov	r3, r2
 800efb2:	71bb      	strb	r3, [r7, #6]
    10 = resolution is 10000 ms.
    11 = resolution is 600000 ms. 
    Last bits from 0 to 5th index is step number.
  */
  
  Generic_TimeParam[elementIndex].ResBitValue = stepParam >> 6 ;
 800efb4:	79ba      	ldrb	r2, [r7, #6]
 800efb6:	79fb      	ldrb	r3, [r7, #7]
 800efb8:	099b      	lsrs	r3, r3, #6
 800efba:	b2d8      	uxtb	r0, r3
 800efbc:	494b      	ldr	r1, [pc, #300]	; (800f0ec <Generic_GetStepValue+0x148>)
 800efbe:	4613      	mov	r3, r2
 800efc0:	009b      	lsls	r3, r3, #2
 800efc2:	4413      	add	r3, r2
 800efc4:	005b      	lsls	r3, r3, #1
 800efc6:	440b      	add	r3, r1
 800efc8:	3301      	adds	r3, #1
 800efca:	4602      	mov	r2, r0
 800efcc:	701a      	strb	r2, [r3, #0]
  Generic_TimeParam[elementIndex].Res_Value = Get_StepResolutionValue(Generic_TimeParam[elementIndex].ResBitValue);
 800efce:	79ba      	ldrb	r2, [r7, #6]
 800efd0:	4946      	ldr	r1, [pc, #280]	; (800f0ec <Generic_GetStepValue+0x148>)
 800efd2:	4613      	mov	r3, r2
 800efd4:	009b      	lsls	r3, r3, #2
 800efd6:	4413      	add	r3, r2
 800efd8:	005b      	lsls	r3, r3, #1
 800efda:	440b      	add	r3, r1
 800efdc:	3301      	adds	r3, #1
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	79bc      	ldrb	r4, [r7, #6]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fe faa4 	bl	800d530 <Get_StepResolutionValue>
 800efe8:	4602      	mov	r2, r0
 800efea:	4940      	ldr	r1, [pc, #256]	; (800f0ec <Generic_GetStepValue+0x148>)
 800efec:	4623      	mov	r3, r4
 800efee:	009b      	lsls	r3, r3, #2
 800eff0:	4423      	add	r3, r4
 800eff2:	005b      	lsls	r3, r3, #1
 800eff4:	440b      	add	r3, r1
 800eff6:	f8c3 2002 	str.w	r2, [r3, #2]
  Generic_TimeParam[elementIndex].StepValue = stepParam & 0x3F ;
 800effa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800effe:	79ba      	ldrb	r2, [r7, #6]
 800f000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f004:	b258      	sxtb	r0, r3
 800f006:	4939      	ldr	r1, [pc, #228]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f008:	4613      	mov	r3, r2
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	4413      	add	r3, r2
 800f00e:	005b      	lsls	r3, r3, #1
 800f010:	440b      	add	r3, r1
 800f012:	4602      	mov	r2, r0
 800f014:	701a      	strb	r2, [r3, #0]
  Generic_TimeParam[elementIndex].TotalTime = (Generic_TimeParam[elementIndex].StepValue * Generic_TimeParam[elementIndex].Res_Value);
 800f016:	79ba      	ldrb	r2, [r7, #6]
 800f018:	4934      	ldr	r1, [pc, #208]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f01a:	4613      	mov	r3, r2
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	4413      	add	r3, r2
 800f020:	005b      	lsls	r3, r3, #1
 800f022:	440b      	add	r3, r1
 800f024:	f993 3000 	ldrsb.w	r3, [r3]
 800f028:	4618      	mov	r0, r3
 800f02a:	79ba      	ldrb	r2, [r7, #6]
 800f02c:	492f      	ldr	r1, [pc, #188]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f02e:	4613      	mov	r3, r2
 800f030:	009b      	lsls	r3, r3, #2
 800f032:	4413      	add	r3, r2
 800f034:	005b      	lsls	r3, r3, #1
 800f036:	440b      	add	r3, r1
 800f038:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f03c:	79ba      	ldrb	r2, [r7, #6]
 800f03e:	fb03 f100 	mul.w	r1, r3, r0
 800f042:	482a      	ldr	r0, [pc, #168]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f044:	4613      	mov	r3, r2
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	4413      	add	r3, r2
 800f04a:	005b      	lsls	r3, r3, #1
 800f04c:	4403      	add	r3, r0
 800f04e:	f8c3 1006 	str.w	r1, [r3, #6]
  
  if(Generic_TimeParam[elementIndex].Res_Value >= 100)
 800f052:	79ba      	ldrb	r2, [r7, #6]
 800f054:	4925      	ldr	r1, [pc, #148]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f056:	4613      	mov	r3, r2
 800f058:	009b      	lsls	r3, r3, #2
 800f05a:	4413      	add	r3, r2
 800f05c:	005b      	lsls	r3, r3, #1
 800f05e:	440b      	add	r3, r1
 800f060:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f064:	2b63      	cmp	r3, #99	; 0x63
 800f066:	d923      	bls.n	800f0b0 <Generic_GetStepValue+0x10c>
  {
    Generic_TimeParam[elementIndex].Res_Value = Generic_TimeParam[elementIndex].Res_Value/TRANSITION_SCALER;
 800f068:	79b9      	ldrb	r1, [r7, #6]
 800f06a:	79ba      	ldrb	r2, [r7, #6]
 800f06c:	481f      	ldr	r0, [pc, #124]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f06e:	460b      	mov	r3, r1
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	440b      	add	r3, r1
 800f074:	005b      	lsls	r3, r3, #1
 800f076:	4403      	add	r3, r0
 800f078:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800f07c:	481b      	ldr	r0, [pc, #108]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f07e:	4613      	mov	r3, r2
 800f080:	009b      	lsls	r3, r3, #2
 800f082:	4413      	add	r3, r2
 800f084:	005b      	lsls	r3, r3, #1
 800f086:	4403      	add	r3, r0
 800f088:	f8c3 1002 	str.w	r1, [r3, #2]
    Generic_TimeParam[elementIndex].StepValue = (Generic_TimeParam[elementIndex].StepValue * TRANSITION_SCALER);
 800f08c:	79b9      	ldrb	r1, [r7, #6]
 800f08e:	79ba      	ldrb	r2, [r7, #6]
 800f090:	4816      	ldr	r0, [pc, #88]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f092:	460b      	mov	r3, r1
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	440b      	add	r3, r1
 800f098:	005b      	lsls	r3, r3, #1
 800f09a:	4403      	add	r3, r0
 800f09c:	f993 0000 	ldrsb.w	r0, [r3]
 800f0a0:	4912      	ldr	r1, [pc, #72]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f0a2:	4613      	mov	r3, r2
 800f0a4:	009b      	lsls	r3, r3, #2
 800f0a6:	4413      	add	r3, r2
 800f0a8:	005b      	lsls	r3, r3, #1
 800f0aa:	440b      	add	r3, r1
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	701a      	strb	r2, [r3, #0]
  }
  
  TRACE_M(TF_GENERIC_M," step resolution 0x%.2lx, number of step 0x%.2x \r\n",
 800f0b0:	2100      	movs	r1, #0
 800f0b2:	480f      	ldr	r0, [pc, #60]	; (800f0f0 <Generic_GetStepValue+0x14c>)
 800f0b4:	f7fe fa68 	bl	800d588 <TraceHeader>
 800f0b8:	79ba      	ldrb	r2, [r7, #6]
 800f0ba:	490c      	ldr	r1, [pc, #48]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f0bc:	4613      	mov	r3, r2
 800f0be:	009b      	lsls	r3, r3, #2
 800f0c0:	4413      	add	r3, r2
 800f0c2:	005b      	lsls	r3, r3, #1
 800f0c4:	440b      	add	r3, r1
 800f0c6:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800f0ca:	79ba      	ldrb	r2, [r7, #6]
 800f0cc:	4807      	ldr	r0, [pc, #28]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f0ce:	4613      	mov	r3, r2
 800f0d0:	009b      	lsls	r3, r3, #2
 800f0d2:	4413      	add	r3, r2
 800f0d4:	005b      	lsls	r3, r3, #1
 800f0d6:	4403      	add	r3, r0
 800f0d8:	f993 3000 	ldrsb.w	r3, [r3]
 800f0dc:	461a      	mov	r2, r3
 800f0de:	4805      	ldr	r0, [pc, #20]	; (800f0f4 <Generic_GetStepValue+0x150>)
 800f0e0:	f01a fb3a 	bl	8029758 <iprintf>
          Generic_TimeParam[elementIndex].Res_Value , Generic_TimeParam[elementIndex].StepValue );   
}
 800f0e4:	bf00      	nop
 800f0e6:	370c      	adds	r7, #12
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd90      	pop	{r4, r7, pc}
 800f0ec:	20004570 	.word	0x20004570
 800f0f0:	08033138 	.word	0x08033138
 800f0f4:	0802f3a4 	.word	0x0802f3a4

0800f0f8 <Generic_Process>:
*         particular Generic Model
* @param  void
* @retval void
*/ 
void Generic_Process(void)
{       
 800f0f8:	b590      	push	{r4, r7, lr}
 800f0fa:	b08d      	sub	sp, #52	; 0x34
 800f0fc:	af02      	add	r7, sp, #8
  MOBLE_ADDRESS publishAddress;
  MOBLE_ADDRESS my_Address = BLEMesh_GetAddress();
 800f0fe:	f00d ffbd 	bl	801d07c <BLEMesh_GetAddress>
 800f102:	4603      	mov	r3, r0
 800f104:	84fb      	strh	r3, [r7, #38]	; 0x26
  MOBLEUINT8 elementIndex;
  MOBLEUINT8 const pRxData[8] = {0};
 800f106:	2300      	movs	r3, #0
 800f108:	617b      	str	r3, [r7, #20]
 800f10a:	2300      	movs	r3, #0
 800f10c:	61bb      	str	r3, [r7, #24]
  MOBLEUINT32 dataLength = 0;
 800f10e:	2300      	movs	r3, #0
 800f110:	623b      	str	r3, [r7, #32]
  
#if defined ENABLE_GENERIC_MODEL_SERVER_ONOFF || defined ENABLE_GENERIC_MODEL_SERVER_LEVEL  
  MOBLEUINT8 Generic_GetBuff[8]; 
#endif     
  
  for(elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800f112:	2300      	movs	r3, #0
 800f114:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f118:	e10a      	b.n	800f330 <Generic_Process+0x238>
  {
    my_Address = my_Address+elementIndex;
 800f11a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f11e:	b29a      	uxth	r2, r3
 800f120:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f122:	4413      	add	r3, r2
 800f124:	84fb      	strh	r3, [r7, #38]	; 0x26
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF   
    if(Generic_ModelFlag[elementIndex].GenericTransitionFlag == GENERIC_ON_OFF_TRANSITION_START)
 800f126:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f12a:	4986      	ldr	r1, [pc, #536]	; (800f344 <Generic_Process+0x24c>)
 800f12c:	4613      	mov	r3, r2
 800f12e:	005b      	lsls	r3, r3, #1
 800f130:	4413      	add	r3, r2
 800f132:	440b      	add	r3, r1
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	2b01      	cmp	r3, #1
 800f138:	d16e      	bne.n	800f218 <Generic_Process+0x120>
    {   
      /* Fetching the state value from the application layer to middle layer */
      (Appli_GenericState_cb.GetOnOffValue_cb)(Generic_GetBuff, my_Address, elementIndex); 
 800f13a:	4b83      	ldr	r3, [pc, #524]	; (800f348 <Generic_Process+0x250>)
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f142:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800f144:	f107 000c 	add.w	r0, r7, #12
 800f148:	4798      	blx	r3
      
      Generic_TemporaryStatus[elementIndex].TargetValue16  = Generic_GetBuff[3] << 8;
 800f14a:	7bfb      	ldrb	r3, [r7, #15]
 800f14c:	021b      	lsls	r3, r3, #8
 800f14e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f152:	b218      	sxth	r0, r3
 800f154:	497d      	ldr	r1, [pc, #500]	; (800f34c <Generic_Process+0x254>)
 800f156:	4613      	mov	r3, r2
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	4413      	add	r3, r2
 800f15c:	440b      	add	r3, r1
 800f15e:	4602      	mov	r2, r0
 800f160:	f8a3 2003 	strh.w	r2, [r3, #3]
      Generic_TemporaryStatus[elementIndex].TargetValue16 |= Generic_GetBuff[2];
 800f164:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f168:	4978      	ldr	r1, [pc, #480]	; (800f34c <Generic_Process+0x254>)
 800f16a:	4613      	mov	r3, r2
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	4413      	add	r3, r2
 800f170:	440b      	add	r3, r1
 800f172:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800f176:	b219      	sxth	r1, r3
 800f178:	7bbb      	ldrb	r3, [r7, #14]
 800f17a:	b21b      	sxth	r3, r3
 800f17c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f180:	430b      	orrs	r3, r1
 800f182:	b218      	sxth	r0, r3
 800f184:	4971      	ldr	r1, [pc, #452]	; (800f34c <Generic_Process+0x254>)
 800f186:	4613      	mov	r3, r2
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	4413      	add	r3, r2
 800f18c:	440b      	add	r3, r1
 800f18e:	4602      	mov	r2, r0
 800f190:	f8a3 2003 	strh.w	r2, [r3, #3]
      
      /* Transition function called to change the state in transition */
      Generic_TransitionBehaviour(Generic_GetBuff, elementIndex); 
 800f194:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f198:	f107 030c 	add.w	r3, r7, #12
 800f19c:	4611      	mov	r1, r2
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7ff fd1e 	bl	800ebe0 <Generic_TransitionBehaviour>
      if(GenericUpdateFlag == VALUE_UPDATE_SET)
 800f1a4:	4b6a      	ldr	r3, [pc, #424]	; (800f350 <Generic_Process+0x258>)
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d135      	bne.n	800f218 <Generic_Process+0x120>
      {
        /* updating the state value after the each transition step complete */
        Generic_OnOffStateUpdate_Process(elementIndex);
 800f1ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f000 f8d9 	bl	800f368 <Generic_OnOffStateUpdate_Process>
        /* Application callback */
        (GenericAppli_cb.OnOff_Set_cb)(&Generic_OnOffStatus[elementIndex], OptionalParam, my_Address, elementIndex);  
 800f1b6:	4b67      	ldr	r3, [pc, #412]	; (800f354 <Generic_Process+0x25c>)
 800f1b8:	681c      	ldr	r4, [r3, #0]
 800f1ba:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f1be:	4613      	mov	r3, r2
 800f1c0:	005b      	lsls	r3, r3, #1
 800f1c2:	4413      	add	r3, r2
 800f1c4:	005b      	lsls	r3, r3, #1
 800f1c6:	4a64      	ldr	r2, [pc, #400]	; (800f358 <Generic_Process+0x260>)
 800f1c8:	1898      	adds	r0, r3, r2
 800f1ca:	4b64      	ldr	r3, [pc, #400]	; (800f35c <Generic_Process+0x264>)
 800f1cc:	7819      	ldrb	r1, [r3, #0]
 800f1ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f1d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f1d4:	47a0      	blx	r4
        /*binding of the generic on off with light model */
        GenericOnOff_LightActualBinding(&Generic_OnOffStatus[elementIndex],
 800f1d6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f1da:	4613      	mov	r3, r2
 800f1dc:	005b      	lsls	r3, r3, #1
 800f1de:	4413      	add	r3, r2
 800f1e0:	005b      	lsls	r3, r3, #1
 800f1e2:	4a5d      	ldr	r2, [pc, #372]	; (800f358 <Generic_Process+0x260>)
 800f1e4:	1898      	adds	r0, r3, r2
 800f1e6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f1ea:	4956      	ldr	r1, [pc, #344]	; (800f344 <Generic_Process+0x24c>)
 800f1ec:	4613      	mov	r3, r2
 800f1ee:	005b      	lsls	r3, r3, #1
 800f1f0:	4413      	add	r3, r2
 800f1f2:	440b      	add	r3, r1
 800f1f4:	781c      	ldrb	r4, [r3, #0]
 800f1f6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f1fa:	4952      	ldr	r1, [pc, #328]	; (800f344 <Generic_Process+0x24c>)
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	005b      	lsls	r3, r3, #1
 800f200:	4413      	add	r3, r2
 800f202:	440b      	add	r3, r1
 800f204:	3302      	adds	r3, #2
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800f20c:	4622      	mov	r2, r4
 800f20e:	f002 f90b 	bl	8011428 <GenericOnOff_LightActualBinding>
                                        elementIndex,
                                        Generic_ModelFlag[elementIndex].GenericTransitionFlag,
                                        Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt);
        GenericUpdateFlag = VALUE_UPDATE_RESET;     
 800f212:	4b4f      	ldr	r3, [pc, #316]	; (800f350 <Generic_Process+0x258>)
 800f214:	2200      	movs	r2, #0
 800f216:	701a      	strb	r2, [r3, #0]
      }
    }    
#endif 
 
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL       
    if(Generic_ModelFlag[elementIndex].GenericTransitionFlag == GENERIC_LEVEL_TRANSITION_START)
 800f218:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f21c:	4949      	ldr	r1, [pc, #292]	; (800f344 <Generic_Process+0x24c>)
 800f21e:	4613      	mov	r3, r2
 800f220:	005b      	lsls	r3, r3, #1
 800f222:	4413      	add	r3, r2
 800f224:	440b      	add	r3, r1
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	2b02      	cmp	r3, #2
 800f22a:	d14a      	bne.n	800f2c2 <Generic_Process+0x1ca>
    {    
      /* Fetching the state value from the application layer to middle layer */
      (Appli_GenericState_cb.GetLevelStatus_cb)(Generic_GetBuff, my_Address, elementIndex); 
 800f22c:	4b46      	ldr	r3, [pc, #280]	; (800f348 <Generic_Process+0x250>)
 800f22e:	689b      	ldr	r3, [r3, #8]
 800f230:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f234:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800f236:	f107 000c 	add.w	r0, r7, #12
 800f23a:	4798      	blx	r3
      /* Transition function called to change the state in transition */
      Generic_TransitionBehaviour(Generic_GetBuff, elementIndex); 
 800f23c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f240:	f107 030c 	add.w	r3, r7, #12
 800f244:	4611      	mov	r1, r2
 800f246:	4618      	mov	r0, r3
 800f248:	f7ff fcca 	bl	800ebe0 <Generic_TransitionBehaviour>
      if(GenericUpdateFlag == VALUE_UPDATE_SET)
 800f24c:	4b40      	ldr	r3, [pc, #256]	; (800f350 <Generic_Process+0x258>)
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	2b01      	cmp	r3, #1
 800f252:	d136      	bne.n	800f2c2 <Generic_Process+0x1ca>
      {
        /* updating the state value after the each transition step complete */
        Generic_LevelStateUpdate_Process(elementIndex);
 800f254:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f258:	4618      	mov	r0, r3
 800f25a:	f000 f931 	bl	800f4c0 <Generic_LevelStateUpdate_Process>
        /* Application callback */
        (GenericAppli_cb.Level_Set_cb)(&Generic_LevelStatus[elementIndex], 0, my_Address, elementIndex);  
 800f25e:	4b3d      	ldr	r3, [pc, #244]	; (800f354 <Generic_Process+0x25c>)
 800f260:	689c      	ldr	r4, [r3, #8]
 800f262:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f266:	4613      	mov	r3, r2
 800f268:	005b      	lsls	r3, r3, #1
 800f26a:	4413      	add	r3, r2
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	4a3c      	ldr	r2, [pc, #240]	; (800f360 <Generic_Process+0x268>)
 800f270:	1898      	adds	r0, r3, r2
 800f272:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f276:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f278:	2100      	movs	r1, #0
 800f27a:	47a0      	blx	r4
        /*binding of the generic Level with light model */
        GenericLevel_LightBinding(&Generic_LevelStatus[elementIndex],BINDING_GENERIC_LEVEL_SET,
 800f27c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f280:	4613      	mov	r3, r2
 800f282:	005b      	lsls	r3, r3, #1
 800f284:	4413      	add	r3, r2
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	4a35      	ldr	r2, [pc, #212]	; (800f360 <Generic_Process+0x268>)
 800f28a:	1898      	adds	r0, r3, r2
 800f28c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f290:	492c      	ldr	r1, [pc, #176]	; (800f344 <Generic_Process+0x24c>)
 800f292:	4613      	mov	r3, r2
 800f294:	005b      	lsls	r3, r3, #1
 800f296:	4413      	add	r3, r2
 800f298:	440b      	add	r3, r1
 800f29a:	7819      	ldrb	r1, [r3, #0]
 800f29c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f2a0:	4c28      	ldr	r4, [pc, #160]	; (800f344 <Generic_Process+0x24c>)
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	005b      	lsls	r3, r3, #1
 800f2a6:	4413      	add	r3, r2
 800f2a8:	4423      	add	r3, r4
 800f2aa:	3302      	adds	r3, #2
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f2b2:	9300      	str	r3, [sp, #0]
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	2101      	movs	r1, #1
 800f2b8:	f002 f980 	bl	80115bc <GenericLevel_LightBinding>
                                  elementIndex,
                                  Generic_ModelFlag[elementIndex].GenericTransitionFlag,
                                  Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt);
        GenericUpdateFlag = VALUE_UPDATE_RESET;
 800f2bc:	4b24      	ldr	r3, [pc, #144]	; (800f350 <Generic_Process+0x258>)
 800f2be:	2200      	movs	r2, #0
 800f2c0:	701a      	strb	r2, [r3, #0]
      }
      
    }   
#endif
  
    if(Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt == MOBLE_TRUE)
 800f2c2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f2c6:	491f      	ldr	r1, [pc, #124]	; (800f344 <Generic_Process+0x24c>)
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	005b      	lsls	r3, r3, #1
 800f2cc:	4413      	add	r3, r2
 800f2ce:	440b      	add	r3, r1
 800f2d0:	3302      	adds	r3, #2
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	d126      	bne.n	800f326 <Generic_Process+0x22e>
    {         
      publishAddress = BLEMesh_GetPublishAddress(elementIndex,Model_Binding_Var.Model_ID);
 800f2d8:	4b22      	ldr	r3, [pc, #136]	; (800f364 <Generic_Process+0x26c>)
 800f2da:	885b      	ldrh	r3, [r3, #2]
 800f2dc:	461a      	mov	r2, r3
 800f2de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f2e2:	4611      	mov	r1, r2
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f00d fed9 	bl	801d09c <BLEMesh_GetPublishAddress>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	83fb      	strh	r3, [r7, #30]
      if((publishAddress != 0x00))
 800f2ee:	8bfb      	ldrh	r3, [r7, #30]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d00e      	beq.n	800f312 <Generic_Process+0x21a>
      {

         MODEL_MessageHeader_t msgHdr;
         msgHdr.dst_peer = my_Address;
 800f2f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f2f6:	80fb      	strh	r3, [r7, #6]
         msgHdr.elementIndex = elementIndex;
 800f2f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f2fc:	703b      	strb	r3, [r7, #0]
         msgHdr.peer_addr = publishAddress;
 800f2fe:	8bfb      	ldrh	r3, [r7, #30]
 800f300:	80bb      	strh	r3, [r7, #4]
         Model_SendResponse(&msgHdr, Model_Binding_Var.Model_Rx_Opcode, pRxData, dataLength);
 800f302:	4b18      	ldr	r3, [pc, #96]	; (800f364 <Generic_Process+0x26c>)
 800f304:	8819      	ldrh	r1, [r3, #0]
 800f306:	f107 0214 	add.w	r2, r7, #20
 800f30a:	4638      	mov	r0, r7
 800f30c:	6a3b      	ldr	r3, [r7, #32]
 800f30e:	f019 f8c3 	bl	8028498 <Model_SendResponse>
         TRACE_M(TF_LIGHT_M, "Publishing the status after transition complete opcode %.2x model id %.2x \r\n",
         Model_Binding_Var.Model_Rx_Opcode,Model_Binding_Var.Model_ID);
      }
      Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt = MOBLE_FALSE;
 800f312:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f316:	490b      	ldr	r1, [pc, #44]	; (800f344 <Generic_Process+0x24c>)
 800f318:	4613      	mov	r3, r2
 800f31a:	005b      	lsls	r3, r3, #1
 800f31c:	4413      	add	r3, r2
 800f31e:	440b      	add	r3, r1
 800f320:	3302      	adds	r3, #2
 800f322:	2200      	movs	r2, #0
 800f324:	701a      	strb	r2, [r3, #0]
  for(elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800f326:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f32a:	3301      	adds	r3, #1
 800f32c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f330:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f334:	2b00      	cmp	r3, #0
 800f336:	f43f aef0 	beq.w	800f11a <Generic_Process+0x22>
    }
  }
}
 800f33a:	bf00      	nop
 800f33c:	bf00      	nop
 800f33e:	372c      	adds	r7, #44	; 0x2c
 800f340:	46bd      	mov	sp, r7
 800f342:	bd90      	pop	{r4, r7, pc}
 800f344:	20004590 	.word	0x20004590
 800f348:	08032d28 	.word	0x08032d28
 800f34c:	20004568 	.word	0x20004568
 800f350:	20004593 	.word	0x20004593
 800f354:	08032d00 	.word	0x08032d00
 800f358:	20004588 	.word	0x20004588
 800f35c:	20004594 	.word	0x20004594
 800f360:	2000457c 	.word	0x2000457c
 800f364:	20004550 	.word	0x20004550

0800f368 <Generic_OnOffStateUpdate_Process>:
*        Generic On Off model in application file from Temporary parameter in model file.
* @param void
* return MOBLE_RESULT.
*/
MOBLE_RESULT Generic_OnOffStateUpdate_Process(MOBLEUINT8 elementIndex)
{
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	4603      	mov	r3, r0
 800f370:	71fb      	strb	r3, [r7, #7]
  Generic_OnOffStatus[elementIndex].Present_OnOff_Value = Generic_TemporaryStatus[elementIndex].PresentValue16;
 800f372:	79fa      	ldrb	r2, [r7, #7]
 800f374:	492a      	ldr	r1, [pc, #168]	; (800f420 <Generic_OnOffStateUpdate_Process+0xb8>)
 800f376:	4613      	mov	r3, r2
 800f378:	009b      	lsls	r3, r3, #2
 800f37a:	4413      	add	r3, r2
 800f37c:	440b      	add	r3, r1
 800f37e:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800f382:	b21b      	sxth	r3, r3
 800f384:	79fa      	ldrb	r2, [r7, #7]
 800f386:	b298      	uxth	r0, r3
 800f388:	4926      	ldr	r1, [pc, #152]	; (800f424 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f38a:	4613      	mov	r3, r2
 800f38c:	005b      	lsls	r3, r3, #1
 800f38e:	4413      	add	r3, r2
 800f390:	005b      	lsls	r3, r3, #1
 800f392:	440b      	add	r3, r1
 800f394:	4602      	mov	r2, r0
 800f396:	f8a3 2001 	strh.w	r2, [r3, #1]
  if(Generic_TemporaryStatus[elementIndex].TargetValue16 == 0x01)
 800f39a:	79fa      	ldrb	r2, [r7, #7]
 800f39c:	4920      	ldr	r1, [pc, #128]	; (800f420 <Generic_OnOffStateUpdate_Process+0xb8>)
 800f39e:	4613      	mov	r3, r2
 800f3a0:	009b      	lsls	r3, r3, #2
 800f3a2:	4413      	add	r3, r2
 800f3a4:	440b      	add	r3, r1
 800f3a6:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800f3aa:	b21b      	sxth	r3, r3
 800f3ac:	2b01      	cmp	r3, #1
 800f3ae:	d109      	bne.n	800f3c4 <Generic_OnOffStateUpdate_Process+0x5c>
  {
    Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x01;
 800f3b0:	79fa      	ldrb	r2, [r7, #7]
 800f3b2:	491c      	ldr	r1, [pc, #112]	; (800f424 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f3b4:	4613      	mov	r3, r2
 800f3b6:	005b      	lsls	r3, r3, #1
 800f3b8:	4413      	add	r3, r2
 800f3ba:	005b      	lsls	r3, r3, #1
 800f3bc:	440b      	add	r3, r1
 800f3be:	2201      	movs	r2, #1
 800f3c0:	701a      	strb	r2, [r3, #0]
 800f3c2:	e014      	b.n	800f3ee <Generic_OnOffStateUpdate_Process+0x86>
  }
  else
  {
    if(Generic_OnOffStatus[elementIndex].Present_OnOff_Value == 0x00)
 800f3c4:	79fa      	ldrb	r2, [r7, #7]
 800f3c6:	4917      	ldr	r1, [pc, #92]	; (800f424 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f3c8:	4613      	mov	r3, r2
 800f3ca:	005b      	lsls	r3, r3, #1
 800f3cc:	4413      	add	r3, r2
 800f3ce:	005b      	lsls	r3, r3, #1
 800f3d0:	440b      	add	r3, r1
 800f3d2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d108      	bne.n	800f3ee <Generic_OnOffStateUpdate_Process+0x86>
    {
      Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x00;
 800f3dc:	79fa      	ldrb	r2, [r7, #7]
 800f3de:	4911      	ldr	r1, [pc, #68]	; (800f424 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	005b      	lsls	r3, r3, #1
 800f3e4:	4413      	add	r3, r2
 800f3e6:	005b      	lsls	r3, r3, #1
 800f3e8:	440b      	add	r3, r1
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	701a      	strb	r2, [r3, #0]
    }
  }
  Generic_OnOffStatus[elementIndex].RemainingTime = Generic_TemporaryStatus[elementIndex].RemainingTime;
 800f3ee:	79f9      	ldrb	r1, [r7, #7]
 800f3f0:	79fa      	ldrb	r2, [r7, #7]
 800f3f2:	480b      	ldr	r0, [pc, #44]	; (800f420 <Generic_OnOffStateUpdate_Process+0xb8>)
 800f3f4:	460b      	mov	r3, r1
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	440b      	add	r3, r1
 800f3fa:	4403      	add	r3, r0
 800f3fc:	7818      	ldrb	r0, [r3, #0]
 800f3fe:	4909      	ldr	r1, [pc, #36]	; (800f424 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f400:	4613      	mov	r3, r2
 800f402:	005b      	lsls	r3, r3, #1
 800f404:	4413      	add	r3, r2
 800f406:	005b      	lsls	r3, r3, #1
 800f408:	440b      	add	r3, r1
 800f40a:	3305      	adds	r3, #5
 800f40c:	4602      	mov	r2, r0
 800f40e:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 800f410:	2300      	movs	r3, #0
}
 800f412:	4618      	mov	r0, r3
 800f414:	370c      	adds	r7, #12
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop
 800f420:	20004568 	.word	0x20004568
 800f424:	20004588 	.word	0x20004588

0800f428 <Generic_Publish>:
*         button.
* @param  srcAddress: Source Address of the node 
* @retval void
*/ 
void Generic_Publish(MOBLE_ADDRESS srcAddress)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b088      	sub	sp, #32
 800f42c:	af04      	add	r7, sp, #16
 800f42e:	4603      	mov	r3, r0
 800f430:	80fb      	strh	r3, [r7, #6]
  MOBLEUINT8 generic_Buff[2]; 
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800f432:	2300      	movs	r3, #0
 800f434:	73fb      	strb	r3, [r7, #15]
  
  /* changes the LED status on other nodes in the network */
  if(CommandStatus == (MOBLEUINT16)APPLI_LED_ON)
 800f436:	4b1e      	ldr	r3, [pc, #120]	; (800f4b0 <Generic_Publish+0x88>)
 800f438:	881b      	ldrh	r3, [r3, #0]
 800f43a:	2b01      	cmp	r3, #1
 800f43c:	d102      	bne.n	800f444 <Generic_Publish+0x1c>
  {
    generic_Buff[0] = APPLI_LED_OFF;
 800f43e:	2300      	movs	r3, #0
 800f440:	733b      	strb	r3, [r7, #12]
 800f442:	e001      	b.n	800f448 <Generic_Publish+0x20>
  }
  else
  {
    generic_Buff[0] = APPLI_LED_ON;
 800f444:	2301      	movs	r3, #1
 800f446:	733b      	strb	r3, [r7, #12]
  }
  generic_Buff[1] = Model_Tid.TidSend;
 800f448:	4b1a      	ldr	r3, [pc, #104]	; (800f4b4 <Generic_Publish+0x8c>)
 800f44a:	785b      	ldrb	r3, [r3, #1]
 800f44c:	737b      	strb	r3, [r7, #13]
  
  result = BLEMesh_SetRemotePublication(GENERIC_ONOFF_SERVER_MODEL_ID, 
 800f44e:	f107 030c 	add.w	r3, r7, #12
 800f452:	88f9      	ldrh	r1, [r7, #6]
 800f454:	2200      	movs	r2, #0
 800f456:	9202      	str	r2, [sp, #8]
 800f458:	2200      	movs	r2, #0
 800f45a:	9201      	str	r2, [sp, #4]
 800f45c:	2202      	movs	r2, #2
 800f45e:	9200      	str	r2, [sp, #0]
 800f460:	f248 2203 	movw	r2, #33283	; 0x8203
 800f464:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f468:	f019 f8dc 	bl	8028624 <BLEMesh_SetRemotePublication>
 800f46c:	4603      	mov	r3, r0
 800f46e:	73fb      	strb	r3, [r7, #15]
                                        srcAddress ,
                                        GENERIC_ON_OFF_SET_UNACK, 
                                        generic_Buff, 2,
                                        MOBLE_FALSE, MOBLE_FALSE);
  Model_Tid.TidSend++;
 800f470:	4b10      	ldr	r3, [pc, #64]	; (800f4b4 <Generic_Publish+0x8c>)
 800f472:	785b      	ldrb	r3, [r3, #1]
 800f474:	3301      	adds	r3, #1
 800f476:	b2da      	uxtb	r2, r3
 800f478:	4b0e      	ldr	r3, [pc, #56]	; (800f4b4 <Generic_Publish+0x8c>)
 800f47a:	705a      	strb	r2, [r3, #1]
  if(Model_Tid.TidSend >= MAX_TID_VALUE)
 800f47c:	4b0d      	ldr	r3, [pc, #52]	; (800f4b4 <Generic_Publish+0x8c>)
 800f47e:	785b      	ldrb	r3, [r3, #1]
 800f480:	2bff      	cmp	r3, #255	; 0xff
 800f482:	d102      	bne.n	800f48a <Generic_Publish+0x62>
  {
    Model_Tid.TidSend = 0;
 800f484:	4b0b      	ldr	r3, [pc, #44]	; (800f4b4 <Generic_Publish+0x8c>)
 800f486:	2200      	movs	r2, #0
 800f488:	705a      	strb	r2, [r3, #1]
  }  
  if(result)
 800f48a:	7bfb      	ldrb	r3, [r7, #15]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d006      	beq.n	800f49e <Generic_Publish+0x76>
  {
    TRACE_M(TF_GENERIC_M, "Publication Error \r\n");
 800f490:	2100      	movs	r1, #0
 800f492:	4809      	ldr	r0, [pc, #36]	; (800f4b8 <Generic_Publish+0x90>)
 800f494:	f7fe f878 	bl	800d588 <TraceHeader>
 800f498:	4808      	ldr	r0, [pc, #32]	; (800f4bc <Generic_Publish+0x94>)
 800f49a:	f01a f9e3 	bl	8029864 <puts>
  }
  
  CommandStatus = generic_Buff[0];
 800f49e:	7b3b      	ldrb	r3, [r7, #12]
 800f4a0:	b29a      	uxth	r2, r3
 800f4a2:	4b03      	ldr	r3, [pc, #12]	; (800f4b0 <Generic_Publish+0x88>)
 800f4a4:	801a      	strh	r2, [r3, #0]
}
 800f4a6:	bf00      	nop
 800f4a8:	3710      	adds	r7, #16
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
 800f4ae:	bf00      	nop
 800f4b0:	20006e6c 	.word	0x20006e6c
 800f4b4:	20004548 	.word	0x20004548
 800f4b8:	08033150 	.word	0x08033150
 800f4bc:	0802f3d8 	.word	0x0802f3d8

0800f4c0 <Generic_LevelStateUpdate_Process>:
*        Level model in application file from Temporary parameter in model file.
* @param void
* return MOBLE_RESULT.
*/
MOBLE_RESULT Generic_LevelStateUpdate_Process(MOBLEUINT8 elementIndex)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	71fb      	strb	r3, [r7, #7]
  Generic_LevelStatus[elementIndex].Present_Level16 = Generic_TemporaryStatus[elementIndex].PresentValue16;
 800f4ca:	79f9      	ldrb	r1, [r7, #7]
 800f4cc:	79fa      	ldrb	r2, [r7, #7]
 800f4ce:	481d      	ldr	r0, [pc, #116]	; (800f544 <Generic_LevelStateUpdate_Process+0x84>)
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	440b      	add	r3, r1
 800f4d6:	4403      	add	r3, r0
 800f4d8:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800f4dc:	b218      	sxth	r0, r3
 800f4de:	491a      	ldr	r1, [pc, #104]	; (800f548 <Generic_LevelStateUpdate_Process+0x88>)
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	005b      	lsls	r3, r3, #1
 800f4e4:	4413      	add	r3, r2
 800f4e6:	009b      	lsls	r3, r3, #2
 800f4e8:	440b      	add	r3, r1
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	801a      	strh	r2, [r3, #0]
  Generic_LevelStatus[elementIndex].Target_Level16  = Generic_TemporaryStatus[elementIndex].TargetValue16;
 800f4ee:	79f9      	ldrb	r1, [r7, #7]
 800f4f0:	79fa      	ldrb	r2, [r7, #7]
 800f4f2:	4814      	ldr	r0, [pc, #80]	; (800f544 <Generic_LevelStateUpdate_Process+0x84>)
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	009b      	lsls	r3, r3, #2
 800f4f8:	440b      	add	r3, r1
 800f4fa:	4403      	add	r3, r0
 800f4fc:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800f500:	b218      	sxth	r0, r3
 800f502:	4911      	ldr	r1, [pc, #68]	; (800f548 <Generic_LevelStateUpdate_Process+0x88>)
 800f504:	4613      	mov	r3, r2
 800f506:	005b      	lsls	r3, r3, #1
 800f508:	4413      	add	r3, r2
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	440b      	add	r3, r1
 800f50e:	3302      	adds	r3, #2
 800f510:	4602      	mov	r2, r0
 800f512:	801a      	strh	r2, [r3, #0]
  Generic_LevelStatus[elementIndex].RemainingTime   = Generic_TemporaryStatus[elementIndex].RemainingTime;
 800f514:	79f9      	ldrb	r1, [r7, #7]
 800f516:	79fa      	ldrb	r2, [r7, #7]
 800f518:	480a      	ldr	r0, [pc, #40]	; (800f544 <Generic_LevelStateUpdate_Process+0x84>)
 800f51a:	460b      	mov	r3, r1
 800f51c:	009b      	lsls	r3, r3, #2
 800f51e:	440b      	add	r3, r1
 800f520:	4403      	add	r3, r0
 800f522:	7818      	ldrb	r0, [r3, #0]
 800f524:	4908      	ldr	r1, [pc, #32]	; (800f548 <Generic_LevelStateUpdate_Process+0x88>)
 800f526:	4613      	mov	r3, r2
 800f528:	005b      	lsls	r3, r3, #1
 800f52a:	4413      	add	r3, r2
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	440b      	add	r3, r1
 800f530:	3304      	adds	r3, #4
 800f532:	4602      	mov	r2, r0
 800f534:	701a      	strb	r2, [r3, #0]
   
  return MOBLE_RESULT_SUCCESS;
 800f536:	2300      	movs	r3, #0
}
 800f538:	4618      	mov	r0, r3
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr
 800f544:	20004568 	.word	0x20004568
 800f548:	2000457c 	.word	0x2000457c

0800f54c <LightActual_GenericOnOffBinding>:
* @param lightActual: used to select the binding and reverse binding 
* return void.
*/
void LightActual_GenericOnOffBinding(Light_LightnessStatus_t* lightActual,
                                     MOBLEUINT8 elementIndex)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b083      	sub	sp, #12
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	460b      	mov	r3, r1
 800f556:	70fb      	strb	r3, [r7, #3]
  6.1.2.2.3 - Binding of actual light lightness with generic on off,
  As actual lightness will set which changes the on off state in 
  generic model
  */

  if(lightActual->LightnessPresentValue16 == 0x00)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	881b      	ldrh	r3, [r3, #0]
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d109      	bne.n	800f576 <LightActual_GenericOnOffBinding+0x2a>
  {
    Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x00;
 800f562:	78fa      	ldrb	r2, [r7, #3]
 800f564:	490b      	ldr	r1, [pc, #44]	; (800f594 <LightActual_GenericOnOffBinding+0x48>)
 800f566:	4613      	mov	r3, r2
 800f568:	005b      	lsls	r3, r3, #1
 800f56a:	4413      	add	r3, r2
 800f56c:	005b      	lsls	r3, r3, #1
 800f56e:	440b      	add	r3, r1
 800f570:	2200      	movs	r2, #0
 800f572:	701a      	strb	r2, [r3, #0]
  
  TRACE_M(TF_LIGHT_M, 
          "Light Actual binding with Generic On Off - Present OnOff value 0x%.2x \r\n", 
          Generic_OnOffStatus[elementIndex].Present_OnOff_State);    
 
}
 800f574:	e008      	b.n	800f588 <LightActual_GenericOnOffBinding+0x3c>
    Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x01;
 800f576:	78fa      	ldrb	r2, [r7, #3]
 800f578:	4906      	ldr	r1, [pc, #24]	; (800f594 <LightActual_GenericOnOffBinding+0x48>)
 800f57a:	4613      	mov	r3, r2
 800f57c:	005b      	lsls	r3, r3, #1
 800f57e:	4413      	add	r3, r2
 800f580:	005b      	lsls	r3, r3, #1
 800f582:	440b      	add	r3, r1
 800f584:	2201      	movs	r2, #1
 800f586:	701a      	strb	r2, [r3, #0]
}
 800f588:	bf00      	nop
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr
 800f594:	20004588 	.word	0x20004588

0800f598 <LightActual_GenericLevelBinding>:
* @param lightActual: Pointer to the data which needs to be checked.
* return void.
*/
void LightActual_GenericLevelBinding(Light_LightnessStatus_t* lightActual,
                                     MOBLEUINT8 elementIndex)
{ 
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	460b      	mov	r3, r1
 800f5a2:	70fb      	strb	r3, [r7, #3]
  6.1.2.2.2 - Binding of actual light lightness with generic level
  As Actual lightness changes, the generic level value will
  change.
     */

  Generic_LevelStatus[elementIndex].Present_Level16 = lightActual->LightnessPresentValue16 - 32768;  
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	881b      	ldrh	r3, [r3, #0]
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	78fa      	ldrb	r2, [r7, #3]
 800f5b2:	b218      	sxth	r0, r3
 800f5b4:	4906      	ldr	r1, [pc, #24]	; (800f5d0 <LightActual_GenericLevelBinding+0x38>)
 800f5b6:	4613      	mov	r3, r2
 800f5b8:	005b      	lsls	r3, r3, #1
 800f5ba:	4413      	add	r3, r2
 800f5bc:	009b      	lsls	r3, r3, #2
 800f5be:	440b      	add	r3, r1
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	801a      	strh	r2, [r3, #0]
 
  TRACE_M(TF_LIGHT_M, 
          "Light Actual binding with Generic Level - Present Level value 0x%.2x \r\n", 
          Generic_LevelStatus[elementIndex].Present_Level16); 
      
}
 800f5c4:	bf00      	nop
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr
 800f5d0:	2000457c 	.word	0x2000457c

0800f5d4 <Generic_TransitionParameterReset>:
* @brief Function called when message received without optional parameter, stop the running transition.
* @param void
* @param void
*/
void Generic_TransitionParameterReset(MOBLEUINT8 elementIndex)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	4603      	mov	r3, r0
 800f5dc:	71fb      	strb	r3, [r7, #7]
   Generic_ModelFlag[elementIndex].GenericTransitionFlag = MODEL_TRANSITION_STOP;
 800f5de:	79fa      	ldrb	r2, [r7, #7]
 800f5e0:	4910      	ldr	r1, [pc, #64]	; (800f624 <Generic_TransitionParameterReset+0x50>)
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	005b      	lsls	r3, r3, #1
 800f5e6:	4413      	add	r3, r2
 800f5e8:	440b      	add	r3, r1
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	701a      	strb	r2, [r3, #0]
   Generic_TimeParam[elementIndex].Res_Value = 0x00;
 800f5ee:	79fa      	ldrb	r2, [r7, #7]
 800f5f0:	490d      	ldr	r1, [pc, #52]	; (800f628 <Generic_TransitionParameterReset+0x54>)
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	009b      	lsls	r3, r3, #2
 800f5f6:	4413      	add	r3, r2
 800f5f8:	005b      	lsls	r3, r3, #1
 800f5fa:	440b      	add	r3, r1
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	805a      	strh	r2, [r3, #2]
 800f600:	2200      	movs	r2, #0
 800f602:	809a      	strh	r2, [r3, #4]
   Generic_TimeParam[elementIndex].StepValue = 0X00;
 800f604:	79fa      	ldrb	r2, [r7, #7]
 800f606:	4908      	ldr	r1, [pc, #32]	; (800f628 <Generic_TransitionParameterReset+0x54>)
 800f608:	4613      	mov	r3, r2
 800f60a:	009b      	lsls	r3, r3, #2
 800f60c:	4413      	add	r3, r2
 800f60e:	005b      	lsls	r3, r3, #1
 800f610:	440b      	add	r3, r1
 800f612:	2200      	movs	r2, #0
 800f614:	701a      	strb	r2, [r3, #0]
}
 800f616:	bf00      	nop
 800f618:	370c      	adds	r7, #12
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr
 800f622:	bf00      	nop
 800f624:	20004590 	.word	0x20004590
 800f628:	20004570 	.word	0x20004570

0800f62c <Generic_RestoreModelStates>:
* @brief function used to restore the states of the generic model.
* @param pointer to the array
* return void.
*/
void Generic_RestoreModelStates(void *model_State , MOBLEUINT8 elementIndex)
{
 800f62c:	b590      	push	{r4, r7, lr}
 800f62e:	b085      	sub	sp, #20
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	460b      	mov	r3, r1
 800f636:	70fb      	strb	r3, [r7, #3]
  
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF    
  Generic_OnOffStatus[elementIndex].Present_OnOff_State = ((Models_ParamNvm_t *)model_State)->Generic_OnOff;
 800f638:	78fa      	ldrb	r2, [r7, #3]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	7918      	ldrb	r0, [r3, #4]
 800f63e:	4922      	ldr	r1, [pc, #136]	; (800f6c8 <Generic_RestoreModelStates+0x9c>)
 800f640:	4613      	mov	r3, r2
 800f642:	005b      	lsls	r3, r3, #1
 800f644:	4413      	add	r3, r2
 800f646:	005b      	lsls	r3, r3, #1
 800f648:	440b      	add	r3, r1
 800f64a:	4602      	mov	r2, r0
 800f64c:	701a      	strb	r2, [r3, #0]
  Generic_OnOffStatus[elementIndex].Target_OnOff = ((Models_ParamNvm_t *)model_State)->GenericTarget;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	795b      	ldrb	r3, [r3, #5]
 800f652:	78fa      	ldrb	r2, [r7, #3]
 800f654:	b298      	uxth	r0, r3
 800f656:	491c      	ldr	r1, [pc, #112]	; (800f6c8 <Generic_RestoreModelStates+0x9c>)
 800f658:	4613      	mov	r3, r2
 800f65a:	005b      	lsls	r3, r3, #1
 800f65c:	4413      	add	r3, r2
 800f65e:	005b      	lsls	r3, r3, #1
 800f660:	440b      	add	r3, r1
 800f662:	4602      	mov	r2, r0
 800f664:	f8a3 2003 	strh.w	r2, [r3, #3]
#endif
  
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL 
  if(((Models_ParamNvm_t *)model_State)->Generic_Level == 0x00)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	88db      	ldrh	r3, [r3, #6]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d10a      	bne.n	800f686 <Generic_RestoreModelStates+0x5a>
  {
    Generic_LevelStatus[elementIndex].Present_Level16 = LEVEL_MIN_VALID_RANGE;
 800f670:	78fa      	ldrb	r2, [r7, #3]
 800f672:	4916      	ldr	r1, [pc, #88]	; (800f6cc <Generic_RestoreModelStates+0xa0>)
 800f674:	4613      	mov	r3, r2
 800f676:	005b      	lsls	r3, r3, #1
 800f678:	4413      	add	r3, r2
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	440b      	add	r3, r1
 800f67e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f682:	801a      	strh	r2, [r3, #0]
 800f684:	e00b      	b.n	800f69e <Generic_RestoreModelStates+0x72>
  }
  else
  {
    Generic_LevelStatus[elementIndex].Present_Level16 = ((Models_ParamNvm_t *)model_State)->Generic_Level;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	88db      	ldrh	r3, [r3, #6]
 800f68a:	78fa      	ldrb	r2, [r7, #3]
 800f68c:	b218      	sxth	r0, r3
 800f68e:	490f      	ldr	r1, [pc, #60]	; (800f6cc <Generic_RestoreModelStates+0xa0>)
 800f690:	4613      	mov	r3, r2
 800f692:	005b      	lsls	r3, r3, #1
 800f694:	4413      	add	r3, r2
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	440b      	add	r3, r1
 800f69a:	4602      	mov	r2, r0
 800f69c:	801a      	strh	r2, [r3, #0]
  }
#endif 

#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF  
  Generic_PowerOnOffParam_t Generic_PowerOnOffParam[APPLICATION_NUMBER_OF_ELEMENTS];
  Generic_PowerOnOffParam[elementIndex].PowerOnOffState = ((Models_ParamNvm_t *)model_State)->PowerOnOff;
 800f69e:	78fb      	ldrb	r3, [r7, #3]
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	78d2      	ldrb	r2, [r2, #3]
 800f6a4:	3310      	adds	r3, #16
 800f6a6:	443b      	add	r3, r7
 800f6a8:	f803 2c04 	strb.w	r2, [r3, #-4]
  (GenericAppli_cb.GenericPowerOnOff_cb)(&Generic_PowerOnOffParam[elementIndex], 1, 0,elementIndex);
 800f6ac:	4b08      	ldr	r3, [pc, #32]	; (800f6d0 <Generic_RestoreModelStates+0xa4>)
 800f6ae:	699c      	ldr	r4, [r3, #24]
 800f6b0:	78fb      	ldrb	r3, [r7, #3]
 800f6b2:	f107 020c 	add.w	r2, r7, #12
 800f6b6:	18d0      	adds	r0, r2, r3
 800f6b8:	78fb      	ldrb	r3, [r7, #3]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	2101      	movs	r1, #1
 800f6be:	47a0      	blx	r4
                                                     
#endif  
}
 800f6c0:	bf00      	nop
 800f6c2:	3714      	adds	r7, #20
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd90      	pop	{r4, r7, pc}
 800f6c8:	20004588 	.word	0x20004588
 800f6cc:	2000457c 	.word	0x2000457c
 800f6d0:	08032d00 	.word	0x08032d00

0800f6d4 <Appli_Generic_DefaultTransitionTime_Set>:

WEAK_FUNCTION (MOBLE_RESULT Appli_Generic_DefaultTransitionTime_Set(Generic_DefaultTransitionParam_t* pDefaultTimeParam, 
                                                                    MOBLEUINT8 OptionalValid, 
                                                                    uint16_t dstPeer, 
                                                                    uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS;}
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	4608      	mov	r0, r1
 800f6de:	4611      	mov	r1, r2
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	70fb      	strb	r3, [r7, #3]
 800f6e6:	460b      	mov	r3, r1
 800f6e8:	803b      	strh	r3, [r7, #0]
 800f6ea:	4613      	mov	r3, r2
 800f6ec:	70bb      	strb	r3, [r7, #2]
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	370c      	adds	r7, #12
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <Appli_Generic_Level_Status>:

WEAK_FUNCTION (MOBLE_RESULT Appli_Generic_Level_Status(MOBLEUINT8 const *plevel_status, 
                                                       MOBLEUINT32 plength, 
                                                       uint16_t dstPeer, 
                                                       uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS;}
 800f6fc:	b480      	push	{r7}
 800f6fe:	b085      	sub	sp, #20
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	4611      	mov	r1, r2
 800f708:	461a      	mov	r2, r3
 800f70a:	460b      	mov	r3, r1
 800f70c:	80fb      	strh	r3, [r7, #6]
 800f70e:	4613      	mov	r3, r2
 800f710:	717b      	strb	r3, [r7, #5]
 800f712:	2300      	movs	r3, #0
 800f714:	4618      	mov	r0, r3
 800f716:	3714      	adds	r7, #20
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <Light_Lightness_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_Lightness_Set(const MOBLEUINT8* plightness_param, 
                                 MOBLEUINT32 length,
                                 MODEL_MessageHeader_t *pmsgParam)
{
 800f720:	b590      	push	{r4, r7, lr}
 800f722:	b087      	sub	sp, #28
 800f724:	af02      	add	r7, sp, #8
 800f726:	60f8      	str	r0, [r7, #12]
 800f728:	60b9      	str	r1, [r7, #8]
 800f72a:	607a      	str	r2, [r7, #4]
  Transition Time       1B Format as defined in Section 3.1.3. (Optional)
  Delay                 1B Message execution delay in 5 millisecond steps (C.1)
  */
  TRACE_M(TF_LIGHT_M, "Callback Received \r\n");
  
  Light_LightnessParam.TargetLightnessStatus = (plightness_param[0] | plightness_param[1] << 8);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	b21a      	sxth	r2, r3
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	3301      	adds	r3, #1
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	021b      	lsls	r3, r3, #8
 800f73a:	b21b      	sxth	r3, r3
 800f73c:	4313      	orrs	r3, r2
 800f73e:	b21b      	sxth	r3, r3
 800f740:	b29a      	uxth	r2, r3
 800f742:	4b7a      	ldr	r3, [pc, #488]	; (800f92c <Light_Lightness_Set+0x20c>)
 800f744:	801a      	strh	r2, [r3, #0]
  Light_LightnessParam.TID = plightness_param[2];
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	789a      	ldrb	r2, [r3, #2]
 800f74a:	4b78      	ldr	r3, [pc, #480]	; (800f92c <Light_Lightness_Set+0x20c>)
 800f74c:	711a      	strb	r2, [r3, #4]
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP  
  /* Binding of actual lightness value with lightness range */
  Light_Actual_RangeBinding(&Light_LightnessParam, pmsgParam->elementIndex);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	4619      	mov	r1, r3
 800f754:	4875      	ldr	r0, [pc, #468]	; (800f92c <Light_Lightness_Set+0x20c>)
 800f756:	f002 f989 	bl	8011a6c <Light_Actual_RangeBinding>
#endif  
  /* Check for Optional Parameters */ 
  if ((length > 3) && (plightness_param[3] !=0))
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	2b03      	cmp	r3, #3
 800f75e:	d974      	bls.n	800f84a <Light_Lightness_Set+0x12a>
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	3303      	adds	r3, #3
 800f764:	781b      	ldrb	r3, [r3, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d06f      	beq.n	800f84a <Light_Lightness_Set+0x12a>
  {
    /* Transition_Time & Delay_Time Present */
    Light_LightnessParam.TransitionTime = plightness_param[3];
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	78da      	ldrb	r2, [r3, #3]
 800f76e:	4b6f      	ldr	r3, [pc, #444]	; (800f92c <Light_Lightness_Set+0x20c>)
 800f770:	715a      	strb	r2, [r3, #5]
    Light_LightnessParam.Delay_Time = plightness_param[4]; 
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	791a      	ldrb	r2, [r3, #4]
 800f776:	4b6d      	ldr	r3, [pc, #436]	; (800f92c <Light_Lightness_Set+0x20c>)
 800f778:	719a      	strb	r2, [r3, #6]
    
    /* Copy the received data in status message which needs
    to be set in application messages */  
    Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16 = Light_LightnessParam.TargetLightnessStatus;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	4619      	mov	r1, r3
 800f780:	4b6a      	ldr	r3, [pc, #424]	; (800f92c <Light_Lightness_Set+0x20c>)
 800f782:	8818      	ldrh	r0, [r3, #0]
 800f784:	4a6a      	ldr	r2, [pc, #424]	; (800f930 <Light_Lightness_Set+0x210>)
 800f786:	460b      	mov	r3, r1
 800f788:	00db      	lsls	r3, r3, #3
 800f78a:	440b      	add	r3, r1
 800f78c:	4413      	add	r3, r2
 800f78e:	3304      	adds	r3, #4
 800f790:	4602      	mov	r2, r0
 800f792:	801a      	strh	r2, [r3, #0]
    Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime = Light_LightnessParam.TransitionTime;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	4619      	mov	r1, r3
 800f79a:	4b64      	ldr	r3, [pc, #400]	; (800f92c <Light_Lightness_Set+0x20c>)
 800f79c:	7958      	ldrb	r0, [r3, #5]
 800f79e:	4a64      	ldr	r2, [pc, #400]	; (800f930 <Light_Lightness_Set+0x210>)
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	00db      	lsls	r3, r3, #3
 800f7a4:	440b      	add	r3, r1
 800f7a6:	4413      	add	r3, r2
 800f7a8:	3306      	adds	r3, #6
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	701a      	strb	r2, [r3, #0]
    
    /* copy status parameters in Temporary parameters for transition 
    process.
    */
    Light_TemporaryStatus[pmsgParam->elementIndex].TargetParam_1 = 
                   Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;    
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	4618      	mov	r0, r3
    Light_TemporaryStatus[pmsgParam->elementIndex].TargetParam_1 = 
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	461a      	mov	r2, r3
                   Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;    
 800f7ba:	495d      	ldr	r1, [pc, #372]	; (800f930 <Light_Lightness_Set+0x210>)
 800f7bc:	4603      	mov	r3, r0
 800f7be:	00db      	lsls	r3, r3, #3
 800f7c0:	4403      	add	r3, r0
 800f7c2:	440b      	add	r3, r1
 800f7c4:	3304      	adds	r3, #4
 800f7c6:	881b      	ldrh	r3, [r3, #0]
 800f7c8:	b298      	uxth	r0, r3
    Light_TemporaryStatus[pmsgParam->elementIndex].TargetParam_1 = 
 800f7ca:	495a      	ldr	r1, [pc, #360]	; (800f934 <Light_Lightness_Set+0x214>)
 800f7cc:	4613      	mov	r3, r2
 800f7ce:	005b      	lsls	r3, r3, #1
 800f7d0:	4413      	add	r3, r2
 800f7d2:	009b      	lsls	r3, r3, #2
 800f7d4:	4413      	add	r3, r2
 800f7d6:	440b      	add	r3, r1
 800f7d8:	3306      	adds	r3, #6
 800f7da:	4602      	mov	r2, r0
 800f7dc:	801a      	strh	r2, [r3, #0]
    Light_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = 
                   Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	4618      	mov	r0, r3
    Light_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = 
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	461a      	mov	r2, r3
                   Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800f7ea:	4951      	ldr	r1, [pc, #324]	; (800f930 <Light_Lightness_Set+0x210>)
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	00db      	lsls	r3, r3, #3
 800f7f0:	4403      	add	r3, r0
 800f7f2:	440b      	add	r3, r1
 800f7f4:	3306      	adds	r3, #6
 800f7f6:	7818      	ldrb	r0, [r3, #0]
    Light_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = 
 800f7f8:	494e      	ldr	r1, [pc, #312]	; (800f934 <Light_Lightness_Set+0x214>)
 800f7fa:	4613      	mov	r3, r2
 800f7fc:	005b      	lsls	r3, r3, #1
 800f7fe:	4413      	add	r3, r2
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	4413      	add	r3, r2
 800f804:	440b      	add	r3, r1
 800f806:	330c      	adds	r3, #12
 800f808:	4602      	mov	r2, r0
 800f80a:	701a      	strb	r2, [r3, #0]
    
    /* Function to calculate time parameters, step resolution
    step size for transition state machine.
    */
    Light_GetStepValue(plightness_param[3],pmsgParam->elementIndex);
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	3303      	adds	r3, #3
 800f810:	781a      	ldrb	r2, [r3, #0]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	4619      	mov	r1, r3
 800f818:	4610      	mov	r0, r2
 800f81a:	f001 f86f 	bl	80108fc <Light_GetStepValue>
    /*option parameter flag, enable to sent all required parameter in status.*/
    Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag = LIGHT_LIGHTNESS_TRANSITION_START;  
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	4619      	mov	r1, r3
 800f824:	4a44      	ldr	r2, [pc, #272]	; (800f938 <Light_Lightness_Set+0x218>)
 800f826:	460b      	mov	r3, r1
 800f828:	005b      	lsls	r3, r3, #1
 800f82a:	440b      	add	r3, r1
 800f82c:	4413      	add	r3, r2
 800f82e:	2201      	movs	r2, #1
 800f830:	701a      	strb	r2, [r3, #0]
    Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam = 1;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	4619      	mov	r1, r3
 800f838:	4a3f      	ldr	r2, [pc, #252]	; (800f938 <Light_Lightness_Set+0x218>)
 800f83a:	460b      	mov	r3, r1
 800f83c:	005b      	lsls	r3, r3, #1
 800f83e:	440b      	add	r3, r1
 800f840:	4413      	add	r3, r2
 800f842:	3301      	adds	r3, #1
 800f844:	2201      	movs	r2, #1
 800f846:	701a      	strb	r2, [r3, #0]
 800f848:	e03f      	b.n	800f8ca <Light_Lightness_Set+0x1aa>
                                          pmsgParam->elementIndex);
#else
    /* When no optional parameter received, target value will
    be set as present value in application.
    */
    Light_TransitionParameterReset(pmsgParam->elementIndex);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	4618      	mov	r0, r3
 800f850:	f002 f958 	bl	8011b04 <Light_TransitionParameterReset>
		
    Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16 = 
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	4619      	mov	r1, r3
                                     Light_LightnessParam.TargetLightnessStatus; 
 800f85a:	4b34      	ldr	r3, [pc, #208]	; (800f92c <Light_Lightness_Set+0x20c>)
 800f85c:	8818      	ldrh	r0, [r3, #0]
    Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16 = 
 800f85e:	4a34      	ldr	r2, [pc, #208]	; (800f930 <Light_Lightness_Set+0x210>)
 800f860:	460b      	mov	r3, r1
 800f862:	00db      	lsls	r3, r3, #3
 800f864:	440b      	add	r3, r1
 800f866:	4413      	add	r3, r2
 800f868:	4602      	mov	r2, r0
 800f86a:	801a      	strh	r2, [r3, #0]
#endif   
     
    if(Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16 > 0x00)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	4619      	mov	r1, r3
 800f872:	4a2f      	ldr	r2, [pc, #188]	; (800f930 <Light_Lightness_Set+0x210>)
 800f874:	460b      	mov	r3, r1
 800f876:	00db      	lsls	r3, r3, #3
 800f878:	440b      	add	r3, r1
 800f87a:	4413      	add	r3, r2
 800f87c:	881b      	ldrh	r3, [r3, #0]
 800f87e:	b29b      	uxth	r3, r3
 800f880:	2b00      	cmp	r3, #0
 800f882:	d022      	beq.n	800f8ca <Light_Lightness_Set+0x1aa>
    {
      Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus = 
        Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	4618      	mov	r0, r3
      Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus = 
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	4619      	mov	r1, r3
        Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16;
 800f890:	4a27      	ldr	r2, [pc, #156]	; (800f930 <Light_Lightness_Set+0x210>)
 800f892:	4603      	mov	r3, r0
 800f894:	00db      	lsls	r3, r3, #3
 800f896:	4403      	add	r3, r0
 800f898:	4413      	add	r3, r2
 800f89a:	881b      	ldrh	r3, [r3, #0]
 800f89c:	b298      	uxth	r0, r3
      Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus = 
 800f89e:	4a24      	ldr	r2, [pc, #144]	; (800f930 <Light_Lightness_Set+0x210>)
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	00db      	lsls	r3, r3, #3
 800f8a4:	440b      	add	r3, r1
 800f8a6:	4413      	add	r3, r2
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	f8a3 2007 	strh.w	r2, [r3, #7]
      
      (LightAppli_cb.Lightness_Last_Set_cb)(&Light_LightnessStatus[pmsgParam->elementIndex],                                     
 800f8ae:	4b23      	ldr	r3, [pc, #140]	; (800f93c <Light_Lightness_Set+0x21c>)
 800f8b0:	699a      	ldr	r2, [r3, #24]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	460b      	mov	r3, r1
 800f8ba:	00db      	lsls	r3, r3, #3
 800f8bc:	440b      	add	r3, r1
 800f8be:	491c      	ldr	r1, [pc, #112]	; (800f930 <Light_Lightness_Set+0x210>)
 800f8c0:	1858      	adds	r0, r3, r1
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	4790      	blx	r2
                                            pmsgParam->elementIndex);
    }
  }
   
  /* Application Callback */
  (LightAppli_cb.Lightness_Set_cb)(&Light_LightnessStatus[pmsgParam->elementIndex], 
 800f8ca:	4b1c      	ldr	r3, [pc, #112]	; (800f93c <Light_Lightness_Set+0x21c>)
 800f8cc:	681c      	ldr	r4, [r3, #0]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	461a      	mov	r2, r3
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	00db      	lsls	r3, r3, #3
 800f8d8:	4413      	add	r3, r2
 800f8da:	4a15      	ldr	r2, [pc, #84]	; (800f930 <Light_Lightness_Set+0x210>)
 800f8dc:	1898      	adds	r0, r3, r2
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	88da      	ldrh	r2, [r3, #6]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	47a0      	blx	r4
                                   0,pmsgParam->dst_peer, 
                                   pmsgParam->elementIndex);
  
#ifdef ENABLE_MODEL_BINDING    
  /* Binding of actual light lightness with other models */
  Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_ACTUAL_SET , length,pmsgParam->elementIndex,
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	781a      	ldrb	r2, [r3, #0]
              Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag,Light_ModelFlag[pmsgParam->elementIndex].Light_Trnsn_Cmplt);  
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	4618      	mov	r0, r3
  Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_ACTUAL_SET , length,pmsgParam->elementIndex,
 800f8f4:	4910      	ldr	r1, [pc, #64]	; (800f938 <Light_Lightness_Set+0x218>)
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	005b      	lsls	r3, r3, #1
 800f8fa:	4403      	add	r3, r0
 800f8fc:	440b      	add	r3, r1
 800f8fe:	7819      	ldrb	r1, [r3, #0]
              Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag,Light_ModelFlag[pmsgParam->elementIndex].Light_Trnsn_Cmplt);  
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	461c      	mov	r4, r3
  Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_ACTUAL_SET , length,pmsgParam->elementIndex,
 800f906:	480c      	ldr	r0, [pc, #48]	; (800f938 <Light_Lightness_Set+0x218>)
 800f908:	4623      	mov	r3, r4
 800f90a:	005b      	lsls	r3, r3, #1
 800f90c:	4423      	add	r3, r4
 800f90e:	4403      	add	r3, r0
 800f910:	3302      	adds	r3, #2
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	9300      	str	r3, [sp, #0]
 800f916:	460b      	mov	r3, r1
 800f918:	68b9      	ldr	r1, [r7, #8]
 800f91a:	2002      	movs	r0, #2
 800f91c:	f001 fb9e 	bl	801105c <Light_Lightness_Binding>
#endif  
  
  return MOBLE_RESULT_SUCCESS;
 800f920:	2300      	movs	r3, #0
}
 800f922:	4618      	mov	r0, r3
 800f924:	3714      	adds	r7, #20
 800f926:	46bd      	mov	sp, r7
 800f928:	bd90      	pop	{r4, r7, pc}
 800f92a:	bf00      	nop
 800f92c:	200045c0 	.word	0x200045c0
 800f930:	200045c8 	.word	0x200045c8
 800f934:	200045b0 	.word	0x200045b0
 800f938:	200045a8 	.word	0x200045a8
 800f93c:	08032d80 	.word	0x08032d80

0800f940 <Light_Lightness_Status>:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & ApkmpKey Offset
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_Lightness_Status(MOBLEUINT8* pLightness_status, MOBLEUINT32* pLength,\
                               MODEL_MessageHeader_t *pmsgParam)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	607a      	str	r2, [r7, #4]
  Remaining Time        1B Time to complete the transition to the target Light Lightness
  
  */ 
  
  TRACE_M(TF_LIGHT_M, "Light_Lightness_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#824B! \n\r");
 800f94c:	2100      	movs	r1, #0
 800f94e:	4840      	ldr	r0, [pc, #256]	; (800fa50 <Light_Lightness_Status+0x110>)
 800f950:	f7fd fe1a 	bl	800d588 <TraceHeader>
 800f954:	483f      	ldr	r0, [pc, #252]	; (800fa54 <Light_Lightness_Status+0x114>)
 800f956:	f019 feff 	bl	8029758 <iprintf>
  
  *(pLightness_status) = Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	4619      	mov	r1, r3
 800f960:	4a3d      	ldr	r2, [pc, #244]	; (800fa58 <Light_Lightness_Status+0x118>)
 800f962:	460b      	mov	r3, r1
 800f964:	00db      	lsls	r3, r3, #3
 800f966:	440b      	add	r3, r1
 800f968:	4413      	add	r3, r2
 800f96a:	881b      	ldrh	r3, [r3, #0]
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	b2da      	uxtb	r2, r3
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	701a      	strb	r2, [r3, #0]
  *(pLightness_status+1) = Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16 >> 8;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	4619      	mov	r1, r3
 800f97a:	4a37      	ldr	r2, [pc, #220]	; (800fa58 <Light_Lightness_Status+0x118>)
 800f97c:	460b      	mov	r3, r1
 800f97e:	00db      	lsls	r3, r3, #3
 800f980:	440b      	add	r3, r1
 800f982:	4413      	add	r3, r2
 800f984:	881b      	ldrh	r3, [r3, #0]
 800f986:	b29b      	uxth	r3, r3
 800f988:	0a1b      	lsrs	r3, r3, #8
 800f98a:	b29a      	uxth	r2, r3
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	3301      	adds	r3, #1
 800f990:	b2d2      	uxtb	r2, r2
 800f992:	701a      	strb	r2, [r3, #0]
  
  /* This condition will be processed when message received will have
  transition time and delay parameter.
  or the transition will be in process
  */
  if((Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam == 1) || (Light_TimeParam[pmsgParam->elementIndex].StepValue != 0))
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	4619      	mov	r1, r3
 800f99a:	4a30      	ldr	r2, [pc, #192]	; (800fa5c <Light_Lightness_Status+0x11c>)
 800f99c:	460b      	mov	r3, r1
 800f99e:	005b      	lsls	r3, r3, #1
 800f9a0:	440b      	add	r3, r1
 800f9a2:	4413      	add	r3, r2
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d00c      	beq.n	800f9c6 <Light_Lightness_Status+0x86>
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	4a2b      	ldr	r2, [pc, #172]	; (800fa60 <Light_Lightness_Status+0x120>)
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	009b      	lsls	r3, r3, #2
 800f9b8:	440b      	add	r3, r1
 800f9ba:	005b      	lsls	r3, r3, #1
 800f9bc:	4413      	add	r3, r2
 800f9be:	f993 3000 	ldrsb.w	r3, [r3]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d03b      	beq.n	800fa3e <Light_Lightness_Status+0xfe>
  {
    *(pLightness_status+2) = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	4a22      	ldr	r2, [pc, #136]	; (800fa58 <Light_Lightness_Status+0x118>)
 800f9ce:	460b      	mov	r3, r1
 800f9d0:	00db      	lsls	r3, r3, #3
 800f9d2:	440b      	add	r3, r1
 800f9d4:	4413      	add	r3, r2
 800f9d6:	3304      	adds	r3, #4
 800f9d8:	881b      	ldrh	r3, [r3, #0]
 800f9da:	b29a      	uxth	r2, r3
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	3302      	adds	r3, #2
 800f9e0:	b2d2      	uxtb	r2, r2
 800f9e2:	701a      	strb	r2, [r3, #0]
    *(pLightness_status+3) = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16 >>8;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	4a1b      	ldr	r2, [pc, #108]	; (800fa58 <Light_Lightness_Status+0x118>)
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	00db      	lsls	r3, r3, #3
 800f9f0:	440b      	add	r3, r1
 800f9f2:	4413      	add	r3, r2
 800f9f4:	3304      	adds	r3, #4
 800f9f6:	881b      	ldrh	r3, [r3, #0]
 800f9f8:	b29b      	uxth	r3, r3
 800f9fa:	0a1b      	lsrs	r3, r3, #8
 800f9fc:	b29a      	uxth	r2, r3
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	3303      	adds	r3, #3
 800fa02:	b2d2      	uxtb	r2, r2
 800fa04:	701a      	strb	r2, [r3, #0]
    *(pLightness_status+4) = Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	1d1a      	adds	r2, r3, #4
 800fa10:	4911      	ldr	r1, [pc, #68]	; (800fa58 <Light_Lightness_Status+0x118>)
 800fa12:	4603      	mov	r3, r0
 800fa14:	00db      	lsls	r3, r3, #3
 800fa16:	4403      	add	r3, r0
 800fa18:	440b      	add	r3, r1
 800fa1a:	3306      	adds	r3, #6
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	7013      	strb	r3, [r2, #0]
    *pLength = 5;     
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	2205      	movs	r2, #5
 800fa24:	601a      	str	r2, [r3, #0]
    Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam = 0;    
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	4a0b      	ldr	r2, [pc, #44]	; (800fa5c <Light_Lightness_Status+0x11c>)
 800fa2e:	460b      	mov	r3, r1
 800fa30:	005b      	lsls	r3, r3, #1
 800fa32:	440b      	add	r3, r1
 800fa34:	4413      	add	r3, r2
 800fa36:	3301      	adds	r3, #1
 800fa38:	2200      	movs	r2, #0
 800fa3a:	701a      	strb	r2, [r3, #0]
 800fa3c:	e002      	b.n	800fa44 <Light_Lightness_Status+0x104>
  else
  {    
    /* When no optional parameter received then, target value will
    be sent in status message.
    */    
    *pLength = 2;          
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	2202      	movs	r2, #2
 800fa42:	601a      	str	r2, [r3, #0]
     TRACE_M(TF_LIGHT_M, "Light_Lightness_Status sent without transition \r\n");
  }
  
  return MOBLE_RESULT_SUCCESS;
 800fa44:	2300      	movs	r3, #0
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3710      	adds	r7, #16
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	08033208 	.word	0x08033208
 800fa54:	0802f54c 	.word	0x0802f54c
 800fa58:	200045c8 	.word	0x200045c8
 800fa5c:	200045a8 	.word	0x200045a8
 800fa60:	2000459c 	.word	0x2000459c

0800fa64 <Light_LightnessLinear_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessLinear_Set(const MOBLEUINT8* plightnessLinear_param,\
                                        MOBLEUINT32 length,\
                               MODEL_MessageHeader_t *pmsgParam)
{
 800fa64:	b590      	push	{r4, r7, lr}
 800fa66:	b089      	sub	sp, #36	; 0x24
 800fa68:	af02      	add	r7, sp, #8
 800fa6a:	60f8      	str	r0, [r7, #12]
 800fa6c:	60b9      	str	r1, [r7, #8]
 800fa6e:	607a      	str	r2, [r7, #4]
  Lightness             2B The target value of the Light Lightness Actual state. 
  TID                   1B Transaction Identifier
  Transition Time       1B Format as defined in Section 3.1.3. (Optional)
  Delay                 1B Message execution delay in 5 millisecond steps (C.1)
  */
  MOBLEUINT8 OptionalValid = 0;
 800fa70:	2300      	movs	r3, #0
 800fa72:	75fb      	strb	r3, [r7, #23]
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessLinear_Set callback received \r\n");
  
  Light_LightnessParam.TargetLightnessLinearStatus = ((plightnessLinear_param[0])
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	b21a      	sxth	r2, r3
                                                      | (plightnessLinear_param[1] << 8));
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	3301      	adds	r3, #1
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	021b      	lsls	r3, r3, #8
 800fa82:	b21b      	sxth	r3, r3
 800fa84:	4313      	orrs	r3, r2
 800fa86:	b21b      	sxth	r3, r3
 800fa88:	b29a      	uxth	r2, r3
  Light_LightnessParam.TargetLightnessLinearStatus = ((plightnessLinear_param[0])
 800fa8a:	4b60      	ldr	r3, [pc, #384]	; (800fc0c <Light_LightnessLinear_Set+0x1a8>)
 800fa8c:	805a      	strh	r2, [r3, #2]
  Light_LightnessParam.TID = plightnessLinear_param[2];
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	789a      	ldrb	r2, [r3, #2]
 800fa92:	4b5e      	ldr	r3, [pc, #376]	; (800fc0c <Light_LightnessLinear_Set+0x1a8>)
 800fa94:	711a      	strb	r2, [r3, #4]
  
  /* Check for Optional Parameters */ 
  if ((length > 3) && (plightnessLinear_param[3] !=0))
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	2b03      	cmp	r3, #3
 800fa9a:	d974      	bls.n	800fb86 <Light_LightnessLinear_Set+0x122>
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	3303      	adds	r3, #3
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d06f      	beq.n	800fb86 <Light_LightnessLinear_Set+0x122>
  {
    /* Transition_Time & Delay_Time Present */
    Light_LightnessParam.TransitionTime = plightnessLinear_param[3];
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	78da      	ldrb	r2, [r3, #3]
 800faaa:	4b58      	ldr	r3, [pc, #352]	; (800fc0c <Light_LightnessLinear_Set+0x1a8>)
 800faac:	715a      	strb	r2, [r3, #5]
    Light_LightnessParam.Delay_Time = plightnessLinear_param[4]; 
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	791a      	ldrb	r2, [r3, #4]
 800fab2:	4b56      	ldr	r3, [pc, #344]	; (800fc0c <Light_LightnessLinear_Set+0x1a8>)
 800fab4:	719a      	strb	r2, [r3, #6]
    
    /* Copy the received data in status message which needs
    to be set in application messages */
    Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16 = Light_LightnessParam.TargetLightnessLinearStatus;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	781b      	ldrb	r3, [r3, #0]
 800faba:	4619      	mov	r1, r3
 800fabc:	4b53      	ldr	r3, [pc, #332]	; (800fc0c <Light_LightnessLinear_Set+0x1a8>)
 800fabe:	8858      	ldrh	r0, [r3, #2]
 800fac0:	4a53      	ldr	r2, [pc, #332]	; (800fc10 <Light_LightnessLinear_Set+0x1ac>)
 800fac2:	460b      	mov	r3, r1
 800fac4:	00db      	lsls	r3, r3, #3
 800fac6:	440b      	add	r3, r1
 800fac8:	4413      	add	r3, r2
 800faca:	3304      	adds	r3, #4
 800facc:	4602      	mov	r2, r0
 800face:	801a      	strh	r2, [r3, #0]
    Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime = Light_LightnessParam.TransitionTime;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	4619      	mov	r1, r3
 800fad6:	4b4d      	ldr	r3, [pc, #308]	; (800fc0c <Light_LightnessLinear_Set+0x1a8>)
 800fad8:	7958      	ldrb	r0, [r3, #5]
 800fada:	4a4d      	ldr	r2, [pc, #308]	; (800fc10 <Light_LightnessLinear_Set+0x1ac>)
 800fadc:	460b      	mov	r3, r1
 800fade:	00db      	lsls	r3, r3, #3
 800fae0:	440b      	add	r3, r1
 800fae2:	4413      	add	r3, r2
 800fae4:	3306      	adds	r3, #6
 800fae6:	4602      	mov	r2, r0
 800fae8:	701a      	strb	r2, [r3, #0]
    /* copy status parameters in Temporary parameters for transition 
    process.
    */
    Light_TemporaryStatus[pmsgParam->elementIndex].TargetParam_1 = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;    
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	4618      	mov	r0, r3
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	461a      	mov	r2, r3
 800faf6:	4946      	ldr	r1, [pc, #280]	; (800fc10 <Light_LightnessLinear_Set+0x1ac>)
 800faf8:	4603      	mov	r3, r0
 800fafa:	00db      	lsls	r3, r3, #3
 800fafc:	4403      	add	r3, r0
 800fafe:	440b      	add	r3, r1
 800fb00:	3304      	adds	r3, #4
 800fb02:	881b      	ldrh	r3, [r3, #0]
 800fb04:	b298      	uxth	r0, r3
 800fb06:	4943      	ldr	r1, [pc, #268]	; (800fc14 <Light_LightnessLinear_Set+0x1b0>)
 800fb08:	4613      	mov	r3, r2
 800fb0a:	005b      	lsls	r3, r3, #1
 800fb0c:	4413      	add	r3, r2
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	4413      	add	r3, r2
 800fb12:	440b      	add	r3, r1
 800fb14:	3306      	adds	r3, #6
 800fb16:	4602      	mov	r2, r0
 800fb18:	801a      	strh	r2, [r3, #0]
    Light_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	4618      	mov	r0, r3
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	461a      	mov	r2, r3
 800fb26:	493a      	ldr	r1, [pc, #232]	; (800fc10 <Light_LightnessLinear_Set+0x1ac>)
 800fb28:	4603      	mov	r3, r0
 800fb2a:	00db      	lsls	r3, r3, #3
 800fb2c:	4403      	add	r3, r0
 800fb2e:	440b      	add	r3, r1
 800fb30:	3306      	adds	r3, #6
 800fb32:	7818      	ldrb	r0, [r3, #0]
 800fb34:	4937      	ldr	r1, [pc, #220]	; (800fc14 <Light_LightnessLinear_Set+0x1b0>)
 800fb36:	4613      	mov	r3, r2
 800fb38:	005b      	lsls	r3, r3, #1
 800fb3a:	4413      	add	r3, r2
 800fb3c:	009b      	lsls	r3, r3, #2
 800fb3e:	4413      	add	r3, r2
 800fb40:	440b      	add	r3, r1
 800fb42:	330c      	adds	r3, #12
 800fb44:	4602      	mov	r2, r0
 800fb46:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
    step size for transition state machine.
    */
    
    Light_GetStepValue(plightnessLinear_param[3],pmsgParam->elementIndex);
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	3303      	adds	r3, #3
 800fb4c:	781a      	ldrb	r2, [r3, #0]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	4619      	mov	r1, r3
 800fb54:	4610      	mov	r0, r2
 800fb56:	f000 fed1 	bl	80108fc <Light_GetStepValue>
    /*transition process enable flag. */
    Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag = LIGHT_LINEAR_TRANSITION_START; 
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	4619      	mov	r1, r3
 800fb60:	4a2d      	ldr	r2, [pc, #180]	; (800fc18 <Light_LightnessLinear_Set+0x1b4>)
 800fb62:	460b      	mov	r3, r1
 800fb64:	005b      	lsls	r3, r3, #1
 800fb66:	440b      	add	r3, r1
 800fb68:	4413      	add	r3, r2
 800fb6a:	2202      	movs	r2, #2
 800fb6c:	701a      	strb	r2, [r3, #0]
    /*option parameter flag, enable to sent all required parameter in status.*/
    Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam = 1;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	781b      	ldrb	r3, [r3, #0]
 800fb72:	4619      	mov	r1, r3
 800fb74:	4a28      	ldr	r2, [pc, #160]	; (800fc18 <Light_LightnessLinear_Set+0x1b4>)
 800fb76:	460b      	mov	r3, r1
 800fb78:	005b      	lsls	r3, r3, #1
 800fb7a:	440b      	add	r3, r1
 800fb7c:	4413      	add	r3, r2
 800fb7e:	3301      	adds	r3, #1
 800fb80:	2201      	movs	r2, #1
 800fb82:	701a      	strb	r2, [r3, #0]
 800fb84:	e011      	b.n	800fbaa <Light_LightnessLinear_Set+0x146>
                                          pmsgParam->elementIndex);
#else
    /* When no optional parameter received, target value will
    be set as present value in application.
    */
    Light_TransitionParameterReset(pmsgParam->elementIndex);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f001 ffba 	bl	8011b04 <Light_TransitionParameterReset>
		
    Light_LightnessStatus[pmsgParam->elementIndex].LinearPresentValue16 = 
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	4619      	mov	r1, r3
      Light_LightnessParam.TargetLightnessLinearStatus; 
 800fb96:	4b1d      	ldr	r3, [pc, #116]	; (800fc0c <Light_LightnessLinear_Set+0x1a8>)
 800fb98:	8858      	ldrh	r0, [r3, #2]
    Light_LightnessStatus[pmsgParam->elementIndex].LinearPresentValue16 = 
 800fb9a:	4a1d      	ldr	r2, [pc, #116]	; (800fc10 <Light_LightnessLinear_Set+0x1ac>)
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	00db      	lsls	r3, r3, #3
 800fba0:	440b      	add	r3, r1
 800fba2:	4413      	add	r3, r2
 800fba4:	3302      	adds	r3, #2
 800fba6:	4602      	mov	r2, r0
 800fba8:	801a      	strh	r2, [r3, #0]
#endif  
  }
  
  /* Application Callback */
  (LightAppli_cb.Lightness_Linear_Set_cb)(&Light_LightnessStatus[pmsgParam->elementIndex], OptionalValid, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800fbaa:	4b1c      	ldr	r3, [pc, #112]	; (800fc1c <Light_LightnessLinear_Set+0x1b8>)
 800fbac:	689c      	ldr	r4, [r3, #8]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	4613      	mov	r3, r2
 800fbb6:	00db      	lsls	r3, r3, #3
 800fbb8:	4413      	add	r3, r2
 800fbba:	4a15      	ldr	r2, [pc, #84]	; (800fc10 <Light_LightnessLinear_Set+0x1ac>)
 800fbbc:	1898      	adds	r0, r3, r2
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	88da      	ldrh	r2, [r3, #6]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	7df9      	ldrb	r1, [r7, #23]
 800fbc8:	47a0      	blx	r4
  
#ifdef ENABLE_MODEL_BINDING   
  /* Binding of data of light lightness with light linear */
  Light_Lightness_Linear_Binding(BINDING_LIGHT_LIGHTNESS_LINEAR_SET ,length, pmsgParam->elementIndex,
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	781a      	ldrb	r2, [r3, #0]
                  Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag,Light_ModelFlag[pmsgParam->elementIndex].Light_Trnsn_Cmplt);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	4618      	mov	r0, r3
  Light_Lightness_Linear_Binding(BINDING_LIGHT_LIGHTNESS_LINEAR_SET ,length, pmsgParam->elementIndex,
 800fbd4:	4910      	ldr	r1, [pc, #64]	; (800fc18 <Light_LightnessLinear_Set+0x1b4>)
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	005b      	lsls	r3, r3, #1
 800fbda:	4403      	add	r3, r0
 800fbdc:	440b      	add	r3, r1
 800fbde:	7819      	ldrb	r1, [r3, #0]
                  Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag,Light_ModelFlag[pmsgParam->elementIndex].Light_Trnsn_Cmplt);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	461c      	mov	r4, r3
  Light_Lightness_Linear_Binding(BINDING_LIGHT_LIGHTNESS_LINEAR_SET ,length, pmsgParam->elementIndex,
 800fbe6:	480c      	ldr	r0, [pc, #48]	; (800fc18 <Light_LightnessLinear_Set+0x1b4>)
 800fbe8:	4623      	mov	r3, r4
 800fbea:	005b      	lsls	r3, r3, #1
 800fbec:	4423      	add	r3, r4
 800fbee:	4403      	add	r3, r0
 800fbf0:	3302      	adds	r3, #2
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	9300      	str	r3, [sp, #0]
 800fbf6:	460b      	mov	r3, r1
 800fbf8:	68b9      	ldr	r1, [r7, #8]
 800fbfa:	2003      	movs	r0, #3
 800fbfc:	f001 f994 	bl	8010f28 <Light_Lightness_Linear_Binding>
#endif   

#ifdef ENABLE_LIGHT_MODEL_SERVER_LC  
  Light_Linear_ActualBinding(length, pmsgParam->elementIndex);
#endif    
  return MOBLE_RESULT_SUCCESS;
 800fc00:	2300      	movs	r3, #0
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	371c      	adds	r7, #28
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd90      	pop	{r4, r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	200045c0 	.word	0x200045c0
 800fc10:	200045c8 	.word	0x200045c8
 800fc14:	200045b0 	.word	0x200045b0
 800fc18:	200045a8 	.word	0x200045a8
 800fc1c:	08032d80 	.word	0x08032d80

0800fc20 <Light_LightnessLinear_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessLinear_Status(MOBLEUINT8* pLightnessLinear_status,
                                           MOBLEUINT32 *pLength,\
                               MODEL_MessageHeader_t *pmsgParam)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b084      	sub	sp, #16
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	60f8      	str	r0, [r7, #12]
 800fc28:	60b9      	str	r1, [r7, #8]
 800fc2a:	607a      	str	r2, [r7, #4]
  Target Lightness      2B The target value of the Light Lightness Linear state (Optional).
  Remaining Time        1B Time to complete the transition to the target Light Lightness Li
  */
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessLinear_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#824F! \n\r");
 800fc2c:	2100      	movs	r1, #0
 800fc2e:	4841      	ldr	r0, [pc, #260]	; (800fd34 <Light_LightnessLinear_Status+0x114>)
 800fc30:	f7fd fcaa 	bl	800d588 <TraceHeader>
 800fc34:	4840      	ldr	r0, [pc, #256]	; (800fd38 <Light_LightnessLinear_Status+0x118>)
 800fc36:	f019 fd8f 	bl	8029758 <iprintf>
  
  *(pLightnessLinear_status) = Light_LightnessStatus[pmsgParam->elementIndex].LinearPresentValue16;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	4619      	mov	r1, r3
 800fc40:	4a3e      	ldr	r2, [pc, #248]	; (800fd3c <Light_LightnessLinear_Status+0x11c>)
 800fc42:	460b      	mov	r3, r1
 800fc44:	00db      	lsls	r3, r3, #3
 800fc46:	440b      	add	r3, r1
 800fc48:	4413      	add	r3, r2
 800fc4a:	3302      	adds	r3, #2
 800fc4c:	881b      	ldrh	r3, [r3, #0]
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	b2da      	uxtb	r2, r3
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	701a      	strb	r2, [r3, #0]
  *(pLightnessLinear_status+1) = Light_LightnessStatus[pmsgParam->elementIndex].LinearPresentValue16 >> 8;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	781b      	ldrb	r3, [r3, #0]
 800fc5a:	4619      	mov	r1, r3
 800fc5c:	4a37      	ldr	r2, [pc, #220]	; (800fd3c <Light_LightnessLinear_Status+0x11c>)
 800fc5e:	460b      	mov	r3, r1
 800fc60:	00db      	lsls	r3, r3, #3
 800fc62:	440b      	add	r3, r1
 800fc64:	4413      	add	r3, r2
 800fc66:	3302      	adds	r3, #2
 800fc68:	881b      	ldrh	r3, [r3, #0]
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	0a1b      	lsrs	r3, r3, #8
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	3301      	adds	r3, #1
 800fc74:	b2d2      	uxtb	r2, r2
 800fc76:	701a      	strb	r2, [r3, #0]
    
  /* This condition will be processed when message received will have
  transition time and delay parameter.
  or the transition will be in process
  */
  if((Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam == 1) || (Light_TimeParam[pmsgParam->elementIndex].StepValue != 0))
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	4619      	mov	r1, r3
 800fc7e:	4a30      	ldr	r2, [pc, #192]	; (800fd40 <Light_LightnessLinear_Status+0x120>)
 800fc80:	460b      	mov	r3, r1
 800fc82:	005b      	lsls	r3, r3, #1
 800fc84:	440b      	add	r3, r1
 800fc86:	4413      	add	r3, r2
 800fc88:	3301      	adds	r3, #1
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	2b01      	cmp	r3, #1
 800fc8e:	d00c      	beq.n	800fcaa <Light_LightnessLinear_Status+0x8a>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	4619      	mov	r1, r3
 800fc96:	4a2b      	ldr	r2, [pc, #172]	; (800fd44 <Light_LightnessLinear_Status+0x124>)
 800fc98:	460b      	mov	r3, r1
 800fc9a:	009b      	lsls	r3, r3, #2
 800fc9c:	440b      	add	r3, r1
 800fc9e:	005b      	lsls	r3, r3, #1
 800fca0:	4413      	add	r3, r2
 800fca2:	f993 3000 	ldrsb.w	r3, [r3]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d03b      	beq.n	800fd22 <Light_LightnessLinear_Status+0x102>
  {
    *(pLightnessLinear_status+2) = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	4619      	mov	r1, r3
 800fcb0:	4a22      	ldr	r2, [pc, #136]	; (800fd3c <Light_LightnessLinear_Status+0x11c>)
 800fcb2:	460b      	mov	r3, r1
 800fcb4:	00db      	lsls	r3, r3, #3
 800fcb6:	440b      	add	r3, r1
 800fcb8:	4413      	add	r3, r2
 800fcba:	3304      	adds	r3, #4
 800fcbc:	881b      	ldrh	r3, [r3, #0]
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	3302      	adds	r3, #2
 800fcc4:	b2d2      	uxtb	r2, r2
 800fcc6:	701a      	strb	r2, [r3, #0]
    *(pLightnessLinear_status+3) = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16 >>8;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	781b      	ldrb	r3, [r3, #0]
 800fccc:	4619      	mov	r1, r3
 800fcce:	4a1b      	ldr	r2, [pc, #108]	; (800fd3c <Light_LightnessLinear_Status+0x11c>)
 800fcd0:	460b      	mov	r3, r1
 800fcd2:	00db      	lsls	r3, r3, #3
 800fcd4:	440b      	add	r3, r1
 800fcd6:	4413      	add	r3, r2
 800fcd8:	3304      	adds	r3, #4
 800fcda:	881b      	ldrh	r3, [r3, #0]
 800fcdc:	b29b      	uxth	r3, r3
 800fcde:	0a1b      	lsrs	r3, r3, #8
 800fce0:	b29a      	uxth	r2, r3
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	3303      	adds	r3, #3
 800fce6:	b2d2      	uxtb	r2, r2
 800fce8:	701a      	strb	r2, [r3, #0]
    *(pLightnessLinear_status+4) = Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	4618      	mov	r0, r3
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	1d1a      	adds	r2, r3, #4
 800fcf4:	4911      	ldr	r1, [pc, #68]	; (800fd3c <Light_LightnessLinear_Status+0x11c>)
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	00db      	lsls	r3, r3, #3
 800fcfa:	4403      	add	r3, r0
 800fcfc:	440b      	add	r3, r1
 800fcfe:	3306      	adds	r3, #6
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	7013      	strb	r3, [r2, #0]
    *pLength = 5;
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	2205      	movs	r2, #5
 800fd08:	601a      	str	r2, [r3, #0]
    
    Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam = 0U;          
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	4619      	mov	r1, r3
 800fd10:	4a0b      	ldr	r2, [pc, #44]	; (800fd40 <Light_LightnessLinear_Status+0x120>)
 800fd12:	460b      	mov	r3, r1
 800fd14:	005b      	lsls	r3, r3, #1
 800fd16:	440b      	add	r3, r1
 800fd18:	4413      	add	r3, r2
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	701a      	strb	r2, [r3, #0]
 800fd20:	e002      	b.n	800fd28 <Light_LightnessLinear_Status+0x108>
  else
  { 
    /* When no optional parameter received then, target value will
    be sent in status message.
    */
    *pLength = 2;
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	2202      	movs	r2, #2
 800fd26:	601a      	str	r2, [r3, #0]
  }
  
  return MOBLE_RESULT_SUCCESS;
 800fd28:	2300      	movs	r3, #0
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3710      	adds	r7, #16
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	08033220 	.word	0x08033220
 800fd38:	0802f558 	.word	0x0802f558
 800fd3c:	200045c8 	.word	0x200045c8
 800fd40:	200045a8 	.word	0x200045a8
 800fd44:	2000459c 	.word	0x2000459c

0800fd48 <Light_LightnessLast_Set>:

*/ 
MOBLE_RESULT Light_LightnessLast_Set(const MOBLEUINT8* plightnessLast_param, 
                                      MOBLEUINT32 length,\
                                      MODEL_MessageHeader_t *pmsgParam)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b085      	sub	sp, #20
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	60b9      	str	r1, [r7, #8]
 800fd52:	607a      	str	r2, [r7, #4]
  Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus = plightnessLast_param[1] << 8;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	3301      	adds	r3, #1
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	7812      	ldrb	r2, [r2, #0]
 800fd60:	4611      	mov	r1, r2
 800fd62:	021b      	lsls	r3, r3, #8
 800fd64:	b298      	uxth	r0, r3
 800fd66:	4a14      	ldr	r2, [pc, #80]	; (800fdb8 <Light_LightnessLast_Set+0x70>)
 800fd68:	460b      	mov	r3, r1
 800fd6a:	00db      	lsls	r3, r3, #3
 800fd6c:	440b      	add	r3, r1
 800fd6e:	4413      	add	r3, r2
 800fd70:	4602      	mov	r2, r0
 800fd72:	f8a3 2007 	strh.w	r2, [r3, #7]
  Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus |= plightnessLast_param[0];
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	4a0e      	ldr	r2, [pc, #56]	; (800fdb8 <Light_LightnessLast_Set+0x70>)
 800fd7e:	460b      	mov	r3, r1
 800fd80:	00db      	lsls	r3, r3, #3
 800fd82:	440b      	add	r3, r1
 800fd84:	4413      	add	r3, r2
 800fd86:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fd8a:	b29a      	uxth	r2, r3
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	b29b      	uxth	r3, r3
 800fd92:	6879      	ldr	r1, [r7, #4]
 800fd94:	7809      	ldrb	r1, [r1, #0]
 800fd96:	4313      	orrs	r3, r2
 800fd98:	b298      	uxth	r0, r3
 800fd9a:	4a07      	ldr	r2, [pc, #28]	; (800fdb8 <Light_LightnessLast_Set+0x70>)
 800fd9c:	460b      	mov	r3, r1
 800fd9e:	00db      	lsls	r3, r3, #3
 800fda0:	440b      	add	r3, r1
 800fda2:	4413      	add	r3, r2
 800fda4:	4602      	mov	r2, r0
 800fda6:	f8a3 2007 	strh.w	r2, [r3, #7]
  
  return MOBLE_RESULT_SUCCESS;
 800fdaa:	2300      	movs	r3, #0
}  
 800fdac:	4618      	mov	r0, r3
 800fdae:	3714      	adds	r7, #20
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr
 800fdb8:	200045c8 	.word	0x200045c8

0800fdbc <Light_LightnessLast_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessLast_Status(MOBLEUINT8* pLightnessLast_status, 
                                         MOBLEUINT32 *pLength,\
                                         MODEL_MessageHeader_t *pmsgParam)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	607a      	str	r2, [r7, #4]
  Following is the status message:
  Lightness     2B The value of the Light Lightness Last. 
  */
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessLast_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#8253! \n\r");
 800fdc8:	2100      	movs	r1, #0
 800fdca:	4816      	ldr	r0, [pc, #88]	; (800fe24 <Light_LightnessLast_Status+0x68>)
 800fdcc:	f7fd fbdc 	bl	800d588 <TraceHeader>
 800fdd0:	4815      	ldr	r0, [pc, #84]	; (800fe28 <Light_LightnessLast_Status+0x6c>)
 800fdd2:	f019 fcc1 	bl	8029758 <iprintf>
  
  *pLightnessLast_status = Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus ;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	4619      	mov	r1, r3
 800fddc:	4a13      	ldr	r2, [pc, #76]	; (800fe2c <Light_LightnessLast_Status+0x70>)
 800fdde:	460b      	mov	r3, r1
 800fde0:	00db      	lsls	r3, r3, #3
 800fde2:	440b      	add	r3, r1
 800fde4:	4413      	add	r3, r2
 800fde6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	b2da      	uxtb	r2, r3
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	701a      	strb	r2, [r3, #0]
  *(pLightnessLast_status+1) = Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus >> 8;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	4a0c      	ldr	r2, [pc, #48]	; (800fe2c <Light_LightnessLast_Status+0x70>)
 800fdfa:	460b      	mov	r3, r1
 800fdfc:	00db      	lsls	r3, r3, #3
 800fdfe:	440b      	add	r3, r1
 800fe00:	4413      	add	r3, r2
 800fe02:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	0a1b      	lsrs	r3, r3, #8
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	3301      	adds	r3, #1
 800fe10:	b2d2      	uxtb	r2, r2
 800fe12:	701a      	strb	r2, [r3, #0]
  *pLength = 2;
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	2202      	movs	r2, #2
 800fe18:	601a      	str	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 800fe1a:	2300      	movs	r3, #0
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3710      	adds	r7, #16
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	08033240 	.word	0x08033240
 800fe28:	0802f564 	.word	0x0802f564
 800fe2c:	200045c8 	.word	0x200045c8

0800fe30 <Light_LightnessDefault_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessDefault_Set(const MOBLEUINT8* plightnessDefault_param, 
                                         MOBLEUINT32 length,\
                                         MODEL_MessageHeader_t *pmsgParam)
{
 800fe30:	b590      	push	{r4, r7, lr}
 800fe32:	b087      	sub	sp, #28
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	60b9      	str	r1, [r7, #8]
 800fe3a:	607a      	str	r2, [r7, #4]
  /* 6.3.1.12 Light Default Lightness Set
  Lightness   2B The target value of the Light Lightness Actual state. 
  */
  MOBLEUINT8 OptionalValid = 0;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	75fb      	strb	r3, [r7, #23]
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessDefault_Set callback received \r\n");  
  
  Light_LightnessDefaultParam[pmsgParam->elementIndex].LightnessDefaultStatus = plightnessDefault_param[1] << 8;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	3301      	adds	r3, #1
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	687a      	ldr	r2, [r7, #4]
 800fe4a:	7812      	ldrb	r2, [r2, #0]
 800fe4c:	021b      	lsls	r3, r3, #8
 800fe4e:	b299      	uxth	r1, r3
 800fe50:	4b12      	ldr	r3, [pc, #72]	; (800fe9c <Light_LightnessDefault_Set+0x6c>)
 800fe52:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  Light_LightnessDefaultParam[pmsgParam->elementIndex].LightnessDefaultStatus |= plightnessDefault_param[0];
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	4b0f      	ldr	r3, [pc, #60]	; (800fe9c <Light_LightnessDefault_Set+0x6c>)
 800fe5e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	6879      	ldr	r1, [r7, #4]
 800fe6a:	7809      	ldrb	r1, [r1, #0]
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	b29a      	uxth	r2, r3
 800fe70:	4b0a      	ldr	r3, [pc, #40]	; (800fe9c <Light_LightnessDefault_Set+0x6c>)
 800fe72:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
  
  /* Application Callback */
  (LightAppli_cb.Lightness_Default_Set_cb)(&Light_LightnessDefaultParam[pmsgParam->elementIndex], 
 800fe76:	4b0a      	ldr	r3, [pc, #40]	; (800fea0 <Light_LightnessDefault_Set+0x70>)
 800fe78:	691c      	ldr	r4, [r3, #16]
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	005b      	lsls	r3, r3, #1
 800fe80:	4a06      	ldr	r2, [pc, #24]	; (800fe9c <Light_LightnessDefault_Set+0x6c>)
 800fe82:	1898      	adds	r0, r3, r2
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	88da      	ldrh	r2, [r3, #6]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	7df9      	ldrb	r1, [r7, #23]
 800fe8e:	47a0      	blx	r4
                                   OptionalValid, pmsgParam->dst_peer, pmsgParam->elementIndex);
  
  return MOBLE_RESULT_SUCCESS;
 800fe90:	2300      	movs	r3, #0
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	371c      	adds	r7, #28
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd90      	pop	{r4, r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	200045d4 	.word	0x200045d4
 800fea0:	08032d80 	.word	0x08032d80

0800fea4 <Light_LightnessDefault_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessDefault_Status(MOBLEUINT8* pLightnessDefault_status,
                                            MOBLEUINT32 *pLength,\
                                            MODEL_MessageHeader_t *pmsgParam)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b084      	sub	sp, #16
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	607a      	str	r2, [r7, #4]
  Following is the status message:
  Lightness     2B The value of the Light Lightness Default state. 
  */
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessDefault_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#8255! \n\r");
 800feb0:	2100      	movs	r1, #0
 800feb2:	4811      	ldr	r0, [pc, #68]	; (800fef8 <Light_LightnessDefault_Status+0x54>)
 800feb4:	f7fd fb68 	bl	800d588 <TraceHeader>
 800feb8:	4810      	ldr	r0, [pc, #64]	; (800fefc <Light_LightnessDefault_Status+0x58>)
 800feba:	f019 fc4d 	bl	8029758 <iprintf>
  
  /* Function call back to get the values from application*/
  *pLightnessDefault_status = Light_LightnessDefaultParam[pmsgParam->elementIndex].LightnessDefaultStatus ;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	461a      	mov	r2, r3
 800fec4:	4b0e      	ldr	r3, [pc, #56]	; (800ff00 <Light_LightnessDefault_Status+0x5c>)
 800fec6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800feca:	b2da      	uxtb	r2, r3
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	701a      	strb	r2, [r3, #0]
  *(pLightnessDefault_status+1) = Light_LightnessDefaultParam[pmsgParam->elementIndex].LightnessDefaultStatus >>8;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	461a      	mov	r2, r3
 800fed6:	4b0a      	ldr	r3, [pc, #40]	; (800ff00 <Light_LightnessDefault_Status+0x5c>)
 800fed8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fedc:	0a1b      	lsrs	r3, r3, #8
 800fede:	b29a      	uxth	r2, r3
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	3301      	adds	r3, #1
 800fee4:	b2d2      	uxtb	r2, r2
 800fee6:	701a      	strb	r2, [r3, #0]
  *pLength = 2;
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	2202      	movs	r2, #2
 800feec:	601a      	str	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 800feee:	2300      	movs	r3, #0
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3710      	adds	r7, #16
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	0803325c 	.word	0x0803325c
 800fefc:	0802f570 	.word	0x0802f570
 800ff00:	200045d4 	.word	0x200045d4

0800ff04 <Light_LightnessRange_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessRange_Set(const MOBLEUINT8* plightnessRange_param, 
                                       MOBLEUINT32 length,\
                                       MODEL_MessageHeader_t *pmsgParam)
{
 800ff04:	b590      	push	{r4, r7, lr}
 800ff06:	b087      	sub	sp, #28
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	607a      	str	r2, [r7, #4]
  /* 6.3.1.16 Light Lightness Range Set 
  Min Range    2B The Minimum range value of the Light Lightness state. 
  Max Range    2B The Maximum range value of the Light Lightness state         
  */
  MOBLEUINT8 OptionalValid = 0;
 800ff10:	2300      	movs	r3, #0
 800ff12:	75fb      	strb	r3, [r7, #23]
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessRange_Set callback received \r\n");
  
  Light_LightnessRangeParam[pmsgParam->elementIndex].MinRangeStatus = plightnessRange_param[1] << 8;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	3301      	adds	r3, #1
 800ff18:	781b      	ldrb	r3, [r3, #0]
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	687a      	ldr	r2, [r7, #4]
 800ff1e:	7812      	ldrb	r2, [r2, #0]
 800ff20:	4611      	mov	r1, r2
 800ff22:	021b      	lsls	r3, r3, #8
 800ff24:	b298      	uxth	r0, r3
 800ff26:	4a36      	ldr	r2, [pc, #216]	; (8010000 <Light_LightnessRange_Set+0xfc>)
 800ff28:	460b      	mov	r3, r1
 800ff2a:	009b      	lsls	r3, r3, #2
 800ff2c:	440b      	add	r3, r1
 800ff2e:	4413      	add	r3, r2
 800ff30:	4602      	mov	r2, r0
 800ff32:	f8a3 2001 	strh.w	r2, [r3, #1]
  Light_LightnessRangeParam[pmsgParam->elementIndex].MinRangeStatus |= plightnessRange_param[0];
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	4a30      	ldr	r2, [pc, #192]	; (8010000 <Light_LightnessRange_Set+0xfc>)
 800ff3e:	460b      	mov	r3, r1
 800ff40:	009b      	lsls	r3, r3, #2
 800ff42:	440b      	add	r3, r1
 800ff44:	4413      	add	r3, r2
 800ff46:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ff4a:	b29a      	uxth	r2, r3
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	6879      	ldr	r1, [r7, #4]
 800ff54:	7809      	ldrb	r1, [r1, #0]
 800ff56:	4313      	orrs	r3, r2
 800ff58:	b298      	uxth	r0, r3
 800ff5a:	4a29      	ldr	r2, [pc, #164]	; (8010000 <Light_LightnessRange_Set+0xfc>)
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	009b      	lsls	r3, r3, #2
 800ff60:	440b      	add	r3, r1
 800ff62:	4413      	add	r3, r2
 800ff64:	4602      	mov	r2, r0
 800ff66:	f8a3 2001 	strh.w	r2, [r3, #1]
  
  Light_LightnessRangeParam[pmsgParam->elementIndex].MaxRangeStatus = plightnessRange_param[3] << 8;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	3303      	adds	r3, #3
 800ff6e:	781b      	ldrb	r3, [r3, #0]
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	7812      	ldrb	r2, [r2, #0]
 800ff76:	4611      	mov	r1, r2
 800ff78:	021b      	lsls	r3, r3, #8
 800ff7a:	b298      	uxth	r0, r3
 800ff7c:	4a20      	ldr	r2, [pc, #128]	; (8010000 <Light_LightnessRange_Set+0xfc>)
 800ff7e:	460b      	mov	r3, r1
 800ff80:	009b      	lsls	r3, r3, #2
 800ff82:	440b      	add	r3, r1
 800ff84:	4413      	add	r3, r2
 800ff86:	4602      	mov	r2, r0
 800ff88:	f8a3 2003 	strh.w	r2, [r3, #3]
  Light_LightnessRangeParam[pmsgParam->elementIndex].MaxRangeStatus |= plightnessRange_param[2];
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	4619      	mov	r1, r3
 800ff92:	4a1b      	ldr	r2, [pc, #108]	; (8010000 <Light_LightnessRange_Set+0xfc>)
 800ff94:	460b      	mov	r3, r1
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	440b      	add	r3, r1
 800ff9a:	4413      	add	r3, r2
 800ff9c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ffa0:	b29a      	uxth	r2, r3
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	3302      	adds	r3, #2
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	b29b      	uxth	r3, r3
 800ffaa:	6879      	ldr	r1, [r7, #4]
 800ffac:	7809      	ldrb	r1, [r1, #0]
 800ffae:	4313      	orrs	r3, r2
 800ffb0:	b298      	uxth	r0, r3
 800ffb2:	4a13      	ldr	r2, [pc, #76]	; (8010000 <Light_LightnessRange_Set+0xfc>)
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	440b      	add	r3, r1
 800ffba:	4413      	add	r3, r2
 800ffbc:	4602      	mov	r2, r0
 800ffbe:	f8a3 2003 	strh.w	r2, [r3, #3]
  Light_LightnessRangeParam[pmsgParam->elementIndex].StatusCode = SUCCESS_STATUS_CODE;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	4a0d      	ldr	r2, [pc, #52]	; (8010000 <Light_LightnessRange_Set+0xfc>)
 800ffca:	460b      	mov	r3, r1
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	440b      	add	r3, r1
 800ffd0:	4413      	add	r3, r2
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	701a      	strb	r2, [r3, #0]
  
  /* condition to check the minimum range value according to the specification*/
  /* set the status code for status message according to value of range*/  
  
  /* Application Callback */
  (LightAppli_cb.Lightness_Range_Set_cb)(&Light_LightnessRangeParam[pmsgParam->elementIndex], OptionalValid,pmsgParam->dst_peer,pmsgParam->elementIndex);
 800ffd6:	4b0b      	ldr	r3, [pc, #44]	; (8010004 <Light_LightnessRange_Set+0x100>)
 800ffd8:	6a1c      	ldr	r4, [r3, #32]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	009b      	lsls	r3, r3, #2
 800ffe4:	4413      	add	r3, r2
 800ffe6:	4a06      	ldr	r2, [pc, #24]	; (8010000 <Light_LightnessRange_Set+0xfc>)
 800ffe8:	1898      	adds	r0, r3, r2
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	88da      	ldrh	r2, [r3, #6]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	7df9      	ldrb	r1, [r7, #23]
 800fff4:	47a0      	blx	r4
  
  return MOBLE_RESULT_SUCCESS;
 800fff6:	2300      	movs	r3, #0
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	371c      	adds	r7, #28
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd90      	pop	{r4, r7, pc}
 8010000:	200045d8 	.word	0x200045d8
 8010004:	08032d80 	.word	0x08032d80

08010008 <Light_LightnessRange_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessRange_Status(MOBLEUINT8* pLightnessRange_status,
                                          MOBLEUINT32 *pLength,\
                                          MODEL_MessageHeader_t *pmsgParam)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	607a      	str	r2, [r7, #4]
  Min Range      2B The Minimum range value of the Light Lightness state. 
  Max Range      2B The Maximum range value of the Light Lightness state         
  */
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessRange_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#8257! \n\r");
 8010014:	2100      	movs	r1, #0
 8010016:	482c      	ldr	r0, [pc, #176]	; (80100c8 <Light_LightnessRange_Status+0xc0>)
 8010018:	f7fd fab6 	bl	800d588 <TraceHeader>
 801001c:	482b      	ldr	r0, [pc, #172]	; (80100cc <Light_LightnessRange_Status+0xc4>)
 801001e:	f019 fb9b 	bl	8029758 <iprintf>
  
  *(pLightnessRange_status) = Light_LightnessRangeParam[pmsgParam->elementIndex].StatusCode;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	4619      	mov	r1, r3
 8010028:	4a29      	ldr	r2, [pc, #164]	; (80100d0 <Light_LightnessRange_Status+0xc8>)
 801002a:	460b      	mov	r3, r1
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	440b      	add	r3, r1
 8010030:	4413      	add	r3, r2
 8010032:	781a      	ldrb	r2, [r3, #0]
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	701a      	strb	r2, [r3, #0]
  *(pLightnessRange_status+1) = Light_LightnessRangeParam[pmsgParam->elementIndex].MinRangeStatus;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	4619      	mov	r1, r3
 801003e:	4a24      	ldr	r2, [pc, #144]	; (80100d0 <Light_LightnessRange_Status+0xc8>)
 8010040:	460b      	mov	r3, r1
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	440b      	add	r3, r1
 8010046:	4413      	add	r3, r2
 8010048:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801004c:	b29a      	uxth	r2, r3
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	3301      	adds	r3, #1
 8010052:	b2d2      	uxtb	r2, r2
 8010054:	701a      	strb	r2, [r3, #0]
  *(pLightnessRange_status+2) = Light_LightnessRangeParam[pmsgParam->elementIndex].MinRangeStatus >> 8;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	4619      	mov	r1, r3
 801005c:	4a1c      	ldr	r2, [pc, #112]	; (80100d0 <Light_LightnessRange_Status+0xc8>)
 801005e:	460b      	mov	r3, r1
 8010060:	009b      	lsls	r3, r3, #2
 8010062:	440b      	add	r3, r1
 8010064:	4413      	add	r3, r2
 8010066:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801006a:	b29b      	uxth	r3, r3
 801006c:	0a1b      	lsrs	r3, r3, #8
 801006e:	b29a      	uxth	r2, r3
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	3302      	adds	r3, #2
 8010074:	b2d2      	uxtb	r2, r2
 8010076:	701a      	strb	r2, [r3, #0]
  *(pLightnessRange_status+3) = Light_LightnessRangeParam[pmsgParam->elementIndex].MaxRangeStatus;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	4619      	mov	r1, r3
 801007e:	4a14      	ldr	r2, [pc, #80]	; (80100d0 <Light_LightnessRange_Status+0xc8>)
 8010080:	460b      	mov	r3, r1
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	440b      	add	r3, r1
 8010086:	4413      	add	r3, r2
 8010088:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 801008c:	b29a      	uxth	r2, r3
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	3303      	adds	r3, #3
 8010092:	b2d2      	uxtb	r2, r2
 8010094:	701a      	strb	r2, [r3, #0]
  *(pLightnessRange_status+4) = Light_LightnessRangeParam[pmsgParam->elementIndex].MaxRangeStatus >> 8;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	4619      	mov	r1, r3
 801009c:	4a0c      	ldr	r2, [pc, #48]	; (80100d0 <Light_LightnessRange_Status+0xc8>)
 801009e:	460b      	mov	r3, r1
 80100a0:	009b      	lsls	r3, r3, #2
 80100a2:	440b      	add	r3, r1
 80100a4:	4413      	add	r3, r2
 80100a6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80100aa:	b29b      	uxth	r3, r3
 80100ac:	0a1b      	lsrs	r3, r3, #8
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	3304      	adds	r3, #4
 80100b4:	b2d2      	uxtb	r2, r2
 80100b6:	701a      	strb	r2, [r3, #0]
  *pLength = 5;
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	2205      	movs	r2, #5
 80100bc:	601a      	str	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 80100be:	2300      	movs	r3, #0
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3710      	adds	r7, #16
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	0803327c 	.word	0x0803327c
 80100cc:	0802f57c 	.word	0x0802f57c
 80100d0:	200045d8 	.word	0x200045d8

080100d4 <LightModelServer_GetOpcodeTableCb>:
* @param  length: Pointer to the Length of Light Model opcode array
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT LightModelServer_GetOpcodeTableCb(const MODEL_OpcodeTableParam_t **data, 
                                               MOBLEUINT16 *length)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b083      	sub	sp, #12
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
  *data = Light_Opcodes_Table;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	4a05      	ldr	r2, [pc, #20]	; (80100f8 <LightModelServer_GetOpcodeTableCb+0x24>)
 80100e2:	601a      	str	r2, [r3, #0]
  *length = sizeof(Light_Opcodes_Table)/sizeof(Light_Opcodes_Table[0]);
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	220e      	movs	r2, #14
 80100e8:	801a      	strh	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 80100ea:	2300      	movs	r3, #0
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	370c      	adds	r7, #12
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr
 80100f8:	08033160 	.word	0x08033160

080100fc <LightModelServer_GetStatusRequestCb>:
                                    MOBLEUINT8 *pResponsedata, 
                                    MOBLEUINT32 *plength, 
                                    MOBLEUINT8 const *pRxData,
                                    MOBLEUINT32 dataLength,
                                    MOBLEBOOL response)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	607a      	str	r2, [r7, #4]
 8010106:	603b      	str	r3, [r7, #0]
 8010108:	460b      	mov	r3, r1
 801010a:	817b      	strh	r3, [r7, #10]
  TRACE_M(TF_LIGHT_M,"response status enable \n\r");
  switch(opcode)
 801010c:	897b      	ldrh	r3, [r7, #10]
 801010e:	f5a3 4302 	sub.w	r3, r3, #33280	; 0x8200
 8010112:	3b4e      	subs	r3, #78	; 0x4e
 8010114:	2b0a      	cmp	r3, #10
 8010116:	d837      	bhi.n	8010188 <LightModelServer_GetStatusRequestCb+0x8c>
 8010118:	a201      	add	r2, pc, #4	; (adr r2, 8010120 <LightModelServer_GetStatusRequestCb+0x24>)
 801011a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801011e:	bf00      	nop
 8010120:	0801014d 	.word	0x0801014d
 8010124:	08010189 	.word	0x08010189
 8010128:	08010189 	.word	0x08010189
 801012c:	08010189 	.word	0x08010189
 8010130:	08010159 	.word	0x08010159
 8010134:	08010189 	.word	0x08010189
 8010138:	08010165 	.word	0x08010165
 801013c:	08010189 	.word	0x08010189
 8010140:	08010171 	.word	0x08010171
 8010144:	08010189 	.word	0x08010189
 8010148:	0801017d 	.word	0x0801017d
  {
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    
  case LIGHT_LIGHTNESS_STATUS:
    {
      Light_Lightness_Status(pResponsedata, plength , pmsgParam);
 801014c:	68fa      	ldr	r2, [r7, #12]
 801014e:	6839      	ldr	r1, [r7, #0]
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f7ff fbf5 	bl	800f940 <Light_Lightness_Status>
      break;
 8010156:	e018      	b.n	801018a <LightModelServer_GetStatusRequestCb+0x8e>
    }    
  case LIGHT_LIGHTNESS_LINEAR_STATUS:
    {
      Light_LightnessLinear_Status(pResponsedata,plength, pmsgParam);
 8010158:	68fa      	ldr	r2, [r7, #12]
 801015a:	6839      	ldr	r1, [r7, #0]
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7ff fd5f 	bl	800fc20 <Light_LightnessLinear_Status>
      break;
 8010162:	e012      	b.n	801018a <LightModelServer_GetStatusRequestCb+0x8e>
    }     
  case LIGHT_LIGHTNESS_LAST_STATUS:
    {
      Light_LightnessLast_Status(pResponsedata,plength, pmsgParam);
 8010164:	68fa      	ldr	r2, [r7, #12]
 8010166:	6839      	ldr	r1, [r7, #0]
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f7ff fe27 	bl	800fdbc <Light_LightnessLast_Status>
      break;
 801016e:	e00c      	b.n	801018a <LightModelServer_GetStatusRequestCb+0x8e>
    }   
  case LIGHT_LIGHTNESS_DEFAULT_STATUS:
    {
      Light_LightnessDefault_Status(pResponsedata,plength, pmsgParam);
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	6839      	ldr	r1, [r7, #0]
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f7ff fe95 	bl	800fea4 <Light_LightnessDefault_Status>
      break;
 801017a:	e006      	b.n	801018a <LightModelServer_GetStatusRequestCb+0x8e>
    }  
  case LIGHT_LIGHTNESS_RANGE_STATUS:
    {
      Light_LightnessRange_Status(pResponsedata,plength, pmsgParam);
 801017c:	68fa      	ldr	r2, [r7, #12]
 801017e:	6839      	ldr	r1, [r7, #0]
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f7ff ff41 	bl	8010008 <Light_LightnessRange_Status>
      break;
 8010186:	e000      	b.n	801018a <LightModelServer_GetStatusRequestCb+0x8e>
      break;
    } 
#endif
  default:
    {
      break;
 8010188:	bf00      	nop
    }
  }
  return MOBLE_RESULT_SUCCESS;    
 801018a:	2300      	movs	r3, #0
}
 801018c:	4618      	mov	r0, r3
 801018e:	3710      	adds	r7, #16
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <LightModelServer_ProcessMessageCb>:
                                               MOBLEUINT16 opcode, 
                                               MOBLEUINT8 const *pRxData, 
                                               MOBLEUINT32 dataLength, 
                                               MOBLEBOOL response
                                                 )
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b086      	sub	sp, #24
 8010198:	af00      	add	r7, sp, #0
 801019a:	60f8      	str	r0, [r7, #12]
 801019c:	607a      	str	r2, [r7, #4]
 801019e:	603b      	str	r3, [r7, #0]
 80101a0:	460b      	mov	r3, r1
 80101a2:	817b      	strh	r3, [r7, #10]
  Model_Binding_Var.Dst_Peer = pmsgParam->dst_peer;	
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	88da      	ldrh	r2, [r3, #6]
 80101a8:	4b8a      	ldr	r3, [pc, #552]	; (80103d4 <LightModelServer_ProcessMessageCb+0x240>)
 80101aa:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 80101ac:	2300      	movs	r3, #0
 80101ae:	75fb      	strb	r3, [r7, #23]
  MOBLE_ADDRESS publishAddress;
  MOBLEUINT8 modelStateChangeFlag = MOBLE_FALSE;
 80101b0:	2300      	movs	r3, #0
 80101b2:	75bb      	strb	r3, [r7, #22]
  
  TRACE_M(TF_LIGHT_M, "elementIndex %.2x dst_peer %.2X peer_add %.2X opcode %.2X response %.2X\r\n",
          pmsgParam->elementIndex, pmsgParam->dst_peer, pmsgParam->peer_addr, opcode, response);
  
  switch(opcode)
 80101b4:	897b      	ldrh	r3, [r7, #10]
 80101b6:	f5a3 4302 	sub.w	r3, r3, #33280	; 0x8200
 80101ba:	3b4c      	subs	r3, #76	; 0x4c
 80101bc:	2b10      	cmp	r3, #16
 80101be:	f200 809f 	bhi.w	8010300 <LightModelServer_ProcessMessageCb+0x16c>
 80101c2:	a201      	add	r2, pc, #4	; (adr r2, 80101c8 <LightModelServer_ProcessMessageCb+0x34>)
 80101c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101c8:	0801020d 	.word	0x0801020d
 80101cc:	0801020d 	.word	0x0801020d
 80101d0:	08010301 	.word	0x08010301
 80101d4:	08010301 	.word	0x08010301
 80101d8:	08010265 	.word	0x08010265
 80101dc:	08010265 	.word	0x08010265
 80101e0:	08010301 	.word	0x08010301
 80101e4:	08010301 	.word	0x08010301
 80101e8:	08010301 	.word	0x08010301
 80101ec:	08010301 	.word	0x08010301
 80101f0:	08010301 	.word	0x08010301
 80101f4:	08010301 	.word	0x08010301
 80101f8:	08010301 	.word	0x08010301
 80101fc:	080102bd 	.word	0x080102bd
 8010200:	080102bd 	.word	0x080102bd
 8010204:	080102df 	.word	0x080102df
 8010208:	080102df 	.word	0x080102df
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS  
    
  case LIGHT_LIGHTNESS_SET:
  case LIGHT_LIGHTNESS_SET_UNACK:
    {       
      result = Chk_ParamMinMaxValidity(MIN_VALID_RANGE ,pRxData , MAX_VALID_RANGE );
 801020c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010210:	6879      	ldr	r1, [r7, #4]
 8010212:	2000      	movs	r0, #0
 8010214:	f7fd f966 	bl	800d4e4 <Chk_ParamMinMaxValidity>
 8010218:	4603      	mov	r3, r0
 801021a:	75fb      	strb	r3, [r7, #23]
      
      if(result == MOBLE_RESULT_SUCCESS)
 801021c:	7dfb      	ldrb	r3, [r7, #23]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d170      	bne.n	8010304 <LightModelServer_ProcessMessageCb+0x170>
      {
          if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr, pmsgParam->dst_peer,pRxData[2])))
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	8898      	ldrh	r0, [r3, #4]
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	88d9      	ldrh	r1, [r3, #6]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	3302      	adds	r3, #2
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	461a      	mov	r2, r3
 8010232:	f7fd fb61 	bl	800d8f8 <Chk_TidValidity>
 8010236:	4603      	mov	r3, r0
 8010238:	75fb      	strb	r3, [r7, #23]
 801023a:	7dfb      	ldrb	r3, [r7, #23]
 801023c:	2b01      	cmp	r3, #1
 801023e:	d861      	bhi.n	8010304 <LightModelServer_ProcessMessageCb+0x170>
        {
            Light_Lightness_Set(pRxData, dataLength,pmsgParam);
 8010240:	68fa      	ldr	r2, [r7, #12]
 8010242:	6839      	ldr	r1, [r7, #0]
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f7ff fa6b 	bl	800f720 <Light_Lightness_Set>
            Model_Binding_Var.Model_ID = (MOBLEUINT16)LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 801024a:	4b62      	ldr	r3, [pc, #392]	; (80103d4 <LightModelServer_ProcessMessageCb+0x240>)
 801024c:	f44f 5298 	mov.w	r2, #4864	; 0x1300
 8010250:	805a      	strh	r2, [r3, #2]
            Model_Binding_Var.Model_Rx_Opcode = opcode;
 8010252:	4a60      	ldr	r2, [pc, #384]	; (80103d4 <LightModelServer_ProcessMessageCb+0x240>)
 8010254:	897b      	ldrh	r3, [r7, #10]
 8010256:	8013      	strh	r3, [r2, #0]
            modelStateChangeFlag = MOBLE_TRUE; 
 8010258:	2301      	movs	r3, #1
 801025a:	75bb      	strb	r3, [r7, #22]
            Publication1SecFlag.count = 0;
 801025c:	4b5e      	ldr	r3, [pc, #376]	; (80103d8 <LightModelServer_ProcessMessageCb+0x244>)
 801025e:	2200      	movs	r2, #0
 8010260:	709a      	strb	r2, [r3, #2]
        }
      }
      break;
 8010262:	e04f      	b.n	8010304 <LightModelServer_ProcessMessageCb+0x170>
    }
  case LIGHT_LIGHTNESS_LINEAR_SET:
  case LIGHT_LIGHTNESS_LINEAR_SET_UNACK: 
    {
      result = Chk_ParamMinMaxValidity(MIN_VALID_RANGE , pRxData , MAX_VALID_RANGE);
 8010264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010268:	6879      	ldr	r1, [r7, #4]
 801026a:	2000      	movs	r0, #0
 801026c:	f7fd f93a 	bl	800d4e4 <Chk_ParamMinMaxValidity>
 8010270:	4603      	mov	r3, r0
 8010272:	75fb      	strb	r3, [r7, #23]
      
      if(result == MOBLE_RESULT_SUCCESS)
 8010274:	7dfb      	ldrb	r3, [r7, #23]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d146      	bne.n	8010308 <LightModelServer_ProcessMessageCb+0x174>
      {
          if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr, 
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	8898      	ldrh	r0, [r3, #4]
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	88d9      	ldrh	r1, [r3, #6]
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	3302      	adds	r3, #2
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	461a      	mov	r2, r3
 801028a:	f7fd fb35 	bl	800d8f8 <Chk_TidValidity>
 801028e:	4603      	mov	r3, r0
 8010290:	75fb      	strb	r3, [r7, #23]
 8010292:	7dfb      	ldrb	r3, [r7, #23]
 8010294:	2b01      	cmp	r3, #1
 8010296:	d837      	bhi.n	8010308 <LightModelServer_ProcessMessageCb+0x174>
                                                  pmsgParam->dst_peer,pRxData[2])))
        {
            Light_LightnessLinear_Set(pRxData, dataLength,pmsgParam);
 8010298:	68fa      	ldr	r2, [r7, #12]
 801029a:	6839      	ldr	r1, [r7, #0]
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f7ff fbe1 	bl	800fa64 <Light_LightnessLinear_Set>
            Model_Binding_Var.Model_ID = (MOBLEUINT16)LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 80102a2:	4b4c      	ldr	r3, [pc, #304]	; (80103d4 <LightModelServer_ProcessMessageCb+0x240>)
 80102a4:	f44f 5298 	mov.w	r2, #4864	; 0x1300
 80102a8:	805a      	strh	r2, [r3, #2]
            Model_Binding_Var.Model_Rx_Opcode = opcode;
 80102aa:	4a4a      	ldr	r2, [pc, #296]	; (80103d4 <LightModelServer_ProcessMessageCb+0x240>)
 80102ac:	897b      	ldrh	r3, [r7, #10]
 80102ae:	8013      	strh	r3, [r2, #0]
            modelStateChangeFlag = MOBLE_TRUE;
 80102b0:	2301      	movs	r3, #1
 80102b2:	75bb      	strb	r3, [r7, #22]
            Publication1SecFlag.count = 0;
 80102b4:	4b48      	ldr	r3, [pc, #288]	; (80103d8 <LightModelServer_ProcessMessageCb+0x244>)
 80102b6:	2200      	movs	r2, #0
 80102b8:	709a      	strb	r2, [r3, #2]
        }
      }
      break;
 80102ba:	e025      	b.n	8010308 <LightModelServer_ProcessMessageCb+0x174>
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP
    
  case LIGHT_LIGHTNESS_DEFAULT_SET:
  case LIGHT_LIGHTNESS_DEFAULT_SET_UNACK:
    {      
      result = Chk_ParamMinMaxValidity(MIN_VALID_RANGE , pRxData , MAX_VALID_RANGE);
 80102bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102c0:	6879      	ldr	r1, [r7, #4]
 80102c2:	2000      	movs	r0, #0
 80102c4:	f7fd f90e 	bl	800d4e4 <Chk_ParamMinMaxValidity>
 80102c8:	4603      	mov	r3, r0
 80102ca:	75fb      	strb	r3, [r7, #23]
      
      if(result == MOBLE_RESULT_SUCCESS)
 80102cc:	7dfb      	ldrb	r3, [r7, #23]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d11c      	bne.n	801030c <LightModelServer_ProcessMessageCb+0x178>
      {
          Light_LightnessDefault_Set(pRxData, dataLength, pmsgParam);       
 80102d2:	68fa      	ldr	r2, [r7, #12]
 80102d4:	6839      	ldr	r1, [r7, #0]
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f7ff fdaa 	bl	800fe30 <Light_LightnessDefault_Set>
      }
      break;
 80102dc:	e016      	b.n	801030c <LightModelServer_ProcessMessageCb+0x178>
    }
  case LIGHT_LIGHTNESS_RANGE_SET:
  case LIGHT_LIGHTNESS_RANGE_SET_UNACK:
    {
      result = Chk_RangeValidity(MIN_VALID_RANGE , pRxData , MAX_VALID_RANGE);
 80102de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102e2:	6879      	ldr	r1, [r7, #4]
 80102e4:	2000      	movs	r0, #0
 80102e6:	f7fd f87e 	bl	800d3e6 <Chk_RangeValidity>
 80102ea:	4603      	mov	r3, r0
 80102ec:	75fb      	strb	r3, [r7, #23]
      
      if(result == MOBLE_RESULT_SUCCESS)
 80102ee:	7dfb      	ldrb	r3, [r7, #23]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d10d      	bne.n	8010310 <LightModelServer_ProcessMessageCb+0x17c>
      {
          Light_LightnessRange_Set(pRxData, dataLength,pmsgParam);     
 80102f4:	68fa      	ldr	r2, [r7, #12]
 80102f6:	6839      	ldr	r1, [r7, #0]
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f7ff fe03 	bl	800ff04 <Light_LightnessRange_Set>
      }
      break;
 80102fe:	e007      	b.n	8010310 <LightModelServer_ProcessMessageCb+0x17c>
    }

#endif  
  default:
    {
      break;
 8010300:	bf00      	nop
 8010302:	e006      	b.n	8010312 <LightModelServer_ProcessMessageCb+0x17e>
      break;
 8010304:	bf00      	nop
 8010306:	e004      	b.n	8010312 <LightModelServer_ProcessMessageCb+0x17e>
      break;
 8010308:	bf00      	nop
 801030a:	e002      	b.n	8010312 <LightModelServer_ProcessMessageCb+0x17e>
      break;
 801030c:	bf00      	nop
 801030e:	e000      	b.n	8010312 <LightModelServer_ProcessMessageCb+0x17e>
      break;
 8010310:	bf00      	nop
    }    
  } /* Switch ends */
  
  if((result == MOBLE_RESULT_SUCCESS) && (response == MOBLE_TRUE))
 8010312:	7dfb      	ldrb	r3, [r7, #23]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d120      	bne.n	801035a <LightModelServer_ProcessMessageCb+0x1c6>
 8010318:	f897 3020 	ldrb.w	r3, [r7, #32]
 801031c:	2b01      	cmp	r3, #1
 801031e:	d11c      	bne.n	801035a <LightModelServer_ProcessMessageCb+0x1c6>
  {
    if(ADDRESS_IS_UNICAST(pmsgParam->dst_peer))
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	88db      	ldrh	r3, [r3, #6]
 8010324:	b21b      	sxth	r3, r3
 8010326:	2b00      	cmp	r3, #0
 8010328:	dd0b      	ble.n	8010342 <LightModelServer_ProcessMessageCb+0x1ae>
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	88db      	ldrh	r3, [r3, #6]
 801032e:	b21b      	sxth	r3, r3
 8010330:	2b00      	cmp	r3, #0
 8010332:	db06      	blt.n	8010342 <LightModelServer_ProcessMessageCb+0x1ae>
    {
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);                                           
 8010334:	8979      	ldrh	r1, [r7, #10]
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	687a      	ldr	r2, [r7, #4]
 801033a:	68f8      	ldr	r0, [r7, #12]
 801033c:	f018 f8ac 	bl	8028498 <Model_SendResponse>
 8010340:	e00b      	b.n	801035a <LightModelServer_ProcessMessageCb+0x1c6>
    }
    else{

      pmsgParam->dst_peer = BLEMesh_GetAddress();       // Replace group address by the single node address for response
 8010342:	f00c fe9b 	bl	801d07c <BLEMesh_GetAddress>
 8010346:	4603      	mov	r3, r0
 8010348:	461a      	mov	r2, r3
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	80da      	strh	r2, [r3, #6]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);   
 801034e:	8979      	ldrh	r1, [r7, #10]
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	687a      	ldr	r2, [r7, #4]
 8010354:	68f8      	ldr	r0, [r7, #12]
 8010356:	f018 f89f 	bl	8028498 <Model_SendResponse>
     Publish the status to publish address if the publication is set by client 
     publication is independent of the response of the message.if the condition 
     for publication is full filled as per specification then the status will be 
     published.
  */
  publishAddress = BLEMesh_GetPublishAddress(pmsgParam->elementIndex, Model_Binding_Var.Model_ID);
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	4a1d      	ldr	r2, [pc, #116]	; (80103d4 <LightModelServer_ProcessMessageCb+0x240>)
 8010360:	8852      	ldrh	r2, [r2, #2]
 8010362:	4611      	mov	r1, r2
 8010364:	4618      	mov	r0, r3
 8010366:	f00c fe99 	bl	801d09c <BLEMesh_GetPublishAddress>
 801036a:	4603      	mov	r3, r0
 801036c:	82bb      	strh	r3, [r7, #20]
  
  if((result == MOBLE_RESULT_SUCCESS) && (publishAddress != 0x0000) && (modelStateChangeFlag == MOBLE_TRUE))
 801036e:	7dfb      	ldrb	r3, [r7, #23]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d12a      	bne.n	80103ca <LightModelServer_ProcessMessageCb+0x236>
 8010374:	8abb      	ldrh	r3, [r7, #20]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d027      	beq.n	80103ca <LightModelServer_ProcessMessageCb+0x236>
 801037a:	7dbb      	ldrb	r3, [r7, #22]
 801037c:	2b01      	cmp	r3, #1
 801037e:	d124      	bne.n	80103ca <LightModelServer_ProcessMessageCb+0x236>
  {
    if(ADDRESS_IS_UNICAST(pmsgParam->dst_peer))
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	88db      	ldrh	r3, [r3, #6]
 8010384:	b21b      	sxth	r3, r3
 8010386:	2b00      	cmp	r3, #0
 8010388:	dd0e      	ble.n	80103a8 <LightModelServer_ProcessMessageCb+0x214>
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	88db      	ldrh	r3, [r3, #6]
 801038e:	b21b      	sxth	r3, r3
 8010390:	2b00      	cmp	r3, #0
 8010392:	db09      	blt.n	80103a8 <LightModelServer_ProcessMessageCb+0x214>
    {
      pmsgParam->peer_addr = publishAddress;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	8aba      	ldrh	r2, [r7, #20]
 8010398:	809a      	strh	r2, [r3, #4]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 801039a:	8979      	ldrh	r1, [r7, #10]
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	68f8      	ldr	r0, [r7, #12]
 80103a2:	f018 f879 	bl	8028498 <Model_SendResponse>
 80103a6:	e00e      	b.n	80103c6 <LightModelServer_ProcessMessageCb+0x232>
    }
    else{

      pmsgParam->peer_addr = publishAddress;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	8aba      	ldrh	r2, [r7, #20]
 80103ac:	809a      	strh	r2, [r3, #4]
      pmsgParam->dst_peer = BLEMesh_GetAddress(); // Replace group address by the single node address for response
 80103ae:	f00c fe65 	bl	801d07c <BLEMesh_GetAddress>
 80103b2:	4603      	mov	r3, r0
 80103b4:	461a      	mov	r2, r3
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	80da      	strh	r2, [r3, #6]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 80103ba:	8979      	ldrh	r1, [r7, #10]
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	68f8      	ldr	r0, [r7, #12]
 80103c2:	f018 f869 	bl	8028498 <Model_SendResponse>
    }
    
    modelStateChangeFlag = MOBLE_FALSE;  
 80103c6:	2300      	movs	r3, #0
 80103c8:	75bb      	strb	r3, [r7, #22]
    TRACE_I(TF_LIGHT_M,"Publishing state to the address  %.2X \r\n",publishAddress);
  }

  return MOBLE_RESULT_SUCCESS;
 80103ca:	2300      	movs	r3, #0
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3718      	adds	r7, #24
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	20004550 	.word	0x20004550
 80103d8:	200045ac 	.word	0x200045ac

080103dc <Light_TransitionBehaviourSingle_Param>:
* @param GetValue: Pointer of the array
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Light_TransitionBehaviourSingle_Param(MOBLEUINT8 *GetValue,
                                                   MOBLEUINT8 elementIndex)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	460b      	mov	r3, r1
 80103e6:	70fb      	strb	r3, [r7, #3]
  static MOBLEUINT8 Clockflag = 0;
  static MOBLEUINT32 Check_time;
  MOBLEUINT16 targetRange;
  MOBLEUINT16 targetSlot;
  
  if(Clockflag == 0)
 80103e8:	4bac      	ldr	r3, [pc, #688]	; (801069c <Light_TransitionBehaviourSingle_Param+0x2c0>)
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d107      	bne.n	8010400 <Light_TransitionBehaviourSingle_Param+0x24>
  {
    Check_time = Clock_Time();
 80103f0:	f7f7 fd44 	bl	8007e7c <HAL_GetTick>
 80103f4:	4603      	mov	r3, r0
 80103f6:	4aaa      	ldr	r2, [pc, #680]	; (80106a0 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 80103f8:	6013      	str	r3, [r2, #0]
    Clockflag = 1;
 80103fa:	4ba8      	ldr	r3, [pc, #672]	; (801069c <Light_TransitionBehaviourSingle_Param+0x2c0>)
 80103fc:	2201      	movs	r2, #1
 80103fe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Publication after 1 second if total transition time is greater than 2 sec.*/
  if(Light_TimeParam[elementIndex].TotalTime >2000)
 8010400:	78fa      	ldrb	r2, [r7, #3]
 8010402:	49a8      	ldr	r1, [pc, #672]	; (80106a4 <Light_TransitionBehaviourSingle_Param+0x2c8>)
 8010404:	4613      	mov	r3, r2
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	4413      	add	r3, r2
 801040a:	005b      	lsls	r3, r3, #1
 801040c:	440b      	add	r3, r1
 801040e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8010412:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8010416:	d901      	bls.n	801041c <Light_TransitionBehaviourSingle_Param+0x40>
  {
    Punblication_OneSecTimer();
 8010418:	f001 fbd0 	bl	8011bbc <Punblication_OneSecTimer>
  }
  
  /* Values from application are copied into temporary variables for processing */    
  Light_TemporaryStatus[elementIndex].PresentParam_1 = GetValue[1] << 8;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	3301      	adds	r3, #1
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	b29b      	uxth	r3, r3
 8010424:	78fa      	ldrb	r2, [r7, #3]
 8010426:	021b      	lsls	r3, r3, #8
 8010428:	b298      	uxth	r0, r3
 801042a:	499f      	ldr	r1, [pc, #636]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 801042c:	4613      	mov	r3, r2
 801042e:	005b      	lsls	r3, r3, #1
 8010430:	4413      	add	r3, r2
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	4413      	add	r3, r2
 8010436:	440b      	add	r3, r1
 8010438:	4602      	mov	r2, r0
 801043a:	801a      	strh	r2, [r3, #0]
  Light_TemporaryStatus[elementIndex].PresentParam_1 |= GetValue[0];   
 801043c:	78fa      	ldrb	r2, [r7, #3]
 801043e:	499a      	ldr	r1, [pc, #616]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 8010440:	4613      	mov	r3, r2
 8010442:	005b      	lsls	r3, r3, #1
 8010444:	4413      	add	r3, r2
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	4413      	add	r3, r2
 801044a:	440b      	add	r3, r1
 801044c:	881b      	ldrh	r3, [r3, #0]
 801044e:	b299      	uxth	r1, r3
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	781b      	ldrb	r3, [r3, #0]
 8010454:	b29b      	uxth	r3, r3
 8010456:	78fa      	ldrb	r2, [r7, #3]
 8010458:	430b      	orrs	r3, r1
 801045a:	b298      	uxth	r0, r3
 801045c:	4992      	ldr	r1, [pc, #584]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 801045e:	4613      	mov	r3, r2
 8010460:	005b      	lsls	r3, r3, #1
 8010462:	4413      	add	r3, r2
 8010464:	009b      	lsls	r3, r3, #2
 8010466:	4413      	add	r3, r2
 8010468:	440b      	add	r3, r1
 801046a:	4602      	mov	r2, r0
 801046c:	801a      	strh	r2, [r3, #0]
  /*if condition to wait until the time is equal to the given resolution time */  
  if(((Clock_Time()- Check_time) >= Light_TimeParam[elementIndex].Res_Value))
 801046e:	f7f7 fd05 	bl	8007e7c <HAL_GetTick>
 8010472:	4602      	mov	r2, r0
 8010474:	4b8a      	ldr	r3, [pc, #552]	; (80106a0 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	1ad1      	subs	r1, r2, r3
 801047a:	78fa      	ldrb	r2, [r7, #3]
 801047c:	4889      	ldr	r0, [pc, #548]	; (80106a4 <Light_TransitionBehaviourSingle_Param+0x2c8>)
 801047e:	4613      	mov	r3, r2
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	4413      	add	r3, r2
 8010484:	005b      	lsls	r3, r3, #1
 8010486:	4403      	add	r3, r0
 8010488:	f8d3 3001 	ldr.w	r3, [r3, #1]
 801048c:	4299      	cmp	r1, r3
 801048e:	f0c0 80ff 	bcc.w	8010690 <Light_TransitionBehaviourSingle_Param+0x2b4>
  {
    if(Light_TimeParam[elementIndex].StepValue == 0)
 8010492:	78fa      	ldrb	r2, [r7, #3]
 8010494:	4983      	ldr	r1, [pc, #524]	; (80106a4 <Light_TransitionBehaviourSingle_Param+0x2c8>)
 8010496:	4613      	mov	r3, r2
 8010498:	009b      	lsls	r3, r3, #2
 801049a:	4413      	add	r3, r2
 801049c:	005b      	lsls	r3, r3, #1
 801049e:	440b      	add	r3, r1
 80104a0:	f993 3000 	ldrsb.w	r3, [r3]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d108      	bne.n	80104ba <Light_TransitionBehaviourSingle_Param+0xde>
    {
      Light_TimeParam[elementIndex].StepValue = 1;
 80104a8:	78fa      	ldrb	r2, [r7, #3]
 80104aa:	497e      	ldr	r1, [pc, #504]	; (80106a4 <Light_TransitionBehaviourSingle_Param+0x2c8>)
 80104ac:	4613      	mov	r3, r2
 80104ae:	009b      	lsls	r3, r3, #2
 80104b0:	4413      	add	r3, r2
 80104b2:	005b      	lsls	r3, r3, #1
 80104b4:	440b      	add	r3, r1
 80104b6:	2201      	movs	r2, #1
 80104b8:	701a      	strb	r2, [r3, #0]
    }
    
    if(Light_TemporaryStatus[elementIndex].TargetParam_1 > Light_TemporaryStatus[elementIndex].PresentParam_1)
 80104ba:	78fa      	ldrb	r2, [r7, #3]
 80104bc:	497a      	ldr	r1, [pc, #488]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 80104be:	4613      	mov	r3, r2
 80104c0:	005b      	lsls	r3, r3, #1
 80104c2:	4413      	add	r3, r2
 80104c4:	009b      	lsls	r3, r3, #2
 80104c6:	4413      	add	r3, r2
 80104c8:	440b      	add	r3, r1
 80104ca:	3306      	adds	r3, #6
 80104cc:	881b      	ldrh	r3, [r3, #0]
 80104ce:	b299      	uxth	r1, r3
 80104d0:	78fa      	ldrb	r2, [r7, #3]
 80104d2:	4875      	ldr	r0, [pc, #468]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 80104d4:	4613      	mov	r3, r2
 80104d6:	005b      	lsls	r3, r3, #1
 80104d8:	4413      	add	r3, r2
 80104da:	009b      	lsls	r3, r3, #2
 80104dc:	4413      	add	r3, r2
 80104de:	4403      	add	r3, r0
 80104e0:	881b      	ldrh	r3, [r3, #0]
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	4299      	cmp	r1, r3
 80104e6:	d93b      	bls.n	8010560 <Light_TransitionBehaviourSingle_Param+0x184>
    {
      /* calculating the target range to be achieved which is target value
      which is target value minus present value if target value is greater 
      than present value.   
      */
      targetRange = Light_TemporaryStatus[elementIndex].TargetParam_1 - Light_TemporaryStatus[elementIndex].PresentParam_1;  
 80104e8:	78fa      	ldrb	r2, [r7, #3]
 80104ea:	496f      	ldr	r1, [pc, #444]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 80104ec:	4613      	mov	r3, r2
 80104ee:	005b      	lsls	r3, r3, #1
 80104f0:	4413      	add	r3, r2
 80104f2:	009b      	lsls	r3, r3, #2
 80104f4:	4413      	add	r3, r2
 80104f6:	440b      	add	r3, r1
 80104f8:	3306      	adds	r3, #6
 80104fa:	881b      	ldrh	r3, [r3, #0]
 80104fc:	b299      	uxth	r1, r3
 80104fe:	78fa      	ldrb	r2, [r7, #3]
 8010500:	4869      	ldr	r0, [pc, #420]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 8010502:	4613      	mov	r3, r2
 8010504:	005b      	lsls	r3, r3, #1
 8010506:	4413      	add	r3, r2
 8010508:	009b      	lsls	r3, r3, #2
 801050a:	4413      	add	r3, r2
 801050c:	4403      	add	r3, r0
 801050e:	881b      	ldrh	r3, [r3, #0]
 8010510:	b29b      	uxth	r3, r3
 8010512:	1acb      	subs	r3, r1, r3
 8010514:	81fb      	strh	r3, [r7, #14]
      /*target slot = time to cover in single step */
      targetSlot = targetRange/Light_TimeParam[elementIndex].StepValue;
 8010516:	89f9      	ldrh	r1, [r7, #14]
 8010518:	78fa      	ldrb	r2, [r7, #3]
 801051a:	4862      	ldr	r0, [pc, #392]	; (80106a4 <Light_TransitionBehaviourSingle_Param+0x2c8>)
 801051c:	4613      	mov	r3, r2
 801051e:	009b      	lsls	r3, r3, #2
 8010520:	4413      	add	r3, r2
 8010522:	005b      	lsls	r3, r3, #1
 8010524:	4403      	add	r3, r0
 8010526:	f993 3000 	ldrsb.w	r3, [r3]
 801052a:	fb91 f3f3 	sdiv	r3, r1, r3
 801052e:	81bb      	strh	r3, [r7, #12]
      /* target slot added to present value to achieve target value */
      Light_TemporaryStatus[elementIndex].PresentParam_1 += targetSlot;             
 8010530:	78fa      	ldrb	r2, [r7, #3]
 8010532:	495d      	ldr	r1, [pc, #372]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 8010534:	4613      	mov	r3, r2
 8010536:	005b      	lsls	r3, r3, #1
 8010538:	4413      	add	r3, r2
 801053a:	009b      	lsls	r3, r3, #2
 801053c:	4413      	add	r3, r2
 801053e:	440b      	add	r3, r1
 8010540:	881b      	ldrh	r3, [r3, #0]
 8010542:	b299      	uxth	r1, r3
 8010544:	78fa      	ldrb	r2, [r7, #3]
 8010546:	89bb      	ldrh	r3, [r7, #12]
 8010548:	440b      	add	r3, r1
 801054a:	b298      	uxth	r0, r3
 801054c:	4956      	ldr	r1, [pc, #344]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 801054e:	4613      	mov	r3, r2
 8010550:	005b      	lsls	r3, r3, #1
 8010552:	4413      	add	r3, r2
 8010554:	009b      	lsls	r3, r3, #2
 8010556:	4413      	add	r3, r2
 8010558:	440b      	add	r3, r1
 801055a:	4602      	mov	r2, r0
 801055c:	801a      	strh	r2, [r3, #0]
 801055e:	e03a      	b.n	80105d6 <Light_TransitionBehaviourSingle_Param+0x1fa>
    }              
    else
    { 
      /* if present value is greater than target value, this condition executes */
      targetRange = Light_TemporaryStatus[elementIndex].PresentParam_1 - Light_TemporaryStatus[elementIndex].TargetParam_1;
 8010560:	78fa      	ldrb	r2, [r7, #3]
 8010562:	4951      	ldr	r1, [pc, #324]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 8010564:	4613      	mov	r3, r2
 8010566:	005b      	lsls	r3, r3, #1
 8010568:	4413      	add	r3, r2
 801056a:	009b      	lsls	r3, r3, #2
 801056c:	4413      	add	r3, r2
 801056e:	440b      	add	r3, r1
 8010570:	881b      	ldrh	r3, [r3, #0]
 8010572:	b299      	uxth	r1, r3
 8010574:	78fa      	ldrb	r2, [r7, #3]
 8010576:	484c      	ldr	r0, [pc, #304]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 8010578:	4613      	mov	r3, r2
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	4413      	add	r3, r2
 801057e:	009b      	lsls	r3, r3, #2
 8010580:	4413      	add	r3, r2
 8010582:	4403      	add	r3, r0
 8010584:	3306      	adds	r3, #6
 8010586:	881b      	ldrh	r3, [r3, #0]
 8010588:	b29b      	uxth	r3, r3
 801058a:	1acb      	subs	r3, r1, r3
 801058c:	81fb      	strh	r3, [r7, #14]
      targetSlot = targetRange/Light_TimeParam[elementIndex].StepValue;          
 801058e:	89f9      	ldrh	r1, [r7, #14]
 8010590:	78fa      	ldrb	r2, [r7, #3]
 8010592:	4844      	ldr	r0, [pc, #272]	; (80106a4 <Light_TransitionBehaviourSingle_Param+0x2c8>)
 8010594:	4613      	mov	r3, r2
 8010596:	009b      	lsls	r3, r3, #2
 8010598:	4413      	add	r3, r2
 801059a:	005b      	lsls	r3, r3, #1
 801059c:	4403      	add	r3, r0
 801059e:	f993 3000 	ldrsb.w	r3, [r3]
 80105a2:	fb91 f3f3 	sdiv	r3, r1, r3
 80105a6:	81bb      	strh	r3, [r7, #12]
      Light_TemporaryStatus[elementIndex].PresentParam_1 -= targetSlot;
 80105a8:	78fa      	ldrb	r2, [r7, #3]
 80105aa:	493f      	ldr	r1, [pc, #252]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 80105ac:	4613      	mov	r3, r2
 80105ae:	005b      	lsls	r3, r3, #1
 80105b0:	4413      	add	r3, r2
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	4413      	add	r3, r2
 80105b6:	440b      	add	r3, r1
 80105b8:	881b      	ldrh	r3, [r3, #0]
 80105ba:	b299      	uxth	r1, r3
 80105bc:	78fa      	ldrb	r2, [r7, #3]
 80105be:	89bb      	ldrh	r3, [r7, #12]
 80105c0:	1acb      	subs	r3, r1, r3
 80105c2:	b298      	uxth	r0, r3
 80105c4:	4938      	ldr	r1, [pc, #224]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 80105c6:	4613      	mov	r3, r2
 80105c8:	005b      	lsls	r3, r3, #1
 80105ca:	4413      	add	r3, r2
 80105cc:	009b      	lsls	r3, r3, #2
 80105ce:	4413      	add	r3, r2
 80105d0:	440b      	add	r3, r1
 80105d2:	4602      	mov	r2, r0
 80105d4:	801a      	strh	r2, [r3, #0]
    } 
    
    Light_TimeParam[elementIndex].StepValue=Light_TimeParam[elementIndex].StepValue-1;         
 80105d6:	78fa      	ldrb	r2, [r7, #3]
 80105d8:	4932      	ldr	r1, [pc, #200]	; (80106a4 <Light_TransitionBehaviourSingle_Param+0x2c8>)
 80105da:	4613      	mov	r3, r2
 80105dc:	009b      	lsls	r3, r3, #2
 80105de:	4413      	add	r3, r2
 80105e0:	005b      	lsls	r3, r3, #1
 80105e2:	440b      	add	r3, r1
 80105e4:	f993 3000 	ldrsb.w	r3, [r3]
 80105e8:	b2db      	uxtb	r3, r3
 80105ea:	3b01      	subs	r3, #1
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	78fa      	ldrb	r2, [r7, #3]
 80105f0:	b258      	sxtb	r0, r3
 80105f2:	492c      	ldr	r1, [pc, #176]	; (80106a4 <Light_TransitionBehaviourSingle_Param+0x2c8>)
 80105f4:	4613      	mov	r3, r2
 80105f6:	009b      	lsls	r3, r3, #2
 80105f8:	4413      	add	r3, r2
 80105fa:	005b      	lsls	r3, r3, #1
 80105fc:	440b      	add	r3, r1
 80105fe:	4602      	mov	r2, r0
 8010600:	701a      	strb	r2, [r3, #0]
    /* updating the remaining time after each step covered*/
    Light_TemporaryStatus[elementIndex].RemainingTime =  Light_TimeParam[elementIndex].StepValue  | (Light_TimeParam[elementIndex].ResBitValue << 6) ;
 8010602:	78fa      	ldrb	r2, [r7, #3]
 8010604:	4927      	ldr	r1, [pc, #156]	; (80106a4 <Light_TransitionBehaviourSingle_Param+0x2c8>)
 8010606:	4613      	mov	r3, r2
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	4413      	add	r3, r2
 801060c:	005b      	lsls	r3, r3, #1
 801060e:	440b      	add	r3, r1
 8010610:	f993 1000 	ldrsb.w	r1, [r3]
 8010614:	78fa      	ldrb	r2, [r7, #3]
 8010616:	4823      	ldr	r0, [pc, #140]	; (80106a4 <Light_TransitionBehaviourSingle_Param+0x2c8>)
 8010618:	4613      	mov	r3, r2
 801061a:	009b      	lsls	r3, r3, #2
 801061c:	4413      	add	r3, r2
 801061e:	005b      	lsls	r3, r3, #1
 8010620:	4403      	add	r3, r0
 8010622:	3305      	adds	r3, #5
 8010624:	781b      	ldrb	r3, [r3, #0]
 8010626:	019b      	lsls	r3, r3, #6
 8010628:	b25b      	sxtb	r3, r3
 801062a:	430b      	orrs	r3, r1
 801062c:	b25b      	sxtb	r3, r3
 801062e:	78fa      	ldrb	r2, [r7, #3]
 8010630:	b2d8      	uxtb	r0, r3
 8010632:	491d      	ldr	r1, [pc, #116]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 8010634:	4613      	mov	r3, r2
 8010636:	005b      	lsls	r3, r3, #1
 8010638:	4413      	add	r3, r2
 801063a:	009b      	lsls	r3, r3, #2
 801063c:	4413      	add	r3, r2
 801063e:	440b      	add	r3, r1
 8010640:	330c      	adds	r3, #12
 8010642:	4602      	mov	r2, r0
 8010644:	701a      	strb	r2, [r3, #0]
    LightUpdateFlag = VALUE_UPDATE_SET;
 8010646:	4b19      	ldr	r3, [pc, #100]	; (80106ac <Light_TransitionBehaviourSingle_Param+0x2d0>)
 8010648:	2201      	movs	r2, #1
 801064a:	701a      	strb	r2, [r3, #0]
    Check_time = 0;
 801064c:	4b14      	ldr	r3, [pc, #80]	; (80106a0 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 801064e:	2200      	movs	r2, #0
 8010650:	601a      	str	r2, [r3, #0]
    Clockflag = 0;
 8010652:	4b12      	ldr	r3, [pc, #72]	; (801069c <Light_TransitionBehaviourSingle_Param+0x2c0>)
 8010654:	2200      	movs	r2, #0
 8010656:	701a      	strb	r2, [r3, #0]
    
    /* when transition is completed, disable the transition by disabling 
    transition flag
    */
    if(Light_TimeParam[elementIndex].StepValue == 0)
 8010658:	78fa      	ldrb	r2, [r7, #3]
 801065a:	4912      	ldr	r1, [pc, #72]	; (80106a4 <Light_TransitionBehaviourSingle_Param+0x2c8>)
 801065c:	4613      	mov	r3, r2
 801065e:	009b      	lsls	r3, r3, #2
 8010660:	4413      	add	r3, r2
 8010662:	005b      	lsls	r3, r3, #1
 8010664:	440b      	add	r3, r1
 8010666:	f993 3000 	ldrsb.w	r3, [r3]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d110      	bne.n	8010690 <Light_TransitionBehaviourSingle_Param+0x2b4>
    {              
      Light_ModelFlag[elementIndex].LightTransitionFlag = MODEL_TRANSITION_STOP;
 801066e:	78fa      	ldrb	r2, [r7, #3]
 8010670:	490f      	ldr	r1, [pc, #60]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2d4>)
 8010672:	4613      	mov	r3, r2
 8010674:	005b      	lsls	r3, r3, #1
 8010676:	4413      	add	r3, r2
 8010678:	440b      	add	r3, r1
 801067a:	2200      	movs	r2, #0
 801067c:	701a      	strb	r2, [r3, #0]
      Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt = 1;
 801067e:	78fa      	ldrb	r2, [r7, #3]
 8010680:	490b      	ldr	r1, [pc, #44]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2d4>)
 8010682:	4613      	mov	r3, r2
 8010684:	005b      	lsls	r3, r3, #1
 8010686:	4413      	add	r3, r2
 8010688:	440b      	add	r3, r1
 801068a:	3302      	adds	r3, #2
 801068c:	2201      	movs	r2, #1
 801068e:	701a      	strb	r2, [r3, #0]
                                                                Light_TemporaryStatus[elementIndex].RemainingTime);
    
    
  }
  
  return MOBLE_RESULT_SUCCESS;         
 8010690:	2300      	movs	r3, #0
} 
 8010692:	4618      	mov	r0, r3
 8010694:	3710      	adds	r7, #16
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}
 801069a:	bf00      	nop
 801069c:	20004646 	.word	0x20004646
 80106a0:	20004648 	.word	0x20004648
 80106a4:	2000459c 	.word	0x2000459c
 80106a8:	200045b0 	.word	0x200045b0
 80106ac:	20004645 	.word	0x20004645
 80106b0:	200045a8 	.word	0x200045a8

080106b4 <Model_BindingPublishStatus>:
          and supporting binding with other models.
* @param  void
* @param  void
*/ 
void Model_BindingPublishStatus(void)
{
 80106b4:	b590      	push	{r4, r7, lr}
 80106b6:	b08b      	sub	sp, #44	; 0x2c
 80106b8:	af00      	add	r7, sp, #0
  MOBLE_ADDRESS publishAddress;
  static MOBLEUINT8 elementIndex;
  MODEL_MessageHeader_t msgParam;
  MOBLEUINT16 opcode;
  MOBLEUINT8 const pRxData[12] = {0};
 80106ba:	2300      	movs	r3, #0
 80106bc:	603b      	str	r3, [r7, #0]
 80106be:	1d3b      	adds	r3, r7, #4
 80106c0:	2200      	movs	r2, #0
 80106c2:	601a      	str	r2, [r3, #0]
 80106c4:	605a      	str	r2, [r3, #4]
  MOBLEUINT32 dataLength = 0;
 80106c6:	2300      	movs	r3, #0
 80106c8:	623b      	str	r3, [r7, #32]
  MOBLE_ADDRESS my_Address;

  if((Light_PublishOpcodeList[elementIndex].BindedStateCount > 0) &&(ADDRESS_IS_UNICAST(Model_Binding_Var.Dst_Peer))) 
 80106ca:	4b86      	ldr	r3, [pc, #536]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	461a      	mov	r2, r3
 80106d0:	4985      	ldr	r1, [pc, #532]	; (80108e8 <Model_BindingPublishStatus+0x234>)
 80106d2:	4613      	mov	r3, r2
 80106d4:	00db      	lsls	r3, r3, #3
 80106d6:	4413      	add	r3, r2
 80106d8:	00da      	lsls	r2, r3, #3
 80106da:	4413      	add	r3, r2
 80106dc:	440b      	add	r3, r1
 80106de:	3350      	adds	r3, #80	; 0x50
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	f000 8092 	beq.w	801080c <Model_BindingPublishStatus+0x158>
 80106e8:	4b80      	ldr	r3, [pc, #512]	; (80108ec <Model_BindingPublishStatus+0x238>)
 80106ea:	889b      	ldrh	r3, [r3, #4]
 80106ec:	b21b      	sxth	r3, r3
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f340 808c 	ble.w	801080c <Model_BindingPublishStatus+0x158>
 80106f4:	4b7d      	ldr	r3, [pc, #500]	; (80108ec <Model_BindingPublishStatus+0x238>)
 80106f6:	889b      	ldrh	r3, [r3, #4]
 80106f8:	b21b      	sxth	r3, r3
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	f2c0 8086 	blt.w	801080c <Model_BindingPublishStatus+0x158>
  { 
    if((Wait_RandomTime() == MOBLE_TRUE)) 
 8010700:	f7fd f9cc 	bl	800da9c <Wait_RandomTime>
 8010704:	4603      	mov	r3, r0
 8010706:	2b01      	cmp	r3, #1
 8010708:	f040 80e6 	bne.w	80108d8 <Model_BindingPublishStatus+0x224>
    {   
      my_Address = BLEMesh_GetAddress(); 
 801070c:	f00c fcb6 	bl	801d07c <BLEMesh_GetAddress>
 8010710:	4603      	mov	r3, r0
 8010712:	83fb      	strh	r3, [r7, #30]
      publishAddress = BLEMesh_GetPublishAddress(elementIndex, Light_PublishOpcodeList[elementIndex].Model_ID[Publication1SecFlag.count]);
 8010714:	4b73      	ldr	r3, [pc, #460]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 8010716:	7818      	ldrb	r0, [r3, #0]
 8010718:	4b72      	ldr	r3, [pc, #456]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 801071a:	781b      	ldrb	r3, [r3, #0]
 801071c:	4619      	mov	r1, r3
 801071e:	4b74      	ldr	r3, [pc, #464]	; (80108f0 <Model_BindingPublishStatus+0x23c>)
 8010720:	789b      	ldrb	r3, [r3, #2]
 8010722:	4c71      	ldr	r4, [pc, #452]	; (80108e8 <Model_BindingPublishStatus+0x234>)
 8010724:	3314      	adds	r3, #20
 8010726:	005a      	lsls	r2, r3, #1
 8010728:	460b      	mov	r3, r1
 801072a:	00db      	lsls	r3, r3, #3
 801072c:	440b      	add	r3, r1
 801072e:	00d9      	lsls	r1, r3, #3
 8010730:	440b      	add	r3, r1
 8010732:	4413      	add	r3, r2
 8010734:	4423      	add	r3, r4
 8010736:	881b      	ldrh	r3, [r3, #0]
 8010738:	b29b      	uxth	r3, r3
 801073a:	4619      	mov	r1, r3
 801073c:	f00c fcae 	bl	801d09c <BLEMesh_GetPublishAddress>
 8010740:	4603      	mov	r3, r0
 8010742:	83bb      	strh	r3, [r7, #28]
      opcode = (MOBLEUINT16)Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Publication1SecFlag.count];
 8010744:	4b67      	ldr	r3, [pc, #412]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	4619      	mov	r1, r3
 801074a:	4b69      	ldr	r3, [pc, #420]	; (80108f0 <Model_BindingPublishStatus+0x23c>)
 801074c:	789b      	ldrb	r3, [r3, #2]
 801074e:	4866      	ldr	r0, [pc, #408]	; (80108e8 <Model_BindingPublishStatus+0x234>)
 8010750:	005a      	lsls	r2, r3, #1
 8010752:	460b      	mov	r3, r1
 8010754:	00db      	lsls	r3, r3, #3
 8010756:	440b      	add	r3, r1
 8010758:	00d9      	lsls	r1, r3, #3
 801075a:	440b      	add	r3, r1
 801075c:	4413      	add	r3, r2
 801075e:	4403      	add	r3, r0
 8010760:	781a      	ldrb	r2, [r3, #0]
 8010762:	785b      	ldrb	r3, [r3, #1]
 8010764:	021b      	lsls	r3, r3, #8
 8010766:	4313      	orrs	r3, r2
 8010768:	837b      	strh	r3, [r7, #26]

      /*Initialize the Parameters*/
      msgParam.dst_peer = my_Address;
 801076a:	8bfb      	ldrh	r3, [r7, #30]
 801076c:	827b      	strh	r3, [r7, #18]
      msgParam.peer_addr = publishAddress;
 801076e:	8bbb      	ldrh	r3, [r7, #28]
 8010770:	823b      	strh	r3, [r7, #16]
      msgParam.elementIndex = elementIndex;
 8010772:	4b5c      	ldr	r3, [pc, #368]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 8010774:	781b      	ldrb	r3, [r3, #0]
 8010776:	733b      	strb	r3, [r7, #12]
      msgParam.rcvdAppKeyOffset = 0;
 8010778:	2300      	movs	r3, #0
 801077a:	75bb      	strb	r3, [r7, #22]
      msgParam.rcvdNetKeyOffset = 0;
 801077c:	2300      	movs	r3, #0
 801077e:	75fb      	strb	r3, [r7, #23]
      msgParam.rssi = 0;
 8010780:	2300      	movs	r3, #0
 8010782:	757b      	strb	r3, [r7, #21]
      msgParam.ttl = 0;
 8010784:	2300      	movs	r3, #0
 8010786:	753b      	strb	r3, [r7, #20]
        
      if(publishAddress != 0x0000) 
 8010788:	8bbb      	ldrh	r3, [r7, #28]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d006      	beq.n	801079c <Model_BindingPublishStatus+0xe8>
      {
        /*Using the same API used for Acknowledgement, where src & dst getting interchanged.
        Therefore PublishAddress is copied in peer_addr & vice-versa*/  
        Model_SendResponse(&msgParam, opcode, pRxData, dataLength);
 801078e:	463a      	mov	r2, r7
 8010790:	8b79      	ldrh	r1, [r7, #26]
 8010792:	f107 000c 	add.w	r0, r7, #12
 8010796:	6a3b      	ldr	r3, [r7, #32]
 8010798:	f017 fe7e 	bl	8028498 <Model_SendResponse>
        TRACE_M(TF_LIGHT_M, "Binded publishing address %.2x opcode %.2x model id %.2x \r\n",
                publishAddress,Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Publication1SecFlag.count],
                Light_PublishOpcodeList[elementIndex].Model_ID[Publication1SecFlag.count]);
      }     
       
      Publication1SecFlag.count++;
 801079c:	4b54      	ldr	r3, [pc, #336]	; (80108f0 <Model_BindingPublishStatus+0x23c>)
 801079e:	789b      	ldrb	r3, [r3, #2]
 80107a0:	3301      	adds	r3, #1
 80107a2:	b2da      	uxtb	r2, r3
 80107a4:	4b52      	ldr	r3, [pc, #328]	; (80108f0 <Model_BindingPublishStatus+0x23c>)
 80107a6:	709a      	strb	r2, [r3, #2]
      if(Publication1SecFlag.count > Light_PublishOpcodeList[elementIndex].BindedStateCount)
 80107a8:	4b51      	ldr	r3, [pc, #324]	; (80108f0 <Model_BindingPublishStatus+0x23c>)
 80107aa:	789a      	ldrb	r2, [r3, #2]
 80107ac:	4b4d      	ldr	r3, [pc, #308]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	4619      	mov	r1, r3
 80107b2:	484d      	ldr	r0, [pc, #308]	; (80108e8 <Model_BindingPublishStatus+0x234>)
 80107b4:	460b      	mov	r3, r1
 80107b6:	00db      	lsls	r3, r3, #3
 80107b8:	440b      	add	r3, r1
 80107ba:	00d9      	lsls	r1, r3, #3
 80107bc:	440b      	add	r3, r1
 80107be:	4403      	add	r3, r0
 80107c0:	3350      	adds	r3, #80	; 0x50
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	f240 8087 	bls.w	80108d8 <Model_BindingPublishStatus+0x224>
      {
        Publication1SecFlag.count = 0;
 80107ca:	4b49      	ldr	r3, [pc, #292]	; (80108f0 <Model_BindingPublishStatus+0x23c>)
 80107cc:	2200      	movs	r2, #0
 80107ce:	709a      	strb	r2, [r3, #2]
        Light_PublishOpcodeList[elementIndex].BindedStateCount = 0;
 80107d0:	4b44      	ldr	r3, [pc, #272]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	461a      	mov	r2, r3
 80107d6:	4944      	ldr	r1, [pc, #272]	; (80108e8 <Model_BindingPublishStatus+0x234>)
 80107d8:	4613      	mov	r3, r2
 80107da:	00db      	lsls	r3, r3, #3
 80107dc:	4413      	add	r3, r2
 80107de:	00da      	lsls	r2, r3, #3
 80107e0:	4413      	add	r3, r2
 80107e2:	440b      	add	r3, r1
 80107e4:	3350      	adds	r3, #80	; 0x50
 80107e6:	2200      	movs	r2, #0
 80107e8:	701a      	strb	r2, [r3, #0]
        Publication1SecFlag.Transition1SecFlag = MOBLE_FALSE;
 80107ea:	4b41      	ldr	r3, [pc, #260]	; (80108f0 <Model_BindingPublishStatus+0x23c>)
 80107ec:	2200      	movs	r2, #0
 80107ee:	701a      	strb	r2, [r3, #0]
        elementIndex++;
 80107f0:	4b3c      	ldr	r3, [pc, #240]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	3301      	adds	r3, #1
 80107f6:	b2da      	uxtb	r2, r3
 80107f8:	4b3a      	ldr	r3, [pc, #232]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 80107fa:	701a      	strb	r2, [r3, #0]
        if(elementIndex == APPLICATION_NUMBER_OF_ELEMENTS)
 80107fc:	4b39      	ldr	r3, [pc, #228]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	2b01      	cmp	r3, #1
 8010802:	d169      	bne.n	80108d8 <Model_BindingPublishStatus+0x224>
        {
          elementIndex = 0;
 8010804:	4b37      	ldr	r3, [pc, #220]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 8010806:	2200      	movs	r2, #0
 8010808:	701a      	strb	r2, [r3, #0]
    if((Wait_RandomTime() == MOBLE_TRUE)) 
 801080a:	e065      	b.n	80108d8 <Model_BindingPublishStatus+0x224>
      }
    }
  }
  else
  {
    Publication1SecFlag.count = 0;
 801080c:	4b38      	ldr	r3, [pc, #224]	; (80108f0 <Model_BindingPublishStatus+0x23c>)
 801080e:	2200      	movs	r2, #0
 8010810:	709a      	strb	r2, [r3, #2]
    Light_PublishOpcodeList[elementIndex].BindedStateCount = 0;
 8010812:	4b34      	ldr	r3, [pc, #208]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	461a      	mov	r2, r3
 8010818:	4933      	ldr	r1, [pc, #204]	; (80108e8 <Model_BindingPublishStatus+0x234>)
 801081a:	4613      	mov	r3, r2
 801081c:	00db      	lsls	r3, r3, #3
 801081e:	4413      	add	r3, r2
 8010820:	00da      	lsls	r2, r3, #3
 8010822:	4413      	add	r3, r2
 8010824:	440b      	add	r3, r1
 8010826:	3350      	adds	r3, #80	; 0x50
 8010828:	2200      	movs	r2, #0
 801082a:	701a      	strb	r2, [r3, #0]
    if((Generic_ModelFlag[elementIndex].GenericTransitionFlag == MODEL_TRANSITION_STOP) &&
 801082c:	4b2d      	ldr	r3, [pc, #180]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	4619      	mov	r1, r3
 8010832:	4a30      	ldr	r2, [pc, #192]	; (80108f4 <Model_BindingPublishStatus+0x240>)
 8010834:	460b      	mov	r3, r1
 8010836:	005b      	lsls	r3, r3, #1
 8010838:	440b      	add	r3, r1
 801083a:	4413      	add	r3, r2
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d13c      	bne.n	80108bc <Model_BindingPublishStatus+0x208>
       (Light_ModelFlag[elementIndex].LightTransitionFlag == MODEL_TRANSITION_STOP))
 8010842:	4b28      	ldr	r3, [pc, #160]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	4619      	mov	r1, r3
 8010848:	4a2b      	ldr	r2, [pc, #172]	; (80108f8 <Model_BindingPublishStatus+0x244>)
 801084a:	460b      	mov	r3, r1
 801084c:	005b      	lsls	r3, r3, #1
 801084e:	440b      	add	r3, r1
 8010850:	4413      	add	r3, r2
 8010852:	781b      	ldrb	r3, [r3, #0]
    if((Generic_ModelFlag[elementIndex].GenericTransitionFlag == MODEL_TRANSITION_STOP) &&
 8010854:	2b00      	cmp	r3, #0
 8010856:	d131      	bne.n	80108bc <Model_BindingPublishStatus+0x208>
    {
      for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 8010858:	2300      	movs	r3, #0
 801085a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801085e:	e029      	b.n	80108b4 <Model_BindingPublishStatus+0x200>
      {
        Light_PublishOpcodeList[elementIndex].Model_ID[idx] = 0;
 8010860:	4b20      	ldr	r3, [pc, #128]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	4619      	mov	r1, r3
 8010866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801086a:	481f      	ldr	r0, [pc, #124]	; (80108e8 <Model_BindingPublishStatus+0x234>)
 801086c:	3314      	adds	r3, #20
 801086e:	005a      	lsls	r2, r3, #1
 8010870:	460b      	mov	r3, r1
 8010872:	00db      	lsls	r3, r3, #3
 8010874:	440b      	add	r3, r1
 8010876:	00d9      	lsls	r1, r3, #3
 8010878:	440b      	add	r3, r1
 801087a:	4413      	add	r3, r2
 801087c:	4403      	add	r3, r0
 801087e:	2200      	movs	r2, #0
 8010880:	701a      	strb	r2, [r3, #0]
 8010882:	2200      	movs	r2, #0
 8010884:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[idx] = 0;
 8010886:	4b17      	ldr	r3, [pc, #92]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	4619      	mov	r1, r3
 801088c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010890:	4815      	ldr	r0, [pc, #84]	; (80108e8 <Model_BindingPublishStatus+0x234>)
 8010892:	005a      	lsls	r2, r3, #1
 8010894:	460b      	mov	r3, r1
 8010896:	00db      	lsls	r3, r3, #3
 8010898:	440b      	add	r3, r1
 801089a:	00d9      	lsls	r1, r3, #3
 801089c:	440b      	add	r3, r1
 801089e:	4413      	add	r3, r2
 80108a0:	4403      	add	r3, r0
 80108a2:	2200      	movs	r2, #0
 80108a4:	701a      	strb	r2, [r3, #0]
 80108a6:	2200      	movs	r2, #0
 80108a8:	705a      	strb	r2, [r3, #1]
      for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 80108aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108ae:	3301      	adds	r3, #1
 80108b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80108b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108b8:	2b13      	cmp	r3, #19
 80108ba:	d9d1      	bls.n	8010860 <Model_BindingPublishStatus+0x1ac>
      }		
    }  
    elementIndex++;
 80108bc:	4b09      	ldr	r3, [pc, #36]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 80108be:	781b      	ldrb	r3, [r3, #0]
 80108c0:	3301      	adds	r3, #1
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	4b07      	ldr	r3, [pc, #28]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 80108c6:	701a      	strb	r2, [r3, #0]
    if(elementIndex == APPLICATION_NUMBER_OF_ELEMENTS)
 80108c8:	4b06      	ldr	r3, [pc, #24]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	d104      	bne.n	80108da <Model_BindingPublishStatus+0x226>
    {
      elementIndex = 0;
 80108d0:	4b04      	ldr	r3, [pc, #16]	; (80108e4 <Model_BindingPublishStatus+0x230>)
 80108d2:	2200      	movs	r2, #0
 80108d4:	701a      	strb	r2, [r3, #0]
    }
  }		
}
 80108d6:	e000      	b.n	80108da <Model_BindingPublishStatus+0x226>
    if((Wait_RandomTime() == MOBLE_TRUE)) 
 80108d8:	bf00      	nop
}
 80108da:	bf00      	nop
 80108dc:	372c      	adds	r7, #44	; 0x2c
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd90      	pop	{r4, r7, pc}
 80108e2:	bf00      	nop
 80108e4:	2000464c 	.word	0x2000464c
 80108e8:	200045f4 	.word	0x200045f4
 80108ec:	20004550 	.word	0x20004550
 80108f0:	200045ac 	.word	0x200045ac
 80108f4:	20004590 	.word	0x20004590
 80108f8:	200045a8 	.word	0x200045a8

080108fc <Light_GetStepValue>:
*         for light model.
* @param stepParam is transition time set value.
* retval void.
*/
void Light_GetStepValue(MOBLEUINT8 stepParam,MOBLEUINT8 elementIndex)
{
 80108fc:	b590      	push	{r4, r7, lr}
 80108fe:	b083      	sub	sp, #12
 8010900:	af00      	add	r7, sp, #0
 8010902:	4603      	mov	r3, r0
 8010904:	460a      	mov	r2, r1
 8010906:	71fb      	strb	r3, [r7, #7]
 8010908:	4613      	mov	r3, r2
 801090a:	71bb      	strb	r3, [r7, #6]
  10 = resolution is 10000 ms.
  11 = resolution is 600000 ms. 
  Last bits from 0 to 5th index is step number.
  */
  
  Light_TimeParam[elementIndex].ResBitValue = stepParam >> 6 ;
 801090c:	79ba      	ldrb	r2, [r7, #6]
 801090e:	79fb      	ldrb	r3, [r7, #7]
 8010910:	099b      	lsrs	r3, r3, #6
 8010912:	b2d8      	uxtb	r0, r3
 8010914:	493e      	ldr	r1, [pc, #248]	; (8010a10 <Light_GetStepValue+0x114>)
 8010916:	4613      	mov	r3, r2
 8010918:	009b      	lsls	r3, r3, #2
 801091a:	4413      	add	r3, r2
 801091c:	005b      	lsls	r3, r3, #1
 801091e:	440b      	add	r3, r1
 8010920:	3305      	adds	r3, #5
 8010922:	4602      	mov	r2, r0
 8010924:	701a      	strb	r2, [r3, #0]
  Light_TimeParam[elementIndex].Res_Value = Get_StepResolutionValue(Light_TimeParam[elementIndex].ResBitValue);
 8010926:	79ba      	ldrb	r2, [r7, #6]
 8010928:	4939      	ldr	r1, [pc, #228]	; (8010a10 <Light_GetStepValue+0x114>)
 801092a:	4613      	mov	r3, r2
 801092c:	009b      	lsls	r3, r3, #2
 801092e:	4413      	add	r3, r2
 8010930:	005b      	lsls	r3, r3, #1
 8010932:	440b      	add	r3, r1
 8010934:	3305      	adds	r3, #5
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	79bc      	ldrb	r4, [r7, #6]
 801093a:	4618      	mov	r0, r3
 801093c:	f7fc fdf8 	bl	800d530 <Get_StepResolutionValue>
 8010940:	4602      	mov	r2, r0
 8010942:	4933      	ldr	r1, [pc, #204]	; (8010a10 <Light_GetStepValue+0x114>)
 8010944:	4623      	mov	r3, r4
 8010946:	009b      	lsls	r3, r3, #2
 8010948:	4423      	add	r3, r4
 801094a:	005b      	lsls	r3, r3, #1
 801094c:	440b      	add	r3, r1
 801094e:	f8c3 2001 	str.w	r2, [r3, #1]
  Light_TimeParam[elementIndex].StepValue = stepParam & 0x3F ;
 8010952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010956:	79ba      	ldrb	r2, [r7, #6]
 8010958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801095c:	b258      	sxtb	r0, r3
 801095e:	492c      	ldr	r1, [pc, #176]	; (8010a10 <Light_GetStepValue+0x114>)
 8010960:	4613      	mov	r3, r2
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	4413      	add	r3, r2
 8010966:	005b      	lsls	r3, r3, #1
 8010968:	440b      	add	r3, r1
 801096a:	4602      	mov	r2, r0
 801096c:	701a      	strb	r2, [r3, #0]
  
  Light_TimeParam[elementIndex].TotalTime = (Light_TimeParam[elementIndex].StepValue * Light_TimeParam[elementIndex].Res_Value);
 801096e:	79ba      	ldrb	r2, [r7, #6]
 8010970:	4927      	ldr	r1, [pc, #156]	; (8010a10 <Light_GetStepValue+0x114>)
 8010972:	4613      	mov	r3, r2
 8010974:	009b      	lsls	r3, r3, #2
 8010976:	4413      	add	r3, r2
 8010978:	005b      	lsls	r3, r3, #1
 801097a:	440b      	add	r3, r1
 801097c:	f993 3000 	ldrsb.w	r3, [r3]
 8010980:	4618      	mov	r0, r3
 8010982:	79ba      	ldrb	r2, [r7, #6]
 8010984:	4922      	ldr	r1, [pc, #136]	; (8010a10 <Light_GetStepValue+0x114>)
 8010986:	4613      	mov	r3, r2
 8010988:	009b      	lsls	r3, r3, #2
 801098a:	4413      	add	r3, r2
 801098c:	005b      	lsls	r3, r3, #1
 801098e:	440b      	add	r3, r1
 8010990:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8010994:	79ba      	ldrb	r2, [r7, #6]
 8010996:	fb03 f100 	mul.w	r1, r3, r0
 801099a:	481d      	ldr	r0, [pc, #116]	; (8010a10 <Light_GetStepValue+0x114>)
 801099c:	4613      	mov	r3, r2
 801099e:	009b      	lsls	r3, r3, #2
 80109a0:	4413      	add	r3, r2
 80109a2:	005b      	lsls	r3, r3, #1
 80109a4:	4403      	add	r3, r0
 80109a6:	f8c3 1006 	str.w	r1, [r3, #6]
  
  if(Light_TimeParam[elementIndex].Res_Value >= 100)
 80109aa:	79ba      	ldrb	r2, [r7, #6]
 80109ac:	4918      	ldr	r1, [pc, #96]	; (8010a10 <Light_GetStepValue+0x114>)
 80109ae:	4613      	mov	r3, r2
 80109b0:	009b      	lsls	r3, r3, #2
 80109b2:	4413      	add	r3, r2
 80109b4:	005b      	lsls	r3, r3, #1
 80109b6:	440b      	add	r3, r1
 80109b8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80109bc:	2b63      	cmp	r3, #99	; 0x63
 80109be:	d923      	bls.n	8010a08 <Light_GetStepValue+0x10c>
  {
    Light_TimeParam[elementIndex].Res_Value = Light_TimeParam[elementIndex].Res_Value/TRANSITION_SCALER;
 80109c0:	79b9      	ldrb	r1, [r7, #6]
 80109c2:	79ba      	ldrb	r2, [r7, #6]
 80109c4:	4812      	ldr	r0, [pc, #72]	; (8010a10 <Light_GetStepValue+0x114>)
 80109c6:	460b      	mov	r3, r1
 80109c8:	009b      	lsls	r3, r3, #2
 80109ca:	440b      	add	r3, r1
 80109cc:	005b      	lsls	r3, r3, #1
 80109ce:	4403      	add	r3, r0
 80109d0:	f8d3 1001 	ldr.w	r1, [r3, #1]
 80109d4:	480e      	ldr	r0, [pc, #56]	; (8010a10 <Light_GetStepValue+0x114>)
 80109d6:	4613      	mov	r3, r2
 80109d8:	009b      	lsls	r3, r3, #2
 80109da:	4413      	add	r3, r2
 80109dc:	005b      	lsls	r3, r3, #1
 80109de:	4403      	add	r3, r0
 80109e0:	f8c3 1001 	str.w	r1, [r3, #1]
    Light_TimeParam[elementIndex].StepValue = (Light_TimeParam[elementIndex].StepValue * TRANSITION_SCALER);
 80109e4:	79b9      	ldrb	r1, [r7, #6]
 80109e6:	79ba      	ldrb	r2, [r7, #6]
 80109e8:	4809      	ldr	r0, [pc, #36]	; (8010a10 <Light_GetStepValue+0x114>)
 80109ea:	460b      	mov	r3, r1
 80109ec:	009b      	lsls	r3, r3, #2
 80109ee:	440b      	add	r3, r1
 80109f0:	005b      	lsls	r3, r3, #1
 80109f2:	4403      	add	r3, r0
 80109f4:	f993 0000 	ldrsb.w	r0, [r3]
 80109f8:	4905      	ldr	r1, [pc, #20]	; (8010a10 <Light_GetStepValue+0x114>)
 80109fa:	4613      	mov	r3, r2
 80109fc:	009b      	lsls	r3, r3, #2
 80109fe:	4413      	add	r3, r2
 8010a00:	005b      	lsls	r3, r3, #1
 8010a02:	440b      	add	r3, r1
 8010a04:	4602      	mov	r2, r0
 8010a06:	701a      	strb	r2, [r3, #0]
  }
  
  TRACE_M(TF_LIGHT_M, "step resolution 0x%.2lx, number of step 0x%.2x \r\n",Light_TimeParam[elementIndex].Res_Value ,
          Light_TimeParam[elementIndex].StepValue  );   
}
 8010a08:	bf00      	nop
 8010a0a:	370c      	adds	r7, #12
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd90      	pop	{r4, r7, pc}
 8010a10:	2000459c 	.word	0x2000459c

08010a14 <Lighting_Process>:
* @brief  Function to execute the transition state machine for particular Light Model
* @param  void
* @retval void
*/ 
void Lighting_Process(void)
{ 
 8010a14:	b590      	push	{r4, r7, lr}
 8010a16:	b08f      	sub	sp, #60	; 0x3c
 8010a18:	af02      	add	r7, sp, #8
  MOBLE_ADDRESS publishAddress;
  MOBLE_ADDRESS my_Address = BLEMesh_GetAddress();
 8010a1a:	f00c fb2f 	bl	801d07c <BLEMesh_GetAddress>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	85fb      	strh	r3, [r7, #46]	; 0x2e
  MODEL_MessageHeader_t msgParam;
  MOBLEUINT8 elementIndex;
  MOBLEUINT8 const pRxData[12] = {0};
 8010a22:	2300      	movs	r3, #0
 8010a24:	60fb      	str	r3, [r7, #12]
 8010a26:	f107 0310 	add.w	r3, r7, #16
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	601a      	str	r2, [r3, #0]
 8010a2e:	605a      	str	r2, [r3, #4]
  MOBLEUINT32 dataLength = 0;
 8010a30:	2300      	movs	r3, #0
 8010a32:	62bb      	str	r3, [r7, #40]	; 0x28
  
  for(elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 8010a34:	2300      	movs	r3, #0
 8010a36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8010a3a:	e0e5      	b.n	8010c08 <Lighting_Process+0x1f4>
  {
    my_Address = my_Address+elementIndex;
 8010a3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010a40:	b29a      	uxth	r2, r3
 8010a42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010a44:	4413      	add	r3, r2
 8010a46:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    MOBLEUINT8 Light_GetBuff[8];
#endif
  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
  if(Light_ModelFlag[elementIndex].LightTransitionFlag == LIGHT_LIGHTNESS_TRANSITION_START)
 8010a48:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010a4c:	4973      	ldr	r1, [pc, #460]	; (8010c1c <Lighting_Process+0x208>)
 8010a4e:	4613      	mov	r3, r2
 8010a50:	005b      	lsls	r3, r3, #1
 8010a52:	4413      	add	r3, r2
 8010a54:	440b      	add	r3, r1
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d140      	bne.n	8010ade <Lighting_Process+0xca>
  {  
     /* Fetching the state value from the application layer to middle layer */
    (Appli_Light_GetStatus_cb.GetLightLightness_cb)(Light_GetBuff, my_Address, elementIndex);
 8010a5c:	4b70      	ldr	r3, [pc, #448]	; (8010c20 <Lighting_Process+0x20c>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010a64:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8010a66:	1d38      	adds	r0, r7, #4
 8010a68:	4798      	blx	r3
    /* Transition function called to change the state in transition */
    Light_TransitionBehaviourSingle_Param(Light_GetBuff, elementIndex);
 8010a6a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010a6e:	1d3b      	adds	r3, r7, #4
 8010a70:	4611      	mov	r1, r2
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7ff fcb2 	bl	80103dc <Light_TransitionBehaviourSingle_Param>
    if(LightUpdateFlag == VALUE_UPDATE_SET)
 8010a78:	4b6a      	ldr	r3, [pc, #424]	; (8010c24 <Lighting_Process+0x210>)
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	2b01      	cmp	r3, #1
 8010a7e:	d12e      	bne.n	8010ade <Lighting_Process+0xca>
    {
      /* updating the state value after the each transition step complete */
      Light_LightnessStateUpdate_Process(elementIndex);
 8010a80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010a84:	4618      	mov	r0, r3
 8010a86:	f000 f8d5 	bl	8010c34 <Light_LightnessStateUpdate_Process>
      /*Application Callback */
      (LightAppli_cb.Lightness_Set_cb)(&Light_LightnessStatus[elementIndex],0, my_Address, elementIndex); 
 8010a8a:	4b67      	ldr	r3, [pc, #412]	; (8010c28 <Lighting_Process+0x214>)
 8010a8c:	681c      	ldr	r4, [r3, #0]
 8010a8e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010a92:	4613      	mov	r3, r2
 8010a94:	00db      	lsls	r3, r3, #3
 8010a96:	4413      	add	r3, r2
 8010a98:	4a64      	ldr	r2, [pc, #400]	; (8010c2c <Lighting_Process+0x218>)
 8010a9a:	1898      	adds	r0, r3, r2
 8010a9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010aa0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010aa2:	2100      	movs	r1, #0
 8010aa4:	47a0      	blx	r4
      /* Binding of actual light lightness with other models */
      Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_ACTUAL_SET , 0,elementIndex,
 8010aa6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010aaa:	495c      	ldr	r1, [pc, #368]	; (8010c1c <Lighting_Process+0x208>)
 8010aac:	4613      	mov	r3, r2
 8010aae:	005b      	lsls	r3, r3, #1
 8010ab0:	4413      	add	r3, r2
 8010ab2:	440b      	add	r3, r1
 8010ab4:	7819      	ldrb	r1, [r3, #0]
 8010ab6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010aba:	4858      	ldr	r0, [pc, #352]	; (8010c1c <Lighting_Process+0x208>)
 8010abc:	4613      	mov	r3, r2
 8010abe:	005b      	lsls	r3, r3, #1
 8010ac0:	4413      	add	r3, r2
 8010ac2:	4403      	add	r3, r0
 8010ac4:	3302      	adds	r3, #2
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010acc:	9300      	str	r3, [sp, #0]
 8010ace:	460b      	mov	r3, r1
 8010ad0:	2100      	movs	r1, #0
 8010ad2:	2002      	movs	r0, #2
 8010ad4:	f000 fac2 	bl	801105c <Light_Lightness_Binding>
                              Light_ModelFlag[elementIndex].LightTransitionFlag,Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt);
      LightUpdateFlag = VALUE_UPDATE_RESET;
 8010ad8:	4b52      	ldr	r3, [pc, #328]	; (8010c24 <Lighting_Process+0x210>)
 8010ada:	2200      	movs	r2, #0
 8010adc:	701a      	strb	r2, [r3, #0]
    }
  }  
  if(Light_ModelFlag[elementIndex].LightTransitionFlag == LIGHT_LINEAR_TRANSITION_START)
 8010ade:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010ae2:	494e      	ldr	r1, [pc, #312]	; (8010c1c <Lighting_Process+0x208>)
 8010ae4:	4613      	mov	r3, r2
 8010ae6:	005b      	lsls	r3, r3, #1
 8010ae8:	4413      	add	r3, r2
 8010aea:	440b      	add	r3, r1
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	2b02      	cmp	r3, #2
 8010af0:	d140      	bne.n	8010b74 <Lighting_Process+0x160>
  {
    /* Fetching the state value from the application layer to middle layer */
    (Appli_Light_GetStatus_cb.GetLightLightnessLinear_cb)(Light_GetBuff,my_Address, elementIndex);
 8010af2:	4b4b      	ldr	r3, [pc, #300]	; (8010c20 <Lighting_Process+0x20c>)
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010afa:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8010afc:	1d38      	adds	r0, r7, #4
 8010afe:	4798      	blx	r3
    /* Transition function called to change the state in transition */
    Light_TransitionBehaviourSingle_Param(Light_GetBuff,elementIndex);
 8010b00:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b04:	1d3b      	adds	r3, r7, #4
 8010b06:	4611      	mov	r1, r2
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7ff fc67 	bl	80103dc <Light_TransitionBehaviourSingle_Param>
    if(LightUpdateFlag == VALUE_UPDATE_SET)
 8010b0e:	4b45      	ldr	r3, [pc, #276]	; (8010c24 <Lighting_Process+0x210>)
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d12e      	bne.n	8010b74 <Lighting_Process+0x160>
    {
      /* updating the state value after the each transition step complete */
      Light_LinearStateUpdate_Process(elementIndex);
 8010b16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f000 f9ba 	bl	8010e94 <Light_LinearStateUpdate_Process>
      /*Application Callback */
      (LightAppli_cb.Lightness_Linear_Set_cb)(&Light_LightnessStatus[elementIndex], 0, my_Address, elementIndex);
 8010b20:	4b41      	ldr	r3, [pc, #260]	; (8010c28 <Lighting_Process+0x214>)
 8010b22:	689c      	ldr	r4, [r3, #8]
 8010b24:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b28:	4613      	mov	r3, r2
 8010b2a:	00db      	lsls	r3, r3, #3
 8010b2c:	4413      	add	r3, r2
 8010b2e:	4a3f      	ldr	r2, [pc, #252]	; (8010c2c <Lighting_Process+0x218>)
 8010b30:	1898      	adds	r0, r3, r2
 8010b32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010b36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010b38:	2100      	movs	r1, #0
 8010b3a:	47a0      	blx	r4
      /* Binding of data of light lightness with light linear */
      Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_LINEAR_SET , 0,elementIndex,
 8010b3c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b40:	4936      	ldr	r1, [pc, #216]	; (8010c1c <Lighting_Process+0x208>)
 8010b42:	4613      	mov	r3, r2
 8010b44:	005b      	lsls	r3, r3, #1
 8010b46:	4413      	add	r3, r2
 8010b48:	440b      	add	r3, r1
 8010b4a:	7819      	ldrb	r1, [r3, #0]
 8010b4c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b50:	4832      	ldr	r0, [pc, #200]	; (8010c1c <Lighting_Process+0x208>)
 8010b52:	4613      	mov	r3, r2
 8010b54:	005b      	lsls	r3, r3, #1
 8010b56:	4413      	add	r3, r2
 8010b58:	4403      	add	r3, r0
 8010b5a:	3302      	adds	r3, #2
 8010b5c:	781b      	ldrb	r3, [r3, #0]
 8010b5e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b62:	9300      	str	r3, [sp, #0]
 8010b64:	460b      	mov	r3, r1
 8010b66:	2100      	movs	r1, #0
 8010b68:	2003      	movs	r0, #3
 8010b6a:	f000 fa77 	bl	801105c <Light_Lightness_Binding>
                              Light_ModelFlag[elementIndex].LightTransitionFlag,Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt);
      LightUpdateFlag = VALUE_UPDATE_RESET;
 8010b6e:	4b2d      	ldr	r3, [pc, #180]	; (8010c24 <Lighting_Process+0x210>)
 8010b70:	2200      	movs	r2, #0
 8010b72:	701a      	strb	r2, [r3, #0]
      LightUpdateFlag = VALUE_UPDATE_RESET;
    }
  }
#endif  
  /* Check if Transition is completed */
  if(Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt == MOBLE_TRUE)
 8010b74:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b78:	4928      	ldr	r1, [pc, #160]	; (8010c1c <Lighting_Process+0x208>)
 8010b7a:	4613      	mov	r3, r2
 8010b7c:	005b      	lsls	r3, r3, #1
 8010b7e:	4413      	add	r3, r2
 8010b80:	440b      	add	r3, r1
 8010b82:	3302      	adds	r3, #2
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d137      	bne.n	8010bfa <Lighting_Process+0x1e6>
  {         
    my_Address = BLEMesh_GetAddress();
 8010b8a:	f00c fa77 	bl	801d07c <BLEMesh_GetAddress>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	85fb      	strh	r3, [r7, #46]	; 0x2e
    publishAddress = BLEMesh_GetPublishAddress(elementIndex, Model_Binding_Var.Model_ID);
 8010b92:	4b27      	ldr	r3, [pc, #156]	; (8010c30 <Lighting_Process+0x21c>)
 8010b94:	885b      	ldrh	r3, [r3, #2]
 8010b96:	461a      	mov	r2, r3
 8010b98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010b9c:	4611      	mov	r1, r2
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f00c fa7c 	bl	801d09c <BLEMesh_GetPublishAddress>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Initialize the messageParam*/
    msgParam.dst_peer = my_Address;
 8010ba8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010baa:	83fb      	strh	r3, [r7, #30]
    msgParam.peer_addr = publishAddress;
 8010bac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010bae:	83bb      	strh	r3, [r7, #28]
    msgParam.elementIndex = elementIndex;
 8010bb0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010bb4:	763b      	strb	r3, [r7, #24]
    msgParam.rcvdAppKeyOffset = 0;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msgParam.rcvdNetKeyOffset = 0;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msgParam.rssi = 0;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    msgParam.ttl = 0;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	f887 3020 	strb.w	r3, [r7, #32]
  
    if(publishAddress != 0x00)
 8010bce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d008      	beq.n	8010be6 <Lighting_Process+0x1d2>
    {
      /*Using the same API used for Acknowledgement, where src & dst getting interchanged.
        Therefore PublishAddress is copied in peer_addr & vice-versa*/ 
      Model_SendResponse(&msgParam, Model_Binding_Var.Model_Rx_Opcode, pRxData, dataLength);
 8010bd4:	4b16      	ldr	r3, [pc, #88]	; (8010c30 <Lighting_Process+0x21c>)
 8010bd6:	8819      	ldrh	r1, [r3, #0]
 8010bd8:	f107 020c 	add.w	r2, r7, #12
 8010bdc:	f107 0018 	add.w	r0, r7, #24
 8010be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be2:	f017 fc59 	bl	8028498 <Model_SendResponse>
      TRACE_M(TF_LIGHT_M, "Publishing the status after transition complete opcode %.2x model id %.2x \r\n",
       Model_Binding_Var.Model_Rx_Opcode,Model_Binding_Var.Model_ID);
    }
    Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt = MOBLE_FALSE;
 8010be6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010bea:	490c      	ldr	r1, [pc, #48]	; (8010c1c <Lighting_Process+0x208>)
 8010bec:	4613      	mov	r3, r2
 8010bee:	005b      	lsls	r3, r3, #1
 8010bf0:	4413      	add	r3, r2
 8010bf2:	440b      	add	r3, r1
 8010bf4:	3302      	adds	r3, #2
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	701a      	strb	r2, [r3, #0]
  }
#ifdef  ENABLE_MODEL_BINDING 
    /* publish the status of the node to the publish address */
  Model_BindingPublishStatus();
 8010bfa:	f7ff fd5b 	bl	80106b4 <Model_BindingPublishStatus>
  for(elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 8010bfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010c02:	3301      	adds	r3, #1
 8010c04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8010c08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	f43f af15 	beq.w	8010a3c <Lighting_Process+0x28>
#endif  
}
}
 8010c12:	bf00      	nop
 8010c14:	bf00      	nop
 8010c16:	3734      	adds	r7, #52	; 0x34
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd90      	pop	{r4, r7, pc}
 8010c1c:	200045a8 	.word	0x200045a8
 8010c20:	08032d3c 	.word	0x08032d3c
 8010c24:	20004645 	.word	0x20004645
 8010c28:	08032d80 	.word	0x08032d80
 8010c2c:	200045c8 	.word	0x200045c8
 8010c30:	20004550 	.word	0x20004550

08010c34 <Light_LightnessStateUpdate_Process>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return MOBLE_RESULT.
*/
MOBLE_RESULT Light_LightnessStateUpdate_Process(MOBLEUINT8 elementIndex)
{
 8010c34:	b590      	push	{r4, r7, lr}
 8010c36:	b083      	sub	sp, #12
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	71fb      	strb	r3, [r7, #7]
  Light_LightnessStatus[elementIndex].LightnessPresentValue16 = Light_TemporaryStatus[elementIndex].PresentParam_1;
 8010c3e:	79fa      	ldrb	r2, [r7, #7]
 8010c40:	79f9      	ldrb	r1, [r7, #7]
 8010c42:	483b      	ldr	r0, [pc, #236]	; (8010d30 <Light_LightnessStateUpdate_Process+0xfc>)
 8010c44:	4613      	mov	r3, r2
 8010c46:	005b      	lsls	r3, r3, #1
 8010c48:	4413      	add	r3, r2
 8010c4a:	009b      	lsls	r3, r3, #2
 8010c4c:	4413      	add	r3, r2
 8010c4e:	4403      	add	r3, r0
 8010c50:	881b      	ldrh	r3, [r3, #0]
 8010c52:	b298      	uxth	r0, r3
 8010c54:	4a37      	ldr	r2, [pc, #220]	; (8010d34 <Light_LightnessStateUpdate_Process+0x100>)
 8010c56:	460b      	mov	r3, r1
 8010c58:	00db      	lsls	r3, r3, #3
 8010c5a:	440b      	add	r3, r1
 8010c5c:	4413      	add	r3, r2
 8010c5e:	4602      	mov	r2, r0
 8010c60:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].TargetValue16 = Light_TemporaryStatus[elementIndex].TargetParam_1;
 8010c62:	79fa      	ldrb	r2, [r7, #7]
 8010c64:	79f9      	ldrb	r1, [r7, #7]
 8010c66:	4832      	ldr	r0, [pc, #200]	; (8010d30 <Light_LightnessStateUpdate_Process+0xfc>)
 8010c68:	4613      	mov	r3, r2
 8010c6a:	005b      	lsls	r3, r3, #1
 8010c6c:	4413      	add	r3, r2
 8010c6e:	009b      	lsls	r3, r3, #2
 8010c70:	4413      	add	r3, r2
 8010c72:	4403      	add	r3, r0
 8010c74:	3306      	adds	r3, #6
 8010c76:	881b      	ldrh	r3, [r3, #0]
 8010c78:	b298      	uxth	r0, r3
 8010c7a:	4a2e      	ldr	r2, [pc, #184]	; (8010d34 <Light_LightnessStateUpdate_Process+0x100>)
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	00db      	lsls	r3, r3, #3
 8010c80:	440b      	add	r3, r1
 8010c82:	4413      	add	r3, r2
 8010c84:	3304      	adds	r3, #4
 8010c86:	4602      	mov	r2, r0
 8010c88:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].RemainingTime = Light_TemporaryStatus[elementIndex].RemainingTime ;
 8010c8a:	79fa      	ldrb	r2, [r7, #7]
 8010c8c:	79f9      	ldrb	r1, [r7, #7]
 8010c8e:	4828      	ldr	r0, [pc, #160]	; (8010d30 <Light_LightnessStateUpdate_Process+0xfc>)
 8010c90:	4613      	mov	r3, r2
 8010c92:	005b      	lsls	r3, r3, #1
 8010c94:	4413      	add	r3, r2
 8010c96:	009b      	lsls	r3, r3, #2
 8010c98:	4413      	add	r3, r2
 8010c9a:	4403      	add	r3, r0
 8010c9c:	330c      	adds	r3, #12
 8010c9e:	7818      	ldrb	r0, [r3, #0]
 8010ca0:	4a24      	ldr	r2, [pc, #144]	; (8010d34 <Light_LightnessStateUpdate_Process+0x100>)
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	00db      	lsls	r3, r3, #3
 8010ca6:	440b      	add	r3, r1
 8010ca8:	4413      	add	r3, r2
 8010caa:	3306      	adds	r3, #6
 8010cac:	4602      	mov	r2, r0
 8010cae:	701a      	strb	r2, [r3, #0]
	
  if((Light_LightnessStatus[elementIndex].LightnessPresentValue16 == Light_LightnessStatus[elementIndex].TargetValue16) && 
 8010cb0:	79fa      	ldrb	r2, [r7, #7]
 8010cb2:	4920      	ldr	r1, [pc, #128]	; (8010d34 <Light_LightnessStateUpdate_Process+0x100>)
 8010cb4:	4613      	mov	r3, r2
 8010cb6:	00db      	lsls	r3, r3, #3
 8010cb8:	4413      	add	r3, r2
 8010cba:	440b      	add	r3, r1
 8010cbc:	881b      	ldrh	r3, [r3, #0]
 8010cbe:	b299      	uxth	r1, r3
 8010cc0:	79fa      	ldrb	r2, [r7, #7]
 8010cc2:	481c      	ldr	r0, [pc, #112]	; (8010d34 <Light_LightnessStateUpdate_Process+0x100>)
 8010cc4:	4613      	mov	r3, r2
 8010cc6:	00db      	lsls	r3, r3, #3
 8010cc8:	4413      	add	r3, r2
 8010cca:	4403      	add	r3, r0
 8010ccc:	3304      	adds	r3, #4
 8010cce:	881b      	ldrh	r3, [r3, #0]
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	4299      	cmp	r1, r3
 8010cd4:	d126      	bne.n	8010d24 <Light_LightnessStateUpdate_Process+0xf0>
     (Light_LightnessStatus[elementIndex].LightnessPresentValue16 > 0))
 8010cd6:	79fa      	ldrb	r2, [r7, #7]
 8010cd8:	4916      	ldr	r1, [pc, #88]	; (8010d34 <Light_LightnessStateUpdate_Process+0x100>)
 8010cda:	4613      	mov	r3, r2
 8010cdc:	00db      	lsls	r3, r3, #3
 8010cde:	4413      	add	r3, r2
 8010ce0:	440b      	add	r3, r1
 8010ce2:	881b      	ldrh	r3, [r3, #0]
 8010ce4:	b29b      	uxth	r3, r3
  if((Light_LightnessStatus[elementIndex].LightnessPresentValue16 == Light_LightnessStatus[elementIndex].TargetValue16) && 
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d01c      	beq.n	8010d24 <Light_LightnessStateUpdate_Process+0xf0>
  {
    Light_LightnessStatus[elementIndex].LightnessLastStatus = Light_LightnessStatus[elementIndex].LightnessPresentValue16;
 8010cea:	79f9      	ldrb	r1, [r7, #7]
 8010cec:	79fa      	ldrb	r2, [r7, #7]
 8010cee:	4811      	ldr	r0, [pc, #68]	; (8010d34 <Light_LightnessStateUpdate_Process+0x100>)
 8010cf0:	460b      	mov	r3, r1
 8010cf2:	00db      	lsls	r3, r3, #3
 8010cf4:	440b      	add	r3, r1
 8010cf6:	4403      	add	r3, r0
 8010cf8:	881b      	ldrh	r3, [r3, #0]
 8010cfa:	b298      	uxth	r0, r3
 8010cfc:	490d      	ldr	r1, [pc, #52]	; (8010d34 <Light_LightnessStateUpdate_Process+0x100>)
 8010cfe:	4613      	mov	r3, r2
 8010d00:	00db      	lsls	r3, r3, #3
 8010d02:	4413      	add	r3, r2
 8010d04:	440b      	add	r3, r1
 8010d06:	4602      	mov	r2, r0
 8010d08:	f8a3 2007 	strh.w	r2, [r3, #7]
		  
    (LightAppli_cb.Lightness_Last_Set_cb)(&Light_LightnessStatus[elementIndex],elementIndex);                                       
 8010d0c:	4b0a      	ldr	r3, [pc, #40]	; (8010d38 <Light_LightnessStateUpdate_Process+0x104>)
 8010d0e:	699c      	ldr	r4, [r3, #24]
 8010d10:	79fa      	ldrb	r2, [r7, #7]
 8010d12:	4613      	mov	r3, r2
 8010d14:	00db      	lsls	r3, r3, #3
 8010d16:	4413      	add	r3, r2
 8010d18:	4a06      	ldr	r2, [pc, #24]	; (8010d34 <Light_LightnessStateUpdate_Process+0x100>)
 8010d1a:	4413      	add	r3, r2
 8010d1c:	79fa      	ldrb	r2, [r7, #7]
 8010d1e:	4611      	mov	r1, r2
 8010d20:	4618      	mov	r0, r3
 8010d22:	47a0      	blx	r4
  }
  return MOBLE_RESULT_SUCCESS;
 8010d24:	2300      	movs	r3, #0
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	370c      	adds	r7, #12
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd90      	pop	{r4, r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	200045b0 	.word	0x200045b0
 8010d34:	200045c8 	.word	0x200045c8
 8010d38:	08032d80 	.word	0x08032d80

08010d3c <Light_ModelRangeInit>:
* @brief Light_ModelRangeInit: Function called to initialise the minimum and maximum range of model state.
* @param void
* return void.
*/
void Light_ModelRangeInit(void)
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	b083      	sub	sp, #12
 8010d40:	af00      	add	r7, sp, #0
	
  for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 8010d42:	2300      	movs	r3, #0
 8010d44:	71fb      	strb	r3, [r7, #7]
 8010d46:	e092      	b.n	8010e6e <Light_ModelRangeInit+0x132>
  {
    Light_LightnessRangeParam[elementIndex].StatusCode = 0x00;
 8010d48:	79fa      	ldrb	r2, [r7, #7]
 8010d4a:	494e      	ldr	r1, [pc, #312]	; (8010e84 <Light_ModelRangeInit+0x148>)
 8010d4c:	4613      	mov	r3, r2
 8010d4e:	009b      	lsls	r3, r3, #2
 8010d50:	4413      	add	r3, r2
 8010d52:	440b      	add	r3, r1
 8010d54:	2200      	movs	r2, #0
 8010d56:	701a      	strb	r2, [r3, #0]
    Light_LightnessRangeParam[elementIndex].MinRangeStatus = MIN_VALID_RANGE;
 8010d58:	79fa      	ldrb	r2, [r7, #7]
 8010d5a:	494a      	ldr	r1, [pc, #296]	; (8010e84 <Light_ModelRangeInit+0x148>)
 8010d5c:	4613      	mov	r3, r2
 8010d5e:	009b      	lsls	r3, r3, #2
 8010d60:	4413      	add	r3, r2
 8010d62:	440b      	add	r3, r1
 8010d64:	2200      	movs	r2, #0
 8010d66:	705a      	strb	r2, [r3, #1]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	709a      	strb	r2, [r3, #2]
    Light_LightnessRangeParam[elementIndex].MaxRangeStatus = MAX_VALID_RANGE;
 8010d6c:	79fa      	ldrb	r2, [r7, #7]
 8010d6e:	4945      	ldr	r1, [pc, #276]	; (8010e84 <Light_ModelRangeInit+0x148>)
 8010d70:	4613      	mov	r3, r2
 8010d72:	009b      	lsls	r3, r3, #2
 8010d74:	4413      	add	r3, r2
 8010d76:	440b      	add	r3, r1
 8010d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d7c:	70da      	strb	r2, [r3, #3]
 8010d7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d82:	711a      	strb	r2, [r3, #4]
			
    CtlTemperatureRangeParam[elementIndex].StatusCode = 0x00;
 8010d84:	79fa      	ldrb	r2, [r7, #7]
 8010d86:	4940      	ldr	r1, [pc, #256]	; (8010e88 <Light_ModelRangeInit+0x14c>)
 8010d88:	4613      	mov	r3, r2
 8010d8a:	009b      	lsls	r3, r3, #2
 8010d8c:	4413      	add	r3, r2
 8010d8e:	440b      	add	r3, r1
 8010d90:	2200      	movs	r2, #0
 8010d92:	701a      	strb	r2, [r3, #0]
    CtlTemperatureRangeParam[elementIndex].MinRangeStatus = MIN_CTL_TEMP_RANGE;
 8010d94:	79fa      	ldrb	r2, [r7, #7]
 8010d96:	493c      	ldr	r1, [pc, #240]	; (8010e88 <Light_ModelRangeInit+0x14c>)
 8010d98:	4613      	mov	r3, r2
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	4413      	add	r3, r2
 8010d9e:	440b      	add	r3, r1
 8010da0:	2200      	movs	r2, #0
 8010da2:	f042 0220 	orr.w	r2, r2, #32
 8010da6:	705a      	strb	r2, [r3, #1]
 8010da8:	2200      	movs	r2, #0
 8010daa:	f042 0203 	orr.w	r2, r2, #3
 8010dae:	709a      	strb	r2, [r3, #2]
    CtlTemperatureRangeParam[elementIndex].MaxRangeStatus = MAX_CTL_TEMP_RANGE;
 8010db0:	79fa      	ldrb	r2, [r7, #7]
 8010db2:	4935      	ldr	r1, [pc, #212]	; (8010e88 <Light_ModelRangeInit+0x14c>)
 8010db4:	4613      	mov	r3, r2
 8010db6:	009b      	lsls	r3, r3, #2
 8010db8:	4413      	add	r3, r2
 8010dba:	440b      	add	r3, r1
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	f042 0220 	orr.w	r2, r2, #32
 8010dc2:	70da      	strb	r2, [r3, #3]
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	f042 024e 	orr.w	r2, r2, #78	; 0x4e
 8010dca:	711a      	strb	r2, [r3, #4]
			
    Light_HslRangeParam[elementIndex].Status_Code = 0x00;
 8010dcc:	79fa      	ldrb	r2, [r7, #7]
 8010dce:	492f      	ldr	r1, [pc, #188]	; (8010e8c <Light_ModelRangeInit+0x150>)
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	00db      	lsls	r3, r3, #3
 8010dd4:	4413      	add	r3, r2
 8010dd6:	440b      	add	r3, r1
 8010dd8:	2200      	movs	r2, #0
 8010dda:	701a      	strb	r2, [r3, #0]
    Light_HslRangeParam[elementIndex].HslHueMinRange16 = MIN_HUE_RANGE;
 8010ddc:	79fa      	ldrb	r2, [r7, #7]
 8010dde:	492b      	ldr	r1, [pc, #172]	; (8010e8c <Light_ModelRangeInit+0x150>)
 8010de0:	4613      	mov	r3, r2
 8010de2:	00db      	lsls	r3, r3, #3
 8010de4:	4413      	add	r3, r2
 8010de6:	440b      	add	r3, r1
 8010de8:	2200      	movs	r2, #0
 8010dea:	705a      	strb	r2, [r3, #1]
 8010dec:	2200      	movs	r2, #0
 8010dee:	709a      	strb	r2, [r3, #2]
    Light_HslRangeParam[elementIndex].HslHueMaxRange16 = MAX_HUE_RANGE;
 8010df0:	79fa      	ldrb	r2, [r7, #7]
 8010df2:	4926      	ldr	r1, [pc, #152]	; (8010e8c <Light_ModelRangeInit+0x150>)
 8010df4:	4613      	mov	r3, r2
 8010df6:	00db      	lsls	r3, r3, #3
 8010df8:	4413      	add	r3, r2
 8010dfa:	440b      	add	r3, r1
 8010dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e00:	70da      	strb	r2, [r3, #3]
 8010e02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e06:	711a      	strb	r2, [r3, #4]
    Light_HslRangeParam[elementIndex].HslMinSaturation16 = MIN_SATURATION_RANGE;
 8010e08:	79fa      	ldrb	r2, [r7, #7]
 8010e0a:	4920      	ldr	r1, [pc, #128]	; (8010e8c <Light_ModelRangeInit+0x150>)
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	00db      	lsls	r3, r3, #3
 8010e10:	4413      	add	r3, r2
 8010e12:	440b      	add	r3, r1
 8010e14:	2200      	movs	r2, #0
 8010e16:	715a      	strb	r2, [r3, #5]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	719a      	strb	r2, [r3, #6]
    Light_HslRangeParam[elementIndex].HslMaxSaturation16 = MAX_SATURATION_RANGE;
 8010e1c:	79fa      	ldrb	r2, [r7, #7]
 8010e1e:	491b      	ldr	r1, [pc, #108]	; (8010e8c <Light_ModelRangeInit+0x150>)
 8010e20:	4613      	mov	r3, r2
 8010e22:	00db      	lsls	r3, r3, #3
 8010e24:	4413      	add	r3, r2
 8010e26:	440b      	add	r3, r1
 8010e28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e2c:	71da      	strb	r2, [r3, #7]
 8010e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e32:	721a      	strb	r2, [r3, #8]
			
    Light_ModelFlag[elementIndex].LightOptionalParam = 0x00;
 8010e34:	79fa      	ldrb	r2, [r7, #7]
 8010e36:	4916      	ldr	r1, [pc, #88]	; (8010e90 <Light_ModelRangeInit+0x154>)
 8010e38:	4613      	mov	r3, r2
 8010e3a:	005b      	lsls	r3, r3, #1
 8010e3c:	4413      	add	r3, r2
 8010e3e:	440b      	add	r3, r1
 8010e40:	3301      	adds	r3, #1
 8010e42:	2200      	movs	r2, #0
 8010e44:	701a      	strb	r2, [r3, #0]
    Light_ModelFlag[elementIndex].LightTransitionFlag = 0x0;
 8010e46:	79fa      	ldrb	r2, [r7, #7]
 8010e48:	4911      	ldr	r1, [pc, #68]	; (8010e90 <Light_ModelRangeInit+0x154>)
 8010e4a:	4613      	mov	r3, r2
 8010e4c:	005b      	lsls	r3, r3, #1
 8010e4e:	4413      	add	r3, r2
 8010e50:	440b      	add	r3, r1
 8010e52:	2200      	movs	r2, #0
 8010e54:	701a      	strb	r2, [r3, #0]
    Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt = 0x00;  
 8010e56:	79fa      	ldrb	r2, [r7, #7]
 8010e58:	490d      	ldr	r1, [pc, #52]	; (8010e90 <Light_ModelRangeInit+0x154>)
 8010e5a:	4613      	mov	r3, r2
 8010e5c:	005b      	lsls	r3, r3, #1
 8010e5e:	4413      	add	r3, r2
 8010e60:	440b      	add	r3, r1
 8010e62:	3302      	adds	r3, #2
 8010e64:	2200      	movs	r2, #0
 8010e66:	701a      	strb	r2, [r3, #0]
  for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 8010e68:	79fb      	ldrb	r3, [r7, #7]
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	71fb      	strb	r3, [r7, #7]
 8010e6e:	79fb      	ldrb	r3, [r7, #7]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	f43f af69 	beq.w	8010d48 <Light_ModelRangeInit+0xc>
  }
}
 8010e76:	bf00      	nop
 8010e78:	bf00      	nop
 8010e7a:	370c      	adds	r7, #12
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr
 8010e84:	200045d8 	.word	0x200045d8
 8010e88:	200045e0 	.word	0x200045e0
 8010e8c:	200045e8 	.word	0x200045e8
 8010e90:	200045a8 	.word	0x200045a8

08010e94 <Light_LinearStateUpdate_Process>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return MOBLE_RESULT.
*/
MOBLE_RESULT Light_LinearStateUpdate_Process(MOBLEUINT8 elementIndex)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	71fb      	strb	r3, [r7, #7]
  Light_LightnessStatus[elementIndex].LinearPresentValue16 = Light_TemporaryStatus[elementIndex].PresentParam_1;
 8010e9e:	79fa      	ldrb	r2, [r7, #7]
 8010ea0:	79f9      	ldrb	r1, [r7, #7]
 8010ea2:	481f      	ldr	r0, [pc, #124]	; (8010f20 <Light_LinearStateUpdate_Process+0x8c>)
 8010ea4:	4613      	mov	r3, r2
 8010ea6:	005b      	lsls	r3, r3, #1
 8010ea8:	4413      	add	r3, r2
 8010eaa:	009b      	lsls	r3, r3, #2
 8010eac:	4413      	add	r3, r2
 8010eae:	4403      	add	r3, r0
 8010eb0:	881b      	ldrh	r3, [r3, #0]
 8010eb2:	b298      	uxth	r0, r3
 8010eb4:	4a1b      	ldr	r2, [pc, #108]	; (8010f24 <Light_LinearStateUpdate_Process+0x90>)
 8010eb6:	460b      	mov	r3, r1
 8010eb8:	00db      	lsls	r3, r3, #3
 8010eba:	440b      	add	r3, r1
 8010ebc:	4413      	add	r3, r2
 8010ebe:	3302      	adds	r3, #2
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].TargetValue16 =  Light_TemporaryStatus[elementIndex].TargetParam_1;
 8010ec4:	79fa      	ldrb	r2, [r7, #7]
 8010ec6:	79f9      	ldrb	r1, [r7, #7]
 8010ec8:	4815      	ldr	r0, [pc, #84]	; (8010f20 <Light_LinearStateUpdate_Process+0x8c>)
 8010eca:	4613      	mov	r3, r2
 8010ecc:	005b      	lsls	r3, r3, #1
 8010ece:	4413      	add	r3, r2
 8010ed0:	009b      	lsls	r3, r3, #2
 8010ed2:	4413      	add	r3, r2
 8010ed4:	4403      	add	r3, r0
 8010ed6:	3306      	adds	r3, #6
 8010ed8:	881b      	ldrh	r3, [r3, #0]
 8010eda:	b298      	uxth	r0, r3
 8010edc:	4a11      	ldr	r2, [pc, #68]	; (8010f24 <Light_LinearStateUpdate_Process+0x90>)
 8010ede:	460b      	mov	r3, r1
 8010ee0:	00db      	lsls	r3, r3, #3
 8010ee2:	440b      	add	r3, r1
 8010ee4:	4413      	add	r3, r2
 8010ee6:	3304      	adds	r3, #4
 8010ee8:	4602      	mov	r2, r0
 8010eea:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].RemainingTime = Light_TemporaryStatus[elementIndex].RemainingTime ;
 8010eec:	79fa      	ldrb	r2, [r7, #7]
 8010eee:	79f9      	ldrb	r1, [r7, #7]
 8010ef0:	480b      	ldr	r0, [pc, #44]	; (8010f20 <Light_LinearStateUpdate_Process+0x8c>)
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	005b      	lsls	r3, r3, #1
 8010ef6:	4413      	add	r3, r2
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	4413      	add	r3, r2
 8010efc:	4403      	add	r3, r0
 8010efe:	330c      	adds	r3, #12
 8010f00:	7818      	ldrb	r0, [r3, #0]
 8010f02:	4a08      	ldr	r2, [pc, #32]	; (8010f24 <Light_LinearStateUpdate_Process+0x90>)
 8010f04:	460b      	mov	r3, r1
 8010f06:	00db      	lsls	r3, r3, #3
 8010f08:	440b      	add	r3, r1
 8010f0a:	4413      	add	r3, r2
 8010f0c:	3306      	adds	r3, #6
 8010f0e:	4602      	mov	r2, r0
 8010f10:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS;
 8010f12:	2300      	movs	r3, #0
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	370c      	adds	r7, #12
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr
 8010f20:	200045b0 	.word	0x200045b0
 8010f24:	200045c8 	.word	0x200045c8

08010f28 <Light_Lightness_Linear_Binding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void
*/
void Light_Lightness_Linear_Binding(MOBLEUINT8 bindingFlag ,MOBLEUINT32 length, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b086      	sub	sp, #24
 8010f2c:	af02      	add	r7, sp, #8
 8010f2e:	6039      	str	r1, [r7, #0]
 8010f30:	4611      	mov	r1, r2
 8010f32:	461a      	mov	r2, r3
 8010f34:	4603      	mov	r3, r0
 8010f36:	71fb      	strb	r3, [r7, #7]
 8010f38:	460b      	mov	r3, r1
 8010f3a:	71bb      	strb	r3, [r7, #6]
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	717b      	strb	r3, [r7, #5]
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS 
  MOBLE_RESULT result;
  
  if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementIndex)) == (1 << elementIndex))
 8010f40:	79bb      	ldrb	r3, [r7, #6]
 8010f42:	2201      	movs	r2, #1
 8010f44:	fa02 f303 	lsl.w	r3, r2, r3
 8010f48:	f003 0201 	and.w	r2, r3, #1
 8010f4c:	79bb      	ldrb	r3, [r7, #6]
 8010f4e:	2101      	movs	r1, #1
 8010f50:	fa01 f303 	lsl.w	r3, r1, r3
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d162      	bne.n	801101e <Light_Lightness_Linear_Binding+0xf6>
  {
    if(bindingFlag == BINDING_LIGHT_LIGHTNESS_LINEAR_SET)
 8010f58:	79fb      	ldrb	r3, [r7, #7]
 8010f5a:	2b03      	cmp	r3, #3
 8010f5c:	d15f      	bne.n	801101e <Light_Lightness_Linear_Binding+0xf6>
    {
      Light_Linear_ActualBinding(length, elementIndex);
 8010f5e:	79bb      	ldrb	r3, [r7, #6]
 8010f60:	4619      	mov	r1, r3
 8010f62:	6838      	ldr	r0, [r7, #0]
 8010f64:	f000 fcdc 	bl	8011920 <Light_Linear_ActualBinding>
      
      result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_SET_UNACK ,elementIndex); 
 8010f68:	79bb      	ldrb	r3, [r7, #6]
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	f248 204d 	movw	r0, #33357	; 0x824d
 8010f70:	f000 fdf8 	bl	8011b64 <Chk_OpcodePresent>
 8010f74:	4603      	mov	r3, r0
 8010f76:	73fb      	strb	r3, [r7, #15]
    
      if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 8010f78:	7bfb      	ldrb	r3, [r7, #15]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d002      	beq.n	8010f84 <Light_Lightness_Linear_Binding+0x5c>
 8010f7e:	7e3b      	ldrb	r3, [r7, #24]
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d14c      	bne.n	801101e <Light_Lightness_Linear_Binding+0xf6>
      {     
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_SET_UNACK;
 8010f84:	79ba      	ldrb	r2, [r7, #6]
 8010f86:	79b9      	ldrb	r1, [r7, #6]
 8010f88:	4832      	ldr	r0, [pc, #200]	; (8011054 <Light_Lightness_Linear_Binding+0x12c>)
 8010f8a:	460b      	mov	r3, r1
 8010f8c:	00db      	lsls	r3, r3, #3
 8010f8e:	440b      	add	r3, r1
 8010f90:	00d9      	lsls	r1, r3, #3
 8010f92:	440b      	add	r3, r1
 8010f94:	4403      	add	r3, r0
 8010f96:	3350      	adds	r3, #80	; 0x50
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	482e      	ldr	r0, [pc, #184]	; (8011054 <Light_Lightness_Linear_Binding+0x12c>)
 8010f9c:	0059      	lsls	r1, r3, #1
 8010f9e:	4613      	mov	r3, r2
 8010fa0:	00db      	lsls	r3, r3, #3
 8010fa2:	4413      	add	r3, r2
 8010fa4:	00da      	lsls	r2, r3, #3
 8010fa6:	4413      	add	r3, r2
 8010fa8:	440b      	add	r3, r1
 8010faa:	4403      	add	r3, r0
 8010fac:	2200      	movs	r2, #0
 8010fae:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8010fb2:	701a      	strb	r2, [r3, #0]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8010fba:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;    
 8010fbc:	79ba      	ldrb	r2, [r7, #6]
 8010fbe:	79b9      	ldrb	r1, [r7, #6]
 8010fc0:	4824      	ldr	r0, [pc, #144]	; (8011054 <Light_Lightness_Linear_Binding+0x12c>)
 8010fc2:	460b      	mov	r3, r1
 8010fc4:	00db      	lsls	r3, r3, #3
 8010fc6:	440b      	add	r3, r1
 8010fc8:	00d9      	lsls	r1, r3, #3
 8010fca:	440b      	add	r3, r1
 8010fcc:	4403      	add	r3, r0
 8010fce:	3350      	adds	r3, #80	; 0x50
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	4820      	ldr	r0, [pc, #128]	; (8011054 <Light_Lightness_Linear_Binding+0x12c>)
 8010fd4:	3314      	adds	r3, #20
 8010fd6:	0059      	lsls	r1, r3, #1
 8010fd8:	4613      	mov	r3, r2
 8010fda:	00db      	lsls	r3, r3, #3
 8010fdc:	4413      	add	r3, r2
 8010fde:	00da      	lsls	r2, r3, #3
 8010fe0:	4413      	add	r3, r2
 8010fe2:	440b      	add	r3, r1
 8010fe4:	4403      	add	r3, r0
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	701a      	strb	r2, [r3, #0]
 8010fea:	2200      	movs	r2, #0
 8010fec:	f042 0213 	orr.w	r2, r2, #19
 8010ff0:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 8010ff2:	79ba      	ldrb	r2, [r7, #6]
 8010ff4:	4817      	ldr	r0, [pc, #92]	; (8011054 <Light_Lightness_Linear_Binding+0x12c>)
 8010ff6:	4613      	mov	r3, r2
 8010ff8:	00db      	lsls	r3, r3, #3
 8010ffa:	4413      	add	r3, r2
 8010ffc:	00d9      	lsls	r1, r3, #3
 8010ffe:	440b      	add	r3, r1
 8011000:	4403      	add	r3, r0
 8011002:	3350      	adds	r3, #80	; 0x50
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	3301      	adds	r3, #1
 8011008:	b2d8      	uxtb	r0, r3
 801100a:	4912      	ldr	r1, [pc, #72]	; (8011054 <Light_Lightness_Linear_Binding+0x12c>)
 801100c:	4613      	mov	r3, r2
 801100e:	00db      	lsls	r3, r3, #3
 8011010:	4413      	add	r3, r2
 8011012:	00da      	lsls	r2, r3, #3
 8011014:	4413      	add	r3, r2
 8011016:	440b      	add	r3, r1
 8011018:	3350      	adds	r3, #80	; 0x50
 801101a:	4602      	mov	r2, r0
 801101c:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  Light_Lightness_Binding(bindingFlag , 0,elementIndex,
 801101e:	79ba      	ldrb	r2, [r7, #6]
 8011020:	490d      	ldr	r1, [pc, #52]	; (8011058 <Light_Lightness_Linear_Binding+0x130>)
 8011022:	4613      	mov	r3, r2
 8011024:	005b      	lsls	r3, r3, #1
 8011026:	4413      	add	r3, r2
 8011028:	440b      	add	r3, r1
 801102a:	7819      	ldrb	r1, [r3, #0]
 801102c:	79ba      	ldrb	r2, [r7, #6]
 801102e:	480a      	ldr	r0, [pc, #40]	; (8011058 <Light_Lightness_Linear_Binding+0x130>)
 8011030:	4613      	mov	r3, r2
 8011032:	005b      	lsls	r3, r3, #1
 8011034:	4413      	add	r3, r2
 8011036:	4403      	add	r3, r0
 8011038:	3302      	adds	r3, #2
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	79ba      	ldrb	r2, [r7, #6]
 801103e:	79f8      	ldrb	r0, [r7, #7]
 8011040:	9300      	str	r3, [sp, #0]
 8011042:	460b      	mov	r3, r1
 8011044:	2100      	movs	r1, #0
 8011046:	f000 f809 	bl	801105c <Light_Lightness_Binding>
                          Light_ModelFlag[elementIndex].LightTransitionFlag,Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt);
#endif  
}
 801104a:	bf00      	nop
 801104c:	3710      	adds	r7, #16
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	200045f4 	.word	0x200045f4
 8011058:	200045a8 	.word	0x200045a8

0801105c <Light_Lightness_Binding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void
*/
void Light_Lightness_Binding(MOBLEUINT8 bindingFlag , MOBLEUINT32 length, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{ 
 801105c:	b580      	push	{r7, lr}
 801105e:	b084      	sub	sp, #16
 8011060:	af00      	add	r7, sp, #0
 8011062:	6039      	str	r1, [r7, #0]
 8011064:	4611      	mov	r1, r2
 8011066:	461a      	mov	r2, r3
 8011068:	4603      	mov	r3, r0
 801106a:	71fb      	strb	r3, [r7, #7]
 801106c:	460b      	mov	r3, r1
 801106e:	71bb      	strb	r3, [r7, #6]
 8011070:	4613      	mov	r3, r2
 8011072:	717b      	strb	r3, [r7, #5]
	   || defined (ENABLE_LIGHT_MODEL_SERVER_HSL)
  MOBLE_RESULT result;
#endif 	
 
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS 
  if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementIndex)) == (1 << elementIndex))
 8011074:	79bb      	ldrb	r3, [r7, #6]
 8011076:	2201      	movs	r2, #1
 8011078:	fa02 f303 	lsl.w	r3, r2, r3
 801107c:	f003 0201 	and.w	r2, r3, #1
 8011080:	79bb      	ldrb	r3, [r7, #6]
 8011082:	2101      	movs	r1, #1
 8011084:	fa01 f303 	lsl.w	r3, r1, r3
 8011088:	429a      	cmp	r2, r3
 801108a:	d161      	bne.n	8011150 <Light_Lightness_Binding+0xf4>
  {
    if(bindingFlag != BINDING_LIGHT_LIGHTNESS_LINEAR_SET)
 801108c:	79fb      	ldrb	r3, [r7, #7]
 801108e:	2b03      	cmp	r3, #3
 8011090:	d05e      	beq.n	8011150 <Light_Lightness_Binding+0xf4>
    {
      Light_Actual_LinearBinding(elementIndex); 
 8011092:	79bb      	ldrb	r3, [r7, #6]
 8011094:	4618      	mov	r0, r3
 8011096:	f000 fbef 	bl	8011878 <Light_Actual_LinearBinding>
      TRACE_M(TF_LIGHT_M, "Light Lightness binding with Light Linear \r\n"); 
                  
      result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_LINEAR_SET_UNACK ,elementIndex); 
 801109a:	79bb      	ldrb	r3, [r7, #6]
 801109c:	4619      	mov	r1, r3
 801109e:	f248 2051 	movw	r0, #33361	; 0x8251
 80110a2:	f000 fd5f 	bl	8011b64 <Chk_OpcodePresent>
 80110a6:	4603      	mov	r3, r0
 80110a8:	73bb      	strb	r3, [r7, #14]
    
      if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 80110aa:	7bbb      	ldrb	r3, [r7, #14]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d002      	beq.n	80110b6 <Light_Lightness_Binding+0x5a>
 80110b0:	7e3b      	ldrb	r3, [r7, #24]
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d14c      	bne.n	8011150 <Light_Lightness_Binding+0xf4>
      {            
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_LINEAR_SET_UNACK;
 80110b6:	79ba      	ldrb	r2, [r7, #6]
 80110b8:	79b9      	ldrb	r1, [r7, #6]
 80110ba:	48c2      	ldr	r0, [pc, #776]	; (80113c4 <Light_Lightness_Binding+0x368>)
 80110bc:	460b      	mov	r3, r1
 80110be:	00db      	lsls	r3, r3, #3
 80110c0:	440b      	add	r3, r1
 80110c2:	00d9      	lsls	r1, r3, #3
 80110c4:	440b      	add	r3, r1
 80110c6:	4403      	add	r3, r0
 80110c8:	3350      	adds	r3, #80	; 0x50
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	48bd      	ldr	r0, [pc, #756]	; (80113c4 <Light_Lightness_Binding+0x368>)
 80110ce:	0059      	lsls	r1, r3, #1
 80110d0:	4613      	mov	r3, r2
 80110d2:	00db      	lsls	r3, r3, #3
 80110d4:	4413      	add	r3, r2
 80110d6:	00da      	lsls	r2, r3, #3
 80110d8:	4413      	add	r3, r2
 80110da:	440b      	add	r3, r1
 80110dc:	4403      	add	r3, r0
 80110de:	2200      	movs	r2, #0
 80110e0:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 80110e4:	701a      	strb	r2, [r3, #0]
 80110e6:	2200      	movs	r2, #0
 80110e8:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80110ec:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;    
 80110ee:	79ba      	ldrb	r2, [r7, #6]
 80110f0:	79b9      	ldrb	r1, [r7, #6]
 80110f2:	48b4      	ldr	r0, [pc, #720]	; (80113c4 <Light_Lightness_Binding+0x368>)
 80110f4:	460b      	mov	r3, r1
 80110f6:	00db      	lsls	r3, r3, #3
 80110f8:	440b      	add	r3, r1
 80110fa:	00d9      	lsls	r1, r3, #3
 80110fc:	440b      	add	r3, r1
 80110fe:	4403      	add	r3, r0
 8011100:	3350      	adds	r3, #80	; 0x50
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	48af      	ldr	r0, [pc, #700]	; (80113c4 <Light_Lightness_Binding+0x368>)
 8011106:	3314      	adds	r3, #20
 8011108:	0059      	lsls	r1, r3, #1
 801110a:	4613      	mov	r3, r2
 801110c:	00db      	lsls	r3, r3, #3
 801110e:	4413      	add	r3, r2
 8011110:	00da      	lsls	r2, r3, #3
 8011112:	4413      	add	r3, r2
 8011114:	440b      	add	r3, r1
 8011116:	4403      	add	r3, r0
 8011118:	2200      	movs	r2, #0
 801111a:	701a      	strb	r2, [r3, #0]
 801111c:	2200      	movs	r2, #0
 801111e:	f042 0213 	orr.w	r2, r2, #19
 8011122:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 8011124:	79ba      	ldrb	r2, [r7, #6]
 8011126:	48a7      	ldr	r0, [pc, #668]	; (80113c4 <Light_Lightness_Binding+0x368>)
 8011128:	4613      	mov	r3, r2
 801112a:	00db      	lsls	r3, r3, #3
 801112c:	4413      	add	r3, r2
 801112e:	00d9      	lsls	r1, r3, #3
 8011130:	440b      	add	r3, r1
 8011132:	4403      	add	r3, r0
 8011134:	3350      	adds	r3, #80	; 0x50
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	3301      	adds	r3, #1
 801113a:	b2d8      	uxtb	r0, r3
 801113c:	49a1      	ldr	r1, [pc, #644]	; (80113c4 <Light_Lightness_Binding+0x368>)
 801113e:	4613      	mov	r3, r2
 8011140:	00db      	lsls	r3, r3, #3
 8011142:	4413      	add	r3, r2
 8011144:	00da      	lsls	r2, r3, #3
 8011146:	4413      	add	r3, r2
 8011148:	440b      	add	r3, r1
 801114a:	3350      	adds	r3, #80	; 0x50
 801114c:	4602      	mov	r2, r0
 801114e:	701a      	strb	r2, [r3, #0]
    As linear lightness changes, it changes the value of actual lightness
    which in turn changes the state of generic on off state.
    */
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF  
    /* Binding of data b/w light lightness actual and Generic on off */
  if((ENABLE_GENERIC_MODEL_SERVER_ONOFF & (1 << elementIndex)) == (1 << elementIndex))
 8011150:	79bb      	ldrb	r3, [r7, #6]
 8011152:	2201      	movs	r2, #1
 8011154:	fa02 f303 	lsl.w	r3, r2, r3
 8011158:	f003 0201 	and.w	r2, r3, #1
 801115c:	79bb      	ldrb	r3, [r7, #6]
 801115e:	2101      	movs	r1, #1
 8011160:	fa01 f303 	lsl.w	r3, r1, r3
 8011164:	429a      	cmp	r2, r3
 8011166:	d168      	bne.n	801123a <Light_Lightness_Binding+0x1de>
  {
    if(bindingFlag != BINDING_GENERIC_ON_OFF_SET)
 8011168:	79fb      	ldrb	r3, [r7, #7]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d065      	beq.n	801123a <Light_Lightness_Binding+0x1de>
    {
      LightActual_GenericOnOffBinding(&Light_LightnessStatus[elementIndex],elementIndex);
 801116e:	79ba      	ldrb	r2, [r7, #6]
 8011170:	4613      	mov	r3, r2
 8011172:	00db      	lsls	r3, r3, #3
 8011174:	4413      	add	r3, r2
 8011176:	4a94      	ldr	r2, [pc, #592]	; (80113c8 <Light_Lightness_Binding+0x36c>)
 8011178:	4413      	add	r3, r2
 801117a:	79ba      	ldrb	r2, [r7, #6]
 801117c:	4611      	mov	r1, r2
 801117e:	4618      	mov	r0, r3
 8011180:	f7fe f9e4 	bl	800f54c <LightActual_GenericOnOffBinding>
       
      result = Chk_OpcodePresent((MOBLEUINT16)GENERIC_ON_OFF_SET_UNACK ,elementIndex); 
 8011184:	79bb      	ldrb	r3, [r7, #6]
 8011186:	4619      	mov	r1, r3
 8011188:	f248 2003 	movw	r0, #33283	; 0x8203
 801118c:	f000 fcea 	bl	8011b64 <Chk_OpcodePresent>
 8011190:	4603      	mov	r3, r0
 8011192:	73bb      	strb	r3, [r7, #14]
    
      if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 8011194:	7bbb      	ldrb	r3, [r7, #14]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d002      	beq.n	80111a0 <Light_Lightness_Binding+0x144>
 801119a:	7e3b      	ldrb	r3, [r7, #24]
 801119c:	2b01      	cmp	r3, #1
 801119e:	d14c      	bne.n	801123a <Light_Lightness_Binding+0x1de>
      { 
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= GENERIC_ON_OFF_SET_UNACK;
 80111a0:	79ba      	ldrb	r2, [r7, #6]
 80111a2:	79b9      	ldrb	r1, [r7, #6]
 80111a4:	4887      	ldr	r0, [pc, #540]	; (80113c4 <Light_Lightness_Binding+0x368>)
 80111a6:	460b      	mov	r3, r1
 80111a8:	00db      	lsls	r3, r3, #3
 80111aa:	440b      	add	r3, r1
 80111ac:	00d9      	lsls	r1, r3, #3
 80111ae:	440b      	add	r3, r1
 80111b0:	4403      	add	r3, r0
 80111b2:	3350      	adds	r3, #80	; 0x50
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	4883      	ldr	r0, [pc, #524]	; (80113c4 <Light_Lightness_Binding+0x368>)
 80111b8:	0059      	lsls	r1, r3, #1
 80111ba:	4613      	mov	r3, r2
 80111bc:	00db      	lsls	r3, r3, #3
 80111be:	4413      	add	r3, r2
 80111c0:	00da      	lsls	r2, r3, #3
 80111c2:	4413      	add	r3, r2
 80111c4:	440b      	add	r3, r1
 80111c6:	4403      	add	r3, r0
 80111c8:	2200      	movs	r2, #0
 80111ca:	f042 0203 	orr.w	r2, r2, #3
 80111ce:	701a      	strb	r2, [r3, #0]
 80111d0:	2200      	movs	r2, #0
 80111d2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80111d6:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = GENERIC_ONOFF_SERVER_MODEL_ID;
 80111d8:	79ba      	ldrb	r2, [r7, #6]
 80111da:	79b9      	ldrb	r1, [r7, #6]
 80111dc:	4879      	ldr	r0, [pc, #484]	; (80113c4 <Light_Lightness_Binding+0x368>)
 80111de:	460b      	mov	r3, r1
 80111e0:	00db      	lsls	r3, r3, #3
 80111e2:	440b      	add	r3, r1
 80111e4:	00d9      	lsls	r1, r3, #3
 80111e6:	440b      	add	r3, r1
 80111e8:	4403      	add	r3, r0
 80111ea:	3350      	adds	r3, #80	; 0x50
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	4875      	ldr	r0, [pc, #468]	; (80113c4 <Light_Lightness_Binding+0x368>)
 80111f0:	3314      	adds	r3, #20
 80111f2:	0059      	lsls	r1, r3, #1
 80111f4:	4613      	mov	r3, r2
 80111f6:	00db      	lsls	r3, r3, #3
 80111f8:	4413      	add	r3, r2
 80111fa:	00da      	lsls	r2, r3, #3
 80111fc:	4413      	add	r3, r2
 80111fe:	440b      	add	r3, r1
 8011200:	4403      	add	r3, r0
 8011202:	2200      	movs	r2, #0
 8011204:	701a      	strb	r2, [r3, #0]
 8011206:	2200      	movs	r2, #0
 8011208:	f042 0210 	orr.w	r2, r2, #16
 801120c:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 801120e:	79ba      	ldrb	r2, [r7, #6]
 8011210:	486c      	ldr	r0, [pc, #432]	; (80113c4 <Light_Lightness_Binding+0x368>)
 8011212:	4613      	mov	r3, r2
 8011214:	00db      	lsls	r3, r3, #3
 8011216:	4413      	add	r3, r2
 8011218:	00d9      	lsls	r1, r3, #3
 801121a:	440b      	add	r3, r1
 801121c:	4403      	add	r3, r0
 801121e:	3350      	adds	r3, #80	; 0x50
 8011220:	781b      	ldrb	r3, [r3, #0]
 8011222:	3301      	adds	r3, #1
 8011224:	b2d8      	uxtb	r0, r3
 8011226:	4967      	ldr	r1, [pc, #412]	; (80113c4 <Light_Lightness_Binding+0x368>)
 8011228:	4613      	mov	r3, r2
 801122a:	00db      	lsls	r3, r3, #3
 801122c:	4413      	add	r3, r2
 801122e:	00da      	lsls	r2, r3, #3
 8011230:	4413      	add	r3, r2
 8011232:	440b      	add	r3, r1
 8011234:	3350      	adds	r3, #80	; 0x50
 8011236:	4602      	mov	r2, r0
 8011238:	701a      	strb	r2, [r3, #0]
    As linear lightness changes, it changes the value of actual lightness
    which in turn changes the state of generic level state.
    */
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL  
    /* Binding of data b/w light lightness actual and Generic Level */
  if((ENABLE_GENERIC_MODEL_SERVER_LEVEL & (1 << elementIndex)) == (1 << elementIndex))
 801123a:	79bb      	ldrb	r3, [r7, #6]
 801123c:	2201      	movs	r2, #1
 801123e:	fa02 f303 	lsl.w	r3, r2, r3
 8011242:	f003 0201 	and.w	r2, r3, #1
 8011246:	79bb      	ldrb	r3, [r7, #6]
 8011248:	2101      	movs	r1, #1
 801124a:	fa01 f303 	lsl.w	r3, r1, r3
 801124e:	429a      	cmp	r2, r3
 8011250:	d16a      	bne.n	8011328 <Light_Lightness_Binding+0x2cc>
  {
    if(bindingFlag != BINDING_GENERIC_LEVEL_SET)
 8011252:	79fb      	ldrb	r3, [r7, #7]
 8011254:	2b01      	cmp	r3, #1
 8011256:	d067      	beq.n	8011328 <Light_Lightness_Binding+0x2cc>
    {
      LightActual_GenericLevelBinding(&Light_LightnessStatus[elementIndex],elementIndex);
 8011258:	79ba      	ldrb	r2, [r7, #6]
 801125a:	4613      	mov	r3, r2
 801125c:	00db      	lsls	r3, r3, #3
 801125e:	4413      	add	r3, r2
 8011260:	4a59      	ldr	r2, [pc, #356]	; (80113c8 <Light_Lightness_Binding+0x36c>)
 8011262:	4413      	add	r3, r2
 8011264:	79ba      	ldrb	r2, [r7, #6]
 8011266:	4611      	mov	r1, r2
 8011268:	4618      	mov	r0, r3
 801126a:	f7fe f995 	bl	800f598 <LightActual_GenericLevelBinding>
      
      result = Chk_OpcodePresent((MOBLEUINT16)GENERIC_LEVEL_SET_UNACK ,elementIndex); 
 801126e:	79bb      	ldrb	r3, [r7, #6]
 8011270:	4619      	mov	r1, r3
 8011272:	f248 2007 	movw	r0, #33287	; 0x8207
 8011276:	f000 fc75 	bl	8011b64 <Chk_OpcodePresent>
 801127a:	4603      	mov	r3, r0
 801127c:	73bb      	strb	r3, [r7, #14]
    
      if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 801127e:	7bbb      	ldrb	r3, [r7, #14]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d002      	beq.n	801128a <Light_Lightness_Binding+0x22e>
 8011284:	7e3b      	ldrb	r3, [r7, #24]
 8011286:	2b01      	cmp	r3, #1
 8011288:	d14e      	bne.n	8011328 <Light_Lightness_Binding+0x2cc>
      {
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= GENERIC_LEVEL_SET_UNACK;
 801128a:	79ba      	ldrb	r2, [r7, #6]
 801128c:	79b9      	ldrb	r1, [r7, #6]
 801128e:	484d      	ldr	r0, [pc, #308]	; (80113c4 <Light_Lightness_Binding+0x368>)
 8011290:	460b      	mov	r3, r1
 8011292:	00db      	lsls	r3, r3, #3
 8011294:	440b      	add	r3, r1
 8011296:	00d9      	lsls	r1, r3, #3
 8011298:	440b      	add	r3, r1
 801129a:	4403      	add	r3, r0
 801129c:	3350      	adds	r3, #80	; 0x50
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	4848      	ldr	r0, [pc, #288]	; (80113c4 <Light_Lightness_Binding+0x368>)
 80112a2:	0059      	lsls	r1, r3, #1
 80112a4:	4613      	mov	r3, r2
 80112a6:	00db      	lsls	r3, r3, #3
 80112a8:	4413      	add	r3, r2
 80112aa:	00da      	lsls	r2, r3, #3
 80112ac:	4413      	add	r3, r2
 80112ae:	440b      	add	r3, r1
 80112b0:	4403      	add	r3, r0
 80112b2:	2200      	movs	r2, #0
 80112b4:	f042 0207 	orr.w	r2, r2, #7
 80112b8:	701a      	strb	r2, [r3, #0]
 80112ba:	2200      	movs	r2, #0
 80112bc:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80112c0:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = GENERIC_LEVEL_SERVER_MODEL_ID;
 80112c2:	79ba      	ldrb	r2, [r7, #6]
 80112c4:	79b9      	ldrb	r1, [r7, #6]
 80112c6:	483f      	ldr	r0, [pc, #252]	; (80113c4 <Light_Lightness_Binding+0x368>)
 80112c8:	460b      	mov	r3, r1
 80112ca:	00db      	lsls	r3, r3, #3
 80112cc:	440b      	add	r3, r1
 80112ce:	00d9      	lsls	r1, r3, #3
 80112d0:	440b      	add	r3, r1
 80112d2:	4403      	add	r3, r0
 80112d4:	3350      	adds	r3, #80	; 0x50
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	483a      	ldr	r0, [pc, #232]	; (80113c4 <Light_Lightness_Binding+0x368>)
 80112da:	3314      	adds	r3, #20
 80112dc:	0059      	lsls	r1, r3, #1
 80112de:	4613      	mov	r3, r2
 80112e0:	00db      	lsls	r3, r3, #3
 80112e2:	4413      	add	r3, r2
 80112e4:	00da      	lsls	r2, r3, #3
 80112e6:	4413      	add	r3, r2
 80112e8:	440b      	add	r3, r1
 80112ea:	4403      	add	r3, r0
 80112ec:	2200      	movs	r2, #0
 80112ee:	f042 0202 	orr.w	r2, r2, #2
 80112f2:	701a      	strb	r2, [r3, #0]
 80112f4:	2200      	movs	r2, #0
 80112f6:	f042 0210 	orr.w	r2, r2, #16
 80112fa:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 80112fc:	79ba      	ldrb	r2, [r7, #6]
 80112fe:	4831      	ldr	r0, [pc, #196]	; (80113c4 <Light_Lightness_Binding+0x368>)
 8011300:	4613      	mov	r3, r2
 8011302:	00db      	lsls	r3, r3, #3
 8011304:	4413      	add	r3, r2
 8011306:	00d9      	lsls	r1, r3, #3
 8011308:	440b      	add	r3, r1
 801130a:	4403      	add	r3, r0
 801130c:	3350      	adds	r3, #80	; 0x50
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	3301      	adds	r3, #1
 8011312:	b2d8      	uxtb	r0, r3
 8011314:	492b      	ldr	r1, [pc, #172]	; (80113c4 <Light_Lightness_Binding+0x368>)
 8011316:	4613      	mov	r3, r2
 8011318:	00db      	lsls	r3, r3, #3
 801131a:	4413      	add	r3, r2
 801131c:	00da      	lsls	r2, r3, #3
 801131e:	4413      	add	r3, r2
 8011320:	440b      	add	r3, r1
 8011322:	3350      	adds	r3, #80	; 0x50
 8011324:	4602      	mov	r2, r0
 8011326:	701a      	strb	r2, [r3, #0]
    }
  }
#endif     
   
  /* Ligtness Linear updated on its own (unsolicited change) */
  BindingDisable_LcLinearOut_LightLightnessLinear(elementIndex);
 8011328:	79bb      	ldrb	r3, [r7, #6]
 801132a:	4618      	mov	r0, r3
 801132c:	f7fc fb99 	bl	800da62 <BindingDisable_LcLinearOut_LightLightnessLinear>
  
  if((trnsnFlag != MODEL_TRANSITION_STOP) && (trnsnCmplt != MOBLE_TRUE) && (Publication1SecFlag.Transition1SecFlag == MOBLE_FALSE))
 8011330:	797b      	ldrb	r3, [r7, #5]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d071      	beq.n	801141a <Light_Lightness_Binding+0x3be>
 8011336:	7e3b      	ldrb	r3, [r7, #24]
 8011338:	2b01      	cmp	r3, #1
 801133a:	d06e      	beq.n	801141a <Light_Lightness_Binding+0x3be>
 801133c:	4b23      	ldr	r3, [pc, #140]	; (80113cc <Light_Lightness_Binding+0x370>)
 801133e:	781b      	ldrb	r3, [r3, #0]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d16a      	bne.n	801141a <Light_Lightness_Binding+0x3be>
  {
    Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= 0;
 8011344:	79ba      	ldrb	r2, [r7, #6]
 8011346:	79b9      	ldrb	r1, [r7, #6]
 8011348:	481e      	ldr	r0, [pc, #120]	; (80113c4 <Light_Lightness_Binding+0x368>)
 801134a:	460b      	mov	r3, r1
 801134c:	00db      	lsls	r3, r3, #3
 801134e:	440b      	add	r3, r1
 8011350:	00d9      	lsls	r1, r3, #3
 8011352:	440b      	add	r3, r1
 8011354:	4403      	add	r3, r0
 8011356:	3350      	adds	r3, #80	; 0x50
 8011358:	781b      	ldrb	r3, [r3, #0]
 801135a:	481a      	ldr	r0, [pc, #104]	; (80113c4 <Light_Lightness_Binding+0x368>)
 801135c:	0059      	lsls	r1, r3, #1
 801135e:	4613      	mov	r3, r2
 8011360:	00db      	lsls	r3, r3, #3
 8011362:	4413      	add	r3, r2
 8011364:	00da      	lsls	r2, r3, #3
 8011366:	4413      	add	r3, r2
 8011368:	440b      	add	r3, r1
 801136a:	4403      	add	r3, r0
 801136c:	2200      	movs	r2, #0
 801136e:	701a      	strb	r2, [r3, #0]
 8011370:	2200      	movs	r2, #0
 8011372:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = 0;
 8011374:	79ba      	ldrb	r2, [r7, #6]
 8011376:	79b9      	ldrb	r1, [r7, #6]
 8011378:	4812      	ldr	r0, [pc, #72]	; (80113c4 <Light_Lightness_Binding+0x368>)
 801137a:	460b      	mov	r3, r1
 801137c:	00db      	lsls	r3, r3, #3
 801137e:	440b      	add	r3, r1
 8011380:	00d9      	lsls	r1, r3, #3
 8011382:	440b      	add	r3, r1
 8011384:	4403      	add	r3, r0
 8011386:	3350      	adds	r3, #80	; 0x50
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	480e      	ldr	r0, [pc, #56]	; (80113c4 <Light_Lightness_Binding+0x368>)
 801138c:	3314      	adds	r3, #20
 801138e:	0059      	lsls	r1, r3, #1
 8011390:	4613      	mov	r3, r2
 8011392:	00db      	lsls	r3, r3, #3
 8011394:	4413      	add	r3, r2
 8011396:	00da      	lsls	r2, r3, #3
 8011398:	4413      	add	r3, r2
 801139a:	440b      	add	r3, r1
 801139c:	4403      	add	r3, r0
 801139e:	2200      	movs	r2, #0
 80113a0:	701a      	strb	r2, [r3, #0]
 80113a2:	2200      	movs	r2, #0
 80113a4:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].BindedStateCount = 0;
 80113a6:	79ba      	ldrb	r2, [r7, #6]
 80113a8:	4906      	ldr	r1, [pc, #24]	; (80113c4 <Light_Lightness_Binding+0x368>)
 80113aa:	4613      	mov	r3, r2
 80113ac:	00db      	lsls	r3, r3, #3
 80113ae:	4413      	add	r3, r2
 80113b0:	00da      	lsls	r2, r3, #3
 80113b2:	4413      	add	r3, r2
 80113b4:	440b      	add	r3, r1
 80113b6:	3350      	adds	r3, #80	; 0x50
 80113b8:	2200      	movs	r2, #0
 80113ba:	701a      	strb	r2, [r3, #0]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 80113bc:	2300      	movs	r3, #0
 80113be:	73fb      	strb	r3, [r7, #15]
 80113c0:	e028      	b.n	8011414 <Light_Lightness_Binding+0x3b8>
 80113c2:	bf00      	nop
 80113c4:	200045f4 	.word	0x200045f4
 80113c8:	200045c8 	.word	0x200045c8
 80113cc:	200045ac 	.word	0x200045ac
    {
      Light_PublishOpcodeList[elementIndex].Model_ID[idx] = 0;
 80113d0:	79ba      	ldrb	r2, [r7, #6]
 80113d2:	7bfb      	ldrb	r3, [r7, #15]
 80113d4:	4813      	ldr	r0, [pc, #76]	; (8011424 <Light_Lightness_Binding+0x3c8>)
 80113d6:	3314      	adds	r3, #20
 80113d8:	0059      	lsls	r1, r3, #1
 80113da:	4613      	mov	r3, r2
 80113dc:	00db      	lsls	r3, r3, #3
 80113de:	4413      	add	r3, r2
 80113e0:	00da      	lsls	r2, r3, #3
 80113e2:	4413      	add	r3, r2
 80113e4:	440b      	add	r3, r1
 80113e6:	4403      	add	r3, r0
 80113e8:	2200      	movs	r2, #0
 80113ea:	701a      	strb	r2, [r3, #0]
 80113ec:	2200      	movs	r2, #0
 80113ee:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[idx] = 0;
 80113f0:	79ba      	ldrb	r2, [r7, #6]
 80113f2:	7bfb      	ldrb	r3, [r7, #15]
 80113f4:	480b      	ldr	r0, [pc, #44]	; (8011424 <Light_Lightness_Binding+0x3c8>)
 80113f6:	0059      	lsls	r1, r3, #1
 80113f8:	4613      	mov	r3, r2
 80113fa:	00db      	lsls	r3, r3, #3
 80113fc:	4413      	add	r3, r2
 80113fe:	00da      	lsls	r2, r3, #3
 8011400:	4413      	add	r3, r2
 8011402:	440b      	add	r3, r1
 8011404:	4403      	add	r3, r0
 8011406:	2200      	movs	r2, #0
 8011408:	701a      	strb	r2, [r3, #0]
 801140a:	2200      	movs	r2, #0
 801140c:	705a      	strb	r2, [r3, #1]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 801140e:	7bfb      	ldrb	r3, [r7, #15]
 8011410:	3301      	adds	r3, #1
 8011412:	73fb      	strb	r3, [r7, #15]
 8011414:	7bfb      	ldrb	r3, [r7, #15]
 8011416:	2b13      	cmp	r3, #19
 8011418:	d9da      	bls.n	80113d0 <Light_Lightness_Binding+0x374>
    }
  }
}
 801141a:	bf00      	nop
 801141c:	3710      	adds	r7, #16
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}
 8011422:	bf00      	nop
 8011424:	200045f4 	.word	0x200045f4

08011428 <GenericOnOff_LightActualBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void.
*/
void GenericOnOff_LightActualBinding(Generic_OnOffStatus_t* onOff_param, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b086      	sub	sp, #24
 801142c:	af02      	add	r7, sp, #8
 801142e:	6078      	str	r0, [r7, #4]
 8011430:	4608      	mov	r0, r1
 8011432:	4611      	mov	r1, r2
 8011434:	461a      	mov	r2, r3
 8011436:	4603      	mov	r3, r0
 8011438:	70fb      	strb	r3, [r7, #3]
 801143a:	460b      	mov	r3, r1
 801143c:	70bb      	strb	r3, [r7, #2]
 801143e:	4613      	mov	r3, r2
 8011440:	707b      	strb	r3, [r7, #1]
  change.
  */
  /* condition is depends on the generic on off state */  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS 	
  MOBLE_RESULT result;
  if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementIndex)) == (1 << elementIndex))
 8011442:	78fb      	ldrb	r3, [r7, #3]
 8011444:	2201      	movs	r2, #1
 8011446:	fa02 f303 	lsl.w	r3, r2, r3
 801144a:	f003 0201 	and.w	r2, r3, #1
 801144e:	78fb      	ldrb	r3, [r7, #3]
 8011450:	2101      	movs	r1, #1
 8011452:	fa01 f303 	lsl.w	r3, r1, r3
 8011456:	429a      	cmp	r2, r3
 8011458:	f040 809c 	bne.w	8011594 <GenericOnOff_LightActualBinding+0x16c>
  {       
    if(onOff_param->Present_OnOff_State == 0x00)
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d10a      	bne.n	801147a <GenericOnOff_LightActualBinding+0x52>
    {
      Light_LightnessStatus[elementIndex].LightnessPresentValue16 = 0x00;    
 8011464:	78fa      	ldrb	r2, [r7, #3]
 8011466:	4952      	ldr	r1, [pc, #328]	; (80115b0 <GenericOnOff_LightActualBinding+0x188>)
 8011468:	4613      	mov	r3, r2
 801146a:	00db      	lsls	r3, r3, #3
 801146c:	4413      	add	r3, r2
 801146e:	440b      	add	r3, r1
 8011470:	2200      	movs	r2, #0
 8011472:	701a      	strb	r2, [r3, #0]
 8011474:	2200      	movs	r2, #0
 8011476:	705a      	strb	r2, [r3, #1]
 8011478:	e031      	b.n	80114de <GenericOnOff_LightActualBinding+0xb6>
    }
    else if((onOff_param->Present_OnOff_State == 0x01) && 
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	2b01      	cmp	r3, #1
 8011480:	d117      	bne.n	80114b2 <GenericOnOff_LightActualBinding+0x8a>
            (Light_LightnessDefaultParam[elementIndex].LightnessDefaultStatus == 0x00))
 8011482:	78fb      	ldrb	r3, [r7, #3]
 8011484:	4a4b      	ldr	r2, [pc, #300]	; (80115b4 <GenericOnOff_LightActualBinding+0x18c>)
 8011486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    else if((onOff_param->Present_OnOff_State == 0x01) && 
 801148a:	2b00      	cmp	r3, #0
 801148c:	d111      	bne.n	80114b2 <GenericOnOff_LightActualBinding+0x8a>
    {
      Light_LightnessStatus[elementIndex].LightnessPresentValue16 = Light_LightnessStatus[elementIndex].LightnessLastStatus;
 801148e:	78f9      	ldrb	r1, [r7, #3]
 8011490:	78fa      	ldrb	r2, [r7, #3]
 8011492:	4847      	ldr	r0, [pc, #284]	; (80115b0 <GenericOnOff_LightActualBinding+0x188>)
 8011494:	460b      	mov	r3, r1
 8011496:	00db      	lsls	r3, r3, #3
 8011498:	440b      	add	r3, r1
 801149a:	4403      	add	r3, r0
 801149c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80114a0:	b298      	uxth	r0, r3
 80114a2:	4943      	ldr	r1, [pc, #268]	; (80115b0 <GenericOnOff_LightActualBinding+0x188>)
 80114a4:	4613      	mov	r3, r2
 80114a6:	00db      	lsls	r3, r3, #3
 80114a8:	4413      	add	r3, r2
 80114aa:	440b      	add	r3, r1
 80114ac:	4602      	mov	r2, r0
 80114ae:	801a      	strh	r2, [r3, #0]
 80114b0:	e015      	b.n	80114de <GenericOnOff_LightActualBinding+0xb6>
    }
    else if((onOff_param->Present_OnOff_State == 0x01) && 
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	2b01      	cmp	r3, #1
 80114b8:	d111      	bne.n	80114de <GenericOnOff_LightActualBinding+0xb6>
            (Light_LightnessDefaultParam[elementIndex].LightnessDefaultStatus != 0x000))
 80114ba:	78fb      	ldrb	r3, [r7, #3]
 80114bc:	4a3d      	ldr	r2, [pc, #244]	; (80115b4 <GenericOnOff_LightActualBinding+0x18c>)
 80114be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    else if((onOff_param->Present_OnOff_State == 0x01) && 
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d00b      	beq.n	80114de <GenericOnOff_LightActualBinding+0xb6>
    {
      Light_LightnessStatus[elementIndex].LightnessPresentValue16 = Light_LightnessDefaultParam[elementIndex].LightnessDefaultStatus;
 80114c6:	78fb      	ldrb	r3, [r7, #3]
 80114c8:	78fa      	ldrb	r2, [r7, #3]
 80114ca:	493a      	ldr	r1, [pc, #232]	; (80115b4 <GenericOnOff_LightActualBinding+0x18c>)
 80114cc:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80114d0:	4937      	ldr	r1, [pc, #220]	; (80115b0 <GenericOnOff_LightActualBinding+0x188>)
 80114d2:	4613      	mov	r3, r2
 80114d4:	00db      	lsls	r3, r3, #3
 80114d6:	4413      	add	r3, r2
 80114d8:	440b      	add	r3, r1
 80114da:	4602      	mov	r2, r0
 80114dc:	801a      	strh	r2, [r3, #0]
    {
      /* no condition to Execute */
    }
    TRACE_M(TF_LIGHT_M, "Generic On Off binding with Light Actual \r\n"); 

    result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_SET_UNACK ,elementIndex); 
 80114de:	78fb      	ldrb	r3, [r7, #3]
 80114e0:	4619      	mov	r1, r3
 80114e2:	f248 204d 	movw	r0, #33357	; 0x824d
 80114e6:	f000 fb3d 	bl	8011b64 <Chk_OpcodePresent>
 80114ea:	4603      	mov	r3, r0
 80114ec:	73fb      	strb	r3, [r7, #15]
  
    if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 80114ee:	7bfb      	ldrb	r3, [r7, #15]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d002      	beq.n	80114fa <GenericOnOff_LightActualBinding+0xd2>
 80114f4:	787b      	ldrb	r3, [r7, #1]
 80114f6:	2b01      	cmp	r3, #1
 80114f8:	d14c      	bne.n	8011594 <GenericOnOff_LightActualBinding+0x16c>
    {
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_SET_UNACK;
 80114fa:	78fa      	ldrb	r2, [r7, #3]
 80114fc:	78f9      	ldrb	r1, [r7, #3]
 80114fe:	482e      	ldr	r0, [pc, #184]	; (80115b8 <GenericOnOff_LightActualBinding+0x190>)
 8011500:	460b      	mov	r3, r1
 8011502:	00db      	lsls	r3, r3, #3
 8011504:	440b      	add	r3, r1
 8011506:	00d9      	lsls	r1, r3, #3
 8011508:	440b      	add	r3, r1
 801150a:	4403      	add	r3, r0
 801150c:	3350      	adds	r3, #80	; 0x50
 801150e:	781b      	ldrb	r3, [r3, #0]
 8011510:	4829      	ldr	r0, [pc, #164]	; (80115b8 <GenericOnOff_LightActualBinding+0x190>)
 8011512:	0059      	lsls	r1, r3, #1
 8011514:	4613      	mov	r3, r2
 8011516:	00db      	lsls	r3, r3, #3
 8011518:	4413      	add	r3, r2
 801151a:	00da      	lsls	r2, r3, #3
 801151c:	4413      	add	r3, r2
 801151e:	440b      	add	r3, r1
 8011520:	4403      	add	r3, r0
 8011522:	2200      	movs	r2, #0
 8011524:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8011528:	701a      	strb	r2, [r3, #0]
 801152a:	2200      	movs	r2, #0
 801152c:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8011530:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 8011532:	78fa      	ldrb	r2, [r7, #3]
 8011534:	78f9      	ldrb	r1, [r7, #3]
 8011536:	4820      	ldr	r0, [pc, #128]	; (80115b8 <GenericOnOff_LightActualBinding+0x190>)
 8011538:	460b      	mov	r3, r1
 801153a:	00db      	lsls	r3, r3, #3
 801153c:	440b      	add	r3, r1
 801153e:	00d9      	lsls	r1, r3, #3
 8011540:	440b      	add	r3, r1
 8011542:	4403      	add	r3, r0
 8011544:	3350      	adds	r3, #80	; 0x50
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	481b      	ldr	r0, [pc, #108]	; (80115b8 <GenericOnOff_LightActualBinding+0x190>)
 801154a:	3314      	adds	r3, #20
 801154c:	0059      	lsls	r1, r3, #1
 801154e:	4613      	mov	r3, r2
 8011550:	00db      	lsls	r3, r3, #3
 8011552:	4413      	add	r3, r2
 8011554:	00da      	lsls	r2, r3, #3
 8011556:	4413      	add	r3, r2
 8011558:	440b      	add	r3, r1
 801155a:	4403      	add	r3, r0
 801155c:	2200      	movs	r2, #0
 801155e:	701a      	strb	r2, [r3, #0]
 8011560:	2200      	movs	r2, #0
 8011562:	f042 0213 	orr.w	r2, r2, #19
 8011566:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 8011568:	78fa      	ldrb	r2, [r7, #3]
 801156a:	4813      	ldr	r0, [pc, #76]	; (80115b8 <GenericOnOff_LightActualBinding+0x190>)
 801156c:	4613      	mov	r3, r2
 801156e:	00db      	lsls	r3, r3, #3
 8011570:	4413      	add	r3, r2
 8011572:	00d9      	lsls	r1, r3, #3
 8011574:	440b      	add	r3, r1
 8011576:	4403      	add	r3, r0
 8011578:	3350      	adds	r3, #80	; 0x50
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	3301      	adds	r3, #1
 801157e:	b2d8      	uxtb	r0, r3
 8011580:	490d      	ldr	r1, [pc, #52]	; (80115b8 <GenericOnOff_LightActualBinding+0x190>)
 8011582:	4613      	mov	r3, r2
 8011584:	00db      	lsls	r3, r3, #3
 8011586:	4413      	add	r3, r2
 8011588:	00da      	lsls	r2, r3, #3
 801158a:	4413      	add	r3, r2
 801158c:	440b      	add	r3, r1
 801158e:	3350      	adds	r3, #80	; 0x50
 8011590:	4602      	mov	r2, r0
 8011592:	701a      	strb	r2, [r3, #0]
  
  /*As Generic on off changes, it will change the value of the light linear due to change in the light lightness 
    value due to binding of the states.
 */
   
  Light_Lightness_Binding(BINDING_GENERIC_ON_OFF_SET, 0, elementIndex,trnsnFlag,trnsnCmplt);
 8011594:	78b9      	ldrb	r1, [r7, #2]
 8011596:	78fa      	ldrb	r2, [r7, #3]
 8011598:	787b      	ldrb	r3, [r7, #1]
 801159a:	9300      	str	r3, [sp, #0]
 801159c:	460b      	mov	r3, r1
 801159e:	2100      	movs	r1, #0
 80115a0:	2000      	movs	r0, #0
 80115a2:	f7ff fd5b 	bl	801105c <Light_Lightness_Binding>
}
 80115a6:	bf00      	nop
 80115a8:	3710      	adds	r7, #16
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	200045c8 	.word	0x200045c8
 80115b4:	200045d4 	.word	0x200045d4
 80115b8:	200045f4 	.word	0x200045f4

080115bc <GenericLevel_LightBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void.
*/
void GenericLevel_LightBinding(Generic_LevelStatus_t* gLevel_param , MOBLEUINT8 flag, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{ 
 80115bc:	b580      	push	{r7, lr}
 80115be:	b084      	sub	sp, #16
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	4608      	mov	r0, r1
 80115c6:	4611      	mov	r1, r2
 80115c8:	461a      	mov	r2, r3
 80115ca:	4603      	mov	r3, r0
 80115cc:	70fb      	strb	r3, [r7, #3]
 80115ce:	460b      	mov	r3, r1
 80115d0:	70bb      	strb	r3, [r7, #2]
 80115d2:	4613      	mov	r3, r2
 80115d4:	707b      	strb	r3, [r7, #1]
  As generic Level changes, the actual lightness value will
  change.
  */
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS    

  if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementIndex)) == (1 << elementIndex))
 80115d6:	78bb      	ldrb	r3, [r7, #2]
 80115d8:	2201      	movs	r2, #1
 80115da:	fa02 f303 	lsl.w	r3, r2, r3
 80115de:	f003 0201 	and.w	r2, r3, #1
 80115e2:	78bb      	ldrb	r3, [r7, #2]
 80115e4:	2101      	movs	r1, #1
 80115e6:	fa01 f303 	lsl.w	r3, r1, r3
 80115ea:	429a      	cmp	r2, r3
 80115ec:	f040 80ca 	bne.w	8011784 <GenericLevel_LightBinding+0x1c8>
  {
    Light_LightnessStatus[elementIndex].LightnessPresentValue16 = gLevel_param->Present_Level16 + 32768;   
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115f6:	b21b      	sxth	r3, r3
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	78ba      	ldrb	r2, [r7, #2]
 80115fc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8011600:	b298      	uxth	r0, r3
 8011602:	4999      	ldr	r1, [pc, #612]	; (8011868 <GenericLevel_LightBinding+0x2ac>)
 8011604:	4613      	mov	r3, r2
 8011606:	00db      	lsls	r3, r3, #3
 8011608:	4413      	add	r3, r2
 801160a:	440b      	add	r3, r1
 801160c:	4602      	mov	r2, r0
 801160e:	801a      	strh	r2, [r3, #0]
  
    result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_SET_UNACK ,elementIndex); 
 8011610:	78bb      	ldrb	r3, [r7, #2]
 8011612:	4619      	mov	r1, r3
 8011614:	f248 204d 	movw	r0, #33357	; 0x824d
 8011618:	f000 faa4 	bl	8011b64 <Chk_OpcodePresent>
 801161c:	4603      	mov	r3, r0
 801161e:	73bb      	strb	r3, [r7, #14]
    
    if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 8011620:	7bbb      	ldrb	r3, [r7, #14]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d002      	beq.n	801162c <GenericLevel_LightBinding+0x70>
 8011626:	7e3b      	ldrb	r3, [r7, #24]
 8011628:	2b01      	cmp	r3, #1
 801162a:	d14c      	bne.n	80116c6 <GenericLevel_LightBinding+0x10a>
    {
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_SET_UNACK;
 801162c:	78ba      	ldrb	r2, [r7, #2]
 801162e:	78b9      	ldrb	r1, [r7, #2]
 8011630:	488e      	ldr	r0, [pc, #568]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 8011632:	460b      	mov	r3, r1
 8011634:	00db      	lsls	r3, r3, #3
 8011636:	440b      	add	r3, r1
 8011638:	00d9      	lsls	r1, r3, #3
 801163a:	440b      	add	r3, r1
 801163c:	4403      	add	r3, r0
 801163e:	3350      	adds	r3, #80	; 0x50
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	488a      	ldr	r0, [pc, #552]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 8011644:	0059      	lsls	r1, r3, #1
 8011646:	4613      	mov	r3, r2
 8011648:	00db      	lsls	r3, r3, #3
 801164a:	4413      	add	r3, r2
 801164c:	00da      	lsls	r2, r3, #3
 801164e:	4413      	add	r3, r2
 8011650:	440b      	add	r3, r1
 8011652:	4403      	add	r3, r0
 8011654:	2200      	movs	r2, #0
 8011656:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 801165a:	701a      	strb	r2, [r3, #0]
 801165c:	2200      	movs	r2, #0
 801165e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8011662:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 8011664:	78ba      	ldrb	r2, [r7, #2]
 8011666:	78b9      	ldrb	r1, [r7, #2]
 8011668:	4880      	ldr	r0, [pc, #512]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 801166a:	460b      	mov	r3, r1
 801166c:	00db      	lsls	r3, r3, #3
 801166e:	440b      	add	r3, r1
 8011670:	00d9      	lsls	r1, r3, #3
 8011672:	440b      	add	r3, r1
 8011674:	4403      	add	r3, r0
 8011676:	3350      	adds	r3, #80	; 0x50
 8011678:	781b      	ldrb	r3, [r3, #0]
 801167a:	487c      	ldr	r0, [pc, #496]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 801167c:	3314      	adds	r3, #20
 801167e:	0059      	lsls	r1, r3, #1
 8011680:	4613      	mov	r3, r2
 8011682:	00db      	lsls	r3, r3, #3
 8011684:	4413      	add	r3, r2
 8011686:	00da      	lsls	r2, r3, #3
 8011688:	4413      	add	r3, r2
 801168a:	440b      	add	r3, r1
 801168c:	4403      	add	r3, r0
 801168e:	2200      	movs	r2, #0
 8011690:	701a      	strb	r2, [r3, #0]
 8011692:	2200      	movs	r2, #0
 8011694:	f042 0213 	orr.w	r2, r2, #19
 8011698:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 801169a:	78ba      	ldrb	r2, [r7, #2]
 801169c:	4873      	ldr	r0, [pc, #460]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 801169e:	4613      	mov	r3, r2
 80116a0:	00db      	lsls	r3, r3, #3
 80116a2:	4413      	add	r3, r2
 80116a4:	00d9      	lsls	r1, r3, #3
 80116a6:	440b      	add	r3, r1
 80116a8:	4403      	add	r3, r0
 80116aa:	3350      	adds	r3, #80	; 0x50
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	3301      	adds	r3, #1
 80116b0:	b2d8      	uxtb	r0, r3
 80116b2:	496e      	ldr	r1, [pc, #440]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 80116b4:	4613      	mov	r3, r2
 80116b6:	00db      	lsls	r3, r3, #3
 80116b8:	4413      	add	r3, r2
 80116ba:	00da      	lsls	r2, r3, #3
 80116bc:	4413      	add	r3, r2
 80116be:	440b      	add	r3, r1
 80116c0:	3350      	adds	r3, #80	; 0x50
 80116c2:	4602      	mov	r2, r0
 80116c4:	701a      	strb	r2, [r3, #0]
    }
  
    /*As Generic Level changes, it will change the value of the light linear due to change in the light lightness 
      value due to binding of the states.
    */
    Light_Actual_LinearBinding(elementIndex);
 80116c6:	78bb      	ldrb	r3, [r7, #2]
 80116c8:	4618      	mov	r0, r3
 80116ca:	f000 f8d5 	bl	8011878 <Light_Actual_LinearBinding>
  
    result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_LINEAR_SET_UNACK ,elementIndex); 
 80116ce:	78bb      	ldrb	r3, [r7, #2]
 80116d0:	4619      	mov	r1, r3
 80116d2:	f248 2051 	movw	r0, #33361	; 0x8251
 80116d6:	f000 fa45 	bl	8011b64 <Chk_OpcodePresent>
 80116da:	4603      	mov	r3, r0
 80116dc:	73bb      	strb	r3, [r7, #14]
    
    if(result == MOBLE_RESULT_SUCCESS || (trnsnCmplt == MOBLE_TRUE))
 80116de:	7bbb      	ldrb	r3, [r7, #14]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d002      	beq.n	80116ea <GenericLevel_LightBinding+0x12e>
 80116e4:	7e3b      	ldrb	r3, [r7, #24]
 80116e6:	2b01      	cmp	r3, #1
 80116e8:	d14c      	bne.n	8011784 <GenericLevel_LightBinding+0x1c8>
    {
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_LINEAR_SET_UNACK;
 80116ea:	78ba      	ldrb	r2, [r7, #2]
 80116ec:	78b9      	ldrb	r1, [r7, #2]
 80116ee:	485f      	ldr	r0, [pc, #380]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 80116f0:	460b      	mov	r3, r1
 80116f2:	00db      	lsls	r3, r3, #3
 80116f4:	440b      	add	r3, r1
 80116f6:	00d9      	lsls	r1, r3, #3
 80116f8:	440b      	add	r3, r1
 80116fa:	4403      	add	r3, r0
 80116fc:	3350      	adds	r3, #80	; 0x50
 80116fe:	781b      	ldrb	r3, [r3, #0]
 8011700:	485a      	ldr	r0, [pc, #360]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 8011702:	0059      	lsls	r1, r3, #1
 8011704:	4613      	mov	r3, r2
 8011706:	00db      	lsls	r3, r3, #3
 8011708:	4413      	add	r3, r2
 801170a:	00da      	lsls	r2, r3, #3
 801170c:	4413      	add	r3, r2
 801170e:	440b      	add	r3, r1
 8011710:	4403      	add	r3, r0
 8011712:	2200      	movs	r2, #0
 8011714:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 8011718:	701a      	strb	r2, [r3, #0]
 801171a:	2200      	movs	r2, #0
 801171c:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8011720:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 8011722:	78ba      	ldrb	r2, [r7, #2]
 8011724:	78b9      	ldrb	r1, [r7, #2]
 8011726:	4851      	ldr	r0, [pc, #324]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 8011728:	460b      	mov	r3, r1
 801172a:	00db      	lsls	r3, r3, #3
 801172c:	440b      	add	r3, r1
 801172e:	00d9      	lsls	r1, r3, #3
 8011730:	440b      	add	r3, r1
 8011732:	4403      	add	r3, r0
 8011734:	3350      	adds	r3, #80	; 0x50
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	484c      	ldr	r0, [pc, #304]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 801173a:	3314      	adds	r3, #20
 801173c:	0059      	lsls	r1, r3, #1
 801173e:	4613      	mov	r3, r2
 8011740:	00db      	lsls	r3, r3, #3
 8011742:	4413      	add	r3, r2
 8011744:	00da      	lsls	r2, r3, #3
 8011746:	4413      	add	r3, r2
 8011748:	440b      	add	r3, r1
 801174a:	4403      	add	r3, r0
 801174c:	2200      	movs	r2, #0
 801174e:	701a      	strb	r2, [r3, #0]
 8011750:	2200      	movs	r2, #0
 8011752:	f042 0213 	orr.w	r2, r2, #19
 8011756:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 8011758:	78ba      	ldrb	r2, [r7, #2]
 801175a:	4844      	ldr	r0, [pc, #272]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 801175c:	4613      	mov	r3, r2
 801175e:	00db      	lsls	r3, r3, #3
 8011760:	4413      	add	r3, r2
 8011762:	00d9      	lsls	r1, r3, #3
 8011764:	440b      	add	r3, r1
 8011766:	4403      	add	r3, r0
 8011768:	3350      	adds	r3, #80	; 0x50
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	3301      	adds	r3, #1
 801176e:	b2d8      	uxtb	r0, r3
 8011770:	493e      	ldr	r1, [pc, #248]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 8011772:	4613      	mov	r3, r2
 8011774:	00db      	lsls	r3, r3, #3
 8011776:	4413      	add	r3, r2
 8011778:	00da      	lsls	r2, r3, #3
 801177a:	4413      	add	r3, r2
 801177c:	440b      	add	r3, r1
 801177e:	3350      	adds	r3, #80	; 0x50
 8011780:	4602      	mov	r2, r0
 8011782:	701a      	strb	r2, [r3, #0]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
      }
    }
  }
#endif    
  if((trnsnFlag != MODEL_TRANSITION_STOP) && (trnsnCmplt != MOBLE_TRUE) && (Publication1SecFlag.Transition1SecFlag == MOBLE_FALSE))
 8011784:	787b      	ldrb	r3, [r7, #1]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d06a      	beq.n	8011860 <GenericLevel_LightBinding+0x2a4>
 801178a:	7e3b      	ldrb	r3, [r7, #24]
 801178c:	2b01      	cmp	r3, #1
 801178e:	d067      	beq.n	8011860 <GenericLevel_LightBinding+0x2a4>
 8011790:	4b37      	ldr	r3, [pc, #220]	; (8011870 <GenericLevel_LightBinding+0x2b4>)
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d163      	bne.n	8011860 <GenericLevel_LightBinding+0x2a4>
  {
    Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= 0;
 8011798:	78ba      	ldrb	r2, [r7, #2]
 801179a:	78b9      	ldrb	r1, [r7, #2]
 801179c:	4833      	ldr	r0, [pc, #204]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 801179e:	460b      	mov	r3, r1
 80117a0:	00db      	lsls	r3, r3, #3
 80117a2:	440b      	add	r3, r1
 80117a4:	00d9      	lsls	r1, r3, #3
 80117a6:	440b      	add	r3, r1
 80117a8:	4403      	add	r3, r0
 80117aa:	3350      	adds	r3, #80	; 0x50
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	482f      	ldr	r0, [pc, #188]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 80117b0:	0059      	lsls	r1, r3, #1
 80117b2:	4613      	mov	r3, r2
 80117b4:	00db      	lsls	r3, r3, #3
 80117b6:	4413      	add	r3, r2
 80117b8:	00da      	lsls	r2, r3, #3
 80117ba:	4413      	add	r3, r2
 80117bc:	440b      	add	r3, r1
 80117be:	4403      	add	r3, r0
 80117c0:	2200      	movs	r2, #0
 80117c2:	701a      	strb	r2, [r3, #0]
 80117c4:	2200      	movs	r2, #0
 80117c6:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = 0;
 80117c8:	78ba      	ldrb	r2, [r7, #2]
 80117ca:	78b9      	ldrb	r1, [r7, #2]
 80117cc:	4827      	ldr	r0, [pc, #156]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 80117ce:	460b      	mov	r3, r1
 80117d0:	00db      	lsls	r3, r3, #3
 80117d2:	440b      	add	r3, r1
 80117d4:	00d9      	lsls	r1, r3, #3
 80117d6:	440b      	add	r3, r1
 80117d8:	4403      	add	r3, r0
 80117da:	3350      	adds	r3, #80	; 0x50
 80117dc:	781b      	ldrb	r3, [r3, #0]
 80117de:	4823      	ldr	r0, [pc, #140]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 80117e0:	3314      	adds	r3, #20
 80117e2:	0059      	lsls	r1, r3, #1
 80117e4:	4613      	mov	r3, r2
 80117e6:	00db      	lsls	r3, r3, #3
 80117e8:	4413      	add	r3, r2
 80117ea:	00da      	lsls	r2, r3, #3
 80117ec:	4413      	add	r3, r2
 80117ee:	440b      	add	r3, r1
 80117f0:	4403      	add	r3, r0
 80117f2:	2200      	movs	r2, #0
 80117f4:	701a      	strb	r2, [r3, #0]
 80117f6:	2200      	movs	r2, #0
 80117f8:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].BindedStateCount = 0;
 80117fa:	78ba      	ldrb	r2, [r7, #2]
 80117fc:	491b      	ldr	r1, [pc, #108]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 80117fe:	4613      	mov	r3, r2
 8011800:	00db      	lsls	r3, r3, #3
 8011802:	4413      	add	r3, r2
 8011804:	00da      	lsls	r2, r3, #3
 8011806:	4413      	add	r3, r2
 8011808:	440b      	add	r3, r1
 801180a:	3350      	adds	r3, #80	; 0x50
 801180c:	2200      	movs	r2, #0
 801180e:	701a      	strb	r2, [r3, #0]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 8011810:	2300      	movs	r3, #0
 8011812:	73fb      	strb	r3, [r7, #15]
 8011814:	e021      	b.n	801185a <GenericLevel_LightBinding+0x29e>
    {
      Light_PublishOpcodeList[elementIndex].Model_ID[idx] = 0;
 8011816:	78ba      	ldrb	r2, [r7, #2]
 8011818:	7bfb      	ldrb	r3, [r7, #15]
 801181a:	4814      	ldr	r0, [pc, #80]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 801181c:	3314      	adds	r3, #20
 801181e:	0059      	lsls	r1, r3, #1
 8011820:	4613      	mov	r3, r2
 8011822:	00db      	lsls	r3, r3, #3
 8011824:	4413      	add	r3, r2
 8011826:	00da      	lsls	r2, r3, #3
 8011828:	4413      	add	r3, r2
 801182a:	440b      	add	r3, r1
 801182c:	4403      	add	r3, r0
 801182e:	2200      	movs	r2, #0
 8011830:	701a      	strb	r2, [r3, #0]
 8011832:	2200      	movs	r2, #0
 8011834:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[idx] = 0;
 8011836:	78ba      	ldrb	r2, [r7, #2]
 8011838:	7bfb      	ldrb	r3, [r7, #15]
 801183a:	480c      	ldr	r0, [pc, #48]	; (801186c <GenericLevel_LightBinding+0x2b0>)
 801183c:	0059      	lsls	r1, r3, #1
 801183e:	4613      	mov	r3, r2
 8011840:	00db      	lsls	r3, r3, #3
 8011842:	4413      	add	r3, r2
 8011844:	00da      	lsls	r2, r3, #3
 8011846:	4413      	add	r3, r2
 8011848:	440b      	add	r3, r1
 801184a:	4403      	add	r3, r0
 801184c:	2200      	movs	r2, #0
 801184e:	701a      	strb	r2, [r3, #0]
 8011850:	2200      	movs	r2, #0
 8011852:	705a      	strb	r2, [r3, #1]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 8011854:	7bfb      	ldrb	r3, [r7, #15]
 8011856:	3301      	adds	r3, #1
 8011858:	73fb      	strb	r3, [r7, #15]
 801185a:	7bfb      	ldrb	r3, [r7, #15]
 801185c:	2b13      	cmp	r3, #19
 801185e:	d9da      	bls.n	8011816 <GenericLevel_LightBinding+0x25a>
    }
  } 
}
 8011860:	bf00      	nop
 8011862:	3710      	adds	r7, #16
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	200045c8 	.word	0x200045c8
 801186c:	200045f4 	.word	0x200045f4
 8011870:	200045ac 	.word	0x200045ac
 8011874:	00000000 	.word	0x00000000

08011878 <Light_Actual_LinearBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return MOBLEUINT16
*/
MOBLEUINT16 Light_Actual_LinearBinding(MOBLEUINT8 elementIndex)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b084      	sub	sp, #16
 801187c:	af00      	add	r7, sp, #0
 801187e:	4603      	mov	r3, r0
 8011880:	71fb      	strb	r3, [r7, #7]
  float productValue;
  
  productValue = pow((((float)Light_LightnessStatus[elementIndex].LightnessPresentValue16)/65535) , 2);
 8011882:	79fa      	ldrb	r2, [r7, #7]
 8011884:	4924      	ldr	r1, [pc, #144]	; (8011918 <Light_Actual_LinearBinding+0xa0>)
 8011886:	4613      	mov	r3, r2
 8011888:	00db      	lsls	r3, r3, #3
 801188a:	4413      	add	r3, r2
 801188c:	440b      	add	r3, r1
 801188e:	881b      	ldrh	r3, [r3, #0]
 8011890:	b29b      	uxth	r3, r3
 8011892:	ee07 3a90 	vmov	s15, r3
 8011896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801189a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801191c <Light_Actual_LinearBinding+0xa4>
 801189e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80118a2:	ee16 0a90 	vmov	r0, s13
 80118a6:	f7ee fe27 	bl	80004f8 <__aeabi_f2d>
 80118aa:	4602      	mov	r2, r0
 80118ac:	460b      	mov	r3, r1
 80118ae:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8011910 <Light_Actual_LinearBinding+0x98>
 80118b2:	ec43 2b10 	vmov	d0, r2, r3
 80118b6:	f01a fbfd 	bl	802c0b4 <pow>
 80118ba:	ec53 2b10 	vmov	r2, r3, d0
 80118be:	4610      	mov	r0, r2
 80118c0:	4619      	mov	r1, r3
 80118c2:	f7ef f949 	bl	8000b58 <__aeabi_d2f>
 80118c6:	4603      	mov	r3, r0
 80118c8:	60fb      	str	r3, [r7, #12]
  Light_LightnessStatus[elementIndex].LinearPresentValue16 = (MOBLEUINT16)(65535 * productValue);
 80118ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80118ce:	ed9f 7a13 	vldr	s14, [pc, #76]	; 801191c <Light_Actual_LinearBinding+0xa4>
 80118d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80118d6:	79fa      	ldrb	r2, [r7, #7]
 80118d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80118dc:	ee17 3a90 	vmov	r3, s15
 80118e0:	b298      	uxth	r0, r3
 80118e2:	490d      	ldr	r1, [pc, #52]	; (8011918 <Light_Actual_LinearBinding+0xa0>)
 80118e4:	4613      	mov	r3, r2
 80118e6:	00db      	lsls	r3, r3, #3
 80118e8:	4413      	add	r3, r2
 80118ea:	440b      	add	r3, r1
 80118ec:	3302      	adds	r3, #2
 80118ee:	4602      	mov	r2, r0
 80118f0:	801a      	strh	r2, [r3, #0]
 
  return Light_LightnessStatus[elementIndex].LinearPresentValue16; 
 80118f2:	79fa      	ldrb	r2, [r7, #7]
 80118f4:	4908      	ldr	r1, [pc, #32]	; (8011918 <Light_Actual_LinearBinding+0xa0>)
 80118f6:	4613      	mov	r3, r2
 80118f8:	00db      	lsls	r3, r3, #3
 80118fa:	4413      	add	r3, r2
 80118fc:	440b      	add	r3, r1
 80118fe:	3302      	adds	r3, #2
 8011900:	881b      	ldrh	r3, [r3, #0]
 8011902:	b29b      	uxth	r3, r3
}
 8011904:	4618      	mov	r0, r3
 8011906:	3710      	adds	r7, #16
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}
 801190c:	f3af 8000 	nop.w
 8011910:	00000000 	.word	0x00000000
 8011914:	40000000 	.word	0x40000000
 8011918:	200045c8 	.word	0x200045c8
 801191c:	477fff00 	.word	0x477fff00

08011920 <Light_Linear_ActualBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return MOBLEUINT16
*/
MOBLEUINT16 Light_Linear_ActualBinding(MOBLEUINT32 length, MOBLEUINT8 elementIndex)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b084      	sub	sp, #16
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	460b      	mov	r3, r1
 801192a:	70fb      	strb	r3, [r7, #3]
  /*
  6.1.2.1.1 - actual lightness = 655354 * squareroot(linear lightness/ 655354).
  */
  float productValue;
  
  if(length <= 3)
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2b03      	cmp	r3, #3
 8011930:	d83e      	bhi.n	80119b0 <Light_Linear_ActualBinding+0x90>
  {
    productValue = sqrt((((float)Light_LightnessStatus[elementIndex].LinearPresentValue16) / 65535));
 8011932:	78fa      	ldrb	r2, [r7, #3]
 8011934:	494a      	ldr	r1, [pc, #296]	; (8011a60 <Light_Linear_ActualBinding+0x140>)
 8011936:	4613      	mov	r3, r2
 8011938:	00db      	lsls	r3, r3, #3
 801193a:	4413      	add	r3, r2
 801193c:	440b      	add	r3, r1
 801193e:	3302      	adds	r3, #2
 8011940:	881b      	ldrh	r3, [r3, #0]
 8011942:	b29b      	uxth	r3, r3
 8011944:	ee07 3a90 	vmov	s15, r3
 8011948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801194c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8011a64 <Light_Linear_ActualBinding+0x144>
 8011950:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8011954:	ee16 0a90 	vmov	r0, s13
 8011958:	f7ee fdce 	bl	80004f8 <__aeabi_f2d>
 801195c:	4602      	mov	r2, r0
 801195e:	460b      	mov	r3, r1
 8011960:	ec43 2b10 	vmov	d0, r2, r3
 8011964:	f01a fc16 	bl	802c194 <sqrt>
 8011968:	ec53 2b10 	vmov	r2, r3, d0
 801196c:	4610      	mov	r0, r2
 801196e:	4619      	mov	r1, r3
 8011970:	f7ef f8f2 	bl	8000b58 <__aeabi_d2f>
 8011974:	4603      	mov	r3, r0
 8011976:	60fb      	str	r3, [r7, #12]
    Light_LightnessStatus[elementIndex].LightnessPresentValue16 = (MOBLEUINT16)(65535 * productValue);      
 8011978:	edd7 7a03 	vldr	s15, [r7, #12]
 801197c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8011a64 <Light_Linear_ActualBinding+0x144>
 8011980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011984:	78fa      	ldrb	r2, [r7, #3]
 8011986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801198a:	ee17 3a90 	vmov	r3, s15
 801198e:	b298      	uxth	r0, r3
 8011990:	4933      	ldr	r1, [pc, #204]	; (8011a60 <Light_Linear_ActualBinding+0x140>)
 8011992:	4613      	mov	r3, r2
 8011994:	00db      	lsls	r3, r3, #3
 8011996:	4413      	add	r3, r2
 8011998:	440b      	add	r3, r1
 801199a:	4602      	mov	r2, r0
 801199c:	801a      	strh	r2, [r3, #0]
    
    return Light_LightnessStatus[elementIndex].LightnessPresentValue16;  
 801199e:	78fa      	ldrb	r2, [r7, #3]
 80119a0:	492f      	ldr	r1, [pc, #188]	; (8011a60 <Light_Linear_ActualBinding+0x140>)
 80119a2:	4613      	mov	r3, r2
 80119a4:	00db      	lsls	r3, r3, #3
 80119a6:	4413      	add	r3, r2
 80119a8:	440b      	add	r3, r1
 80119aa:	881b      	ldrh	r3, [r3, #0]
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	e053      	b.n	8011a58 <Light_Linear_ActualBinding+0x138>
  }
  else
  {
    productValue = sqrt((((float)Light_LightnessStatus[elementIndex].TargetValue16) / 65535));
 80119b0:	78fa      	ldrb	r2, [r7, #3]
 80119b2:	492b      	ldr	r1, [pc, #172]	; (8011a60 <Light_Linear_ActualBinding+0x140>)
 80119b4:	4613      	mov	r3, r2
 80119b6:	00db      	lsls	r3, r3, #3
 80119b8:	4413      	add	r3, r2
 80119ba:	440b      	add	r3, r1
 80119bc:	3304      	adds	r3, #4
 80119be:	881b      	ldrh	r3, [r3, #0]
 80119c0:	b29b      	uxth	r3, r3
 80119c2:	ee07 3a90 	vmov	s15, r3
 80119c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80119ca:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8011a64 <Light_Linear_ActualBinding+0x144>
 80119ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80119d2:	ee16 0a90 	vmov	r0, s13
 80119d6:	f7ee fd8f 	bl	80004f8 <__aeabi_f2d>
 80119da:	4602      	mov	r2, r0
 80119dc:	460b      	mov	r3, r1
 80119de:	ec43 2b10 	vmov	d0, r2, r3
 80119e2:	f01a fbd7 	bl	802c194 <sqrt>
 80119e6:	ec53 2b10 	vmov	r2, r3, d0
 80119ea:	4610      	mov	r0, r2
 80119ec:	4619      	mov	r1, r3
 80119ee:	f7ef f8b3 	bl	8000b58 <__aeabi_d2f>
 80119f2:	4603      	mov	r3, r0
 80119f4:	60fb      	str	r3, [r7, #12]
    Light_LightnessStatus[elementIndex].TargetValue16 = (MOBLEUINT16)(65535 * productValue);
 80119f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80119fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8011a64 <Light_Linear_ActualBinding+0x144>
 80119fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a02:	78fa      	ldrb	r2, [r7, #3]
 8011a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a08:	ee17 3a90 	vmov	r3, s15
 8011a0c:	b298      	uxth	r0, r3
 8011a0e:	4914      	ldr	r1, [pc, #80]	; (8011a60 <Light_Linear_ActualBinding+0x140>)
 8011a10:	4613      	mov	r3, r2
 8011a12:	00db      	lsls	r3, r3, #3
 8011a14:	4413      	add	r3, r2
 8011a16:	440b      	add	r3, r1
 8011a18:	3304      	adds	r3, #4
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	801a      	strh	r2, [r3, #0]
    Light_TemporaryStatus[elementIndex].TargetParam_1 = Light_LightnessStatus[elementIndex].TargetValue16;   
 8011a1e:	78f9      	ldrb	r1, [r7, #3]
 8011a20:	78fa      	ldrb	r2, [r7, #3]
 8011a22:	480f      	ldr	r0, [pc, #60]	; (8011a60 <Light_Linear_ActualBinding+0x140>)
 8011a24:	460b      	mov	r3, r1
 8011a26:	00db      	lsls	r3, r3, #3
 8011a28:	440b      	add	r3, r1
 8011a2a:	4403      	add	r3, r0
 8011a2c:	3304      	adds	r3, #4
 8011a2e:	881b      	ldrh	r3, [r3, #0]
 8011a30:	b298      	uxth	r0, r3
 8011a32:	490d      	ldr	r1, [pc, #52]	; (8011a68 <Light_Linear_ActualBinding+0x148>)
 8011a34:	4613      	mov	r3, r2
 8011a36:	005b      	lsls	r3, r3, #1
 8011a38:	4413      	add	r3, r2
 8011a3a:	009b      	lsls	r3, r3, #2
 8011a3c:	4413      	add	r3, r2
 8011a3e:	440b      	add	r3, r1
 8011a40:	3306      	adds	r3, #6
 8011a42:	4602      	mov	r2, r0
 8011a44:	801a      	strh	r2, [r3, #0]
    
    return Light_LightnessStatus[elementIndex].TargetValue16;  
 8011a46:	78fa      	ldrb	r2, [r7, #3]
 8011a48:	4905      	ldr	r1, [pc, #20]	; (8011a60 <Light_Linear_ActualBinding+0x140>)
 8011a4a:	4613      	mov	r3, r2
 8011a4c:	00db      	lsls	r3, r3, #3
 8011a4e:	4413      	add	r3, r2
 8011a50:	440b      	add	r3, r1
 8011a52:	3304      	adds	r3, #4
 8011a54:	881b      	ldrh	r3, [r3, #0]
 8011a56:	b29b      	uxth	r3, r3
  }
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	3710      	adds	r7, #16
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}
 8011a60:	200045c8 	.word	0x200045c8
 8011a64:	477fff00 	.word	0x477fff00
 8011a68:	200045b0 	.word	0x200045b0

08011a6c <Light_Actual_RangeBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void
*/
void Light_Actual_RangeBinding(Light_LightnessParam_t* lightActual, MOBLEUINT8 elementIndex)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b083      	sub	sp, #12
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	460b      	mov	r3, r1
 8011a76:	70fb      	strb	r3, [r7, #3]
  6.1.2.2.5 - actual lightness = range minimum if actual lighteness is less than range min
  value.
  actual lightness = range maximum if actual lighteness is greater than range max
  value.
  */
  if((lightActual->TargetLightnessStatus < Light_LightnessRangeParam[elementIndex].MinRangeStatus)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	881b      	ldrh	r3, [r3, #0]
 8011a7c:	b299      	uxth	r1, r3
 8011a7e:	78fa      	ldrb	r2, [r7, #3]
 8011a80:	481f      	ldr	r0, [pc, #124]	; (8011b00 <Light_Actual_RangeBinding+0x94>)
 8011a82:	4613      	mov	r3, r2
 8011a84:	009b      	lsls	r3, r3, #2
 8011a86:	4413      	add	r3, r2
 8011a88:	4403      	add	r3, r0
 8011a8a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	4299      	cmp	r1, r3
 8011a92:	d210      	bcs.n	8011ab6 <Light_Actual_RangeBinding+0x4a>
     && (lightActual->TargetLightnessStatus != 0))
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	881b      	ldrh	r3, [r3, #0]
 8011a98:	b29b      	uxth	r3, r3
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d00b      	beq.n	8011ab6 <Light_Actual_RangeBinding+0x4a>
  {
    lightActual->TargetLightnessStatus = Light_LightnessRangeParam[elementIndex].MinRangeStatus;
 8011a9e:	78fa      	ldrb	r2, [r7, #3]
 8011aa0:	4917      	ldr	r1, [pc, #92]	; (8011b00 <Light_Actual_RangeBinding+0x94>)
 8011aa2:	4613      	mov	r3, r2
 8011aa4:	009b      	lsls	r3, r3, #2
 8011aa6:	4413      	add	r3, r2
 8011aa8:	440b      	add	r3, r1
 8011aaa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011aae:	b29a      	uxth	r2, r3
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    /* no condition to execute */
  }
}
 8011ab4:	e01d      	b.n	8011af2 <Light_Actual_RangeBinding+0x86>
  else if((lightActual->TargetLightnessStatus > Light_LightnessRangeParam[elementIndex].MaxRangeStatus)
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	881b      	ldrh	r3, [r3, #0]
 8011aba:	b299      	uxth	r1, r3
 8011abc:	78fa      	ldrb	r2, [r7, #3]
 8011abe:	4810      	ldr	r0, [pc, #64]	; (8011b00 <Light_Actual_RangeBinding+0x94>)
 8011ac0:	4613      	mov	r3, r2
 8011ac2:	009b      	lsls	r3, r3, #2
 8011ac4:	4413      	add	r3, r2
 8011ac6:	4403      	add	r3, r0
 8011ac8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	4299      	cmp	r1, r3
 8011ad0:	d90f      	bls.n	8011af2 <Light_Actual_RangeBinding+0x86>
          && (lightActual->TargetLightnessStatus != 0))
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	881b      	ldrh	r3, [r3, #0]
 8011ad6:	b29b      	uxth	r3, r3
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d00a      	beq.n	8011af2 <Light_Actual_RangeBinding+0x86>
    lightActual->TargetLightnessStatus = Light_LightnessRangeParam[elementIndex].MaxRangeStatus;
 8011adc:	78fa      	ldrb	r2, [r7, #3]
 8011ade:	4908      	ldr	r1, [pc, #32]	; (8011b00 <Light_Actual_RangeBinding+0x94>)
 8011ae0:	4613      	mov	r3, r2
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	4413      	add	r3, r2
 8011ae6:	440b      	add	r3, r1
 8011ae8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	801a      	strh	r2, [r3, #0]
}
 8011af2:	bf00      	nop
 8011af4:	370c      	adds	r7, #12
 8011af6:	46bd      	mov	sp, r7
 8011af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop
 8011b00:	200045d8 	.word	0x200045d8

08011b04 <Light_TransitionParameterReset>:
* @brief Function called when message received without optional parameter, stop the running transition.
* @param void
* @param void
*/
void Light_TransitionParameterReset(MOBLEUINT8 elementIndex)
{
 8011b04:	b480      	push	{r7}
 8011b06:	b083      	sub	sp, #12
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	71fb      	strb	r3, [r7, #7]
  Light_ModelFlag[elementIndex].LightTransitionFlag = MODEL_TRANSITION_STOP;
 8011b0e:	79fa      	ldrb	r2, [r7, #7]
 8011b10:	4912      	ldr	r1, [pc, #72]	; (8011b5c <Light_TransitionParameterReset+0x58>)
 8011b12:	4613      	mov	r3, r2
 8011b14:	005b      	lsls	r3, r3, #1
 8011b16:	4413      	add	r3, r2
 8011b18:	440b      	add	r3, r1
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	701a      	strb	r2, [r3, #0]
  Light_TimeParam[elementIndex].Res_Value = 0x00;
 8011b1e:	79fa      	ldrb	r2, [r7, #7]
 8011b20:	490f      	ldr	r1, [pc, #60]	; (8011b60 <Light_TransitionParameterReset+0x5c>)
 8011b22:	4613      	mov	r3, r2
 8011b24:	009b      	lsls	r3, r3, #2
 8011b26:	4413      	add	r3, r2
 8011b28:	005b      	lsls	r3, r3, #1
 8011b2a:	440b      	add	r3, r1
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	705a      	strb	r2, [r3, #1]
 8011b30:	2200      	movs	r2, #0
 8011b32:	709a      	strb	r2, [r3, #2]
 8011b34:	2200      	movs	r2, #0
 8011b36:	70da      	strb	r2, [r3, #3]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	711a      	strb	r2, [r3, #4]
  Light_TimeParam[elementIndex].StepValue = 0x00;
 8011b3c:	79fa      	ldrb	r2, [r7, #7]
 8011b3e:	4908      	ldr	r1, [pc, #32]	; (8011b60 <Light_TransitionParameterReset+0x5c>)
 8011b40:	4613      	mov	r3, r2
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	4413      	add	r3, r2
 8011b46:	005b      	lsls	r3, r3, #1
 8011b48:	440b      	add	r3, r1
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	701a      	strb	r2, [r3, #0]
}
 8011b4e:	bf00      	nop
 8011b50:	370c      	adds	r7, #12
 8011b52:	46bd      	mov	sp, r7
 8011b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b58:	4770      	bx	lr
 8011b5a:	bf00      	nop
 8011b5c:	200045a8 	.word	0x200045a8
 8011b60:	2000459c 	.word	0x2000459c

08011b64 <Chk_OpcodePresent>:
* @param opcode: opcode of the model
* @param elementIndex:element index of the model
* @return : MOBLE_RESULT
*/
MOBLE_RESULT Chk_OpcodePresent(MOBLEUINT16 opcode ,MOBLEUINT8 elementIndex)
{
 8011b64:	b480      	push	{r7}
 8011b66:	b085      	sub	sp, #20
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	460a      	mov	r2, r1
 8011b6e:	80fb      	strh	r3, [r7, #6]
 8011b70:	4613      	mov	r3, r2
 8011b72:	717b      	strb	r3, [r7, #5]
 
  for(MOBLEUINT8 index=0; index < MAX_NUM_BINDED_STATE; index++)
 8011b74:	2300      	movs	r3, #0
 8011b76:	73fb      	strb	r3, [r7, #15]
 8011b78:	e014      	b.n	8011ba4 <Chk_OpcodePresent+0x40>
  {
    if((Light_PublishOpcodeList[elementIndex].PublishStateOpcode[index]) == opcode)
 8011b7a:	797a      	ldrb	r2, [r7, #5]
 8011b7c:	7bfb      	ldrb	r3, [r7, #15]
 8011b7e:	480e      	ldr	r0, [pc, #56]	; (8011bb8 <Chk_OpcodePresent+0x54>)
 8011b80:	0059      	lsls	r1, r3, #1
 8011b82:	4613      	mov	r3, r2
 8011b84:	00db      	lsls	r3, r3, #3
 8011b86:	4413      	add	r3, r2
 8011b88:	00da      	lsls	r2, r3, #3
 8011b8a:	4413      	add	r3, r2
 8011b8c:	440b      	add	r3, r1
 8011b8e:	4403      	add	r3, r0
 8011b90:	881b      	ldrh	r3, [r3, #0]
 8011b92:	b29b      	uxth	r3, r3
 8011b94:	88fa      	ldrh	r2, [r7, #6]
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d101      	bne.n	8011b9e <Chk_OpcodePresent+0x3a>
    {
      return  MOBLE_RESULT_FALSE;
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	e006      	b.n	8011bac <Chk_OpcodePresent+0x48>
  for(MOBLEUINT8 index=0; index < MAX_NUM_BINDED_STATE; index++)
 8011b9e:	7bfb      	ldrb	r3, [r7, #15]
 8011ba0:	3301      	adds	r3, #1
 8011ba2:	73fb      	strb	r3, [r7, #15]
 8011ba4:	7bfb      	ldrb	r3, [r7, #15]
 8011ba6:	2b13      	cmp	r3, #19
 8011ba8:	d9e7      	bls.n	8011b7a <Chk_OpcodePresent+0x16>
    }
  }
   return MOBLE_RESULT_SUCCESS;     
 8011baa:	2300      	movs	r3, #0
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3714      	adds	r7, #20
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr
 8011bb8:	200045f4 	.word	0x200045f4

08011bbc <Punblication_OneSecTimer>:
* @brief  Function used to calculate the particular time delay only once.
* @param  MOBLEUINT16
* @retval MOBLEUINT8
*/
void Punblication_OneSecTimer(void)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	af00      	add	r7, sp, #0
  static MOBLEUINT32 Check_time;
  
  /* Taking the time stamp for particular time */
  if(Publication1SecFlag.TimeStampFlag == MOBLE_FALSE)
 8011bc0:	4b0e      	ldr	r3, [pc, #56]	; (8011bfc <Punblication_OneSecTimer+0x40>)
 8011bc2:	785b      	ldrb	r3, [r3, #1]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d107      	bne.n	8011bd8 <Punblication_OneSecTimer+0x1c>
  {
    Check_time = Clock_Time();
 8011bc8:	f7f6 f958 	bl	8007e7c <HAL_GetTick>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	4a0c      	ldr	r2, [pc, #48]	; (8011c00 <Punblication_OneSecTimer+0x44>)
 8011bd0:	6013      	str	r3, [r2, #0]
    Publication1SecFlag.TimeStampFlag = MOBLE_TRUE;
 8011bd2:	4b0a      	ldr	r3, [pc, #40]	; (8011bfc <Punblication_OneSecTimer+0x40>)
 8011bd4:	2201      	movs	r2, #1
 8011bd6:	705a      	strb	r2, [r3, #1]
  }
  
  if(((Clock_Time()- Check_time) >= PUBLISH_1SEC_TIME) &&
 8011bd8:	f7f6 f950 	bl	8007e7c <HAL_GetTick>
 8011bdc:	4602      	mov	r2, r0
 8011bde:	4b08      	ldr	r3, [pc, #32]	; (8011c00 <Punblication_OneSecTimer+0x44>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	1ad3      	subs	r3, r2, r3
 8011be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011be8:	d306      	bcc.n	8011bf8 <Punblication_OneSecTimer+0x3c>
                  (Publication1SecFlag.Transition1SecFlag == MOBLE_FALSE))
 8011bea:	4b04      	ldr	r3, [pc, #16]	; (8011bfc <Punblication_OneSecTimer+0x40>)
 8011bec:	781b      	ldrb	r3, [r3, #0]
  if(((Clock_Time()- Check_time) >= PUBLISH_1SEC_TIME) &&
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d102      	bne.n	8011bf8 <Punblication_OneSecTimer+0x3c>
  {
      Publication1SecFlag.Transition1SecFlag = MOBLE_TRUE;
 8011bf2:	4b02      	ldr	r3, [pc, #8]	; (8011bfc <Punblication_OneSecTimer+0x40>)
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	701a      	strb	r2, [r3, #0]
  }
}
 8011bf8:	bf00      	nop
 8011bfa:	bd80      	pop	{r7, pc}
 8011bfc:	200045ac 	.word	0x200045ac
 8011c00:	20004650 	.word	0x20004650

08011c04 <Light_RestoreModelStates>:
* @brief function used to restore the states of the generic model.
* @param pointer to the array
* return void.
*/
void Light_RestoreModelStates(void *model_State , MOBLEUINT8 elementIndex)
{
 8011c04:	b480      	push	{r7}
 8011c06:	b083      	sub	sp, #12
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	460b      	mov	r3, r1
 8011c0e:	70fb      	strb	r3, [r7, #3]
  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS  
  Light_LightnessStatus[elementIndex].LightnessPresentValue16 = ((Models_ParamNvm_t *)model_State)->LightLightness; 
 8011c10:	78fa      	ldrb	r2, [r7, #3]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	8918      	ldrh	r0, [r3, #8]
 8011c16:	4914      	ldr	r1, [pc, #80]	; (8011c68 <Light_RestoreModelStates+0x64>)
 8011c18:	4613      	mov	r3, r2
 8011c1a:	00db      	lsls	r3, r3, #3
 8011c1c:	4413      	add	r3, r2
 8011c1e:	440b      	add	r3, r1
 8011c20:	4602      	mov	r2, r0
 8011c22:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].TargetValue16 = ((Models_ParamNvm_t *)model_State)->LightTarget;
 8011c24:	78fa      	ldrb	r2, [r7, #3]
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	8958      	ldrh	r0, [r3, #10]
 8011c2a:	490f      	ldr	r1, [pc, #60]	; (8011c68 <Light_RestoreModelStates+0x64>)
 8011c2c:	4613      	mov	r3, r2
 8011c2e:	00db      	lsls	r3, r3, #3
 8011c30:	4413      	add	r3, r2
 8011c32:	440b      	add	r3, r1
 8011c34:	3304      	adds	r3, #4
 8011c36:	4602      	mov	r2, r0
 8011c38:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].LightnessLastStatus = ((Models_ParamNvm_t *)model_State)->LightLast;
 8011c3a:	78fa      	ldrb	r2, [r7, #3]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	89d8      	ldrh	r0, [r3, #14]
 8011c40:	4909      	ldr	r1, [pc, #36]	; (8011c68 <Light_RestoreModelStates+0x64>)
 8011c42:	4613      	mov	r3, r2
 8011c44:	00db      	lsls	r3, r3, #3
 8011c46:	4413      	add	r3, r2
 8011c48:	440b      	add	r3, r1
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	f8a3 2007 	strh.w	r2, [r3, #7]
  Light_LightnessDefaultParam[elementIndex].LightnessDefaultStatus = ((Models_ParamNvm_t *)model_State)->LightDefault;
 8011c50:	78fb      	ldrb	r3, [r7, #3]
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	8991      	ldrh	r1, [r2, #12]
 8011c56:	4a05      	ldr	r2, [pc, #20]	; (8011c6c <Light_RestoreModelStates+0x68>)
 8011c58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  Light_HslStatus[elementIndex].PresentHslSaturation16 = ((Models_ParamNvm_t *)model_State)->HslSaturation;
  Light_HslDefaultParam[elementIndex].HslLightnessDefault16 = ((Models_ParamNvm_t *)model_State)->HslLightnessDefault;
  Light_HslDefaultParam[elementIndex].HslHueDefault16 = ((Models_ParamNvm_t *)model_State)->HslHueDefault;
  Light_HslDefaultParam[elementIndex].HslSaturationDefault16 = ((Models_ParamNvm_t *)model_State)->HslSaturationDefault;  
#endif   
}
 8011c5c:	bf00      	nop
 8011c5e:	370c      	adds	r7, #12
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr
 8011c68:	200045c8 	.word	0x200045c8
 8011c6c:	200045d4 	.word	0x200045d4

08011c70 <Appli_Light_Ctl_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_Ctl_Set(Light_CtlStatus_t* pLight_CtlParam,
                                               MOBLEUINT8 OptionalValid, 
                                               uint16_t dstPeer, 
                                               uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011c70:	b480      	push	{r7}
 8011c72:	b083      	sub	sp, #12
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
 8011c78:	4608      	mov	r0, r1
 8011c7a:	4611      	mov	r1, r2
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	4603      	mov	r3, r0
 8011c80:	70fb      	strb	r3, [r7, #3]
 8011c82:	460b      	mov	r3, r1
 8011c84:	803b      	strh	r3, [r7, #0]
 8011c86:	4613      	mov	r3, r2
 8011c88:	70bb      	strb	r3, [r7, #2]
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	370c      	adds	r7, #12
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <Appli_Light_CtlTemperature_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_CtlTemperature_Set(Light_CtlStatus_t* pLight_CtltempParam,
                                                          MOBLEUINT8 OptionalValid, 
                                                          uint16_t dstPeer, 
                                                          uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	4608      	mov	r0, r1
 8011ca2:	4611      	mov	r1, r2
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	70fb      	strb	r3, [r7, #3]
 8011caa:	460b      	mov	r3, r1
 8011cac:	803b      	strh	r3, [r7, #0]
 8011cae:	4613      	mov	r3, r2
 8011cb0:	70bb      	strb	r3, [r7, #2]
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	370c      	adds	r7, #12
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr

08011cc0 <Appli_Light_CtlTemperature_Range_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_CtlTemperature_Range_Set(Light_CtlTemperatureRangeParam_t* pLight_CtlTempRangeParam,
                                                                MOBLEUINT8 OptionalValid, 
                                                                uint16_t dstPeer, 
                                                                uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011cc0:	b480      	push	{r7}
 8011cc2:	b083      	sub	sp, #12
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	4608      	mov	r0, r1
 8011cca:	4611      	mov	r1, r2
 8011ccc:	461a      	mov	r2, r3
 8011cce:	4603      	mov	r3, r0
 8011cd0:	70fb      	strb	r3, [r7, #3]
 8011cd2:	460b      	mov	r3, r1
 8011cd4:	803b      	strh	r3, [r7, #0]
 8011cd6:	4613      	mov	r3, r2
 8011cd8:	70bb      	strb	r3, [r7, #2]
 8011cda:	2300      	movs	r3, #0
 8011cdc:	4618      	mov	r0, r3
 8011cde:	370c      	adds	r7, #12
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce6:	4770      	bx	lr

08011ce8 <Appli_Light_CtlDefault_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_CtlDefault_Set(Light_CtlDefaultParam_t* pLight_CtlDefaultParam,
                                                      MOBLEUINT8 OptionalValid, 
                                                      uint16_t dstPeer, 
                                                      uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011ce8:	b480      	push	{r7}
 8011cea:	b083      	sub	sp, #12
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	4608      	mov	r0, r1
 8011cf2:	4611      	mov	r1, r2
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	70fb      	strb	r3, [r7, #3]
 8011cfa:	460b      	mov	r3, r1
 8011cfc:	803b      	strh	r3, [r7, #0]
 8011cfe:	4613      	mov	r3, r2
 8011d00:	70bb      	strb	r3, [r7, #2]
 8011d02:	2300      	movs	r3, #0
 8011d04:	4618      	mov	r0, r3
 8011d06:	370c      	adds	r7, #12
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0e:	4770      	bx	lr

08011d10 <Appli_Light_Hsl_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_Hsl_Set(Light_HslStatus_t* pLight_HslParam,
                                               MOBLEUINT8 OptionalValid, 
                                               uint16_t dstPeer, 
                                               uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011d10:	b480      	push	{r7}
 8011d12:	b083      	sub	sp, #12
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
 8011d18:	4608      	mov	r0, r1
 8011d1a:	4611      	mov	r1, r2
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	4603      	mov	r3, r0
 8011d20:	70fb      	strb	r3, [r7, #3]
 8011d22:	460b      	mov	r3, r1
 8011d24:	803b      	strh	r3, [r7, #0]
 8011d26:	4613      	mov	r3, r2
 8011d28:	70bb      	strb	r3, [r7, #2]
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	370c      	adds	r7, #12
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr

08011d38 <Appli_Light_HslHue_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_HslHue_Set(Light_HslStatus_t* pLight_HslHueParam,
                                                  MOBLEUINT8 OptionalValid, 
                                                  uint16_t dstPeer, 
                                                  uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011d38:	b480      	push	{r7}
 8011d3a:	b083      	sub	sp, #12
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	4608      	mov	r0, r1
 8011d42:	4611      	mov	r1, r2
 8011d44:	461a      	mov	r2, r3
 8011d46:	4603      	mov	r3, r0
 8011d48:	70fb      	strb	r3, [r7, #3]
 8011d4a:	460b      	mov	r3, r1
 8011d4c:	803b      	strh	r3, [r7, #0]
 8011d4e:	4613      	mov	r3, r2
 8011d50:	70bb      	strb	r3, [r7, #2]
 8011d52:	2300      	movs	r3, #0
 8011d54:	4618      	mov	r0, r3
 8011d56:	370c      	adds	r7, #12
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr

08011d60 <Appli_Light_HslSaturation_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_HslSaturation_Set(Light_HslStatus_t* pLight_HslSaturationParam,
                                                         MOBLEUINT8 OptionalValid, 
                                                         uint16_t dstPeer, 
                                                         uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011d60:	b480      	push	{r7}
 8011d62:	b083      	sub	sp, #12
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	4608      	mov	r0, r1
 8011d6a:	4611      	mov	r1, r2
 8011d6c:	461a      	mov	r2, r3
 8011d6e:	4603      	mov	r3, r0
 8011d70:	70fb      	strb	r3, [r7, #3]
 8011d72:	460b      	mov	r3, r1
 8011d74:	803b      	strh	r3, [r7, #0]
 8011d76:	4613      	mov	r3, r2
 8011d78:	70bb      	strb	r3, [r7, #2]
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	370c      	adds	r7, #12
 8011d80:	46bd      	mov	sp, r7
 8011d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d86:	4770      	bx	lr

08011d88 <Appli_Light_HslDefault_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_HslDefault_Set(Light_HslDefaultParam_t* pLight_HslDefaultParam,
                                                      MOBLEUINT8 OptionalValid, 
                                                      uint16_t dstPeer, 
                                                      uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011d88:	b480      	push	{r7}
 8011d8a:	b083      	sub	sp, #12
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
 8011d90:	4608      	mov	r0, r1
 8011d92:	4611      	mov	r1, r2
 8011d94:	461a      	mov	r2, r3
 8011d96:	4603      	mov	r3, r0
 8011d98:	70fb      	strb	r3, [r7, #3]
 8011d9a:	460b      	mov	r3, r1
 8011d9c:	803b      	strh	r3, [r7, #0]
 8011d9e:	4613      	mov	r3, r2
 8011da0:	70bb      	strb	r3, [r7, #2]
 8011da2:	2300      	movs	r3, #0
 8011da4:	4618      	mov	r0, r3
 8011da6:	370c      	adds	r7, #12
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr

08011db0 <Appli_Light_HslRange_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_HslRange_Set(Light_HslRangeParam_t* pLight_HslRangeParam,
                                                    MOBLEUINT8 OptionalValid, 
                                                    uint16_t dstPeer, 
                                                    uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011db0:	b480      	push	{r7}
 8011db2:	b083      	sub	sp, #12
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
 8011db8:	4608      	mov	r0, r1
 8011dba:	4611      	mov	r1, r2
 8011dbc:	461a      	mov	r2, r3
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	70fb      	strb	r3, [r7, #3]
 8011dc2:	460b      	mov	r3, r1
 8011dc4:	803b      	strh	r3, [r7, #0]
 8011dc6:	4613      	mov	r3, r2
 8011dc8:	70bb      	strb	r3, [r7, #2]
 8011dca:	2300      	movs	r3, #0
 8011dcc:	4618      	mov	r0, r3
 8011dce:	370c      	adds	r7, #12
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd6:	4770      	bx	lr

08011dd8 <Appli_Light_GetCtlLightStatus>:
                                                               uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlLightStatus(MOBLEUINT8* lCtlLightState, 
                                                         uint16_t dstPeer, 
                                                         uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011dd8:	b480      	push	{r7}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	460b      	mov	r3, r1
 8011de2:	807b      	strh	r3, [r7, #2]
 8011de4:	4613      	mov	r3, r2
 8011de6:	707b      	strb	r3, [r7, #1]
 8011de8:	2300      	movs	r3, #0
 8011dea:	4618      	mov	r0, r3
 8011dec:	370c      	adds	r7, #12
 8011dee:	46bd      	mov	sp, r7
 8011df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df4:	4770      	bx	lr

08011df6 <Appli_Light_GetCtlTargetStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlTargetStatus(MOBLEUINT8* lCtlLightState, 
                                                          MOBLEUINT16 dstPeer, 
                                                          MOBLEUINT8 elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011df6:	b480      	push	{r7}
 8011df8:	b083      	sub	sp, #12
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]
 8011dfe:	460b      	mov	r3, r1
 8011e00:	807b      	strh	r3, [r7, #2]
 8011e02:	4613      	mov	r3, r2
 8011e04:	707b      	strb	r3, [r7, #1]
 8011e06:	2300      	movs	r3, #0
 8011e08:	4618      	mov	r0, r3
 8011e0a:	370c      	adds	r7, #12
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e12:	4770      	bx	lr

08011e14 <Appli_Light_GetCtlTemperatureStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlTemperatureStatus(MOBLEUINT8* lCtlTempState, 
                                                               uint16_t dstPeer, 
                                                               uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011e14:	b480      	push	{r7}
 8011e16:	b083      	sub	sp, #12
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	460b      	mov	r3, r1
 8011e1e:	807b      	strh	r3, [r7, #2]
 8011e20:	4613      	mov	r3, r2
 8011e22:	707b      	strb	r3, [r7, #1]
 8011e24:	2300      	movs	r3, #0
 8011e26:	4618      	mov	r0, r3
 8011e28:	370c      	adds	r7, #12
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e30:	4770      	bx	lr

08011e32 <Appli_Light_GetCtlTemperatureRange>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlTemperatureRange(MOBLEUINT8* lCtlTempRange, 
                                                              uint16_t dstPeer, 
                                                              uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011e32:	b480      	push	{r7}
 8011e34:	b083      	sub	sp, #12
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	6078      	str	r0, [r7, #4]
 8011e3a:	460b      	mov	r3, r1
 8011e3c:	807b      	strh	r3, [r7, #2]
 8011e3e:	4613      	mov	r3, r2
 8011e40:	707b      	strb	r3, [r7, #1]
 8011e42:	2300      	movs	r3, #0
 8011e44:	4618      	mov	r0, r3
 8011e46:	370c      	adds	r7, #12
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4e:	4770      	bx	lr

08011e50 <Appli_Light_GetCtlDefaultStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlDefaultStatus(MOBLEUINT8* lCtlDefaultState, 
                                                           uint16_t dstPeer, 
                                                           uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011e50:	b480      	push	{r7}
 8011e52:	b083      	sub	sp, #12
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
 8011e58:	460b      	mov	r3, r1
 8011e5a:	807b      	strh	r3, [r7, #2]
 8011e5c:	4613      	mov	r3, r2
 8011e5e:	707b      	strb	r3, [r7, #1]
 8011e60:	2300      	movs	r3, #0
 8011e62:	4618      	mov	r0, r3
 8011e64:	370c      	adds	r7, #12
 8011e66:	46bd      	mov	sp, r7
 8011e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6c:	4770      	bx	lr

08011e6e <Appli_Light_GetHslStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslStatus(MOBLEUINT8* lHslState, 
                                                    uint16_t dstPeer, 
                                                    uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011e6e:	b480      	push	{r7}
 8011e70:	b083      	sub	sp, #12
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	6078      	str	r0, [r7, #4]
 8011e76:	460b      	mov	r3, r1
 8011e78:	807b      	strh	r3, [r7, #2]
 8011e7a:	4613      	mov	r3, r2
 8011e7c:	707b      	strb	r3, [r7, #1]
 8011e7e:	2300      	movs	r3, #0
 8011e80:	4618      	mov	r0, r3
 8011e82:	370c      	adds	r7, #12
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr

08011e8c <Appli_Light_GetHslTargetStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslTargetStatus(MOBLEUINT8* lHslState, 
                                                          MOBLEUINT16 dstPeer, 
                                                          MOBLEUINT8 elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	460b      	mov	r3, r1
 8011e96:	807b      	strh	r3, [r7, #2]
 8011e98:	4613      	mov	r3, r2
 8011e9a:	707b      	strb	r3, [r7, #1]
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	370c      	adds	r7, #12
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea8:	4770      	bx	lr

08011eaa <Appli_Light_GetHslHueStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslHueStatus(MOBLEUINT8* lHslHueState, 
                                                       uint16_t dstPeer, 
                                                       uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011eaa:	b480      	push	{r7}
 8011eac:	b083      	sub	sp, #12
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	6078      	str	r0, [r7, #4]
 8011eb2:	460b      	mov	r3, r1
 8011eb4:	807b      	strh	r3, [r7, #2]
 8011eb6:	4613      	mov	r3, r2
 8011eb8:	707b      	strb	r3, [r7, #1]
 8011eba:	2300      	movs	r3, #0
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	370c      	adds	r7, #12
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec6:	4770      	bx	lr

08011ec8 <Appli_Light_GetHslSaturationStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslSaturationStatus(MOBLEUINT8* lHslSaturationState, 
                                                              uint16_t dstPeer, 
                                                              uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011ec8:	b480      	push	{r7}
 8011eca:	b083      	sub	sp, #12
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	460b      	mov	r3, r1
 8011ed2:	807b      	strh	r3, [r7, #2]
 8011ed4:	4613      	mov	r3, r2
 8011ed6:	707b      	strb	r3, [r7, #1]
 8011ed8:	2300      	movs	r3, #0
 8011eda:	4618      	mov	r0, r3
 8011edc:	370c      	adds	r7, #12
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr

08011ee6 <Appli_Light_GetHslHueRange>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslHueRange(MOBLEUINT8* lHslHueRange, 
                                                      uint16_t dstPeer, 
                                                      uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011ee6:	b480      	push	{r7}
 8011ee8:	b083      	sub	sp, #12
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
 8011eee:	460b      	mov	r3, r1
 8011ef0:	807b      	strh	r3, [r7, #2]
 8011ef2:	4613      	mov	r3, r2
 8011ef4:	707b      	strb	r3, [r7, #1]
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	4618      	mov	r0, r3
 8011efa:	370c      	adds	r7, #12
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr

08011f04 <Appli_Light_GetHslSatRange>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslSatRange(MOBLEUINT8* lHslSatRange, 
                                                      uint16_t dstPeer, 
                                                      uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011f04:	b480      	push	{r7}
 8011f06:	b083      	sub	sp, #12
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	460b      	mov	r3, r1
 8011f0e:	807b      	strh	r3, [r7, #2]
 8011f10:	4613      	mov	r3, r2
 8011f12:	707b      	strb	r3, [r7, #1]
 8011f14:	2300      	movs	r3, #0
 8011f16:	4618      	mov	r0, r3
 8011f18:	370c      	adds	r7, #12
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f20:	4770      	bx	lr

08011f22 <Appli_Light_GetHslDefaultStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslDefaultStatus(MOBLEUINT8* lHslDefaultState, 
                                                           uint16_t dstPeer, 
                                                           uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011f22:	b480      	push	{r7}
 8011f24:	b083      	sub	sp, #12
 8011f26:	af00      	add	r7, sp, #0
 8011f28:	6078      	str	r0, [r7, #4]
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	807b      	strh	r3, [r7, #2]
 8011f2e:	4613      	mov	r3, r2
 8011f30:	707b      	strb	r3, [r7, #1]
 8011f32:	2300      	movs	r3, #0
 8011f34:	4618      	mov	r0, r3
 8011f36:	370c      	adds	r7, #12
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3e:	4770      	bx	lr

08011f40 <MESH_Init>:
 * @brief  Mesh initialization
 * @param  None
 * @retval None
 */
void MESH_Init(void)
{
 8011f40:	b5b0      	push	{r4, r5, r7, lr}
 8011f42:	b090      	sub	sp, #64	; 0x40
 8011f44:	af04      	add	r7, sp, #16
  MOBLEUINT8 uuid[16];
  MOBLEUINT8 PrvnDevKeyFlag = 0;
 8011f46:	2300      	movs	r3, #0
 8011f48:	75fb      	strb	r3, [r7, #23]
//#if PROVISIONER_FEATURE
//   MOBLEUINT8 prvsnrDevKey[16];
//#endif
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;  
 8011f4a:	1d3b      	adds	r3, r7, #4
 8011f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Check for valid Board Address */
  if (!Appli_CheckBdMacAddr())
 8011f4e:	f7f4 f9d9 	bl	8006304 <Appli_CheckBdMacAddr>
 8011f52:	4603      	mov	r3, r0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d105      	bne.n	8011f64 <MESH_Init+0x24>
  {
    TRACE_I(TF_INIT,"Bad BD_MAC ADDR!\r\n");
 8011f58:	485c      	ldr	r0, [pc, #368]	; (80120cc <MESH_Init+0x18c>)
 8011f5a:	f017 fc83 	bl	8029864 <puts>
    /* LED Blinks if BDAddr is not appropriate */
    while (1)
    {
      Appli_LedBlink();
 8011f5e:	f7f3 fffb 	bl	8005f58 <Appli_LedBlink>
 8011f62:	e7fc      	b.n	8011f5e <MESH_Init+0x1e>
    }
  }
  
  /* Set BLE configuration function callbacks */
  BLEMesh_BleHardwareInitCallBack(&user_ble_cb);  
 8011f64:	485a      	ldr	r0, [pc, #360]	; (80120d0 <MESH_Init+0x190>)
 8011f66:	f00b fae7 	bl	801d538 <BLEMesh_BleHardwareInitCallBack>
  
  /*Set BLE Config Model APIs callback*/
  BLEMesh_BleConfigModelInitCallBack(&config_model_cb);
 8011f6a:	485a      	ldr	r0, [pc, #360]	; (80120d4 <MESH_Init+0x194>)
 8011f6c:	f00b faee 	bl	801d54c <BLEMesh_BleConfigModelInitCallBack>

  /* Initializes BLE-Mesh Library */
  if (MOBLE_FAILED(BLEMesh_Init(&BLEMeshlib_Init_params)))
 8011f70:	4859      	ldr	r0, [pc, #356]	; (80120d8 <MESH_Init+0x198>)
 8011f72:	f015 f87d 	bl	8027070 <BLEMesh_Init>
 8011f76:	4603      	mov	r3, r0
 8011f78:	2b01      	cmp	r3, #1
 8011f7a:	d905      	bls.n	8011f88 <MESH_Init+0x48>
  {
    TRACE_I(TF_INIT,"Could not initialize BLE-Mesh library!\r\n");   
 8011f7c:	4857      	ldr	r0, [pc, #348]	; (80120dc <MESH_Init+0x19c>)
 8011f7e:	f017 fc71 	bl	8029864 <puts>
    /* LED continuously blinks if library fails to initialize */
    while (1)
    {
      Appli_LedBlink();
 8011f82:	f7f3 ffe9 	bl	8005f58 <Appli_LedBlink>
 8011f86:	e7fc      	b.n	8011f82 <MESH_Init+0x42>
    }
  }
  
  /*Check SIG & VENDOR models limit*/
  if(MOBLE_FAILED(AppliCheck_EnabledModelsList()))
 8011f88:	f001 f824 	bl	8012fd4 <AppliCheck_EnabledModelsList>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b01      	cmp	r3, #1
 8011f90:	d902      	bls.n	8011f98 <MESH_Init+0x58>
  {
    /* LED continuously blinks if library fails to initialize */
    while (1)
    {
      Appli_LedBlink();
 8011f92:	f7f3 ffe1 	bl	8005f58 <Appli_LedBlink>
 8011f96:	e7fc      	b.n	8011f92 <MESH_Init+0x52>
  /* This function also checks for Power OnOff Cycles     
     Define the following Macro "ENABLE_UNPROVISIONING_BY_POWER_ONOFF_CYCLE" 
     to check the Power-OnOff Cycles
    5 Continuous cycles of OnOff with Ontime <2 sec will cause unprovisioning
  */
  Appli_Init(&PrvnDevKeyFlag);
 8011f98:	f107 0317 	add.w	r3, r7, #23
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7f4 fbf1 	bl	8006784 <Appli_Init>
  
  Appli_StartProvisionerMode(1);
  
#else
  /* Checks if the node is already provisioned or not */
  if (BLEMesh_IsUnprovisioned() == MOBLE_TRUE)
 8011fa2:	f00c ffd3 	bl	801ef4c <BLEMesh_IsUnprovisioned>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	2b01      	cmp	r3, #1
 8011faa:	d108      	bne.n	8011fbe <MESH_Init+0x7e>
  {
    BLEMesh_InitUnprovisionedNode(); /* Initializes  Unprovisioned node */
 8011fac:	f00c ff44 	bl	801ee38 <BLEMesh_InitUnprovisionedNode>

    TRACE_I(TF_PROVISION,"Unprovisioned device \r\n");
 8011fb0:	484b      	ldr	r0, [pc, #300]	; (80120e0 <MESH_Init+0x1a0>)
 8011fb2:	f017 fc57 	bl	8029864 <puts>
    
#if PB_ADV_SUPPORTED
    BLEMesh_SetUnprovisionedDevBeaconInterval(100);
 8011fb6:	2064      	movs	r0, #100	; 0x64
 8011fb8:	f00b f8d2 	bl	801d160 <BLEMesh_SetUnprovisionedDevBeaconInterval>
 8011fbc:	e00b      	b.n	8011fd6 <MESH_Init+0x96>
#endif    
  }
  else
  {
    BLEMesh_InitProvisionedNode();  /* Initializes  Provisioned node */
 8011fbe:	f00c fe7f 	bl	801ecc0 <BLEMesh_InitProvisionedNode>
    TRACE_I(TF_PROVISION,"Provisioned node \r\n");
 8011fc2:	4848      	ldr	r0, [pc, #288]	; (80120e4 <MESH_Init+0x1a4>)
 8011fc4:	f017 fc4e 	bl	8029864 <puts>
    TRACE_I(TF_INIT,"Provisioned Node Address: [%04x] \n\r", BLEMesh_GetAddress());       
 8011fc8:	f00b f858 	bl	801d07c <BLEMesh_GetAddress>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	4619      	mov	r1, r3
 8011fd0:	4845      	ldr	r0, [pc, #276]	; (80120e8 <MESH_Init+0x1a8>)
 8011fd2:	f017 fbc1 	bl	8029758 <iprintf>
//                                     PROVISIONER_ROOT_ADDR_DEFAULT,
//                                     &PrvnDevKeyFlag, 
//                                     APPLICATION_NUMBER_OF_ELEMENTS);  
//#endif  
/* Check to manually unprovision the board */
  Appli_CheckForUnprovision();
 8011fd6:	f7f4 f8e5 	bl	80061a4 <Appli_CheckForUnprovision>
  
  /* Set attention timer callback */
  BLEMesh_SetAttentionTimerCallback(Appli_BleAttentionTimerCb);
 8011fda:	4844      	ldr	r0, [pc, #272]	; (80120ec <MESH_Init+0x1ac>)
 8011fdc:	f00b f8b4 	bl	801d148 <BLEMesh_SetAttentionTimerCallback>

#if TF_MISC
  Appli_ConfigurationInfoDump();
 8011fe0:	f000 f89a 	bl	8012118 <Appli_ConfigurationInfoDump>
#endif  

/* Set uuid for the board*/
  Appli_BleSetUUIDCb(uuid);
 8011fe4:	f107 0318 	add.w	r3, r7, #24
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7f3 ffeb 	bl	8005fc4 <Appli_BleSetUUIDCb>
  
  /* Prints the MAC Address of the board */ 
  TRACE_I(TF_INIT,"BLE-Mesh Lighting Demo v%s\n\r", BLE_MESH_APPLICATION_VERSION); 
 8011fee:	4940      	ldr	r1, [pc, #256]	; (80120f0 <MESH_Init+0x1b0>)
 8011ff0:	4840      	ldr	r0, [pc, #256]	; (80120f4 <MESH_Init+0x1b4>)
 8011ff2:	f017 fbb1 	bl	8029758 <iprintf>
  TRACE_I(TF_INIT,"BLE-Mesh Library v%s\n\r", BLEMesh_GetLibraryVersion()); 
 8011ff6:	f00b fa97 	bl	801d528 <BLEMesh_GetLibraryVersion>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	483e      	ldr	r0, [pc, #248]	; (80120f8 <MESH_Init+0x1b8>)
 8012000:	f017 fbaa 	bl	8029758 <iprintf>
  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8012004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012006:	f003 fdc7 	bl	8015b98 <SHCI_GetWirelessFwInfo>
 801200a:	4603      	mov	r3, r0
 801200c:	2b00      	cmp	r3, #0
 801200e:	d11f      	bne.n	8012050 <MESH_Init+0x110>
  {
    // Error
  }
  else
  {
    TRACE_I(TF_INIT,"BLE Stack v%d.%d.%d Branch=%d Type=%d\n\r", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub, p_wireless_info->VersionBranch, p_wireless_info->VersionReleaseType);
 8012010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012012:	781b      	ldrb	r3, [r3, #0]
 8012014:	4619      	mov	r1, r3
 8012016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012018:	785b      	ldrb	r3, [r3, #1]
 801201a:	4618      	mov	r0, r3
 801201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801201e:	789b      	ldrb	r3, [r3, #2]
 8012020:	461c      	mov	r4, r3
 8012022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012024:	78db      	ldrb	r3, [r3, #3]
 8012026:	461a      	mov	r2, r3
 8012028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801202a:	791b      	ldrb	r3, [r3, #4]
 801202c:	9301      	str	r3, [sp, #4]
 801202e:	9200      	str	r2, [sp, #0]
 8012030:	4623      	mov	r3, r4
 8012032:	4602      	mov	r2, r0
 8012034:	4831      	ldr	r0, [pc, #196]	; (80120fc <MESH_Init+0x1bc>)
 8012036:	f017 fb8f 	bl	8029758 <iprintf>
    TRACE_I(TF_INIT,"FUS v%d.%d.%d\n\r", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 801203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801203c:	7a9b      	ldrb	r3, [r3, #10]
 801203e:	4619      	mov	r1, r3
 8012040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012042:	7adb      	ldrb	r3, [r3, #11]
 8012044:	461a      	mov	r2, r3
 8012046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012048:	7b1b      	ldrb	r3, [r3, #12]
 801204a:	482d      	ldr	r0, [pc, #180]	; (8012100 <MESH_Init+0x1c0>)
 801204c:	f017 fb84 	bl	8029758 <iprintf>
  }
  
  TRACE_I(TF_INIT,"BD_MAC Address = [%02x]:[%02x]:[%02x]:[%02x]:[%02x]:[%02x] \n\r",
 8012050:	4b2c      	ldr	r3, [pc, #176]	; (8012104 <MESH_Init+0x1c4>)
 8012052:	795b      	ldrb	r3, [r3, #5]
 8012054:	4618      	mov	r0, r3
 8012056:	4b2b      	ldr	r3, [pc, #172]	; (8012104 <MESH_Init+0x1c4>)
 8012058:	791b      	ldrb	r3, [r3, #4]
 801205a:	461c      	mov	r4, r3
 801205c:	4b29      	ldr	r3, [pc, #164]	; (8012104 <MESH_Init+0x1c4>)
 801205e:	78db      	ldrb	r3, [r3, #3]
 8012060:	461d      	mov	r5, r3
 8012062:	4b28      	ldr	r3, [pc, #160]	; (8012104 <MESH_Init+0x1c4>)
 8012064:	789b      	ldrb	r3, [r3, #2]
 8012066:	461a      	mov	r2, r3
 8012068:	4b26      	ldr	r3, [pc, #152]	; (8012104 <MESH_Init+0x1c4>)
 801206a:	785b      	ldrb	r3, [r3, #1]
 801206c:	4619      	mov	r1, r3
 801206e:	4b25      	ldr	r3, [pc, #148]	; (8012104 <MESH_Init+0x1c4>)
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	9302      	str	r3, [sp, #8]
 8012074:	9101      	str	r1, [sp, #4]
 8012076:	9200      	str	r2, [sp, #0]
 8012078:	462b      	mov	r3, r5
 801207a:	4622      	mov	r2, r4
 801207c:	4601      	mov	r1, r0
 801207e:	4822      	ldr	r0, [pc, #136]	; (8012108 <MESH_Init+0x1c8>)
 8012080:	f017 fb6a 	bl	8029758 <iprintf>
          bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
  TRACE_I(TF_INIT,"UUID Address = ");
 8012084:	4821      	ldr	r0, [pc, #132]	; (801210c <MESH_Init+0x1cc>)
 8012086:	f017 fb67 	bl	8029758 <iprintf>
  
  for(MOBLEUINT8 i=0;i<16;i++)
 801208a:	2300      	movs	r3, #0
 801208c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012090:	e00e      	b.n	80120b0 <MESH_Init+0x170>
  {
    TRACE_I(TF_INIT,"[%02x] ",uuid[i]);
 8012092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012096:	3330      	adds	r3, #48	; 0x30
 8012098:	443b      	add	r3, r7
 801209a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801209e:	4619      	mov	r1, r3
 80120a0:	481b      	ldr	r0, [pc, #108]	; (8012110 <MESH_Init+0x1d0>)
 80120a2:	f017 fb59 	bl	8029758 <iprintf>
  for(MOBLEUINT8 i=0;i<16;i++)
 80120a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120aa:	3301      	adds	r3, #1
 80120ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80120b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120b4:	2b0f      	cmp	r3, #15
 80120b6:	d9ec      	bls.n	8012092 <MESH_Init+0x152>
  }
  TRACE_I(TF_INIT,"\r\n");
 80120b8:	4816      	ldr	r0, [pc, #88]	; (8012114 <MESH_Init+0x1d4>)
 80120ba:	f017 fbd3 	bl	8029864 <puts>

  /* Models initialization */  
  BLEMesh_ModelsInit();
 80120be:	f7f4 ff9f 	bl	8007000 <BLEMesh_ModelsInit>
#endif
  
#ifdef CUSTOM_BOARD_PWM_SELECTION  
  Light_UpdatePWMValue((MOBLEUINT8)DEFAULT_STATE);
#endif
}
 80120c2:	bf00      	nop
 80120c4:	3730      	adds	r7, #48	; 0x30
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bdb0      	pop	{r4, r5, r7, pc}
 80120ca:	bf00      	nop
 80120cc:	0802f600 	.word	0x0802f600
 80120d0:	08033298 	.word	0x08033298
 80120d4:	080332bc 	.word	0x080332bc
 80120d8:	080332f8 	.word	0x080332f8
 80120dc:	0802f614 	.word	0x0802f614
 80120e0:	0802f63c 	.word	0x0802f63c
 80120e4:	0802f654 	.word	0x0802f654
 80120e8:	0802f668 	.word	0x0802f668
 80120ec:	0800613d 	.word	0x0800613d
 80120f0:	0802f68c 	.word	0x0802f68c
 80120f4:	0802f698 	.word	0x0802f698
 80120f8:	0802f6b8 	.word	0x0802f6b8
 80120fc:	0802f6d0 	.word	0x0802f6d0
 8012100:	0802f6f8 	.word	0x0802f6f8
 8012104:	20004440 	.word	0x20004440
 8012108:	0802f708 	.word	0x0802f708
 801210c:	0802f748 	.word	0x0802f748
 8012110:	0802f758 	.word	0x0802f758
 8012114:	0802f760 	.word	0x0802f760

08012118 <Appli_ConfigurationInfoDump>:
* @brief This function is the Information dump function
* @param  None
* @retval None
*/
void Appli_ConfigurationInfoDump(void)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af00      	add	r7, sp, #0
  TRACE_I(TF_MISC,"\r\n********************\r\n");
 801211e:	4870      	ldr	r0, [pc, #448]	; (80122e0 <Appli_ConfigurationInfoDump+0x1c8>)
 8012120:	f017 fba0 	bl	8029864 <puts>
  TRACE_I(TF_MISC,"[Features Supported] \r\n");
 8012124:	486f      	ldr	r0, [pc, #444]	; (80122e4 <Appli_ConfigurationInfoDump+0x1cc>)
 8012126:	f017 fb9d 	bl	8029864 <puts>

#ifdef ENABLE_RELAY_FEATURE
  TRACE_I(TF_MISC,"Relay = Enabled \r\n");
 801212a:	486f      	ldr	r0, [pc, #444]	; (80122e8 <Appli_ConfigurationInfoDump+0x1d0>)
 801212c:	f017 fb9a 	bl	8029864 <puts>
#endif 
  
#ifdef ENABLE_PROXY_FEATURE
  TRACE_I(TF_MISC,"Proxy = Enabled \r\n");
 8012130:	486e      	ldr	r0, [pc, #440]	; (80122ec <Appli_ConfigurationInfoDump+0x1d4>)
 8012132:	f017 fb97 	bl	8029864 <puts>
#endif
  
#ifdef ENABLE_FRIEND_FEATURE
  TRACE_I(TF_MISC,"Friend = Enabled \r\n");
 8012136:	486e      	ldr	r0, [pc, #440]	; (80122f0 <Appli_ConfigurationInfoDump+0x1d8>)
 8012138:	f017 fb94 	bl	8029864 <puts>
  
#ifdef DYNAMIC_PROVISIONER
  TRACE_I(TF_MISC,"Dynamic Provisioner = Enabled \r\n");
#endif  
  
  TRACE_I(TF_MISC,"\n[Options] \r\n");
 801213c:	486d      	ldr	r0, [pc, #436]	; (80122f4 <Appli_ConfigurationInfoDump+0x1dc>)
 801213e:	f017 fb91 	bl	8029864 <puts>
  
#ifdef ENABLE_PB_ADV
  TRACE_I(TF_MISC,"PB-ADV = Enabled \r\n");
 8012142:	486d      	ldr	r0, [pc, #436]	; (80122f8 <Appli_ConfigurationInfoDump+0x1e0>)
 8012144:	f017 fb8e 	bl	8029864 <puts>
#endif
  
#ifdef ENABLE_PB_GATT  
  TRACE_I(TF_MISC,"PB-GATT = Enabled \r\n");
 8012148:	486c      	ldr	r0, [pc, #432]	; (80122fc <Appli_ConfigurationInfoDump+0x1e4>)
 801214a:	f017 fb8b 	bl	8029864 <puts>
  
#ifdef ENABLE_AUTH_TYPE_INPUT_OOB
  TRACE_I(TF_MISC,"Input OOB = Enabled \r\n");
#endif
  
  TRACE_I(TF_MISC,"\n[Library Capabilities] \r\n");
 801214e:	486c      	ldr	r0, [pc, #432]	; (8012300 <Appli_ConfigurationInfoDump+0x1e8>)
 8012150:	f017 fb88 	bl	8029864 <puts>
  
  TRACE_I(TF_MISC,"Net Keys = %d \r\n", BLEMesh_GetNetKeysCount());
 8012154:	f00a ffcc 	bl	801d0f0 <BLEMesh_GetNetKeysCount>
 8012158:	4603      	mov	r3, r0
 801215a:	4619      	mov	r1, r3
 801215c:	4869      	ldr	r0, [pc, #420]	; (8012304 <Appli_ConfigurationInfoDump+0x1ec>)
 801215e:	f017 fafb 	bl	8029758 <iprintf>
  TRACE_I(TF_MISC,"App Keys = %d \r\n", BLEMesh_GetAppKeysCount());
 8012162:	f00a ffc3 	bl	801d0ec <BLEMesh_GetAppKeysCount>
 8012166:	4603      	mov	r3, r0
 8012168:	4619      	mov	r1, r3
 801216a:	4867      	ldr	r0, [pc, #412]	; (8012308 <Appli_ConfigurationInfoDump+0x1f0>)
 801216c:	f017 faf4 	bl	8029758 <iprintf>
  TRACE_I(TF_MISC,"Elements per Node = %d \r\n", BLEMesh_GetNumberOfElements());
 8012170:	f00a ffba 	bl	801d0e8 <BLEMesh_GetNumberOfElements>
 8012174:	4603      	mov	r3, r0
 8012176:	4619      	mov	r1, r3
 8012178:	4864      	ldr	r0, [pc, #400]	; (801230c <Appli_ConfigurationInfoDump+0x1f4>)
 801217a:	f017 faed 	bl	8029758 <iprintf>
  TRACE_I(TF_MISC,"Models per Element = %d \r\n", BLEMesh_GetTotalModelsCount());
 801217e:	f00a ffb1 	bl	801d0e4 <BLEMesh_GetTotalModelsCount>
 8012182:	4603      	mov	r3, r0
 8012184:	4619      	mov	r1, r3
 8012186:	4862      	ldr	r0, [pc, #392]	; (8012310 <Appli_ConfigurationInfoDump+0x1f8>)
 8012188:	f017 fae6 	bl	8029758 <iprintf>
  TRACE_I(TF_MISC,"Subscription per Model = %d \r\n", BLEMesh_GetSubscriptionCount());
 801218c:	f00a ffb2 	bl	801d0f4 <BLEMesh_GetSubscriptionCount>
 8012190:	4603      	mov	r3, r0
 8012192:	4619      	mov	r1, r3
 8012194:	485f      	ldr	r0, [pc, #380]	; (8012314 <Appli_ConfigurationInfoDump+0x1fc>)
 8012196:	f017 fadf 	bl	8029758 <iprintf>
  TRACE_I(TF_MISC,"Default TTL = %d \r\n", BLEMesh_GetTTL());
 801219a:	f00a ffad 	bl	801d0f8 <BLEMesh_GetTTL>
 801219e:	4603      	mov	r3, r0
 80121a0:	4619      	mov	r1, r3
 80121a2:	485d      	ldr	r0, [pc, #372]	; (8012318 <Appli_ConfigurationInfoDump+0x200>)
 80121a4:	f017 fad8 	bl	8029758 <iprintf>
  TRACE_I(TF_MISC,"Default Network Transmit Count = %d \r\n", BLEMesh_GetNetworkTransmitCount());
 80121a8:	f00a ffb2 	bl	801d110 <BLEMesh_GetNetworkTransmitCount>
 80121ac:	4603      	mov	r3, r0
 80121ae:	4619      	mov	r1, r3
 80121b0:	485a      	ldr	r0, [pc, #360]	; (801231c <Appli_ConfigurationInfoDump+0x204>)
 80121b2:	f017 fad1 	bl	8029758 <iprintf>
  TRACE_I(TF_MISC,"Default Relay retransmit Count = %d \r\n", BLEMesh_GetRelayRetransmitCount());
 80121b6:	f00a ffb9 	bl	801d12c <BLEMesh_GetRelayRetransmitCount>
 80121ba:	4603      	mov	r3, r0
 80121bc:	4619      	mov	r1, r3
 80121be:	4858      	ldr	r0, [pc, #352]	; (8012320 <Appli_ConfigurationInfoDump+0x208>)
 80121c0:	f017 faca 	bl	8029758 <iprintf>
  
  TRACE_I(TF_MISC,"\n[Enabled Models] \r\n");
 80121c4:	4857      	ldr	r0, [pc, #348]	; (8012324 <Appli_ConfigurationInfoDump+0x20c>)
 80121c6:	f017 fb4d 	bl	8029864 <puts>
  
  for(uint8_t elementCount=0; elementCount<APPLICATION_NUMBER_OF_ELEMENTS; elementCount++)  
 80121ca:	2300      	movs	r3, #0
 80121cc:	71fb      	strb	r3, [r7, #7]
 80121ce:	e072      	b.n	80122b6 <Appli_ConfigurationInfoDump+0x19e>
  {
    TRACE_I(TF_MISC,"For Element Index = %d or Element Number = %d \r\n", elementCount, (elementCount+1));
 80121d0:	79f9      	ldrb	r1, [r7, #7]
 80121d2:	79fb      	ldrb	r3, [r7, #7]
 80121d4:	3301      	adds	r3, #1
 80121d6:	461a      	mov	r2, r3
 80121d8:	4853      	ldr	r0, [pc, #332]	; (8012328 <Appli_ConfigurationInfoDump+0x210>)
 80121da:	f017 fabd 	bl	8029758 <iprintf>
#ifdef ENABLE_VENDOR_MODEL_SERVER    
    if ((ENABLE_VENDOR_MODEL_SERVER & (1 << elementCount)) == (1 << elementCount))
 80121de:	79fb      	ldrb	r3, [r7, #7]
 80121e0:	2201      	movs	r2, #1
 80121e2:	fa02 f303 	lsl.w	r3, r2, r3
 80121e6:	f003 0201 	and.w	r2, r3, #1
 80121ea:	79fb      	ldrb	r3, [r7, #7]
 80121ec:	2101      	movs	r1, #1
 80121ee:	fa01 f303 	lsl.w	r3, r1, r3
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d102      	bne.n	80121fc <Appli_ConfigurationInfoDump+0xe4>
    {
      TRACE_I(TF_MISC,"Vendor Server \r\n");
 80121f6:	484d      	ldr	r0, [pc, #308]	; (801232c <Appli_ConfigurationInfoDump+0x214>)
 80121f8:	f017 fb34 	bl	8029864 <puts>
    }
#endif
  
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF
    if ((ENABLE_GENERIC_MODEL_SERVER_ONOFF & (1 << elementCount)) == (1 << elementCount))
 80121fc:	79fb      	ldrb	r3, [r7, #7]
 80121fe:	2201      	movs	r2, #1
 8012200:	fa02 f303 	lsl.w	r3, r2, r3
 8012204:	f003 0201 	and.w	r2, r3, #1
 8012208:	79fb      	ldrb	r3, [r7, #7]
 801220a:	2101      	movs	r1, #1
 801220c:	fa01 f303 	lsl.w	r3, r1, r3
 8012210:	429a      	cmp	r2, r3
 8012212:	d102      	bne.n	801221a <Appli_ConfigurationInfoDump+0x102>
    {
      TRACE_I(TF_MISC,"Generic On Off Server \r\n");
 8012214:	4846      	ldr	r0, [pc, #280]	; (8012330 <Appli_ConfigurationInfoDump+0x218>)
 8012216:	f017 fb25 	bl	8029864 <puts>
      TRACE_I(TF_MISC,"Generic On Off Client \r\n");
    }
#endif
 
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL
    if ((ENABLE_GENERIC_MODEL_SERVER_LEVEL & (1 << elementCount)) == (1 << elementCount))
 801221a:	79fb      	ldrb	r3, [r7, #7]
 801221c:	2201      	movs	r2, #1
 801221e:	fa02 f303 	lsl.w	r3, r2, r3
 8012222:	f003 0201 	and.w	r2, r3, #1
 8012226:	79fb      	ldrb	r3, [r7, #7]
 8012228:	2101      	movs	r1, #1
 801222a:	fa01 f303 	lsl.w	r3, r1, r3
 801222e:	429a      	cmp	r2, r3
 8012230:	d102      	bne.n	8012238 <Appli_ConfigurationInfoDump+0x120>
    {
      TRACE_I(TF_MISC,"Generic Level Server \r\n");
 8012232:	4840      	ldr	r0, [pc, #256]	; (8012334 <Appli_ConfigurationInfoDump+0x21c>)
 8012234:	f017 fb16 	bl	8029864 <puts>
      TRACE_I(TF_MISC,"Generic Default Transition Client \r\n");
    }
#endif

#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF
    if ((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF & (1 << elementCount)) == (1 << elementCount))
 8012238:	79fb      	ldrb	r3, [r7, #7]
 801223a:	2201      	movs	r2, #1
 801223c:	fa02 f303 	lsl.w	r3, r2, r3
 8012240:	f003 0201 	and.w	r2, r3, #1
 8012244:	79fb      	ldrb	r3, [r7, #7]
 8012246:	2101      	movs	r1, #1
 8012248:	fa01 f303 	lsl.w	r3, r1, r3
 801224c:	429a      	cmp	r2, r3
 801224e:	d102      	bne.n	8012256 <Appli_ConfigurationInfoDump+0x13e>
    {
      TRACE_I(TF_MISC,"Generic Power On Off Server \r\n");
 8012250:	4839      	ldr	r0, [pc, #228]	; (8012338 <Appli_ConfigurationInfoDump+0x220>)
 8012252:	f017 fb07 	bl	8029864 <puts>
    }
#endif

#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP
    if ((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP & (1 << elementCount)) == (1 << elementCount))
 8012256:	79fb      	ldrb	r3, [r7, #7]
 8012258:	2201      	movs	r2, #1
 801225a:	fa02 f303 	lsl.w	r3, r2, r3
 801225e:	f003 0201 	and.w	r2, r3, #1
 8012262:	79fb      	ldrb	r3, [r7, #7]
 8012264:	2101      	movs	r1, #1
 8012266:	fa01 f303 	lsl.w	r3, r1, r3
 801226a:	429a      	cmp	r2, r3
 801226c:	d102      	bne.n	8012274 <Appli_ConfigurationInfoDump+0x15c>
    {
      TRACE_I(TF_MISC,"Generic Power On Off Setup Server \r\n");
 801226e:	4833      	ldr	r0, [pc, #204]	; (801233c <Appli_ConfigurationInfoDump+0x224>)
 8012270:	f017 faf8 	bl	8029864 <puts>
      TRACE_I(TF_MISC,"Generic User Property Server \r\n");
    }
#endif

#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementCount)) == (1 << elementCount))
 8012274:	79fb      	ldrb	r3, [r7, #7]
 8012276:	2201      	movs	r2, #1
 8012278:	fa02 f303 	lsl.w	r3, r2, r3
 801227c:	f003 0201 	and.w	r2, r3, #1
 8012280:	79fb      	ldrb	r3, [r7, #7]
 8012282:	2101      	movs	r1, #1
 8012284:	fa01 f303 	lsl.w	r3, r1, r3
 8012288:	429a      	cmp	r2, r3
 801228a:	d102      	bne.n	8012292 <Appli_ConfigurationInfoDump+0x17a>
    {
      TRACE_I(TF_MISC,"Light Lightness Server \r\n");       
 801228c:	482c      	ldr	r0, [pc, #176]	; (8012340 <Appli_ConfigurationInfoDump+0x228>)
 801228e:	f017 fae9 	bl	8029864 <puts>
    }
#endif 

#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP
    if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP & (1 << elementCount)) == (1 << elementCount))
 8012292:	79fb      	ldrb	r3, [r7, #7]
 8012294:	2201      	movs	r2, #1
 8012296:	fa02 f303 	lsl.w	r3, r2, r3
 801229a:	f003 0201 	and.w	r2, r3, #1
 801229e:	79fb      	ldrb	r3, [r7, #7]
 80122a0:	2101      	movs	r1, #1
 80122a2:	fa01 f303 	lsl.w	r3, r1, r3
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d102      	bne.n	80122b0 <Appli_ConfigurationInfoDump+0x198>
    {
      TRACE_I(TF_MISC,"Light Lightness Setup Server \r\n");       
 80122aa:	4826      	ldr	r0, [pc, #152]	; (8012344 <Appli_ConfigurationInfoDump+0x22c>)
 80122ac:	f017 fada 	bl	8029864 <puts>
  for(uint8_t elementCount=0; elementCount<APPLICATION_NUMBER_OF_ELEMENTS; elementCount++)  
 80122b0:	79fb      	ldrb	r3, [r7, #7]
 80122b2:	3301      	adds	r3, #1
 80122b4:	71fb      	strb	r3, [r7, #7]
 80122b6:	79fb      	ldrb	r3, [r7, #7]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d089      	beq.n	80121d0 <Appli_ConfigurationInfoDump+0xb8>
      TRACE_I(TF_MISC,"Scene \r\n");           
    }
#endif
  }
  
TRACE_I(TF_MISC,"\n[Important Information] \r\n");
 80122bc:	4822      	ldr	r0, [pc, #136]	; (8012348 <Appli_ConfigurationInfoDump+0x230>)
 80122be:	f017 fad1 	bl	8029864 <puts>
#if SAVE_EMBD_PROVISION_DATA     
  TRACE_I(TF_MISC,"Embedded Provisioner data saving enabled \r\n");
#endif
  
#ifdef APPLICATION_NUMBER_OF_ELEMENTS     
  TRACE_I(TF_MISC,"Number of Elements enabled in Application: %d \r\n", APPLICATION_NUMBER_OF_ELEMENTS);  
 80122c2:	2101      	movs	r1, #1
 80122c4:	4821      	ldr	r0, [pc, #132]	; (801234c <Appli_ConfigurationInfoDump+0x234>)
 80122c6:	f017 fa47 	bl	8029758 <iprintf>
#endif
  
#ifdef ENABLE_NEIGHBOR_TABLE
  TRACE_I(TF_MISC,"Neighbour Table is enabled \r\n");
 80122ca:	4821      	ldr	r0, [pc, #132]	; (8012350 <Appli_ConfigurationInfoDump+0x238>)
 80122cc:	f017 faca 	bl	8029864 <puts>
#endif
  
  TRACE_I(TF_MISC,"********************\r\n\r\n");  
 80122d0:	4820      	ldr	r0, [pc, #128]	; (8012354 <Appli_ConfigurationInfoDump+0x23c>)
 80122d2:	f017 fac7 	bl	8029864 <puts>

}
 80122d6:	bf00      	nop
 80122d8:	3708      	adds	r7, #8
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}
 80122de:	bf00      	nop
 80122e0:	0802f764 	.word	0x0802f764
 80122e4:	0802f77c 	.word	0x0802f77c
 80122e8:	0802f794 	.word	0x0802f794
 80122ec:	0802f7a8 	.word	0x0802f7a8
 80122f0:	0802f7bc 	.word	0x0802f7bc
 80122f4:	0802f7d0 	.word	0x0802f7d0
 80122f8:	0802f7e0 	.word	0x0802f7e0
 80122fc:	0802f7f4 	.word	0x0802f7f4
 8012300:	0802f808 	.word	0x0802f808
 8012304:	0802f824 	.word	0x0802f824
 8012308:	0802f838 	.word	0x0802f838
 801230c:	0802f84c 	.word	0x0802f84c
 8012310:	0802f868 	.word	0x0802f868
 8012314:	0802f884 	.word	0x0802f884
 8012318:	0802f8a4 	.word	0x0802f8a4
 801231c:	0802f8b8 	.word	0x0802f8b8
 8012320:	0802f8e0 	.word	0x0802f8e0
 8012324:	0802f908 	.word	0x0802f908
 8012328:	0802f91c 	.word	0x0802f91c
 801232c:	0802f950 	.word	0x0802f950
 8012330:	0802f960 	.word	0x0802f960
 8012334:	0802f978 	.word	0x0802f978
 8012338:	0802f990 	.word	0x0802f990
 801233c:	0802f9b0 	.word	0x0802f9b0
 8012340:	0802f9d4 	.word	0x0802f9d4
 8012344:	0802f9f0 	.word	0x0802f9f0
 8012348:	0802fa10 	.word	0x0802fa10
 801234c:	0802fa2c 	.word	0x0802fa2c
 8012350:	0802fa60 	.word	0x0802fa60
 8012354:	0802fa80 	.word	0x0802fa80

08012358 <Serial_RxCpltCallback>:
/**
 * @brief  DBG_TRACE USART Rx Transfer completed callback
 * @retval None
 */
static void Serial_RxCpltCallback( void )
{
 8012358:	b580      	push	{r7, lr}
 801235a:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 801235c:	4b24      	ldr	r3, [pc, #144]	; (80123f0 <Serial_RxCpltCallback+0x98>)
 801235e:	881b      	ldrh	r3, [r3, #0]
 8012360:	2bff      	cmp	r3, #255	; 0xff
 8012362:	d843      	bhi.n	80123ec <Serial_RxCpltCallback+0x94>
  {
    if (aRxBuffer[0] == '\r')
 8012364:	4b23      	ldr	r3, [pc, #140]	; (80123f4 <Serial_RxCpltCallback+0x9c>)
 8012366:	781b      	ldrb	r3, [r3, #0]
 8012368:	2b0d      	cmp	r3, #13
 801236a:	d10e      	bne.n	801238a <Serial_RxCpltCallback+0x32>
    {
      CommandString[indexReceiveChar] = 0; /* Make last char NULL for string comp */
 801236c:	4b20      	ldr	r3, [pc, #128]	; (80123f0 <Serial_RxCpltCallback+0x98>)
 801236e:	881b      	ldrh	r3, [r3, #0]
 8012370:	461a      	mov	r2, r3
 8012372:	4b21      	ldr	r3, [pc, #132]	; (80123f8 <Serial_RxCpltCallback+0xa0>)
 8012374:	2100      	movs	r1, #0
 8012376:	5499      	strb	r1, [r3, r2]
        
      TRACE_I(TF_SERIAL_PRINTS,"received %s\n", CommandString);
 8012378:	491f      	ldr	r1, [pc, #124]	; (80123f8 <Serial_RxCpltCallback+0xa0>)
 801237a:	4820      	ldr	r0, [pc, #128]	; (80123fc <Serial_RxCpltCallback+0xa4>)
 801237c:	f017 f9ec 	bl	8029758 <iprintf>
      
      UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_SERIAL_REQ_ID, CFG_SCH_PRIO_0);
 8012380:	2100      	movs	r1, #0
 8012382:	2010      	movs	r0, #16
 8012384:	f004 fc40 	bl	8016c08 <UTIL_SEQ_SetTask>
      CommandString[indexReceiveChar++] = aRxBuffer[0];
      UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
    }
  }

  return;
 8012388:	e030      	b.n	80123ec <Serial_RxCpltCallback+0x94>
    else if (aRxBuffer[0] == '\b')
 801238a:	4b1a      	ldr	r3, [pc, #104]	; (80123f4 <Serial_RxCpltCallback+0x9c>)
 801238c:	781b      	ldrb	r3, [r3, #0]
 801238e:	2b08      	cmp	r3, #8
 8012390:	d10e      	bne.n	80123b0 <Serial_RxCpltCallback+0x58>
      if (indexReceiveChar > 1)
 8012392:	4b17      	ldr	r3, [pc, #92]	; (80123f0 <Serial_RxCpltCallback+0x98>)
 8012394:	881b      	ldrh	r3, [r3, #0]
 8012396:	2b01      	cmp	r3, #1
 8012398:	d905      	bls.n	80123a6 <Serial_RxCpltCallback+0x4e>
        indexReceiveChar--;
 801239a:	4b15      	ldr	r3, [pc, #84]	; (80123f0 <Serial_RxCpltCallback+0x98>)
 801239c:	881b      	ldrh	r3, [r3, #0]
 801239e:	3b01      	subs	r3, #1
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	4b13      	ldr	r3, [pc, #76]	; (80123f0 <Serial_RxCpltCallback+0x98>)
 80123a4:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 80123a6:	2100      	movs	r1, #0
 80123a8:	2008      	movs	r0, #8
 80123aa:	f004 fc2d 	bl	8016c08 <UTIL_SEQ_SetTask>
  return;
 80123ae:	e01d      	b.n	80123ec <Serial_RxCpltCallback+0x94>
      if ((aRxBuffer[0] >= 'a') && (aRxBuffer[0] <= 'z'))
 80123b0:	4b10      	ldr	r3, [pc, #64]	; (80123f4 <Serial_RxCpltCallback+0x9c>)
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	2b60      	cmp	r3, #96	; 0x60
 80123b6:	d909      	bls.n	80123cc <Serial_RxCpltCallback+0x74>
 80123b8:	4b0e      	ldr	r3, [pc, #56]	; (80123f4 <Serial_RxCpltCallback+0x9c>)
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	2b7a      	cmp	r3, #122	; 0x7a
 80123be:	d805      	bhi.n	80123cc <Serial_RxCpltCallback+0x74>
        aRxBuffer[0] = aRxBuffer[0] + 'A' - 'a';
 80123c0:	4b0c      	ldr	r3, [pc, #48]	; (80123f4 <Serial_RxCpltCallback+0x9c>)
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	3b20      	subs	r3, #32
 80123c6:	b2da      	uxtb	r2, r3
 80123c8:	4b0a      	ldr	r3, [pc, #40]	; (80123f4 <Serial_RxCpltCallback+0x9c>)
 80123ca:	701a      	strb	r2, [r3, #0]
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 80123cc:	4b08      	ldr	r3, [pc, #32]	; (80123f0 <Serial_RxCpltCallback+0x98>)
 80123ce:	881b      	ldrh	r3, [r3, #0]
 80123d0:	1c5a      	adds	r2, r3, #1
 80123d2:	b291      	uxth	r1, r2
 80123d4:	4a06      	ldr	r2, [pc, #24]	; (80123f0 <Serial_RxCpltCallback+0x98>)
 80123d6:	8011      	strh	r1, [r2, #0]
 80123d8:	461a      	mov	r2, r3
 80123da:	4b06      	ldr	r3, [pc, #24]	; (80123f4 <Serial_RxCpltCallback+0x9c>)
 80123dc:	7819      	ldrb	r1, [r3, #0]
 80123de:	4b06      	ldr	r3, [pc, #24]	; (80123f8 <Serial_RxCpltCallback+0xa0>)
 80123e0:	5499      	strb	r1, [r3, r2]
      UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 80123e2:	2100      	movs	r1, #0
 80123e4:	2008      	movs	r0, #8
 80123e6:	f004 fc0f 	bl	8016c08 <UTIL_SEQ_SetTask>
  return;
 80123ea:	bf00      	nop
 80123ec:	bf00      	nop
 }
 80123ee:	bd80      	pop	{r7, pc}
 80123f0:	20004760 	.word	0x20004760
 80123f4:	20004658 	.word	0x20004658
 80123f8:	20004660 	.word	0x20004660
 80123fc:	0802fa98 	.word	0x0802fa98

08012400 <Serial_Uart_Rx_Task>:
/**
 * @brief  DBG_TRACE USART Rx Transfer completed callback
 * @retval None
 */
static void Serial_Uart_Rx_Task( void )
{
 8012400:	b580      	push	{r7, lr}
 8012402:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, Serial_RxCpltCallback);
 8012404:	4b03      	ldr	r3, [pc, #12]	; (8012414 <Serial_Uart_Rx_Task+0x14>)
 8012406:	2201      	movs	r2, #1
 8012408:	4903      	ldr	r1, [pc, #12]	; (8012418 <Serial_Uart_Rx_Task+0x18>)
 801240a:	2000      	movs	r0, #0
 801240c:	f7f0 fb24 	bl	8002a58 <HW_UART_Receive_IT>
}
 8012410:	bf00      	nop
 8012412:	bd80      	pop	{r7, pc}
 8012414:	08012359 	.word	0x08012359
 8012418:	20004658 	.word	0x20004658

0801241c <Serial_InterfaceProcess>:
* @brief  Processes data coming from serial port   
* @param  void  
* @retval void
*/
void Serial_InterfaceProcess(void)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	af00      	add	r7, sp, #0
  /* Reset button emulation state */
  button_emulation = 0;
 8012420:	4b4d      	ldr	r3, [pc, #308]	; (8012558 <Serial_InterfaceProcess+0x13c>)
 8012422:	2200      	movs	r2, #0
 8012424:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_SERIAL_CONTROL
  if (!strncmp((char const*)CommandString, "ATCL", 4))
 8012426:	2204      	movs	r2, #4
 8012428:	494c      	ldr	r1, [pc, #304]	; (801255c <Serial_InterfaceProcess+0x140>)
 801242a:	484d      	ldr	r0, [pc, #308]	; (8012560 <Serial_InterfaceProcess+0x144>)
 801242c:	f017 fa93 	bl	8029956 <strncmp>
 8012430:	4603      	mov	r3, r0
 8012432:	2b00      	cmp	r3, #0
 8012434:	d106      	bne.n	8012444 <Serial_InterfaceProcess+0x28>
  {            
    SerialCtrl_Process((char *)CommandString, indexReceiveChar);
 8012436:	4b4b      	ldr	r3, [pc, #300]	; (8012564 <Serial_InterfaceProcess+0x148>)
 8012438:	881b      	ldrh	r3, [r3, #0]
 801243a:	4619      	mov	r1, r3
 801243c:	4848      	ldr	r0, [pc, #288]	; (8012560 <Serial_InterfaceProcess+0x144>)
 801243e:	f000 fa97 	bl	8012970 <SerialCtrl_Process>
 8012442:	e07f      	b.n	8012544 <Serial_InterfaceProcess+0x128>
  }
  else if (!strncmp((char const*)CommandString, "ATVR", 4))
 8012444:	2204      	movs	r2, #4
 8012446:	4948      	ldr	r1, [pc, #288]	; (8012568 <Serial_InterfaceProcess+0x14c>)
 8012448:	4845      	ldr	r0, [pc, #276]	; (8012560 <Serial_InterfaceProcess+0x144>)
 801244a:	f017 fa84 	bl	8029956 <strncmp>
 801244e:	4603      	mov	r3, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	d106      	bne.n	8012462 <Serial_InterfaceProcess+0x46>
  {            
    SerialCtrlVendorRead_Process((char *)CommandString, indexReceiveChar);
 8012454:	4b43      	ldr	r3, [pc, #268]	; (8012564 <Serial_InterfaceProcess+0x148>)
 8012456:	881b      	ldrh	r3, [r3, #0]
 8012458:	4619      	mov	r1, r3
 801245a:	4841      	ldr	r0, [pc, #260]	; (8012560 <Serial_InterfaceProcess+0x144>)
 801245c:	f000 f924 	bl	80126a8 <SerialCtrlVendorRead_Process>
 8012460:	e070      	b.n	8012544 <Serial_InterfaceProcess+0x128>
  }
  else if (!strncmp((char const*)CommandString, "ATVW", 4))
 8012462:	2204      	movs	r2, #4
 8012464:	4941      	ldr	r1, [pc, #260]	; (801256c <Serial_InterfaceProcess+0x150>)
 8012466:	483e      	ldr	r0, [pc, #248]	; (8012560 <Serial_InterfaceProcess+0x144>)
 8012468:	f017 fa75 	bl	8029956 <strncmp>
 801246c:	4603      	mov	r3, r0
 801246e:	2b00      	cmp	r3, #0
 8012470:	d106      	bne.n	8012480 <Serial_InterfaceProcess+0x64>
  {            
    SerialCtrlVendorWrite_Process((char *)CommandString, indexReceiveChar);
 8012472:	4b3c      	ldr	r3, [pc, #240]	; (8012564 <Serial_InterfaceProcess+0x148>)
 8012474:	881b      	ldrh	r3, [r3, #0]
 8012476:	4619      	mov	r1, r3
 8012478:	4839      	ldr	r0, [pc, #228]	; (8012560 <Serial_InterfaceProcess+0x144>)
 801247a:	f000 f991 	bl	80127a0 <SerialCtrlVendorWrite_Process>
 801247e:	e061      	b.n	8012544 <Serial_InterfaceProcess+0x128>
  }
#endif
#if ENABLE_UT
  else if(!strncmp((char const*)CommandString, "ATUT", 4))
 8012480:	2204      	movs	r2, #4
 8012482:	493b      	ldr	r1, [pc, #236]	; (8012570 <Serial_InterfaceProcess+0x154>)
 8012484:	4836      	ldr	r0, [pc, #216]	; (8012560 <Serial_InterfaceProcess+0x144>)
 8012486:	f017 fa66 	bl	8029956 <strncmp>
 801248a:	4603      	mov	r3, r0
 801248c:	2b00      	cmp	r3, #0
 801248e:	d106      	bne.n	801249e <Serial_InterfaceProcess+0x82>
  {
    SerialUt_Process((char *)CommandString, indexReceiveChar);  
 8012490:	4b34      	ldr	r3, [pc, #208]	; (8012564 <Serial_InterfaceProcess+0x148>)
 8012492:	881b      	ldrh	r3, [r3, #0]
 8012494:	4619      	mov	r1, r3
 8012496:	4832      	ldr	r0, [pc, #200]	; (8012560 <Serial_InterfaceProcess+0x144>)
 8012498:	f000 fbc4 	bl	8012c24 <SerialUt_Process>
 801249c:	e052      	b.n	8012544 <Serial_InterfaceProcess+0x128>
  else if(!strncmp((char const*)CommandString, "ATLLC", 5))
  {
    Appli_Light_LC_SerialCmd((char *)CommandString, indexReceiveChar);
  }
#endif
  else if(!strncmp((char const*)CommandString, "SW1", 3))
 801249e:	2203      	movs	r2, #3
 80124a0:	4934      	ldr	r1, [pc, #208]	; (8012574 <Serial_InterfaceProcess+0x158>)
 80124a2:	482f      	ldr	r0, [pc, #188]	; (8012560 <Serial_InterfaceProcess+0x144>)
 80124a4:	f017 fa57 	bl	8029956 <strncmp>
 80124a8:	4603      	mov	r3, r0
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d10c      	bne.n	80124c8 <Serial_InterfaceProcess+0xac>
  {
    button_emulation = 1; /* Set the button emulation */
 80124ae:	4b2a      	ldr	r3, [pc, #168]	; (8012558 <Serial_InterfaceProcess+0x13c>)
 80124b0:	2201      	movs	r2, #1
 80124b2:	701a      	strb	r2, [r3, #0]
    TRACE_I(TF_SERIAL_PRINTS,"SW1 OK\r\n");
 80124b4:	4830      	ldr	r0, [pc, #192]	; (8012578 <Serial_InterfaceProcess+0x15c>)
 80124b6:	f017 f9d5 	bl	8029864 <puts>
    exti_handle.Line = EXTI_LINE_4;
 80124ba:	4b30      	ldr	r3, [pc, #192]	; (801257c <Serial_InterfaceProcess+0x160>)
 80124bc:	4a30      	ldr	r2, [pc, #192]	; (8012580 <Serial_InterfaceProcess+0x164>)
 80124be:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80124c0:	482e      	ldr	r0, [pc, #184]	; (801257c <Serial_InterfaceProcess+0x160>)
 80124c2:	f7f6 fa17 	bl	80088f4 <HAL_EXTI_GenerateSWI>
 80124c6:	e03d      	b.n	8012544 <Serial_InterfaceProcess+0x128>
  }
  else if(!strncmp((char const*)CommandString, "SW2", 3))
 80124c8:	2203      	movs	r2, #3
 80124ca:	492e      	ldr	r1, [pc, #184]	; (8012584 <Serial_InterfaceProcess+0x168>)
 80124cc:	4824      	ldr	r0, [pc, #144]	; (8012560 <Serial_InterfaceProcess+0x144>)
 80124ce:	f017 fa42 	bl	8029956 <strncmp>
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d10d      	bne.n	80124f4 <Serial_InterfaceProcess+0xd8>
  {
    button_emulation = 1; /* Set the button emulation */
 80124d8:	4b1f      	ldr	r3, [pc, #124]	; (8012558 <Serial_InterfaceProcess+0x13c>)
 80124da:	2201      	movs	r2, #1
 80124dc:	701a      	strb	r2, [r3, #0]
    TRACE_I(TF_SERIAL_PRINTS,"SW2 OK\r\n");
 80124de:	482a      	ldr	r0, [pc, #168]	; (8012588 <Serial_InterfaceProcess+0x16c>)
 80124e0:	f017 f9c0 	bl	8029864 <puts>
    exti_handle.Line = EXTI_LINE_0;
 80124e4:	4b25      	ldr	r3, [pc, #148]	; (801257c <Serial_InterfaceProcess+0x160>)
 80124e6:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80124ea:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80124ec:	4823      	ldr	r0, [pc, #140]	; (801257c <Serial_InterfaceProcess+0x160>)
 80124ee:	f7f6 fa01 	bl	80088f4 <HAL_EXTI_GenerateSWI>
 80124f2:	e027      	b.n	8012544 <Serial_InterfaceProcess+0x128>
  }
  else if(!strncmp((char const*)CommandString, "SW3", 3))
 80124f4:	2203      	movs	r2, #3
 80124f6:	4925      	ldr	r1, [pc, #148]	; (801258c <Serial_InterfaceProcess+0x170>)
 80124f8:	4819      	ldr	r0, [pc, #100]	; (8012560 <Serial_InterfaceProcess+0x144>)
 80124fa:	f017 fa2c 	bl	8029956 <strncmp>
 80124fe:	4603      	mov	r3, r0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d10c      	bne.n	801251e <Serial_InterfaceProcess+0x102>
  {
    button_emulation = 1; /* Set the button emulation */
 8012504:	4b14      	ldr	r3, [pc, #80]	; (8012558 <Serial_InterfaceProcess+0x13c>)
 8012506:	2201      	movs	r2, #1
 8012508:	701a      	strb	r2, [r3, #0]
    TRACE_I(TF_SERIAL_PRINTS,"SW3 OK\r\n");
 801250a:	4821      	ldr	r0, [pc, #132]	; (8012590 <Serial_InterfaceProcess+0x174>)
 801250c:	f017 f9aa 	bl	8029864 <puts>
    exti_handle.Line = EXTI_LINE_1;
 8012510:	4b1a      	ldr	r3, [pc, #104]	; (801257c <Serial_InterfaceProcess+0x160>)
 8012512:	4a20      	ldr	r2, [pc, #128]	; (8012594 <Serial_InterfaceProcess+0x178>)
 8012514:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8012516:	4819      	ldr	r0, [pc, #100]	; (801257c <Serial_InterfaceProcess+0x160>)
 8012518:	f7f6 f9ec 	bl	80088f4 <HAL_EXTI_GenerateSWI>
 801251c:	e012      	b.n	8012544 <Serial_InterfaceProcess+0x128>
  }

  else
  {
    TRACE_I(TF_SERIAL_PRINTS,"Not Entered valid test parameters\r\n");  
 801251e:	481e      	ldr	r0, [pc, #120]	; (8012598 <Serial_InterfaceProcess+0x17c>)
 8012520:	f017 f9a0 	bl	8029864 <puts>
    SerialCurrentState = STATE_IDLE;
 8012524:	4b1d      	ldr	r3, [pc, #116]	; (801259c <Serial_InterfaceProcess+0x180>)
 8012526:	2200      	movs	r2, #0
 8012528:	701a      	strb	r2, [r3, #0]
  }      
  while(indexReceiveChar)
 801252a:	e00b      	b.n	8012544 <Serial_InterfaceProcess+0x128>
  {
    CommandString[--indexReceiveChar] = 0;
 801252c:	4b0d      	ldr	r3, [pc, #52]	; (8012564 <Serial_InterfaceProcess+0x148>)
 801252e:	881b      	ldrh	r3, [r3, #0]
 8012530:	3b01      	subs	r3, #1
 8012532:	b29a      	uxth	r2, r3
 8012534:	4b0b      	ldr	r3, [pc, #44]	; (8012564 <Serial_InterfaceProcess+0x148>)
 8012536:	801a      	strh	r2, [r3, #0]
 8012538:	4b0a      	ldr	r3, [pc, #40]	; (8012564 <Serial_InterfaceProcess+0x148>)
 801253a:	881b      	ldrh	r3, [r3, #0]
 801253c:	461a      	mov	r2, r3
 801253e:	4b08      	ldr	r3, [pc, #32]	; (8012560 <Serial_InterfaceProcess+0x144>)
 8012540:	2100      	movs	r1, #0
 8012542:	5499      	strb	r1, [r3, r2]
  while(indexReceiveChar)
 8012544:	4b07      	ldr	r3, [pc, #28]	; (8012564 <Serial_InterfaceProcess+0x148>)
 8012546:	881b      	ldrh	r3, [r3, #0]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d1ef      	bne.n	801252c <Serial_InterfaceProcess+0x110>
  }
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 801254c:	2100      	movs	r1, #0
 801254e:	2008      	movs	r0, #8
 8012550:	f004 fb5a 	bl	8016c08 <UTIL_SEQ_SetTask>
}
 8012554:	bf00      	nop
 8012556:	bd80      	pop	{r7, pc}
 8012558:	20004654 	.word	0x20004654
 801255c:	0802faa8 	.word	0x0802faa8
 8012560:	20004660 	.word	0x20004660
 8012564:	20004760 	.word	0x20004760
 8012568:	0802fab0 	.word	0x0802fab0
 801256c:	0802fab8 	.word	0x0802fab8
 8012570:	0802fac0 	.word	0x0802fac0
 8012574:	0802fac8 	.word	0x0802fac8
 8012578:	0802facc 	.word	0x0802facc
 801257c:	200040e8 	.word	0x200040e8
 8012580:	16000004 	.word	0x16000004
 8012584:	0802fad4 	.word	0x0802fad4
 8012588:	0802fad8 	.word	0x0802fad8
 801258c:	0802fae0 	.word	0x0802fae0
 8012590:	0802fae4 	.word	0x0802fae4
 8012594:	16000001 	.word	0x16000001
 8012598:	0802faec 	.word	0x0802faec
 801259c:	20004655 	.word	0x20004655

080125a0 <Serial_CharToHexConvert>:
* @param  addr: input ASCI character
* @retval MOBLEUINT8
*/ 

MOBLEUINT8 Serial_CharToHexConvert(char addr)
{
 80125a0:	b480      	push	{r7}
 80125a2:	b085      	sub	sp, #20
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	4603      	mov	r3, r0
 80125a8:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT8 retVal=0;
 80125aa:	2300      	movs	r3, #0
 80125ac:	73fb      	strb	r3, [r7, #15]
  if (addr >= '0' && addr <= '9')
 80125ae:	79fb      	ldrb	r3, [r7, #7]
 80125b0:	2b2f      	cmp	r3, #47	; 0x2f
 80125b2:	d906      	bls.n	80125c2 <Serial_CharToHexConvert+0x22>
 80125b4:	79fb      	ldrb	r3, [r7, #7]
 80125b6:	2b39      	cmp	r3, #57	; 0x39
 80125b8:	d803      	bhi.n	80125c2 <Serial_CharToHexConvert+0x22>
        retVal = addr - '0';
 80125ba:	79fb      	ldrb	r3, [r7, #7]
 80125bc:	3b30      	subs	r3, #48	; 0x30
 80125be:	73fb      	strb	r3, [r7, #15]
 80125c0:	e01c      	b.n	80125fc <Serial_CharToHexConvert+0x5c>
  else if (addr >= 'a' && addr <= 'f')
 80125c2:	79fb      	ldrb	r3, [r7, #7]
 80125c4:	2b60      	cmp	r3, #96	; 0x60
 80125c6:	d906      	bls.n	80125d6 <Serial_CharToHexConvert+0x36>
 80125c8:	79fb      	ldrb	r3, [r7, #7]
 80125ca:	2b66      	cmp	r3, #102	; 0x66
 80125cc:	d803      	bhi.n	80125d6 <Serial_CharToHexConvert+0x36>
        retVal = addr+10-'a';
 80125ce:	79fb      	ldrb	r3, [r7, #7]
 80125d0:	3b57      	subs	r3, #87	; 0x57
 80125d2:	73fb      	strb	r3, [r7, #15]
 80125d4:	e012      	b.n	80125fc <Serial_CharToHexConvert+0x5c>
  else if (addr >= 'A' && addr <= 'F')
 80125d6:	79fb      	ldrb	r3, [r7, #7]
 80125d8:	2b40      	cmp	r3, #64	; 0x40
 80125da:	d906      	bls.n	80125ea <Serial_CharToHexConvert+0x4a>
 80125dc:	79fb      	ldrb	r3, [r7, #7]
 80125de:	2b46      	cmp	r3, #70	; 0x46
 80125e0:	d803      	bhi.n	80125ea <Serial_CharToHexConvert+0x4a>
        retVal = addr+10-'A';
 80125e2:	79fb      	ldrb	r3, [r7, #7]
 80125e4:	3b37      	subs	r3, #55	; 0x37
 80125e6:	73fb      	strb	r3, [r7, #15]
 80125e8:	e008      	b.n	80125fc <Serial_CharToHexConvert+0x5c>
  else if (addr == ' ')
 80125ea:	79fb      	ldrb	r3, [r7, #7]
 80125ec:	2b20      	cmp	r3, #32
 80125ee:	d103      	bne.n	80125f8 <Serial_CharToHexConvert+0x58>
        retVal = addr+10-' ';
 80125f0:	79fb      	ldrb	r3, [r7, #7]
 80125f2:	3b16      	subs	r3, #22
 80125f4:	73fb      	strb	r3, [r7, #15]
 80125f6:	e001      	b.n	80125fc <Serial_CharToHexConvert+0x5c>
  else
       return 0xFF;
 80125f8:	23ff      	movs	r3, #255	; 0xff
 80125fa:	e000      	b.n	80125fe <Serial_CharToHexConvert+0x5e>
    
  return retVal;
 80125fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3714      	adds	r7, #20
 8012602:	46bd      	mov	sp, r7
 8012604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012608:	4770      	bx	lr
	...

0801260c <Serial_Init>:
  * @brief  This function initialize the Rx from UART
  * @param  None
  * @retval None
  */
void Serial_Init(void)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	af00      	add	r7, sp, #0
  button_emulation = 0; /* Reset the button emulation state */
 8012610:	4b09      	ldr	r3, [pc, #36]	; (8012638 <Serial_Init+0x2c>)
 8012612:	2200      	movs	r2, #0
 8012614:	701a      	strb	r2, [r3, #0]

  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_SERIAL_REQ_ID, UTIL_SEQ_RFU, Serial_InterfaceProcess);
 8012616:	4a09      	ldr	r2, [pc, #36]	; (801263c <Serial_Init+0x30>)
 8012618:	2100      	movs	r1, #0
 801261a:	2010      	movs	r0, #16
 801261c:	f004 fad2 	bl	8016bc4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, UTIL_SEQ_RFU, Serial_Uart_Rx_Task );
 8012620:	4a07      	ldr	r2, [pc, #28]	; (8012640 <Serial_Init+0x34>)
 8012622:	2100      	movs	r1, #0
 8012624:	2008      	movs	r0, #8
 8012626:	f004 facd 	bl	8016bc4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 801262a:	2100      	movs	r1, #0
 801262c:	2008      	movs	r0, #8
 801262e:	f004 faeb 	bl	8016c08 <UTIL_SEQ_SetTask>

  return;
 8012632:	bf00      	nop
}
 8012634:	bd80      	pop	{r7, pc}
 8012636:	bf00      	nop
 8012638:	20004654 	.word	0x20004654
 801263c:	0801241d 	.word	0x0801241d
 8012640:	08012401 	.word	0x08012401

08012644 <BLEMesh_PrintStringCb>:
* @brief  Callback function to print data serially  
* @param  *message: Pointer of data string  
* @retval void
*/
void BLEMesh_PrintStringCb(const char *message)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b082      	sub	sp, #8
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
    TRACE_I(TF_SERIAL_PRINTS,"%s\n\r", (char*)message);
 801264c:	6879      	ldr	r1, [r7, #4]
 801264e:	4803      	ldr	r0, [pc, #12]	; (801265c <BLEMesh_PrintStringCb+0x18>)
 8012650:	f017 f882 	bl	8029758 <iprintf>
}
 8012654:	bf00      	nop
 8012656:	3708      	adds	r7, #8
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}
 801265c:	0802fb10 	.word	0x0802fb10

08012660 <BLEMesh_PrintDataCb>:
* @param  *data : Pointer to the data to be printed 
* @param  size : Length of data to be printed
* @retval void
*/
void BLEMesh_PrintDataCb(MOBLEUINT8* data, MOBLEUINT16 size)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b084      	sub	sp, #16
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	460b      	mov	r3, r1
 801266a:	807b      	strh	r3, [r7, #2]
    for (int count=0; count<size; ++count)
 801266c:	2300      	movs	r3, #0
 801266e:	60fb      	str	r3, [r7, #12]
 8012670:	e00a      	b.n	8012688 <BLEMesh_PrintDataCb+0x28>
    {
        TRACE_I(TF_SERIAL_PRINTS,"%02X", data[count]);
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	687a      	ldr	r2, [r7, #4]
 8012676:	4413      	add	r3, r2
 8012678:	781b      	ldrb	r3, [r3, #0]
 801267a:	4619      	mov	r1, r3
 801267c:	4808      	ldr	r0, [pc, #32]	; (80126a0 <BLEMesh_PrintDataCb+0x40>)
 801267e:	f017 f86b 	bl	8029758 <iprintf>
    for (int count=0; count<size; ++count)
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	3301      	adds	r3, #1
 8012686:	60fb      	str	r3, [r7, #12]
 8012688:	887b      	ldrh	r3, [r7, #2]
 801268a:	68fa      	ldr	r2, [r7, #12]
 801268c:	429a      	cmp	r2, r3
 801268e:	dbf0      	blt.n	8012672 <BLEMesh_PrintDataCb+0x12>
    }
    
    TRACE_I(TF_SERIAL_PRINTS,"\n\r");
 8012690:	4804      	ldr	r0, [pc, #16]	; (80126a4 <BLEMesh_PrintDataCb+0x44>)
 8012692:	f017 f861 	bl	8029758 <iprintf>
}
 8012696:	bf00      	nop
 8012698:	3710      	adds	r7, #16
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
 801269e:	bf00      	nop
 80126a0:	0802fb18 	.word	0x0802fb18
 80126a4:	0802fb20 	.word	0x0802fb20

080126a8 <SerialCtrlVendorRead_Process>:
* @param  rcvdStringBuff: buffer to store input string 
* @param  rcvdStringSize: length of the input string 
* @retval void
*/ 
void SerialCtrlVendorRead_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b08c      	sub	sp, #48	; 0x30
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	460b      	mov	r3, r1
 80126b2:	807b      	strh	r3, [r7, #2]
  MOBLEUINT16 command = 0;                          /*Opcode command to be executed by the destination node*/
 80126b4:	2300      	movs	r3, #0
 80126b6:	84bb      	strh	r3, [r7, #36]	; 0x24
  MOBLEUINT8 datalength = 0;
 80126b8:	2300      	movs	r3, #0
 80126ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MOBLEUINT8  data [10] = {0};                  /*buffer to output property variables */
 80126be:	2300      	movs	r3, #0
 80126c0:	61bb      	str	r3, [r7, #24]
 80126c2:	f107 031c 	add.w	r3, r7, #28
 80126c6:	2200      	movs	r2, #0
 80126c8:	601a      	str	r2, [r3, #0]
 80126ca:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result = MOBLE_RESULT_FAIL;
 80126cc:	2302      	movs	r3, #2
 80126ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  MODEL_MessageHeader_t msgHdr;
  
  /*Initializing the parameters*/
  msgHdr.elementIndex = 0;
 80126d2:	2300      	movs	r3, #0
 80126d4:	733b      	strb	r3, [r7, #12]
  msgHdr.peer_addr = 0;
 80126d6:	2300      	movs	r3, #0
 80126d8:	823b      	strh	r3, [r7, #16]
  msgHdr.dst_peer = 0;
 80126da:	2300      	movs	r3, #0
 80126dc:	827b      	strh	r3, [r7, #18]
  msgHdr.ttl = 0;
 80126de:	2300      	movs	r3, #0
 80126e0:	753b      	strb	r3, [r7, #20]
  msgHdr.rssi = 0;
 80126e2:	2300      	movs	r3, #0
 80126e4:	757b      	strb	r3, [r7, #21]
  msgHdr.rcvdAppKeyOffset = 0;
 80126e6:	2300      	movs	r3, #0
 80126e8:	75bb      	strb	r3, [r7, #22]
  msgHdr.rcvdNetKeyOffset = 0;
 80126ea:	2300      	movs	r3, #0
 80126ec:	75fb      	strb	r3, [r7, #23]
  
  sscanf(rcvdStringBuff+5, "%4hx %hx ", &msgHdr.dst_peer, &command); 
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	1d58      	adds	r0, r3, #5
 80126f2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80126f6:	f107 030c 	add.w	r3, r7, #12
 80126fa:	1d9a      	adds	r2, r3, #6
 80126fc:	460b      	mov	r3, r1
 80126fe:	4923      	ldr	r1, [pc, #140]	; (801278c <SerialCtrlVendorRead_Process+0xe4>)
 8012700:	f017 f8b8 	bl	8029874 <siscanf>
  
  for(int i = 0; i < 6 ; i++)
 8012704:	2300      	movs	r3, #0
 8012706:	62bb      	str	r3, [r7, #40]	; 0x28
 8012708:	e00d      	b.n	8012726 <SerialCtrlVendorRead_Process+0x7e>
  {
    if(command == Vendor_Opcodes_Table[i])
 801270a:	4a21      	ldr	r2, [pc, #132]	; (8012790 <SerialCtrlVendorRead_Process+0xe8>)
 801270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801270e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8012712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012714:	429a      	cmp	r2, r3
 8012716:	d103      	bne.n	8012720 <SerialCtrlVendorRead_Process+0x78>
    {                 
      result = MOBLE_RESULT_SUCCESS;
 8012718:	2300      	movs	r3, #0
 801271a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 801271e:	e005      	b.n	801272c <SerialCtrlVendorRead_Process+0x84>
  for(int i = 0; i < 6 ; i++)
 8012720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012722:	3301      	adds	r3, #1
 8012724:	62bb      	str	r3, [r7, #40]	; 0x28
 8012726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012728:	2b05      	cmp	r3, #5
 801272a:	ddee      	ble.n	801270a <SerialCtrlVendorRead_Process+0x62>
    }
  
  }
  
  datalength = SerialCtrl_GetData(rcvdStringBuff, rcvdStringSize, SERIAL_MODEL_DATA_OFFSET, data);
 801272c:	f107 0318 	add.w	r3, r7, #24
 8012730:	8879      	ldrh	r1, [r7, #2]
 8012732:	220f      	movs	r2, #15
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f000 f9fa 	bl	8012b2e <SerialCtrl_GetData>
 801273a:	4603      	mov	r3, r0
 801273c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  
  if(result)
 8012740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012744:	2b00      	cmp	r3, #0
 8012746:	d003      	beq.n	8012750 <SerialCtrlVendorRead_Process+0xa8>
  {
    TRACE_I(TF_SERIAL_PRINTS,"Invalid Command\r\n");
 8012748:	4812      	ldr	r0, [pc, #72]	; (8012794 <SerialCtrlVendorRead_Process+0xec>)
 801274a:	f017 f88b 	bl	8029864 <puts>
 801274e:	e01a      	b.n	8012786 <SerialCtrlVendorRead_Process+0xde>
    return;
  }
  
 else
  {
    msgHdr.peer_addr = BLEMesh_GetAddress();
 8012750:	f00a fc94 	bl	801d07c <BLEMesh_GetAddress>
 8012754:	4603      	mov	r3, r0
 8012756:	823b      	strh	r3, [r7, #16]
    result = BLEMesh_ReadRemoteData(&msgHdr,command, data, datalength);   
 8012758:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 801275a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801275e:	f107 0218 	add.w	r2, r7, #24
 8012762:	f107 000c 	add.w	r0, r7, #12
 8012766:	f012 ff8b 	bl	8025680 <BLEMesh_ReadRemoteData>
 801276a:	4603      	mov	r3, r0
 801276c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(result == MOBLE_RESULT_SUCCESS)
 8012770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012774:	2b00      	cmp	r3, #0
 8012776:	d103      	bne.n	8012780 <SerialCtrlVendorRead_Process+0xd8>
    {
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 8012778:	4807      	ldr	r0, [pc, #28]	; (8012798 <SerialCtrlVendorRead_Process+0xf0>)
 801277a:	f017 f873 	bl	8029864 <puts>
 801277e:	e002      	b.n	8012786 <SerialCtrlVendorRead_Process+0xde>
    }
    else
    {
      TRACE_I(TF_SERIAL_PRINTS,"Invalid Opcode Parameter\r\n");
 8012780:	4806      	ldr	r0, [pc, #24]	; (801279c <SerialCtrlVendorRead_Process+0xf4>)
 8012782:	f017 f86f 	bl	8029864 <puts>
    }
  }
   
}
 8012786:	3730      	adds	r7, #48	; 0x30
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}
 801278c:	0802fb24 	.word	0x0802fb24
 8012790:	200000a4 	.word	0x200000a4
 8012794:	0802fb30 	.word	0x0802fb30
 8012798:	0802fb44 	.word	0x0802fb44
 801279c:	0802fb64 	.word	0x0802fb64

080127a0 <SerialCtrlVendorWrite_Process>:


void SerialCtrlVendorWrite_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 80127a0:	b5b0      	push	{r4, r5, r7, lr}
 80127a2:	b09c      	sub	sp, #112	; 0x70
 80127a4:	af04      	add	r7, sp, #16
 80127a6:	6078      	str	r0, [r7, #4]
 80127a8:	460b      	mov	r3, r1
 80127aa:	807b      	strh	r3, [r7, #2]
  MOBLE_ADDRESS peer = 0;                               /*node adderess of the destination node*/
 80127ac:	2300      	movs	r3, #0
 80127ae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  MOBLEUINT16 command = 0;                              /*Opcode command to be executed by the destination node*/
 80127b2:	2300      	movs	r3, #0
 80127b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  MOBLEUINT8 elementIndex = 0;                          /*default element index*/  
 80127b8:	2300      	movs	r3, #0
 80127ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  MOBLE_RESULT result = MOBLE_RESULT_FAIL;
 80127be:	2302      	movs	r3, #2
 80127c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  MOBLEBOOL response = MOBLE_FALSE;
 80127c4:	2300      	movs	r3, #0
 80127c6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  MOBLEUINT8 data_buff[VENDOR_DATA_BUFFER_SIZE];
  MOBLEUINT16 idx=0;
 80127ca:	2300      	movs	r3, #0
 80127cc:	81fb      	strh	r3, [r7, #14]
  MOBLEUINT8 length;
  MOBLEUINT8 j = 1;
 80127ce:	2301      	movs	r3, #1
 80127d0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  
  sscanf(rcvdStringBuff+5, "%4hx %hx %hx", &peer,&command,&idx); 
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	1d58      	adds	r0, r3, #5
 80127d8:	f107 014e 	add.w	r1, r7, #78	; 0x4e
 80127dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80127e0:	f107 030e 	add.w	r3, r7, #14
 80127e4:	9300      	str	r3, [sp, #0]
 80127e6:	460b      	mov	r3, r1
 80127e8:	495c      	ldr	r1, [pc, #368]	; (801295c <SerialCtrlVendorWrite_Process+0x1bc>)
 80127ea:	f017 f843 	bl	8029874 <siscanf>
  
  if(command == 0x000E)
 80127ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80127f2:	2b0e      	cmp	r3, #14
 80127f4:	d165      	bne.n	80128c2 <SerialCtrlVendorWrite_Process+0x122>
  {
    /* Check parameter if data to be send continuously */
    if (idx == 0xFF)
 80127f6:	89fb      	ldrh	r3, [r7, #14]
 80127f8:	2bff      	cmp	r3, #255	; 0xff
 80127fa:	d12f      	bne.n	801285c <SerialCtrlVendorWrite_Process+0xbc>
    {
      data_buff[0] = 0x01;     /*  data write sub command; */
 80127fc:	2301      	movs	r3, #1
 80127fe:	743b      	strb	r3, [r7, #16]
      length = sizeof(data_buff)-1;
 8012800:	233b      	movs	r3, #59	; 0x3b
 8012802:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      for(MOBLEUINT8 i=1;i <sizeof(data_buff);i++)
 8012806:	2301      	movs	r3, #1
 8012808:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 801280c:	e011      	b.n	8012832 <SerialCtrlVendorWrite_Process+0x92>
      {
        data_buff[j] = i;
 801280e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8012812:	3360      	adds	r3, #96	; 0x60
 8012814:	443b      	add	r3, r7
 8012816:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801281a:	f803 2c50 	strb.w	r2, [r3, #-80]
        j++;
 801281e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8012822:	3301      	adds	r3, #1
 8012824:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
      for(MOBLEUINT8 i=1;i <sizeof(data_buff);i++)
 8012828:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801282c:	3301      	adds	r3, #1
 801282e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8012832:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8012836:	2b3b      	cmp	r3, #59	; 0x3b
 8012838:	d9e9      	bls.n	801280e <SerialCtrlVendorWrite_Process+0x6e>
      }
      Appli_Vendor_SetBigDataPacket(data_buff, length, elementIndex , peer);
 801283a:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 801283e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8012842:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8012846:	f107 0010 	add.w	r0, r7, #16
 801284a:	f7f4 fb65 	bl	8006f18 <Appli_Vendor_SetBigDataPacket>
      Vendor_SendDataFreq(0xFF);
 801284e:	20ff      	movs	r0, #255	; 0xff
 8012850:	f001 fcaa 	bl	80141a8 <Vendor_SendDataFreq>
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 8012854:	4842      	ldr	r0, [pc, #264]	; (8012960 <SerialCtrlVendorWrite_Process+0x1c0>)
 8012856:	f017 f805 	bl	8029864 <puts>
      return;
 801285a:	e07b      	b.n	8012954 <SerialCtrlVendorWrite_Process+0x1b4>
    }
    /* Check parameter if continuously data send operation need to stop  */
    else if (idx == 0x00)
 801285c:	89fb      	ldrh	r3, [r7, #14]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d109      	bne.n	8012876 <SerialCtrlVendorWrite_Process+0xd6>
    {
#if USE_STM32WB5M_DK
      LED_Off();
#else
      BSP_LED_Off(LED_BLUE); 
 8012862:	2000      	movs	r0, #0
 8012864:	f7f5 f982 	bl	8007b6c <BSP_LED_Off>
#endif
      Vendor_SendDataFreq(0x00);
 8012868:	2000      	movs	r0, #0
 801286a:	f001 fc9d 	bl	80141a8 <Vendor_SendDataFreq>
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 801286e:	483c      	ldr	r0, [pc, #240]	; (8012960 <SerialCtrlVendorWrite_Process+0x1c0>)
 8012870:	f016 fff8 	bl	8029864 <puts>
      return;
 8012874:	e06e      	b.n	8012954 <SerialCtrlVendorWrite_Process+0x1b4>
    }
    /* Data will be sent only once */
    else
    {
      data_buff[0] = 0x01;     /*  data write sub command; */
 8012876:	2301      	movs	r3, #1
 8012878:	743b      	strb	r3, [r7, #16]
      length = sizeof(data_buff)-idx;
 801287a:	89fb      	ldrh	r3, [r7, #14]
 801287c:	b2db      	uxtb	r3, r3
 801287e:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8012882:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      Vendor_SendDataFreq(0x00); /* To stop sending packets periodically */
 8012886:	2000      	movs	r0, #0
 8012888:	f001 fc8e 	bl	80141a8 <Vendor_SendDataFreq>
      for(MOBLEUINT8 i=idx;i <sizeof(data_buff);i++)
 801288c:	89fb      	ldrh	r3, [r7, #14]
 801288e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8012892:	e011      	b.n	80128b8 <SerialCtrlVendorWrite_Process+0x118>
      {
        data_buff[j] = i;
 8012894:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8012898:	3360      	adds	r3, #96	; 0x60
 801289a:	443b      	add	r3, r7
 801289c:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80128a0:	f803 2c50 	strb.w	r2, [r3, #-80]
        j++;
 80128a4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80128a8:	3301      	adds	r3, #1
 80128aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
      for(MOBLEUINT8 i=idx;i <sizeof(data_buff);i++)
 80128ae:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80128b2:	3301      	adds	r3, #1
 80128b4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80128b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80128bc:	2b3b      	cmp	r3, #59	; 0x3b
 80128be:	d9e9      	bls.n	8012894 <SerialCtrlVendorWrite_Process+0xf4>
 80128c0:	e009      	b.n	80128d6 <SerialCtrlVendorWrite_Process+0x136>
      }
    }
  }
  else
  {
    length = SerialCtrl_GetData(rcvdStringBuff, rcvdStringSize, SERIAL_MODEL_DATA_OFFSET, data_buff);
 80128c2:	f107 0310 	add.w	r3, r7, #16
 80128c6:	8879      	ldrh	r1, [r7, #2]
 80128c8:	220f      	movs	r2, #15
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f000 f92f 	bl	8012b2e <SerialCtrl_GetData>
 80128d0:	4603      	mov	r3, r0
 80128d2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  }
  
  for(int i = 0; i < 6 ; i++)
 80128d6:	2300      	movs	r3, #0
 80128d8:	657b      	str	r3, [r7, #84]	; 0x54
 80128da:	e00e      	b.n	80128fa <SerialCtrlVendorWrite_Process+0x15a>
  {
    if(command == Vendor_Opcodes_Table[i])
 80128dc:	4a21      	ldr	r2, [pc, #132]	; (8012964 <SerialCtrlVendorWrite_Process+0x1c4>)
 80128de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128e0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80128e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d103      	bne.n	80128f4 <SerialCtrlVendorWrite_Process+0x154>
    {                 
      result = MOBLE_RESULT_SUCCESS;
 80128ec:	2300      	movs	r3, #0
 80128ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      break;
 80128f2:	e005      	b.n	8012900 <SerialCtrlVendorWrite_Process+0x160>
  for(int i = 0; i < 6 ; i++)
 80128f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128f6:	3301      	adds	r3, #1
 80128f8:	657b      	str	r3, [r7, #84]	; 0x54
 80128fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128fc:	2b05      	cmp	r3, #5
 80128fe:	dded      	ble.n	80128dc <SerialCtrlVendorWrite_Process+0x13c>
    }
  }
  if(result)
 8012900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012904:	2b00      	cmp	r3, #0
 8012906:	d003      	beq.n	8012910 <SerialCtrlVendorWrite_Process+0x170>
  {
    TRACE_I(TF_SERIAL_PRINTS,"Invalid Command\r\n");
 8012908:	4817      	ldr	r0, [pc, #92]	; (8012968 <SerialCtrlVendorWrite_Process+0x1c8>)
 801290a:	f016 ffab 	bl	8029864 <puts>
    return;
 801290e:	e021      	b.n	8012954 <SerialCtrlVendorWrite_Process+0x1b4>
  
  else
  {
      
    /* Publish to the peer address, that can be a group address */
    result = BLEMesh_SetRemoteData(peer,
 8012910:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 8012914:	f8b7 404e 	ldrh.w	r4, [r7, #78]	; 0x4e
 8012918:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801291c:	f107 0510 	add.w	r5, r7, #16
 8012920:	f897 1053 	ldrb.w	r1, [r7, #83]	; 0x53
 8012924:	2201      	movs	r2, #1
 8012926:	9202      	str	r2, [sp, #8]
 8012928:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 801292c:	9201      	str	r2, [sp, #4]
 801292e:	9300      	str	r3, [sp, #0]
 8012930:	462b      	mov	r3, r5
 8012932:	4622      	mov	r2, r4
 8012934:	f015 fe00 	bl	8028538 <BLEMesh_SetRemoteData>
 8012938:	4603      	mov	r3, r0
 801293a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                   data_buff, 
                                   length,
                                   response, 
                                   MOBLE_TRUE);   

    if(result == MOBLE_RESULT_SUCCESS)
 801293e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012942:	2b00      	cmp	r3, #0
 8012944:	d103      	bne.n	801294e <SerialCtrlVendorWrite_Process+0x1ae>
    {
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 8012946:	4806      	ldr	r0, [pc, #24]	; (8012960 <SerialCtrlVendorWrite_Process+0x1c0>)
 8012948:	f016 ff8c 	bl	8029864 <puts>
 801294c:	e002      	b.n	8012954 <SerialCtrlVendorWrite_Process+0x1b4>
    }
    else
    {
      TRACE_I(TF_SERIAL_PRINTS,"Invalid Opcode Parameter\r\n");
 801294e:	4807      	ldr	r0, [pc, #28]	; (801296c <SerialCtrlVendorWrite_Process+0x1cc>)
 8012950:	f016 ff88 	bl	8029864 <puts>
    }
  }
}
 8012954:	3760      	adds	r7, #96	; 0x60
 8012956:	46bd      	mov	sp, r7
 8012958:	bdb0      	pop	{r4, r5, r7, pc}
 801295a:	bf00      	nop
 801295c:	0802fb80 	.word	0x0802fb80
 8012960:	0802fb44 	.word	0x0802fb44
 8012964:	200000a4 	.word	0x200000a4
 8012968:	0802fb30 	.word	0x0802fb30
 801296c:	0802fb64 	.word	0x0802fb64

08012970 <SerialCtrl_Process>:
  

void SerialCtrl_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 8012970:	b5b0      	push	{r4, r5, r7, lr}
 8012972:	b08c      	sub	sp, #48	; 0x30
 8012974:	af04      	add	r7, sp, #16
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	460b      	mov	r3, r1
 801297a:	807b      	strh	r3, [r7, #2]
  MOBLE_ADDRESS peer = 0;                               /*node adderess of the destination node*/
 801297c:	2300      	movs	r3, #0
 801297e:	837b      	strh	r3, [r7, #26]
  MOBLEUINT16 command = 0;                              /*Opcode command to be executed by the destination node*/
 8012980:	2300      	movs	r3, #0
 8012982:	833b      	strh	r3, [r7, #24]
  MOBLEUINT8 minParamLength = 0;                        /*minimum number of properties required by a specific command*/
 8012984:	2300      	movs	r3, #0
 8012986:	77fb      	strb	r3, [r7, #31]
  MOBLEUINT8 elementIndex = 0;                          /*default element index*/
 8012988:	2300      	movs	r3, #0
 801298a:	77bb      	strb	r3, [r7, #30]
  MOBLEUINT8  data [10] = {0};                          /*buffer to output property variables */
 801298c:	2300      	movs	r3, #0
 801298e:	60fb      	str	r3, [r7, #12]
 8012990:	f107 0310 	add.w	r3, r7, #16
 8012994:	2200      	movs	r2, #0
 8012996:	601a      	str	r2, [r3, #0]
 8012998:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result;
  MOBLEBOOL response = MOBLE_TRUE;
 801299a:	2301      	movs	r3, #1
 801299c:	777b      	strb	r3, [r7, #29]
  
  sscanf(rcvdStringBuff+5, "%4hx %hx ", &peer,&command); 
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	1d58      	adds	r0, r3, #5
 80129a2:	f107 0318 	add.w	r3, r7, #24
 80129a6:	f107 021a 	add.w	r2, r7, #26
 80129aa:	493c      	ldr	r1, [pc, #240]	; (8012a9c <SerialCtrl_Process+0x12c>)
 80129ac:	f016 ff62 	bl	8029874 <siscanf>
  
  /* Callback to store a pointer to Opcode table starting sddress and length of the table*/
#ifdef ENABLE_GENERIC_MODEL_SERVER  
  GenericModelServer_GetOpcodeTableCb(&Generic_OpcodeTable,&Generic_OpcodeTableLength);
 80129b0:	493b      	ldr	r1, [pc, #236]	; (8012aa0 <SerialCtrl_Process+0x130>)
 80129b2:	483c      	ldr	r0, [pc, #240]	; (8012aa4 <SerialCtrl_Process+0x134>)
 80129b4:	f7fb ff32 	bl	800e81c <GenericModelServer_GetOpcodeTableCb>
#ifdef ENABLE_GENERIC_MODEL_CLIENT
  GenericModelClient_GetOpcodeTableCb(&Generic_OpcodeTable,&Generic_OpcodeTableLength);
#endif
#endif
#ifdef ENABLE_LIGHT_MODEL_SERVER  
  LightModelServer_GetOpcodeTableCb(&Light_OpcodeTable,&Light_OpcodeTableLength);     
 80129b8:	493b      	ldr	r1, [pc, #236]	; (8012aa8 <SerialCtrl_Process+0x138>)
 80129ba:	483c      	ldr	r0, [pc, #240]	; (8012aac <SerialCtrl_Process+0x13c>)
 80129bc:	f7fd fb8a 	bl	80100d4 <LightModelServer_GetOpcodeTableCb>
  LightLcServer_GetOpcodeTableCb(&LightLC_OpcodeTable,&LightLC_OpcodeTableLength);
 80129c0:	493b      	ldr	r1, [pc, #236]	; (8012ab0 <SerialCtrl_Process+0x140>)
 80129c2:	483c      	ldr	r0, [pc, #240]	; (8012ab4 <SerialCtrl_Process+0x144>)
 80129c4:	f000 fe0f 	bl	80135e6 <LightLcServer_GetOpcodeTableCb>
  SensorsModelClient_GetOpcodeTableCb(&Sensor_OpcodeTable,&Sensor_OpcodeTableLength);
#endif
#endif
  
  /* Minimum parameter length required for a valid opcade in Generic opcode table */
  minParamLength = SerialCtrl_GetMinParamLength(command,
 80129c8:	8b3b      	ldrh	r3, [r7, #24]
 80129ca:	4618      	mov	r0, r3
 80129cc:	4b35      	ldr	r3, [pc, #212]	; (8012aa4 <SerialCtrl_Process+0x134>)
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	4a33      	ldr	r2, [pc, #204]	; (8012aa0 <SerialCtrl_Process+0x130>)
 80129d2:	8812      	ldrh	r2, [r2, #0]
 80129d4:	4619      	mov	r1, r3
 80129d6:	f000 f87b 	bl	8012ad0 <SerialCtrl_GetMinParamLength>
 80129da:	4603      	mov	r3, r0
 80129dc:	77fb      	strb	r3, [r7, #31]
                                                Generic_OpcodeTable,
                                                Generic_OpcodeTableLength);
  
  /* Opcode not found in Generic opcode table 
      Start finding for opcode in Light Table*/
  if (minParamLength == 0xff)
 80129de:	7ffb      	ldrb	r3, [r7, #31]
 80129e0:	2bff      	cmp	r3, #255	; 0xff
 80129e2:	d10a      	bne.n	80129fa <SerialCtrl_Process+0x8a>
  {
    minParamLength = SerialCtrl_GetMinParamLength(command,
 80129e4:	8b3b      	ldrh	r3, [r7, #24]
 80129e6:	4618      	mov	r0, r3
 80129e8:	4b30      	ldr	r3, [pc, #192]	; (8012aac <SerialCtrl_Process+0x13c>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	4a2e      	ldr	r2, [pc, #184]	; (8012aa8 <SerialCtrl_Process+0x138>)
 80129ee:	8812      	ldrh	r2, [r2, #0]
 80129f0:	4619      	mov	r1, r3
 80129f2:	f000 f86d 	bl	8012ad0 <SerialCtrl_GetMinParamLength>
 80129f6:	4603      	mov	r3, r0
 80129f8:	77fb      	strb	r3, [r7, #31]
                                                  Light_OpcodeTable,
                                                  Light_OpcodeTableLength);
  }
  /* Opcode not found in Light opcode table
      Start finding for opcode in Light LC Table*/
  if (minParamLength == 0xff)
 80129fa:	7ffb      	ldrb	r3, [r7, #31]
 80129fc:	2bff      	cmp	r3, #255	; 0xff
 80129fe:	d10a      	bne.n	8012a16 <SerialCtrl_Process+0xa6>
  {
    minParamLength = SerialCtrl_GetMinParamLength(command,
 8012a00:	8b3b      	ldrh	r3, [r7, #24]
 8012a02:	4618      	mov	r0, r3
 8012a04:	4b2b      	ldr	r3, [pc, #172]	; (8012ab4 <SerialCtrl_Process+0x144>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	4a29      	ldr	r2, [pc, #164]	; (8012ab0 <SerialCtrl_Process+0x140>)
 8012a0a:	8812      	ldrh	r2, [r2, #0]
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	f000 f85f 	bl	8012ad0 <SerialCtrl_GetMinParamLength>
 8012a12:	4603      	mov	r3, r0
 8012a14:	77fb      	strb	r3, [r7, #31]
                                                 LightLC_OpcodeTableLength);

  }
  /* Opcode not found in Light LC opcode table 
      Start finding for opcode in Sensor Table*/
  if (minParamLength == 0xff)
 8012a16:	7ffb      	ldrb	r3, [r7, #31]
 8012a18:	2bff      	cmp	r3, #255	; 0xff
 8012a1a:	d10f      	bne.n	8012a3c <SerialCtrl_Process+0xcc>
  {
    minParamLength = SerialCtrl_GetMinParamLength(command,
 8012a1c:	8b3b      	ldrh	r3, [r7, #24]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	4b25      	ldr	r3, [pc, #148]	; (8012ab8 <SerialCtrl_Process+0x148>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4a25      	ldr	r2, [pc, #148]	; (8012abc <SerialCtrl_Process+0x14c>)
 8012a26:	8812      	ldrh	r2, [r2, #0]
 8012a28:	4619      	mov	r1, r3
 8012a2a:	f000 f851 	bl	8012ad0 <SerialCtrl_GetMinParamLength>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	77fb      	strb	r3, [r7, #31]
                                                  Sensor_OpcodeTable,
                                                  Sensor_OpcodeTableLength);
    
    TRACE_I(TF_SERIAL_PRINTS, "Min Parameter Length after sensor model check %d\r\n", 
 8012a32:	7ffb      	ldrb	r3, [r7, #31]
 8012a34:	4619      	mov	r1, r3
 8012a36:	4822      	ldr	r0, [pc, #136]	; (8012ac0 <SerialCtrl_Process+0x150>)
 8012a38:	f016 fe8e 	bl	8029758 <iprintf>
                             minParamLength);
  }
  
  if (minParamLength != 0xff) /* Opcode found in one of the models */ 
 8012a3c:	7ffb      	ldrb	r3, [r7, #31]
 8012a3e:	2bff      	cmp	r3, #255	; 0xff
 8012a40:	d024      	beq.n	8012a8c <SerialCtrl_Process+0x11c>
  {
    minParamLength = SerialCtrl_GetData(rcvdStringBuff, 
 8012a42:	f107 030c 	add.w	r3, r7, #12
 8012a46:	8879      	ldrh	r1, [r7, #2]
 8012a48:	220f      	movs	r2, #15
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f000 f86f 	bl	8012b2e <SerialCtrl_GetData>
 8012a50:	4603      	mov	r3, r0
 8012a52:	77fb      	strb	r3, [r7, #31]
                                        rcvdStringSize, 
                                        SERIAL_MODEL_DATA_OFFSET, 
                                        data);

    result = BLEMesh_SetRemoteData(peer,
 8012a54:	8b78      	ldrh	r0, [r7, #26]
 8012a56:	8b3c      	ldrh	r4, [r7, #24]
 8012a58:	7ffb      	ldrb	r3, [r7, #31]
 8012a5a:	f107 050c 	add.w	r5, r7, #12
 8012a5e:	7fb9      	ldrb	r1, [r7, #30]
 8012a60:	2200      	movs	r2, #0
 8012a62:	9202      	str	r2, [sp, #8]
 8012a64:	7f7a      	ldrb	r2, [r7, #29]
 8012a66:	9201      	str	r2, [sp, #4]
 8012a68:	9300      	str	r3, [sp, #0]
 8012a6a:	462b      	mov	r3, r5
 8012a6c:	4622      	mov	r2, r4
 8012a6e:	f015 fd63 	bl	8028538 <BLEMesh_SetRemoteData>
 8012a72:	4603      	mov	r3, r0
 8012a74:	773b      	strb	r3, [r7, #28]
                                   command, 
                                   data, 
                                   minParamLength,
                                   response, 
                                   MOBLE_FALSE);   
    if(result == MOBLE_RESULT_SUCCESS)
 8012a76:	7f3b      	ldrb	r3, [r7, #28]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d103      	bne.n	8012a84 <SerialCtrl_Process+0x114>
    {
      TRACE_I(TF_SERIAL_PRINTS, "Command Executed Successfully\r\n");
 8012a7c:	4811      	ldr	r0, [pc, #68]	; (8012ac4 <SerialCtrl_Process+0x154>)
 8012a7e:	f016 fef1 	bl	8029864 <puts>
  }
  else
  {
    TRACE_I(TF_SERIAL_PRINTS, "Unknown Opcode\r\n");
  }
}
 8012a82:	e006      	b.n	8012a92 <SerialCtrl_Process+0x122>
      TRACE_I(TF_SERIAL_PRINTS, "Invalid Opcode Parameter\r\n");
 8012a84:	4810      	ldr	r0, [pc, #64]	; (8012ac8 <SerialCtrl_Process+0x158>)
 8012a86:	f016 feed 	bl	8029864 <puts>
}
 8012a8a:	e002      	b.n	8012a92 <SerialCtrl_Process+0x122>
    TRACE_I(TF_SERIAL_PRINTS, "Unknown Opcode\r\n");
 8012a8c:	480f      	ldr	r0, [pc, #60]	; (8012acc <SerialCtrl_Process+0x15c>)
 8012a8e:	f016 fee9 	bl	8029864 <puts>
}
 8012a92:	bf00      	nop
 8012a94:	3720      	adds	r7, #32
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bdb0      	pop	{r4, r5, r7, pc}
 8012a9a:	bf00      	nop
 8012a9c:	0802fb24 	.word	0x0802fb24
 8012aa0:	20004776 	.word	0x20004776
 8012aa4:	20004768 	.word	0x20004768
 8012aa8:	20004774 	.word	0x20004774
 8012aac:	20004764 	.word	0x20004764
 8012ab0:	20004778 	.word	0x20004778
 8012ab4:	2000476c 	.word	0x2000476c
 8012ab8:	20004770 	.word	0x20004770
 8012abc:	2000477a 	.word	0x2000477a
 8012ac0:	0802fb90 	.word	0x0802fb90
 8012ac4:	0802fb44 	.word	0x0802fb44
 8012ac8:	0802fb64 	.word	0x0802fb64
 8012acc:	0802fbc4 	.word	0x0802fbc4

08012ad0 <SerialCtrl_GetMinParamLength>:
* @param  list: 
* @param  length:  
* @retval MOBLEUINT16
*/ 
MOBLEUINT8 SerialCtrl_GetMinParamLength(MOBLEUINT32 opcode, const MODEL_OpcodeTableParam_t list[], MOBLEUINT16 length)
{
 8012ad0:	b480      	push	{r7}
 8012ad2:	b087      	sub	sp, #28
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	60f8      	str	r0, [r7, #12]
 8012ad8:	60b9      	str	r1, [r7, #8]
 8012ada:	4613      	mov	r3, r2
 8012adc:	80fb      	strh	r3, [r7, #6]
  for (int i = 0; i < length; i++)
 8012ade:	2300      	movs	r3, #0
 8012ae0:	617b      	str	r3, [r7, #20]
 8012ae2:	e019      	b.n	8012b18 <SerialCtrl_GetMinParamLength+0x48>
  {
    if (list[i].opcode == opcode)
 8012ae4:	697a      	ldr	r2, [r7, #20]
 8012ae6:	4613      	mov	r3, r2
 8012ae8:	005b      	lsls	r3, r3, #1
 8012aea:	4413      	add	r3, r2
 8012aec:	009b      	lsls	r3, r3, #2
 8012aee:	461a      	mov	r2, r3
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	4413      	add	r3, r2
 8012af4:	885b      	ldrh	r3, [r3, #2]
 8012af6:	461a      	mov	r2, r3
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	4293      	cmp	r3, r2
 8012afc:	d109      	bne.n	8012b12 <SerialCtrl_GetMinParamLength+0x42>
    {
      return list[i].min_payload_size;
 8012afe:	697a      	ldr	r2, [r7, #20]
 8012b00:	4613      	mov	r3, r2
 8012b02:	005b      	lsls	r3, r3, #1
 8012b04:	4413      	add	r3, r2
 8012b06:	009b      	lsls	r3, r3, #2
 8012b08:	461a      	mov	r2, r3
 8012b0a:	68bb      	ldr	r3, [r7, #8]
 8012b0c:	4413      	add	r3, r2
 8012b0e:	795b      	ldrb	r3, [r3, #5]
 8012b10:	e007      	b.n	8012b22 <SerialCtrl_GetMinParamLength+0x52>
  for (int i = 0; i < length; i++)
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	3301      	adds	r3, #1
 8012b16:	617b      	str	r3, [r7, #20]
 8012b18:	88fb      	ldrh	r3, [r7, #6]
 8012b1a:	697a      	ldr	r2, [r7, #20]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	dbe1      	blt.n	8012ae4 <SerialCtrl_GetMinParamLength+0x14>
    }
  }
  return 0xff;
 8012b20:	23ff      	movs	r3, #255	; 0xff
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	371c      	adds	r7, #28
 8012b26:	46bd      	mov	sp, r7
 8012b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2c:	4770      	bx	lr

08012b2e <SerialCtrl_GetData>:
* @param  data: Output array comprising of Data
* @param  dataIndex:  
* @retval MOBLEUINT8
*/
MOBLEUINT8 SerialCtrl_GetData(char *rcvdStringBuff, uint16_t rcvdStringSize, MOBLEUINT8 dataOffset, MOBLEUINT8  *data)
{
 8012b2e:	b580      	push	{r7, lr}
 8012b30:	b08c      	sub	sp, #48	; 0x30
 8012b32:	af00      	add	r7, sp, #0
 8012b34:	60f8      	str	r0, [r7, #12]
 8012b36:	607b      	str	r3, [r7, #4]
 8012b38:	460b      	mov	r3, r1
 8012b3a:	817b      	strh	r3, [r7, #10]
 8012b3c:	4613      	mov	r3, r2
 8012b3e:	727b      	strb	r3, [r7, #9]
  MOBLEUINT8 byteBuff[10] = {0};
 8012b40:	2300      	movs	r3, #0
 8012b42:	613b      	str	r3, [r7, #16]
 8012b44:	f107 0314 	add.w	r3, r7, #20
 8012b48:	2200      	movs	r2, #0
 8012b4a:	601a      	str	r2, [r3, #0]
 8012b4c:	809a      	strh	r2, [r3, #4]
  MOBLEUINT8 dataIndex = 0;
 8012b4e:	2300      	movs	r3, #0
 8012b50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  int msb, lsb, byteCounter=0;           
 8012b54:	2300      	movs	r3, #0
 8012b56:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=dataOffset ; i<=(rcvdStringSize) ; i++)
 8012b58:	7a7b      	ldrb	r3, [r7, #9]
 8012b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8012b5c:	e058      	b.n	8012c10 <SerialCtrl_GetData+0xe2>
  {
    /* check if space or NULL found */
    if(rcvdStringBuff[i] == ' '||rcvdStringBuff[i] == '\0' )
 8012b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b60:	68fa      	ldr	r2, [r7, #12]
 8012b62:	4413      	add	r3, r2
 8012b64:	781b      	ldrb	r3, [r3, #0]
 8012b66:	2b20      	cmp	r3, #32
 8012b68:	d017      	beq.n	8012b9a <SerialCtrl_GetData+0x6c>
 8012b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6c:	68fa      	ldr	r2, [r7, #12]
 8012b6e:	4413      	add	r3, r2
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d115      	bne.n	8012ba2 <SerialCtrl_GetData+0x74>
    {
      /*if number of bytes is one*/
      while(byteCounter > 0)
 8012b76:	e010      	b.n	8012b9a <SerialCtrl_GetData+0x6c>
      {
        data[dataIndex++] = byteBuff[--byteCounter];
 8012b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b7a:	3b01      	subs	r3, #1
 8012b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8012b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b82:	1c5a      	adds	r2, r3, #1
 8012b84:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8012b88:	461a      	mov	r2, r3
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	4413      	add	r3, r2
 8012b8e:	f107 0110 	add.w	r1, r7, #16
 8012b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b94:	440a      	add	r2, r1
 8012b96:	7812      	ldrb	r2, [r2, #0]
 8012b98:	701a      	strb	r2, [r3, #0]
      while(byteCounter > 0)
 8012b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	dceb      	bgt.n	8012b78 <SerialCtrl_GetData+0x4a>
    if(rcvdStringBuff[i] == ' '||rcvdStringBuff[i] == '\0' )
 8012ba0:	e033      	b.n	8012c0a <SerialCtrl_GetData+0xdc>
      }
    }
    else
    {
      /* take two consecutive ascii characters from the rcvdStringBuff and convert to hex values */  
      msb = Serial_CharToHexConvert(rcvdStringBuff[i]);        
 8012ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba4:	68fa      	ldr	r2, [r7, #12]
 8012ba6:	4413      	add	r3, r2
 8012ba8:	781b      	ldrb	r3, [r3, #0]
 8012baa:	4618      	mov	r0, r3
 8012bac:	f7ff fcf8 	bl	80125a0 <Serial_CharToHexConvert>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	623b      	str	r3, [r7, #32]
      lsb = Serial_CharToHexConvert(rcvdStringBuff[i + 1 ]);
 8012bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb6:	3301      	adds	r3, #1
 8012bb8:	68fa      	ldr	r2, [r7, #12]
 8012bba:	4413      	add	r3, r2
 8012bbc:	781b      	ldrb	r3, [r3, #0]
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7ff fcee 	bl	80125a0 <Serial_CharToHexConvert>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	61fb      	str	r3, [r7, #28]
      /*join two hex values to make one hex value*/
      byteBuff[byteCounter]  = msb << 4;
 8012bc8:	6a3b      	ldr	r3, [r7, #32]
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	011b      	lsls	r3, r3, #4
 8012bce:	b2d9      	uxtb	r1, r3
 8012bd0:	f107 0210 	add.w	r2, r7, #16
 8012bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd6:	4413      	add	r3, r2
 8012bd8:	460a      	mov	r2, r1
 8012bda:	701a      	strb	r2, [r3, #0]
      byteBuff[byteCounter] |= lsb;
 8012bdc:	f107 0210 	add.w	r2, r7, #16
 8012be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be2:	4413      	add	r3, r2
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	b25a      	sxtb	r2, r3
 8012be8:	69fb      	ldr	r3, [r7, #28]
 8012bea:	b25b      	sxtb	r3, r3
 8012bec:	4313      	orrs	r3, r2
 8012bee:	b25b      	sxtb	r3, r3
 8012bf0:	b2d9      	uxtb	r1, r3
 8012bf2:	f107 0210 	add.w	r2, r7, #16
 8012bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf8:	4413      	add	r3, r2
 8012bfa:	460a      	mov	r2, r1
 8012bfc:	701a      	strb	r2, [r3, #0]
      
      i++;      /*increment for loop counter as two values are used */
 8012bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c00:	3301      	adds	r3, #1
 8012c02:	627b      	str	r3, [r7, #36]	; 0x24
      byteCounter++;   /*increment byteCounter counter*/
 8012c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c06:	3301      	adds	r3, #1
 8012c08:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=dataOffset ; i<=(rcvdStringSize) ; i++)
 8012c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8012c10:	897b      	ldrh	r3, [r7, #10]
 8012c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c14:	429a      	cmp	r2, r3
 8012c16:	dda2      	ble.n	8012b5e <SerialCtrl_GetData+0x30>
    }
  }
        
  return dataIndex;
 8012c18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	3730      	adds	r7, #48	; 0x30
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}

08012c24 <SerialUt_Process>:
* @param  rcvdStringBuff: Pointer to the received ascii character array from the user
* @param  rcvdStringSize: Size of the received array
* @retval void
*/
void SerialUt_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b088      	sub	sp, #32
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
 8012c2c:	460b      	mov	r3, r1
 8012c2e:	807b      	strh	r3, [r7, #2]
  MOBLEUINT16 commandIndex = SerialUt_GetFunctionIndex(rcvdStringBuff+5);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	3305      	adds	r3, #5
 8012c34:	4618      	mov	r0, r3
 8012c36:	f000 f917 	bl	8012e68 <SerialUt_GetFunctionIndex>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	83bb      	strh	r3, [r7, #28]
  MOBLEUINT8 testFunctionParm[6]= {'\0'} ;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	617b      	str	r3, [r7, #20]
 8012c42:	2300      	movs	r3, #0
 8012c44:	833b      	strh	r3, [r7, #24]
  MOBLEUINT8 asciiFunctionParameter[7] = {'\0'} ;
 8012c46:	2300      	movs	r3, #0
 8012c48:	60fb      	str	r3, [r7, #12]
 8012c4a:	f107 0310 	add.w	r3, r7, #16
 8012c4e:	2100      	movs	r1, #0
 8012c50:	460a      	mov	r2, r1
 8012c52:	801a      	strh	r2, [r3, #0]
 8012c54:	460a      	mov	r2, r1
 8012c56:	709a      	strb	r2, [r3, #2]
#ifdef ENABLE_SENSOR_MODEL_SERVER
  MOBLEUINT16 value = 0;           
  MOBLEUINT8 sensorOffset = 0;    
#endif
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	77fb      	strb	r3, [r7, #31]
  MOBLEBOOL unprovisioned = MOBLE_FALSE;
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	77bb      	strb	r3, [r7, #30]
  
  switch (commandIndex)
 8012c60:	8bbb      	ldrh	r3, [r7, #28]
 8012c62:	3b01      	subs	r3, #1
 8012c64:	2b15      	cmp	r3, #21
 8012c66:	f200 80c1 	bhi.w	8012dec <SerialUt_Process+0x1c8>
 8012c6a:	a201      	add	r2, pc, #4	; (adr r2, 8012c70 <SerialUt_Process+0x4c>)
 8012c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c70:	08012cc9 	.word	0x08012cc9
 8012c74:	08012d05 	.word	0x08012d05
 8012c78:	08012d41 	.word	0x08012d41
 8012c7c:	08012db9 	.word	0x08012db9
 8012c80:	08012d57 	.word	0x08012d57
 8012c84:	08012d41 	.word	0x08012d41
 8012c88:	08012d57 	.word	0x08012d57
 8012c8c:	08012d41 	.word	0x08012d41
 8012c90:	08012d41 	.word	0x08012d41
 8012c94:	08012d41 	.word	0x08012d41
 8012c98:	08012d41 	.word	0x08012d41
 8012c9c:	08012d7d 	.word	0x08012d7d
 8012ca0:	08012d57 	.word	0x08012d57
 8012ca4:	08012d57 	.word	0x08012d57
 8012ca8:	08012d41 	.word	0x08012d41
 8012cac:	08012d41 	.word	0x08012d41
 8012cb0:	08012d41 	.word	0x08012d41
 8012cb4:	08012ded 	.word	0x08012ded
 8012cb8:	08012ded 	.word	0x08012ded
 8012cbc:	08012ded 	.word	0x08012ded
 8012cc0:	08012ded 	.word	0x08012ded
 8012cc4:	08012dd7 	.word	0x08012dd7
  {
  case CMD_INDEX_SEND_01:
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SEND_OFFSET, "%2s %4s", asciiFunctionParameter,asciiFunctionParameter+2);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f103 000d 	add.w	r0, r3, #13
 8012cce:	f107 030c 	add.w	r3, r7, #12
 8012cd2:	3302      	adds	r3, #2
 8012cd4:	f107 020c 	add.w	r2, r7, #12
 8012cd8:	495a      	ldr	r1, [pc, #360]	; (8012e44 <SerialUt_Process+0x220>)
 8012cda:	f016 fdcb 	bl	8029874 <siscanf>
    /*SerialUt_doubleHexToHex
    Function will convert the asci string into orinal hex format.
    eg- send-01 12 3456
    return 0x12,0x34,0x56       
    */
    SerialUt_doubleHexToHex(asciiFunctionParameter,testFunctionParm,6);
 8012cde:	f107 0114 	add.w	r1, r7, #20
 8012ce2:	f107 030c 	add.w	r3, r7, #12
 8012ce6:	2206      	movs	r2, #6
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f000 f929 	bl	8012f40 <SerialUt_doubleHexToHex>
    /*BLEMesh_UpperTesterDataProcess
    this function will take action and execute some other functions
    */       
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 8012cee:	8bbb      	ldrh	r3, [r7, #28]
 8012cf0:	b2db      	uxtb	r3, r3
 8012cf2:	f107 0214 	add.w	r2, r7, #20
 8012cf6:	4611      	mov	r1, r2
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f015 fcc9 	bl	8028690 <BLEMesh_UpperTesterDataProcess>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	77fb      	strb	r3, [r7, #31]
    break;
 8012d02:	e076      	b.n	8012df2 <SerialUt_Process+0x1ce>
          
  case CMD_INDEX_SEND_02: 
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SEND_OFFSET, "%2s %4s", asciiFunctionParameter,asciiFunctionParameter+2);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f103 000d 	add.w	r0, r3, #13
 8012d0a:	f107 030c 	add.w	r3, r7, #12
 8012d0e:	3302      	adds	r3, #2
 8012d10:	f107 020c 	add.w	r2, r7, #12
 8012d14:	494b      	ldr	r1, [pc, #300]	; (8012e44 <SerialUt_Process+0x220>)
 8012d16:	f016 fdad 	bl	8029874 <siscanf>
    SerialUt_doubleHexToHex(asciiFunctionParameter,testFunctionParm,6);
 8012d1a:	f107 0114 	add.w	r1, r7, #20
 8012d1e:	f107 030c 	add.w	r3, r7, #12
 8012d22:	2206      	movs	r2, #6
 8012d24:	4618      	mov	r0, r3
 8012d26:	f000 f90b 	bl	8012f40 <SerialUt_doubleHexToHex>
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);       
 8012d2a:	8bbb      	ldrh	r3, [r7, #28]
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	f107 0214 	add.w	r2, r7, #20
 8012d32:	4611      	mov	r1, r2
 8012d34:	4618      	mov	r0, r3
 8012d36:	f015 fcab 	bl	8028690 <BLEMesh_UpperTesterDataProcess>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	77fb      	strb	r3, [r7, #31]
    break;
 8012d3e:	e058      	b.n	8012df2 <SerialUt_Process+0x1ce>
  case CMD_INDEX_SET_13:  
     /* Order IUT to update the NetKeyIndex */
  case CMD_INDEX_SET_14:
    /* Order IUT to clear Publication & Subscription List*/
  case CMD_INDEX_SET_15:
    result = BLEMesh_UpperTesterDataProcess(commandIndex, testFunctionParm);
 8012d40:	8bbb      	ldrh	r3, [r7, #28]
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	f107 0214 	add.w	r2, r7, #20
 8012d48:	4611      	mov	r1, r2
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f015 fca0 	bl	8028690 <BLEMesh_UpperTesterDataProcess>
 8012d50:	4603      	mov	r3, r0
 8012d52:	77fb      	strb	r3, [r7, #31]
    break;
 8012d54:	e04d      	b.n	8012df2 <SerialUt_Process+0x1ce>
  case CMD_INDEX_SET_05:     
    /* Sets all node identity for all Networks */
  case CMD_INDEX_SET_11:     
    /* Updates the features supported by the library */
  case CMD_INDEX_SET_12:  
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SET_OFFSET, "%1c", testFunctionParm);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	330c      	adds	r3, #12
 8012d5a:	f107 0214 	add.w	r2, r7, #20
 8012d5e:	493a      	ldr	r1, [pc, #232]	; (8012e48 <SerialUt_Process+0x224>)
 8012d60:	4618      	mov	r0, r3
 8012d62:	f016 fd87 	bl	8029874 <siscanf>
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 8012d66:	8bbb      	ldrh	r3, [r7, #28]
 8012d68:	b2db      	uxtb	r3, r3
 8012d6a:	f107 0214 	add.w	r2, r7, #20
 8012d6e:	4611      	mov	r1, r2
 8012d70:	4618      	mov	r0, r3
 8012d72:	f015 fc8d 	bl	8028690 <BLEMesh_UpperTesterDataProcess>
 8012d76:	4603      	mov	r3, r0
 8012d78:	77fb      	strb	r3, [r7, #31]
    break;
 8012d7a:	e03a      	b.n	8012df2 <SerialUt_Process+0x1ce>
    /* Sets system faults for Health Model*/
  case CMD_INDEX_SET_10: 
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SET_OFFSET, "%2s %1c", asciiFunctionParameter, testFunctionParm+1);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f103 000c 	add.w	r0, r3, #12
 8012d82:	f107 0314 	add.w	r3, r7, #20
 8012d86:	3301      	adds	r3, #1
 8012d88:	f107 020c 	add.w	r2, r7, #12
 8012d8c:	492f      	ldr	r1, [pc, #188]	; (8012e4c <SerialUt_Process+0x228>)
 8012d8e:	f016 fd71 	bl	8029874 <siscanf>
    SerialUt_doubleHexToHex(asciiFunctionParameter,testFunctionParm,2);
 8012d92:	f107 0114 	add.w	r1, r7, #20
 8012d96:	f107 030c 	add.w	r3, r7, #12
 8012d9a:	2202      	movs	r2, #2
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f000 f8cf 	bl	8012f40 <SerialUt_doubleHexToHex>
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 8012da2:	8bbb      	ldrh	r3, [r7, #28]
 8012da4:	b2db      	uxtb	r3, r3
 8012da6:	f107 0214 	add.w	r2, r7, #20
 8012daa:	4611      	mov	r1, r2
 8012dac:	4618      	mov	r0, r3
 8012dae:	f015 fc6f 	bl	8028690 <BLEMesh_UpperTesterDataProcess>
 8012db2:	4603      	mov	r3, r0
 8012db4:	77fb      	strb	r3, [r7, #31]
    break;
 8012db6:	e01c      	b.n	8012df2 <SerialUt_Process+0x1ce>
    break;
#endif
  /* Unprovisions the Node */
  case CMD_INDEX_SET_02:
    {
      unprovisioned = BLEMesh_IsUnprovisioned();
 8012db8:	f00c f8c8 	bl	801ef4c <BLEMesh_IsUnprovisioned>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	77bb      	strb	r3, [r7, #30]
      result = BLEMesh_UpperTesterDataProcess(commandIndex, testFunctionParm);
 8012dc0:	8bbb      	ldrh	r3, [r7, #28]
 8012dc2:	b2db      	uxtb	r3, r3
 8012dc4:	f107 0214 	add.w	r2, r7, #20
 8012dc8:	4611      	mov	r1, r2
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f015 fc60 	bl	8028690 <BLEMesh_UpperTesterDataProcess>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	77fb      	strb	r3, [r7, #31]
    }
    break;
 8012dd4:	e00d      	b.n	8012df2 <SerialUt_Process+0x1ce>
    
    /* Print Security Credentials */
  case CMD_INDEX_PRINT_01:  
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 8012dd6:	8bbb      	ldrh	r3, [r7, #28]
 8012dd8:	b2db      	uxtb	r3, r3
 8012dda:	f107 0214 	add.w	r2, r7, #20
 8012dde:	4611      	mov	r1, r2
 8012de0:	4618      	mov	r0, r3
 8012de2:	f015 fc55 	bl	8028690 <BLEMesh_UpperTesterDataProcess>
 8012de6:	4603      	mov	r3, r0
 8012de8:	77fb      	strb	r3, [r7, #31]
    break;
 8012dea:	e002      	b.n	8012df2 <SerialUt_Process+0x1ce>
      
  default:
    printf("Invalid Command\r\n");
 8012dec:	4818      	ldr	r0, [pc, #96]	; (8012e50 <SerialUt_Process+0x22c>)
 8012dee:	f016 fd39 	bl	8029864 <puts>
  }
  if (result == MOBLE_RESULT_SUCCESS)
 8012df2:	7ffb      	ldrb	r3, [r7, #31]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d10f      	bne.n	8012e18 <SerialUt_Process+0x1f4>
  {
    BLEMesh_PrintStringCb("Test command executed successfully\r\n");
 8012df8:	4816      	ldr	r0, [pc, #88]	; (8012e54 <SerialUt_Process+0x230>)
 8012dfa:	f7ff fc23 	bl	8012644 <BLEMesh_PrintStringCb>
    if(commandIndex == CMD_INDEX_SET_02)
 8012dfe:	8bbb      	ldrh	r3, [r7, #28]
 8012e00:	2b04      	cmp	r3, #4
 8012e02:	d11a      	bne.n	8012e3a <SerialUt_Process+0x216>
    {
      if(!unprovisioned)
 8012e04:	7fbb      	ldrb	r3, [r7, #30]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d102      	bne.n	8012e10 <SerialUt_Process+0x1ec>
      {
        Appli_Unprovision();
 8012e0a:	f7f3 fa4b 	bl	80062a4 <Appli_Unprovision>
  }
  else
  {
    BLEMesh_PrintStringCb("Test command Failed.\r\n");   
  }
}
 8012e0e:	e014      	b.n	8012e3a <SerialUt_Process+0x216>
        BLEMesh_PrintStringCb("Device is already unprovisioned !\r\n");
 8012e10:	4811      	ldr	r0, [pc, #68]	; (8012e58 <SerialUt_Process+0x234>)
 8012e12:	f7ff fc17 	bl	8012644 <BLEMesh_PrintStringCb>
}
 8012e16:	e010      	b.n	8012e3a <SerialUt_Process+0x216>
  else if(result == MOBLE_RESULT_OUTOFMEMORY)
 8012e18:	7ffb      	ldrb	r3, [r7, #31]
 8012e1a:	2b04      	cmp	r3, #4
 8012e1c:	d103      	bne.n	8012e26 <SerialUt_Process+0x202>
    BLEMesh_PrintStringCb("Test command Failed. Out of memory\r\n");  
 8012e1e:	480f      	ldr	r0, [pc, #60]	; (8012e5c <SerialUt_Process+0x238>)
 8012e20:	f7ff fc10 	bl	8012644 <BLEMesh_PrintStringCb>
}
 8012e24:	e009      	b.n	8012e3a <SerialUt_Process+0x216>
  else if(result == MOBLE_RESULT_INVALIDARG)
 8012e26:	7ffb      	ldrb	r3, [r7, #31]
 8012e28:	2b03      	cmp	r3, #3
 8012e2a:	d103      	bne.n	8012e34 <SerialUt_Process+0x210>
    BLEMesh_PrintStringCb("Test command Failed. Invalid Argument\r\n");  
 8012e2c:	480c      	ldr	r0, [pc, #48]	; (8012e60 <SerialUt_Process+0x23c>)
 8012e2e:	f7ff fc09 	bl	8012644 <BLEMesh_PrintStringCb>
}
 8012e32:	e002      	b.n	8012e3a <SerialUt_Process+0x216>
    BLEMesh_PrintStringCb("Test command Failed.\r\n");   
 8012e34:	480b      	ldr	r0, [pc, #44]	; (8012e64 <SerialUt_Process+0x240>)
 8012e36:	f7ff fc05 	bl	8012644 <BLEMesh_PrintStringCb>
}
 8012e3a:	bf00      	nop
 8012e3c:	3720      	adds	r7, #32
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
 8012e42:	bf00      	nop
 8012e44:	0802fbd4 	.word	0x0802fbd4
 8012e48:	0802fbdc 	.word	0x0802fbdc
 8012e4c:	0802fbe0 	.word	0x0802fbe0
 8012e50:	0802fb30 	.word	0x0802fb30
 8012e54:	0802fbe8 	.word	0x0802fbe8
 8012e58:	0802fc10 	.word	0x0802fc10
 8012e5c:	0802fc34 	.word	0x0802fc34
 8012e60:	0802fc5c 	.word	0x0802fc5c
 8012e64:	0802fc84 	.word	0x0802fc84

08012e68 <SerialUt_GetFunctionIndex>:
* @param  rcvdStringBuff: Pointer to the received ascii character array from the user
* @param  rcvdStringSize: Size of the received array
* @retval MOBLEUINT16
*/
static MOBLEUINT16 SerialUt_GetFunctionIndex(char *text)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
  MOBLEINT16 index = 0;
 8012e70:	2300      	movs	r3, #0
 8012e72:	81fb      	strh	r3, [r7, #14]

  if (!strncmp(text, "SEND-",5))
 8012e74:	2205      	movs	r2, #5
 8012e76:	492c      	ldr	r1, [pc, #176]	; (8012f28 <SerialUt_GetFunctionIndex+0xc0>)
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f016 fd6c 	bl	8029956 <strncmp>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d110      	bne.n	8012ea6 <SerialUt_GetFunctionIndex+0x3e>
{
    /* sscanf is to extract the integeer value from the string */        
    sscanf(text, "SEND-%hd", &index);
 8012e84:	f107 030e 	add.w	r3, r7, #14
 8012e88:	461a      	mov	r2, r3
 8012e8a:	4928      	ldr	r1, [pc, #160]	; (8012f2c <SerialUt_GetFunctionIndex+0xc4>)
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f016 fcf1 	bl	8029874 <siscanf>
    index = (index<=CMD_SEND_COUNT) ? index : 0;
 8012e92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012e96:	2b02      	cmp	r3, #2
 8012e98:	dc02      	bgt.n	8012ea0 <SerialUt_GetFunctionIndex+0x38>
 8012e9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012e9e:	e000      	b.n	8012ea2 <SerialUt_GetFunctionIndex+0x3a>
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	81fb      	strh	r3, [r7, #14]
 8012ea4:	e038      	b.n	8012f18 <SerialUt_GetFunctionIndex+0xb0>

}
  else if (!strncmp(text, "SET-",4))
 8012ea6:	2204      	movs	r2, #4
 8012ea8:	4921      	ldr	r1, [pc, #132]	; (8012f30 <SerialUt_GetFunctionIndex+0xc8>)
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f016 fd53 	bl	8029956 <strncmp>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d114      	bne.n	8012ee0 <SerialUt_GetFunctionIndex+0x78>
{
    sscanf(text, "SET-%hd", &index);
 8012eb6:	f107 030e 	add.w	r3, r7, #14
 8012eba:	461a      	mov	r2, r3
 8012ebc:	491d      	ldr	r1, [pc, #116]	; (8012f34 <SerialUt_GetFunctionIndex+0xcc>)
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f016 fcd8 	bl	8029874 <siscanf>
    index = (index<=CMD_SET_COUNT)? index + CMD_SEND_COUNT : 0;
 8012ec4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012ec8:	2b13      	cmp	r3, #19
 8012eca:	dc06      	bgt.n	8012eda <SerialUt_GetFunctionIndex+0x72>
 8012ecc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012ed0:	b29b      	uxth	r3, r3
 8012ed2:	3302      	adds	r3, #2
 8012ed4:	b29b      	uxth	r3, r3
 8012ed6:	b21b      	sxth	r3, r3
 8012ed8:	e000      	b.n	8012edc <SerialUt_GetFunctionIndex+0x74>
 8012eda:	2300      	movs	r3, #0
 8012edc:	81fb      	strh	r3, [r7, #14]
 8012ede:	e01b      	b.n	8012f18 <SerialUt_GetFunctionIndex+0xb0>

    }
  else if (!strncmp(text, "PRINT-",6))
 8012ee0:	2206      	movs	r2, #6
 8012ee2:	4915      	ldr	r1, [pc, #84]	; (8012f38 <SerialUt_GetFunctionIndex+0xd0>)
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f016 fd36 	bl	8029956 <strncmp>
 8012eea:	4603      	mov	r3, r0
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d113      	bne.n	8012f18 <SerialUt_GetFunctionIndex+0xb0>
    {
    sscanf(text, "PRINT-%hd", &index);
 8012ef0:	f107 030e 	add.w	r3, r7, #14
 8012ef4:	461a      	mov	r2, r3
 8012ef6:	4911      	ldr	r1, [pc, #68]	; (8012f3c <SerialUt_GetFunctionIndex+0xd4>)
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f016 fcbb 	bl	8029874 <siscanf>
    index = (index<=CMD_PRINT_COUNT)?
 8012efe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f02:	2b01      	cmp	r3, #1
 8012f04:	dc06      	bgt.n	8012f14 <SerialUt_GetFunctionIndex+0xac>
      index + CMD_SET_COUNT + CMD_SEND_COUNT : 0;
 8012f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	3315      	adds	r3, #21
 8012f0e:	b29b      	uxth	r3, r3
    index = (index<=CMD_PRINT_COUNT)?
 8012f10:	b21b      	sxth	r3, r3
 8012f12:	e000      	b.n	8012f16 <SerialUt_GetFunctionIndex+0xae>
 8012f14:	2300      	movs	r3, #0
 8012f16:	81fb      	strh	r3, [r7, #14]
    }
        return index;
 8012f18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f1c:	b29b      	uxth	r3, r3
    }
 8012f1e:	4618      	mov	r0, r3
 8012f20:	3710      	adds	r7, #16
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	0802fc9c 	.word	0x0802fc9c
 8012f2c:	0802fca4 	.word	0x0802fca4
 8012f30:	0802fcb0 	.word	0x0802fcb0
 8012f34:	0802fcb8 	.word	0x0802fcb8
 8012f38:	0802fcc0 	.word	0x0802fcc0
 8012f3c:	0802fcc8 	.word	0x0802fcc8

08012f40 <SerialUt_doubleHexToHex>:
* @param  outputArray: Pointer to output hex array 
* @param  length: length of the input hex array
* @retval void
*/
static void SerialUt_doubleHexToHex(MOBLEUINT8* hexArray,MOBLEUINT8* outputArray, MOBLEUINT8 length)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b086      	sub	sp, #24
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	60f8      	str	r0, [r7, #12]
 8012f48:	60b9      	str	r1, [r7, #8]
 8012f4a:	4613      	mov	r3, r2
 8012f4c:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT8 counter =0,position = 0;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	75fb      	strb	r3, [r7, #23]
 8012f52:	2300      	movs	r3, #0
 8012f54:	75bb      	strb	r3, [r7, #22]
  MOBLEUINT8 msb,lsb;;
  while (counter <length)
 8012f56:	e032      	b.n	8012fbe <SerialUt_doubleHexToHex+0x7e>
    {
    msb = Serial_CharToHexConvert(hexArray[counter]);
 8012f58:	7dfb      	ldrb	r3, [r7, #23]
 8012f5a:	68fa      	ldr	r2, [r7, #12]
 8012f5c:	4413      	add	r3, r2
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7ff fb1d 	bl	80125a0 <Serial_CharToHexConvert>
 8012f66:	4603      	mov	r3, r0
 8012f68:	757b      	strb	r3, [r7, #21]
    lsb = Serial_CharToHexConvert(hexArray[counter + 1 ]);
 8012f6a:	7dfb      	ldrb	r3, [r7, #23]
 8012f6c:	3301      	adds	r3, #1
 8012f6e:	68fa      	ldr	r2, [r7, #12]
 8012f70:	4413      	add	r3, r2
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	4618      	mov	r0, r3
 8012f76:	f7ff fb13 	bl	80125a0 <Serial_CharToHexConvert>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	753b      	strb	r3, [r7, #20]
    outputArray[position] = msb<<4;
 8012f7e:	7dbb      	ldrb	r3, [r7, #22]
 8012f80:	68ba      	ldr	r2, [r7, #8]
 8012f82:	4413      	add	r3, r2
 8012f84:	7d7a      	ldrb	r2, [r7, #21]
 8012f86:	0112      	lsls	r2, r2, #4
 8012f88:	b2d2      	uxtb	r2, r2
 8012f8a:	701a      	strb	r2, [r3, #0]
    outputArray[position] |= lsb;
 8012f8c:	7dbb      	ldrb	r3, [r7, #22]
 8012f8e:	68ba      	ldr	r2, [r7, #8]
 8012f90:	4413      	add	r3, r2
 8012f92:	7819      	ldrb	r1, [r3, #0]
 8012f94:	7dbb      	ldrb	r3, [r7, #22]
 8012f96:	68ba      	ldr	r2, [r7, #8]
 8012f98:	4413      	add	r3, r2
 8012f9a:	7d3a      	ldrb	r2, [r7, #20]
 8012f9c:	430a      	orrs	r2, r1
 8012f9e:	b2d2      	uxtb	r2, r2
 8012fa0:	701a      	strb	r2, [r3, #0]
    printf("data scanned is  %02hx \n\r",outputArray[position]);
 8012fa2:	7dbb      	ldrb	r3, [r7, #22]
 8012fa4:	68ba      	ldr	r2, [r7, #8]
 8012fa6:	4413      	add	r3, r2
 8012fa8:	781b      	ldrb	r3, [r3, #0]
 8012faa:	4619      	mov	r1, r3
 8012fac:	4808      	ldr	r0, [pc, #32]	; (8012fd0 <SerialUt_doubleHexToHex+0x90>)
 8012fae:	f016 fbd3 	bl	8029758 <iprintf>
    counter+=2;
 8012fb2:	7dfb      	ldrb	r3, [r7, #23]
 8012fb4:	3302      	adds	r3, #2
 8012fb6:	75fb      	strb	r3, [r7, #23]
    position++;
 8012fb8:	7dbb      	ldrb	r3, [r7, #22]
 8012fba:	3301      	adds	r3, #1
 8012fbc:	75bb      	strb	r3, [r7, #22]
  while (counter <length)
 8012fbe:	7dfa      	ldrb	r2, [r7, #23]
 8012fc0:	79fb      	ldrb	r3, [r7, #7]
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d3c8      	bcc.n	8012f58 <SerialUt_doubleHexToHex+0x18>
    }
}
 8012fc6:	bf00      	nop
 8012fc8:	bf00      	nop
 8012fca:	3718      	adds	r7, #24
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}
 8012fd0:	0802fcd4 	.word	0x0802fcd4

08012fd4 <AppliCheck_EnabledModelsList>:
* @brief AppliCheck_EnabledModelsList: This function checks whether the Enabled  
*                             Models in the defined range or exceeding the limit
* retval MOBLE_RESULT
*/
MOBLE_RESULT AppliCheck_EnabledModelsList(void)
{ 
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b082      	sub	sp, #8
 8012fd8:	af00      	add	r7, sp, #0
   MOBLE_RESULT result = MOBLE_RESULT_FAIL;
 8012fda:	2302      	movs	r3, #2
 8012fdc:	71fb      	strb	r3, [r7, #7]
/* Initialization of the  SIG Models list */
   result = ApplicationInitSigModelList();
 8012fde:	f000 f837 	bl	8013050 <ApplicationInitSigModelList>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	71fb      	strb	r3, [r7, #7]
  {
    if(result == MOBLE_RESULT_FALSE)
 8012fe6:	79fb      	ldrb	r3, [r7, #7]
 8012fe8:	2b01      	cmp	r3, #1
 8012fea:	d106      	bne.n	8012ffa <AppliCheck_EnabledModelsList+0x26>
    {
      TRACE_I(TF_INIT,"The number of Models enabled in Application exceed the Library limit");
 8012fec:	4815      	ldr	r0, [pc, #84]	; (8013044 <AppliCheck_EnabledModelsList+0x70>)
 8012fee:	f016 fbb3 	bl	8029758 <iprintf>
      result = MOBLE_RESULT_FAIL;
 8012ff2:	2302      	movs	r3, #2
 8012ff4:	71fb      	strb	r3, [r7, #7]
          return result;
 8012ff6:	79fb      	ldrb	r3, [r7, #7]
 8012ff8:	e020      	b.n	801303c <AppliCheck_EnabledModelsList+0x68>
    }

    else if(result == MOBLE_RESULT_FAIL)
 8012ffa:	79fb      	ldrb	r3, [r7, #7]
 8012ffc:	2b02      	cmp	r3, #2
 8012ffe:	d105      	bne.n	801300c <AppliCheck_EnabledModelsList+0x38>
  {
    TRACE_I(TF_INIT,"The number of Models enabled exceed the limit of %d !\r\n",
 8013000:	2106      	movs	r1, #6
 8013002:	4811      	ldr	r0, [pc, #68]	; (8013048 <AppliCheck_EnabledModelsList+0x74>)
 8013004:	f016 fba8 	bl	8029758 <iprintf>
              USER_SIG_MODELS_MAX_COUNT);
          return result;
 8013008:	79fb      	ldrb	r3, [r7, #7]
 801300a:	e017      	b.n	801303c <AppliCheck_EnabledModelsList+0x68>
    }
    
  }
  
    /* Initialization of the  VENDOR Models list, if any */
  result = ApplicationInitVendorModelList();
 801300c:	f000 f962 	bl	80132d4 <ApplicationInitVendorModelList>
 8013010:	4603      	mov	r3, r0
 8013012:	71fb      	strb	r3, [r7, #7]
  {
    
    if(result == MOBLE_RESULT_FALSE)
 8013014:	79fb      	ldrb	r3, [r7, #7]
 8013016:	2b01      	cmp	r3, #1
 8013018:	d106      	bne.n	8013028 <AppliCheck_EnabledModelsList+0x54>
    {
      TRACE_I(TF_INIT,"The number of Models enabled in Application exceed the Library limit");
 801301a:	480a      	ldr	r0, [pc, #40]	; (8013044 <AppliCheck_EnabledModelsList+0x70>)
 801301c:	f016 fb9c 	bl	8029758 <iprintf>
      result = MOBLE_RESULT_FAIL;
 8013020:	2302      	movs	r3, #2
 8013022:	71fb      	strb	r3, [r7, #7]
          return result;
 8013024:	79fb      	ldrb	r3, [r7, #7]
 8013026:	e009      	b.n	801303c <AppliCheck_EnabledModelsList+0x68>
    }

    else if(result == MOBLE_RESULT_FAIL)
 8013028:	79fb      	ldrb	r3, [r7, #7]
 801302a:	2b02      	cmp	r3, #2
 801302c:	d105      	bne.n	801303a <AppliCheck_EnabledModelsList+0x66>
  {
    TRACE_I(TF_INIT,"The number of Vendor Models enabled exceed the limit of %d !\r\n",
 801302e:	2101      	movs	r1, #1
 8013030:	4806      	ldr	r0, [pc, #24]	; (801304c <AppliCheck_EnabledModelsList+0x78>)
 8013032:	f016 fb91 	bl	8029758 <iprintf>
            USER_VENDOR_MODELS_MAX_COUNT); 
        return result;
 8013036:	79fb      	ldrb	r3, [r7, #7]
 8013038:	e000      	b.n	801303c <AppliCheck_EnabledModelsList+0x68>
    }
    
  }
  
  return result;
 801303a:	79fb      	ldrb	r3, [r7, #7]
}
 801303c:	4618      	mov	r0, r3
 801303e:	3708      	adds	r7, #8
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	0802fd38 	.word	0x0802fd38
 8013048:	0802fd80 	.word	0x0802fd80
 801304c:	0802fdb8 	.word	0x0802fdb8

08013050 <ApplicationInitSigModelList>:
* @brief ApplicationInitSigModelList: This function initialize the list of the 
*                                     SIG Models.
* retval MOBLE_RESULT
*/
MOBLE_RESULT ApplicationInitSigModelList(void)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
  /*If Models enabled by user are exceeding the library capability*/
  if(APPLICATION_SIG_MODELS_MAX_COUNT > BLEMesh_GetTotalModelsCount() - 
 8013056:	f00a f845 	bl	801d0e4 <BLEMesh_GetTotalModelsCount>
 801305a:	4603      	mov	r3, r0
 801305c:	2b06      	cmp	r3, #6
 801305e:	d80a      	bhi.n	8013076 <ApplicationInitSigModelList+0x26>
                                            APPLICATION_VENDOR_MODELS_MAX_COUNT)
  {
    TRACE_I(TF_INIT,"APPLICATION_SIG_MODELS_MAX_COUNT %d > BLEMesh_GetTotalModelsCount() %d - APPLICATION_VENDOR_MODELS_MAX_COUNT %d",
 8013060:	f00a f840 	bl	801d0e4 <BLEMesh_GetTotalModelsCount>
 8013064:	4603      	mov	r3, r0
 8013066:	461a      	mov	r2, r3
 8013068:	2302      	movs	r3, #2
 801306a:	2107      	movs	r1, #7
 801306c:	4897      	ldr	r0, [pc, #604]	; (80132cc <ApplicationInitSigModelList+0x27c>)
 801306e:	f016 fb73 	bl	8029758 <iprintf>
            APPLICATION_SIG_MODELS_MAX_COUNT,
            BLEMesh_GetTotalModelsCount(),
            APPLICATION_VENDOR_MODELS_MAX_COUNT);
    return(MOBLE_RESULT_FALSE);
 8013072:	2301      	movs	r3, #1
 8013074:	e125      	b.n	80132c2 <ApplicationInitSigModelList+0x272>
  }
  
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 8013076:	2300      	movs	r3, #0
 8013078:	71fb      	strb	r3, [r7, #7]
 801307a:	e11d      	b.n	80132b8 <ApplicationInitSigModelList+0x268>
  {
    uint8_t modelIndex = 0;
 801307c:	2300      	movs	r3, #0
 801307e:	71bb      	strb	r3, [r7, #6]
    Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8013080:	79fa      	ldrb	r2, [r7, #7]
 8013082:	79b9      	ldrb	r1, [r7, #6]
 8013084:	4892      	ldr	r0, [pc, #584]	; (80132d0 <ApplicationInitSigModelList+0x280>)
 8013086:	4613      	mov	r3, r2
 8013088:	00db      	lsls	r3, r3, #3
 801308a:	1a9b      	subs	r3, r3, r2
 801308c:	440b      	add	r3, r1
 801308e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013092:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    }
#endif
    
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF
    
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 8013096:	79bb      	ldrb	r3, [r7, #6]
 8013098:	2b06      	cmp	r3, #6
 801309a:	d901      	bls.n	80130a0 <ApplicationInitSigModelList+0x50>
    {
      return(MOBLE_RESULT_FAIL);
 801309c:	2302      	movs	r3, #2
 801309e:	e110      	b.n	80132c2 <ApplicationInitSigModelList+0x272>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_ONOFF & (1 << index)) == (1 << index)))
 80130a0:	79fb      	ldrb	r3, [r7, #7]
 80130a2:	2201      	movs	r2, #1
 80130a4:	fa02 f303 	lsl.w	r3, r2, r3
 80130a8:	f003 0201 	and.w	r2, r3, #1
 80130ac:	79fb      	ldrb	r3, [r7, #7]
 80130ae:	2101      	movs	r1, #1
 80130b0:	fa01 f303 	lsl.w	r3, r1, r3
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d11b      	bne.n	80130f0 <ApplicationInitSigModelList+0xa0>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_ONOFF_SERVER_MODEL_ID;
 80130b8:	79fa      	ldrb	r2, [r7, #7]
 80130ba:	79bb      	ldrb	r3, [r7, #6]
 80130bc:	1c59      	adds	r1, r3, #1
 80130be:	71b9      	strb	r1, [r7, #6]
 80130c0:	4618      	mov	r0, r3
 80130c2:	4983      	ldr	r1, [pc, #524]	; (80132d0 <ApplicationInitSigModelList+0x280>)
 80130c4:	4613      	mov	r3, r2
 80130c6:	00db      	lsls	r3, r3, #3
 80130c8:	1a9b      	subs	r3, r3, r2
 80130ca:	4403      	add	r3, r0
 80130cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80130d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 80130d4:	79bb      	ldrb	r3, [r7, #6]
 80130d6:	2b06      	cmp	r3, #6
 80130d8:	d80a      	bhi.n	80130f0 <ApplicationInitSigModelList+0xa0>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 80130da:	79fa      	ldrb	r2, [r7, #7]
 80130dc:	79b9      	ldrb	r1, [r7, #6]
 80130de:	487c      	ldr	r0, [pc, #496]	; (80132d0 <ApplicationInitSigModelList+0x280>)
 80130e0:	4613      	mov	r3, r2
 80130e2:	00db      	lsls	r3, r3, #3
 80130e4:	1a9b      	subs	r3, r3, r2
 80130e6:	440b      	add	r3, r1
 80130e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130ec:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      }
    }
#endif
    
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 80130f0:	79bb      	ldrb	r3, [r7, #6]
 80130f2:	2b06      	cmp	r3, #6
 80130f4:	d901      	bls.n	80130fa <ApplicationInitSigModelList+0xaa>
    {
      return(MOBLE_RESULT_FAIL);
 80130f6:	2302      	movs	r3, #2
 80130f8:	e0e3      	b.n	80132c2 <ApplicationInitSigModelList+0x272>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_LEVEL & (1 << index)) == (1 << index)))
 80130fa:	79fb      	ldrb	r3, [r7, #7]
 80130fc:	2201      	movs	r2, #1
 80130fe:	fa02 f303 	lsl.w	r3, r2, r3
 8013102:	f003 0201 	and.w	r2, r3, #1
 8013106:	79fb      	ldrb	r3, [r7, #7]
 8013108:	2101      	movs	r1, #1
 801310a:	fa01 f303 	lsl.w	r3, r1, r3
 801310e:	429a      	cmp	r2, r3
 8013110:	d11b      	bne.n	801314a <ApplicationInitSigModelList+0xfa>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_LEVEL_SERVER_MODEL_ID;
 8013112:	79fa      	ldrb	r2, [r7, #7]
 8013114:	79bb      	ldrb	r3, [r7, #6]
 8013116:	1c59      	adds	r1, r3, #1
 8013118:	71b9      	strb	r1, [r7, #6]
 801311a:	4618      	mov	r0, r3
 801311c:	496c      	ldr	r1, [pc, #432]	; (80132d0 <ApplicationInitSigModelList+0x280>)
 801311e:	4613      	mov	r3, r2
 8013120:	00db      	lsls	r3, r3, #3
 8013122:	1a9b      	subs	r3, r3, r2
 8013124:	4403      	add	r3, r0
 8013126:	f241 0202 	movw	r2, #4098	; 0x1002
 801312a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 801312e:	79bb      	ldrb	r3, [r7, #6]
 8013130:	2b06      	cmp	r3, #6
 8013132:	d80a      	bhi.n	801314a <ApplicationInitSigModelList+0xfa>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8013134:	79fa      	ldrb	r2, [r7, #7]
 8013136:	79b9      	ldrb	r1, [r7, #6]
 8013138:	4865      	ldr	r0, [pc, #404]	; (80132d0 <ApplicationInitSigModelList+0x280>)
 801313a:	4613      	mov	r3, r2
 801313c:	00db      	lsls	r3, r3, #3
 801313e:	1a9b      	subs	r3, r3, r2
 8013140:	440b      	add	r3, r1
 8013142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013146:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    }
    
#endif
#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF
    
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 801314a:	79bb      	ldrb	r3, [r7, #6]
 801314c:	2b06      	cmp	r3, #6
 801314e:	d901      	bls.n	8013154 <ApplicationInitSigModelList+0x104>
    {
      return(MOBLE_RESULT_FAIL);
 8013150:	2302      	movs	r3, #2
 8013152:	e0b6      	b.n	80132c2 <ApplicationInitSigModelList+0x272>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF & (1 << index)) == (1 << index)))
 8013154:	79fb      	ldrb	r3, [r7, #7]
 8013156:	2201      	movs	r2, #1
 8013158:	fa02 f303 	lsl.w	r3, r2, r3
 801315c:	f003 0201 	and.w	r2, r3, #1
 8013160:	79fb      	ldrb	r3, [r7, #7]
 8013162:	2101      	movs	r1, #1
 8013164:	fa01 f303 	lsl.w	r3, r1, r3
 8013168:	429a      	cmp	r2, r3
 801316a:	d11b      	bne.n	80131a4 <ApplicationInitSigModelList+0x154>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_POWER_ONOFF_SERVER_MODEL_ID;
 801316c:	79fa      	ldrb	r2, [r7, #7]
 801316e:	79bb      	ldrb	r3, [r7, #6]
 8013170:	1c59      	adds	r1, r3, #1
 8013172:	71b9      	strb	r1, [r7, #6]
 8013174:	4618      	mov	r0, r3
 8013176:	4956      	ldr	r1, [pc, #344]	; (80132d0 <ApplicationInitSigModelList+0x280>)
 8013178:	4613      	mov	r3, r2
 801317a:	00db      	lsls	r3, r3, #3
 801317c:	1a9b      	subs	r3, r3, r2
 801317e:	4403      	add	r3, r0
 8013180:	f241 0206 	movw	r2, #4102	; 0x1006
 8013184:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 8013188:	79bb      	ldrb	r3, [r7, #6]
 801318a:	2b06      	cmp	r3, #6
 801318c:	d80a      	bhi.n	80131a4 <ApplicationInitSigModelList+0x154>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 801318e:	79fa      	ldrb	r2, [r7, #7]
 8013190:	79b9      	ldrb	r1, [r7, #6]
 8013192:	484f      	ldr	r0, [pc, #316]	; (80132d0 <ApplicationInitSigModelList+0x280>)
 8013194:	4613      	mov	r3, r2
 8013196:	00db      	lsls	r3, r3, #3
 8013198:	1a9b      	subs	r3, r3, r2
 801319a:	440b      	add	r3, r1
 801319c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131a0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      }
    }
#endif
    
#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 80131a4:	79bb      	ldrb	r3, [r7, #6]
 80131a6:	2b06      	cmp	r3, #6
 80131a8:	d901      	bls.n	80131ae <ApplicationInitSigModelList+0x15e>
    {
      return(MOBLE_RESULT_FAIL);
 80131aa:	2302      	movs	r3, #2
 80131ac:	e089      	b.n	80132c2 <ApplicationInitSigModelList+0x272>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP & (1 << index)) == (1 << index)))
 80131ae:	79fb      	ldrb	r3, [r7, #7]
 80131b0:	2201      	movs	r2, #1
 80131b2:	fa02 f303 	lsl.w	r3, r2, r3
 80131b6:	f003 0201 	and.w	r2, r3, #1
 80131ba:	79fb      	ldrb	r3, [r7, #7]
 80131bc:	2101      	movs	r1, #1
 80131be:	fa01 f303 	lsl.w	r3, r1, r3
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d11b      	bne.n	80131fe <ApplicationInitSigModelList+0x1ae>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_POWER_ONOFF_SETUP_SERVER_MODEL_ID;
 80131c6:	79fa      	ldrb	r2, [r7, #7]
 80131c8:	79bb      	ldrb	r3, [r7, #6]
 80131ca:	1c59      	adds	r1, r3, #1
 80131cc:	71b9      	strb	r1, [r7, #6]
 80131ce:	4618      	mov	r0, r3
 80131d0:	493f      	ldr	r1, [pc, #252]	; (80132d0 <ApplicationInitSigModelList+0x280>)
 80131d2:	4613      	mov	r3, r2
 80131d4:	00db      	lsls	r3, r3, #3
 80131d6:	1a9b      	subs	r3, r3, r2
 80131d8:	4403      	add	r3, r0
 80131da:	f241 0207 	movw	r2, #4103	; 0x1007
 80131de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 80131e2:	79bb      	ldrb	r3, [r7, #6]
 80131e4:	2b06      	cmp	r3, #6
 80131e6:	d80a      	bhi.n	80131fe <ApplicationInitSigModelList+0x1ae>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 80131e8:	79fa      	ldrb	r2, [r7, #7]
 80131ea:	79b9      	ldrb	r1, [r7, #6]
 80131ec:	4838      	ldr	r0, [pc, #224]	; (80132d0 <ApplicationInitSigModelList+0x280>)
 80131ee:	4613      	mov	r3, r2
 80131f0:	00db      	lsls	r3, r3, #3
 80131f2:	1a9b      	subs	r3, r3, r2
 80131f4:	440b      	add	r3, r1
 80131f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131fa:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    /**************************************************************************/
    /** Following Section places LIGHTING MODEL Enabled SERVER IDs    *********/
    /**************************************************************************/

#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 80131fe:	79bb      	ldrb	r3, [r7, #6]
 8013200:	2b06      	cmp	r3, #6
 8013202:	d901      	bls.n	8013208 <ApplicationInitSigModelList+0x1b8>
    {
      return(MOBLE_RESULT_FAIL);
 8013204:	2302      	movs	r3, #2
 8013206:	e05c      	b.n	80132c2 <ApplicationInitSigModelList+0x272>
    }
    
    if(((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << index)) == (1 << index)))
 8013208:	79fb      	ldrb	r3, [r7, #7]
 801320a:	2201      	movs	r2, #1
 801320c:	fa02 f303 	lsl.w	r3, r2, r3
 8013210:	f003 0201 	and.w	r2, r3, #1
 8013214:	79fb      	ldrb	r3, [r7, #7]
 8013216:	2101      	movs	r1, #1
 8013218:	fa01 f303 	lsl.w	r3, r1, r3
 801321c:	429a      	cmp	r2, r3
 801321e:	d11b      	bne.n	8013258 <ApplicationInitSigModelList+0x208>
    {
      Appli_SIG_Models[index][modelIndex++] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;       
 8013220:	79fa      	ldrb	r2, [r7, #7]
 8013222:	79bb      	ldrb	r3, [r7, #6]
 8013224:	1c59      	adds	r1, r3, #1
 8013226:	71b9      	strb	r1, [r7, #6]
 8013228:	4618      	mov	r0, r3
 801322a:	4929      	ldr	r1, [pc, #164]	; (80132d0 <ApplicationInitSigModelList+0x280>)
 801322c:	4613      	mov	r3, r2
 801322e:	00db      	lsls	r3, r3, #3
 8013230:	1a9b      	subs	r3, r3, r2
 8013232:	4403      	add	r3, r0
 8013234:	f44f 5298 	mov.w	r2, #4864	; 0x1300
 8013238:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 801323c:	79bb      	ldrb	r3, [r7, #6]
 801323e:	2b06      	cmp	r3, #6
 8013240:	d80a      	bhi.n	8013258 <ApplicationInitSigModelList+0x208>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8013242:	79fa      	ldrb	r2, [r7, #7]
 8013244:	79b9      	ldrb	r1, [r7, #6]
 8013246:	4822      	ldr	r0, [pc, #136]	; (80132d0 <ApplicationInitSigModelList+0x280>)
 8013248:	4613      	mov	r3, r2
 801324a:	00db      	lsls	r3, r3, #3
 801324c:	1a9b      	subs	r3, r3, r2
 801324e:	440b      	add	r3, r1
 8013250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013254:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      }
    }
#endif
    
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 8013258:	79bb      	ldrb	r3, [r7, #6]
 801325a:	2b06      	cmp	r3, #6
 801325c:	d901      	bls.n	8013262 <ApplicationInitSigModelList+0x212>
    {
      return(MOBLE_RESULT_FAIL);
 801325e:	2302      	movs	r3, #2
 8013260:	e02f      	b.n	80132c2 <ApplicationInitSigModelList+0x272>
    }
    
    if(((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP & (1 << index)) == (1 << index)))
 8013262:	79fb      	ldrb	r3, [r7, #7]
 8013264:	2201      	movs	r2, #1
 8013266:	fa02 f303 	lsl.w	r3, r2, r3
 801326a:	f003 0201 	and.w	r2, r3, #1
 801326e:	79fb      	ldrb	r3, [r7, #7]
 8013270:	2101      	movs	r1, #1
 8013272:	fa01 f303 	lsl.w	r3, r1, r3
 8013276:	429a      	cmp	r2, r3
 8013278:	d11b      	bne.n	80132b2 <ApplicationInitSigModelList+0x262>
    {
      Appli_SIG_Models[index][modelIndex++] = LIGHT_LIGHTNESS_SETUP_SERVER_MODEL_ID;
 801327a:	79fa      	ldrb	r2, [r7, #7]
 801327c:	79bb      	ldrb	r3, [r7, #6]
 801327e:	1c59      	adds	r1, r3, #1
 8013280:	71b9      	strb	r1, [r7, #6]
 8013282:	4618      	mov	r0, r3
 8013284:	4912      	ldr	r1, [pc, #72]	; (80132d0 <ApplicationInitSigModelList+0x280>)
 8013286:	4613      	mov	r3, r2
 8013288:	00db      	lsls	r3, r3, #3
 801328a:	1a9b      	subs	r3, r3, r2
 801328c:	4403      	add	r3, r0
 801328e:	f241 3201 	movw	r2, #4865	; 0x1301
 8013292:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 8013296:	79bb      	ldrb	r3, [r7, #6]
 8013298:	2b06      	cmp	r3, #6
 801329a:	d80a      	bhi.n	80132b2 <ApplicationInitSigModelList+0x262>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 801329c:	79fa      	ldrb	r2, [r7, #7]
 801329e:	79b9      	ldrb	r1, [r7, #6]
 80132a0:	480b      	ldr	r0, [pc, #44]	; (80132d0 <ApplicationInitSigModelList+0x280>)
 80132a2:	4613      	mov	r3, r2
 80132a4:	00db      	lsls	r3, r3, #3
 80132a6:	1a9b      	subs	r3, r3, r2
 80132a8:	440b      	add	r3, r1
 80132aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132ae:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 80132b2:	79fb      	ldrb	r3, [r7, #7]
 80132b4:	3301      	adds	r3, #1
 80132b6:	71fb      	strb	r3, [r7, #7]
 80132b8:	79fb      	ldrb	r3, [r7, #7]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	f43f aede 	beq.w	801307c <ApplicationInitSigModelList+0x2c>
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
      }
    }
#endif
  }
  return (MOBLE_RESULT_SUCCESS); 
 80132c0:	2300      	movs	r3, #0
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	3708      	adds	r7, #8
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	bf00      	nop
 80132cc:	0802fdf8 	.word	0x0802fdf8
 80132d0:	20006e50 	.word	0x20006e50

080132d4 <ApplicationInitVendorModelList>:
* @brief ApplicationInitVendorModelList: This function initialize the list of the 
*                                     VENDOR Models.
* retval MOBLE_RESULT
*/
MOBLE_RESULT ApplicationInitVendorModelList(void)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b082      	sub	sp, #8
 80132d8:	af00      	add	r7, sp, #0
#ifdef ENABLE_VENDOR_MODEL_SERVER  
  
  /*If Models enabled by user are exceeding the library capability*/
  if( APPLICATION_VENDOR_MODELS_MAX_COUNT > BLEMesh_GetTotalModelsCount() - 
 80132da:	f009 ff03 	bl	801d0e4 <BLEMesh_GetTotalModelsCount>
 80132de:	4603      	mov	r3, r0
 80132e0:	2b06      	cmp	r3, #6
 80132e2:	d804      	bhi.n	80132ee <ApplicationInitVendorModelList+0x1a>
                                            APPLICATION_SIG_MODELS_MAX_COUNT)
  {
    TRACE_I(TF_INIT,"The number of Models enabled in Application exceeding the limit of Library");
 80132e4:	4822      	ldr	r0, [pc, #136]	; (8013370 <ApplicationInitVendorModelList+0x9c>)
 80132e6:	f016 fa37 	bl	8029758 <iprintf>
    return(MOBLE_RESULT_FALSE);
 80132ea:	2301      	movs	r3, #1
 80132ec:	e03c      	b.n	8013368 <ApplicationInitVendorModelList+0x94>
  }
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 80132ee:	2300      	movs	r3, #0
 80132f0:	71fb      	strb	r3, [r7, #7]
 80132f2:	e035      	b.n	8013360 <ApplicationInitVendorModelList+0x8c>
  {
    uint8_t modelIndex = 0;
 80132f4:	2300      	movs	r3, #0
 80132f6:	71bb      	strb	r3, [r7, #6]
    Appli_Vendor_Models[index][modelIndex] = NO_MODEL_AVLBL;
 80132f8:	79fa      	ldrb	r2, [r7, #7]
 80132fa:	79bb      	ldrb	r3, [r7, #6]
 80132fc:	491d      	ldr	r1, [pc, #116]	; (8013374 <ApplicationInitVendorModelList+0xa0>)
 80132fe:	0052      	lsls	r2, r2, #1
 8013300:	4413      	add	r3, r2
 8013302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    if((ENABLE_VENDOR_MODEL_SERVER & (1 << index)) == (1 << index)) 
 801330a:	79fb      	ldrb	r3, [r7, #7]
 801330c:	2201      	movs	r2, #1
 801330e:	fa02 f303 	lsl.w	r3, r2, r3
 8013312:	f003 0201 	and.w	r2, r3, #1
 8013316:	79fb      	ldrb	r3, [r7, #7]
 8013318:	2101      	movs	r1, #1
 801331a:	fa01 f303 	lsl.w	r3, r1, r3
 801331e:	429a      	cmp	r2, r3
 8013320:	d116      	bne.n	8013350 <ApplicationInitVendorModelList+0x7c>
    {
      Appli_Vendor_Models[index][modelIndex++] = VENDORMODEL_STMICRO_ID1;
 8013322:	79fa      	ldrb	r2, [r7, #7]
 8013324:	79bb      	ldrb	r3, [r7, #6]
 8013326:	1c59      	adds	r1, r3, #1
 8013328:	71b9      	strb	r1, [r7, #6]
 801332a:	4618      	mov	r0, r3
 801332c:	4911      	ldr	r1, [pc, #68]	; (8013374 <ApplicationInitVendorModelList+0xa0>)
 801332e:	0053      	lsls	r3, r2, #1
 8013330:	4403      	add	r3, r0
 8013332:	4a11      	ldr	r2, [pc, #68]	; (8013378 <ApplicationInitVendorModelList+0xa4>)
 8013334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      if(modelIndex < APPLICATION_VENDOR_MODELS_MAX_COUNT)
 8013338:	79bb      	ldrb	r3, [r7, #6]
 801333a:	2b01      	cmp	r3, #1
 801333c:	d808      	bhi.n	8013350 <ApplicationInitVendorModelList+0x7c>
      {
        Appli_Vendor_Models[index][modelIndex] = NO_MODEL_AVLBL;
 801333e:	79fa      	ldrb	r2, [r7, #7]
 8013340:	79bb      	ldrb	r3, [r7, #6]
 8013342:	490c      	ldr	r1, [pc, #48]	; (8013374 <ApplicationInitVendorModelList+0xa0>)
 8013344:	0052      	lsls	r2, r2, #1
 8013346:	4413      	add	r3, r2
 8013348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801334c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    
    if(modelIndex >= APPLICATION_VENDOR_MODELS_MAX_COUNT)
 8013350:	79bb      	ldrb	r3, [r7, #6]
 8013352:	2b01      	cmp	r3, #1
 8013354:	d901      	bls.n	801335a <ApplicationInitVendorModelList+0x86>
    {
      return(MOBLE_RESULT_FAIL);
 8013356:	2302      	movs	r3, #2
 8013358:	e006      	b.n	8013368 <ApplicationInitVendorModelList+0x94>
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 801335a:	79fb      	ldrb	r3, [r7, #7]
 801335c:	3301      	adds	r3, #1
 801335e:	71fb      	strb	r3, [r7, #7]
 8013360:	79fb      	ldrb	r3, [r7, #7]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d0c6      	beq.n	80132f4 <ApplicationInitVendorModelList+0x20>
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
  {
    Appli_Vendor_Models[index][0] = NO_MODEL_AVLBL;
  }
#endif
  return (MOBLE_RESULT_SUCCESS); 
 8013366:	2300      	movs	r3, #0
}
 8013368:	4618      	mov	r0, r3
 801336a:	3708      	adds	r7, #8
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}
 8013370:	0802fe68 	.word	0x0802fe68
 8013374:	20006e60 	.word	0x20006e60
 8013378:	00010030 	.word	0x00010030

0801337c <ApplicationGetSigModelList>:
* @param pModels_sig_ID: Pointer of the array to be filled with SIG Models list
* @param elementIndex: Index of the element for Model List
* retval Count of the SIG Model Servers enabled in the Application
*/
MOBLEUINT8 ApplicationGetSigModelList(MOBLEUINT16* pModels_sig_ID, MOBLEUINT8 elementIndex)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b084      	sub	sp, #16
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	460b      	mov	r3, r1
 8013386:	70fb      	strb	r3, [r7, #3]
  uint8_t modelCount = 0;
 8013388:	2300      	movs	r3, #0
 801338a:	73fb      	strb	r3, [r7, #15]
  
  while((modelCount < APPLICATION_SIG_MODELS_MAX_COUNT) && 
 801338c:	e002      	b.n	8013394 <ApplicationGetSigModelList+0x18>
        (Appli_SIG_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
  {
    modelCount++;
 801338e:	7bfb      	ldrb	r3, [r7, #15]
 8013390:	3301      	adds	r3, #1
 8013392:	73fb      	strb	r3, [r7, #15]
  while((modelCount < APPLICATION_SIG_MODELS_MAX_COUNT) && 
 8013394:	7bfb      	ldrb	r3, [r7, #15]
 8013396:	2b06      	cmp	r3, #6
 8013398:	d80c      	bhi.n	80133b4 <ApplicationGetSigModelList+0x38>
        (Appli_SIG_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
 801339a:	78fa      	ldrb	r2, [r7, #3]
 801339c:	7bf9      	ldrb	r1, [r7, #15]
 801339e:	480f      	ldr	r0, [pc, #60]	; (80133dc <ApplicationGetSigModelList+0x60>)
 80133a0:	4613      	mov	r3, r2
 80133a2:	00db      	lsls	r3, r3, #3
 80133a4:	1a9b      	subs	r3, r3, r2
 80133a6:	440b      	add	r3, r1
 80133a8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  while((modelCount < APPLICATION_SIG_MODELS_MAX_COUNT) && 
 80133ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133b0:	4293      	cmp	r3, r2
 80133b2:	d1ec      	bne.n	801338e <ApplicationGetSigModelList+0x12>
  } 
  memcpy(pModels_sig_ID, 
         Appli_SIG_Models + elementIndex, 
 80133b4:	78fa      	ldrb	r2, [r7, #3]
 80133b6:	4613      	mov	r3, r2
 80133b8:	00db      	lsls	r3, r3, #3
 80133ba:	1a9b      	subs	r3, r3, r2
 80133bc:	005b      	lsls	r3, r3, #1
 80133be:	461a      	mov	r2, r3
  memcpy(pModels_sig_ID, 
 80133c0:	4b06      	ldr	r3, [pc, #24]	; (80133dc <ApplicationGetSigModelList+0x60>)
 80133c2:	18d1      	adds	r1, r2, r3
         modelCount * 2);
 80133c4:	7bfb      	ldrb	r3, [r7, #15]
 80133c6:	005b      	lsls	r3, r3, #1
  memcpy(pModels_sig_ID, 
 80133c8:	461a      	mov	r2, r3
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f015 fbd0 	bl	8028b70 <memcpy>
  
  return modelCount; 
 80133d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3710      	adds	r7, #16
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
 80133da:	bf00      	nop
 80133dc:	20006e50 	.word	0x20006e50

080133e0 <ApplicationGetVendorModelList>:
* @param elementIndex: Index of the element for Model List
* retval Count of the Vendor Model Servers enabled in the Application
*/

MOBLEUINT8 ApplicationGetVendorModelList(MOBLEUINT32* pModels_vendor_ID, MOBLEUINT8 elementIndex)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b084      	sub	sp, #16
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
 80133e8:	460b      	mov	r3, r1
 80133ea:	70fb      	strb	r3, [r7, #3]
    {
      /*do nothing*/
    }
  }
#else
  uint8_t modelCount = 0;
 80133ec:	2300      	movs	r3, #0
 80133ee:	73fb      	strb	r3, [r7, #15]
  
#ifdef ENABLE_VENDOR_MODEL_SERVER 
  /* Since the SIG Models are 2 bytes, copy 2*size for memcpy */
  while((modelCount < APPLICATION_VENDOR_MODELS_MAX_COUNT) &&
 80133f0:	e002      	b.n	80133f8 <ApplicationGetVendorModelList+0x18>
        (Appli_Vendor_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
  {
    modelCount++;
 80133f2:	7bfb      	ldrb	r3, [r7, #15]
 80133f4:	3301      	adds	r3, #1
 80133f6:	73fb      	strb	r3, [r7, #15]
  while((modelCount < APPLICATION_VENDOR_MODELS_MAX_COUNT) &&
 80133f8:	7bfb      	ldrb	r3, [r7, #15]
 80133fa:	2b01      	cmp	r3, #1
 80133fc:	d80a      	bhi.n	8013414 <ApplicationGetVendorModelList+0x34>
        (Appli_Vendor_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
 80133fe:	78fa      	ldrb	r2, [r7, #3]
 8013400:	7bfb      	ldrb	r3, [r7, #15]
 8013402:	490c      	ldr	r1, [pc, #48]	; (8013434 <ApplicationGetVendorModelList+0x54>)
 8013404:	0052      	lsls	r2, r2, #1
 8013406:	4413      	add	r3, r2
 8013408:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  while((modelCount < APPLICATION_VENDOR_MODELS_MAX_COUNT) &&
 801340c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013410:	4293      	cmp	r3, r2
 8013412:	d1ee      	bne.n	80133f2 <ApplicationGetVendorModelList+0x12>
  }
  memcpy(pModels_vendor_ID, Appli_Vendor_Models+elementIndex, modelCount*4);
 8013414:	78fb      	ldrb	r3, [r7, #3]
 8013416:	00db      	lsls	r3, r3, #3
 8013418:	4a06      	ldr	r2, [pc, #24]	; (8013434 <ApplicationGetVendorModelList+0x54>)
 801341a:	1899      	adds	r1, r3, r2
 801341c:	7bfb      	ldrb	r3, [r7, #15]
 801341e:	009b      	lsls	r3, r3, #2
 8013420:	461a      	mov	r2, r3
 8013422:	6878      	ldr	r0, [r7, #4]
 8013424:	f015 fba4 	bl	8028b70 <memcpy>
#endif  
#endif
  return modelCount; 
 8013428:	7bfb      	ldrb	r3, [r7, #15]
}
 801342a:	4618      	mov	r0, r3
 801342c:	3710      	adds	r7, #16
 801342e:	46bd      	mov	sp, r7
 8013430:	bd80      	pop	{r7, pc}
 8013432:	bf00      	nop
 8013434:	20006e60 	.word	0x20006e60

08013438 <ApplicationChkSigModelActive>:
* @param modelID: Model Server ID received for the checking function
* @param elementIndex : index of element for which active model checking is needed
* retval Bool: True or False, if the Server ID matches with the list 
*/
MOBLEBOOL ApplicationChkSigModelActive(MOBLEUINT16 modelID, MOBLEUINT8 elementIndex)
{
 8013438:	b480      	push	{r7}
 801343a:	b085      	sub	sp, #20
 801343c:	af00      	add	r7, sp, #0
 801343e:	4603      	mov	r3, r0
 8013440:	460a      	mov	r2, r1
 8013442:	80fb      	strh	r3, [r7, #6]
 8013444:	4613      	mov	r3, r2
 8013446:	717b      	strb	r3, [r7, #5]
  
  MOBLEBOOL result = MOBLE_FALSE;
 8013448:	2300      	movs	r3, #0
 801344a:	73fb      	strb	r3, [r7, #15]
    
  for(uint8_t index = 0; index <= elementIndex; index++)
 801344c:	2300      	movs	r3, #0
 801344e:	73bb      	strb	r3, [r7, #14]
 8013450:	e020      	b.n	8013494 <ApplicationChkSigModelActive+0x5c>
  {
    if(index == elementIndex)
 8013452:	7bba      	ldrb	r2, [r7, #14]
 8013454:	797b      	ldrb	r3, [r7, #5]
 8013456:	429a      	cmp	r2, r3
 8013458:	d119      	bne.n	801348e <ApplicationChkSigModelActive+0x56>
    {
      for(uint8_t count = 0; count < APPLICATION_SIG_MODELS_MAX_COUNT; count++)
 801345a:	2300      	movs	r3, #0
 801345c:	737b      	strb	r3, [r7, #13]
 801345e:	e012      	b.n	8013486 <ApplicationChkSigModelActive+0x4e>
      {
        if (modelID == Appli_SIG_Models[index][count])      
 8013460:	7bba      	ldrb	r2, [r7, #14]
 8013462:	7b79      	ldrb	r1, [r7, #13]
 8013464:	4811      	ldr	r0, [pc, #68]	; (80134ac <ApplicationChkSigModelActive+0x74>)
 8013466:	4613      	mov	r3, r2
 8013468:	00db      	lsls	r3, r3, #3
 801346a:	1a9b      	subs	r3, r3, r2
 801346c:	440b      	add	r3, r1
 801346e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013472:	88fa      	ldrh	r2, [r7, #6]
 8013474:	429a      	cmp	r2, r3
 8013476:	d103      	bne.n	8013480 <ApplicationChkSigModelActive+0x48>
        {
         result = MOBLE_TRUE;
 8013478:	2301      	movs	r3, #1
 801347a:	73fb      	strb	r3, [r7, #15]
           break;
 801347c:	bf00      	nop
        else
        {
           /*do nothing*/ 
        }
      }
      break;
 801347e:	e00d      	b.n	801349c <ApplicationChkSigModelActive+0x64>
      for(uint8_t count = 0; count < APPLICATION_SIG_MODELS_MAX_COUNT; count++)
 8013480:	7b7b      	ldrb	r3, [r7, #13]
 8013482:	3301      	adds	r3, #1
 8013484:	737b      	strb	r3, [r7, #13]
 8013486:	7b7b      	ldrb	r3, [r7, #13]
 8013488:	2b06      	cmp	r3, #6
 801348a:	d9e9      	bls.n	8013460 <ApplicationChkSigModelActive+0x28>
      break;
 801348c:	e006      	b.n	801349c <ApplicationChkSigModelActive+0x64>
  for(uint8_t index = 0; index <= elementIndex; index++)
 801348e:	7bbb      	ldrb	r3, [r7, #14]
 8013490:	3301      	adds	r3, #1
 8013492:	73bb      	strb	r3, [r7, #14]
 8013494:	7bba      	ldrb	r2, [r7, #14]
 8013496:	797b      	ldrb	r3, [r7, #5]
 8013498:	429a      	cmp	r2, r3
 801349a:	d9da      	bls.n	8013452 <ApplicationChkSigModelActive+0x1a>
    {
      /*do nothing*/  
    }
  }
  
  return result;
 801349c:	7bfb      	ldrb	r3, [r7, #15]
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3714      	adds	r7, #20
 80134a2:	46bd      	mov	sp, r7
 80134a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a8:	4770      	bx	lr
 80134aa:	bf00      	nop
 80134ac:	20006e50 	.word	0x20006e50

080134b0 <ApplicationChkVendorModelActive>:
* @param modelID: Model Server ID received for the checking function
* @param elementIndex : index of element for which active model checking is needed
* retval Bool: True or False, if the Server ID matches with the list 
*/
MOBLEBOOL ApplicationChkVendorModelActive(MOBLEUINT32 modelID, MOBLEUINT8 elementIndex)
{
 80134b0:	b480      	push	{r7}
 80134b2:	b085      	sub	sp, #20
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
 80134b8:	460b      	mov	r3, r1
 80134ba:	70fb      	strb	r3, [r7, #3]
  MOBLEBOOL result = MOBLE_FALSE;
 80134bc:	2300      	movs	r3, #0
 80134be:	73fb      	strb	r3, [r7, #15]
    
  for(uint8_t index = 0; index <= elementIndex; index++)
 80134c0:	2300      	movs	r3, #0
 80134c2:	73bb      	strb	r3, [r7, #14]
 80134c4:	e01e      	b.n	8013504 <ApplicationChkVendorModelActive+0x54>
  {
    if(index == elementIndex)
 80134c6:	7bba      	ldrb	r2, [r7, #14]
 80134c8:	78fb      	ldrb	r3, [r7, #3]
 80134ca:	429a      	cmp	r2, r3
 80134cc:	d117      	bne.n	80134fe <ApplicationChkVendorModelActive+0x4e>
    {
      for(uint8_t count = 0; count < APPLICATION_VENDOR_MODELS_MAX_COUNT; count++)
 80134ce:	2300      	movs	r3, #0
 80134d0:	737b      	strb	r3, [r7, #13]
 80134d2:	e010      	b.n	80134f6 <ApplicationChkVendorModelActive+0x46>
      {
        if (modelID == Appli_Vendor_Models[index][count])      
 80134d4:	7bba      	ldrb	r2, [r7, #14]
 80134d6:	7b7b      	ldrb	r3, [r7, #13]
 80134d8:	4910      	ldr	r1, [pc, #64]	; (801351c <ApplicationChkVendorModelActive+0x6c>)
 80134da:	0052      	lsls	r2, r2, #1
 80134dc:	4413      	add	r3, r2
 80134de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80134e2:	687a      	ldr	r2, [r7, #4]
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d103      	bne.n	80134f0 <ApplicationChkVendorModelActive+0x40>
        {
         result = MOBLE_TRUE;
 80134e8:	2301      	movs	r3, #1
 80134ea:	73fb      	strb	r3, [r7, #15]
         break;
 80134ec:	bf00      	nop
        else
        {
           /*do nothing*/ 
        }
      }
      break;
 80134ee:	e00d      	b.n	801350c <ApplicationChkVendorModelActive+0x5c>
      for(uint8_t count = 0; count < APPLICATION_VENDOR_MODELS_MAX_COUNT; count++)
 80134f0:	7b7b      	ldrb	r3, [r7, #13]
 80134f2:	3301      	adds	r3, #1
 80134f4:	737b      	strb	r3, [r7, #13]
 80134f6:	7b7b      	ldrb	r3, [r7, #13]
 80134f8:	2b01      	cmp	r3, #1
 80134fa:	d9eb      	bls.n	80134d4 <ApplicationChkVendorModelActive+0x24>
      break;
 80134fc:	e006      	b.n	801350c <ApplicationChkVendorModelActive+0x5c>
  for(uint8_t index = 0; index <= elementIndex; index++)
 80134fe:	7bbb      	ldrb	r3, [r7, #14]
 8013500:	3301      	adds	r3, #1
 8013502:	73bb      	strb	r3, [r7, #14]
 8013504:	7bba      	ldrb	r2, [r7, #14]
 8013506:	78fb      	ldrb	r3, [r7, #3]
 8013508:	429a      	cmp	r2, r3
 801350a:	d9dc      	bls.n	80134c6 <ApplicationChkVendorModelActive+0x16>
    {
      /*do nothing*/  
    }
  }
  
  return result;  
 801350c:	7bfb      	ldrb	r3, [r7, #15]
    
}
 801350e:	4618      	mov	r0, r3
 8013510:	3714      	adds	r7, #20
 8013512:	46bd      	mov	sp, r7
 8013514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013518:	4770      	bx	lr
 801351a:	bf00      	nop
 801351c:	20006e60 	.word	0x20006e60

08013520 <BnrgmFrndLpnProcess>:
}
#endif /* #if (FRIEND_FEATURE == 0) */

#if (LOW_POWER_FEATURE == 0)
MOBLE_RESULT BnrgmFrndLpnProcess(void* param)
{
 8013520:	b480      	push	{r7}
 8013522:	b083      	sub	sp, #12
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8013528:	2305      	movs	r3, #5
}
 801352a:	4618      	mov	r0, r3
 801352c:	370c      	adds	r7, #12
 801352e:	46bd      	mov	sp, r7
 8013530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013534:	4770      	bx	lr

08013536 <BnrgmFrndLpnProcessFrndOffer>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndOffer(void* param)
{
 8013536:	b480      	push	{r7}
 8013538:	b083      	sub	sp, #12
 801353a:	af00      	add	r7, sp, #0
 801353c:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 801353e:	2305      	movs	r3, #5
}
 8013540:	4618      	mov	r0, r3
 8013542:	370c      	adds	r7, #12
 8013544:	46bd      	mov	sp, r7
 8013546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354a:	4770      	bx	lr

0801354c <BnrgmFrndLpnProcessFrndUpdate>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndUpdate(void* param)
{
 801354c:	b480      	push	{r7}
 801354e:	b083      	sub	sp, #12
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8013554:	2305      	movs	r3, #5
}
 8013556:	4618      	mov	r0, r3
 8013558:	370c      	adds	r7, #12
 801355a:	46bd      	mov	sp, r7
 801355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013560:	4770      	bx	lr

08013562 <BnrgmFrndLpnProcessFrndRfu>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndRfu(void* param)
{
 8013562:	b480      	push	{r7}
 8013564:	b083      	sub	sp, #12
 8013566:	af00      	add	r7, sp, #0
 8013568:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 801356a:	2305      	movs	r3, #5
}
 801356c:	4618      	mov	r0, r3
 801356e:	370c      	adds	r7, #12
 8013570:	46bd      	mov	sp, r7
 8013572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013576:	4770      	bx	lr

08013578 <BnrgmFrndLpnProcessFrndSubscrListConf>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndSubscrListConf(void* param)
{
 8013578:	b480      	push	{r7}
 801357a:	b083      	sub	sp, #12
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8013580:	2305      	movs	r3, #5
}
 8013582:	4618      	mov	r0, r3
 8013584:	370c      	adds	r7, #12
 8013586:	46bd      	mov	sp, r7
 8013588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358c:	4770      	bx	lr

0801358e <BnrgmFrndLpnSwitchKeys>:

MOBLE_RESULT BnrgmFrndLpnSwitchKeys(void* param)
{
 801358e:	b480      	push	{r7}
 8013590:	b083      	sub	sp, #12
 8013592:	af00      	add	r7, sp, #0
 8013594:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8013596:	2305      	movs	r3, #5
}
 8013598:	4618      	mov	r0, r3
 801359a:	370c      	adds	r7, #12
 801359c:	46bd      	mov	sp, r7
 801359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a2:	4770      	bx	lr

080135a4 <BnrgmFrndLpnTranspSegRecvd>:

MOBLE_RESULT BnrgmFrndLpnTranspSegRecvd(void* param)
{
 80135a4:	b480      	push	{r7}
 80135a6:	b083      	sub	sp, #12
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 80135ac:	2305      	movs	r3, #5
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	370c      	adds	r7, #12
 80135b2:	46bd      	mov	sp, r7
 80135b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b8:	4770      	bx	lr

080135ba <BnrgmFrndLpnUpdateKeys>:

MOBLE_RESULT BnrgmFrndLpnUpdateKeys(void* param)
{
 80135ba:	b480      	push	{r7}
 80135bc:	b083      	sub	sp, #12
 80135be:	af00      	add	r7, sp, #0
 80135c0:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 80135c2:	2305      	movs	r3, #5
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	370c      	adds	r7, #12
 80135c8:	46bd      	mov	sp, r7
 80135ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ce:	4770      	bx	lr

080135d0 <BnrgmFrndMgmtLpnInit>:

MOBLE_RESULT BnrgmFrndMgmtLpnInit(void* param)
{
 80135d0:	b480      	push	{r7}
 80135d2:	b083      	sub	sp, #12
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 80135d8:	2305      	movs	r3, #5
}
 80135da:	4618      	mov	r0, r3
 80135dc:	370c      	adds	r7, #12
 80135de:	46bd      	mov	sp, r7
 80135e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e4:	4770      	bx	lr

080135e6 <LightLcServer_GetOpcodeTableCb>:
//__weak void Appli_Sensor_SerialCmd(char *rcvdStringBuff, uint16_t rcvdStringSize){}
         
#ifndef ENABLE_LIGHT_MODEL_SERVER_LC
MOBLE_RESULT LightLcServer_GetOpcodeTableCb(const MODEL_OpcodeTableParam_t **data, 
                                            MOBLEUINT16 *length)
{return MOBLE_RESULT_NOTIMPL;}
 80135e6:	b480      	push	{r7}
 80135e8:	b083      	sub	sp, #12
 80135ea:	af00      	add	r7, sp, #0
 80135ec:	6078      	str	r0, [r7, #4]
 80135ee:	6039      	str	r1, [r7, #0]
 80135f0:	2305      	movs	r3, #5
 80135f2:	4618      	mov	r0, r3
 80135f4:	370c      	adds	r7, #12
 80135f6:	46bd      	mov	sp, r7
 80135f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fc:	4770      	bx	lr

080135fe <Light_LC_LigtnessLinearUnsolicitedChange>:
MOBLE_RESULT Light_LC_SensorPropertyUpdate(MOBLEUINT8 lcsElementIndex,
                                           MOBLEUINT16 sensorPropertyId,
                                           MOBLEUINT32 value)
{return MOBLE_RESULT_NOTIMPL;}
void Light_LC_LigtnessLinearUnsolicitedChange(MOBLEUINT8 elementIndex)
{}
 80135fe:	b480      	push	{r7}
 8013600:	b083      	sub	sp, #12
 8013602:	af00      	add	r7, sp, #0
 8013604:	4603      	mov	r3, r0
 8013606:	71fb      	strb	r3, [r7, #7]
 8013608:	bf00      	nop
 801360a:	370c      	adds	r7, #12
 801360c:	46bd      	mov	sp, r7
 801360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013612:	4770      	bx	lr

08013614 <Light_LC_LcOnOffUpdate>:
                                    MOBLEUINT8 onOff,
                                    MOBLEUINT8 optionalParams,
                                    MOBLEUINT32 delayMsOnOffMsg,
                                    MOBLEUINT32 stepResMsOnOffMsg,
                                    MOBLEUINT32 trTimeMsOnOffMsg)
{return MOBLE_RESULT_NOTIMPL;}
 8013614:	b480      	push	{r7}
 8013616:	b083      	sub	sp, #12
 8013618:	af00      	add	r7, sp, #0
 801361a:	603b      	str	r3, [r7, #0]
 801361c:	4603      	mov	r3, r0
 801361e:	71fb      	strb	r3, [r7, #7]
 8013620:	460b      	mov	r3, r1
 8013622:	71bb      	strb	r3, [r7, #6]
 8013624:	4613      	mov	r3, r2
 8013626:	717b      	strb	r3, [r7, #5]
 8013628:	2305      	movs	r3, #5
 801362a:	4618      	mov	r0, r3
 801362c:	370c      	adds	r7, #12
 801362e:	46bd      	mov	sp, r7
 8013630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013634:	4770      	bx	lr
	...

08013638 <Sensor_UpdatePublishParameters>:
  * @param  sensor offset of corresponding sensor whose parameters to be updated
  * @retval Fail if sensor not initialized
  *         else Success
  */
__weak MOBLE_RESULT Sensor_UpdatePublishParameters(MOBLEUINT8 sensorOffset)
{
 8013638:	b590      	push	{r4, r7, lr}
 801363a:	b087      	sub	sp, #28
 801363c:	af00      	add	r7, sp, #0
 801363e:	4603      	mov	r3, r0
 8013640:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT8 fastCadenceStatus = 0;
 8013642:	2300      	movs	r3, #0
 8013644:	75fb      	strb	r3, [r7, #23]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8013646:	2300      	movs	r3, #0
 8013648:	75bb      	strb	r3, [r7, #22]
  MOBLEUINT8 sensorOffsetTemp = sensorOffset;
 801364a:	79fb      	ldrb	r3, [r7, #7]
 801364c:	753b      	strb	r3, [r7, #20]
  sensor_params_t* pParams = SensorServer->pSensorParams + sensorOffsetTemp;
 801364e:	4b81      	ldr	r3, [pc, #516]	; (8013854 <Sensor_UpdatePublishParameters+0x21c>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	685a      	ldr	r2, [r3, #4]
 8013654:	7d3b      	ldrb	r3, [r7, #20]
 8013656:	2134      	movs	r1, #52	; 0x34
 8013658:	fb01 f303 	mul.w	r3, r1, r3
 801365c:	4413      	add	r3, r2
 801365e:	613b      	str	r3, [r7, #16]
  MOBLEUINT32 fastCadenceLow;
  MOBLEUINT32 fastCadenceHigh;

  TRACE_M(TF_SENSOR_M, "SENSOR%d\r\n", sensorOffset+1);
 8013660:	2100      	movs	r1, #0
 8013662:	487d      	ldr	r0, [pc, #500]	; (8013858 <Sensor_UpdatePublishParameters+0x220>)
 8013664:	f7f9 ff90 	bl	800d588 <TraceHeader>
 8013668:	79fb      	ldrb	r3, [r7, #7]
 801366a:	3301      	adds	r3, #1
 801366c:	4619      	mov	r1, r3
 801366e:	487b      	ldr	r0, [pc, #492]	; (801385c <Sensor_UpdatePublishParameters+0x224>)
 8013670:	f016 f872 	bl	8029758 <iprintf>
  
  if (pParams != NULL)
 8013674:	693b      	ldr	r3, [r7, #16]
 8013676:	2b00      	cmp	r3, #0
 8013678:	f000 80dd 	beq.w	8013836 <Sensor_UpdatePublishParameters+0x1fe>
  {
    if (pParams->cadenceState == 1)
 801367c:	693b      	ldr	r3, [r7, #16]
 801367e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8013682:	2b01      	cmp	r3, #1
 8013684:	f040 80cf 	bne.w	8013826 <Sensor_UpdatePublishParameters+0x1ee>
    {
      if (pParams->modelPublishPeriodMs == 0)
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	699b      	ldr	r3, [r3, #24]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d107      	bne.n	80136a0 <Sensor_UpdatePublishParameters+0x68>
      {
        TRACE_M(TF_SENSOR_M, "Publish period set to 0\r\n");
 8013690:	2100      	movs	r1, #0
 8013692:	4871      	ldr	r0, [pc, #452]	; (8013858 <Sensor_UpdatePublishParameters+0x220>)
 8013694:	f7f9 ff78 	bl	800d588 <TraceHeader>
 8013698:	4871      	ldr	r0, [pc, #452]	; (8013860 <Sensor_UpdatePublishParameters+0x228>)
 801369a:	f016 f8e3 	bl	8029864 <puts>
 801369e:	e058      	b.n	8013752 <Sensor_UpdatePublishParameters+0x11a>
      }
      else
      {
        if (SensorServer->p_cb->Sensor_IsFastCadence_cb != NULL)
 80136a0:	4b6c      	ldr	r3, [pc, #432]	; (8013854 <Sensor_UpdatePublishParameters+0x21c>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d012      	beq.n	80136d2 <Sensor_UpdatePublishParameters+0x9a>
        {
          fastCadenceLow = pParams->fastCadenceLow;
 80136ac:	693b      	ldr	r3, [r7, #16]
 80136ae:	691b      	ldr	r3, [r3, #16]
 80136b0:	60fb      	str	r3, [r7, #12]
          fastCadenceHigh = pParams->fastCadenceHigh;
 80136b2:	693b      	ldr	r3, [r7, #16]
 80136b4:	695b      	ldr	r3, [r3, #20]
 80136b6:	60bb      	str	r3, [r7, #8]
      
          /* check sensor value for fast cadence */
          fastCadenceStatus = 
            SensorServer->p_cb->Sensor_IsFastCadence_cb(sensorOffset,
 80136b8:	4b66      	ldr	r3, [pc, #408]	; (8013854 <Sensor_UpdatePublishParameters+0x21c>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136c0:	f107 0208 	add.w	r2, r7, #8
 80136c4:	f107 010c 	add.w	r1, r7, #12
 80136c8:	79f8      	ldrb	r0, [r7, #7]
 80136ca:	4798      	blx	r3
 80136cc:	4603      	mov	r3, r0
 80136ce:	75fb      	strb	r3, [r7, #23]
 80136d0:	e001      	b.n	80136d6 <Sensor_UpdatePublishParameters+0x9e>
                                                        &fastCadenceLow, 
                                                        &fastCadenceHigh);
      }
      else
      {
          fastCadenceStatus = 0;
 80136d2:	2300      	movs	r3, #0
 80136d4:	75fb      	strb	r3, [r7, #23]
      }
      
      /* if fast cadence required, divide publish interval by 2^n, n = fast cadence period divisor */
        if (fastCadenceStatus == 1)
 80136d6:	7dfb      	ldrb	r3, [r7, #23]
 80136d8:	2b01      	cmp	r3, #1
 80136da:	d109      	bne.n	80136f0 <Sensor_UpdatePublishParameters+0xb8>
      {
          pParams->publishPeriodMs = pParams->modelPublishPeriodMs / \
 80136dc:	693b      	ldr	r3, [r7, #16]
 80136de:	699b      	ldr	r3, [r3, #24]
                                     (1<<pParams->fastCadencePeriodDiv);
 80136e0:	693a      	ldr	r2, [r7, #16]
 80136e2:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
          pParams->publishPeriodMs = pParams->modelPublishPeriodMs / \
 80136e6:	fa23 f202 	lsr.w	r2, r3, r2
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	61da      	str	r2, [r3, #28]
 80136ee:	e003      	b.n	80136f8 <Sensor_UpdatePublishParameters+0xc0>
      }
      else
      {
          pParams->publishPeriodMs = pParams->modelPublishPeriodMs;
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	699a      	ldr	r2, [r3, #24]
 80136f4:	693b      	ldr	r3, [r7, #16]
 80136f6:	61da      	str	r2, [r3, #28]
      }
      
      /* if publish period is less than status min interval, adjust to status min value */
      if (pParams->publishPeriodMs < (1 << pParams->statusMinInterval))
 80136f8:	693b      	ldr	r3, [r7, #16]
 80136fa:	69db      	ldr	r3, [r3, #28]
 80136fc:	693a      	ldr	r2, [r7, #16]
 80136fe:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8013702:	40d3      	lsrs	r3, r2
 8013704:	2b00      	cmp	r3, #0
 8013706:	d118      	bne.n	801373a <Sensor_UpdatePublishParameters+0x102>
      {
        TRACE_M(TF_SENSOR_M, "publish period %ld less than status minimum interval %d\r\n", pParams->publishPeriodMs, 1 << pParams->statusMinInterval);
 8013708:	2100      	movs	r1, #0
 801370a:	4853      	ldr	r0, [pc, #332]	; (8013858 <Sensor_UpdatePublishParameters+0x220>)
 801370c:	f7f9 ff3c 	bl	800d588 <TraceHeader>
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	69d9      	ldr	r1, [r3, #28]
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801371a:	461a      	mov	r2, r3
 801371c:	2301      	movs	r3, #1
 801371e:	4093      	lsls	r3, r2
 8013720:	461a      	mov	r2, r3
 8013722:	4850      	ldr	r0, [pc, #320]	; (8013864 <Sensor_UpdatePublishParameters+0x22c>)
 8013724:	f016 f818 	bl	8029758 <iprintf>
        pParams->publishPeriodMs = 1 << pParams->statusMinInterval;
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801372e:	461a      	mov	r2, r3
 8013730:	2301      	movs	r3, #1
 8013732:	4093      	lsls	r3, r2
 8013734:	461a      	mov	r2, r3
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	61da      	str	r2, [r3, #28]
      }
      
        TRACE_M(TF_SENSOR_M, "SENSOR%d fast cadence state %d, publish period %ld\r\n",
 801373a:	2100      	movs	r1, #0
 801373c:	4846      	ldr	r0, [pc, #280]	; (8013858 <Sensor_UpdatePublishParameters+0x220>)
 801373e:	f7f9 ff23 	bl	800d588 <TraceHeader>
 8013742:	79fb      	ldrb	r3, [r7, #7]
 8013744:	1c59      	adds	r1, r3, #1
 8013746:	7dfa      	ldrb	r2, [r7, #23]
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	69db      	ldr	r3, [r3, #28]
 801374c:	4846      	ldr	r0, [pc, #280]	; (8013868 <Sensor_UpdatePublishParameters+0x230>)
 801374e:	f016 f803 	bl	8029758 <iprintf>
      /* realign timers of all sensors on same element index
         this may result in publishing of sensor status even for sensors whose
         sensor status is not scheduled
         Doing this benefits to publish sensor data of all elements in one message
         by data marshalling */
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 8013752:	2300      	movs	r3, #0
 8013754:	757b      	strb	r3, [r7, #21]
 8013756:	e05d      	b.n	8013814 <Sensor_UpdatePublishParameters+0x1dc>
      {
        if(((SensorServer->pSensorParams)+count)->elementIdx == pParams->elementIdx &&
 8013758:	4b3e      	ldr	r3, [pc, #248]	; (8013854 <Sensor_UpdatePublishParameters+0x21c>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	685a      	ldr	r2, [r3, #4]
 801375e:	7d7b      	ldrb	r3, [r7, #21]
 8013760:	2134      	movs	r1, #52	; 0x34
 8013762:	fb01 f303 	mul.w	r3, r1, r3
 8013766:	4413      	add	r3, r2
 8013768:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013772:	429a      	cmp	r2, r3
 8013774:	d14b      	bne.n	801380e <Sensor_UpdatePublishParameters+0x1d6>
             ((SensorServer->pSensorParams)+count)->cadenceState == 1)
 8013776:	4b37      	ldr	r3, [pc, #220]	; (8013854 <Sensor_UpdatePublishParameters+0x21c>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	685a      	ldr	r2, [r3, #4]
 801377c:	7d7b      	ldrb	r3, [r7, #21]
 801377e:	2134      	movs	r1, #52	; 0x34
 8013780:	fb01 f303 	mul.w	r3, r1, r3
 8013784:	4413      	add	r3, r2
 8013786:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
        if(((SensorServer->pSensorParams)+count)->elementIdx == pParams->elementIdx &&
 801378a:	2b01      	cmp	r3, #1
 801378c:	d13f      	bne.n	801380e <Sensor_UpdatePublishParameters+0x1d6>
        {
          if(((SensorServer->pSensorParams)+count)->modelPublishPeriodMs == 0)
 801378e:	4b31      	ldr	r3, [pc, #196]	; (8013854 <Sensor_UpdatePublishParameters+0x21c>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	685a      	ldr	r2, [r3, #4]
 8013794:	7d7b      	ldrb	r3, [r7, #21]
 8013796:	2134      	movs	r1, #52	; 0x34
 8013798:	fb01 f303 	mul.w	r3, r1, r3
 801379c:	4413      	add	r3, r2
 801379e:	699b      	ldr	r3, [r3, #24]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d10b      	bne.n	80137bc <Sensor_UpdatePublishParameters+0x184>
          {
            ((SensorServer->pSensorParams)+count)->timerStatus = TIMER_STOPPED;
 80137a4:	4b2b      	ldr	r3, [pc, #172]	; (8013854 <Sensor_UpdatePublishParameters+0x21c>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	685a      	ldr	r2, [r3, #4]
 80137aa:	7d7b      	ldrb	r3, [r7, #21]
 80137ac:	2134      	movs	r1, #52	; 0x34
 80137ae:	fb01 f303 	mul.w	r3, r1, r3
 80137b2:	4413      	add	r3, r2
 80137b4:	2200      	movs	r2, #0
 80137b6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80137ba:	e028      	b.n	801380e <Sensor_UpdatePublishParameters+0x1d6>
          }
          else
          {
      /* start timer for now to immediately send status on change parameters
      subsequently status would be sent after every publish period */
            ((SensorServer->pSensorParams)+count)->timerStatus = TIMER_RUNNING;
 80137bc:	4b25      	ldr	r3, [pc, #148]	; (8013854 <Sensor_UpdatePublishParameters+0x21c>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	685a      	ldr	r2, [r3, #4]
 80137c2:	7d7b      	ldrb	r3, [r7, #21]
 80137c4:	2134      	movs	r1, #52	; 0x34
 80137c6:	fb01 f303 	mul.w	r3, r1, r3
 80137ca:	4413      	add	r3, r2
 80137cc:	2201      	movs	r2, #1
 80137ce:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            ((SensorServer->pSensorParams)+count)->timerBegin = Clock_Time();
 80137d2:	4b20      	ldr	r3, [pc, #128]	; (8013854 <Sensor_UpdatePublishParameters+0x21c>)
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	685a      	ldr	r2, [r3, #4]
 80137d8:	7d7b      	ldrb	r3, [r7, #21]
 80137da:	2134      	movs	r1, #52	; 0x34
 80137dc:	fb01 f303 	mul.w	r3, r1, r3
 80137e0:	18d4      	adds	r4, r2, r3
 80137e2:	f7f4 fb4b 	bl	8007e7c <HAL_GetTick>
 80137e6:	4603      	mov	r3, r0
 80137e8:	6223      	str	r3, [r4, #32]
            ((SensorServer->pSensorParams)+count)->timerEnd = \
              ((SensorServer->pSensorParams)+count)->timerBegin;            
 80137ea:	4b1a      	ldr	r3, [pc, #104]	; (8013854 <Sensor_UpdatePublishParameters+0x21c>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	685a      	ldr	r2, [r3, #4]
 80137f0:	7d7b      	ldrb	r3, [r7, #21]
 80137f2:	2134      	movs	r1, #52	; 0x34
 80137f4:	fb01 f303 	mul.w	r3, r1, r3
 80137f8:	441a      	add	r2, r3
            ((SensorServer->pSensorParams)+count)->timerEnd = \
 80137fa:	4b16      	ldr	r3, [pc, #88]	; (8013854 <Sensor_UpdatePublishParameters+0x21c>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	6859      	ldr	r1, [r3, #4]
 8013800:	7d7b      	ldrb	r3, [r7, #21]
 8013802:	2034      	movs	r0, #52	; 0x34
 8013804:	fb00 f303 	mul.w	r3, r0, r3
 8013808:	440b      	add	r3, r1
              ((SensorServer->pSensorParams)+count)->timerBegin;            
 801380a:	6a12      	ldr	r2, [r2, #32]
            ((SensorServer->pSensorParams)+count)->timerEnd = \
 801380c:	625a      	str	r2, [r3, #36]	; 0x24
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 801380e:	7d7b      	ldrb	r3, [r7, #21]
 8013810:	3301      	adds	r3, #1
 8013812:	757b      	strb	r3, [r7, #21]
 8013814:	4b0f      	ldr	r3, [pc, #60]	; (8013854 <Sensor_UpdatePublishParameters+0x21c>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	7a1b      	ldrb	r3, [r3, #8]
 801381a:	7d7a      	ldrb	r2, [r7, #21]
 801381c:	429a      	cmp	r2, r3
 801381e:	d39b      	bcc.n	8013758 <Sensor_UpdatePublishParameters+0x120>
        {
          /* */
        }
      }
      
      result = MOBLE_RESULT_SUCCESS;
 8013820:	2300      	movs	r3, #0
 8013822:	75bb      	strb	r3, [r7, #22]
 8013824:	e010      	b.n	8013848 <Sensor_UpdatePublishParameters+0x210>
    }
    else /* cadence not supported */
    {
      TRACE_M(TF_SENSOR_M, "Cadence not supported\r\n");
 8013826:	2100      	movs	r1, #0
 8013828:	480b      	ldr	r0, [pc, #44]	; (8013858 <Sensor_UpdatePublishParameters+0x220>)
 801382a:	f7f9 fead 	bl	800d588 <TraceHeader>
 801382e:	480f      	ldr	r0, [pc, #60]	; (801386c <Sensor_UpdatePublishParameters+0x234>)
 8013830:	f016 f818 	bl	8029864 <puts>
 8013834:	e008      	b.n	8013848 <Sensor_UpdatePublishParameters+0x210>
    }
  }
  else
  {
    result = MOBLE_RESULT_FAIL;
 8013836:	2302      	movs	r3, #2
 8013838:	75bb      	strb	r3, [r7, #22]
    TRACE_M(TF_SENSOR_M, "Sensor not initialized\r\n");
 801383a:	2100      	movs	r1, #0
 801383c:	4806      	ldr	r0, [pc, #24]	; (8013858 <Sensor_UpdatePublishParameters+0x220>)
 801383e:	f7f9 fea3 	bl	800d588 <TraceHeader>
 8013842:	480b      	ldr	r0, [pc, #44]	; (8013870 <Sensor_UpdatePublishParameters+0x238>)
 8013844:	f016 f80e 	bl	8029864 <puts>
  }
  
  return result;
 8013848:	7dbb      	ldrb	r3, [r7, #22]
}
 801384a:	4618      	mov	r0, r3
 801384c:	371c      	adds	r7, #28
 801384e:	46bd      	mov	sp, r7
 8013850:	bd90      	pop	{r4, r7, pc}
 8013852:	bf00      	nop
 8013854:	20006e68 	.word	0x20006e68
 8013858:	0803338c 	.word	0x0803338c
 801385c:	0803097c 	.word	0x0803097c
 8013860:	08030988 	.word	0x08030988
 8013864:	080309a4 	.word	0x080309a4
 8013868:	080309e0 	.word	0x080309e0
 801386c:	08030a18 	.word	0x08030a18
 8013870:	0803034c 	.word	0x0803034c

08013874 <Sensor_ModelPublishSet>:
  * @retval Fail if model id is not sensor server
  *         Fail if sensor not initialized
  *         else Success
  */
__weak MOBLE_RESULT Sensor_ModelPublishSet(model_publicationparams_t* pPublishParams)
{
 8013874:	b590      	push	{r4, r7, lr}
 8013876:	b087      	sub	sp, #28
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 801387c:	2300      	movs	r3, #0
 801387e:	75fb      	strb	r3, [r7, #23]
  MOBLEUINT8 elementIdx;
  MOBLEUINT32 rcvdPublishPeriod;
  sensor_params_t* pParams = NULL;
 8013880:	2300      	movs	r3, #0
 8013882:	613b      	str	r3, [r7, #16]
  
  if(SensorServer != NULL)
 8013884:	4b39      	ldr	r3, [pc, #228]	; (801396c <Sensor_ModelPublishSet+0xf8>)
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d063      	beq.n	8013954 <Sensor_ModelPublishSet+0xe0>
  {
    if (pPublishParams != NULL &&
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d056      	beq.n	8013940 <Sensor_ModelPublishSet+0xcc>
        pPublishParams->modelID == SENSOR_SERVER_MODEL_ID)
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	685b      	ldr	r3, [r3, #4]
    if (pPublishParams != NULL &&
 8013896:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 801389a:	d151      	bne.n	8013940 <Sensor_ModelPublishSet+0xcc>
    {
      /* extract element index */
      elementIdx = pPublishParams->elementAddress - BLEMesh_GetAddress();
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	781c      	ldrb	r4, [r3, #0]
 80138a0:	f009 fbec 	bl	801d07c <BLEMesh_GetAddress>
 80138a4:	4603      	mov	r3, r0
 80138a6:	b2db      	uxtb	r3, r3
 80138a8:	1ae3      	subs	r3, r4, r3
 80138aa:	73fb      	strb	r3, [r7, #15]
      rcvdPublishPeriod = pPublishParams->publishPeriod;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	7b9b      	ldrb	r3, [r3, #14]
 80138b0:	60bb      	str	r3, [r7, #8]
        
      rcvdPublishPeriod = (rcvdPublishPeriod & 0x3F)*\
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	f003 043f 	and.w	r4, r3, #63	; 0x3f
                           Get_StepResolutionValue(rcvdPublishPeriod>>6);
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	099b      	lsrs	r3, r3, #6
 80138bc:	b2db      	uxtb	r3, r3
 80138be:	4618      	mov	r0, r3
 80138c0:	f7f9 fe36 	bl	800d530 <Get_StepResolutionValue>
 80138c4:	4603      	mov	r3, r0
      rcvdPublishPeriod = (rcvdPublishPeriod & 0x3F)*\
 80138c6:	fb04 f303 	mul.w	r3, r4, r3
 80138ca:	60bb      	str	r3, [r7, #8]
    
      TRACE_M(TF_SENSOR_M, "Element index %d publish period %ld ms\r\n",
 80138cc:	2100      	movs	r1, #0
 80138ce:	4828      	ldr	r0, [pc, #160]	; (8013970 <Sensor_ModelPublishSet+0xfc>)
 80138d0:	f7f9 fe5a 	bl	800d588 <TraceHeader>
 80138d4:	7bfb      	ldrb	r3, [r7, #15]
 80138d6:	68ba      	ldr	r2, [r7, #8]
 80138d8:	4619      	mov	r1, r3
 80138da:	4826      	ldr	r0, [pc, #152]	; (8013974 <Sensor_ModelPublishSet+0x100>)
 80138dc:	f015 ff3c 	bl	8029758 <iprintf>
              elementIdx, rcvdPublishPeriod);

      /* update publish period of all sensors on element given by publish parameters */
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 80138e0:	2300      	movs	r3, #0
 80138e2:	75bb      	strb	r3, [r7, #22]
 80138e4:	e025      	b.n	8013932 <Sensor_ModelPublishSet+0xbe>
      {
        pParams = SensorServer->pSensorParams + count;
 80138e6:	4b21      	ldr	r3, [pc, #132]	; (801396c <Sensor_ModelPublishSet+0xf8>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	685a      	ldr	r2, [r3, #4]
 80138ec:	7dbb      	ldrb	r3, [r7, #22]
 80138ee:	2134      	movs	r1, #52	; 0x34
 80138f0:	fb01 f303 	mul.w	r3, r1, r3
 80138f4:	4413      	add	r3, r2
 80138f6:	613b      	str	r3, [r7, #16]

        if (pParams != NULL)
 80138f8:	693b      	ldr	r3, [r7, #16]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d00d      	beq.n	801391a <Sensor_ModelPublishSet+0xa6>
        {
          if (pParams->elementIdx == elementIdx)
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013904:	7bfa      	ldrb	r2, [r7, #15]
 8013906:	429a      	cmp	r2, r3
 8013908:	d110      	bne.n	801392c <Sensor_ModelPublishSet+0xb8>
          {
            pParams->modelPublishPeriodMs = rcvdPublishPeriod;
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	68ba      	ldr	r2, [r7, #8]
 801390e:	619a      	str	r2, [r3, #24]
            Sensor_UpdatePublishParameters(count);
 8013910:	7dbb      	ldrb	r3, [r7, #22]
 8013912:	4618      	mov	r0, r3
 8013914:	f7ff fe90 	bl	8013638 <Sensor_UpdatePublishParameters>
 8013918:	e008      	b.n	801392c <Sensor_ModelPublishSet+0xb8>
            /* */
          }
        }
        else
        {
          TRACE_M(TF_SENSOR_M, "Sensor not initialized\r\n");
 801391a:	2100      	movs	r1, #0
 801391c:	4814      	ldr	r0, [pc, #80]	; (8013970 <Sensor_ModelPublishSet+0xfc>)
 801391e:	f7f9 fe33 	bl	800d588 <TraceHeader>
 8013922:	4815      	ldr	r0, [pc, #84]	; (8013978 <Sensor_ModelPublishSet+0x104>)
 8013924:	f015 ff9e 	bl	8029864 <puts>
          break;
 8013928:	bf00      	nop
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 801392a:	e01a      	b.n	8013962 <Sensor_ModelPublishSet+0xee>
 801392c:	7dbb      	ldrb	r3, [r7, #22]
 801392e:	3301      	adds	r3, #1
 8013930:	75bb      	strb	r3, [r7, #22]
 8013932:	4b0e      	ldr	r3, [pc, #56]	; (801396c <Sensor_ModelPublishSet+0xf8>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	7a1b      	ldrb	r3, [r3, #8]
 8013938:	7dba      	ldrb	r2, [r7, #22]
 801393a:	429a      	cmp	r2, r3
 801393c:	d3d3      	bcc.n	80138e6 <Sensor_ModelPublishSet+0x72>
 801393e:	e010      	b.n	8013962 <Sensor_ModelPublishSet+0xee>
        }
      }
    }
    else
    {
      TRACE_M(TF_SENSOR_M, "Not for sensor server model\r\n");
 8013940:	2100      	movs	r1, #0
 8013942:	480b      	ldr	r0, [pc, #44]	; (8013970 <Sensor_ModelPublishSet+0xfc>)
 8013944:	f7f9 fe20 	bl	800d588 <TraceHeader>
 8013948:	480c      	ldr	r0, [pc, #48]	; (801397c <Sensor_ModelPublishSet+0x108>)
 801394a:	f015 ff8b 	bl	8029864 <puts>
      result = MOBLE_RESULT_FAIL;
 801394e:	2302      	movs	r3, #2
 8013950:	75fb      	strb	r3, [r7, #23]
 8013952:	e006      	b.n	8013962 <Sensor_ModelPublishSet+0xee>
    }
  }
  else
  {
    TRACE_M(TF_SENSOR_M, "Sensor server not initialized\r\n");
 8013954:	2100      	movs	r1, #0
 8013956:	4806      	ldr	r0, [pc, #24]	; (8013970 <Sensor_ModelPublishSet+0xfc>)
 8013958:	f7f9 fe16 	bl	800d588 <TraceHeader>
 801395c:	4808      	ldr	r0, [pc, #32]	; (8013980 <Sensor_ModelPublishSet+0x10c>)
 801395e:	f015 ff81 	bl	8029864 <puts>
  }
  
  return result;
 8013962:	7dfb      	ldrb	r3, [r7, #23]
}
 8013964:	4618      	mov	r0, r3
 8013966:	371c      	adds	r7, #28
 8013968:	46bd      	mov	sp, r7
 801396a:	bd90      	pop	{r4, r7, pc}
 801396c:	20006e68 	.word	0x20006e68
 8013970:	080333ac 	.word	0x080333ac
 8013974:	08030fe4 	.word	0x08030fe4
 8013978:	0803034c 	.word	0x0803034c
 801397c:	08031010 	.word	0x08031010
 8013980:	08030a48 	.word	0x08030a48

08013984 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8013984:	b480      	push	{r7}
 8013986:	af00      	add	r7, sp, #0
  return;
 8013988:	bf00      	nop
}
 801398a:	46bd      	mov	sp, r7
 801398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013990:	4770      	bx	lr

08013992 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8013992:	b480      	push	{r7}
 8013994:	af00      	add	r7, sp, #0
  return;
 8013996:	bf00      	nop
}
 8013998:	46bd      	mov	sp, r7
 801399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399e:	4770      	bx	lr

080139a0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80139a0:	b480      	push	{r7}
 80139a2:	af00      	add	r7, sp, #0
  return;
 80139a4:	bf00      	nop
}
 80139a6:	46bd      	mov	sp, r7
 80139a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ac:	4770      	bx	lr

080139ae <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80139ae:	b480      	push	{r7}
 80139b0:	af00      	add	r7, sp, #0
  return;
 80139b2:	bf00      	nop
}
 80139b4:	46bd      	mov	sp, r7
 80139b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ba:	4770      	bx	lr

080139bc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80139bc:	b480      	push	{r7}
 80139be:	af00      	add	r7, sp, #0
  return;
 80139c0:	bf00      	nop
}
 80139c2:	46bd      	mov	sp, r7
 80139c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c8:	4770      	bx	lr

080139ca <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80139ca:	b480      	push	{r7}
 80139cc:	af00      	add	r7, sp, #0
  return;
 80139ce:	bf00      	nop
}
 80139d0:	46bd      	mov	sp, r7
 80139d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d6:	4770      	bx	lr

080139d8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80139d8:	b480      	push	{r7}
 80139da:	af00      	add	r7, sp, #0
  return;
 80139dc:	bf00      	nop
}
 80139de:	46bd      	mov	sp, r7
 80139e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e4:	4770      	bx	lr

080139e6 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80139e6:	b480      	push	{r7}
 80139e8:	af00      	add	r7, sp, #0
  return;
 80139ea:	bf00      	nop
}
 80139ec:	46bd      	mov	sp, r7
 80139ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f2:	4770      	bx	lr

080139f4 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80139f4:	b480      	push	{r7}
 80139f6:	af00      	add	r7, sp, #0
  return;
 80139f8:	bf00      	nop
}
 80139fa:	46bd      	mov	sp, r7
 80139fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a00:	4770      	bx	lr

08013a02 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8013a02:	b480      	push	{r7}
 8013a04:	af00      	add	r7, sp, #0
  return;
 8013a06:	bf00      	nop
}
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0e:	4770      	bx	lr

08013a10 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8013a10:	b480      	push	{r7}
 8013a12:	af00      	add	r7, sp, #0
  return;
 8013a14:	bf00      	nop
}
 8013a16:	46bd      	mov	sp, r7
 8013a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1c:	4770      	bx	lr

08013a1e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8013a1e:	b480      	push	{r7}
 8013a20:	af00      	add	r7, sp, #0
  return;
 8013a22:	bf00      	nop
}
 8013a24:	46bd      	mov	sp, r7
 8013a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2a:	4770      	bx	lr

08013a2c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8013a2c:	b480      	push	{r7}
 8013a2e:	af00      	add	r7, sp, #0
  return;
 8013a30:	bf00      	nop
}
 8013a32:	46bd      	mov	sp, r7
 8013a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a38:	4770      	bx	lr

08013a3a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8013a3a:	b480      	push	{r7}
 8013a3c:	af00      	add	r7, sp, #0
  return;
 8013a3e:	bf00      	nop
}
 8013a40:	46bd      	mov	sp, r7
 8013a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a46:	4770      	bx	lr

08013a48 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8013a48:	b480      	push	{r7}
 8013a4a:	af00      	add	r7, sp, #0
  return;
 8013a4c:	bf00      	nop
}
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a54:	4770      	bx	lr

08013a56 <BVOPUS_STM_Init>:
__WEAK void MESH_Init( void )
{
  return;
}
__WEAK void BVOPUS_STM_Init( void )
{
 8013a56:	b480      	push	{r7}
 8013a58:	af00      	add	r7, sp, #0
  return;
 8013a5a:	bf00      	nop
}
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a62:	4770      	bx	lr

08013a64 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8013a64:	b480      	push	{r7}
 8013a66:	af00      	add	r7, sp, #0
  return;
 8013a68:	bf00      	nop
}
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a70:	4770      	bx	lr
	...

08013a74 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8013a78:	4b04      	ldr	r3, [pc, #16]	; (8013a8c <SVCCTL_Init+0x18>)
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8013a7e:	4b04      	ldr	r3, [pc, #16]	; (8013a90 <SVCCTL_Init+0x1c>)
 8013a80:	2200      	movs	r2, #0
 8013a82:	751a      	strb	r2, [r3, #20]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8013a84:	f000 f806 	bl	8013a94 <SVCCTL_SvcInit>

  return;
 8013a88:	bf00      	nop
}
 8013a8a:	bd80      	pop	{r7, pc}
 8013a8c:	2000029c 	.word	0x2000029c
 8013a90:	200002bc 	.word	0x200002bc

08013a94 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	af00      	add	r7, sp, #0
  BAS_Init();
 8013a98:	f7ff ff74 	bl	8013984 <BAS_Init>

  BLS_Init();
 8013a9c:	f7ff ff79 	bl	8013992 <BLS_Init>

  CRS_STM_Init();
 8013aa0:	f7ff ff7e 	bl	80139a0 <CRS_STM_Init>

  DIS_Init();
 8013aa4:	f7ff ff83 	bl	80139ae <DIS_Init>

  EDS_STM_Init();
 8013aa8:	f7ff ff88 	bl	80139bc <EDS_STM_Init>

  HIDS_Init();
 8013aac:	f7ff ff8d 	bl	80139ca <HIDS_Init>

  HRS_Init();
 8013ab0:	f7ff ff92 	bl	80139d8 <HRS_Init>

  HTS_Init();
 8013ab4:	f7ff ff97 	bl	80139e6 <HTS_Init>

  IAS_Init();
 8013ab8:	f7ff ff9c 	bl	80139f4 <IAS_Init>

  LLS_Init();
 8013abc:	f7ff ffa1 	bl	8013a02 <LLS_Init>

  TPS_Init();
 8013ac0:	f7ff ffa6 	bl	8013a10 <TPS_Init>

  MOTENV_STM_Init();
 8013ac4:	f7ff ffab 	bl	8013a1e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8013ac8:	f7ff ffb0 	bl	8013a2c <P2PS_STM_Init>

  ZDD_STM_Init();
 8013acc:	f7ff ffb5 	bl	8013a3a <ZDD_STM_Init>

  OTAS_STM_Init();
 8013ad0:	f7ff ffba 	bl	8013a48 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8013ad4:	f7ff ffbf 	bl	8013a56 <BVOPUS_STM_Init>

  MESH_Init();
 8013ad8:	f7fe fa32 	bl	8011f40 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8013adc:	f7ff ffc2 	bl	8013a64 <SVCCTL_InitCustomSvc>
  
  return;
 8013ae0:	bf00      	nop
}
 8013ae2:	bd80      	pop	{r7, pc}

08013ae4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b086      	sub	sp, #24
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	3301      	adds	r3, #1
 8013af0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8013af2:	2300      	movs	r3, #0
 8013af4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	781b      	ldrb	r3, [r3, #0]
 8013afa:	2bff      	cmp	r3, #255	; 0xff
 8013afc:	d13f      	bne.n	8013b7e <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8013afe:	693b      	ldr	r3, [r7, #16]
 8013b00:	3302      	adds	r3, #2
 8013b02:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	881b      	ldrh	r3, [r3, #0]
 8013b08:	b29b      	uxth	r3, r3
 8013b0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013b0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013b12:	d132      	bne.n	8013b7a <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8013b14:	2300      	movs	r3, #0
 8013b16:	757b      	strb	r3, [r7, #21]
 8013b18:	e00d      	b.n	8013b36 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8013b1a:	7d7b      	ldrb	r3, [r7, #21]
 8013b1c:	4a27      	ldr	r2, [pc, #156]	; (8013bbc <SVCCTL_UserEvtRx+0xd8>)
 8013b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	4798      	blx	r3
 8013b26:	4603      	mov	r3, r0
 8013b28:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8013b2a:	7dfb      	ldrb	r3, [r7, #23]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d108      	bne.n	8013b42 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8013b30:	7d7b      	ldrb	r3, [r7, #21]
 8013b32:	3301      	adds	r3, #1
 8013b34:	757b      	strb	r3, [r7, #21]
 8013b36:	4b21      	ldr	r3, [pc, #132]	; (8013bbc <SVCCTL_UserEvtRx+0xd8>)
 8013b38:	7f1b      	ldrb	r3, [r3, #28]
 8013b3a:	7d7a      	ldrb	r2, [r7, #21]
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d3ec      	bcc.n	8013b1a <SVCCTL_UserEvtRx+0x36>
 8013b40:	e000      	b.n	8013b44 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 8013b42:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 8013b44:	2300      	movs	r3, #0
 8013b46:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8013b48:	2300      	movs	r3, #0
 8013b4a:	757b      	strb	r3, [r7, #21]
 8013b4c:	e00d      	b.n	8013b6a <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 8013b4e:	7d7b      	ldrb	r3, [r7, #21]
 8013b50:	4a1b      	ldr	r2, [pc, #108]	; (8013bc0 <SVCCTL_UserEvtRx+0xdc>)
 8013b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	4798      	blx	r3
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8013b5e:	7dfb      	ldrb	r3, [r7, #23]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d108      	bne.n	8013b76 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8013b64:	7d7b      	ldrb	r3, [r7, #21]
 8013b66:	3301      	adds	r3, #1
 8013b68:	757b      	strb	r3, [r7, #21]
 8013b6a:	4b15      	ldr	r3, [pc, #84]	; (8013bc0 <SVCCTL_UserEvtRx+0xdc>)
 8013b6c:	7d1b      	ldrb	r3, [r3, #20]
 8013b6e:	7d7a      	ldrb	r2, [r7, #21]
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d3ec      	bcc.n	8013b4e <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 8013b74:	e002      	b.n	8013b7c <SVCCTL_UserEvtRx+0x98>
              break;
 8013b76:	bf00      	nop
          break;
 8013b78:	e000      	b.n	8013b7c <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 8013b7a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8013b7c:	e000      	b.n	8013b80 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 8013b7e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8013b80:	7dfb      	ldrb	r3, [r7, #23]
 8013b82:	2b02      	cmp	r3, #2
 8013b84:	d00f      	beq.n	8013ba6 <SVCCTL_UserEvtRx+0xc2>
 8013b86:	2b02      	cmp	r3, #2
 8013b88:	dc10      	bgt.n	8013bac <SVCCTL_UserEvtRx+0xc8>
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d002      	beq.n	8013b94 <SVCCTL_UserEvtRx+0xb0>
 8013b8e:	2b01      	cmp	r3, #1
 8013b90:	d006      	beq.n	8013ba0 <SVCCTL_UserEvtRx+0xbc>
 8013b92:	e00b      	b.n	8013bac <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8013b94:	6878      	ldr	r0, [r7, #4]
 8013b96:	f7ef fdc5 	bl	8003724 <SVCCTL_App_Notification>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	75bb      	strb	r3, [r7, #22]
      break;
 8013b9e:	e008      	b.n	8013bb2 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8013ba0:	2301      	movs	r3, #1
 8013ba2:	75bb      	strb	r3, [r7, #22]
      break;
 8013ba4:	e005      	b.n	8013bb2 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	75bb      	strb	r3, [r7, #22]
      break;
 8013baa:	e002      	b.n	8013bb2 <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8013bac:	2301      	movs	r3, #1
 8013bae:	75bb      	strb	r3, [r7, #22]
      break;
 8013bb0:	bf00      	nop
  }

  return (return_status);
 8013bb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3718      	adds	r7, #24
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	2000029c 	.word	0x2000029c
 8013bc0:	200002bc 	.word	0x200002bc

08013bc4 <Vendor_WriteLocalDataCb>:
MOBLE_RESULT Vendor_WriteLocalDataCb(MODEL_MessageHeader_t *pmsgParams,  
                                     MOBLEUINT8 command, 
                                     MOBLEUINT8 const *data, 
                                     MOBLEUINT32 length, 
                                     MOBLEBOOL response)
{
 8013bc4:	b590      	push	{r4, r7, lr}
 8013bc6:	b089      	sub	sp, #36	; 0x24
 8013bc8:	af02      	add	r7, sp, #8
 8013bca:	60f8      	str	r0, [r7, #12]
 8013bcc:	607a      	str	r2, [r7, #4]
 8013bce:	603b      	str	r3, [r7, #0]
 8013bd0:	460b      	mov	r3, r1
 8013bd2:	72fb      	strb	r3, [r7, #11]
  
  MOBLE_COMMAND_STATUS status = STATUS_SUCCESS;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	75fb      	strb	r3, [r7, #23]
  
  /* Traces for the Data */
  uint16_t idx = 0;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	82bb      	strh	r3, [r7, #20]
  TRACE_I(TF_VENDOR_M, 
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	781b      	ldrb	r3, [r3, #0]
 8013be0:	4619      	mov	r1, r3
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	889b      	ldrh	r3, [r3, #4]
 8013be6:	4618      	mov	r0, r3
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	88db      	ldrh	r3, [r3, #6]
 8013bec:	461c      	mov	r4, r3
 8013bee:	7afb      	ldrb	r3, [r7, #11]
 8013bf0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013bf4:	9201      	str	r2, [sp, #4]
 8013bf6:	9300      	str	r3, [sp, #0]
 8013bf8:	4623      	mov	r3, r4
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	4840      	ldr	r0, [pc, #256]	; (8013d00 <Vendor_WriteLocalDataCb+0x13c>)
 8013bfe:	f015 fdab 	bl	8029758 <iprintf>
          pmsgParams->peer_addr, 
          pmsgParams->dst_peer, 
          command, 
          response);
  
  TRACE_I(TF_VENDOR_M, "DATA_RECEIVED length = %ld\n\r",length);
 8013c02:	6839      	ldr	r1, [r7, #0]
 8013c04:	483f      	ldr	r0, [pc, #252]	; (8013d04 <Vendor_WriteLocalDataCb+0x140>)
 8013c06:	f015 fda7 	bl	8029758 <iprintf>
  
         for (idx=0; idx<length; idx++)
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	82bb      	strh	r3, [r7, #20]
 8013c0e:	e00e      	b.n	8013c2e <Vendor_WriteLocalDataCb+0x6a>
         {
           TRACE_I(TF_VENDOR_M,"data[%d]= %d",idx,data[idx]);  
 8013c10:	8ab9      	ldrh	r1, [r7, #20]
 8013c12:	8abb      	ldrh	r3, [r7, #20]
 8013c14:	687a      	ldr	r2, [r7, #4]
 8013c16:	4413      	add	r3, r2
 8013c18:	781b      	ldrb	r3, [r3, #0]
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	483a      	ldr	r0, [pc, #232]	; (8013d08 <Vendor_WriteLocalDataCb+0x144>)
 8013c1e:	f015 fd9b 	bl	8029758 <iprintf>
           TRACE_I(TF_VENDOR_M,"\n\r");
 8013c22:	483a      	ldr	r0, [pc, #232]	; (8013d0c <Vendor_WriteLocalDataCb+0x148>)
 8013c24:	f015 fd98 	bl	8029758 <iprintf>
         for (idx=0; idx<length; idx++)
 8013c28:	8abb      	ldrh	r3, [r7, #20]
 8013c2a:	3301      	adds	r3, #1
 8013c2c:	82bb      	strh	r3, [r7, #20]
 8013c2e:	8abb      	ldrh	r3, [r7, #20]
 8013c30:	683a      	ldr	r2, [r7, #0]
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d8ec      	bhi.n	8013c10 <Vendor_WriteLocalDataCb+0x4c>
         }
         
           switch (command)
 8013c36:	7afb      	ldrb	r3, [r7, #11]
 8013c38:	2b0e      	cmp	r3, #14
 8013c3a:	d016      	beq.n	8013c6a <Vendor_WriteLocalDataCb+0xa6>
 8013c3c:	2b0e      	cmp	r3, #14
 8013c3e:	dc1a      	bgt.n	8013c76 <Vendor_WriteLocalDataCb+0xb2>
 8013c40:	2b01      	cmp	r3, #1
 8013c42:	d002      	beq.n	8013c4a <Vendor_WriteLocalDataCb+0x86>
 8013c44:	2b03      	cmp	r3, #3
 8013c46:	d006      	beq.n	8013c56 <Vendor_WriteLocalDataCb+0x92>
 8013c48:	e015      	b.n	8013c76 <Vendor_WriteLocalDataCb+0xb2>
           case APPLI_TEST_CMD:
             {
               /*This is callback when ever command is coming for test of response
                 time,command reached count, data byte sent
               */          
               VendorAppli_cb.TestCommand_cb(data, length);
 8013c4a:	4b31      	ldr	r3, [pc, #196]	; (8013d10 <Vendor_WriteLocalDataCb+0x14c>)
 8013c4c:	689b      	ldr	r3, [r3, #8]
 8013c4e:	6839      	ldr	r1, [r7, #0]
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	4798      	blx	r3
               break;
 8013c54:	e012      	b.n	8013c7c <Vendor_WriteLocalDataCb+0xb8>
               /* 
               Message Received     B0     B1    B2      B3    B4    B5    B6     B7 
               B0 - Sub-Cmd LED
               B1-B7 - Data Bytes       
               */          
               VendorAppli_cb.LEDControlCommand_Cb(data, length, pmsgParams->elementIndex,\
 8013c56:	4b2e      	ldr	r3, [pc, #184]	; (8013d10 <Vendor_WriteLocalDataCb+0x14c>)
 8013c58:	681c      	ldr	r4, [r3, #0]
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	781a      	ldrb	r2, [r3, #0]
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	88db      	ldrh	r3, [r3, #6]
 8013c62:	6839      	ldr	r1, [r7, #0]
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	47a0      	blx	r4
                 pmsgParams->dst_peer);
               break;
 8013c68:	e008      	b.n	8013c7c <Vendor_WriteLocalDataCb+0xb8>
           case APPLI_DATA_CNTRL_CMD:
             {
               /*This is callback when ever command is coming for test of response
                 time,command reached count, data byte sent
               */          
               VendorAppli_cb.DataControlCommand_cb(data,length);    
 8013c6a:	4b29      	ldr	r3, [pc, #164]	; (8013d10 <Vendor_WriteLocalDataCb+0x14c>)
 8013c6c:	695b      	ldr	r3, [r3, #20]
 8013c6e:	6839      	ldr	r1, [r7, #0]
 8013c70:	6878      	ldr	r0, [r7, #4]
 8013c72:	4798      	blx	r3
               break;       
 8013c74:	e002      	b.n	8013c7c <Vendor_WriteLocalDataCb+0xb8>
             } 
             /* Default case - Not valid command */
           default:
             {
               status = STATUS_INVALID_COMMAND;
 8013c76:	2301      	movs	r3, #1
 8013c78:	75fb      	strb	r3, [r7, #23]
               break;
 8013c7a:	bf00      	nop
           }
                   
         /* this expression is used to send the status of data received whether it
         is correct or not , First 3 bits are for status and last 5 bit are for sub commands
         */
         ResponseBuffer[0] = ResponseBuffer[0] | (status << 5);
 8013c7c:	4b25      	ldr	r3, [pc, #148]	; (8013d14 <Vendor_WriteLocalDataCb+0x150>)
 8013c7e:	781b      	ldrb	r3, [r3, #0]
 8013c80:	b25a      	sxtb	r2, r3
 8013c82:	7dfb      	ldrb	r3, [r7, #23]
 8013c84:	015b      	lsls	r3, r3, #5
 8013c86:	b25b      	sxtb	r3, r3
 8013c88:	4313      	orrs	r3, r2
 8013c8a:	b25b      	sxtb	r3, r3
 8013c8c:	b2da      	uxtb	r2, r3
 8013c8e:	4b21      	ldr	r3, [pc, #132]	; (8013d14 <Vendor_WriteLocalDataCb+0x150>)
 8013c90:	701a      	strb	r2, [r3, #0]
         If response is true, Message response will be sent      
         Message Response     B0     B1    B2      B3    B4    B5    B6     B7 
         B0 - Sub-Cmd 
         B1-B7 - Response Bytes if any 
         */
         if (response == MOBLE_TRUE)
 8013c92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013c96:	2b01      	cmp	r3, #1
 8013c98:	d128      	bne.n	8013cec <Vendor_WriteLocalDataCb+0x128>
         {
           if (ADDRESS_IS_UNICAST(pmsgParams->dst_peer))
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	88db      	ldrh	r3, [r3, #6]
 8013c9e:	b21b      	sxth	r3, r3
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	dd15      	ble.n	8013cd0 <Vendor_WriteLocalDataCb+0x10c>
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	88db      	ldrh	r3, [r3, #6]
 8013ca8:	b21b      	sxth	r3, r3
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	db10      	blt.n	8013cd0 <Vendor_WriteLocalDataCb+0x10c>
           {
             VendorModel_SendResponse(VENDOR_STMICRO_CID, pmsgParams, command, ResponseBuffer, BuffLength);
 8013cae:	4b1a      	ldr	r3, [pc, #104]	; (8013d18 <Vendor_WriteLocalDataCb+0x154>)
 8013cb0:	881b      	ldrh	r3, [r3, #0]
 8013cb2:	7afa      	ldrb	r2, [r7, #11]
 8013cb4:	9300      	str	r3, [sp, #0]
 8013cb6:	4b17      	ldr	r3, [pc, #92]	; (8013d14 <Vendor_WriteLocalDataCb+0x150>)
 8013cb8:	68f9      	ldr	r1, [r7, #12]
 8013cba:	2030      	movs	r0, #48	; 0x30
 8013cbc:	f011 fe6c 	bl	8025998 <VendorModel_SendResponse>
             TRACE_M(TF_VENDOR,"Sending Response for Unicast \n\r");
 8013cc0:	2100      	movs	r1, #0
 8013cc2:	4816      	ldr	r0, [pc, #88]	; (8013d1c <Vendor_WriteLocalDataCb+0x158>)
 8013cc4:	f7f9 fc60 	bl	800d588 <TraceHeader>
 8013cc8:	4815      	ldr	r0, [pc, #84]	; (8013d20 <Vendor_WriteLocalDataCb+0x15c>)
 8013cca:	f015 fd45 	bl	8029758 <iprintf>
 8013cce:	e00d      	b.n	8013cec <Vendor_WriteLocalDataCb+0x128>
           }
           else
           {
             /* Randomize responses*/
             BLEMesh_ModelsDelayPacket(pmsgParams, command, ResponseBuffer, BuffLength);
 8013cd0:	4b11      	ldr	r3, [pc, #68]	; (8013d18 <Vendor_WriteLocalDataCb+0x154>)
 8013cd2:	881b      	ldrh	r3, [r3, #0]
 8013cd4:	7af9      	ldrb	r1, [r7, #11]
 8013cd6:	4a0f      	ldr	r2, [pc, #60]	; (8013d14 <Vendor_WriteLocalDataCb+0x150>)
 8013cd8:	68f8      	ldr	r0, [r7, #12]
 8013cda:	f7f3 f9c7 	bl	800706c <BLEMesh_ModelsDelayPacket>
             TRACE_M(TF_VENDOR,"Sending Response for Multicast \n\r");
 8013cde:	2100      	movs	r1, #0
 8013ce0:	480e      	ldr	r0, [pc, #56]	; (8013d1c <Vendor_WriteLocalDataCb+0x158>)
 8013ce2:	f7f9 fc51 	bl	800d588 <TraceHeader>
 8013ce6:	480f      	ldr	r0, [pc, #60]	; (8013d24 <Vendor_WriteLocalDataCb+0x160>)
 8013ce8:	f015 fd36 	bl	8029758 <iprintf>
           }		
         }
         
         if (status == STATUS_SUCCESS)
 8013cec:	7dfb      	ldrb	r3, [r7, #23]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d101      	bne.n	8013cf6 <Vendor_WriteLocalDataCb+0x132>
         {
           return MOBLE_RESULT_SUCCESS;  
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	e000      	b.n	8013cf8 <Vendor_WriteLocalDataCb+0x134>
         }
         else
         {
           return MOBLE_RESULT_FAIL;
 8013cf6:	2302      	movs	r3, #2
         }
         
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	371c      	adds	r7, #28
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd90      	pop	{r4, r7, pc}
 8013d00:	08031078 	.word	0x08031078
 8013d04:	080310ec 	.word	0x080310ec
 8013d08:	0803110c 	.word	0x0803110c
 8013d0c:	0803111c 	.word	0x0803111c
 8013d10:	08032ce8 	.word	0x08032ce8
 8013d14:	20004454 	.word	0x20004454
 8013d18:	20004490 	.word	0x20004490
 8013d1c:	080333c4 	.word	0x080333c4
 8013d20:	08031120 	.word	0x08031120
 8013d24:	08031140 	.word	0x08031140

08013d28 <Vendor_ReadLocalDataCb>:
MOBLE_RESULT Vendor_ReadLocalDataCb(MODEL_MessageHeader_t *pmsgParams,  
                                   MOBLEUINT8 command, 
                                   MOBLEUINT8 const *data, 
                                   MOBLEUINT32 length, 
                                   MOBLEBOOL response)
{  
 8013d28:	b590      	push	{r4, r7, lr}
 8013d2a:	b089      	sub	sp, #36	; 0x24
 8013d2c:	af02      	add	r7, sp, #8
 8013d2e:	60f8      	str	r0, [r7, #12]
 8013d30:	607a      	str	r2, [r7, #4]
 8013d32:	603b      	str	r3, [r7, #0]
 8013d34:	460b      	mov	r3, r1
 8013d36:	72fb      	strb	r3, [r7, #11]
 
 MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	75fb      	strb	r3, [r7, #23]
 MOBLEUINT8 getBuff[5];
 
 /* Traces for the Data */
  TRACE_M(TF_VENDOR_M,
 8013d3c:	2100      	movs	r1, #0
 8013d3e:	4876      	ldr	r0, [pc, #472]	; (8013f18 <Vendor_ReadLocalDataCb+0x1f0>)
 8013d40:	f7f9 fc22 	bl	800d588 <TraceHeader>
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	4619      	mov	r1, r3
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	889b      	ldrh	r3, [r3, #4]
 8013d4e:	4618      	mov	r0, r3
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	88db      	ldrh	r3, [r3, #6]
 8013d54:	461c      	mov	r4, r3
 8013d56:	7afb      	ldrb	r3, [r7, #11]
 8013d58:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013d5c:	9201      	str	r2, [sp, #4]
 8013d5e:	9300      	str	r3, [sp, #0]
 8013d60:	4623      	mov	r3, r4
 8013d62:	4602      	mov	r2, r0
 8013d64:	486d      	ldr	r0, [pc, #436]	; (8013f1c <Vendor_ReadLocalDataCb+0x1f4>)
 8013d66:	f015 fcf7 	bl	8029758 <iprintf>
          pmsgParams->peer_addr, 
          pmsgParams->dst_peer, 
          command, 
          response);
  
  TRACE_I(TF_VENDOR_M,"DATA_RECEIVED length = %ld\n\r",length);
 8013d6a:	6839      	ldr	r1, [r7, #0]
 8013d6c:	486c      	ldr	r0, [pc, #432]	; (8013f20 <Vendor_ReadLocalDataCb+0x1f8>)
 8013d6e:	f015 fcf3 	bl	8029758 <iprintf>
  
        for (MOBLEUINT8 idx=0; idx<length; idx++)
 8013d72:	2300      	movs	r3, #0
 8013d74:	75bb      	strb	r3, [r7, #22]
 8013d76:	e00e      	b.n	8013d96 <Vendor_ReadLocalDataCb+0x6e>
        {
          TRACE_I(TF_VENDOR_M,"data[%d]= %d",idx,data[idx]); 
 8013d78:	7db9      	ldrb	r1, [r7, #22]
 8013d7a:	7dbb      	ldrb	r3, [r7, #22]
 8013d7c:	687a      	ldr	r2, [r7, #4]
 8013d7e:	4413      	add	r3, r2
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	461a      	mov	r2, r3
 8013d84:	4867      	ldr	r0, [pc, #412]	; (8013f24 <Vendor_ReadLocalDataCb+0x1fc>)
 8013d86:	f015 fce7 	bl	8029758 <iprintf>
          TRACE_I(TF_VENDOR_M,"\n\r");
 8013d8a:	4867      	ldr	r0, [pc, #412]	; (8013f28 <Vendor_ReadLocalDataCb+0x200>)
 8013d8c:	f015 fce4 	bl	8029758 <iprintf>
        for (MOBLEUINT8 idx=0; idx<length; idx++)
 8013d90:	7dbb      	ldrb	r3, [r7, #22]
 8013d92:	3301      	adds	r3, #1
 8013d94:	75bb      	strb	r3, [r7, #22]
 8013d96:	7dbb      	ldrb	r3, [r7, #22]
 8013d98:	683a      	ldr	r2, [r7, #0]
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d8ec      	bhi.n	8013d78 <Vendor_ReadLocalDataCb+0x50>
        }
        
          /* Check which command is in packet */
          switch(command)
 8013d9e:	7afb      	ldrb	r3, [r7, #11]
 8013da0:	3b01      	subs	r3, #1
 8013da2:	2b0d      	cmp	r3, #13
 8013da4:	d866      	bhi.n	8013e74 <Vendor_ReadLocalDataCb+0x14c>
 8013da6:	a201      	add	r2, pc, #4	; (adr r2, 8013dac <Vendor_ReadLocalDataCb+0x84>)
 8013da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dac:	08013de5 	.word	0x08013de5
 8013db0:	08013e17 	.word	0x08013e17
 8013db4:	08013e41 	.word	0x08013e41
 8013db8:	08013e27 	.word	0x08013e27
 8013dbc:	08013e7b 	.word	0x08013e7b
 8013dc0:	08013e75 	.word	0x08013e75
 8013dc4:	08013e75 	.word	0x08013e75
 8013dc8:	08013e75 	.word	0x08013e75
 8013dcc:	08013e75 	.word	0x08013e75
 8013dd0:	08013e75 	.word	0x08013e75
 8013dd4:	08013e75 	.word	0x08013e75
 8013dd8:	08013e75 	.word	0x08013e75
 8013ddc:	08013e75 	.word	0x08013e75
 8013de0:	08013e65 	.word	0x08013e65
              B0 - Sub-Cmd for APPLI_TEST_CMD
              B1-B7 - Data Bytes if any  
              this function gives back the number count of command received by 
              the receiver.
              */
              VendorAppli_cb.GetTestCount(getBuff);
 8013de4:	4b51      	ldr	r3, [pc, #324]	; (8013f2c <Vendor_ReadLocalDataCb+0x204>)
 8013de6:	691b      	ldr	r3, [r3, #16]
 8013de8:	f107 0210 	add.w	r2, r7, #16
 8013dec:	4610      	mov	r0, r2
 8013dee:	4798      	blx	r3
              ResponseBuffer[0] = APPLI_TEST_INC_COUNTER;
 8013df0:	4b4f      	ldr	r3, [pc, #316]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013df2:	2205      	movs	r2, #5
 8013df4:	701a      	strb	r2, [r3, #0]
              ResponseBuffer[1] = getBuff[0];
 8013df6:	7c3a      	ldrb	r2, [r7, #16]
 8013df8:	4b4d      	ldr	r3, [pc, #308]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013dfa:	705a      	strb	r2, [r3, #1]
              ResponseBuffer[2] = getBuff[1];
 8013dfc:	7c7a      	ldrb	r2, [r7, #17]
 8013dfe:	4b4c      	ldr	r3, [pc, #304]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013e00:	709a      	strb	r2, [r3, #2]
              ResponseBuffer[3] = getBuff[2];
 8013e02:	7cba      	ldrb	r2, [r7, #18]
 8013e04:	4b4a      	ldr	r3, [pc, #296]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013e06:	70da      	strb	r2, [r3, #3]
              ResponseBuffer[4] = getBuff[3];
 8013e08:	7cfa      	ldrb	r2, [r7, #19]
 8013e0a:	4b49      	ldr	r3, [pc, #292]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013e0c:	711a      	strb	r2, [r3, #4]
              BuffLength = 5;
 8013e0e:	4b49      	ldr	r3, [pc, #292]	; (8013f34 <Vendor_ReadLocalDataCb+0x20c>)
 8013e10:	2205      	movs	r2, #5
 8013e12:	801a      	strh	r2, [r3, #0]
              break;
 8013e14:	e032      	b.n	8013e7c <Vendor_ReadLocalDataCb+0x154>
              Message Received     B0     B1    B2      B3    B4    B5    B6     B7 
              B0 - Sub-Cmd for APPLI_DEVICE_INFO_CMD
              B1-B7 - Data Bytes if any      
              
              */
              status =  VendorAppli_cb.DeviceInfoCommand_cb(data, length);
 8013e16:	4b45      	ldr	r3, [pc, #276]	; (8013f2c <Vendor_ReadLocalDataCb+0x204>)
 8013e18:	685b      	ldr	r3, [r3, #4]
 8013e1a:	6839      	ldr	r1, [r7, #0]
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	4798      	blx	r3
 8013e20:	4603      	mov	r3, r0
 8013e22:	75fb      	strb	r3, [r7, #23]
              break;
 8013e24:	e02a      	b.n	8013e7c <Vendor_ReadLocalDataCb+0x154>
          case APPLI_ELEMENT_TYPE_CMD:
            {
              /*
              Message Received with Command APPLI_ELEMENT_TYPE_CMD
              */
              ResponseBuffer[0] = ELEMENT_TYPE_LED;
 8013e26:	4b42      	ldr	r3, [pc, #264]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013e28:	2201      	movs	r2, #1
 8013e2a:	701a      	strb	r2, [r3, #0]
              ResponseBuffer[1] = ELEMENT_TYPE_LED;
 8013e2c:	4b40      	ldr	r3, [pc, #256]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013e2e:	2201      	movs	r2, #1
 8013e30:	705a      	strb	r2, [r3, #1]
              ResponseBuffer[2] = ELEMENT_TYPE_SWITCH;
 8013e32:	4b3f      	ldr	r3, [pc, #252]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013e34:	2202      	movs	r2, #2
 8013e36:	709a      	strb	r2, [r3, #2]
              BuffLength  = 3;      
 8013e38:	4b3e      	ldr	r3, [pc, #248]	; (8013f34 <Vendor_ReadLocalDataCb+0x20c>)
 8013e3a:	2203      	movs	r2, #3
 8013e3c:	801a      	strh	r2, [r3, #0]
              break;
 8013e3e:	e01d      	b.n	8013e7c <Vendor_ReadLocalDataCb+0x154>
              /*
              Message Received with Command APPLI_LED_CONTROL_STATUS_CMD
              ResponseBuffer will send the response of selected Element
              */
      
      TRACE_M(TF_VENDOR,"Appli_LED_Control_Status callback received for elementIndex %d \r\n", pmsgParams->elementIndex);     
 8013e40:	2100      	movs	r1, #0
 8013e42:	4835      	ldr	r0, [pc, #212]	; (8013f18 <Vendor_ReadLocalDataCb+0x1f0>)
 8013e44:	f7f9 fba0 	bl	800d588 <TraceHeader>
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	781b      	ldrb	r3, [r3, #0]
 8013e4c:	4619      	mov	r1, r3
 8013e4e:	483a      	ldr	r0, [pc, #232]	; (8013f38 <Vendor_ReadLocalDataCb+0x210>)
 8013e50:	f015 fc82 	bl	8029758 <iprintf>
      /*User Need to send the status as per the element selected*/
                ResponseBuffer[0] = Appli_LedState;
 8013e54:	4b39      	ldr	r3, [pc, #228]	; (8013f3c <Vendor_ReadLocalDataCb+0x214>)
 8013e56:	781a      	ldrb	r2, [r3, #0]
 8013e58:	4b35      	ldr	r3, [pc, #212]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013e5a:	701a      	strb	r2, [r3, #0]
              BuffLength = 1;  
 8013e5c:	4b35      	ldr	r3, [pc, #212]	; (8013f34 <Vendor_ReadLocalDataCb+0x20c>)
 8013e5e:	2201      	movs	r2, #1
 8013e60:	801a      	strh	r2, [r3, #0]
              
              break;
 8013e62:	e00b      	b.n	8013e7c <Vendor_ReadLocalDataCb+0x154>
            {
              /* 
              Message Received with Command APPLI_DATA_CNTRL_CMD
              Call the Data Read Callback to fill Response Buffer with local data
              */ 
              status =  VendorAppli_cb.DataControlCommand_cb(data, length);
 8013e64:	4b31      	ldr	r3, [pc, #196]	; (8013f2c <Vendor_ReadLocalDataCb+0x204>)
 8013e66:	695b      	ldr	r3, [r3, #20]
 8013e68:	6839      	ldr	r1, [r7, #0]
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	4798      	blx	r3
 8013e6e:	4603      	mov	r3, r0
 8013e70:	75fb      	strb	r3, [r7, #23]
              break;       
 8013e72:	e003      	b.n	8013e7c <Vendor_ReadLocalDataCb+0x154>
            }  
            
          default:
            {
              status = MOBLE_RESULT_INVALIDARG;
 8013e74:	2303      	movs	r3, #3
 8013e76:	75fb      	strb	r3, [r7, #23]
              break;
 8013e78:	e000      	b.n	8013e7c <Vendor_ReadLocalDataCb+0x154>
              break;
 8013e7a:	bf00      	nop
          }
  
        /* this expression is used to send the status of data received whether it
        is correct or not , First 3 bits are for status and last 5 bit are for sub commands
        */
        ResponseBuffer[0] = ResponseBuffer[0] | (status << 5);
 8013e7c:	4b2c      	ldr	r3, [pc, #176]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013e7e:	781b      	ldrb	r3, [r3, #0]
 8013e80:	b25a      	sxtb	r2, r3
 8013e82:	7dfb      	ldrb	r3, [r7, #23]
 8013e84:	015b      	lsls	r3, r3, #5
 8013e86:	b25b      	sxtb	r3, r3
 8013e88:	4313      	orrs	r3, r2
 8013e8a:	b25b      	sxtb	r3, r3
 8013e8c:	b2da      	uxtb	r2, r3
 8013e8e:	4b28      	ldr	r3, [pc, #160]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013e90:	701a      	strb	r2, [r3, #0]
        /* Check if the command executed successfully or not */ 
        
        if (MOBLE_RESULT_SUCCESS == status)
 8013e92:	7dfb      	ldrb	r3, [r7, #23]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d11b      	bne.n	8013ed0 <Vendor_ReadLocalDataCb+0x1a8>
          Read Command will always be reliable      
          Message Response     B0     B1    B2      B3    B4    B5    B6     B7 
          B0 - Sub-Cmd for which response is needed
          B1-B7 - Data Bytes if any 
          */
         if (ADDRESS_IS_UNICAST(pmsgParams->dst_peer))
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	88db      	ldrh	r3, [r3, #6]
 8013e9c:	b21b      	sxth	r3, r3
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	dd0e      	ble.n	8013ec0 <Vendor_ReadLocalDataCb+0x198>
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	88db      	ldrh	r3, [r3, #6]
 8013ea6:	b21b      	sxth	r3, r3
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	db09      	blt.n	8013ec0 <Vendor_ReadLocalDataCb+0x198>
          {
            VendorModel_SendResponse(VENDOR_STMICRO_CID, pmsgParams, command, ResponseBuffer, BuffLength);
 8013eac:	4b21      	ldr	r3, [pc, #132]	; (8013f34 <Vendor_ReadLocalDataCb+0x20c>)
 8013eae:	881b      	ldrh	r3, [r3, #0]
 8013eb0:	7afa      	ldrb	r2, [r7, #11]
 8013eb2:	9300      	str	r3, [sp, #0]
 8013eb4:	4b1e      	ldr	r3, [pc, #120]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013eb6:	68f9      	ldr	r1, [r7, #12]
 8013eb8:	2030      	movs	r0, #48	; 0x30
 8013eba:	f011 fd6d 	bl	8025998 <VendorModel_SendResponse>
 8013ebe:	e020      	b.n	8013f02 <Vendor_ReadLocalDataCb+0x1da>
          }
          else
          {
            /* Randomize responses*/
            BLEMesh_ModelsDelayPacket(pmsgParams, command, ResponseBuffer, BuffLength);
 8013ec0:	4b1c      	ldr	r3, [pc, #112]	; (8013f34 <Vendor_ReadLocalDataCb+0x20c>)
 8013ec2:	881b      	ldrh	r3, [r3, #0]
 8013ec4:	7af9      	ldrb	r1, [r7, #11]
 8013ec6:	4a1a      	ldr	r2, [pc, #104]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013ec8:	68f8      	ldr	r0, [r7, #12]
 8013eca:	f7f3 f8cf 	bl	800706c <BLEMesh_ModelsDelayPacket>
 8013ece:	e018      	b.n	8013f02 <Vendor_ReadLocalDataCb+0x1da>
          }
        }
        /* Command not successfully processed */
        else
        {
          if (ADDRESS_IS_UNICAST(pmsgParams->dst_peer))
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	88db      	ldrh	r3, [r3, #6]
 8013ed4:	b21b      	sxth	r3, r3
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	dd0d      	ble.n	8013ef6 <Vendor_ReadLocalDataCb+0x1ce>
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	88db      	ldrh	r3, [r3, #6]
 8013ede:	b21b      	sxth	r3, r3
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	db08      	blt.n	8013ef6 <Vendor_ReadLocalDataCb+0x1ce>
          {
            VendorModel_SendResponse(VENDOR_STMICRO_CID, pmsgParams, command, ResponseBuffer, 1);
 8013ee4:	7afa      	ldrb	r2, [r7, #11]
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	9300      	str	r3, [sp, #0]
 8013eea:	4b11      	ldr	r3, [pc, #68]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013eec:	68f9      	ldr	r1, [r7, #12]
 8013eee:	2030      	movs	r0, #48	; 0x30
 8013ef0:	f011 fd52 	bl	8025998 <VendorModel_SendResponse>
 8013ef4:	e005      	b.n	8013f02 <Vendor_ReadLocalDataCb+0x1da>
          }
          else
          {
            /* Randomize responses*/
            BLEMesh_ModelsDelayPacket(pmsgParams, command, ResponseBuffer, 1);
 8013ef6:	7af9      	ldrb	r1, [r7, #11]
 8013ef8:	2301      	movs	r3, #1
 8013efa:	4a0d      	ldr	r2, [pc, #52]	; (8013f30 <Vendor_ReadLocalDataCb+0x208>)
 8013efc:	68f8      	ldr	r0, [r7, #12]
 8013efe:	f7f3 f8b5 	bl	800706c <BLEMesh_ModelsDelayPacket>
          }
        }
        
        if (status == MOBLE_RESULT_SUCCESS)
 8013f02:	7dfb      	ldrb	r3, [r7, #23]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d101      	bne.n	8013f0c <Vendor_ReadLocalDataCb+0x1e4>
        {
          return MOBLE_RESULT_SUCCESS;  
 8013f08:	2300      	movs	r3, #0
 8013f0a:	e000      	b.n	8013f0e <Vendor_ReadLocalDataCb+0x1e6>
        }
        else
        {
          return MOBLE_RESULT_FAIL;
 8013f0c:	2302      	movs	r3, #2
        }
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	371c      	adds	r7, #28
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd90      	pop	{r4, r7, pc}
 8013f16:	bf00      	nop
 8013f18:	080333dc 	.word	0x080333dc
 8013f1c:	08031164 	.word	0x08031164
 8013f20:	080310ec 	.word	0x080310ec
 8013f24:	0803110c 	.word	0x0803110c
 8013f28:	0803111c 	.word	0x0803111c
 8013f2c:	08032ce8 	.word	0x08032ce8
 8013f30:	20004454 	.word	0x20004454
 8013f34:	20004490 	.word	0x20004490
 8013f38:	080311dc 	.word	0x080311dc
 8013f3c:	2000442e 	.word	0x2000442e

08013f40 <Vendor_OnResponseDataCb>:
MOBLE_RESULT Vendor_OnResponseDataCb(MODEL_MessageHeader_t *pmsgParam,  
                                     MOBLEUINT8 command, 
                                     MOBLEUINT8 const *pRxData, 
                                     MOBLEUINT32 dataLength, 
                                     MOBLEBOOL response)
{
 8013f40:	b590      	push	{r4, r7, lr}
 8013f42:	b08b      	sub	sp, #44	; 0x2c
 8013f44:	af02      	add	r7, sp, #8
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	607a      	str	r2, [r7, #4]
 8013f4a:	603b      	str	r3, [r7, #0]
 8013f4c:	460b      	mov	r3, r1
 8013f4e:	72fb      	strb	r3, [r7, #11]
   MOBLEUINT32 timeStampRcv;
   MOBLEUINT8 subCmd = pRxData[0];
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	781b      	ldrb	r3, [r3, #0]
 8013f54:	773b      	strb	r3, [r7, #28]
   MOBLEUINT16 hitcmdcount = 0;
 8013f56:	2300      	movs	r3, #0
 8013f58:	837b      	strh	r3, [r7, #26]
   MOBLEUINT8 increment = 1;
 8013f5a:	2301      	movs	r3, #1
 8013f5c:	77fb      	strb	r3, [r7, #31]
   MOBLEUINT8 idx;
  /* Traces for the Data */
  TRACE_I(TF_VENDOR_M,
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	781b      	ldrb	r3, [r3, #0]
 8013f62:	4619      	mov	r1, r3
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	889b      	ldrh	r3, [r3, #4]
 8013f68:	4618      	mov	r0, r3
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	88db      	ldrh	r3, [r3, #6]
 8013f6e:	461c      	mov	r4, r3
 8013f70:	7afb      	ldrb	r3, [r7, #11]
 8013f72:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8013f76:	9201      	str	r2, [sp, #4]
 8013f78:	9300      	str	r3, [sp, #0]
 8013f7a:	4623      	mov	r3, r4
 8013f7c:	4602      	mov	r2, r0
 8013f7e:	4875      	ldr	r0, [pc, #468]	; (8014154 <Vendor_OnResponseDataCb+0x214>)
 8013f80:	f015 fbea 	bl	8029758 <iprintf>
          pmsgParam->elementIndex,
          pmsgParam->peer_addr, 
          pmsgParam->dst_peer, 
          command, 
          response);
  TRACE_I(TF_VENDOR_M,"DATA_RECEIVED length = %ld\n\r", dataLength);
 8013f84:	6839      	ldr	r1, [r7, #0]
 8013f86:	4874      	ldr	r0, [pc, #464]	; (8014158 <Vendor_OnResponseDataCb+0x218>)
 8013f88:	f015 fbe6 	bl	8029758 <iprintf>
  TRACE_M(TF_VENDOR_M,"#%02hx-%02hx! \n\r",command,pRxData[0]);
 8013f8c:	2100      	movs	r1, #0
 8013f8e:	4873      	ldr	r0, [pc, #460]	; (801415c <Vendor_OnResponseDataCb+0x21c>)
 8013f90:	f7f9 fafa 	bl	800d588 <TraceHeader>
 8013f94:	7af9      	ldrb	r1, [r7, #11]
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	781b      	ldrb	r3, [r3, #0]
 8013f9a:	461a      	mov	r2, r3
 8013f9c:	4870      	ldr	r0, [pc, #448]	; (8014160 <Vendor_OnResponseDataCb+0x220>)
 8013f9e:	f015 fbdb 	bl	8029758 <iprintf>
  
  switch(command)
 8013fa2:	7afb      	ldrb	r3, [r7, #11]
 8013fa4:	3b01      	subs	r3, #1
 8013fa6:	2b0d      	cmp	r3, #13
 8013fa8:	f200 80cc 	bhi.w	8014144 <Vendor_OnResponseDataCb+0x204>
 8013fac:	a201      	add	r2, pc, #4	; (adr r2, 8013fb4 <Vendor_OnResponseDataCb+0x74>)
 8013fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fb2:	bf00      	nop
 8013fb4:	08013fed 	.word	0x08013fed
 8013fb8:	08014087 	.word	0x08014087
 8013fbc:	08014079 	.word	0x08014079
 8013fc0:	08014145 	.word	0x08014145
 8013fc4:	08014145 	.word	0x08014145
 8013fc8:	08014145 	.word	0x08014145
 8013fcc:	08014145 	.word	0x08014145
 8013fd0:	08014145 	.word	0x08014145
 8013fd4:	08014145 	.word	0x08014145
 8013fd8:	08014145 	.word	0x08014145
 8013fdc:	08014145 	.word	0x08014145
 8013fe0:	08014145 	.word	0x08014145
 8013fe4:	08014145 	.word	0x08014145
 8013fe8:	08014117 	.word	0x08014117
  {
    case APPLI_TEST_CMD:
      {
         switch(subCmd)
 8013fec:	7f3b      	ldrb	r3, [r7, #28]
 8013fee:	3b02      	subs	r3, #2
 8013ff0:	2b04      	cmp	r3, #4
 8013ff2:	d83f      	bhi.n	8014074 <Vendor_OnResponseDataCb+0x134>
 8013ff4:	a201      	add	r2, pc, #4	; (adr r2, 8013ffc <Vendor_OnResponseDataCb+0xbc>)
 8013ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ffa:	bf00      	nop
 8013ffc:	08014011 	.word	0x08014011
 8014000:	08014075 	.word	0x08014075
 8014004:	08014037 	.word	0x08014037
 8014008:	08014045 	.word	0x08014045
 801400c:	08014075 	.word	0x08014075
             case APPLI_TEST_ECHO: 
               { 
                 /* this case is responsible for printing of the received back data byte from 
                    receiver node.
                 */       
                 for(idx =1;idx<dataLength;idx++)
 8014010:	2301      	movs	r3, #1
 8014012:	77bb      	strb	r3, [r7, #30]
 8014014:	e00a      	b.n	801402c <Vendor_OnResponseDataCb+0xec>
                 {
                   TRACE_I(TF_VENDOR_M,"Response data %d\n\r", pRxData[idx]);
 8014016:	7fbb      	ldrb	r3, [r7, #30]
 8014018:	687a      	ldr	r2, [r7, #4]
 801401a:	4413      	add	r3, r2
 801401c:	781b      	ldrb	r3, [r3, #0]
 801401e:	4619      	mov	r1, r3
 8014020:	4850      	ldr	r0, [pc, #320]	; (8014164 <Vendor_OnResponseDataCb+0x224>)
 8014022:	f015 fb99 	bl	8029758 <iprintf>
                 for(idx =1;idx<dataLength;idx++)
 8014026:	7fbb      	ldrb	r3, [r7, #30]
 8014028:	3301      	adds	r3, #1
 801402a:	77bb      	strb	r3, [r7, #30]
 801402c:	7fbb      	ldrb	r3, [r7, #30]
 801402e:	683a      	ldr	r2, [r7, #0]
 8014030:	429a      	cmp	r2, r3
 8014032:	d8f0      	bhi.n	8014016 <Vendor_OnResponseDataCb+0xd6>
                 }
                 break;
 8014034:	e01f      	b.n	8014076 <Vendor_OnResponseDataCb+0x136>
             case APPLI_TEST_COUNTER:
               { 
         /* this case is responsible for the printing the time stamp when the response 
            is received by the sender node.
         */
                 timeStampRcv = Clock_Time();
 8014036:	f7f3 ff21 	bl	8007e7c <HAL_GetTick>
 801403a:	6178      	str	r0, [r7, #20]

                 Packet_ResponseTimeStamp(timeStampRcv);
 801403c:	6978      	ldr	r0, [r7, #20]
 801403e:	f000 f961 	bl	8014304 <Packet_ResponseTimeStamp>
                  
                 /*Insert Test related Commands here*/
                 break;
 8014042:	e018      	b.n	8014076 <Vendor_OnResponseDataCb+0x136>
             case APPLI_TEST_INC_COUNTER: 
               { 
           /* This case is responsible for the printing of the number count of command 
              received by receiver.
           */     
                 hitcmdcount = (MOBLEUINT32)(pRxData[4] << 24);
 8014044:	2300      	movs	r3, #0
 8014046:	837b      	strh	r3, [r7, #26]
                 hitcmdcount |=(MOBLEUINT32)( pRxData[3] << 16);
                 hitcmdcount |=(MOBLEUINT32)( pRxData[2] << 8);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	3302      	adds	r3, #2
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	b29b      	uxth	r3, r3
 8014050:	021b      	lsls	r3, r3, #8
 8014052:	b29a      	uxth	r2, r3
 8014054:	8b7b      	ldrh	r3, [r7, #26]
 8014056:	4313      	orrs	r3, r2
 8014058:	837b      	strh	r3, [r7, #26]
                 hitcmdcount |=(MOBLEUINT32)( pRxData[1]);                
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	3301      	adds	r3, #1
 801405e:	781b      	ldrb	r3, [r3, #0]
 8014060:	b29a      	uxth	r2, r3
 8014062:	8b7b      	ldrh	r3, [r7, #26]
 8014064:	4313      	orrs	r3, r2
 8014066:	837b      	strh	r3, [r7, #26]
                 TRACE_I(TF_VENDOR_M,"NUMBER OF COMMANDS RECEIVED %d \r\n",hitcmdcount);
 8014068:	8b7b      	ldrh	r3, [r7, #26]
 801406a:	4619      	mov	r1, r3
 801406c:	483e      	ldr	r0, [pc, #248]	; (8014168 <Vendor_OnResponseDataCb+0x228>)
 801406e:	f015 fb73 	bl	8029758 <iprintf>
                 /*Insert Test related Commands here*/
                 break;
 8014072:	e000      	b.n	8014076 <Vendor_OnResponseDataCb+0x136>
                  
                 break;
               }
             default:
               {              
                  break;
 8014074:	bf00      	nop
               }
         }
         break;
 8014076:	e068      	b.n	801414a <Vendor_OnResponseDataCb+0x20a>
      }                  
  case APPLI_LED_CONTROL_STATUS_CMD:
    {
      TRACE_I(TF_VENDOR_M,"Led State %d \r\n",pRxData[0]);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	781b      	ldrb	r3, [r3, #0]
 801407c:	4619      	mov	r1, r3
 801407e:	483b      	ldr	r0, [pc, #236]	; (801416c <Vendor_OnResponseDataCb+0x22c>)
 8014080:	f015 fb6a 	bl	8029758 <iprintf>
      break;
 8014084:	e061      	b.n	801414a <Vendor_OnResponseDataCb+0x20a>
    }
   case APPLI_DEVICE_INFO_CMD:
     {
      switch(subCmd)
 8014086:	7f3b      	ldrb	r3, [r7, #28]
 8014088:	2b03      	cmp	r3, #3
 801408a:	d03d      	beq.n	8014108 <Vendor_OnResponseDataCb+0x1c8>
 801408c:	2b03      	cmp	r3, #3
 801408e:	dc5b      	bgt.n	8014148 <Vendor_OnResponseDataCb+0x208>
 8014090:	2b01      	cmp	r3, #1
 8014092:	d002      	beq.n	801409a <Vendor_OnResponseDataCb+0x15a>
 8014094:	2b02      	cmp	r3, #2
 8014096:	d017      	beq.n	80140c8 <Vendor_OnResponseDataCb+0x188>
               }
             increment=1;
             break;   
             }
         }
      break;
 8014098:	e056      	b.n	8014148 <Vendor_OnResponseDataCb+0x208>
                 TRACE_I(TF_VENDOR_M,"IC type is %s \r\n" ,Board_Type[pRxData[1]-1]); 
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	3301      	adds	r3, #1
 801409e:	781b      	ldrb	r3, [r3, #0]
 80140a0:	3b01      	subs	r3, #1
 80140a2:	4a33      	ldr	r2, [pc, #204]	; (8014170 <Vendor_OnResponseDataCb+0x230>)
 80140a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80140a8:	4619      	mov	r1, r3
 80140aa:	4832      	ldr	r0, [pc, #200]	; (8014174 <Vendor_OnResponseDataCb+0x234>)
 80140ac:	f015 fb54 	bl	8029758 <iprintf>
                 break;
 80140b0:	e030      	b.n	8014114 <Vendor_OnResponseDataCb+0x1d4>
               TRACE_I(TF_VENDOR_M,"Lib Version is %d \r\n",pRxData[increment]);
 80140b2:	7ffb      	ldrb	r3, [r7, #31]
 80140b4:	687a      	ldr	r2, [r7, #4]
 80140b6:	4413      	add	r3, r2
 80140b8:	781b      	ldrb	r3, [r3, #0]
 80140ba:	4619      	mov	r1, r3
 80140bc:	482e      	ldr	r0, [pc, #184]	; (8014178 <Vendor_OnResponseDataCb+0x238>)
 80140be:	f015 fb4b 	bl	8029758 <iprintf>
               increment++;
 80140c2:	7ffb      	ldrb	r3, [r7, #31]
 80140c4:	3301      	adds	r3, #1
 80140c6:	77fb      	strb	r3, [r7, #31]
             while(increment!=8)
 80140c8:	7ffb      	ldrb	r3, [r7, #31]
 80140ca:	2b08      	cmp	r3, #8
 80140cc:	d1f1      	bne.n	80140b2 <Vendor_OnResponseDataCb+0x172>
             increment=1;
 80140ce:	2301      	movs	r3, #1
 80140d0:	77fb      	strb	r3, [r7, #31]
             break;
 80140d2:	e01f      	b.n	8014114 <Vendor_OnResponseDataCb+0x1d4>
                 if(pRxData[increment] != R_ASCI_CODE)
 80140d4:	7ffb      	ldrb	r3, [r7, #31]
 80140d6:	687a      	ldr	r2, [r7, #4]
 80140d8:	4413      	add	r3, r2
 80140da:	781b      	ldrb	r3, [r3, #0]
 80140dc:	2b52      	cmp	r3, #82	; 0x52
 80140de:	d008      	beq.n	80140f2 <Vendor_OnResponseDataCb+0x1b2>
                   TRACE_I(TF_VENDOR_M,"Lib Sub Version is %x \r\n",pRxData[increment]);
 80140e0:	7ffb      	ldrb	r3, [r7, #31]
 80140e2:	687a      	ldr	r2, [r7, #4]
 80140e4:	4413      	add	r3, r2
 80140e6:	781b      	ldrb	r3, [r3, #0]
 80140e8:	4619      	mov	r1, r3
 80140ea:	4824      	ldr	r0, [pc, #144]	; (801417c <Vendor_OnResponseDataCb+0x23c>)
 80140ec:	f015 fb34 	bl	8029758 <iprintf>
 80140f0:	e007      	b.n	8014102 <Vendor_OnResponseDataCb+0x1c2>
                   TRACE_I(TF_VENDOR_M,"Lib Sub Version is %c \r\n",pRxData[increment]);
 80140f2:	7ffb      	ldrb	r3, [r7, #31]
 80140f4:	687a      	ldr	r2, [r7, #4]
 80140f6:	4413      	add	r3, r2
 80140f8:	781b      	ldrb	r3, [r3, #0]
 80140fa:	4619      	mov	r1, r3
 80140fc:	4820      	ldr	r0, [pc, #128]	; (8014180 <Vendor_OnResponseDataCb+0x240>)
 80140fe:	f015 fb2b 	bl	8029758 <iprintf>
                  increment++;
 8014102:	7ffb      	ldrb	r3, [r7, #31]
 8014104:	3301      	adds	r3, #1
 8014106:	77fb      	strb	r3, [r7, #31]
               while(increment!=7)
 8014108:	7ffb      	ldrb	r3, [r7, #31]
 801410a:	2b07      	cmp	r3, #7
 801410c:	d1e2      	bne.n	80140d4 <Vendor_OnResponseDataCb+0x194>
             increment=1;
 801410e:	2301      	movs	r3, #1
 8014110:	77fb      	strb	r3, [r7, #31]
             break;   
 8014112:	bf00      	nop
      break;
 8014114:	e018      	b.n	8014148 <Vendor_OnResponseDataCb+0x208>
     }
    case APPLI_DATA_CNTRL_CMD:  
      {
        /** Displays data received **/
        for (MOBLEUINT8 idx=0; idx<dataLength; idx++)
 8014116:	2300      	movs	r3, #0
 8014118:	777b      	strb	r3, [r7, #29]
 801411a:	e00e      	b.n	801413a <Vendor_OnResponseDataCb+0x1fa>
        {
          TRACE_I(TF_VENDOR_M,"data[%d]= 0x%x",idx,pRxData[idx]); 
 801411c:	7f79      	ldrb	r1, [r7, #29]
 801411e:	7f7b      	ldrb	r3, [r7, #29]
 8014120:	687a      	ldr	r2, [r7, #4]
 8014122:	4413      	add	r3, r2
 8014124:	781b      	ldrb	r3, [r3, #0]
 8014126:	461a      	mov	r2, r3
 8014128:	4816      	ldr	r0, [pc, #88]	; (8014184 <Vendor_OnResponseDataCb+0x244>)
 801412a:	f015 fb15 	bl	8029758 <iprintf>
          TRACE_I(TF_VENDOR_M,"\n\r");
 801412e:	4816      	ldr	r0, [pc, #88]	; (8014188 <Vendor_OnResponseDataCb+0x248>)
 8014130:	f015 fb12 	bl	8029758 <iprintf>
        for (MOBLEUINT8 idx=0; idx<dataLength; idx++)
 8014134:	7f7b      	ldrb	r3, [r7, #29]
 8014136:	3301      	adds	r3, #1
 8014138:	777b      	strb	r3, [r7, #29]
 801413a:	7f7b      	ldrb	r3, [r7, #29]
 801413c:	683a      	ldr	r2, [r7, #0]
 801413e:	429a      	cmp	r2, r3
 8014140:	d8ec      	bhi.n	801411c <Vendor_OnResponseDataCb+0x1dc>
        }
        break;
 8014142:	e002      	b.n	801414a <Vendor_OnResponseDataCb+0x20a>
      }
       default:
    {              
        break;
 8014144:	bf00      	nop
 8014146:	e000      	b.n	801414a <Vendor_OnResponseDataCb+0x20a>
      break;
 8014148:	bf00      	nop
    }
      
  }   
      
         return MOBLE_RESULT_SUCCESS;
 801414a:	2300      	movs	r3, #0
} 
 801414c:	4618      	mov	r0, r3
 801414e:	3724      	adds	r7, #36	; 0x24
 8014150:	46bd      	mov	sp, r7
 8014152:	bd90      	pop	{r4, r7, pc}
 8014154:	08031220 	.word	0x08031220
 8014158:	080310ec 	.word	0x080310ec
 801415c:	080333f4 	.word	0x080333f4
 8014160:	08031298 	.word	0x08031298
 8014164:	080312ac 	.word	0x080312ac
 8014168:	080312c0 	.word	0x080312c0
 801416c:	080312e4 	.word	0x080312e4
 8014170:	200000b0 	.word	0x200000b0
 8014174:	080312f4 	.word	0x080312f4
 8014178:	08031308 	.word	0x08031308
 801417c:	08031320 	.word	0x08031320
 8014180:	0803133c 	.word	0x0803133c
 8014184:	08031358 	.word	0x08031358
 8014188:	0803111c 	.word	0x0803111c

0801418c <Vendor_Process>:
* @brief  State machine for Vendor Model
* @param  void
* @retval void
*/ 
void Vendor_Process(void)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	af00      	add	r7, sp, #0
  BLEMesh_ModelsSendDelayedPacket();
 8014190:	f7f3 f82e 	bl	80071f0 <BLEMesh_ModelsSendDelayedPacket>
  
  if (Vendor_SendDataFreqState == 0xFF)
 8014194:	4b03      	ldr	r3, [pc, #12]	; (80141a4 <Vendor_Process+0x18>)
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	2bff      	cmp	r3, #255	; 0xff
 801419a:	d101      	bne.n	80141a0 <Vendor_Process+0x14>
  {
    Appli_Vendor_SendBigDataPacket();
 801419c:	f7f2 fee6 	bl	8006f6c <Appli_Vendor_SendBigDataPacket>
  }
}
 80141a0:	bf00      	nop
 80141a2:	bd80      	pop	{r7, pc}
 80141a4:	20006e6e 	.word	0x20006e6e

080141a8 <Vendor_SendDataFreq>:
* @brief  Set the state of the Vendor Data frequency
* @param  State: New state of sending vendor packet frequency 
* @retval void
*/          
void Vendor_SendDataFreq(MOBLEUINT8 freq)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b082      	sub	sp, #8
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	4603      	mov	r3, r0
 80141b0:	71fb      	strb	r3, [r7, #7]
    /* Data to be sent continuously with out any time gap */ 
    if ((freq == 0xFF) || (freq == 0x00))
 80141b2:	79fb      	ldrb	r3, [r7, #7]
 80141b4:	2bff      	cmp	r3, #255	; 0xff
 80141b6:	d002      	beq.n	80141be <Vendor_SendDataFreq+0x16>
 80141b8:	79fb      	ldrb	r3, [r7, #7]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d103      	bne.n	80141c6 <Vendor_SendDataFreq+0x1e>
    {
        Vendor_SendDataFreqState = freq;
 80141be:	4a06      	ldr	r2, [pc, #24]	; (80141d8 <Vendor_SendDataFreq+0x30>)
 80141c0:	79fb      	ldrb	r3, [r7, #7]
 80141c2:	7013      	strb	r3, [r2, #0]
 80141c4:	e003      	b.n	80141ce <Vendor_SendDataFreq+0x26>
    }
    else
    {
        TRACE_I(TF_VENDOR_M, "Invalid Data send Freq parameter \r\n");
 80141c6:	4805      	ldr	r0, [pc, #20]	; (80141dc <Vendor_SendDataFreq+0x34>)
 80141c8:	f015 fb4c 	bl	8029864 <puts>
    }
}
 80141cc:	bf00      	nop
 80141ce:	bf00      	nop
 80141d0:	3708      	adds	r7, #8
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}
 80141d6:	bf00      	nop
 80141d8:	20006e6e 	.word	0x20006e6e
 80141dc:	0803137c 	.word	0x0803137c

080141e0 <VendorModel_PID1_GetOpcodeTableCb>:
* @param  length: Pointer to the Length of Generic Model opcode array
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT VendorModel_PID1_GetOpcodeTableCb(const MODEL_OpcodeTableParam_t **data, 
                                                 MOBLEUINT16 *length)
{ 
 80141e0:	b480      	push	{r7}
 80141e2:	b083      	sub	sp, #12
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	6039      	str	r1, [r7, #0]
  return MOBLE_RESULT_SUCCESS;
 80141ea:	2300      	movs	r3, #0
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	370c      	adds	r7, #12
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr

080141f8 <VendorModel_PID1_GetStatusRequestCb>:
                                    MOBLEUINT32 *plength, 
                                    MOBLEUINT8 const *pRxData,
                                    MOBLEUINT32 dataLength,
                                    MOBLEBOOL response)

{
 80141f8:	b480      	push	{r7}
 80141fa:	b085      	sub	sp, #20
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	60f8      	str	r0, [r7, #12]
 8014200:	607a      	str	r2, [r7, #4]
 8014202:	603b      	str	r3, [r7, #0]
 8014204:	460b      	mov	r3, r1
 8014206:	817b      	strh	r3, [r7, #10]
  return MOBLE_RESULT_SUCCESS;    
 8014208:	2300      	movs	r3, #0
}
 801420a:	4618      	mov	r0, r3
 801420c:	3714      	adds	r7, #20
 801420e:	46bd      	mov	sp, r7
 8014210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014214:	4770      	bx	lr
	...

08014218 <VendorModel_PID1_ProcessMessageCb>:
                                                 MOBLEUINT16 opcode, 
                                                 MOBLEUINT8 const *pRxData, 
                                                 MOBLEUINT32 dataLength, 
                                                 MOBLEBOOL response
                                                   )
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b088      	sub	sp, #32
 801421c:	af02      	add	r7, sp, #8
 801421e:	60f8      	str	r0, [r7, #12]
 8014220:	607a      	str	r2, [r7, #4]
 8014222:	603b      	str	r3, [r7, #0]
 8014224:	460b      	mov	r3, r1
 8014226:	817b      	strh	r3, [r7, #10]
  
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8014228:	2300      	movs	r3, #0
 801422a:	75fb      	strb	r3, [r7, #23]
  MOBLEUINT8 command;
  MOBLEBOOL cmd_response;
    
  /*tClockTime delay_t = Clock_Time();*/
  
  TRACE_I(TF_VENDOR_M, 
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	781b      	ldrb	r3, [r3, #0]
 8014230:	4619      	mov	r1, r3
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	88db      	ldrh	r3, [r3, #6]
 8014236:	461a      	mov	r2, r3
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	889b      	ldrh	r3, [r3, #4]
 801423c:	4618      	mov	r0, r3
 801423e:	897b      	ldrh	r3, [r7, #10]
 8014240:	9300      	str	r3, [sp, #0]
 8014242:	4603      	mov	r3, r0
 8014244:	482a      	ldr	r0, [pc, #168]	; (80142f0 <VendorModel_PID1_ProcessMessageCb+0xd8>)
 8014246:	f015 fa87 	bl	8029758 <iprintf>

            #define VENDOR_CMD_RESPONSE                          0x20
            #define VENDOR_CMD_READ_nWRITE                       0x10
  */
  
  command = (MOBLEUINT8) (opcode & 0x0F);
 801424a:	897b      	ldrh	r3, [r7, #10]
 801424c:	b2db      	uxtb	r3, r3
 801424e:	f003 030f 	and.w	r3, r3, #15
 8014252:	757b      	strb	r3, [r7, #21]
  if (opcode & VENDOR_CMD_RESPONSE)
 8014254:	897b      	ldrh	r3, [r7, #10]
 8014256:	f003 0320 	and.w	r3, r3, #32
 801425a:	2b00      	cmp	r3, #0
 801425c:	d002      	beq.n	8014264 <VendorModel_PID1_ProcessMessageCb+0x4c>
  {
    cmd_response = MOBLE_TRUE;
 801425e:	2301      	movs	r3, #1
 8014260:	75bb      	strb	r3, [r7, #22]
 8014262:	e001      	b.n	8014268 <VendorModel_PID1_ProcessMessageCb+0x50>
  }
  else
  {
    cmd_response = MOBLE_FALSE;
 8014264:	2300      	movs	r3, #0
 8014266:	75bb      	strb	r3, [r7, #22]
  }
  
    /* Parse the command */
    if( (cmd_response == MOBLE_FALSE) && (opcode & VENDOR_CMD_READ_nWRITE))
 8014268:	7dbb      	ldrb	r3, [r7, #22]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d110      	bne.n	8014290 <VendorModel_PID1_ProcessMessageCb+0x78>
 801426e:	897b      	ldrh	r3, [r7, #10]
 8014270:	f003 0310 	and.w	r3, r3, #16
 8014274:	2b00      	cmp	r3, #0
 8014276:	d00b      	beq.n	8014290 <VendorModel_PID1_ProcessMessageCb+0x78>
    { /* Response Packet is received */
       TRACE_I(TF_VENDOR_M,"Response received from remote node \n\r");
 8014278:	481e      	ldr	r0, [pc, #120]	; (80142f4 <VendorModel_PID1_ProcessMessageCb+0xdc>)
 801427a:	f015 fa6d 	bl	8029758 <iprintf>

       Vendor_OnResponseDataCb(pmsgParams, command, pRxData, dataLength, MOBLE_FALSE);
 801427e:	7d79      	ldrb	r1, [r7, #21]
 8014280:	2300      	movs	r3, #0
 8014282:	9300      	str	r3, [sp, #0]
 8014284:	683b      	ldr	r3, [r7, #0]
 8014286:	687a      	ldr	r2, [r7, #4]
 8014288:	68f8      	ldr	r0, [r7, #12]
 801428a:	f7ff fe59 	bl	8013f40 <Vendor_OnResponseDataCb>
 801428e:	e02a      	b.n	80142e6 <VendorModel_PID1_ProcessMessageCb+0xce>
    }
    else if ( (cmd_response == MOBLE_TRUE) && (opcode & VENDOR_CMD_READ_nWRITE))
 8014290:	7dbb      	ldrb	r3, [r7, #22]
 8014292:	2b01      	cmp	r3, #1
 8014294:	d116      	bne.n	80142c4 <VendorModel_PID1_ProcessMessageCb+0xac>
 8014296:	897b      	ldrh	r3, [r7, #10]
 8014298:	f003 0310 	and.w	r3, r3, #16
 801429c:	2b00      	cmp	r3, #0
 801429e:	d011      	beq.n	80142c4 <VendorModel_PID1_ProcessMessageCb+0xac>
    { /* Read Packet is received */
       TRACE_M(TF_VENDOR_M,"Read Command received   \n\r");
 80142a0:	2100      	movs	r1, #0
 80142a2:	4815      	ldr	r0, [pc, #84]	; (80142f8 <VendorModel_PID1_ProcessMessageCb+0xe0>)
 80142a4:	f7f9 f970 	bl	800d588 <TraceHeader>
 80142a8:	4814      	ldr	r0, [pc, #80]	; (80142fc <VendorModel_PID1_ProcessMessageCb+0xe4>)
 80142aa:	f015 fa55 	bl	8029758 <iprintf>
       result = Vendor_ReadLocalDataCb(pmsgParams, command, pRxData, dataLength, MOBLE_TRUE);
 80142ae:	7d79      	ldrb	r1, [r7, #21]
 80142b0:	2301      	movs	r3, #1
 80142b2:	9300      	str	r3, [sp, #0]
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	687a      	ldr	r2, [r7, #4]
 80142b8:	68f8      	ldr	r0, [r7, #12]
 80142ba:	f7ff fd35 	bl	8013d28 <Vendor_ReadLocalDataCb>
 80142be:	4603      	mov	r3, r0
 80142c0:	75fb      	strb	r3, [r7, #23]
 80142c2:	e010      	b.n	80142e6 <VendorModel_PID1_ProcessMessageCb+0xce>
    }
    else 
    {  /* Write Commands with or without response received */
       TRACE_M(TF_VENDOR_M,"Command Write received, process the command\n\r");
 80142c4:	2100      	movs	r1, #0
 80142c6:	480c      	ldr	r0, [pc, #48]	; (80142f8 <VendorModel_PID1_ProcessMessageCb+0xe0>)
 80142c8:	f7f9 f95e 	bl	800d588 <TraceHeader>
 80142cc:	480c      	ldr	r0, [pc, #48]	; (8014300 <VendorModel_PID1_ProcessMessageCb+0xe8>)
 80142ce:	f015 fa43 	bl	8029758 <iprintf>
       result = Vendor_WriteLocalDataCb(pmsgParams, command, pRxData, dataLength, cmd_response );
 80142d2:	7d79      	ldrb	r1, [r7, #21]
 80142d4:	7dbb      	ldrb	r3, [r7, #22]
 80142d6:	9300      	str	r3, [sp, #0]
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	687a      	ldr	r2, [r7, #4]
 80142dc:	68f8      	ldr	r0, [r7, #12]
 80142de:	f7ff fc71 	bl	8013bc4 <Vendor_WriteLocalDataCb>
 80142e2:	4603      	mov	r3, r0
 80142e4:	75fb      	strb	r3, [r7, #23]
    }

return result;
 80142e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80142e8:	4618      	mov	r0, r3
 80142ea:	3718      	adds	r7, #24
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}
 80142f0:	080313a0 	.word	0x080313a0
 80142f4:	080313f0 	.word	0x080313f0
 80142f8:	0803340c 	.word	0x0803340c
 80142fc:	08031418 	.word	0x08031418
 8014300:	08031434 	.word	0x08031434

08014304 <Packet_ResponseTimeStamp>:
    
__weak MOBLE_RESULT Packet_ResponseTimeStamp(MOBLEUINT32 rcvTimeStamp)
{
 8014304:	b480      	push	{r7}
 8014306:	b083      	sub	sp, #12
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_SUCCESS;
 801430c:	2300      	movs	r3, #0
}
 801430e:	4618      	mov	r0, r3
 8014310:	370c      	adds	r7, #12
 8014312:	46bd      	mov	sp, r7
 8014314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014318:	4770      	bx	lr

0801431a <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 801431a:	b580      	push	{r7, lr}
 801431c:	b088      	sub	sp, #32
 801431e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8014320:	2300      	movs	r3, #0
 8014322:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014324:	f107 0308 	add.w	r3, r7, #8
 8014328:	2218      	movs	r2, #24
 801432a:	2100      	movs	r1, #0
 801432c:	4618      	mov	r0, r3
 801432e:	f001 fbc6 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014332:	233f      	movs	r3, #63	; 0x3f
 8014334:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8014336:	2381      	movs	r3, #129	; 0x81
 8014338:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801433a:	1dfb      	adds	r3, r7, #7
 801433c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801433e:	2301      	movs	r3, #1
 8014340:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014342:	f107 0308 	add.w	r3, r7, #8
 8014346:	2100      	movs	r1, #0
 8014348:	4618      	mov	r0, r3
 801434a:	f001 fd3d 	bl	8015dc8 <hci_send_req>
 801434e:	4603      	mov	r3, r0
 8014350:	2b00      	cmp	r3, #0
 8014352:	da01      	bge.n	8014358 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8014354:	23ff      	movs	r3, #255	; 0xff
 8014356:	e000      	b.n	801435a <aci_gap_set_non_discoverable+0x40>
  return status;
 8014358:	79fb      	ldrb	r3, [r7, #7]
}
 801435a:	4618      	mov	r0, r3
 801435c:	3720      	adds	r7, #32
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}

08014362 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8014362:	b5b0      	push	{r4, r5, r7, lr}
 8014364:	b0ce      	sub	sp, #312	; 0x138
 8014366:	af00      	add	r7, sp, #0
 8014368:	4605      	mov	r5, r0
 801436a:	460c      	mov	r4, r1
 801436c:	4610      	mov	r0, r2
 801436e:	4619      	mov	r1, r3
 8014370:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014374:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8014378:	462a      	mov	r2, r5
 801437a:	701a      	strb	r2, [r3, #0]
 801437c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014380:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8014384:	4622      	mov	r2, r4
 8014386:	801a      	strh	r2, [r3, #0]
 8014388:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801438c:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8014390:	4602      	mov	r2, r0
 8014392:	801a      	strh	r2, [r3, #0]
 8014394:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014398:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801439c:	460a      	mov	r2, r1
 801439e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80143a0:	f107 0310 	add.w	r3, r7, #16
 80143a4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80143a8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80143ac:	3308      	adds	r3, #8
 80143ae:	f107 0210 	add.w	r2, r7, #16
 80143b2:	4413      	add	r3, r2
 80143b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80143b8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80143bc:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80143c0:	4413      	add	r3, r2
 80143c2:	3309      	adds	r3, #9
 80143c4:	f107 0210 	add.w	r2, r7, #16
 80143c8:	4413      	add	r3, r2
 80143ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80143ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80143d2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80143d6:	2200      	movs	r2, #0
 80143d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80143da:	2300      	movs	r3, #0
 80143dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80143e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80143e4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80143e8:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80143ec:	7812      	ldrb	r2, [r2, #0]
 80143ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80143f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80143f4:	3301      	adds	r3, #1
 80143f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80143fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80143fe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8014402:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8014406:	8812      	ldrh	r2, [r2, #0]
 8014408:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 801440c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014410:	3302      	adds	r3, #2
 8014412:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8014416:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801441a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801441e:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8014422:	8812      	ldrh	r2, [r2, #0]
 8014424:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8014428:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801442c:	3302      	adds	r3, #2
 801442e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8014432:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014436:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801443a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 801443e:	7812      	ldrb	r2, [r2, #0]
 8014440:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014442:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014446:	3301      	adds	r3, #1
 8014448:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 801444c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014450:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8014454:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014456:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801445a:	3301      	adds	r3, #1
 801445c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8014460:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014464:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8014468:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 801446a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801446e:	3301      	adds	r3, #1
 8014470:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8014474:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014478:	3308      	adds	r3, #8
 801447a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 801447e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8014482:	4618      	mov	r0, r3
 8014484:	f001 fb0b 	bl	8015a9e <Osal_MemCpy>
    index_input += Local_Name_Length;
 8014488:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 801448c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8014490:	4413      	add	r3, r2
 8014492:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8014496:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801449a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 801449e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80144a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80144a4:	3301      	adds	r3, #1
 80144a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80144aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80144ae:	3301      	adds	r3, #1
 80144b0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80144b4:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80144b8:	4618      	mov	r0, r3
 80144ba:	f001 faf0 	bl	8015a9e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80144be:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80144c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80144c6:	4413      	add	r3, r2
 80144c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80144cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80144d0:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80144d4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80144d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80144da:	3302      	adds	r3, #2
 80144dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80144e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80144e4:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80144e8:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80144ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80144ee:	3302      	adds	r3, #2
 80144f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80144f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80144f8:	2218      	movs	r2, #24
 80144fa:	2100      	movs	r1, #0
 80144fc:	4618      	mov	r0, r3
 80144fe:	f001 fade 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014502:	233f      	movs	r3, #63	; 0x3f
 8014504:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8014508:	2383      	movs	r3, #131	; 0x83
 801450a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801450e:	f107 0310 	add.w	r3, r7, #16
 8014512:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014516:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801451a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801451e:	f107 030f 	add.w	r3, r7, #15
 8014522:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8014526:	2301      	movs	r3, #1
 8014528:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801452c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014530:	2100      	movs	r1, #0
 8014532:	4618      	mov	r0, r3
 8014534:	f001 fc48 	bl	8015dc8 <hci_send_req>
 8014538:	4603      	mov	r3, r0
 801453a:	2b00      	cmp	r3, #0
 801453c:	da01      	bge.n	8014542 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 801453e:	23ff      	movs	r3, #255	; 0xff
 8014540:	e004      	b.n	801454c <aci_gap_set_discoverable+0x1ea>
  return status;
 8014542:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014546:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801454a:	781b      	ldrb	r3, [r3, #0]
}
 801454c:	4618      	mov	r0, r3
 801454e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8014552:	46bd      	mov	sp, r7
 8014554:	bdb0      	pop	{r4, r5, r7, pc}

08014556 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8014556:	b590      	push	{r4, r7, lr}
 8014558:	b0cd      	sub	sp, #308	; 0x134
 801455a:	af00      	add	r7, sp, #0
 801455c:	4604      	mov	r4, r0
 801455e:	4608      	mov	r0, r1
 8014560:	4611      	mov	r1, r2
 8014562:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014566:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 801456a:	6013      	str	r3, [r2, #0]
 801456c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014570:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8014574:	4622      	mov	r2, r4
 8014576:	701a      	strb	r2, [r3, #0]
 8014578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801457c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8014580:	4602      	mov	r2, r0
 8014582:	701a      	strb	r2, [r3, #0]
 8014584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014588:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 801458c:	460a      	mov	r2, r1
 801458e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8014590:	f107 0310 	add.w	r3, r7, #16
 8014594:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8014598:	f107 0308 	add.w	r3, r7, #8
 801459c:	2207      	movs	r2, #7
 801459e:	2100      	movs	r1, #0
 80145a0:	4618      	mov	r0, r3
 80145a2:	f001 fa8c 	bl	8015abe <Osal_MemSet>
  int index_input = 0;
 80145a6:	2300      	movs	r3, #0
 80145a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80145ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80145b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80145b4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80145b8:	7812      	ldrb	r2, [r2, #0]
 80145ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80145bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80145c0:	3301      	adds	r3, #1
 80145c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80145c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80145ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80145ce:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80145d2:	7812      	ldrb	r2, [r2, #0]
 80145d4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80145d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80145da:	3301      	adds	r3, #1
 80145dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80145e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80145e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80145e8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80145ec:	7812      	ldrb	r2, [r2, #0]
 80145ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80145f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80145f4:	3301      	adds	r3, #1
 80145f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80145fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80145fe:	2218      	movs	r2, #24
 8014600:	2100      	movs	r1, #0
 8014602:	4618      	mov	r0, r3
 8014604:	f001 fa5b 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014608:	233f      	movs	r3, #63	; 0x3f
 801460a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 801460e:	238a      	movs	r3, #138	; 0x8a
 8014610:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8014614:	f107 0310 	add.w	r3, r7, #16
 8014618:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801461c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014620:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8014624:	f107 0308 	add.w	r3, r7, #8
 8014628:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 801462c:	2307      	movs	r3, #7
 801462e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014632:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014636:	2100      	movs	r1, #0
 8014638:	4618      	mov	r0, r3
 801463a:	f001 fbc5 	bl	8015dc8 <hci_send_req>
 801463e:	4603      	mov	r3, r0
 8014640:	2b00      	cmp	r3, #0
 8014642:	da01      	bge.n	8014648 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8014644:	23ff      	movs	r3, #255	; 0xff
 8014646:	e02e      	b.n	80146a6 <aci_gap_init+0x150>
  if ( resp.Status )
 8014648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801464c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014650:	781b      	ldrb	r3, [r3, #0]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d005      	beq.n	8014662 <aci_gap_init+0x10c>
    return resp.Status;
 8014656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801465a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801465e:	781b      	ldrb	r3, [r3, #0]
 8014660:	e021      	b.n	80146a6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8014662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014666:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801466a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801466e:	b29a      	uxth	r2, r3
 8014670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 801467c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014680:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014684:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8014688:	b29a      	uxth	r2, r3
 801468a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801468e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8014690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014694:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014698:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801469c:	b29a      	uxth	r2, r3
 801469e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80146a2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80146a4:	2300      	movs	r3, #0
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd90      	pop	{r4, r7, pc}

080146b0 <aci_gap_terminate>:
  return status;
}

tBleStatus aci_gap_terminate( uint16_t Connection_Handle,
                              uint8_t Reason )
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b0cc      	sub	sp, #304	; 0x130
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	4602      	mov	r2, r0
 80146b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80146bc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80146c0:	801a      	strh	r2, [r3, #0]
 80146c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80146c6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80146ca:	460a      	mov	r2, r1
 80146cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_cp0 *cp0 = (aci_gap_terminate_cp0*)(cmd_buffer);
 80146ce:	f107 0310 	add.w	r3, r7, #16
 80146d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80146d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80146da:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80146de:	2200      	movs	r2, #0
 80146e0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80146e2:	2300      	movs	r3, #0
 80146e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80146e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80146ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80146f0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80146f4:	8812      	ldrh	r2, [r2, #0]
 80146f6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80146f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80146fc:	3302      	adds	r3, #2
 80146fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Reason = Reason;
 8014702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014706:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801470a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 801470e:	7812      	ldrb	r2, [r2, #0]
 8014710:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8014712:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014716:	3301      	adds	r3, #1
 8014718:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801471c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014720:	2218      	movs	r2, #24
 8014722:	2100      	movs	r1, #0
 8014724:	4618      	mov	r0, r3
 8014726:	f001 f9ca 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 801472a:	233f      	movs	r3, #63	; 0x3f
 801472c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x093;
 8014730:	2393      	movs	r3, #147	; 0x93
 8014732:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8014736:	230f      	movs	r3, #15
 8014738:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 801473c:	f107 0310 	add.w	r3, r7, #16
 8014740:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014744:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014748:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801474c:	f107 030f 	add.w	r3, r7, #15
 8014750:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8014754:	2301      	movs	r3, #1
 8014756:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801475a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801475e:	2100      	movs	r1, #0
 8014760:	4618      	mov	r0, r3
 8014762:	f001 fb31 	bl	8015dc8 <hci_send_req>
 8014766:	4603      	mov	r3, r0
 8014768:	2b00      	cmp	r3, #0
 801476a:	da01      	bge.n	8014770 <aci_gap_terminate+0xc0>
    return BLE_STATUS_TIMEOUT;
 801476c:	23ff      	movs	r3, #255	; 0xff
 801476e:	e004      	b.n	801477a <aci_gap_terminate+0xca>
  return status;
 8014770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014774:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8014778:	781b      	ldrb	r3, [r3, #0]
}
 801477a:	4618      	mov	r0, r3
 801477c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}

08014784 <aci_gap_terminate_gap_proc>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_terminate_gap_proc( uint8_t Procedure_Code )
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b0cc      	sub	sp, #304	; 0x130
 8014788:	af00      	add	r7, sp, #0
 801478a:	4602      	mov	r2, r0
 801478c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014790:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8014794:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8014796:	f107 0310 	add.w	r3, r7, #16
 801479a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801479e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80147a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80147a6:	2200      	movs	r2, #0
 80147a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80147aa:	2300      	movs	r3, #0
 80147ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Procedure_Code = Procedure_Code;
 80147b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80147b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80147b8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80147bc:	7812      	ldrb	r2, [r2, #0]
 80147be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80147c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80147c4:	3301      	adds	r3, #1
 80147c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80147ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80147ce:	2218      	movs	r2, #24
 80147d0:	2100      	movs	r1, #0
 80147d2:	4618      	mov	r0, r3
 80147d4:	f001 f973 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 80147d8:	233f      	movs	r3, #63	; 0x3f
 80147da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 80147de:	239d      	movs	r3, #157	; 0x9d
 80147e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80147e4:	f107 0310 	add.w	r3, r7, #16
 80147e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80147ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80147f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80147f4:	f107 030f 	add.w	r3, r7, #15
 80147f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80147fc:	2301      	movs	r3, #1
 80147fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014802:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014806:	2100      	movs	r1, #0
 8014808:	4618      	mov	r0, r3
 801480a:	f001 fadd 	bl	8015dc8 <hci_send_req>
 801480e:	4603      	mov	r3, r0
 8014810:	2b00      	cmp	r3, #0
 8014812:	da01      	bge.n	8014818 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 8014814:	23ff      	movs	r3, #255	; 0xff
 8014816:	e004      	b.n	8014822 <aci_gap_terminate_gap_proc+0x9e>
  return status;
 8014818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801481c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8014820:	781b      	ldrb	r3, [r3, #0]
}
 8014822:	4618      	mov	r0, r3
 8014824:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}

0801482c <aci_gap_start_observation_proc>:
                                           uint16_t LE_Scan_Window,
                                           uint8_t LE_Scan_Type,
                                           uint8_t Own_Address_Type,
                                           uint8_t Filter_Duplicates,
                                           uint8_t Scanning_Filter_Policy )
{
 801482c:	b5b0      	push	{r4, r5, r7, lr}
 801482e:	b0cc      	sub	sp, #304	; 0x130
 8014830:	af00      	add	r7, sp, #0
 8014832:	4605      	mov	r5, r0
 8014834:	460c      	mov	r4, r1
 8014836:	4610      	mov	r0, r2
 8014838:	4619      	mov	r1, r3
 801483a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801483e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8014842:	462a      	mov	r2, r5
 8014844:	801a      	strh	r2, [r3, #0]
 8014846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801484a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801484e:	4622      	mov	r2, r4
 8014850:	801a      	strh	r2, [r3, #0]
 8014852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014856:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 801485a:	4602      	mov	r2, r0
 801485c:	701a      	strb	r2, [r3, #0]
 801485e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014862:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8014866:	460a      	mov	r2, r1
 8014868:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_observation_proc_cp0 *cp0 = (aci_gap_start_observation_proc_cp0*)(cmd_buffer);
 801486a:	f107 0310 	add.w	r3, r7, #16
 801486e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8014872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014876:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801487a:	2200      	movs	r2, #0
 801487c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801487e:	2300      	movs	r3, #0
 8014880:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8014884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014888:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801488c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8014890:	8812      	ldrh	r2, [r2, #0]
 8014892:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014894:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014898:	3302      	adds	r3, #2
 801489a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 801489e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80148a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80148a6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80148aa:	8812      	ldrh	r2, [r2, #0]
 80148ac:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80148ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80148b2:	3302      	adds	r3, #2
 80148b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Type = LE_Scan_Type;
 80148b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80148bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80148c0:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80148c4:	7812      	ldrb	r2, [r2, #0]
 80148c6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80148c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80148cc:	3301      	adds	r3, #1
 80148ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80148d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80148d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80148da:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80148de:	7812      	ldrb	r2, [r2, #0]
 80148e0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80148e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80148e6:	3301      	adds	r3, #1
 80148e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 80148ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80148f0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80148f4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80148f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80148fa:	3301      	adds	r3, #1
 80148fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scanning_Filter_Policy = Scanning_Filter_Policy;
 8014900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014904:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8014908:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 801490a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801490e:	3301      	adds	r3, #1
 8014910:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014914:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014918:	2218      	movs	r2, #24
 801491a:	2100      	movs	r1, #0
 801491c:	4618      	mov	r0, r3
 801491e:	f001 f8ce 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014922:	233f      	movs	r3, #63	; 0x3f
 8014924:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a2;
 8014928:	23a2      	movs	r3, #162	; 0xa2
 801492a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 801492e:	230f      	movs	r3, #15
 8014930:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8014934:	f107 0310 	add.w	r3, r7, #16
 8014938:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801493c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014940:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8014944:	f107 030f 	add.w	r3, r7, #15
 8014948:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801494c:	2301      	movs	r3, #1
 801494e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014952:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014956:	2100      	movs	r1, #0
 8014958:	4618      	mov	r0, r3
 801495a:	f001 fa35 	bl	8015dc8 <hci_send_req>
 801495e:	4603      	mov	r3, r0
 8014960:	2b00      	cmp	r3, #0
 8014962:	da01      	bge.n	8014968 <aci_gap_start_observation_proc+0x13c>
    return BLE_STATUS_TIMEOUT;
 8014964:	23ff      	movs	r3, #255	; 0xff
 8014966:	e004      	b.n	8014972 <aci_gap_start_observation_proc+0x146>
  return status;
 8014968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801496c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8014970:	781b      	ldrb	r3, [r3, #0]
}
 8014972:	4618      	mov	r0, r3
 8014974:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8014978:	46bd      	mov	sp, r7
 801497a:	bdb0      	pop	{r4, r5, r7, pc}

0801497c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b088      	sub	sp, #32
 8014980:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8014982:	2300      	movs	r3, #0
 8014984:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014986:	f107 0308 	add.w	r3, r7, #8
 801498a:	2218      	movs	r2, #24
 801498c:	2100      	movs	r1, #0
 801498e:	4618      	mov	r0, r3
 8014990:	f001 f895 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014994:	233f      	movs	r3, #63	; 0x3f
 8014996:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8014998:	f240 1301 	movw	r3, #257	; 0x101
 801499c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801499e:	1dfb      	adds	r3, r7, #7
 80149a0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80149a2:	2301      	movs	r3, #1
 80149a4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80149a6:	f107 0308 	add.w	r3, r7, #8
 80149aa:	2100      	movs	r1, #0
 80149ac:	4618      	mov	r0, r3
 80149ae:	f001 fa0b 	bl	8015dc8 <hci_send_req>
 80149b2:	4603      	mov	r3, r0
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	da01      	bge.n	80149bc <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80149b8:	23ff      	movs	r3, #255	; 0xff
 80149ba:	e000      	b.n	80149be <aci_gatt_init+0x42>
  return status;
 80149bc:	79fb      	ldrb	r3, [r7, #7]
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3720      	adds	r7, #32
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}

080149c6 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80149c6:	b590      	push	{r4, r7, lr}
 80149c8:	b0cf      	sub	sp, #316	; 0x13c
 80149ca:	af00      	add	r7, sp, #0
 80149cc:	4604      	mov	r4, r0
 80149ce:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80149d2:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80149d6:	6001      	str	r1, [r0, #0]
 80149d8:	4610      	mov	r0, r2
 80149da:	4619      	mov	r1, r3
 80149dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80149e0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80149e4:	4622      	mov	r2, r4
 80149e6:	701a      	strb	r2, [r3, #0]
 80149e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80149ec:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80149f0:	4602      	mov	r2, r0
 80149f2:	701a      	strb	r2, [r3, #0]
 80149f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80149f8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80149fc:	460a      	mov	r2, r1
 80149fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8014a00:	f107 0310 	add.w	r3, r7, #16
 8014a04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8014a08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014a0c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	2b01      	cmp	r3, #1
 8014a14:	d00a      	beq.n	8014a2c <aci_gatt_add_service+0x66>
 8014a16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014a1a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8014a1e:	781b      	ldrb	r3, [r3, #0]
 8014a20:	2b02      	cmp	r3, #2
 8014a22:	d101      	bne.n	8014a28 <aci_gatt_add_service+0x62>
 8014a24:	2311      	movs	r3, #17
 8014a26:	e002      	b.n	8014a2e <aci_gatt_add_service+0x68>
 8014a28:	2301      	movs	r3, #1
 8014a2a:	e000      	b.n	8014a2e <aci_gatt_add_service+0x68>
 8014a2c:	2303      	movs	r3, #3
 8014a2e:	f107 0210 	add.w	r2, r7, #16
 8014a32:	4413      	add	r3, r2
 8014a34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8014a38:	f107 030c 	add.w	r3, r7, #12
 8014a3c:	2203      	movs	r2, #3
 8014a3e:	2100      	movs	r1, #0
 8014a40:	4618      	mov	r0, r3
 8014a42:	f001 f83c 	bl	8015abe <Osal_MemSet>
  int index_input = 0;
 8014a46:	2300      	movs	r3, #0
 8014a48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8014a4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014a50:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8014a54:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8014a58:	7812      	ldrb	r2, [r2, #0]
 8014a5a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014a5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014a60:	3301      	adds	r3, #1
 8014a62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8014a66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014a6a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8014a6e:	781b      	ldrb	r3, [r3, #0]
 8014a70:	2b01      	cmp	r3, #1
 8014a72:	d002      	beq.n	8014a7a <aci_gatt_add_service+0xb4>
 8014a74:	2b02      	cmp	r3, #2
 8014a76:	d004      	beq.n	8014a82 <aci_gatt_add_service+0xbc>
 8014a78:	e007      	b.n	8014a8a <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8014a7a:	2302      	movs	r3, #2
 8014a7c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8014a80:	e005      	b.n	8014a8e <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8014a82:	2310      	movs	r3, #16
 8014a84:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8014a88:	e001      	b.n	8014a8e <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8014a8a:	2397      	movs	r3, #151	; 0x97
 8014a8c:	e06c      	b.n	8014b68 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8014a8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014a92:	1c58      	adds	r0, r3, #1
 8014a94:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8014a98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014a9c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8014aa0:	6819      	ldr	r1, [r3, #0]
 8014aa2:	f000 fffc 	bl	8015a9e <Osal_MemCpy>
    index_input += size;
 8014aa6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8014aaa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8014aae:	4413      	add	r3, r2
 8014ab0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8014ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014ab8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8014abc:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8014ac0:	7812      	ldrb	r2, [r2, #0]
 8014ac2:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8014ac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014ac8:	3301      	adds	r3, #1
 8014aca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8014ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014ad2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8014ad6:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8014ada:	7812      	ldrb	r2, [r2, #0]
 8014adc:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8014ade:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014ae2:	3301      	adds	r3, #1
 8014ae4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014ae8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014aec:	2218      	movs	r2, #24
 8014aee:	2100      	movs	r1, #0
 8014af0:	4618      	mov	r0, r3
 8014af2:	f000 ffe4 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014af6:	233f      	movs	r3, #63	; 0x3f
 8014af8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8014afc:	f44f 7381 	mov.w	r3, #258	; 0x102
 8014b00:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8014b04:	f107 0310 	add.w	r3, r7, #16
 8014b08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014b0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014b10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8014b14:	f107 030c 	add.w	r3, r7, #12
 8014b18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8014b1c:	2303      	movs	r3, #3
 8014b1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014b22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014b26:	2100      	movs	r1, #0
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f001 f94d 	bl	8015dc8 <hci_send_req>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	da01      	bge.n	8014b38 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8014b34:	23ff      	movs	r3, #255	; 0xff
 8014b36:	e017      	b.n	8014b68 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8014b38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014b3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014b40:	781b      	ldrb	r3, [r3, #0]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d005      	beq.n	8014b52 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8014b46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014b4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014b4e:	781b      	ldrb	r3, [r3, #0]
 8014b50:	e00a      	b.n	8014b68 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8014b52:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014b56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014b5a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014b5e:	b29a      	uxth	r2, r3
 8014b60:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014b64:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8014b66:	2300      	movs	r3, #0
}
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd90      	pop	{r4, r7, pc}

08014b72 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8014b72:	b590      	push	{r4, r7, lr}
 8014b74:	b0d1      	sub	sp, #324	; 0x144
 8014b76:	af00      	add	r7, sp, #0
 8014b78:	4604      	mov	r4, r0
 8014b7a:	4608      	mov	r0, r1
 8014b7c:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8014b80:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8014b84:	600a      	str	r2, [r1, #0]
 8014b86:	4619      	mov	r1, r3
 8014b88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014b8c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8014b90:	4622      	mov	r2, r4
 8014b92:	801a      	strh	r2, [r3, #0]
 8014b94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014b98:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8014b9c:	4602      	mov	r2, r0
 8014b9e:	701a      	strb	r2, [r3, #0]
 8014ba0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014ba4:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8014ba8:	460a      	mov	r2, r1
 8014baa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8014bac:	f107 0318 	add.w	r3, r7, #24
 8014bb0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8014bb4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014bb8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8014bbc:	781b      	ldrb	r3, [r3, #0]
 8014bbe:	2b01      	cmp	r3, #1
 8014bc0:	d00a      	beq.n	8014bd8 <aci_gatt_add_char+0x66>
 8014bc2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014bc6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8014bca:	781b      	ldrb	r3, [r3, #0]
 8014bcc:	2b02      	cmp	r3, #2
 8014bce:	d101      	bne.n	8014bd4 <aci_gatt_add_char+0x62>
 8014bd0:	2313      	movs	r3, #19
 8014bd2:	e002      	b.n	8014bda <aci_gatt_add_char+0x68>
 8014bd4:	2303      	movs	r3, #3
 8014bd6:	e000      	b.n	8014bda <aci_gatt_add_char+0x68>
 8014bd8:	2305      	movs	r3, #5
 8014bda:	f107 0218 	add.w	r2, r7, #24
 8014bde:	4413      	add	r3, r2
 8014be0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8014be4:	f107 0314 	add.w	r3, r7, #20
 8014be8:	2203      	movs	r2, #3
 8014bea:	2100      	movs	r1, #0
 8014bec:	4618      	mov	r0, r3
 8014bee:	f000 ff66 	bl	8015abe <Osal_MemSet>
  int index_input = 0;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8014bf8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8014bfc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8014c00:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8014c04:	8812      	ldrh	r2, [r2, #0]
 8014c06:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014c08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014c0c:	3302      	adds	r3, #2
 8014c0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8014c12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8014c16:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8014c1a:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8014c1e:	7812      	ldrb	r2, [r2, #0]
 8014c20:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8014c22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014c26:	3301      	adds	r3, #1
 8014c28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8014c2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014c30:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8014c34:	781b      	ldrb	r3, [r3, #0]
 8014c36:	2b01      	cmp	r3, #1
 8014c38:	d002      	beq.n	8014c40 <aci_gatt_add_char+0xce>
 8014c3a:	2b02      	cmp	r3, #2
 8014c3c:	d004      	beq.n	8014c48 <aci_gatt_add_char+0xd6>
 8014c3e:	e007      	b.n	8014c50 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8014c40:	2302      	movs	r3, #2
 8014c42:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8014c46:	e005      	b.n	8014c54 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8014c48:	2310      	movs	r3, #16
 8014c4a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8014c4e:	e001      	b.n	8014c54 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8014c50:	2397      	movs	r3, #151	; 0x97
 8014c52:	e091      	b.n	8014d78 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8014c54:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8014c58:	1cd8      	adds	r0, r3, #3
 8014c5a:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8014c5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014c62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8014c66:	6819      	ldr	r1, [r3, #0]
 8014c68:	f000 ff19 	bl	8015a9e <Osal_MemCpy>
    index_input += size;
 8014c6c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8014c70:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8014c74:	4413      	add	r3, r2
 8014c76:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8014c7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014c7e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8014c82:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8014c86:	8812      	ldrh	r2, [r2, #0]
 8014c88:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014c8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014c8e:	3302      	adds	r3, #2
 8014c90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8014c94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014c98:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8014c9c:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8014c9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014ca2:	3301      	adds	r3, #1
 8014ca4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8014ca8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014cac:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8014cb0:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8014cb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014cb6:	3301      	adds	r3, #1
 8014cb8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8014cbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014cc0:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8014cc4:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8014cc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014cca:	3301      	adds	r3, #1
 8014ccc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8014cd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014cd4:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8014cd8:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8014cda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014cde:	3301      	adds	r3, #1
 8014ce0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8014ce4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014ce8:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8014cec:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8014cee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014cf2:	3301      	adds	r3, #1
 8014cf4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014cf8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014cfc:	2218      	movs	r2, #24
 8014cfe:	2100      	movs	r1, #0
 8014d00:	4618      	mov	r0, r3
 8014d02:	f000 fedc 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014d06:	233f      	movs	r3, #63	; 0x3f
 8014d08:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8014d0c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8014d10:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8014d14:	f107 0318 	add.w	r3, r7, #24
 8014d18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8014d1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014d20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8014d24:	f107 0314 	add.w	r3, r7, #20
 8014d28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8014d2c:	2303      	movs	r3, #3
 8014d2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014d32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014d36:	2100      	movs	r1, #0
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f001 f845 	bl	8015dc8 <hci_send_req>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	da01      	bge.n	8014d48 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8014d44:	23ff      	movs	r3, #255	; 0xff
 8014d46:	e017      	b.n	8014d78 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8014d48:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014d4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014d50:	781b      	ldrb	r3, [r3, #0]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d005      	beq.n	8014d62 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8014d56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014d5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014d5e:	781b      	ldrb	r3, [r3, #0]
 8014d60:	e00a      	b.n	8014d78 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8014d62:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014d66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014d6a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014d6e:	b29a      	uxth	r2, r3
 8014d70:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014d74:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8014d76:	2300      	movs	r3, #0
}
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	bd90      	pop	{r4, r7, pc}

08014d82 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8014d82:	b5b0      	push	{r4, r5, r7, lr}
 8014d84:	b0cc      	sub	sp, #304	; 0x130
 8014d86:	af00      	add	r7, sp, #0
 8014d88:	4605      	mov	r5, r0
 8014d8a:	460c      	mov	r4, r1
 8014d8c:	4610      	mov	r0, r2
 8014d8e:	4619      	mov	r1, r3
 8014d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014d94:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8014d98:	462a      	mov	r2, r5
 8014d9a:	801a      	strh	r2, [r3, #0]
 8014d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014da0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014da4:	4622      	mov	r2, r4
 8014da6:	801a      	strh	r2, [r3, #0]
 8014da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014dac:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8014db0:	4602      	mov	r2, r0
 8014db2:	701a      	strb	r2, [r3, #0]
 8014db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014db8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8014dbc:	460a      	mov	r2, r1
 8014dbe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8014dc0:	f107 0310 	add.w	r3, r7, #16
 8014dc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8014dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014dcc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8014dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014dde:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014de2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8014de6:	8812      	ldrh	r2, [r2, #0]
 8014de8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014dea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014dee:	3302      	adds	r3, #2
 8014df0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8014df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014df8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014dfc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8014e00:	8812      	ldrh	r2, [r2, #0]
 8014e02:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8014e04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014e08:	3302      	adds	r3, #2
 8014e0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8014e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014e12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014e16:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8014e1a:	7812      	ldrb	r2, [r2, #0]
 8014e1c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8014e1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014e22:	3301      	adds	r3, #1
 8014e24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8014e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014e2c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014e30:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8014e34:	7812      	ldrb	r2, [r2, #0]
 8014e36:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014e38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014e3c:	3301      	adds	r3, #1
 8014e3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8014e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014e46:	1d98      	adds	r0, r3, #6
 8014e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014e4c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8014e50:	781b      	ldrb	r3, [r3, #0]
 8014e52:	461a      	mov	r2, r3
 8014e54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8014e58:	f000 fe21 	bl	8015a9e <Osal_MemCpy>
  index_input += Char_Value_Length;
 8014e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014e60:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8014e64:	781b      	ldrb	r3, [r3, #0]
 8014e66:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8014e6a:	4413      	add	r3, r2
 8014e6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014e70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014e74:	2218      	movs	r2, #24
 8014e76:	2100      	movs	r1, #0
 8014e78:	4618      	mov	r0, r3
 8014e7a:	f000 fe20 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014e7e:	233f      	movs	r3, #63	; 0x3f
 8014e80:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8014e84:	f44f 7383 	mov.w	r3, #262	; 0x106
 8014e88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8014e8c:	f107 0310 	add.w	r3, r7, #16
 8014e90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014e94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014e98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8014e9c:	f107 030f 	add.w	r3, r7, #15
 8014ea0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8014ea4:	2301      	movs	r3, #1
 8014ea6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014eaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014eae:	2100      	movs	r1, #0
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f000 ff89 	bl	8015dc8 <hci_send_req>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	da01      	bge.n	8014ec0 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8014ebc:	23ff      	movs	r3, #255	; 0xff
 8014ebe:	e004      	b.n	8014eca <aci_gatt_update_char_value+0x148>
  return status;
 8014ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014ec4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8014ec8:	781b      	ldrb	r3, [r3, #0]
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bdb0      	pop	{r4, r5, r7, pc}

08014ed4 <aci_gatt_del_char>:

tBleStatus aci_gatt_del_char( uint16_t Serv_Handle,
                              uint16_t Char_Handle )
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b0cc      	sub	sp, #304	; 0x130
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	4602      	mov	r2, r0
 8014edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014ee0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8014ee4:	801a      	strh	r2, [r3, #0]
 8014ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014eea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014eee:	460a      	mov	r2, r1
 8014ef0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_del_char_cp0 *cp0 = (aci_gatt_del_char_cp0*)(cmd_buffer);
 8014ef2:	f107 0310 	add.w	r3, r7, #16
 8014ef6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8014efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014efe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8014f02:	2200      	movs	r2, #0
 8014f04:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014f06:	2300      	movs	r3, #0
 8014f08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Serv_Handle = Serv_Handle;
 8014f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014f10:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014f14:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8014f18:	8812      	ldrh	r2, [r2, #0]
 8014f1a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014f1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014f20:	3302      	adds	r3, #2
 8014f22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8014f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014f2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014f2e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8014f32:	8812      	ldrh	r2, [r2, #0]
 8014f34:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8014f36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014f3a:	3302      	adds	r3, #2
 8014f3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014f40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014f44:	2218      	movs	r2, #24
 8014f46:	2100      	movs	r1, #0
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f000 fdb8 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014f4e:	233f      	movs	r3, #63	; 0x3f
 8014f50:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x107;
 8014f54:	f240 1307 	movw	r3, #263	; 0x107
 8014f58:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8014f5c:	f107 0310 	add.w	r3, r7, #16
 8014f60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014f64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014f68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8014f6c:	f107 030f 	add.w	r3, r7, #15
 8014f70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8014f74:	2301      	movs	r3, #1
 8014f76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014f7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014f7e:	2100      	movs	r1, #0
 8014f80:	4618      	mov	r0, r3
 8014f82:	f000 ff21 	bl	8015dc8 <hci_send_req>
 8014f86:	4603      	mov	r3, r0
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	da01      	bge.n	8014f90 <aci_gatt_del_char+0xbc>
    return BLE_STATUS_TIMEOUT;
 8014f8c:	23ff      	movs	r3, #255	; 0xff
 8014f8e:	e004      	b.n	8014f9a <aci_gatt_del_char+0xc6>
  return status;
 8014f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014f94:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8014f98:	781b      	ldrb	r3, [r3, #0]
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	bd80      	pop	{r7, pc}

08014fa4 <aci_gatt_del_service>:

tBleStatus aci_gatt_del_service( uint16_t Serv_Handle )
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b0cc      	sub	sp, #304	; 0x130
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	4602      	mov	r2, r0
 8014fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014fb0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8014fb4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_del_service_cp0 *cp0 = (aci_gatt_del_service_cp0*)(cmd_buffer);
 8014fb6:	f107 0310 	add.w	r3, r7, #16
 8014fba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8014fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014fc2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014fca:	2300      	movs	r3, #0
 8014fcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Serv_Handle = Serv_Handle;
 8014fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014fd4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014fd8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8014fdc:	8812      	ldrh	r2, [r2, #0]
 8014fde:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014fe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014fe4:	3302      	adds	r3, #2
 8014fe6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014fea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014fee:	2218      	movs	r2, #24
 8014ff0:	2100      	movs	r1, #0
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f000 fd63 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014ff8:	233f      	movs	r3, #63	; 0x3f
 8014ffa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x108;
 8014ffe:	f44f 7384 	mov.w	r3, #264	; 0x108
 8015002:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015006:	f107 0310 	add.w	r3, r7, #16
 801500a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801500e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015012:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015016:	f107 030f 	add.w	r3, r7, #15
 801501a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801501e:	2301      	movs	r3, #1
 8015020:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015024:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015028:	2100      	movs	r1, #0
 801502a:	4618      	mov	r0, r3
 801502c:	f000 fecc 	bl	8015dc8 <hci_send_req>
 8015030:	4603      	mov	r3, r0
 8015032:	2b00      	cmp	r3, #0
 8015034:	da01      	bge.n	801503a <aci_gatt_del_service+0x96>
    return BLE_STATUS_TIMEOUT;
 8015036:	23ff      	movs	r3, #255	; 0xff
 8015038:	e004      	b.n	8015044 <aci_gatt_del_service+0xa0>
  return status;
 801503a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801503e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015042:	781b      	ldrb	r3, [r3, #0]
}
 8015044:	4618      	mov	r0, r3
 8015046:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}

0801504e <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 801504e:	b580      	push	{r7, lr}
 8015050:	b0cc      	sub	sp, #304	; 0x130
 8015052:	af00      	add	r7, sp, #0
 8015054:	4602      	mov	r2, r0
 8015056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801505a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801505e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8015060:	f107 0310 	add.w	r3, r7, #16
 8015064:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8015068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801506c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015070:	2200      	movs	r2, #0
 8015072:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015074:	2300      	movs	r3, #0
 8015076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 801507a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801507e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015082:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8015086:	8812      	ldrh	r2, [r2, #0]
 8015088:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801508a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801508e:	3302      	adds	r3, #2
 8015090:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015094:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015098:	2218      	movs	r2, #24
 801509a:	2100      	movs	r1, #0
 801509c:	4618      	mov	r0, r3
 801509e:	f000 fd0e 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 80150a2:	233f      	movs	r3, #63	; 0x3f
 80150a4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 80150a8:	f240 1327 	movw	r3, #295	; 0x127
 80150ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80150b0:	f107 0310 	add.w	r3, r7, #16
 80150b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80150b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80150bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80150c0:	f107 030f 	add.w	r3, r7, #15
 80150c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80150c8:	2301      	movs	r3, #1
 80150ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80150ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80150d2:	2100      	movs	r1, #0
 80150d4:	4618      	mov	r0, r3
 80150d6:	f000 fe77 	bl	8015dc8 <hci_send_req>
 80150da:	4603      	mov	r3, r0
 80150dc:	2b00      	cmp	r3, #0
 80150de:	da01      	bge.n	80150e4 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 80150e0:	23ff      	movs	r3, #255	; 0xff
 80150e2:	e004      	b.n	80150ee <aci_gatt_allow_read+0xa0>
  return status;
 80150e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80150e8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80150ec:	781b      	ldrb	r3, [r3, #0]
}
 80150ee:	4618      	mov	r0, r3
 80150f0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}

080150f8 <aci_gatt_update_char_value_ext>:
                                           uint8_t Update_Type,
                                           uint16_t Char_Length,
                                           uint16_t Value_Offset,
                                           uint8_t Value_Length,
                                           const uint8_t* Value )
{
 80150f8:	b5b0      	push	{r4, r5, r7, lr}
 80150fa:	b0cc      	sub	sp, #304	; 0x130
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	4605      	mov	r5, r0
 8015100:	460c      	mov	r4, r1
 8015102:	4610      	mov	r0, r2
 8015104:	4619      	mov	r1, r3
 8015106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801510a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801510e:	462a      	mov	r2, r5
 8015110:	801a      	strh	r2, [r3, #0]
 8015112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015116:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801511a:	4622      	mov	r2, r4
 801511c:	801a      	strh	r2, [r3, #0]
 801511e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015122:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8015126:	4602      	mov	r2, r0
 8015128:	801a      	strh	r2, [r3, #0]
 801512a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801512e:	f2a3 132f 	subw	r3, r3, #303	; 0x12f
 8015132:	460a      	mov	r2, r1
 8015134:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_ext_cp0 *cp0 = (aci_gatt_update_char_value_ext_cp0*)(cmd_buffer);
 8015136:	f107 0310 	add.w	r3, r7, #16
 801513a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801513e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015142:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015146:	2200      	movs	r2, #0
 8015148:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801514a:	2300      	movs	r3, #0
 801514c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Handle_To_Notify = Conn_Handle_To_Notify;
 8015150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015154:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015158:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 801515c:	8812      	ldrh	r2, [r2, #0]
 801515e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015160:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015164:	3302      	adds	r3, #2
 8015166:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 801516a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801516e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015172:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8015176:	8812      	ldrh	r2, [r2, #0]
 8015178:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 801517a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801517e:	3302      	adds	r3, #2
 8015180:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8015184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015188:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801518c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8015190:	8812      	ldrh	r2, [r2, #0]
 8015192:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8015194:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015198:	3302      	adds	r3, #2
 801519a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Update_Type = Update_Type;
 801519e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80151a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80151a6:	f2a2 122f 	subw	r2, r2, #303	; 0x12f
 80151aa:	7812      	ldrb	r2, [r2, #0]
 80151ac:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80151ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80151b2:	3301      	adds	r3, #1
 80151b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Length = Char_Length;
 80151b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80151bc:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80151c0:	f8a3 2007 	strh.w	r2, [r3, #7]
  index_input += 2;
 80151c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80151c8:	3302      	adds	r3, #2
 80151ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Value_Offset = Value_Offset;
 80151ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80151d2:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 80151d6:	f8a3 2009 	strh.w	r2, [r3, #9]
  index_input += 2;
 80151da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80151de:	3302      	adds	r3, #2
 80151e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Value_Length = Value_Length;
 80151e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80151e8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80151ec:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80151ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80151f2:	3301      	adds	r3, #1
 80151f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Value_Length );
 80151f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80151fc:	330c      	adds	r3, #12
 80151fe:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8015202:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8015206:	4618      	mov	r0, r3
 8015208:	f000 fc49 	bl	8015a9e <Osal_MemCpy>
  index_input += Value_Length;
 801520c:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 8015210:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8015214:	4413      	add	r3, r2
 8015216:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801521a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801521e:	2218      	movs	r2, #24
 8015220:	2100      	movs	r1, #0
 8015222:	4618      	mov	r0, r3
 8015224:	f000 fc4b 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015228:	233f      	movs	r3, #63	; 0x3f
 801522a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x12c;
 801522e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8015232:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015236:	f107 0310 	add.w	r3, r7, #16
 801523a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801523e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015242:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015246:	f107 030f 	add.w	r3, r7, #15
 801524a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801524e:	2301      	movs	r3, #1
 8015250:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015254:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015258:	2100      	movs	r1, #0
 801525a:	4618      	mov	r0, r3
 801525c:	f000 fdb4 	bl	8015dc8 <hci_send_req>
 8015260:	4603      	mov	r3, r0
 8015262:	2b00      	cmp	r3, #0
 8015264:	da01      	bge.n	801526a <aci_gatt_update_char_value_ext+0x172>
    return BLE_STATUS_TIMEOUT;
 8015266:	23ff      	movs	r3, #255	; 0xff
 8015268:	e004      	b.n	8015274 <aci_gatt_update_char_value_ext+0x17c>
  return status;
 801526a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801526e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015272:	781b      	ldrb	r3, [r3, #0]
}
 8015274:	4618      	mov	r0, r3
 8015276:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801527a:	46bd      	mov	sp, r7
 801527c:	bdb0      	pop	{r4, r5, r7, pc}

0801527e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 801527e:	b580      	push	{r7, lr}
 8015280:	b0cc      	sub	sp, #304	; 0x130
 8015282:	af00      	add	r7, sp, #0
 8015284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801528c:	601a      	str	r2, [r3, #0]
 801528e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015292:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8015296:	4602      	mov	r2, r0
 8015298:	701a      	strb	r2, [r3, #0]
 801529a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801529e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80152a2:	460a      	mov	r2, r1
 80152a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80152a6:	f107 0310 	add.w	r3, r7, #16
 80152aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80152ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80152b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80152b6:	2200      	movs	r2, #0
 80152b8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80152ba:	2300      	movs	r3, #0
 80152bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80152c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80152c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80152c8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80152cc:	7812      	ldrb	r2, [r2, #0]
 80152ce:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80152d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80152d4:	3301      	adds	r3, #1
 80152d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80152da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80152de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80152e2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80152e6:	7812      	ldrb	r2, [r2, #0]
 80152e8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80152ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80152ee:	3301      	adds	r3, #1
 80152f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80152f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80152f8:	1c98      	adds	r0, r3, #2
 80152fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80152fe:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8015302:	781a      	ldrb	r2, [r3, #0]
 8015304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015308:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801530c:	6819      	ldr	r1, [r3, #0]
 801530e:	f000 fbc6 	bl	8015a9e <Osal_MemCpy>
  index_input += Length;
 8015312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015316:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801531a:	781b      	ldrb	r3, [r3, #0]
 801531c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8015320:	4413      	add	r3, r2
 8015322:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015326:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801532a:	2218      	movs	r2, #24
 801532c:	2100      	movs	r1, #0
 801532e:	4618      	mov	r0, r3
 8015330:	f000 fbc5 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015334:	233f      	movs	r3, #63	; 0x3f
 8015336:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 801533a:	230c      	movs	r3, #12
 801533c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015340:	f107 0310 	add.w	r3, r7, #16
 8015344:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015348:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801534c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015350:	f107 030f 	add.w	r3, r7, #15
 8015354:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015358:	2301      	movs	r3, #1
 801535a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801535e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015362:	2100      	movs	r1, #0
 8015364:	4618      	mov	r0, r3
 8015366:	f000 fd2f 	bl	8015dc8 <hci_send_req>
 801536a:	4603      	mov	r3, r0
 801536c:	2b00      	cmp	r3, #0
 801536e:	da01      	bge.n	8015374 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8015370:	23ff      	movs	r3, #255	; 0xff
 8015372:	e004      	b.n	801537e <aci_hal_write_config_data+0x100>
  return status;
 8015374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015378:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801537c:	781b      	ldrb	r3, [r3, #0]
}
 801537e:	4618      	mov	r0, r3
 8015380:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}

08015388 <aci_hal_read_config_data>:

tBleStatus aci_hal_read_config_data( uint8_t Offset,
                                     uint8_t* Data_Length,
                                     uint8_t* Data )
{
 8015388:	b580      	push	{r7, lr}
 801538a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 801538e:	af00      	add	r7, sp, #0
 8015390:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015394:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8015398:	6019      	str	r1, [r3, #0]
 801539a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801539e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80153a2:	601a      	str	r2, [r3, #0]
 80153a4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80153a8:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 80153ac:	4602      	mov	r2, r0
 80153ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 80153b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80153b4:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
  aci_hal_read_config_data_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80153b8:	f107 0314 	add.w	r3, r7, #20
 80153bc:	22fc      	movs	r2, #252	; 0xfc
 80153be:	2100      	movs	r1, #0
 80153c0:	4618      	mov	r0, r3
 80153c2:	f000 fb7c 	bl	8015abe <Osal_MemSet>
  int index_input = 0;
 80153c6:	2300      	movs	r3, #0
 80153c8:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  cp0->Offset = Offset;
 80153cc:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80153d0:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80153d4:	f2a2 2221 	subw	r2, r2, #545	; 0x221
 80153d8:	7812      	ldrb	r2, [r2, #0]
 80153da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80153dc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80153e0:	3301      	adds	r3, #1
 80153e2:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80153e6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80153ea:	2218      	movs	r2, #24
 80153ec:	2100      	movs	r1, #0
 80153ee:	4618      	mov	r0, r3
 80153f0:	f000 fb65 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 80153f4:	233f      	movs	r3, #63	; 0x3f
 80153f6:	f8a7 3210 	strh.w	r3, [r7, #528]	; 0x210
  rq.ocf = 0x00d;
 80153fa:	230d      	movs	r3, #13
 80153fc:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
  rq.cparam = cmd_buffer;
 8015400:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015404:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  rq.clen = index_input;
 8015408:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801540c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  rq.rparam = &resp;
 8015410:	f107 0314 	add.w	r3, r7, #20
 8015414:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
  rq.rlen = sizeof(resp);
 8015418:	23fc      	movs	r3, #252	; 0xfc
 801541a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  if ( hci_send_req(&rq, FALSE) < 0 )
 801541e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8015422:	2100      	movs	r1, #0
 8015424:	4618      	mov	r0, r3
 8015426:	f000 fccf 	bl	8015dc8 <hci_send_req>
 801542a:	4603      	mov	r3, r0
 801542c:	2b00      	cmp	r3, #0
 801542e:	da01      	bge.n	8015434 <aci_hal_read_config_data+0xac>
    return BLE_STATUS_TIMEOUT;
 8015430:	23ff      	movs	r3, #255	; 0xff
 8015432:	e029      	b.n	8015488 <aci_hal_read_config_data+0x100>
  if ( resp.Status )
 8015434:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015438:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801543c:	781b      	ldrb	r3, [r3, #0]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d005      	beq.n	801544e <aci_hal_read_config_data+0xc6>
    return resp.Status;
 8015442:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015446:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801544a:	781b      	ldrb	r3, [r3, #0]
 801544c:	e01c      	b.n	8015488 <aci_hal_read_config_data+0x100>
  *Data_Length = resp.Data_Length;
 801544e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015452:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015456:	785a      	ldrb	r2, [r3, #1]
 8015458:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801545c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	701a      	strb	r2, [r3, #0]
  Osal_MemCpy( (void*)Data, (const void*)resp.Data, *Data_Length);
 8015464:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015468:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	781b      	ldrb	r3, [r3, #0]
 8015470:	461a      	mov	r2, r3
 8015472:	f107 0314 	add.w	r3, r7, #20
 8015476:	1c99      	adds	r1, r3, #2
 8015478:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801547c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015480:	6818      	ldr	r0, [r3, #0]
 8015482:	f000 fb0c 	bl	8015a9e <Osal_MemCpy>
  return BLE_STATUS_SUCCESS;
 8015486:	2300      	movs	r3, #0
}
 8015488:	4618      	mov	r0, r3
 801548a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}

08015492 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8015492:	b580      	push	{r7, lr}
 8015494:	b0cc      	sub	sp, #304	; 0x130
 8015496:	af00      	add	r7, sp, #0
 8015498:	4602      	mov	r2, r0
 801549a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801549e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80154a2:	701a      	strb	r2, [r3, #0]
 80154a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80154a8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80154ac:	460a      	mov	r2, r1
 80154ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80154b0:	f107 0310 	add.w	r3, r7, #16
 80154b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80154b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80154bc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80154c0:	2200      	movs	r2, #0
 80154c2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80154c4:	2300      	movs	r3, #0
 80154c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80154ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80154ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80154d2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80154d6:	7812      	ldrb	r2, [r2, #0]
 80154d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80154da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80154de:	3301      	adds	r3, #1
 80154e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80154e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80154e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80154ec:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80154f0:	7812      	ldrb	r2, [r2, #0]
 80154f2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80154f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80154f8:	3301      	adds	r3, #1
 80154fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80154fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015502:	2218      	movs	r2, #24
 8015504:	2100      	movs	r1, #0
 8015506:	4618      	mov	r0, r3
 8015508:	f000 fad9 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 801550c:	233f      	movs	r3, #63	; 0x3f
 801550e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8015512:	230f      	movs	r3, #15
 8015514:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015518:	f107 0310 	add.w	r3, r7, #16
 801551c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015520:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015524:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015528:	f107 030f 	add.w	r3, r7, #15
 801552c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015530:	2301      	movs	r3, #1
 8015532:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015536:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801553a:	2100      	movs	r1, #0
 801553c:	4618      	mov	r0, r3
 801553e:	f000 fc43 	bl	8015dc8 <hci_send_req>
 8015542:	4603      	mov	r3, r0
 8015544:	2b00      	cmp	r3, #0
 8015546:	da01      	bge.n	801554c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8015548:	23ff      	movs	r3, #255	; 0xff
 801554a:	e004      	b.n	8015556 <aci_hal_set_tx_power_level+0xc4>
  return status;
 801554c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015550:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015554:	781b      	ldrb	r3, [r3, #0]
}
 8015556:	4618      	mov	r0, r3
 8015558:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801555c:	46bd      	mov	sp, r7
 801555e:	bd80      	pop	{r7, pc}

08015560 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b0cc      	sub	sp, #304	; 0x130
 8015564:	af00      	add	r7, sp, #0
 8015566:	4602      	mov	r2, r0
 8015568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801556c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8015570:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8015572:	f107 0310 	add.w	r3, r7, #16
 8015576:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801557a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801557e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015582:	2200      	movs	r2, #0
 8015584:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015586:	2300      	movs	r3, #0
 8015588:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 801558c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015590:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015594:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8015598:	8812      	ldrh	r2, [r2, #0]
 801559a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801559c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80155a0:	3302      	adds	r3, #2
 80155a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80155a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80155aa:	2218      	movs	r2, #24
 80155ac:	2100      	movs	r1, #0
 80155ae:	4618      	mov	r0, r3
 80155b0:	f000 fa85 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 80155b4:	233f      	movs	r3, #63	; 0x3f
 80155b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80155ba:	2318      	movs	r3, #24
 80155bc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80155c0:	f107 0310 	add.w	r3, r7, #16
 80155c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80155c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80155cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80155d0:	f107 030f 	add.w	r3, r7, #15
 80155d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80155d8:	2301      	movs	r3, #1
 80155da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80155de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80155e2:	2100      	movs	r1, #0
 80155e4:	4618      	mov	r0, r3
 80155e6:	f000 fbef 	bl	8015dc8 <hci_send_req>
 80155ea:	4603      	mov	r3, r0
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	da01      	bge.n	80155f4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80155f0:	23ff      	movs	r3, #255	; 0xff
 80155f2:	e004      	b.n	80155fe <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80155f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80155f8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80155fc:	781b      	ldrb	r3, [r3, #0]
}
 80155fe:	4618      	mov	r0, r3
 8015600:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}

08015608 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b088      	sub	sp, #32
 801560c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801560e:	2300      	movs	r3, #0
 8015610:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015612:	f107 0308 	add.w	r3, r7, #8
 8015616:	2218      	movs	r2, #24
 8015618:	2100      	movs	r1, #0
 801561a:	4618      	mov	r0, r3
 801561c:	f000 fa4f 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x03;
 8015620:	2303      	movs	r3, #3
 8015622:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8015624:	2303      	movs	r3, #3
 8015626:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015628:	1dfb      	adds	r3, r7, #7
 801562a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801562c:	2301      	movs	r3, #1
 801562e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015630:	f107 0308 	add.w	r3, r7, #8
 8015634:	2100      	movs	r1, #0
 8015636:	4618      	mov	r0, r3
 8015638:	f000 fbc6 	bl	8015dc8 <hci_send_req>
 801563c:	4603      	mov	r3, r0
 801563e:	2b00      	cmp	r3, #0
 8015640:	da01      	bge.n	8015646 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8015642:	23ff      	movs	r3, #255	; 0xff
 8015644:	e000      	b.n	8015648 <hci_reset+0x40>
  return status;
 8015646:	79fb      	ldrb	r3, [r7, #7]
}
 8015648:	4618      	mov	r0, r3
 801564a:	3720      	adds	r7, #32
 801564c:	46bd      	mov	sp, r7
 801564e:	bd80      	pop	{r7, pc}

08015650 <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information( uint8_t* HCI_Version,
                                               uint16_t* HCI_Subversion,
                                               uint8_t* LMP_Version,
                                               uint16_t* Company_Identifier,
                                               uint16_t* LMP_Subversion )
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b08e      	sub	sp, #56	; 0x38
 8015654:	af00      	add	r7, sp, #0
 8015656:	60f8      	str	r0, [r7, #12]
 8015658:	60b9      	str	r1, [r7, #8]
 801565a:	607a      	str	r2, [r7, #4]
 801565c:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801565e:	f107 0314 	add.w	r3, r7, #20
 8015662:	2209      	movs	r2, #9
 8015664:	2100      	movs	r1, #0
 8015666:	4618      	mov	r0, r3
 8015668:	f000 fa29 	bl	8015abe <Osal_MemSet>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801566c:	f107 0320 	add.w	r3, r7, #32
 8015670:	2218      	movs	r2, #24
 8015672:	2100      	movs	r1, #0
 8015674:	4618      	mov	r0, r3
 8015676:	f000 fa22 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x04;
 801567a:	2304      	movs	r3, #4
 801567c:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 801567e:	2301      	movs	r3, #1
 8015680:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 8015682:	f107 0314 	add.w	r3, r7, #20
 8015686:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 8015688:	2309      	movs	r3, #9
 801568a:	637b      	str	r3, [r7, #52]	; 0x34
  if ( hci_send_req(&rq, FALSE) < 0 )
 801568c:	f107 0320 	add.w	r3, r7, #32
 8015690:	2100      	movs	r1, #0
 8015692:	4618      	mov	r0, r3
 8015694:	f000 fb98 	bl	8015dc8 <hci_send_req>
 8015698:	4603      	mov	r3, r0
 801569a:	2b00      	cmp	r3, #0
 801569c:	da01      	bge.n	80156a2 <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 801569e:	23ff      	movs	r3, #255	; 0xff
 80156a0:	e018      	b.n	80156d4 <hci_read_local_version_information+0x84>
  if ( resp.Status )
 80156a2:	7d3b      	ldrb	r3, [r7, #20]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d001      	beq.n	80156ac <hci_read_local_version_information+0x5c>
    return resp.Status;
 80156a8:	7d3b      	ldrb	r3, [r7, #20]
 80156aa:	e013      	b.n	80156d4 <hci_read_local_version_information+0x84>
  *HCI_Version = resp.HCI_Version;
 80156ac:	7d7a      	ldrb	r2, [r7, #21]
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	701a      	strb	r2, [r3, #0]
  *HCI_Subversion = resp.HCI_Subversion;
 80156b2:	8afa      	ldrh	r2, [r7, #22]
 80156b4:	68bb      	ldr	r3, [r7, #8]
 80156b6:	801a      	strh	r2, [r3, #0]
  *LMP_Version = resp.LMP_Version;
 80156b8:	7e3a      	ldrb	r2, [r7, #24]
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	701a      	strb	r2, [r3, #0]
  *Company_Identifier = resp.Company_Identifier;
 80156be:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80156c2:	b29a      	uxth	r2, r3
 80156c4:	683b      	ldr	r3, [r7, #0]
 80156c6:	801a      	strh	r2, [r3, #0]
  *LMP_Subversion = resp.LMP_Subversion;
 80156c8:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 80156cc:	b29a      	uxth	r2, r3
 80156ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80156d0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80156d2:	2300      	movs	r3, #0
}
 80156d4:	4618      	mov	r0, r3
 80156d6:	3738      	adds	r7, #56	; 0x38
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}

080156dc <hci_read_bd_addr>:
  Osal_MemCpy( (void*)LMP_Features, (const void*)resp.LMP_Features, 8 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_read_bd_addr( uint8_t* BD_ADDR )
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b08a      	sub	sp, #40	; 0x28
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_read_bd_addr_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80156e4:	f107 0308 	add.w	r3, r7, #8
 80156e8:	2207      	movs	r2, #7
 80156ea:	2100      	movs	r1, #0
 80156ec:	4618      	mov	r0, r3
 80156ee:	f000 f9e6 	bl	8015abe <Osal_MemSet>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80156f2:	f107 0310 	add.w	r3, r7, #16
 80156f6:	2218      	movs	r2, #24
 80156f8:	2100      	movs	r1, #0
 80156fa:	4618      	mov	r0, r3
 80156fc:	f000 f9df 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x04;
 8015700:	2304      	movs	r3, #4
 8015702:	823b      	strh	r3, [r7, #16]
  rq.ocf = 0x009;
 8015704:	2309      	movs	r3, #9
 8015706:	827b      	strh	r3, [r7, #18]
  rq.rparam = &resp;
 8015708:	f107 0308 	add.w	r3, r7, #8
 801570c:	623b      	str	r3, [r7, #32]
  rq.rlen = sizeof(resp);
 801570e:	2307      	movs	r3, #7
 8015710:	627b      	str	r3, [r7, #36]	; 0x24
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015712:	f107 0310 	add.w	r3, r7, #16
 8015716:	2100      	movs	r1, #0
 8015718:	4618      	mov	r0, r3
 801571a:	f000 fb55 	bl	8015dc8 <hci_send_req>
 801571e:	4603      	mov	r3, r0
 8015720:	2b00      	cmp	r3, #0
 8015722:	da01      	bge.n	8015728 <hci_read_bd_addr+0x4c>
    return BLE_STATUS_TIMEOUT;
 8015724:	23ff      	movs	r3, #255	; 0xff
 8015726:	e00d      	b.n	8015744 <hci_read_bd_addr+0x68>
  if ( resp.Status )
 8015728:	7a3b      	ldrb	r3, [r7, #8]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d001      	beq.n	8015732 <hci_read_bd_addr+0x56>
    return resp.Status;
 801572e:	7a3b      	ldrb	r3, [r7, #8]
 8015730:	e008      	b.n	8015744 <hci_read_bd_addr+0x68>
  Osal_MemCpy( (void*)BD_ADDR, (const void*)resp.BD_ADDR, 6 );
 8015732:	f107 0308 	add.w	r3, r7, #8
 8015736:	3301      	adds	r3, #1
 8015738:	2206      	movs	r2, #6
 801573a:	4619      	mov	r1, r3
 801573c:	6878      	ldr	r0, [r7, #4]
 801573e:	f000 f9ae 	bl	8015a9e <Osal_MemCpy>
  return BLE_STATUS_SUCCESS;
 8015742:	2300      	movs	r3, #0
}
 8015744:	4618      	mov	r0, r3
 8015746:	3728      	adds	r7, #40	; 0x28
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}

0801574c <hci_le_set_advertising_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_le_set_advertising_data( uint8_t Advertising_Data_Length,
                                        const uint8_t* Advertising_Data )
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b0cc      	sub	sp, #304	; 0x130
 8015750:	af00      	add	r7, sp, #0
 8015752:	4602      	mov	r2, r0
 8015754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801575c:	6019      	str	r1, [r3, #0]
 801575e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015762:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8015766:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_advertising_data_cp0 *cp0 = (hci_le_set_advertising_data_cp0*)(cmd_buffer);
 8015768:	f107 0310 	add.w	r3, r7, #16
 801576c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8015770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015774:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015778:	2200      	movs	r2, #0
 801577a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801577c:	2300      	movs	r3, #0
 801577e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Data_Length = Advertising_Data_Length;
 8015782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015786:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801578a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 801578e:	7812      	ldrb	r2, [r2, #0]
 8015790:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015792:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015796:	3301      	adds	r3, #1
 8015798:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Advertising_Data, (const void*)Advertising_Data, 31 );
 801579c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80157a0:	1c58      	adds	r0, r3, #1
 80157a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80157a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80157aa:	221f      	movs	r2, #31
 80157ac:	6819      	ldr	r1, [r3, #0]
 80157ae:	f000 f976 	bl	8015a9e <Osal_MemCpy>
  index_input += 31;
 80157b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80157b6:	331f      	adds	r3, #31
 80157b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80157bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80157c0:	2218      	movs	r2, #24
 80157c2:	2100      	movs	r1, #0
 80157c4:	4618      	mov	r0, r3
 80157c6:	f000 f97a 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x08;
 80157ca:	2308      	movs	r3, #8
 80157cc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x008;
 80157d0:	2308      	movs	r3, #8
 80157d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80157d6:	f107 0310 	add.w	r3, r7, #16
 80157da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80157de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80157e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80157e6:	f107 030f 	add.w	r3, r7, #15
 80157ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80157ee:	2301      	movs	r3, #1
 80157f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80157f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80157f8:	2100      	movs	r1, #0
 80157fa:	4618      	mov	r0, r3
 80157fc:	f000 fae4 	bl	8015dc8 <hci_send_req>
 8015800:	4603      	mov	r3, r0
 8015802:	2b00      	cmp	r3, #0
 8015804:	da01      	bge.n	801580a <hci_le_set_advertising_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8015806:	23ff      	movs	r3, #255	; 0xff
 8015808:	e004      	b.n	8015814 <hci_le_set_advertising_data+0xc8>
  return status;
 801580a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801580e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015812:	781b      	ldrb	r3, [r3, #0]
}
 8015814:	4618      	mov	r0, r3
 8015816:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}

0801581e <hci_le_set_scan_response_data>:

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 801581e:	b580      	push	{r7, lr}
 8015820:	b0cc      	sub	sp, #304	; 0x130
 8015822:	af00      	add	r7, sp, #0
 8015824:	4602      	mov	r2, r0
 8015826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801582a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801582e:	6019      	str	r1, [r3, #0]
 8015830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015834:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8015838:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 801583a:	f107 0310 	add.w	r3, r7, #16
 801583e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8015842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015846:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801584a:	2200      	movs	r2, #0
 801584c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801584e:	2300      	movs	r3, #0
 8015850:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 8015854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015858:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801585c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8015860:	7812      	ldrb	r2, [r2, #0]
 8015862:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015864:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015868:	3301      	adds	r3, #1
 801586a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 801586e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015872:	1c58      	adds	r0, r3, #1
 8015874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015878:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801587c:	221f      	movs	r2, #31
 801587e:	6819      	ldr	r1, [r3, #0]
 8015880:	f000 f90d 	bl	8015a9e <Osal_MemCpy>
  index_input += 31;
 8015884:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015888:	331f      	adds	r3, #31
 801588a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801588e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015892:	2218      	movs	r2, #24
 8015894:	2100      	movs	r1, #0
 8015896:	4618      	mov	r0, r3
 8015898:	f000 f911 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x08;
 801589c:	2308      	movs	r3, #8
 801589e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 80158a2:	2309      	movs	r3, #9
 80158a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80158a8:	f107 0310 	add.w	r3, r7, #16
 80158ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80158b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80158b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80158b8:	f107 030f 	add.w	r3, r7, #15
 80158bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80158c0:	2301      	movs	r3, #1
 80158c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80158c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80158ca:	2100      	movs	r1, #0
 80158cc:	4618      	mov	r0, r3
 80158ce:	f000 fa7b 	bl	8015dc8 <hci_send_req>
 80158d2:	4603      	mov	r3, r0
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	da01      	bge.n	80158dc <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 80158d8:	23ff      	movs	r3, #255	; 0xff
 80158da:	e004      	b.n	80158e6 <hci_le_set_scan_response_data+0xc8>
  return status;
 80158dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80158e0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80158e4:	781b      	ldrb	r3, [r3, #0]
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bd80      	pop	{r7, pc}

080158f0 <hci_le_rand>:
  Osal_MemCpy( (void*)Encrypted_Data, (const void*)resp.Encrypted_Data, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_le_rand( uint8_t* Random_Number )
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b08c      	sub	sp, #48	; 0x30
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80158f8:	f107 030c 	add.w	r3, r7, #12
 80158fc:	2209      	movs	r2, #9
 80158fe:	2100      	movs	r1, #0
 8015900:	4618      	mov	r0, r3
 8015902:	f000 f8dc 	bl	8015abe <Osal_MemSet>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015906:	f107 0318 	add.w	r3, r7, #24
 801590a:	2218      	movs	r2, #24
 801590c:	2100      	movs	r1, #0
 801590e:	4618      	mov	r0, r3
 8015910:	f000 f8d5 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x08;
 8015914:	2308      	movs	r3, #8
 8015916:	833b      	strh	r3, [r7, #24]
  rq.ocf = 0x018;
 8015918:	2318      	movs	r3, #24
 801591a:	837b      	strh	r3, [r7, #26]
  rq.rparam = &resp;
 801591c:	f107 030c 	add.w	r3, r7, #12
 8015920:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = sizeof(resp);
 8015922:	2309      	movs	r3, #9
 8015924:	62fb      	str	r3, [r7, #44]	; 0x2c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015926:	f107 0318 	add.w	r3, r7, #24
 801592a:	2100      	movs	r1, #0
 801592c:	4618      	mov	r0, r3
 801592e:	f000 fa4b 	bl	8015dc8 <hci_send_req>
 8015932:	4603      	mov	r3, r0
 8015934:	2b00      	cmp	r3, #0
 8015936:	da01      	bge.n	801593c <hci_le_rand+0x4c>
    return BLE_STATUS_TIMEOUT;
 8015938:	23ff      	movs	r3, #255	; 0xff
 801593a:	e00d      	b.n	8015958 <hci_le_rand+0x68>
  if ( resp.Status )
 801593c:	7b3b      	ldrb	r3, [r7, #12]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d001      	beq.n	8015946 <hci_le_rand+0x56>
    return resp.Status;
 8015942:	7b3b      	ldrb	r3, [r7, #12]
 8015944:	e008      	b.n	8015958 <hci_le_rand+0x68>
  Osal_MemCpy( (void*)Random_Number, (const void*)resp.Random_Number, 8 );
 8015946:	f107 030c 	add.w	r3, r7, #12
 801594a:	3301      	adds	r3, #1
 801594c:	2208      	movs	r2, #8
 801594e:	4619      	mov	r1, r3
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f000 f8a4 	bl	8015a9e <Osal_MemCpy>
  return BLE_STATUS_SUCCESS;
 8015956:	2300      	movs	r3, #0
}
 8015958:	4618      	mov	r0, r3
 801595a:	3730      	adds	r7, #48	; 0x30
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}

08015960 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 8015960:	b5b0      	push	{r4, r5, r7, lr}
 8015962:	b0cc      	sub	sp, #304	; 0x130
 8015964:	af00      	add	r7, sp, #0
 8015966:	4605      	mov	r5, r0
 8015968:	460c      	mov	r4, r1
 801596a:	4610      	mov	r0, r2
 801596c:	4619      	mov	r1, r3
 801596e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015972:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8015976:	462a      	mov	r2, r5
 8015978:	801a      	strh	r2, [r3, #0]
 801597a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801597e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015982:	4622      	mov	r2, r4
 8015984:	801a      	strh	r2, [r3, #0]
 8015986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801598a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 801598e:	4602      	mov	r2, r0
 8015990:	801a      	strh	r2, [r3, #0]
 8015992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015996:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801599a:	460a      	mov	r2, r1
 801599c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 801599e:	f107 0310 	add.w	r3, r7, #16
 80159a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80159a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80159aa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80159ae:	2200      	movs	r2, #0
 80159b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80159b2:	2300      	movs	r3, #0
 80159b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80159b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80159bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80159c0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80159c4:	8812      	ldrh	r2, [r2, #0]
 80159c6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80159c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80159cc:	3302      	adds	r3, #2
 80159ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 80159d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80159d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80159da:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80159de:	8812      	ldrh	r2, [r2, #0]
 80159e0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80159e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80159e6:	3302      	adds	r3, #2
 80159e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 80159ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80159f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80159f4:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80159f8:	8812      	ldrh	r2, [r2, #0]
 80159fa:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80159fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a00:	3302      	adds	r3, #2
 8015a02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 8015a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015a0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015a0e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8015a12:	8812      	ldrh	r2, [r2, #0]
 8015a14:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8015a16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a1a:	3302      	adds	r3, #2
 8015a1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8015a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015a24:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8015a28:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8015a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a2e:	3302      	adds	r3, #2
 8015a30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015a34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015a38:	2218      	movs	r2, #24
 8015a3a:	2100      	movs	r1, #0
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	f000 f83e 	bl	8015abe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015a42:	233f      	movs	r3, #63	; 0x3f
 8015a44:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 8015a48:	f240 1381 	movw	r3, #385	; 0x181
 8015a4c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8015a50:	230f      	movs	r3, #15
 8015a52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8015a56:	f107 0310 	add.w	r3, r7, #16
 8015a5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015a5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015a66:	f107 030f 	add.w	r3, r7, #15
 8015a6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015a6e:	2301      	movs	r3, #1
 8015a70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015a74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015a78:	2100      	movs	r1, #0
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f000 f9a4 	bl	8015dc8 <hci_send_req>
 8015a80:	4603      	mov	r3, r0
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	da01      	bge.n	8015a8a <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 8015a86:	23ff      	movs	r3, #255	; 0xff
 8015a88:	e004      	b.n	8015a94 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8015a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015a8e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015a92:	781b      	ldrb	r3, [r3, #0]
}
 8015a94:	4618      	mov	r0, r3
 8015a96:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	bdb0      	pop	{r4, r5, r7, pc}

08015a9e <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8015a9e:	b580      	push	{r7, lr}
 8015aa0:	b084      	sub	sp, #16
 8015aa2:	af00      	add	r7, sp, #0
 8015aa4:	60f8      	str	r0, [r7, #12]
 8015aa6:	60b9      	str	r1, [r7, #8]
 8015aa8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8015aaa:	687a      	ldr	r2, [r7, #4]
 8015aac:	68b9      	ldr	r1, [r7, #8]
 8015aae:	68f8      	ldr	r0, [r7, #12]
 8015ab0:	f013 f85e 	bl	8028b70 <memcpy>
 8015ab4:	4603      	mov	r3, r0
}
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3710      	adds	r7, #16
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}

08015abe <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8015abe:	b580      	push	{r7, lr}
 8015ac0:	b084      	sub	sp, #16
 8015ac2:	af00      	add	r7, sp, #0
 8015ac4:	60f8      	str	r0, [r7, #12]
 8015ac6:	60b9      	str	r1, [r7, #8]
 8015ac8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8015aca:	687a      	ldr	r2, [r7, #4]
 8015acc:	68b9      	ldr	r1, [r7, #8]
 8015ace:	68f8      	ldr	r0, [r7, #12]
 8015ad0:	f013 f876 	bl	8028bc0 <memset>
 8015ad4:	4603      	mov	r3, r0
}
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	3710      	adds	r7, #16
 8015ada:	46bd      	mov	sp, r7
 8015adc:	bd80      	pop	{r7, pc}

08015ade <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8015ade:	b580      	push	{r7, lr}
 8015ae0:	b088      	sub	sp, #32
 8015ae2:	af00      	add	r7, sp, #0
 8015ae4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015ae6:	f107 030c 	add.w	r3, r7, #12
 8015aea:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8015af2:	69fb      	ldr	r3, [r7, #28]
 8015af4:	212e      	movs	r1, #46	; 0x2e
 8015af6:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8015afa:	f000 fb01 	bl	8016100 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015afe:	69fb      	ldr	r3, [r7, #28]
 8015b00:	330b      	adds	r3, #11
 8015b02:	78db      	ldrb	r3, [r3, #3]
}
 8015b04:	4618      	mov	r0, r3
 8015b06:	3720      	adds	r7, #32
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bd80      	pop	{r7, pc}

08015b0c <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b088      	sub	sp, #32
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015b14:	f107 030c 	add.w	r3, r7, #12
 8015b18:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8015b20:	69fb      	ldr	r3, [r7, #28]
 8015b22:	210f      	movs	r1, #15
 8015b24:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8015b28:	f000 faea 	bl	8016100 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015b2c:	69fb      	ldr	r3, [r7, #28]
 8015b2e:	330b      	adds	r3, #11
 8015b30:	78db      	ldrb	r3, [r3, #3]
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	3720      	adds	r7, #32
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}

08015b3a <SHCI_C2_FLASH_EraseActivity>:

SHCI_CmdStatus_t SHCI_C2_FLASH_EraseActivity( SHCI_EraseActivity_t erase_activity )
{
 8015b3a:	b580      	push	{r7, lr}
 8015b3c:	b088      	sub	sp, #32
 8015b3e:	af00      	add	r7, sp, #0
 8015b40:	4603      	mov	r3, r0
 8015b42:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015b44:	f107 030c 	add.w	r3, r7, #12
 8015b48:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = erase_activity;
 8015b4a:	79fb      	ldrb	r3, [r7, #7]
 8015b4c:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_ERASE_ACTIVITY,
 8015b4e:	f107 020c 	add.w	r2, r7, #12
 8015b52:	69fb      	ldr	r3, [r7, #28]
 8015b54:	2101      	movs	r1, #1
 8015b56:	f64f 4069 	movw	r0, #64617	; 0xfc69
 8015b5a:	f000 fad1 	bl	8016100 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015b5e:	69fb      	ldr	r3, [r7, #28]
 8015b60:	330b      	adds	r3, #11
 8015b62:	78db      	ldrb	r3, [r3, #3]
}
 8015b64:	4618      	mov	r0, r3
 8015b66:	3720      	adds	r7, #32
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}

08015b6c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b088      	sub	sp, #32
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015b74:	f107 030c 	add.w	r3, r7, #12
 8015b78:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8015b7a:	69fb      	ldr	r3, [r7, #28]
 8015b7c:	687a      	ldr	r2, [r7, #4]
 8015b7e:	2110      	movs	r1, #16
 8015b80:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8015b84:	f000 fabc 	bl	8016100 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015b88:	69fb      	ldr	r3, [r7, #28]
 8015b8a:	330b      	adds	r3, #11
 8015b8c:	78db      	ldrb	r3, [r3, #3]
}
 8015b8e:	4618      	mov	r0, r3
 8015b90:	3720      	adds	r7, #32
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}
	...

08015b98 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8015b98:	b480      	push	{r7}
 8015b9a:	b08b      	sub	sp, #44	; 0x2c
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8015ba8:	2300      	movs	r3, #0
 8015baa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8015bac:	2300      	movs	r3, #0
 8015bae:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8015bc0:	4b4a      	ldr	r3, [pc, #296]	; (8015cec <SHCI_GetWirelessFwInfo+0x154>)
 8015bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015bc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015bc8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8015bca:	693b      	ldr	r3, [r7, #16]
 8015bcc:	009b      	lsls	r3, r3, #2
 8015bce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015bd2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8015bda:	68bb      	ldr	r3, [r7, #8]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	4a44      	ldr	r2, [pc, #272]	; (8015cf0 <SHCI_GetWirelessFwInfo+0x158>)
 8015be0:	4293      	cmp	r3, r2
 8015be2:	d10f      	bne.n	8015c04 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8015be4:	68bb      	ldr	r3, [r7, #8]
 8015be6:	695b      	ldr	r3, [r3, #20]
 8015be8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	699b      	ldr	r3, [r3, #24]
 8015bee:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8015bf0:	68bb      	ldr	r3, [r7, #8]
 8015bf2:	69db      	ldr	r3, [r3, #28]
 8015bf4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8015bf6:	68bb      	ldr	r3, [r7, #8]
 8015bf8:	68db      	ldr	r3, [r3, #12]
 8015bfa:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8015bfc:	68bb      	ldr	r3, [r7, #8]
 8015bfe:	691b      	ldr	r3, [r3, #16]
 8015c00:	617b      	str	r3, [r7, #20]
 8015c02:	e01a      	b.n	8015c3a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8015c04:	693b      	ldr	r3, [r7, #16]
 8015c06:	009b      	lsls	r3, r3, #2
 8015c08:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015c0c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8015c10:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	691b      	ldr	r3, [r3, #16]
 8015c18:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	695b      	ldr	r3, [r3, #20]
 8015c20:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	699b      	ldr	r3, [r3, #24]
 8015c28:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	685b      	ldr	r3, [r3, #4]
 8015c30:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	689b      	ldr	r3, [r3, #8]
 8015c38:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c3c:	0e1b      	lsrs	r3, r3, #24
 8015c3e:	b2da      	uxtb	r2, r3
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c46:	0c1b      	lsrs	r3, r3, #16
 8015c48:	b2da      	uxtb	r2, r3
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c50:	0a1b      	lsrs	r3, r3, #8
 8015c52:	b2da      	uxtb	r2, r3
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8015c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c5a:	091b      	lsrs	r3, r3, #4
 8015c5c:	b2db      	uxtb	r3, r3
 8015c5e:	f003 030f 	and.w	r3, r3, #15
 8015c62:	b2da      	uxtb	r2, r3
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8015c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c6a:	b2db      	uxtb	r3, r3
 8015c6c:	f003 030f 	and.w	r3, r3, #15
 8015c70:	b2da      	uxtb	r2, r3
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8015c76:	6a3b      	ldr	r3, [r7, #32]
 8015c78:	0e1b      	lsrs	r3, r3, #24
 8015c7a:	b2da      	uxtb	r2, r3
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015c80:	6a3b      	ldr	r3, [r7, #32]
 8015c82:	0c1b      	lsrs	r3, r3, #16
 8015c84:	b2da      	uxtb	r2, r3
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8015c8a:	6a3b      	ldr	r3, [r7, #32]
 8015c8c:	0a1b      	lsrs	r3, r3, #8
 8015c8e:	b2da      	uxtb	r2, r3
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8015c94:	6a3b      	ldr	r3, [r7, #32]
 8015c96:	b2da      	uxtb	r2, r3
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8015c9c:	69fb      	ldr	r3, [r7, #28]
 8015c9e:	b2da      	uxtb	r2, r3
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015ca4:	69bb      	ldr	r3, [r7, #24]
 8015ca6:	0e1b      	lsrs	r3, r3, #24
 8015ca8:	b2da      	uxtb	r2, r3
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015cae:	69bb      	ldr	r3, [r7, #24]
 8015cb0:	0c1b      	lsrs	r3, r3, #16
 8015cb2:	b2da      	uxtb	r2, r3
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015cb8:	69bb      	ldr	r3, [r7, #24]
 8015cba:	0a1b      	lsrs	r3, r3, #8
 8015cbc:	b2da      	uxtb	r2, r3
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8015cc2:	697b      	ldr	r3, [r7, #20]
 8015cc4:	0e1b      	lsrs	r3, r3, #24
 8015cc6:	b2da      	uxtb	r2, r3
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015ccc:	697b      	ldr	r3, [r7, #20]
 8015cce:	0c1b      	lsrs	r3, r3, #16
 8015cd0:	b2da      	uxtb	r2, r3
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8015cd6:	697b      	ldr	r3, [r7, #20]
 8015cd8:	b2da      	uxtb	r2, r3
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8015cde:	2300      	movs	r3, #0
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	372c      	adds	r7, #44	; 0x2c
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cea:	4770      	bx	lr
 8015cec:	58004000 	.word	0x58004000
 8015cf0:	a94656b9 	.word	0xa94656b9

08015cf4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b082      	sub	sp, #8
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	685b      	ldr	r3, [r3, #4]
 8015d02:	4a08      	ldr	r2, [pc, #32]	; (8015d24 <hci_init+0x30>)
 8015d04:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8015d06:	4a08      	ldr	r2, [pc, #32]	; (8015d28 <hci_init+0x34>)
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8015d0c:	4806      	ldr	r0, [pc, #24]	; (8015d28 <hci_init+0x34>)
 8015d0e:	f000 f979 	bl	8016004 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8015d12:	683b      	ldr	r3, [r7, #0]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	4618      	mov	r0, r3
 8015d18:	f000 f8da 	bl	8015ed0 <TlInit>

  return;
 8015d1c:	bf00      	nop
}
 8015d1e:	3708      	adds	r7, #8
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}
 8015d24:	20006e98 	.word	0x20006e98
 8015d28:	20006e70 	.word	0x20006e70

08015d2c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b084      	sub	sp, #16
 8015d30:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8015d32:	4822      	ldr	r0, [pc, #136]	; (8015dbc <hci_user_evt_proc+0x90>)
 8015d34:	f001 f898 	bl	8016e68 <LST_is_empty>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d12b      	bne.n	8015d96 <hci_user_evt_proc+0x6a>
 8015d3e:	4b20      	ldr	r3, [pc, #128]	; (8015dc0 <hci_user_evt_proc+0x94>)
 8015d40:	781b      	ldrb	r3, [r3, #0]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d027      	beq.n	8015d96 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8015d46:	f107 030c 	add.w	r3, r7, #12
 8015d4a:	4619      	mov	r1, r3
 8015d4c:	481b      	ldr	r0, [pc, #108]	; (8015dbc <hci_user_evt_proc+0x90>)
 8015d4e:	f001 f91a 	bl	8016f86 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8015d52:	4b1c      	ldr	r3, [pc, #112]	; (8015dc4 <hci_user_evt_proc+0x98>)
 8015d54:	69db      	ldr	r3, [r3, #28]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d00c      	beq.n	8015d74 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8015d5e:	2301      	movs	r3, #1
 8015d60:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8015d62:	4b18      	ldr	r3, [pc, #96]	; (8015dc4 <hci_user_evt_proc+0x98>)
 8015d64:	69db      	ldr	r3, [r3, #28]
 8015d66:	1d3a      	adds	r2, r7, #4
 8015d68:	4610      	mov	r0, r2
 8015d6a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8015d6c:	793a      	ldrb	r2, [r7, #4]
 8015d6e:	4b14      	ldr	r3, [pc, #80]	; (8015dc0 <hci_user_evt_proc+0x94>)
 8015d70:	701a      	strb	r2, [r3, #0]
 8015d72:	e002      	b.n	8015d7a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8015d74:	4b12      	ldr	r3, [pc, #72]	; (8015dc0 <hci_user_evt_proc+0x94>)
 8015d76:	2201      	movs	r2, #1
 8015d78:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8015d7a:	4b11      	ldr	r3, [pc, #68]	; (8015dc0 <hci_user_evt_proc+0x94>)
 8015d7c:	781b      	ldrb	r3, [r3, #0]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d004      	beq.n	8015d8c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	4618      	mov	r0, r3
 8015d86:	f000 fc0d 	bl	80165a4 <TL_MM_EvtDone>
 8015d8a:	e004      	b.n	8015d96 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	4619      	mov	r1, r3
 8015d90:	480a      	ldr	r0, [pc, #40]	; (8015dbc <hci_user_evt_proc+0x90>)
 8015d92:	f001 f88b 	bl	8016eac <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8015d96:	4809      	ldr	r0, [pc, #36]	; (8015dbc <hci_user_evt_proc+0x90>)
 8015d98:	f001 f866 	bl	8016e68 <LST_is_empty>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d107      	bne.n	8015db2 <hci_user_evt_proc+0x86>
 8015da2:	4b07      	ldr	r3, [pc, #28]	; (8015dc0 <hci_user_evt_proc+0x94>)
 8015da4:	781b      	ldrb	r3, [r3, #0]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d003      	beq.n	8015db2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8015daa:	4804      	ldr	r0, [pc, #16]	; (8015dbc <hci_user_evt_proc+0x90>)
 8015dac:	f7ed fd20 	bl	80037f0 <hci_notify_asynch_evt>
  }


  return;
 8015db0:	bf00      	nop
 8015db2:	bf00      	nop
}
 8015db4:	3710      	adds	r7, #16
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}
 8015dba:	bf00      	nop
 8015dbc:	200002d8 	.word	0x200002d8
 8015dc0:	200002e4 	.word	0x200002e4
 8015dc4:	20006e70 	.word	0x20006e70

08015dc8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b088      	sub	sp, #32
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	460b      	mov	r3, r1
 8015dd2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8015dd4:	2000      	movs	r0, #0
 8015dd6:	f000 f8d1 	bl	8015f7c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	885b      	ldrh	r3, [r3, #2]
 8015de2:	b21b      	sxth	r3, r3
 8015de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015de8:	b21a      	sxth	r2, r3
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	881b      	ldrh	r3, [r3, #0]
 8015dee:	029b      	lsls	r3, r3, #10
 8015df0:	b21b      	sxth	r3, r3
 8015df2:	4313      	orrs	r3, r2
 8015df4:	b21b      	sxth	r3, r3
 8015df6:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8015df8:	4b33      	ldr	r3, [pc, #204]	; (8015ec8 <hci_send_req+0x100>)
 8015dfa:	2201      	movs	r2, #1
 8015dfc:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	68db      	ldr	r3, [r3, #12]
 8015e02:	b2d9      	uxtb	r1, r3
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	689a      	ldr	r2, [r3, #8]
 8015e08:	8bbb      	ldrh	r3, [r7, #28]
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f000 f890 	bl	8015f30 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8015e10:	e04e      	b.n	8015eb0 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8015e12:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8015e16:	f7ed fd03 	bl	8003820 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8015e1a:	e043      	b.n	8015ea4 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8015e1c:	f107 030c 	add.w	r3, r7, #12
 8015e20:	4619      	mov	r1, r3
 8015e22:	482a      	ldr	r0, [pc, #168]	; (8015ecc <hci_send_req+0x104>)
 8015e24:	f001 f8af 	bl	8016f86 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	7a5b      	ldrb	r3, [r3, #9]
 8015e2c:	2b0f      	cmp	r3, #15
 8015e2e:	d114      	bne.n	8015e5a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	330b      	adds	r3, #11
 8015e34:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8015e36:	693b      	ldr	r3, [r7, #16]
 8015e38:	885b      	ldrh	r3, [r3, #2]
 8015e3a:	b29b      	uxth	r3, r3
 8015e3c:	8bba      	ldrh	r2, [r7, #28]
 8015e3e:	429a      	cmp	r2, r3
 8015e40:	d104      	bne.n	8015e4c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	691b      	ldr	r3, [r3, #16]
 8015e46:	693a      	ldr	r2, [r7, #16]
 8015e48:	7812      	ldrb	r2, [r2, #0]
 8015e4a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8015e4c:	693b      	ldr	r3, [r7, #16]
 8015e4e:	785b      	ldrb	r3, [r3, #1]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d027      	beq.n	8015ea4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8015e54:	2301      	movs	r3, #1
 8015e56:	77fb      	strb	r3, [r7, #31]
 8015e58:	e024      	b.n	8015ea4 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	330b      	adds	r3, #11
 8015e5e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8015e60:	69bb      	ldr	r3, [r7, #24]
 8015e62:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015e66:	b29b      	uxth	r3, r3
 8015e68:	8bba      	ldrh	r2, [r7, #28]
 8015e6a:	429a      	cmp	r2, r3
 8015e6c:	d114      	bne.n	8015e98 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	7a9b      	ldrb	r3, [r3, #10]
 8015e72:	3b03      	subs	r3, #3
 8015e74:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	695a      	ldr	r2, [r3, #20]
 8015e7a:	7dfb      	ldrb	r3, [r7, #23]
 8015e7c:	429a      	cmp	r2, r3
 8015e7e:	bfa8      	it	ge
 8015e80:	461a      	movge	r2, r3
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	6918      	ldr	r0, [r3, #16]
 8015e8a:	69bb      	ldr	r3, [r7, #24]
 8015e8c:	1cd9      	adds	r1, r3, #3
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	695b      	ldr	r3, [r3, #20]
 8015e92:	461a      	mov	r2, r3
 8015e94:	f012 fe6c 	bl	8028b70 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8015e98:	69bb      	ldr	r3, [r7, #24]
 8015e9a:	781b      	ldrb	r3, [r3, #0]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d001      	beq.n	8015ea4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8015ea0:	2301      	movs	r3, #1
 8015ea2:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8015ea4:	4809      	ldr	r0, [pc, #36]	; (8015ecc <hci_send_req+0x104>)
 8015ea6:	f000 ffdf 	bl	8016e68 <LST_is_empty>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d0b5      	beq.n	8015e1c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8015eb0:	7ffb      	ldrb	r3, [r7, #31]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d0ad      	beq.n	8015e12 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8015eb6:	2001      	movs	r0, #1
 8015eb8:	f000 f860 	bl	8015f7c <NotifyCmdStatus>

  return 0;
 8015ebc:	2300      	movs	r3, #0
}
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	3720      	adds	r7, #32
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd80      	pop	{r7, pc}
 8015ec6:	bf00      	nop
 8015ec8:	20006e9c 	.word	0x20006e9c
 8015ecc:	20006e90 	.word	0x20006e90

08015ed0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b086      	sub	sp, #24
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8015ed8:	480f      	ldr	r0, [pc, #60]	; (8015f18 <TlInit+0x48>)
 8015eda:	f000 ffb5 	bl	8016e48 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8015ede:	4a0f      	ldr	r2, [pc, #60]	; (8015f1c <TlInit+0x4c>)
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8015ee4:	480e      	ldr	r0, [pc, #56]	; (8015f20 <TlInit+0x50>)
 8015ee6:	f000 ffaf 	bl	8016e48 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8015eea:	4b0e      	ldr	r3, [pc, #56]	; (8015f24 <TlInit+0x54>)
 8015eec:	2201      	movs	r2, #1
 8015eee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8015ef0:	4b0d      	ldr	r3, [pc, #52]	; (8015f28 <TlInit+0x58>)
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d00a      	beq.n	8015f0e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8015efc:	4b0b      	ldr	r3, [pc, #44]	; (8015f2c <TlInit+0x5c>)
 8015efe:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8015f00:	4b09      	ldr	r3, [pc, #36]	; (8015f28 <TlInit+0x58>)
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	f107 0208 	add.w	r2, r7, #8
 8015f08:	4610      	mov	r0, r2
 8015f0a:	4798      	blx	r3
  }

  return;
 8015f0c:	bf00      	nop
 8015f0e:	bf00      	nop
}
 8015f10:	3718      	adds	r7, #24
 8015f12:	46bd      	mov	sp, r7
 8015f14:	bd80      	pop	{r7, pc}
 8015f16:	bf00      	nop
 8015f18:	20006e90 	.word	0x20006e90
 8015f1c:	200002e0 	.word	0x200002e0
 8015f20:	200002d8 	.word	0x200002d8
 8015f24:	200002e4 	.word	0x200002e4
 8015f28:	20006e70 	.word	0x20006e70
 8015f2c:	08015fbd 	.word	0x08015fbd

08015f30 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b082      	sub	sp, #8
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	4603      	mov	r3, r0
 8015f38:	603a      	str	r2, [r7, #0]
 8015f3a:	80fb      	strh	r3, [r7, #6]
 8015f3c:	460b      	mov	r3, r1
 8015f3e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8015f40:	4b0c      	ldr	r3, [pc, #48]	; (8015f74 <SendCmd+0x44>)
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	88fa      	ldrh	r2, [r7, #6]
 8015f46:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8015f4a:	4b0a      	ldr	r3, [pc, #40]	; (8015f74 <SendCmd+0x44>)
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	797a      	ldrb	r2, [r7, #5]
 8015f50:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8015f52:	4b08      	ldr	r3, [pc, #32]	; (8015f74 <SendCmd+0x44>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	330c      	adds	r3, #12
 8015f58:	797a      	ldrb	r2, [r7, #5]
 8015f5a:	6839      	ldr	r1, [r7, #0]
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f012 fe07 	bl	8028b70 <memcpy>

  hciContext.io.Send(0,0);
 8015f62:	4b05      	ldr	r3, [pc, #20]	; (8015f78 <SendCmd+0x48>)
 8015f64:	691b      	ldr	r3, [r3, #16]
 8015f66:	2100      	movs	r1, #0
 8015f68:	2000      	movs	r0, #0
 8015f6a:	4798      	blx	r3

  return;
 8015f6c:	bf00      	nop
}
 8015f6e:	3708      	adds	r7, #8
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}
 8015f74:	200002e0 	.word	0x200002e0
 8015f78:	20006e70 	.word	0x20006e70

08015f7c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b082      	sub	sp, #8
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	4603      	mov	r3, r0
 8015f84:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8015f86:	79fb      	ldrb	r3, [r7, #7]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d108      	bne.n	8015f9e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8015f8c:	4b0a      	ldr	r3, [pc, #40]	; (8015fb8 <NotifyCmdStatus+0x3c>)
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d00d      	beq.n	8015fb0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8015f94:	4b08      	ldr	r3, [pc, #32]	; (8015fb8 <NotifyCmdStatus+0x3c>)
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	2000      	movs	r0, #0
 8015f9a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8015f9c:	e008      	b.n	8015fb0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8015f9e:	4b06      	ldr	r3, [pc, #24]	; (8015fb8 <NotifyCmdStatus+0x3c>)
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d004      	beq.n	8015fb0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8015fa6:	4b04      	ldr	r3, [pc, #16]	; (8015fb8 <NotifyCmdStatus+0x3c>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	2001      	movs	r0, #1
 8015fac:	4798      	blx	r3
  return;
 8015fae:	bf00      	nop
 8015fb0:	bf00      	nop
}
 8015fb2:	3708      	adds	r7, #8
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	bd80      	pop	{r7, pc}
 8015fb8:	20006e98 	.word	0x20006e98

08015fbc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	7a5b      	ldrb	r3, [r3, #9]
 8015fc8:	2b0f      	cmp	r3, #15
 8015fca:	d003      	beq.n	8015fd4 <TlEvtReceived+0x18>
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	7a5b      	ldrb	r3, [r3, #9]
 8015fd0:	2b0e      	cmp	r3, #14
 8015fd2:	d107      	bne.n	8015fe4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8015fd4:	6879      	ldr	r1, [r7, #4]
 8015fd6:	4809      	ldr	r0, [pc, #36]	; (8015ffc <TlEvtReceived+0x40>)
 8015fd8:	f000 ff8e 	bl	8016ef8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8015fdc:	2000      	movs	r0, #0
 8015fde:	f7ed fc14 	bl	800380a <hci_cmd_resp_release>
 8015fe2:	e006      	b.n	8015ff2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8015fe4:	6879      	ldr	r1, [r7, #4]
 8015fe6:	4806      	ldr	r0, [pc, #24]	; (8016000 <TlEvtReceived+0x44>)
 8015fe8:	f000 ff86 	bl	8016ef8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8015fec:	4804      	ldr	r0, [pc, #16]	; (8016000 <TlEvtReceived+0x44>)
 8015fee:	f7ed fbff 	bl	80037f0 <hci_notify_asynch_evt>
  }

  return;
 8015ff2:	bf00      	nop
}
 8015ff4:	3708      	adds	r7, #8
 8015ff6:	46bd      	mov	sp, r7
 8015ff8:	bd80      	pop	{r7, pc}
 8015ffa:	bf00      	nop
 8015ffc:	20006e90 	.word	0x20006e90
 8016000:	200002d8 	.word	0x200002d8

08016004 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8016004:	b480      	push	{r7}
 8016006:	b083      	sub	sp, #12
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	4a05      	ldr	r2, [pc, #20]	; (8016024 <hci_register_io_bus+0x20>)
 8016010:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	4a04      	ldr	r2, [pc, #16]	; (8016028 <hci_register_io_bus+0x24>)
 8016016:	611a      	str	r2, [r3, #16]

  return;
 8016018:	bf00      	nop
}
 801601a:	370c      	adds	r7, #12
 801601c:	46bd      	mov	sp, r7
 801601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016022:	4770      	bx	lr
 8016024:	0801631d 	.word	0x0801631d
 8016028:	08016385 	.word	0x08016385

0801602c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b082      	sub	sp, #8
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
 8016034:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8016036:	683b      	ldr	r3, [r7, #0]
 8016038:	685b      	ldr	r3, [r3, #4]
 801603a:	4a08      	ldr	r2, [pc, #32]	; (801605c <shci_init+0x30>)
 801603c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 801603e:	4a08      	ldr	r2, [pc, #32]	; (8016060 <shci_init+0x34>)
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8016044:	4806      	ldr	r0, [pc, #24]	; (8016060 <shci_init+0x34>)
 8016046:	f000 f915 	bl	8016274 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	4618      	mov	r0, r3
 8016050:	f000 f898 	bl	8016184 <TlInit>

  return;
 8016054:	bf00      	nop
}
 8016056:	3708      	adds	r7, #8
 8016058:	46bd      	mov	sp, r7
 801605a:	bd80      	pop	{r7, pc}
 801605c:	20006ec0 	.word	0x20006ec0
 8016060:	20006ea0 	.word	0x20006ea0

08016064 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b084      	sub	sp, #16
 8016068:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801606a:	4822      	ldr	r0, [pc, #136]	; (80160f4 <shci_user_evt_proc+0x90>)
 801606c:	f000 fefc 	bl	8016e68 <LST_is_empty>
 8016070:	4603      	mov	r3, r0
 8016072:	2b00      	cmp	r3, #0
 8016074:	d12b      	bne.n	80160ce <shci_user_evt_proc+0x6a>
 8016076:	4b20      	ldr	r3, [pc, #128]	; (80160f8 <shci_user_evt_proc+0x94>)
 8016078:	781b      	ldrb	r3, [r3, #0]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d027      	beq.n	80160ce <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801607e:	f107 030c 	add.w	r3, r7, #12
 8016082:	4619      	mov	r1, r3
 8016084:	481b      	ldr	r0, [pc, #108]	; (80160f4 <shci_user_evt_proc+0x90>)
 8016086:	f000 ff7e 	bl	8016f86 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 801608a:	4b1c      	ldr	r3, [pc, #112]	; (80160fc <shci_user_evt_proc+0x98>)
 801608c:	69db      	ldr	r3, [r3, #28]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d00c      	beq.n	80160ac <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8016096:	2301      	movs	r3, #1
 8016098:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801609a:	4b18      	ldr	r3, [pc, #96]	; (80160fc <shci_user_evt_proc+0x98>)
 801609c:	69db      	ldr	r3, [r3, #28]
 801609e:	1d3a      	adds	r2, r7, #4
 80160a0:	4610      	mov	r0, r2
 80160a2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80160a4:	793a      	ldrb	r2, [r7, #4]
 80160a6:	4b14      	ldr	r3, [pc, #80]	; (80160f8 <shci_user_evt_proc+0x94>)
 80160a8:	701a      	strb	r2, [r3, #0]
 80160aa:	e002      	b.n	80160b2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80160ac:	4b12      	ldr	r3, [pc, #72]	; (80160f8 <shci_user_evt_proc+0x94>)
 80160ae:	2201      	movs	r2, #1
 80160b0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80160b2:	4b11      	ldr	r3, [pc, #68]	; (80160f8 <shci_user_evt_proc+0x94>)
 80160b4:	781b      	ldrb	r3, [r3, #0]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d004      	beq.n	80160c4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	4618      	mov	r0, r3
 80160be:	f000 fa71 	bl	80165a4 <TL_MM_EvtDone>
 80160c2:	e004      	b.n	80160ce <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	4619      	mov	r1, r3
 80160c8:	480a      	ldr	r0, [pc, #40]	; (80160f4 <shci_user_evt_proc+0x90>)
 80160ca:	f000 feef 	bl	8016eac <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80160ce:	4809      	ldr	r0, [pc, #36]	; (80160f4 <shci_user_evt_proc+0x90>)
 80160d0:	f000 feca 	bl	8016e68 <LST_is_empty>
 80160d4:	4603      	mov	r3, r0
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d107      	bne.n	80160ea <shci_user_evt_proc+0x86>
 80160da:	4b07      	ldr	r3, [pc, #28]	; (80160f8 <shci_user_evt_proc+0x94>)
 80160dc:	781b      	ldrb	r3, [r3, #0]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d003      	beq.n	80160ea <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80160e2:	4804      	ldr	r0, [pc, #16]	; (80160f4 <shci_user_evt_proc+0x90>)
 80160e4:	f7eb fc4e 	bl	8001984 <shci_notify_asynch_evt>
  }


  return;
 80160e8:	bf00      	nop
 80160ea:	bf00      	nop
}
 80160ec:	3710      	adds	r7, #16
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}
 80160f2:	bf00      	nop
 80160f4:	200002e8 	.word	0x200002e8
 80160f8:	200002f8 	.word	0x200002f8
 80160fc:	20006ea0 	.word	0x20006ea0

08016100 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b084      	sub	sp, #16
 8016104:	af00      	add	r7, sp, #0
 8016106:	60ba      	str	r2, [r7, #8]
 8016108:	607b      	str	r3, [r7, #4]
 801610a:	4603      	mov	r3, r0
 801610c:	81fb      	strh	r3, [r7, #14]
 801610e:	460b      	mov	r3, r1
 8016110:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8016112:	2000      	movs	r0, #0
 8016114:	f000 f868 	bl	80161e8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8016118:	4b17      	ldr	r3, [pc, #92]	; (8016178 <shci_send+0x78>)
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	89fa      	ldrh	r2, [r7, #14]
 801611e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8016122:	4b15      	ldr	r3, [pc, #84]	; (8016178 <shci_send+0x78>)
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	7b7a      	ldrb	r2, [r7, #13]
 8016128:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801612a:	4b13      	ldr	r3, [pc, #76]	; (8016178 <shci_send+0x78>)
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	330c      	adds	r3, #12
 8016130:	7b7a      	ldrb	r2, [r7, #13]
 8016132:	68b9      	ldr	r1, [r7, #8]
 8016134:	4618      	mov	r0, r3
 8016136:	f012 fd1b 	bl	8028b70 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 801613a:	4b10      	ldr	r3, [pc, #64]	; (801617c <shci_send+0x7c>)
 801613c:	2201      	movs	r2, #1
 801613e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8016140:	4b0f      	ldr	r3, [pc, #60]	; (8016180 <shci_send+0x80>)
 8016142:	691b      	ldr	r3, [r3, #16]
 8016144:	2100      	movs	r1, #0
 8016146:	2000      	movs	r0, #0
 8016148:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 801614a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 801614e:	f7eb fc31 	bl	80019b4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	f103 0008 	add.w	r0, r3, #8
 8016158:	4b07      	ldr	r3, [pc, #28]	; (8016178 <shci_send+0x78>)
 801615a:	6819      	ldr	r1, [r3, #0]
 801615c:	4b06      	ldr	r3, [pc, #24]	; (8016178 <shci_send+0x78>)
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	789b      	ldrb	r3, [r3, #2]
 8016162:	3303      	adds	r3, #3
 8016164:	461a      	mov	r2, r3
 8016166:	f012 fd03 	bl	8028b70 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801616a:	2001      	movs	r0, #1
 801616c:	f000 f83c 	bl	80161e8 <Cmd_SetStatus>

  return;
 8016170:	bf00      	nop
}
 8016172:	3710      	adds	r7, #16
 8016174:	46bd      	mov	sp, r7
 8016176:	bd80      	pop	{r7, pc}
 8016178:	200002f4 	.word	0x200002f4
 801617c:	20006ec4 	.word	0x20006ec4
 8016180:	20006ea0 	.word	0x20006ea0

08016184 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b086      	sub	sp, #24
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 801618c:	4a10      	ldr	r2, [pc, #64]	; (80161d0 <TlInit+0x4c>)
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8016192:	4810      	ldr	r0, [pc, #64]	; (80161d4 <TlInit+0x50>)
 8016194:	f000 fe58 	bl	8016e48 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8016198:	2001      	movs	r0, #1
 801619a:	f000 f825 	bl	80161e8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801619e:	4b0e      	ldr	r3, [pc, #56]	; (80161d8 <TlInit+0x54>)
 80161a0:	2201      	movs	r2, #1
 80161a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80161a4:	4b0d      	ldr	r3, [pc, #52]	; (80161dc <TlInit+0x58>)
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d00c      	beq.n	80161c6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80161b0:	4b0b      	ldr	r3, [pc, #44]	; (80161e0 <TlInit+0x5c>)
 80161b2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80161b4:	4b0b      	ldr	r3, [pc, #44]	; (80161e4 <TlInit+0x60>)
 80161b6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80161b8:	4b08      	ldr	r3, [pc, #32]	; (80161dc <TlInit+0x58>)
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	f107 020c 	add.w	r2, r7, #12
 80161c0:	4610      	mov	r0, r2
 80161c2:	4798      	blx	r3
  }

  return;
 80161c4:	bf00      	nop
 80161c6:	bf00      	nop
}
 80161c8:	3718      	adds	r7, #24
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd80      	pop	{r7, pc}
 80161ce:	bf00      	nop
 80161d0:	200002f4 	.word	0x200002f4
 80161d4:	200002e8 	.word	0x200002e8
 80161d8:	200002f8 	.word	0x200002f8
 80161dc:	20006ea0 	.word	0x20006ea0
 80161e0:	08016239 	.word	0x08016239
 80161e4:	08016251 	.word	0x08016251

080161e8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b082      	sub	sp, #8
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	4603      	mov	r3, r0
 80161f0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80161f2:	79fb      	ldrb	r3, [r7, #7]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d10b      	bne.n	8016210 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80161f8:	4b0d      	ldr	r3, [pc, #52]	; (8016230 <Cmd_SetStatus+0x48>)
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d003      	beq.n	8016208 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8016200:	4b0b      	ldr	r3, [pc, #44]	; (8016230 <Cmd_SetStatus+0x48>)
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	2000      	movs	r0, #0
 8016206:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8016208:	4b0a      	ldr	r3, [pc, #40]	; (8016234 <Cmd_SetStatus+0x4c>)
 801620a:	2200      	movs	r2, #0
 801620c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 801620e:	e00b      	b.n	8016228 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8016210:	4b08      	ldr	r3, [pc, #32]	; (8016234 <Cmd_SetStatus+0x4c>)
 8016212:	2201      	movs	r2, #1
 8016214:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8016216:	4b06      	ldr	r3, [pc, #24]	; (8016230 <Cmd_SetStatus+0x48>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d004      	beq.n	8016228 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 801621e:	4b04      	ldr	r3, [pc, #16]	; (8016230 <Cmd_SetStatus+0x48>)
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	2001      	movs	r0, #1
 8016224:	4798      	blx	r3
  return;
 8016226:	bf00      	nop
 8016228:	bf00      	nop
}
 801622a:	3708      	adds	r7, #8
 801622c:	46bd      	mov	sp, r7
 801622e:	bd80      	pop	{r7, pc}
 8016230:	20006ec0 	.word	0x20006ec0
 8016234:	200002f0 	.word	0x200002f0

08016238 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b082      	sub	sp, #8
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8016240:	2000      	movs	r0, #0
 8016242:	f7eb fbac 	bl	800199e <shci_cmd_resp_release>

  return;
 8016246:	bf00      	nop
}
 8016248:	3708      	adds	r7, #8
 801624a:	46bd      	mov	sp, r7
 801624c:	bd80      	pop	{r7, pc}
	...

08016250 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	b082      	sub	sp, #8
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8016258:	6879      	ldr	r1, [r7, #4]
 801625a:	4805      	ldr	r0, [pc, #20]	; (8016270 <TlUserEvtReceived+0x20>)
 801625c:	f000 fe4c 	bl	8016ef8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8016260:	4803      	ldr	r0, [pc, #12]	; (8016270 <TlUserEvtReceived+0x20>)
 8016262:	f7eb fb8f 	bl	8001984 <shci_notify_asynch_evt>

  return;
 8016266:	bf00      	nop
}
 8016268:	3708      	adds	r7, #8
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}
 801626e:	bf00      	nop
 8016270:	200002e8 	.word	0x200002e8

08016274 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8016274:	b480      	push	{r7}
 8016276:	b083      	sub	sp, #12
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	4a05      	ldr	r2, [pc, #20]	; (8016294 <shci_register_io_bus+0x20>)
 8016280:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	4a04      	ldr	r2, [pc, #16]	; (8016298 <shci_register_io_bus+0x24>)
 8016286:	611a      	str	r2, [r3, #16]

  return;
 8016288:	bf00      	nop
}
 801628a:	370c      	adds	r7, #12
 801628c:	46bd      	mov	sp, r7
 801628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016292:	4770      	bx	lr
 8016294:	08016431 	.word	0x08016431
 8016298:	08016485 	.word	0x08016485

0801629c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 801629c:	b580      	push	{r7, lr}
 801629e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80162a0:	f7f1 faee 	bl	8007880 <HW_IPCC_Enable>

  return;
 80162a4:	bf00      	nop
}
 80162a6:	bd80      	pop	{r7, pc}

080162a8 <TL_Init>:


void TL_Init( void )
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80162ac:	4b10      	ldr	r3, [pc, #64]	; (80162f0 <TL_Init+0x48>)
 80162ae:	4a11      	ldr	r2, [pc, #68]	; (80162f4 <TL_Init+0x4c>)
 80162b0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80162b2:	4b0f      	ldr	r3, [pc, #60]	; (80162f0 <TL_Init+0x48>)
 80162b4:	4a10      	ldr	r2, [pc, #64]	; (80162f8 <TL_Init+0x50>)
 80162b6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80162b8:	4b0d      	ldr	r3, [pc, #52]	; (80162f0 <TL_Init+0x48>)
 80162ba:	4a10      	ldr	r2, [pc, #64]	; (80162fc <TL_Init+0x54>)
 80162bc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80162be:	4b0c      	ldr	r3, [pc, #48]	; (80162f0 <TL_Init+0x48>)
 80162c0:	4a0f      	ldr	r2, [pc, #60]	; (8016300 <TL_Init+0x58>)
 80162c2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80162c4:	4b0a      	ldr	r3, [pc, #40]	; (80162f0 <TL_Init+0x48>)
 80162c6:	4a0f      	ldr	r2, [pc, #60]	; (8016304 <TL_Init+0x5c>)
 80162c8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80162ca:	4b09      	ldr	r3, [pc, #36]	; (80162f0 <TL_Init+0x48>)
 80162cc:	4a0e      	ldr	r2, [pc, #56]	; (8016308 <TL_Init+0x60>)
 80162ce:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80162d0:	4b07      	ldr	r3, [pc, #28]	; (80162f0 <TL_Init+0x48>)
 80162d2:	4a0e      	ldr	r2, [pc, #56]	; (801630c <TL_Init+0x64>)
 80162d4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80162d6:	4b06      	ldr	r3, [pc, #24]	; (80162f0 <TL_Init+0x48>)
 80162d8:	4a0d      	ldr	r2, [pc, #52]	; (8016310 <TL_Init+0x68>)
 80162da:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80162dc:	4b04      	ldr	r3, [pc, #16]	; (80162f0 <TL_Init+0x48>)
 80162de:	4a0d      	ldr	r2, [pc, #52]	; (8016314 <TL_Init+0x6c>)
 80162e0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80162e2:	4b03      	ldr	r3, [pc, #12]	; (80162f0 <TL_Init+0x48>)
 80162e4:	4a0c      	ldr	r2, [pc, #48]	; (8016318 <TL_Init+0x70>)
 80162e6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80162e8:	f7f1 fade 	bl	80078a8 <HW_IPCC_Init>

  return;
 80162ec:	bf00      	nop
}
 80162ee:	bd80      	pop	{r7, pc}
 80162f0:	20030000 	.word	0x20030000
 80162f4:	20030134 	.word	0x20030134
 80162f8:	20030154 	.word	0x20030154
 80162fc:	20030164 	.word	0x20030164
 8016300:	20030174 	.word	0x20030174
 8016304:	2003017c 	.word	0x2003017c
 8016308:	20030184 	.word	0x20030184
 801630c:	2003018c 	.word	0x2003018c
 8016310:	200301a8 	.word	0x200301a8
 8016314:	200301ac 	.word	0x200301ac
 8016318:	200301b8 	.word	0x200301b8

0801631c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b084      	sub	sp, #16
 8016320:	af00      	add	r7, sp, #0
 8016322:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8016328:	4811      	ldr	r0, [pc, #68]	; (8016370 <TL_BLE_Init+0x54>)
 801632a:	f000 fd8d 	bl	8016e48 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 801632e:	4b11      	ldr	r3, [pc, #68]	; (8016374 <TL_BLE_Init+0x58>)
 8016330:	685b      	ldr	r3, [r3, #4]
 8016332:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	689a      	ldr	r2, [r3, #8]
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	68da      	ldr	r2, [r3, #12]
 8016340:	68bb      	ldr	r3, [r7, #8]
 8016342:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8016344:	68bb      	ldr	r3, [r7, #8]
 8016346:	4a0c      	ldr	r2, [pc, #48]	; (8016378 <TL_BLE_Init+0x5c>)
 8016348:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 801634a:	68bb      	ldr	r3, [r7, #8]
 801634c:	4a08      	ldr	r2, [pc, #32]	; (8016370 <TL_BLE_Init+0x54>)
 801634e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8016350:	f7f1 fac0 	bl	80078d4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	4a08      	ldr	r2, [pc, #32]	; (801637c <TL_BLE_Init+0x60>)
 801635a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	685b      	ldr	r3, [r3, #4]
 8016360:	4a07      	ldr	r2, [pc, #28]	; (8016380 <TL_BLE_Init+0x64>)
 8016362:	6013      	str	r3, [r2, #0]

  return 0;
 8016364:	2300      	movs	r3, #0
}
 8016366:	4618      	mov	r0, r3
 8016368:	3710      	adds	r7, #16
 801636a:	46bd      	mov	sp, r7
 801636c:	bd80      	pop	{r7, pc}
 801636e:	bf00      	nop
 8016370:	200301d4 	.word	0x200301d4
 8016374:	20030000 	.word	0x20030000
 8016378:	20030a58 	.word	0x20030a58
 801637c:	20006ed0 	.word	0x20006ed0
 8016380:	20006ed4 	.word	0x20006ed4

08016384 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b082      	sub	sp, #8
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
 801638c:	460b      	mov	r3, r1
 801638e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8016390:	4b09      	ldr	r3, [pc, #36]	; (80163b8 <TL_BLE_SendCmd+0x34>)
 8016392:	685b      	ldr	r3, [r3, #4]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	2201      	movs	r2, #1
 8016398:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 801639a:	4b07      	ldr	r3, [pc, #28]	; (80163b8 <TL_BLE_SendCmd+0x34>)
 801639c:	685b      	ldr	r3, [r3, #4]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	4619      	mov	r1, r3
 80163a2:	2001      	movs	r0, #1
 80163a4:	f000 f96c 	bl	8016680 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80163a8:	f7f1 fa9e 	bl	80078e8 <HW_IPCC_BLE_SendCmd>

  return 0;
 80163ac:	2300      	movs	r3, #0
}
 80163ae:	4618      	mov	r0, r3
 80163b0:	3708      	adds	r7, #8
 80163b2:	46bd      	mov	sp, r7
 80163b4:	bd80      	pop	{r7, pc}
 80163b6:	bf00      	nop
 80163b8:	20030000 	.word	0x20030000

080163bc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80163bc:	b580      	push	{r7, lr}
 80163be:	b082      	sub	sp, #8
 80163c0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80163c2:	e01c      	b.n	80163fe <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80163c4:	1d3b      	adds	r3, r7, #4
 80163c6:	4619      	mov	r1, r3
 80163c8:	4812      	ldr	r0, [pc, #72]	; (8016414 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80163ca:	f000 fddc 	bl	8016f86 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	7a5b      	ldrb	r3, [r3, #9]
 80163d2:	2b0f      	cmp	r3, #15
 80163d4:	d003      	beq.n	80163de <HW_IPCC_BLE_RxEvtNot+0x22>
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	7a5b      	ldrb	r3, [r3, #9]
 80163da:	2b0e      	cmp	r3, #14
 80163dc:	d105      	bne.n	80163ea <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	4619      	mov	r1, r3
 80163e2:	2002      	movs	r0, #2
 80163e4:	f000 f94c 	bl	8016680 <OutputDbgTrace>
 80163e8:	e004      	b.n	80163f4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	4619      	mov	r1, r3
 80163ee:	2003      	movs	r0, #3
 80163f0:	f000 f946 	bl	8016680 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80163f4:	4b08      	ldr	r3, [pc, #32]	; (8016418 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	687a      	ldr	r2, [r7, #4]
 80163fa:	4610      	mov	r0, r2
 80163fc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80163fe:	4805      	ldr	r0, [pc, #20]	; (8016414 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016400:	f000 fd32 	bl	8016e68 <LST_is_empty>
 8016404:	4603      	mov	r3, r0
 8016406:	2b00      	cmp	r3, #0
 8016408:	d0dc      	beq.n	80163c4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 801640a:	bf00      	nop
}
 801640c:	3708      	adds	r7, #8
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}
 8016412:	bf00      	nop
 8016414:	200301d4 	.word	0x200301d4
 8016418:	20006ed0 	.word	0x20006ed0

0801641c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8016420:	4b02      	ldr	r3, [pc, #8]	; (801642c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	4798      	blx	r3

  return;
 8016426:	bf00      	nop
}
 8016428:	bd80      	pop	{r7, pc}
 801642a:	bf00      	nop
 801642c:	20006ed4 	.word	0x20006ed4

08016430 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b084      	sub	sp, #16
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 801643c:	480d      	ldr	r0, [pc, #52]	; (8016474 <TL_SYS_Init+0x44>)
 801643e:	f000 fd03 	bl	8016e48 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8016442:	4b0d      	ldr	r3, [pc, #52]	; (8016478 <TL_SYS_Init+0x48>)
 8016444:	68db      	ldr	r3, [r3, #12]
 8016446:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	689a      	ldr	r2, [r3, #8]
 801644c:	68bb      	ldr	r3, [r7, #8]
 801644e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8016450:	68bb      	ldr	r3, [r7, #8]
 8016452:	4a08      	ldr	r2, [pc, #32]	; (8016474 <TL_SYS_Init+0x44>)
 8016454:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8016456:	f7f1 fa69 	bl	800792c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	4a07      	ldr	r2, [pc, #28]	; (801647c <TL_SYS_Init+0x4c>)
 8016460:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	685b      	ldr	r3, [r3, #4]
 8016466:	4a06      	ldr	r2, [pc, #24]	; (8016480 <TL_SYS_Init+0x50>)
 8016468:	6013      	str	r3, [r2, #0]

  return 0;
 801646a:	2300      	movs	r3, #0
}
 801646c:	4618      	mov	r0, r3
 801646e:	3710      	adds	r7, #16
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}
 8016474:	200301dc 	.word	0x200301dc
 8016478:	20030000 	.word	0x20030000
 801647c:	20006ed8 	.word	0x20006ed8
 8016480:	20006edc 	.word	0x20006edc

08016484 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b082      	sub	sp, #8
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
 801648c:	460b      	mov	r3, r1
 801648e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8016490:	4b09      	ldr	r3, [pc, #36]	; (80164b8 <TL_SYS_SendCmd+0x34>)
 8016492:	68db      	ldr	r3, [r3, #12]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	2210      	movs	r2, #16
 8016498:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 801649a:	4b07      	ldr	r3, [pc, #28]	; (80164b8 <TL_SYS_SendCmd+0x34>)
 801649c:	68db      	ldr	r3, [r3, #12]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	4619      	mov	r1, r3
 80164a2:	2004      	movs	r0, #4
 80164a4:	f000 f8ec 	bl	8016680 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80164a8:	f7f1 fa4a 	bl	8007940 <HW_IPCC_SYS_SendCmd>

  return 0;
 80164ac:	2300      	movs	r3, #0
}
 80164ae:	4618      	mov	r0, r3
 80164b0:	3708      	adds	r7, #8
 80164b2:	46bd      	mov	sp, r7
 80164b4:	bd80      	pop	{r7, pc}
 80164b6:	bf00      	nop
 80164b8:	20030000 	.word	0x20030000

080164bc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80164c0:	4b07      	ldr	r3, [pc, #28]	; (80164e0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80164c2:	68db      	ldr	r3, [r3, #12]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	4619      	mov	r1, r3
 80164c8:	2005      	movs	r0, #5
 80164ca:	f000 f8d9 	bl	8016680 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80164ce:	4b05      	ldr	r3, [pc, #20]	; (80164e4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	4a03      	ldr	r2, [pc, #12]	; (80164e0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80164d4:	68d2      	ldr	r2, [r2, #12]
 80164d6:	6812      	ldr	r2, [r2, #0]
 80164d8:	4610      	mov	r0, r2
 80164da:	4798      	blx	r3

  return;
 80164dc:	bf00      	nop
}
 80164de:	bd80      	pop	{r7, pc}
 80164e0:	20030000 	.word	0x20030000
 80164e4:	20006ed8 	.word	0x20006ed8

080164e8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b082      	sub	sp, #8
 80164ec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80164ee:	e00e      	b.n	801650e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80164f0:	1d3b      	adds	r3, r7, #4
 80164f2:	4619      	mov	r1, r3
 80164f4:	480b      	ldr	r0, [pc, #44]	; (8016524 <HW_IPCC_SYS_EvtNot+0x3c>)
 80164f6:	f000 fd46 	bl	8016f86 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	4619      	mov	r1, r3
 80164fe:	2006      	movs	r0, #6
 8016500:	f000 f8be 	bl	8016680 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8016504:	4b08      	ldr	r3, [pc, #32]	; (8016528 <HW_IPCC_SYS_EvtNot+0x40>)
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	687a      	ldr	r2, [r7, #4]
 801650a:	4610      	mov	r0, r2
 801650c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801650e:	4805      	ldr	r0, [pc, #20]	; (8016524 <HW_IPCC_SYS_EvtNot+0x3c>)
 8016510:	f000 fcaa 	bl	8016e68 <LST_is_empty>
 8016514:	4603      	mov	r3, r0
 8016516:	2b00      	cmp	r3, #0
 8016518:	d0ea      	beq.n	80164f0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 801651a:	bf00      	nop
}
 801651c:	3708      	adds	r7, #8
 801651e:	46bd      	mov	sp, r7
 8016520:	bd80      	pop	{r7, pc}
 8016522:	bf00      	nop
 8016524:	200301dc 	.word	0x200301dc
 8016528:	20006edc 	.word	0x20006edc

0801652c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b082      	sub	sp, #8
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8016534:	4817      	ldr	r0, [pc, #92]	; (8016594 <TL_MM_Init+0x68>)
 8016536:	f000 fc87 	bl	8016e48 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801653a:	4817      	ldr	r0, [pc, #92]	; (8016598 <TL_MM_Init+0x6c>)
 801653c:	f000 fc84 	bl	8016e48 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8016540:	4b16      	ldr	r3, [pc, #88]	; (801659c <TL_MM_Init+0x70>)
 8016542:	691b      	ldr	r3, [r3, #16]
 8016544:	4a16      	ldr	r2, [pc, #88]	; (80165a0 <TL_MM_Init+0x74>)
 8016546:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8016548:	4b15      	ldr	r3, [pc, #84]	; (80165a0 <TL_MM_Init+0x74>)
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	687a      	ldr	r2, [r7, #4]
 801654e:	6892      	ldr	r2, [r2, #8]
 8016550:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8016552:	4b13      	ldr	r3, [pc, #76]	; (80165a0 <TL_MM_Init+0x74>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	687a      	ldr	r2, [r7, #4]
 8016558:	68d2      	ldr	r2, [r2, #12]
 801655a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 801655c:	4b10      	ldr	r3, [pc, #64]	; (80165a0 <TL_MM_Init+0x74>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	4a0c      	ldr	r2, [pc, #48]	; (8016594 <TL_MM_Init+0x68>)
 8016562:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8016564:	4b0e      	ldr	r3, [pc, #56]	; (80165a0 <TL_MM_Init+0x74>)
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	687a      	ldr	r2, [r7, #4]
 801656a:	6812      	ldr	r2, [r2, #0]
 801656c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801656e:	4b0c      	ldr	r3, [pc, #48]	; (80165a0 <TL_MM_Init+0x74>)
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	687a      	ldr	r2, [r7, #4]
 8016574:	6852      	ldr	r2, [r2, #4]
 8016576:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8016578:	4b09      	ldr	r3, [pc, #36]	; (80165a0 <TL_MM_Init+0x74>)
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	687a      	ldr	r2, [r7, #4]
 801657e:	6912      	ldr	r2, [r2, #16]
 8016580:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8016582:	4b07      	ldr	r3, [pc, #28]	; (80165a0 <TL_MM_Init+0x74>)
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	687a      	ldr	r2, [r7, #4]
 8016588:	6952      	ldr	r2, [r2, #20]
 801658a:	619a      	str	r2, [r3, #24]

  return;
 801658c:	bf00      	nop
}
 801658e:	3708      	adds	r7, #8
 8016590:	46bd      	mov	sp, r7
 8016592:	bd80      	pop	{r7, pc}
 8016594:	200301c4 	.word	0x200301c4
 8016598:	20006ec8 	.word	0x20006ec8
 801659c:	20030000 	.word	0x20030000
 80165a0:	20006ee0 	.word	0x20006ee0

080165a4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80165a4:	b580      	push	{r7, lr}
 80165a6:	b082      	sub	sp, #8
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80165ac:	6879      	ldr	r1, [r7, #4]
 80165ae:	4807      	ldr	r0, [pc, #28]	; (80165cc <TL_MM_EvtDone+0x28>)
 80165b0:	f000 fca2 	bl	8016ef8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80165b4:	6879      	ldr	r1, [r7, #4]
 80165b6:	2000      	movs	r0, #0
 80165b8:	f000 f862 	bl	8016680 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80165bc:	4804      	ldr	r0, [pc, #16]	; (80165d0 <TL_MM_EvtDone+0x2c>)
 80165be:	f7f1 f9e5 	bl	800798c <HW_IPCC_MM_SendFreeBuf>

  return;
 80165c2:	bf00      	nop
}
 80165c4:	3708      	adds	r7, #8
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}
 80165ca:	bf00      	nop
 80165cc:	20006ec8 	.word	0x20006ec8
 80165d0:	080165d5 	.word	0x080165d5

080165d4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b082      	sub	sp, #8
 80165d8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80165da:	e00c      	b.n	80165f6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80165dc:	1d3b      	adds	r3, r7, #4
 80165de:	4619      	mov	r1, r3
 80165e0:	480a      	ldr	r0, [pc, #40]	; (801660c <SendFreeBuf+0x38>)
 80165e2:	f000 fcd0 	bl	8016f86 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80165e6:	4b0a      	ldr	r3, [pc, #40]	; (8016610 <SendFreeBuf+0x3c>)
 80165e8:	691b      	ldr	r3, [r3, #16]
 80165ea:	691b      	ldr	r3, [r3, #16]
 80165ec:	687a      	ldr	r2, [r7, #4]
 80165ee:	4611      	mov	r1, r2
 80165f0:	4618      	mov	r0, r3
 80165f2:	f000 fc81 	bl	8016ef8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80165f6:	4805      	ldr	r0, [pc, #20]	; (801660c <SendFreeBuf+0x38>)
 80165f8:	f000 fc36 	bl	8016e68 <LST_is_empty>
 80165fc:	4603      	mov	r3, r0
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d0ec      	beq.n	80165dc <SendFreeBuf+0x8>
  }

  return;
 8016602:	bf00      	nop
}
 8016604:	3708      	adds	r7, #8
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}
 801660a:	bf00      	nop
 801660c:	20006ec8 	.word	0x20006ec8
 8016610:	20030000 	.word	0x20030000

08016614 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8016614:	b580      	push	{r7, lr}
 8016616:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8016618:	4805      	ldr	r0, [pc, #20]	; (8016630 <TL_TRACES_Init+0x1c>)
 801661a:	f000 fc15 	bl	8016e48 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 801661e:	4b05      	ldr	r3, [pc, #20]	; (8016634 <TL_TRACES_Init+0x20>)
 8016620:	695b      	ldr	r3, [r3, #20]
 8016622:	4a03      	ldr	r2, [pc, #12]	; (8016630 <TL_TRACES_Init+0x1c>)
 8016624:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8016626:	f7f1 f9e7 	bl	80079f8 <HW_IPCC_TRACES_Init>

  return;
 801662a:	bf00      	nop
}
 801662c:	bd80      	pop	{r7, pc}
 801662e:	bf00      	nop
 8016630:	200301cc 	.word	0x200301cc
 8016634:	20030000 	.word	0x20030000

08016638 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b082      	sub	sp, #8
 801663c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801663e:	e008      	b.n	8016652 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8016640:	1d3b      	adds	r3, r7, #4
 8016642:	4619      	mov	r1, r3
 8016644:	4808      	ldr	r0, [pc, #32]	; (8016668 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016646:	f000 fc9e 	bl	8016f86 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	4618      	mov	r0, r3
 801664e:	f000 f80d 	bl	801666c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016652:	4805      	ldr	r0, [pc, #20]	; (8016668 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016654:	f000 fc08 	bl	8016e68 <LST_is_empty>
 8016658:	4603      	mov	r3, r0
 801665a:	2b00      	cmp	r3, #0
 801665c:	d0f0      	beq.n	8016640 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 801665e:	bf00      	nop
}
 8016660:	3708      	adds	r7, #8
 8016662:	46bd      	mov	sp, r7
 8016664:	bd80      	pop	{r7, pc}
 8016666:	bf00      	nop
 8016668:	200301cc 	.word	0x200301cc

0801666c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 801666c:	b480      	push	{r7}
 801666e:	b083      	sub	sp, #12
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8016674:	bf00      	nop
 8016676:	370c      	adds	r7, #12
 8016678:	46bd      	mov	sp, r7
 801667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667e:	4770      	bx	lr

08016680 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8016680:	b480      	push	{r7}
 8016682:	b085      	sub	sp, #20
 8016684:	af00      	add	r7, sp, #0
 8016686:	4603      	mov	r3, r0
 8016688:	6039      	str	r1, [r7, #0]
 801668a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 801668c:	79fb      	ldrb	r3, [r7, #7]
 801668e:	2b06      	cmp	r3, #6
 8016690:	d845      	bhi.n	801671e <OutputDbgTrace+0x9e>
 8016692:	a201      	add	r2, pc, #4	; (adr r2, 8016698 <OutputDbgTrace+0x18>)
 8016694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016698:	080166b5 	.word	0x080166b5
 801669c:	080166d9 	.word	0x080166d9
 80166a0:	080166df 	.word	0x080166df
 80166a4:	080166f3 	.word	0x080166f3
 80166a8:	080166ff 	.word	0x080166ff
 80166ac:	08016705 	.word	0x08016705
 80166b0:	08016713 	.word	0x08016713
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80166b4:	683b      	ldr	r3, [r7, #0]
 80166b6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	7a5b      	ldrb	r3, [r3, #9]
 80166bc:	2bff      	cmp	r3, #255	; 0xff
 80166be:	d005      	beq.n	80166cc <OutputDbgTrace+0x4c>
 80166c0:	2bff      	cmp	r3, #255	; 0xff
 80166c2:	dc05      	bgt.n	80166d0 <OutputDbgTrace+0x50>
 80166c4:	2b0e      	cmp	r3, #14
 80166c6:	d005      	beq.n	80166d4 <OutputDbgTrace+0x54>
 80166c8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80166ca:	e001      	b.n	80166d0 <OutputDbgTrace+0x50>
          break;
 80166cc:	bf00      	nop
 80166ce:	e027      	b.n	8016720 <OutputDbgTrace+0xa0>
          break;
 80166d0:	bf00      	nop
 80166d2:	e025      	b.n	8016720 <OutputDbgTrace+0xa0>
          break;
 80166d4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80166d6:	e023      	b.n	8016720 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80166d8:	683b      	ldr	r3, [r7, #0]
 80166da:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80166dc:	e020      	b.n	8016720 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	7a5b      	ldrb	r3, [r3, #9]
 80166e6:	2b0e      	cmp	r3, #14
 80166e8:	d001      	beq.n	80166ee <OutputDbgTrace+0x6e>
 80166ea:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80166ec:	e000      	b.n	80166f0 <OutputDbgTrace+0x70>
          break;
 80166ee:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80166f0:	e016      	b.n	8016720 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80166f2:	683b      	ldr	r3, [r7, #0]
 80166f4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	7a5b      	ldrb	r3, [r3, #9]
 80166fa:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80166fc:	e010      	b.n	8016720 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016702:	e00d      	b.n	8016720 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016704:	683b      	ldr	r3, [r7, #0]
 8016706:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	7a5b      	ldrb	r3, [r3, #9]
 801670c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801670e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016710:	e006      	b.n	8016720 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016712:	683b      	ldr	r3, [r7, #0]
 8016714:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	7a5b      	ldrb	r3, [r3, #9]
 801671a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801671c:	e000      	b.n	8016720 <OutputDbgTrace+0xa0>

    default:
      break;
 801671e:	bf00      	nop
  }

  return;
 8016720:	bf00      	nop
}
 8016722:	3714      	adds	r7, #20
 8016724:	46bd      	mov	sp, r7
 8016726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672a:	4770      	bx	lr

0801672c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b086      	sub	sp, #24
 8016730:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016732:	f3ef 8310 	mrs	r3, PRIMASK
 8016736:	60fb      	str	r3, [r7, #12]
  return(result);
 8016738:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 801673a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801673c:	b672      	cpsid	i
}
 801673e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8016740:	1cbb      	adds	r3, r7, #2
 8016742:	4619      	mov	r1, r3
 8016744:	4812      	ldr	r0, [pc, #72]	; (8016790 <DbgTrace_TxCpltCallback+0x64>)
 8016746:	f000 fe96 	bl	8017476 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 801674a:	1cbb      	adds	r3, r7, #2
 801674c:	4619      	mov	r1, r3
 801674e:	4810      	ldr	r0, [pc, #64]	; (8016790 <DbgTrace_TxCpltCallback+0x64>)
 8016750:	f000 ff82 	bl	8017658 <CircularQueue_Sense>
 8016754:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8016756:	693b      	ldr	r3, [r7, #16]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d00c      	beq.n	8016776 <DbgTrace_TxCpltCallback+0x4a>
 801675c:	697b      	ldr	r3, [r7, #20]
 801675e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016760:	68bb      	ldr	r3, [r7, #8]
 8016762:	f383 8810 	msr	PRIMASK, r3
}
 8016766:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8016768:	887b      	ldrh	r3, [r7, #2]
 801676a:	4a0a      	ldr	r2, [pc, #40]	; (8016794 <DbgTrace_TxCpltCallback+0x68>)
 801676c:	4619      	mov	r1, r3
 801676e:	6938      	ldr	r0, [r7, #16]
 8016770:	f7ea fcee 	bl	8001150 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8016774:	e008      	b.n	8016788 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8016776:	4b08      	ldr	r3, [pc, #32]	; (8016798 <DbgTrace_TxCpltCallback+0x6c>)
 8016778:	2201      	movs	r2, #1
 801677a:	701a      	strb	r2, [r3, #0]
 801677c:	697b      	ldr	r3, [r7, #20]
 801677e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	f383 8810 	msr	PRIMASK, r3
}
 8016786:	bf00      	nop
}
 8016788:	bf00      	nop
 801678a:	3718      	adds	r7, #24
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}
 8016790:	20006ee4 	.word	0x20006ee4
 8016794:	0801672d 	.word	0x0801672d
 8016798:	200000c0 	.word	0x200000c0

0801679c <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b082      	sub	sp, #8
 80167a0:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 80167a2:	f7ea fcce 	bl	8001142 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80167a6:	2302      	movs	r3, #2
 80167a8:	9300      	str	r3, [sp, #0]
 80167aa:	2300      	movs	r3, #0
 80167ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80167b0:	4903      	ldr	r1, [pc, #12]	; (80167c0 <DbgTraceInit+0x24>)
 80167b2:	4804      	ldr	r0, [pc, #16]	; (80167c4 <DbgTraceInit+0x28>)
 80167b4:	f000 fc06 	bl	8016fc4 <CircularQueue_Init>
#endif 
#endif
  return;
 80167b8:	bf00      	nop
}
 80167ba:	46bd      	mov	sp, r7
 80167bc:	bd80      	pop	{r7, pc}
 80167be:	bf00      	nop
 80167c0:	20006f04 	.word	0x20006f04
 80167c4:	20006ee4 	.word	0x20006ee4

080167c8 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b084      	sub	sp, #16
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	60f8      	str	r0, [r7, #12]
 80167d0:	60b9      	str	r1, [r7, #8]
 80167d2:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80167d4:	687a      	ldr	r2, [r7, #4]
 80167d6:	68b9      	ldr	r1, [r7, #8]
 80167d8:	68f8      	ldr	r0, [r7, #12]
 80167da:	f000 f805 	bl	80167e8 <DbgTraceWrite>
 80167de:	4603      	mov	r3, r0
}
 80167e0:	4618      	mov	r0, r3
 80167e2:	3710      	adds	r7, #16
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bd80      	pop	{r7, pc}

080167e8 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b08a      	sub	sp, #40	; 0x28
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	60f8      	str	r0, [r7, #12]
 80167f0:	60b9      	str	r1, [r7, #8]
 80167f2:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80167f4:	2300      	movs	r3, #0
 80167f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167f8:	f3ef 8310 	mrs	r3, PRIMASK
 80167fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80167fe:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8016800:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016808:	d102      	bne.n	8016810 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 801680a:	2300      	movs	r3, #0
 801680c:	627b      	str	r3, [r7, #36]	; 0x24
 801680e:	e037      	b.n	8016880 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	2b01      	cmp	r3, #1
 8016814:	d006      	beq.n	8016824 <DbgTraceWrite+0x3c>
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	2b02      	cmp	r3, #2
 801681a:	d003      	beq.n	8016824 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 801681c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016820:	627b      	str	r3, [r7, #36]	; 0x24
 8016822:	e02d      	b.n	8016880 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d02a      	beq.n	8016880 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 801682e:	b672      	cpsid	i
}
 8016830:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	b29a      	uxth	r2, r3
 8016836:	2301      	movs	r3, #1
 8016838:	68b9      	ldr	r1, [r7, #8]
 801683a:	4814      	ldr	r0, [pc, #80]	; (801688c <DbgTraceWrite+0xa4>)
 801683c:	f000 fbf4 	bl	8017028 <CircularQueue_Add>
 8016840:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8016842:	69fb      	ldr	r3, [r7, #28]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d015      	beq.n	8016874 <DbgTraceWrite+0x8c>
 8016848:	4b11      	ldr	r3, [pc, #68]	; (8016890 <DbgTraceWrite+0xa8>)
 801684a:	781b      	ldrb	r3, [r3, #0]
 801684c:	b2db      	uxtb	r3, r3
 801684e:	2b00      	cmp	r3, #0
 8016850:	d010      	beq.n	8016874 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8016852:	4b0f      	ldr	r3, [pc, #60]	; (8016890 <DbgTraceWrite+0xa8>)
 8016854:	2200      	movs	r2, #0
 8016856:	701a      	strb	r2, [r3, #0]
 8016858:	6a3b      	ldr	r3, [r7, #32]
 801685a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801685c:	697b      	ldr	r3, [r7, #20]
 801685e:	f383 8810 	msr	PRIMASK, r3
}
 8016862:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	b29b      	uxth	r3, r3
 8016868:	4a0a      	ldr	r2, [pc, #40]	; (8016894 <DbgTraceWrite+0xac>)
 801686a:	4619      	mov	r1, r3
 801686c:	69f8      	ldr	r0, [r7, #28]
 801686e:	f7ea fc6f 	bl	8001150 <DbgOutputTraces>
 8016872:	e005      	b.n	8016880 <DbgTraceWrite+0x98>
 8016874:	6a3b      	ldr	r3, [r7, #32]
 8016876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016878:	693b      	ldr	r3, [r7, #16]
 801687a:	f383 8810 	msr	PRIMASK, r3
}
 801687e:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8016880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016882:	4618      	mov	r0, r3
 8016884:	3728      	adds	r7, #40	; 0x28
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}
 801688a:	bf00      	nop
 801688c:	20006ee4 	.word	0x20006ee4
 8016890:	200000c0 	.word	0x200000c0
 8016894:	0801672d 	.word	0x0801672d

08016898 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8016898:	b480      	push	{r7}
 801689a:	b085      	sub	sp, #20
 801689c:	af00      	add	r7, sp, #0
 801689e:	4603      	mov	r3, r0
 80168a0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80168a2:	4b0f      	ldr	r3, [pc, #60]	; (80168e0 <OTP_Read+0x48>)
 80168a4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80168a6:	e002      	b.n	80168ae <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	3b08      	subs	r3, #8
 80168ac:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	3307      	adds	r3, #7
 80168b2:	781b      	ldrb	r3, [r3, #0]
 80168b4:	79fa      	ldrb	r2, [r7, #7]
 80168b6:	429a      	cmp	r2, r3
 80168b8:	d003      	beq.n	80168c2 <OTP_Read+0x2a>
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	4a09      	ldr	r2, [pc, #36]	; (80168e4 <OTP_Read+0x4c>)
 80168be:	4293      	cmp	r3, r2
 80168c0:	d1f2      	bne.n	80168a8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	3307      	adds	r3, #7
 80168c6:	781b      	ldrb	r3, [r3, #0]
 80168c8:	79fa      	ldrb	r2, [r7, #7]
 80168ca:	429a      	cmp	r2, r3
 80168cc:	d001      	beq.n	80168d2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80168ce:	2300      	movs	r3, #0
 80168d0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80168d2:	68fb      	ldr	r3, [r7, #12]
}
 80168d4:	4618      	mov	r0, r3
 80168d6:	3714      	adds	r7, #20
 80168d8:	46bd      	mov	sp, r7
 80168da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168de:	4770      	bx	lr
 80168e0:	1fff73f8 	.word	0x1fff73f8
 80168e4:	1fff7000 	.word	0x1fff7000

080168e8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80168e8:	b480      	push	{r7}
 80168ea:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80168ec:	4b05      	ldr	r3, [pc, #20]	; (8016904 <UTIL_LPM_Init+0x1c>)
 80168ee:	2200      	movs	r2, #0
 80168f0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80168f2:	4b05      	ldr	r3, [pc, #20]	; (8016908 <UTIL_LPM_Init+0x20>)
 80168f4:	2200      	movs	r2, #0
 80168f6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80168f8:	bf00      	nop
 80168fa:	46bd      	mov	sp, r7
 80168fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016900:	4770      	bx	lr
 8016902:	bf00      	nop
 8016904:	20007f04 	.word	0x20007f04
 8016908:	20007f08 	.word	0x20007f08

0801690c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801690c:	b480      	push	{r7}
 801690e:	b087      	sub	sp, #28
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
 8016914:	460b      	mov	r3, r1
 8016916:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016918:	f3ef 8310 	mrs	r3, PRIMASK
 801691c:	613b      	str	r3, [r7, #16]
  return(result);
 801691e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8016920:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016922:	b672      	cpsid	i
}
 8016924:	bf00      	nop
  
  switch( state )
 8016926:	78fb      	ldrb	r3, [r7, #3]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d008      	beq.n	801693e <UTIL_LPM_SetStopMode+0x32>
 801692c:	2b01      	cmp	r3, #1
 801692e:	d10e      	bne.n	801694e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8016930:	4b0d      	ldr	r3, [pc, #52]	; (8016968 <UTIL_LPM_SetStopMode+0x5c>)
 8016932:	681a      	ldr	r2, [r3, #0]
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	4313      	orrs	r3, r2
 8016938:	4a0b      	ldr	r2, [pc, #44]	; (8016968 <UTIL_LPM_SetStopMode+0x5c>)
 801693a:	6013      	str	r3, [r2, #0]
      break;
 801693c:	e008      	b.n	8016950 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	43da      	mvns	r2, r3
 8016942:	4b09      	ldr	r3, [pc, #36]	; (8016968 <UTIL_LPM_SetStopMode+0x5c>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	4013      	ands	r3, r2
 8016948:	4a07      	ldr	r2, [pc, #28]	; (8016968 <UTIL_LPM_SetStopMode+0x5c>)
 801694a:	6013      	str	r3, [r2, #0]
      break;
 801694c:	e000      	b.n	8016950 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801694e:	bf00      	nop
 8016950:	697b      	ldr	r3, [r7, #20]
 8016952:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	f383 8810 	msr	PRIMASK, r3
}
 801695a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801695c:	bf00      	nop
 801695e:	371c      	adds	r7, #28
 8016960:	46bd      	mov	sp, r7
 8016962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016966:	4770      	bx	lr
 8016968:	20007f04 	.word	0x20007f04

0801696c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801696c:	b480      	push	{r7}
 801696e:	b087      	sub	sp, #28
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
 8016974:	460b      	mov	r3, r1
 8016976:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016978:	f3ef 8310 	mrs	r3, PRIMASK
 801697c:	613b      	str	r3, [r7, #16]
  return(result);
 801697e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8016980:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016982:	b672      	cpsid	i
}
 8016984:	bf00      	nop
  
  switch(state)
 8016986:	78fb      	ldrb	r3, [r7, #3]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d008      	beq.n	801699e <UTIL_LPM_SetOffMode+0x32>
 801698c:	2b01      	cmp	r3, #1
 801698e:	d10e      	bne.n	80169ae <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8016990:	4b0d      	ldr	r3, [pc, #52]	; (80169c8 <UTIL_LPM_SetOffMode+0x5c>)
 8016992:	681a      	ldr	r2, [r3, #0]
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	4313      	orrs	r3, r2
 8016998:	4a0b      	ldr	r2, [pc, #44]	; (80169c8 <UTIL_LPM_SetOffMode+0x5c>)
 801699a:	6013      	str	r3, [r2, #0]
      break;
 801699c:	e008      	b.n	80169b0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	43da      	mvns	r2, r3
 80169a2:	4b09      	ldr	r3, [pc, #36]	; (80169c8 <UTIL_LPM_SetOffMode+0x5c>)
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	4013      	ands	r3, r2
 80169a8:	4a07      	ldr	r2, [pc, #28]	; (80169c8 <UTIL_LPM_SetOffMode+0x5c>)
 80169aa:	6013      	str	r3, [r2, #0]
      break;
 80169ac:	e000      	b.n	80169b0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80169ae:	bf00      	nop
 80169b0:	697b      	ldr	r3, [r7, #20]
 80169b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	f383 8810 	msr	PRIMASK, r3
}
 80169ba:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80169bc:	bf00      	nop
 80169be:	371c      	adds	r7, #28
 80169c0:	46bd      	mov	sp, r7
 80169c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c6:	4770      	bx	lr
 80169c8:	20007f08 	.word	0x20007f08

080169cc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80169cc:	b580      	push	{r7, lr}
 80169ce:	b090      	sub	sp, #64	; 0x40
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80169d4:	4b73      	ldr	r3, [pc, #460]	; (8016ba4 <UTIL_SEQ_Run+0x1d8>)
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80169da:	4b72      	ldr	r3, [pc, #456]	; (8016ba4 <UTIL_SEQ_Run+0x1d8>)
 80169dc:	681a      	ldr	r2, [r3, #0]
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	4013      	ands	r3, r2
 80169e2:	4a70      	ldr	r2, [pc, #448]	; (8016ba4 <UTIL_SEQ_Run+0x1d8>)
 80169e4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80169e6:	4b70      	ldr	r3, [pc, #448]	; (8016ba8 <UTIL_SEQ_Run+0x1dc>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80169ec:	4b6f      	ldr	r3, [pc, #444]	; (8016bac <UTIL_SEQ_Run+0x1e0>)
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80169f2:	4b6f      	ldr	r3, [pc, #444]	; (8016bb0 <UTIL_SEQ_Run+0x1e4>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 80169f8:	4b6e      	ldr	r3, [pc, #440]	; (8016bb4 <UTIL_SEQ_Run+0x1e8>)
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80169fe:	e08d      	b.n	8016b1c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8016a00:	2300      	movs	r3, #0
 8016a02:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8016a04:	e002      	b.n	8016a0c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8016a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a08:	3301      	adds	r3, #1
 8016a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8016a0c:	4a6a      	ldr	r2, [pc, #424]	; (8016bb8 <UTIL_SEQ_Run+0x1ec>)
 8016a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a10:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a16:	401a      	ands	r2, r3
 8016a18:	4b62      	ldr	r3, [pc, #392]	; (8016ba4 <UTIL_SEQ_Run+0x1d8>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	4013      	ands	r3, r2
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d0f1      	beq.n	8016a06 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8016a22:	4a65      	ldr	r2, [pc, #404]	; (8016bb8 <UTIL_SEQ_Run+0x1ec>)
 8016a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a26:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a2c:	401a      	ands	r2, r3
 8016a2e:	4b5d      	ldr	r3, [pc, #372]	; (8016ba4 <UTIL_SEQ_Run+0x1d8>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	4013      	ands	r3, r2
 8016a34:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8016a36:	4a60      	ldr	r2, [pc, #384]	; (8016bb8 <UTIL_SEQ_Run+0x1ec>)
 8016a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a3a:	00db      	lsls	r3, r3, #3
 8016a3c:	4413      	add	r3, r2
 8016a3e:	685a      	ldr	r2, [r3, #4]
 8016a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a42:	4013      	ands	r3, r2
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d106      	bne.n	8016a56 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8016a48:	4a5b      	ldr	r2, [pc, #364]	; (8016bb8 <UTIL_SEQ_Run+0x1ec>)
 8016a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a4c:	00db      	lsls	r3, r3, #3
 8016a4e:	4413      	add	r3, r2
 8016a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a54:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8016a56:	4a58      	ldr	r2, [pc, #352]	; (8016bb8 <UTIL_SEQ_Run+0x1ec>)
 8016a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a5a:	00db      	lsls	r3, r3, #3
 8016a5c:	4413      	add	r3, r2
 8016a5e:	685a      	ldr	r2, [r3, #4]
 8016a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a62:	4013      	ands	r3, r2
 8016a64:	4618      	mov	r0, r3
 8016a66:	f000 f9b3 	bl	8016dd0 <SEQ_BitPosition>
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	461a      	mov	r2, r3
 8016a6e:	4b53      	ldr	r3, [pc, #332]	; (8016bbc <UTIL_SEQ_Run+0x1f0>)
 8016a70:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8016a72:	4a51      	ldr	r2, [pc, #324]	; (8016bb8 <UTIL_SEQ_Run+0x1ec>)
 8016a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a76:	00db      	lsls	r3, r3, #3
 8016a78:	4413      	add	r3, r2
 8016a7a:	685a      	ldr	r2, [r3, #4]
 8016a7c:	4b4f      	ldr	r3, [pc, #316]	; (8016bbc <UTIL_SEQ_Run+0x1f0>)
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	2101      	movs	r1, #1
 8016a82:	fa01 f303 	lsl.w	r3, r1, r3
 8016a86:	43db      	mvns	r3, r3
 8016a88:	401a      	ands	r2, r3
 8016a8a:	494b      	ldr	r1, [pc, #300]	; (8016bb8 <UTIL_SEQ_Run+0x1ec>)
 8016a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a8e:	00db      	lsls	r3, r3, #3
 8016a90:	440b      	add	r3, r1
 8016a92:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a94:	f3ef 8310 	mrs	r3, PRIMASK
 8016a98:	61bb      	str	r3, [r7, #24]
  return(result);
 8016a9a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016a9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8016a9e:	b672      	cpsid	i
}
 8016aa0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8016aa2:	4b46      	ldr	r3, [pc, #280]	; (8016bbc <UTIL_SEQ_Run+0x1f0>)
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	2201      	movs	r2, #1
 8016aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8016aac:	43da      	mvns	r2, r3
 8016aae:	4b3e      	ldr	r3, [pc, #248]	; (8016ba8 <UTIL_SEQ_Run+0x1dc>)
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	4013      	ands	r3, r2
 8016ab4:	4a3c      	ldr	r2, [pc, #240]	; (8016ba8 <UTIL_SEQ_Run+0x1dc>)
 8016ab6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016ab8:	2302      	movs	r3, #2
 8016aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016abc:	e013      	b.n	8016ae6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8016abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ac0:	3b01      	subs	r3, #1
 8016ac2:	4a3d      	ldr	r2, [pc, #244]	; (8016bb8 <UTIL_SEQ_Run+0x1ec>)
 8016ac4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8016ac8:	4b3c      	ldr	r3, [pc, #240]	; (8016bbc <UTIL_SEQ_Run+0x1f0>)
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	2201      	movs	r2, #1
 8016ace:	fa02 f303 	lsl.w	r3, r2, r3
 8016ad2:	43da      	mvns	r2, r3
 8016ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ad6:	3b01      	subs	r3, #1
 8016ad8:	400a      	ands	r2, r1
 8016ada:	4937      	ldr	r1, [pc, #220]	; (8016bb8 <UTIL_SEQ_Run+0x1ec>)
 8016adc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ae2:	3b01      	subs	r3, #1
 8016ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d1e8      	bne.n	8016abe <UTIL_SEQ_Run+0xf2>
 8016aec:	6a3b      	ldr	r3, [r7, #32]
 8016aee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016af0:	697b      	ldr	r3, [r7, #20]
 8016af2:	f383 8810 	msr	PRIMASK, r3
}
 8016af6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8016af8:	4b30      	ldr	r3, [pc, #192]	; (8016bbc <UTIL_SEQ_Run+0x1f0>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	4a30      	ldr	r2, [pc, #192]	; (8016bc0 <UTIL_SEQ_Run+0x1f4>)
 8016afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016b02:	4798      	blx	r3

    local_taskset = TaskSet;
 8016b04:	4b28      	ldr	r3, [pc, #160]	; (8016ba8 <UTIL_SEQ_Run+0x1dc>)
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8016b0a:	4b28      	ldr	r3, [pc, #160]	; (8016bac <UTIL_SEQ_Run+0x1e0>)
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8016b10:	4b27      	ldr	r3, [pc, #156]	; (8016bb0 <UTIL_SEQ_Run+0x1e4>)
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8016b16:	4b27      	ldr	r3, [pc, #156]	; (8016bb4 <UTIL_SEQ_Run+0x1e8>)
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8016b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b20:	401a      	ands	r2, r3
 8016b22:	4b20      	ldr	r3, [pc, #128]	; (8016ba4 <UTIL_SEQ_Run+0x1d8>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	4013      	ands	r3, r2
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d005      	beq.n	8016b38 <UTIL_SEQ_Run+0x16c>
 8016b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b30:	4013      	ands	r3, r2
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	f43f af64 	beq.w	8016a00 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8016b38:	4b20      	ldr	r3, [pc, #128]	; (8016bbc <UTIL_SEQ_Run+0x1f0>)
 8016b3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016b3e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8016b40:	f000 f938 	bl	8016db4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b44:	f3ef 8310 	mrs	r3, PRIMASK
 8016b48:	613b      	str	r3, [r7, #16]
  return(result);
 8016b4a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8016b4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8016b4e:	b672      	cpsid	i
}
 8016b50:	bf00      	nop
  local_taskset = TaskSet;
 8016b52:	4b15      	ldr	r3, [pc, #84]	; (8016ba8 <UTIL_SEQ_Run+0x1dc>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8016b58:	4b14      	ldr	r3, [pc, #80]	; (8016bac <UTIL_SEQ_Run+0x1e0>)
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8016b5e:	4b14      	ldr	r3, [pc, #80]	; (8016bb0 <UTIL_SEQ_Run+0x1e4>)
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8016b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b68:	401a      	ands	r2, r3
 8016b6a:	4b0e      	ldr	r3, [pc, #56]	; (8016ba4 <UTIL_SEQ_Run+0x1d8>)
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	4013      	ands	r3, r2
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d107      	bne.n	8016b84 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8016b74:	4b0f      	ldr	r3, [pc, #60]	; (8016bb4 <UTIL_SEQ_Run+0x1e8>)
 8016b76:	681a      	ldr	r2, [r3, #0]
 8016b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b7a:	4013      	ands	r3, r2
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d101      	bne.n	8016b84 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8016b80:	f7ea feec 	bl	800195c <UTIL_SEQ_Idle>
 8016b84:	69fb      	ldr	r3, [r7, #28]
 8016b86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	f383 8810 	msr	PRIMASK, r3
}
 8016b8e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8016b90:	f000 f917 	bl	8016dc2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8016b94:	4a03      	ldr	r2, [pc, #12]	; (8016ba4 <UTIL_SEQ_Run+0x1d8>)
 8016b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b98:	6013      	str	r3, [r2, #0]

  return;
 8016b9a:	bf00      	nop
}
 8016b9c:	3740      	adds	r7, #64	; 0x40
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}
 8016ba2:	bf00      	nop
 8016ba4:	200000c8 	.word	0x200000c8
 8016ba8:	20007f0c 	.word	0x20007f0c
 8016bac:	20007f10 	.word	0x20007f10
 8016bb0:	200000c4 	.word	0x200000c4
 8016bb4:	20007f14 	.word	0x20007f14
 8016bb8:	20007f9c 	.word	0x20007f9c
 8016bbc:	20007f18 	.word	0x20007f18
 8016bc0:	20007f1c 	.word	0x20007f1c

08016bc4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b088      	sub	sp, #32
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	60f8      	str	r0, [r7, #12]
 8016bcc:	60b9      	str	r1, [r7, #8]
 8016bce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8016bd4:	617b      	str	r3, [r7, #20]
  return(result);
 8016bd6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8016bd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8016bda:	b672      	cpsid	i
}
 8016bdc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8016bde:	68f8      	ldr	r0, [r7, #12]
 8016be0:	f000 f8f6 	bl	8016dd0 <SEQ_BitPosition>
 8016be4:	4603      	mov	r3, r0
 8016be6:	4619      	mov	r1, r3
 8016be8:	4a06      	ldr	r2, [pc, #24]	; (8016c04 <UTIL_SEQ_RegTask+0x40>)
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8016bf0:	69fb      	ldr	r3, [r7, #28]
 8016bf2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016bf4:	69bb      	ldr	r3, [r7, #24]
 8016bf6:	f383 8810 	msr	PRIMASK, r3
}
 8016bfa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8016bfc:	bf00      	nop
}
 8016bfe:	3720      	adds	r7, #32
 8016c00:	46bd      	mov	sp, r7
 8016c02:	bd80      	pop	{r7, pc}
 8016c04:	20007f1c 	.word	0x20007f1c

08016c08 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8016c08:	b480      	push	{r7}
 8016c0a:	b087      	sub	sp, #28
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
 8016c10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c12:	f3ef 8310 	mrs	r3, PRIMASK
 8016c16:	60fb      	str	r3, [r7, #12]
  return(result);
 8016c18:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016c1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016c1c:	b672      	cpsid	i
}
 8016c1e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8016c20:	4b0d      	ldr	r3, [pc, #52]	; (8016c58 <UTIL_SEQ_SetTask+0x50>)
 8016c22:	681a      	ldr	r2, [r3, #0]
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	4313      	orrs	r3, r2
 8016c28:	4a0b      	ldr	r2, [pc, #44]	; (8016c58 <UTIL_SEQ_SetTask+0x50>)
 8016c2a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8016c2c:	4a0b      	ldr	r2, [pc, #44]	; (8016c5c <UTIL_SEQ_SetTask+0x54>)
 8016c2e:	683b      	ldr	r3, [r7, #0]
 8016c30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	431a      	orrs	r2, r3
 8016c38:	4908      	ldr	r1, [pc, #32]	; (8016c5c <UTIL_SEQ_SetTask+0x54>)
 8016c3a:	683b      	ldr	r3, [r7, #0]
 8016c3c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8016c40:	697b      	ldr	r3, [r7, #20]
 8016c42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c44:	693b      	ldr	r3, [r7, #16]
 8016c46:	f383 8810 	msr	PRIMASK, r3
}
 8016c4a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016c4c:	bf00      	nop
}
 8016c4e:	371c      	adds	r7, #28
 8016c50:	46bd      	mov	sp, r7
 8016c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c56:	4770      	bx	lr
 8016c58:	20007f0c 	.word	0x20007f0c
 8016c5c:	20007f9c 	.word	0x20007f9c

08016c60 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8016c60:	b480      	push	{r7}
 8016c62:	b087      	sub	sp, #28
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c68:	f3ef 8310 	mrs	r3, PRIMASK
 8016c6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8016c6e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016c70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016c72:	b672      	cpsid	i
}
 8016c74:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	43da      	mvns	r2, r3
 8016c7a:	4b08      	ldr	r3, [pc, #32]	; (8016c9c <UTIL_SEQ_PauseTask+0x3c>)
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	4013      	ands	r3, r2
 8016c80:	4a06      	ldr	r2, [pc, #24]	; (8016c9c <UTIL_SEQ_PauseTask+0x3c>)
 8016c82:	6013      	str	r3, [r2, #0]
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c88:	693b      	ldr	r3, [r7, #16]
 8016c8a:	f383 8810 	msr	PRIMASK, r3
}
 8016c8e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016c90:	bf00      	nop
}
 8016c92:	371c      	adds	r7, #28
 8016c94:	46bd      	mov	sp, r7
 8016c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9a:	4770      	bx	lr
 8016c9c:	200000c4 	.word	0x200000c4

08016ca0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8016ca0:	b480      	push	{r7}
 8016ca2:	b087      	sub	sp, #28
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8016cac:	60fb      	str	r3, [r7, #12]
  return(result);
 8016cae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016cb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016cb2:	b672      	cpsid	i
}
 8016cb4:	bf00      	nop

  TaskMask |= TaskId_bm;
 8016cb6:	4b09      	ldr	r3, [pc, #36]	; (8016cdc <UTIL_SEQ_ResumeTask+0x3c>)
 8016cb8:	681a      	ldr	r2, [r3, #0]
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	4313      	orrs	r3, r2
 8016cbe:	4a07      	ldr	r2, [pc, #28]	; (8016cdc <UTIL_SEQ_ResumeTask+0x3c>)
 8016cc0:	6013      	str	r3, [r2, #0]
 8016cc2:	697b      	ldr	r3, [r7, #20]
 8016cc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cc6:	693b      	ldr	r3, [r7, #16]
 8016cc8:	f383 8810 	msr	PRIMASK, r3
}
 8016ccc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016cce:	bf00      	nop
}
 8016cd0:	371c      	adds	r7, #28
 8016cd2:	46bd      	mov	sp, r7
 8016cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd8:	4770      	bx	lr
 8016cda:	bf00      	nop
 8016cdc:	200000c4 	.word	0x200000c4

08016ce0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8016ce0:	b480      	push	{r7}
 8016ce2:	b087      	sub	sp, #28
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8016cec:	60fb      	str	r3, [r7, #12]
  return(result);
 8016cee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016cf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016cf2:	b672      	cpsid	i
}
 8016cf4:	bf00      	nop

  EvtSet |= EvtId_bm;
 8016cf6:	4b09      	ldr	r3, [pc, #36]	; (8016d1c <UTIL_SEQ_SetEvt+0x3c>)
 8016cf8:	681a      	ldr	r2, [r3, #0]
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	4313      	orrs	r3, r2
 8016cfe:	4a07      	ldr	r2, [pc, #28]	; (8016d1c <UTIL_SEQ_SetEvt+0x3c>)
 8016d00:	6013      	str	r3, [r2, #0]
 8016d02:	697b      	ldr	r3, [r7, #20]
 8016d04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d06:	693b      	ldr	r3, [r7, #16]
 8016d08:	f383 8810 	msr	PRIMASK, r3
}
 8016d0c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016d0e:	bf00      	nop
}
 8016d10:	371c      	adds	r7, #28
 8016d12:	46bd      	mov	sp, r7
 8016d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d18:	4770      	bx	lr
 8016d1a:	bf00      	nop
 8016d1c:	20007f10 	.word	0x20007f10

08016d20 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b088      	sub	sp, #32
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8016d28:	4b1f      	ldr	r3, [pc, #124]	; (8016da8 <UTIL_SEQ_WaitEvt+0x88>)
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8016d2e:	4b1e      	ldr	r3, [pc, #120]	; (8016da8 <UTIL_SEQ_WaitEvt+0x88>)
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016d36:	d102      	bne.n	8016d3e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8016d38:	2300      	movs	r3, #0
 8016d3a:	61fb      	str	r3, [r7, #28]
 8016d3c:	e005      	b.n	8016d4a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8016d3e:	4b1a      	ldr	r3, [pc, #104]	; (8016da8 <UTIL_SEQ_WaitEvt+0x88>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	2201      	movs	r2, #1
 8016d44:	fa02 f303 	lsl.w	r3, r2, r3
 8016d48:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8016d4a:	4b18      	ldr	r3, [pc, #96]	; (8016dac <UTIL_SEQ_WaitEvt+0x8c>)
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8016d50:	4a16      	ldr	r2, [pc, #88]	; (8016dac <UTIL_SEQ_WaitEvt+0x8c>)
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8016d56:	e003      	b.n	8016d60 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8016d58:	6879      	ldr	r1, [r7, #4]
 8016d5a:	69f8      	ldr	r0, [r7, #28]
 8016d5c:	f7ea fe05 	bl	800196a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8016d60:	4b13      	ldr	r3, [pc, #76]	; (8016db0 <UTIL_SEQ_WaitEvt+0x90>)
 8016d62:	681a      	ldr	r2, [r3, #0]
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	4013      	ands	r3, r2
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d0f5      	beq.n	8016d58 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8016d6c:	4a0e      	ldr	r2, [pc, #56]	; (8016da8 <UTIL_SEQ_WaitEvt+0x88>)
 8016d6e:	69bb      	ldr	r3, [r7, #24]
 8016d70:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d72:	f3ef 8310 	mrs	r3, PRIMASK
 8016d76:	60bb      	str	r3, [r7, #8]
  return(result);
 8016d78:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016d7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016d7c:	b672      	cpsid	i
}
 8016d7e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	43da      	mvns	r2, r3
 8016d84:	4b0a      	ldr	r3, [pc, #40]	; (8016db0 <UTIL_SEQ_WaitEvt+0x90>)
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	4013      	ands	r3, r2
 8016d8a:	4a09      	ldr	r2, [pc, #36]	; (8016db0 <UTIL_SEQ_WaitEvt+0x90>)
 8016d8c:	6013      	str	r3, [r2, #0]
 8016d8e:	693b      	ldr	r3, [r7, #16]
 8016d90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	f383 8810 	msr	PRIMASK, r3
}
 8016d98:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8016d9a:	4a04      	ldr	r2, [pc, #16]	; (8016dac <UTIL_SEQ_WaitEvt+0x8c>)
 8016d9c:	697b      	ldr	r3, [r7, #20]
 8016d9e:	6013      	str	r3, [r2, #0]
  return;
 8016da0:	bf00      	nop
}
 8016da2:	3720      	adds	r7, #32
 8016da4:	46bd      	mov	sp, r7
 8016da6:	bd80      	pop	{r7, pc}
 8016da8:	20007f18 	.word	0x20007f18
 8016dac:	20007f14 	.word	0x20007f14
 8016db0:	20007f10 	.word	0x20007f10

08016db4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8016db4:	b480      	push	{r7}
 8016db6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8016db8:	bf00      	nop
}
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc0:	4770      	bx	lr

08016dc2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8016dc2:	b480      	push	{r7}
 8016dc4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8016dc6:	bf00      	nop
}
 8016dc8:	46bd      	mov	sp, r7
 8016dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dce:	4770      	bx	lr

08016dd0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8016dd0:	b480      	push	{r7}
 8016dd2:	b085      	sub	sp, #20
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8016de0:	68bb      	ldr	r3, [r7, #8]
 8016de2:	0c1b      	lsrs	r3, r3, #16
 8016de4:	041b      	lsls	r3, r3, #16
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d104      	bne.n	8016df4 <SEQ_BitPosition+0x24>
 8016dea:	2310      	movs	r3, #16
 8016dec:	73fb      	strb	r3, [r7, #15]
 8016dee:	68bb      	ldr	r3, [r7, #8]
 8016df0:	041b      	lsls	r3, r3, #16
 8016df2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d105      	bne.n	8016e0a <SEQ_BitPosition+0x3a>
 8016dfe:	7bfb      	ldrb	r3, [r7, #15]
 8016e00:	3308      	adds	r3, #8
 8016e02:	73fb      	strb	r3, [r7, #15]
 8016e04:	68bb      	ldr	r3, [r7, #8]
 8016e06:	021b      	lsls	r3, r3, #8
 8016e08:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8016e0a:	68bb      	ldr	r3, [r7, #8]
 8016e0c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d105      	bne.n	8016e20 <SEQ_BitPosition+0x50>
 8016e14:	7bfb      	ldrb	r3, [r7, #15]
 8016e16:	3304      	adds	r3, #4
 8016e18:	73fb      	strb	r3, [r7, #15]
 8016e1a:	68bb      	ldr	r3, [r7, #8]
 8016e1c:	011b      	lsls	r3, r3, #4
 8016e1e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8016e20:	68bb      	ldr	r3, [r7, #8]
 8016e22:	0f1b      	lsrs	r3, r3, #28
 8016e24:	4a07      	ldr	r2, [pc, #28]	; (8016e44 <SEQ_BitPosition+0x74>)
 8016e26:	5cd2      	ldrb	r2, [r2, r3]
 8016e28:	7bfb      	ldrb	r3, [r7, #15]
 8016e2a:	4413      	add	r3, r2
 8016e2c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8016e2e:	7bfb      	ldrb	r3, [r7, #15]
 8016e30:	f1c3 031f 	rsb	r3, r3, #31
 8016e34:	b2db      	uxtb	r3, r3
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3714      	adds	r7, #20
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e40:	4770      	bx	lr
 8016e42:	bf00      	nop
 8016e44:	08033430 	.word	0x08033430

08016e48 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8016e48:	b480      	push	{r7}
 8016e4a:	b083      	sub	sp, #12
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	687a      	ldr	r2, [r7, #4]
 8016e54:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	687a      	ldr	r2, [r7, #4]
 8016e5a:	605a      	str	r2, [r3, #4]
}
 8016e5c:	bf00      	nop
 8016e5e:	370c      	adds	r7, #12
 8016e60:	46bd      	mov	sp, r7
 8016e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e66:	4770      	bx	lr

08016e68 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8016e68:	b480      	push	{r7}
 8016e6a:	b087      	sub	sp, #28
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e70:	f3ef 8310 	mrs	r3, PRIMASK
 8016e74:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e76:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016e78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016e7a:	b672      	cpsid	i
}
 8016e7c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	687a      	ldr	r2, [r7, #4]
 8016e84:	429a      	cmp	r2, r3
 8016e86:	d102      	bne.n	8016e8e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8016e88:	2301      	movs	r3, #1
 8016e8a:	75fb      	strb	r3, [r7, #23]
 8016e8c:	e001      	b.n	8016e92 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8016e8e:	2300      	movs	r3, #0
 8016e90:	75fb      	strb	r3, [r7, #23]
 8016e92:	693b      	ldr	r3, [r7, #16]
 8016e94:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e96:	68bb      	ldr	r3, [r7, #8]
 8016e98:	f383 8810 	msr	PRIMASK, r3
}
 8016e9c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8016e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	371c      	adds	r7, #28
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eaa:	4770      	bx	lr

08016eac <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8016eac:	b480      	push	{r7}
 8016eae:	b087      	sub	sp, #28
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
 8016eb4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8016eba:	60fb      	str	r3, [r7, #12]
  return(result);
 8016ebc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016ebe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016ec0:	b672      	cpsid	i
}
 8016ec2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	681a      	ldr	r2, [r3, #0]
 8016ec8:	683b      	ldr	r3, [r7, #0]
 8016eca:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016ecc:	683b      	ldr	r3, [r7, #0]
 8016ece:	687a      	ldr	r2, [r7, #4]
 8016ed0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	683a      	ldr	r2, [r7, #0]
 8016ed6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	683a      	ldr	r2, [r7, #0]
 8016ede:	605a      	str	r2, [r3, #4]
 8016ee0:	697b      	ldr	r3, [r7, #20]
 8016ee2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ee4:	693b      	ldr	r3, [r7, #16]
 8016ee6:	f383 8810 	msr	PRIMASK, r3
}
 8016eea:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016eec:	bf00      	nop
 8016eee:	371c      	adds	r7, #28
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef6:	4770      	bx	lr

08016ef8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8016ef8:	b480      	push	{r7}
 8016efa:	b087      	sub	sp, #28
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
 8016f00:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f02:	f3ef 8310 	mrs	r3, PRIMASK
 8016f06:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f08:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016f0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f0c:	b672      	cpsid	i
}
 8016f0e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8016f10:	683b      	ldr	r3, [r7, #0]
 8016f12:	687a      	ldr	r2, [r7, #4]
 8016f14:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	685a      	ldr	r2, [r3, #4]
 8016f1a:	683b      	ldr	r3, [r7, #0]
 8016f1c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	683a      	ldr	r2, [r7, #0]
 8016f22:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016f24:	683b      	ldr	r3, [r7, #0]
 8016f26:	685b      	ldr	r3, [r3, #4]
 8016f28:	683a      	ldr	r2, [r7, #0]
 8016f2a:	601a      	str	r2, [r3, #0]
 8016f2c:	697b      	ldr	r3, [r7, #20]
 8016f2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f30:	693b      	ldr	r3, [r7, #16]
 8016f32:	f383 8810 	msr	PRIMASK, r3
}
 8016f36:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016f38:	bf00      	nop
 8016f3a:	371c      	adds	r7, #28
 8016f3c:	46bd      	mov	sp, r7
 8016f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f42:	4770      	bx	lr

08016f44 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8016f44:	b480      	push	{r7}
 8016f46:	b087      	sub	sp, #28
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8016f50:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f52:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016f54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f56:	b672      	cpsid	i
}
 8016f58:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	685b      	ldr	r3, [r3, #4]
 8016f5e:	687a      	ldr	r2, [r7, #4]
 8016f60:	6812      	ldr	r2, [r2, #0]
 8016f62:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	687a      	ldr	r2, [r7, #4]
 8016f6a:	6852      	ldr	r2, [r2, #4]
 8016f6c:	605a      	str	r2, [r3, #4]
 8016f6e:	697b      	ldr	r3, [r7, #20]
 8016f70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f72:	693b      	ldr	r3, [r7, #16]
 8016f74:	f383 8810 	msr	PRIMASK, r3
}
 8016f78:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016f7a:	bf00      	nop
 8016f7c:	371c      	adds	r7, #28
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f84:	4770      	bx	lr

08016f86 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8016f86:	b580      	push	{r7, lr}
 8016f88:	b086      	sub	sp, #24
 8016f8a:	af00      	add	r7, sp, #0
 8016f8c:	6078      	str	r0, [r7, #4]
 8016f8e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f90:	f3ef 8310 	mrs	r3, PRIMASK
 8016f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f96:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016f98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f9a:	b672      	cpsid	i
}
 8016f9c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681a      	ldr	r2, [r3, #0]
 8016fa2:	683b      	ldr	r3, [r7, #0]
 8016fa4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	4618      	mov	r0, r3
 8016fac:	f7ff ffca 	bl	8016f44 <LST_remove_node>
 8016fb0:	697b      	ldr	r3, [r7, #20]
 8016fb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fb4:	693b      	ldr	r3, [r7, #16]
 8016fb6:	f383 8810 	msr	PRIMASK, r3
}
 8016fba:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016fbc:	bf00      	nop
 8016fbe:	3718      	adds	r7, #24
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	bd80      	pop	{r7, pc}

08016fc4 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8016fc4:	b480      	push	{r7}
 8016fc6:	b085      	sub	sp, #20
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	60f8      	str	r0, [r7, #12]
 8016fcc:	60b9      	str	r1, [r7, #8]
 8016fce:	607a      	str	r2, [r7, #4]
 8016fd0:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	68ba      	ldr	r2, [r7, #8]
 8016fd6:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	2200      	movs	r2, #0
 8016fdc:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	2200      	movs	r2, #0
 8016fe2:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	2200      	movs	r2, #0
 8016fee:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	687a      	ldr	r2, [r7, #4]
 8016ff4:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	887a      	ldrh	r2, [r7, #2]
 8016ffa:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	7e3a      	ldrb	r2, [r7, #24]
 8017000:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8017002:	7e3b      	ldrb	r3, [r7, #24]
 8017004:	f003 0302 	and.w	r3, r3, #2
 8017008:	2b00      	cmp	r3, #0
 801700a:	d006      	beq.n	801701a <CircularQueue_Init+0x56>
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	891b      	ldrh	r3, [r3, #8]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d002      	beq.n	801701a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8017014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017018:	e000      	b.n	801701c <CircularQueue_Init+0x58>
  }
  return 0;
 801701a:	2300      	movs	r3, #0
}
 801701c:	4618      	mov	r0, r3
 801701e:	3714      	adds	r7, #20
 8017020:	46bd      	mov	sp, r7
 8017022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017026:	4770      	bx	lr

08017028 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b08e      	sub	sp, #56	; 0x38
 801702c:	af00      	add	r7, sp, #0
 801702e:	60f8      	str	r0, [r7, #12]
 8017030:	60b9      	str	r1, [r7, #8]
 8017032:	603b      	str	r3, [r7, #0]
 8017034:	4613      	mov	r3, r2
 8017036:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8017038:	2300      	movs	r3, #0
 801703a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 801703c:	2300      	movs	r3, #0
 801703e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8017040:	2300      	movs	r3, #0
 8017042:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8017044:	2300      	movs	r3, #0
 8017046:	62bb      	str	r3, [r7, #40]	; 0x28
 8017048:	2300      	movs	r3, #0
 801704a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 801704c:	2300      	movs	r3, #0
 801704e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8017050:	2300      	movs	r3, #0
 8017052:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	891b      	ldrh	r3, [r3, #8]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d101      	bne.n	8017060 <CircularQueue_Add+0x38>
 801705c:	2302      	movs	r3, #2
 801705e:	e000      	b.n	8017062 <CircularQueue_Add+0x3a>
 8017060:	2300      	movs	r3, #0
 8017062:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	695b      	ldr	r3, [r3, #20]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d02a      	beq.n	80170c2 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	891b      	ldrh	r3, [r3, #8]
 8017070:	2b00      	cmp	r3, #0
 8017072:	d123      	bne.n	80170bc <CircularQueue_Add+0x94>
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	681a      	ldr	r2, [r3, #0]
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	691b      	ldr	r3, [r3, #16]
 801707c:	4413      	add	r3, r2
 801707e:	781b      	ldrb	r3, [r3, #0]
 8017080:	b29a      	uxth	r2, r3
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	6819      	ldr	r1, [r3, #0]
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	691b      	ldr	r3, [r3, #16]
 801708a:	1c58      	adds	r0, r3, #1
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	685b      	ldr	r3, [r3, #4]
 8017090:	4298      	cmp	r0, r3
 8017092:	d306      	bcc.n	80170a2 <CircularQueue_Add+0x7a>
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	6918      	ldr	r0, [r3, #16]
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	685b      	ldr	r3, [r3, #4]
 801709c:	1ac3      	subs	r3, r0, r3
 801709e:	3301      	adds	r3, #1
 80170a0:	e002      	b.n	80170a8 <CircularQueue_Add+0x80>
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	691b      	ldr	r3, [r3, #16]
 80170a6:	3301      	adds	r3, #1
 80170a8:	440b      	add	r3, r1
 80170aa:	781b      	ldrb	r3, [r3, #0]
 80170ac:	b29b      	uxth	r3, r3
 80170ae:	021b      	lsls	r3, r3, #8
 80170b0:	b29b      	uxth	r3, r3
 80170b2:	4413      	add	r3, r2
 80170b4:	b29b      	uxth	r3, r3
 80170b6:	3302      	adds	r3, #2
 80170b8:	b29b      	uxth	r3, r3
 80170ba:	e001      	b.n	80170c0 <CircularQueue_Add+0x98>
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	891b      	ldrh	r3, [r3, #8]
 80170c0:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	891b      	ldrh	r3, [r3, #8]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d002      	beq.n	80170d0 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	891b      	ldrh	r3, [r3, #8]
 80170ce:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	691a      	ldr	r2, [r3, #16]
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	68db      	ldr	r3, [r3, #12]
 80170d8:	429a      	cmp	r2, r3
 80170da:	d307      	bcc.n	80170ec <CircularQueue_Add+0xc4>
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	685a      	ldr	r2, [r3, #4]
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	6919      	ldr	r1, [r3, #16]
 80170e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80170e6:	440b      	add	r3, r1
 80170e8:	1ad3      	subs	r3, r2, r3
 80170ea:	e000      	b.n	80170ee <CircularQueue_Add+0xc6>
 80170ec:	2300      	movs	r3, #0
 80170ee:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80170f0:	88fa      	ldrh	r2, [r7, #6]
 80170f2:	7ffb      	ldrb	r3, [r7, #31]
 80170f4:	4413      	add	r3, r2
 80170f6:	461a      	mov	r2, r3
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	fb02 f303 	mul.w	r3, r2, r3
 80170fe:	69ba      	ldr	r2, [r7, #24]
 8017100:	429a      	cmp	r2, r3
 8017102:	d80b      	bhi.n	801711c <CircularQueue_Add+0xf4>
 8017104:	88fa      	ldrh	r2, [r7, #6]
 8017106:	7ffb      	ldrb	r3, [r7, #31]
 8017108:	4413      	add	r3, r2
 801710a:	461a      	mov	r2, r3
 801710c:	69bb      	ldr	r3, [r7, #24]
 801710e:	fbb3 f1f2 	udiv	r1, r3, r2
 8017112:	fb01 f202 	mul.w	r2, r1, r2
 8017116:	1a9b      	subs	r3, r3, r2
 8017118:	b2db      	uxtb	r3, r3
 801711a:	e000      	b.n	801711e <CircularQueue_Add+0xf6>
 801711c:	2300      	movs	r3, #0
 801711e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8017120:	7dfa      	ldrb	r2, [r7, #23]
 8017122:	7ffb      	ldrb	r3, [r7, #31]
 8017124:	429a      	cmp	r2, r3
 8017126:	bf8c      	ite	hi
 8017128:	2301      	movhi	r3, #1
 801712a:	2300      	movls	r3, #0
 801712c:	b2db      	uxtb	r3, r3
 801712e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8017130:	7fbb      	ldrb	r3, [r7, #30]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d008      	beq.n	8017148 <CircularQueue_Add+0x120>
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	7f1b      	ldrb	r3, [r3, #28]
 801713a:	f003 0301 	and.w	r3, r3, #1
 801713e:	2b00      	cmp	r3, #0
 8017140:	d002      	beq.n	8017148 <CircularQueue_Add+0x120>
 8017142:	7dfb      	ldrb	r3, [r7, #23]
 8017144:	b29b      	uxth	r3, r3
 8017146:	e000      	b.n	801714a <CircularQueue_Add+0x122>
 8017148:	8bbb      	ldrh	r3, [r7, #28]
 801714a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 801714c:	7fbb      	ldrb	r3, [r7, #30]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d008      	beq.n	8017164 <CircularQueue_Add+0x13c>
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	7f1b      	ldrb	r3, [r3, #28]
 8017156:	f003 0302 	and.w	r3, r3, #2
 801715a:	2b00      	cmp	r3, #0
 801715c:	d002      	beq.n	8017164 <CircularQueue_Add+0x13c>
 801715e:	7ffb      	ldrb	r3, [r7, #31]
 8017160:	b29b      	uxth	r3, r3
 8017162:	e000      	b.n	8017166 <CircularQueue_Add+0x13e>
 8017164:	8bbb      	ldrh	r3, [r7, #28]
 8017166:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8017168:	88fb      	ldrh	r3, [r7, #6]
 801716a:	2b00      	cmp	r3, #0
 801716c:	f000 817e 	beq.w	801746c <CircularQueue_Add+0x444>
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	695a      	ldr	r2, [r3, #20]
 8017174:	88f9      	ldrh	r1, [r7, #6]
 8017176:	7ffb      	ldrb	r3, [r7, #31]
 8017178:	440b      	add	r3, r1
 801717a:	4619      	mov	r1, r3
 801717c:	683b      	ldr	r3, [r7, #0]
 801717e:	fb01 f303 	mul.w	r3, r1, r3
 8017182:	441a      	add	r2, r3
 8017184:	8bbb      	ldrh	r3, [r7, #28]
 8017186:	441a      	add	r2, r3
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	685b      	ldr	r3, [r3, #4]
 801718c:	429a      	cmp	r2, r3
 801718e:	f200 816d 	bhi.w	801746c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8017192:	2300      	movs	r3, #0
 8017194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017196:	e14a      	b.n	801742e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	691a      	ldr	r2, [r3, #16]
 801719c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801719e:	441a      	add	r2, r3
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	685b      	ldr	r3, [r3, #4]
 80171a4:	429a      	cmp	r2, r3
 80171a6:	d307      	bcc.n	80171b8 <CircularQueue_Add+0x190>
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	691a      	ldr	r2, [r3, #16]
 80171ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80171ae:	441a      	add	r2, r3
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	685b      	ldr	r3, [r3, #4]
 80171b4:	1ad3      	subs	r3, r2, r3
 80171b6:	e003      	b.n	80171c0 <CircularQueue_Add+0x198>
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	691a      	ldr	r2, [r3, #16]
 80171bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80171be:	4413      	add	r3, r2
 80171c0:	68fa      	ldr	r2, [r7, #12]
 80171c2:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	691b      	ldr	r3, [r3, #16]
 80171c8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	891b      	ldrh	r3, [r3, #8]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d130      	bne.n	8017234 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	681a      	ldr	r2, [r3, #0]
 80171d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171d8:	1c59      	adds	r1, r3, #1
 80171da:	6339      	str	r1, [r7, #48]	; 0x30
 80171dc:	4413      	add	r3, r2
 80171de:	88fa      	ldrh	r2, [r7, #6]
 80171e0:	b2d2      	uxtb	r2, r2
 80171e2:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	685b      	ldr	r3, [r3, #4]
 80171e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171ea:	429a      	cmp	r2, r3
 80171ec:	d304      	bcc.n	80171f8 <CircularQueue_Add+0x1d0>
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	685b      	ldr	r3, [r3, #4]
 80171f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171f4:	1ad3      	subs	r3, r2, r3
 80171f6:	e000      	b.n	80171fa <CircularQueue_Add+0x1d2>
 80171f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171fa:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 80171fc:	88fb      	ldrh	r3, [r7, #6]
 80171fe:	0a1b      	lsrs	r3, r3, #8
 8017200:	b298      	uxth	r0, r3
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	681a      	ldr	r2, [r3, #0]
 8017206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017208:	1c59      	adds	r1, r3, #1
 801720a:	6339      	str	r1, [r7, #48]	; 0x30
 801720c:	4413      	add	r3, r2
 801720e:	b2c2      	uxtb	r2, r0
 8017210:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	685b      	ldr	r3, [r3, #4]
 8017216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017218:	429a      	cmp	r2, r3
 801721a:	d304      	bcc.n	8017226 <CircularQueue_Add+0x1fe>
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	685b      	ldr	r3, [r3, #4]
 8017220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017222:	1ad3      	subs	r3, r2, r3
 8017224:	e000      	b.n	8017228 <CircularQueue_Add+0x200>
 8017226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017228:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	695b      	ldr	r3, [r3, #20]
 801722e:	1c9a      	adds	r2, r3, #2
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8017234:	88fa      	ldrh	r2, [r7, #6]
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	6859      	ldr	r1, [r3, #4]
 801723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801723c:	1acb      	subs	r3, r1, r3
 801723e:	4293      	cmp	r3, r2
 8017240:	bf28      	it	cs
 8017242:	4613      	movcs	r3, r2
 8017244:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8017246:	88fb      	ldrh	r3, [r7, #6]
 8017248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801724a:	429a      	cmp	r2, r3
 801724c:	d007      	beq.n	801725e <CircularQueue_Add+0x236>
 801724e:	88fb      	ldrh	r3, [r7, #6]
 8017250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017252:	429a      	cmp	r2, r3
 8017254:	d225      	bcs.n	80172a2 <CircularQueue_Add+0x27a>
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	7f1b      	ldrb	r3, [r3, #28]
 801725a:	2b00      	cmp	r3, #0
 801725c:	d121      	bne.n	80172a2 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	681a      	ldr	r2, [r3, #0]
 8017262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017264:	18d0      	adds	r0, r2, r3
 8017266:	88fb      	ldrh	r3, [r7, #6]
 8017268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801726a:	fb02 f303 	mul.w	r3, r2, r3
 801726e:	68ba      	ldr	r2, [r7, #8]
 8017270:	4413      	add	r3, r2
 8017272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017274:	4619      	mov	r1, r3
 8017276:	f011 fc7b 	bl	8028b70 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	695a      	ldr	r2, [r3, #20]
 801727e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017280:	441a      	add	r2, r3
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8017286:	2300      	movs	r3, #0
 8017288:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 801728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801728c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 801728e:	88fa      	ldrh	r2, [r7, #6]
 8017290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017292:	1ad3      	subs	r3, r2, r3
 8017294:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8017296:	7ffb      	ldrb	r3, [r7, #31]
 8017298:	b29a      	uxth	r2, r3
 801729a:	88fb      	ldrh	r3, [r7, #6]
 801729c:	4413      	add	r3, r2
 801729e:	86fb      	strh	r3, [r7, #54]	; 0x36
 80172a0:	e0a4      	b.n	80173ec <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 80172a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	f000 80a1 	beq.w	80173ec <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	7f1b      	ldrb	r3, [r3, #28]
 80172ae:	f003 0301 	and.w	r3, r3, #1
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d03a      	beq.n	801732c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	891b      	ldrh	r3, [r3, #8]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d10d      	bne.n	80172da <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	681a      	ldr	r2, [r3, #0]
 80172c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172c4:	3b02      	subs	r3, #2
 80172c6:	4413      	add	r3, r2
 80172c8:	22ff      	movs	r2, #255	; 0xff
 80172ca:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	681a      	ldr	r2, [r3, #0]
 80172d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172d2:	3b01      	subs	r3, #1
 80172d4:	4413      	add	r3, r2
 80172d6:	22ff      	movs	r2, #255	; 0xff
 80172d8:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	695a      	ldr	r2, [r3, #20]
 80172de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172e0:	441a      	add	r2, r3
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 80172e6:	2300      	movs	r3, #0
 80172e8:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 80172ea:	88fb      	ldrh	r3, [r7, #6]
 80172ec:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 80172ee:	2300      	movs	r3, #0
 80172f0:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	891b      	ldrh	r3, [r3, #8]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d16f      	bne.n	80173da <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	681a      	ldr	r2, [r3, #0]
 80172fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017300:	1c59      	adds	r1, r3, #1
 8017302:	6339      	str	r1, [r7, #48]	; 0x30
 8017304:	4413      	add	r3, r2
 8017306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017308:	b2d2      	uxtb	r2, r2
 801730a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801730e:	0a18      	lsrs	r0, r3, #8
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	681a      	ldr	r2, [r3, #0]
 8017314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017316:	1c59      	adds	r1, r3, #1
 8017318:	6339      	str	r1, [r7, #48]	; 0x30
 801731a:	4413      	add	r3, r2
 801731c:	b2c2      	uxtb	r2, r0
 801731e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	695b      	ldr	r3, [r3, #20]
 8017324:	1c9a      	adds	r2, r3, #2
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	615a      	str	r2, [r3, #20]
 801732a:	e056      	b.n	80173da <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	7f1b      	ldrb	r3, [r3, #28]
 8017330:	f003 0302 	and.w	r3, r3, #2
 8017334:	2b00      	cmp	r3, #0
 8017336:	d050      	beq.n	80173da <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	891b      	ldrh	r3, [r3, #8]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d14a      	bne.n	80173d6 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	681a      	ldr	r2, [r3, #0]
 8017344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017346:	3b02      	subs	r3, #2
 8017348:	4413      	add	r3, r2
 801734a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801734c:	b2d2      	uxtb	r2, r2
 801734e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8017350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017352:	0a19      	lsrs	r1, r3, #8
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	681a      	ldr	r2, [r3, #0]
 8017358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801735a:	3b01      	subs	r3, #1
 801735c:	4413      	add	r3, r2
 801735e:	b2ca      	uxtb	r2, r1
 8017360:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	681a      	ldr	r2, [r3, #0]
 8017366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017368:	18d0      	adds	r0, r2, r3
 801736a:	88fb      	ldrh	r3, [r7, #6]
 801736c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801736e:	fb02 f303 	mul.w	r3, r2, r3
 8017372:	68ba      	ldr	r2, [r7, #8]
 8017374:	4413      	add	r3, r2
 8017376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017378:	4619      	mov	r1, r3
 801737a:	f011 fbf9 	bl	8028b70 <memcpy>
             q->byteCount += NbBytesToCopy; 
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	695a      	ldr	r2, [r3, #20]
 8017382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017384:	441a      	add	r2, r3
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 801738a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801738c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 801738e:	88fa      	ldrh	r2, [r7, #6]
 8017390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017392:	1ad3      	subs	r3, r2, r3
 8017394:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	699b      	ldr	r3, [r3, #24]
 801739a:	1c5a      	adds	r2, r3, #1
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 80173a0:	2300      	movs	r3, #0
 80173a2:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	681a      	ldr	r2, [r3, #0]
 80173a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173aa:	1c59      	adds	r1, r3, #1
 80173ac:	6339      	str	r1, [r7, #48]	; 0x30
 80173ae:	4413      	add	r3, r2
 80173b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80173b2:	b2d2      	uxtb	r2, r2
 80173b4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80173b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173b8:	0a18      	lsrs	r0, r3, #8
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	681a      	ldr	r2, [r3, #0]
 80173be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173c0:	1c59      	adds	r1, r3, #1
 80173c2:	6339      	str	r1, [r7, #48]	; 0x30
 80173c4:	4413      	add	r3, r2
 80173c6:	b2c2      	uxtb	r2, r0
 80173c8:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	695b      	ldr	r3, [r3, #20]
 80173ce:	1c9a      	adds	r2, r3, #2
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	615a      	str	r2, [r3, #20]
 80173d4:	e001      	b.n	80173da <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 80173d6:	2300      	movs	r3, #0
 80173d8:	e049      	b.n	801746e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 80173da:	7ffb      	ldrb	r3, [r7, #31]
 80173dc:	b29a      	uxth	r2, r3
 80173de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e0:	b29b      	uxth	r3, r3
 80173e2:	4413      	add	r3, r2
 80173e4:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	2200      	movs	r2, #0
 80173ea:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 80173ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d015      	beq.n	801741e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	681a      	ldr	r2, [r3, #0]
 80173f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173f8:	18d0      	adds	r0, r2, r3
 80173fa:	88fb      	ldrh	r3, [r7, #6]
 80173fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80173fe:	fb03 f202 	mul.w	r2, r3, r2
 8017402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017404:	4413      	add	r3, r2
 8017406:	68ba      	ldr	r2, [r7, #8]
 8017408:	4413      	add	r3, r2
 801740a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801740c:	4619      	mov	r1, r3
 801740e:	f011 fbaf 	bl	8028b70 <memcpy>
        q->byteCount += NbBytesToCopy;
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	695a      	ldr	r2, [r3, #20]
 8017416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017418:	441a      	add	r2, r3
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	699b      	ldr	r3, [r3, #24]
 8017422:	1c5a      	adds	r2, r3, #1
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8017428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801742a:	3301      	adds	r3, #1
 801742c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801742e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017430:	683b      	ldr	r3, [r7, #0]
 8017432:	429a      	cmp	r2, r3
 8017434:	f4ff aeb0 	bcc.w	8017198 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	681a      	ldr	r2, [r3, #0]
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	6919      	ldr	r1, [r3, #16]
 8017440:	7ffb      	ldrb	r3, [r7, #31]
 8017442:	4419      	add	r1, r3
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	685b      	ldr	r3, [r3, #4]
 8017448:	4299      	cmp	r1, r3
 801744a:	d307      	bcc.n	801745c <CircularQueue_Add+0x434>
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	6919      	ldr	r1, [r3, #16]
 8017450:	7ffb      	ldrb	r3, [r7, #31]
 8017452:	4419      	add	r1, r3
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	685b      	ldr	r3, [r3, #4]
 8017458:	1acb      	subs	r3, r1, r3
 801745a:	e003      	b.n	8017464 <CircularQueue_Add+0x43c>
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	6919      	ldr	r1, [r3, #16]
 8017460:	7ffb      	ldrb	r3, [r7, #31]
 8017462:	440b      	add	r3, r1
 8017464:	4413      	add	r3, r2
 8017466:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8017468:	6a3b      	ldr	r3, [r7, #32]
 801746a:	e000      	b.n	801746e <CircularQueue_Add+0x446>
    return NULL;
 801746c:	2300      	movs	r3, #0
}
 801746e:	4618      	mov	r0, r3
 8017470:	3738      	adds	r7, #56	; 0x38
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}

08017476 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8017476:	b480      	push	{r7}
 8017478:	b085      	sub	sp, #20
 801747a:	af00      	add	r7, sp, #0
 801747c:	6078      	str	r0, [r7, #4]
 801747e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8017480:	2300      	movs	r3, #0
 8017482:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8017484:	2300      	movs	r3, #0
 8017486:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	891b      	ldrh	r3, [r3, #8]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d101      	bne.n	8017494 <CircularQueue_Remove+0x1e>
 8017490:	2302      	movs	r3, #2
 8017492:	e000      	b.n	8017496 <CircularQueue_Remove+0x20>
 8017494:	2300      	movs	r3, #0
 8017496:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8017498:	2300      	movs	r3, #0
 801749a:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	695b      	ldr	r3, [r3, #20]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	f000 80cc 	beq.w	801763e <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	891b      	ldrh	r3, [r3, #8]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d121      	bne.n	80174f2 <CircularQueue_Remove+0x7c>
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	681a      	ldr	r2, [r3, #0]
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	68db      	ldr	r3, [r3, #12]
 80174b6:	4413      	add	r3, r2
 80174b8:	781b      	ldrb	r3, [r3, #0]
 80174ba:	b29a      	uxth	r2, r3
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	6819      	ldr	r1, [r3, #0]
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	68db      	ldr	r3, [r3, #12]
 80174c4:	1c58      	adds	r0, r3, #1
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	685b      	ldr	r3, [r3, #4]
 80174ca:	4298      	cmp	r0, r3
 80174cc:	d306      	bcc.n	80174dc <CircularQueue_Remove+0x66>
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	68d8      	ldr	r0, [r3, #12]
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	685b      	ldr	r3, [r3, #4]
 80174d6:	1ac3      	subs	r3, r0, r3
 80174d8:	3301      	adds	r3, #1
 80174da:	e002      	b.n	80174e2 <CircularQueue_Remove+0x6c>
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	68db      	ldr	r3, [r3, #12]
 80174e0:	3301      	adds	r3, #1
 80174e2:	440b      	add	r3, r1
 80174e4:	781b      	ldrb	r3, [r3, #0]
 80174e6:	b29b      	uxth	r3, r3
 80174e8:	021b      	lsls	r3, r3, #8
 80174ea:	b29b      	uxth	r3, r3
 80174ec:	4413      	add	r3, r2
 80174ee:	b29b      	uxth	r3, r3
 80174f0:	e001      	b.n	80174f6 <CircularQueue_Remove+0x80>
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	891b      	ldrh	r3, [r3, #8]
 80174f6:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	7f1b      	ldrb	r3, [r3, #28]
 80174fc:	f003 0301 	and.w	r3, r3, #1
 8017500:	2b00      	cmp	r3, #0
 8017502:	d057      	beq.n	80175b4 <CircularQueue_Remove+0x13e>
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	7f1b      	ldrb	r3, [r3, #28]
 8017508:	f003 0302 	and.w	r3, r3, #2
 801750c:	2b00      	cmp	r3, #0
 801750e:	d151      	bne.n	80175b4 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8017510:	897b      	ldrh	r3, [r7, #10]
 8017512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017516:	4293      	cmp	r3, r2
 8017518:	d103      	bne.n	8017522 <CircularQueue_Remove+0xac>
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	891b      	ldrh	r3, [r3, #8]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d012      	beq.n	8017548 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	68da      	ldr	r2, [r3, #12]
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801752a:	429a      	cmp	r2, r3
 801752c:	d942      	bls.n	80175b4 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	891b      	ldrh	r3, [r3, #8]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d03e      	beq.n	80175b4 <CircularQueue_Remove+0x13e>
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	685a      	ldr	r2, [r3, #4]
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	68db      	ldr	r3, [r3, #12]
 801753e:	1ad3      	subs	r3, r2, r3
 8017540:	687a      	ldr	r2, [r7, #4]
 8017542:	8912      	ldrh	r2, [r2, #8]
 8017544:	4293      	cmp	r3, r2
 8017546:	d235      	bcs.n	80175b4 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	695a      	ldr	r2, [r3, #20]
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	68d9      	ldr	r1, [r3, #12]
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	685b      	ldr	r3, [r3, #4]
 8017554:	1acb      	subs	r3, r1, r3
 8017556:	441a      	add	r2, r3
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	2200      	movs	r2, #0
 8017560:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	891b      	ldrh	r3, [r3, #8]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d121      	bne.n	80175ae <CircularQueue_Remove+0x138>
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	681a      	ldr	r2, [r3, #0]
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	68db      	ldr	r3, [r3, #12]
 8017572:	4413      	add	r3, r2
 8017574:	781b      	ldrb	r3, [r3, #0]
 8017576:	b29a      	uxth	r2, r3
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	6819      	ldr	r1, [r3, #0]
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	68db      	ldr	r3, [r3, #12]
 8017580:	1c58      	adds	r0, r3, #1
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	685b      	ldr	r3, [r3, #4]
 8017586:	4298      	cmp	r0, r3
 8017588:	d306      	bcc.n	8017598 <CircularQueue_Remove+0x122>
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	68d8      	ldr	r0, [r3, #12]
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	685b      	ldr	r3, [r3, #4]
 8017592:	1ac3      	subs	r3, r0, r3
 8017594:	3301      	adds	r3, #1
 8017596:	e002      	b.n	801759e <CircularQueue_Remove+0x128>
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	68db      	ldr	r3, [r3, #12]
 801759c:	3301      	adds	r3, #1
 801759e:	440b      	add	r3, r1
 80175a0:	781b      	ldrb	r3, [r3, #0]
 80175a2:	b29b      	uxth	r3, r3
 80175a4:	021b      	lsls	r3, r3, #8
 80175a6:	b29b      	uxth	r3, r3
 80175a8:	4413      	add	r3, r2
 80175aa:	b29b      	uxth	r3, r3
 80175ac:	e001      	b.n	80175b2 <CircularQueue_Remove+0x13c>
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	891b      	ldrh	r3, [r3, #8]
 80175b2:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	681a      	ldr	r2, [r3, #0]
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	68d9      	ldr	r1, [r3, #12]
 80175bc:	7a7b      	ldrb	r3, [r7, #9]
 80175be:	4419      	add	r1, r3
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	685b      	ldr	r3, [r3, #4]
 80175c4:	4299      	cmp	r1, r3
 80175c6:	d307      	bcc.n	80175d8 <CircularQueue_Remove+0x162>
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	68d9      	ldr	r1, [r3, #12]
 80175cc:	7a7b      	ldrb	r3, [r7, #9]
 80175ce:	4419      	add	r1, r3
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	685b      	ldr	r3, [r3, #4]
 80175d4:	1acb      	subs	r3, r1, r3
 80175d6:	e003      	b.n	80175e0 <CircularQueue_Remove+0x16a>
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	68d9      	ldr	r1, [r3, #12]
 80175dc:	7a7b      	ldrb	r3, [r7, #9]
 80175de:	440b      	add	r3, r1
 80175e0:	4413      	add	r3, r2
 80175e2:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	695b      	ldr	r3, [r3, #20]
 80175e8:	8979      	ldrh	r1, [r7, #10]
 80175ea:	7a7a      	ldrb	r2, [r7, #9]
 80175ec:	440a      	add	r2, r1
 80175ee:	1a9a      	subs	r2, r3, r2
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	695b      	ldr	r3, [r3, #20]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d01b      	beq.n	8017634 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	68da      	ldr	r2, [r3, #12]
 8017600:	897b      	ldrh	r3, [r7, #10]
 8017602:	441a      	add	r2, r3
 8017604:	7a7b      	ldrb	r3, [r7, #9]
 8017606:	441a      	add	r2, r3
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	685b      	ldr	r3, [r3, #4]
 801760c:	429a      	cmp	r2, r3
 801760e:	d309      	bcc.n	8017624 <CircularQueue_Remove+0x1ae>
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	68da      	ldr	r2, [r3, #12]
 8017614:	897b      	ldrh	r3, [r7, #10]
 8017616:	441a      	add	r2, r3
 8017618:	7a7b      	ldrb	r3, [r7, #9]
 801761a:	441a      	add	r2, r3
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	685b      	ldr	r3, [r3, #4]
 8017620:	1ad3      	subs	r3, r2, r3
 8017622:	e005      	b.n	8017630 <CircularQueue_Remove+0x1ba>
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	68da      	ldr	r2, [r3, #12]
 8017628:	897b      	ldrh	r3, [r7, #10]
 801762a:	441a      	add	r2, r3
 801762c:	7a7b      	ldrb	r3, [r7, #9]
 801762e:	4413      	add	r3, r2
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	699b      	ldr	r3, [r3, #24]
 8017638:	1e5a      	subs	r2, r3, #1
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 801763e:	683b      	ldr	r3, [r7, #0]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d002      	beq.n	801764a <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8017644:	683b      	ldr	r3, [r7, #0]
 8017646:	897a      	ldrh	r2, [r7, #10]
 8017648:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 801764a:	68fb      	ldr	r3, [r7, #12]
}
 801764c:	4618      	mov	r0, r3
 801764e:	3714      	adds	r7, #20
 8017650:	46bd      	mov	sp, r7
 8017652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017656:	4770      	bx	lr

08017658 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8017658:	b480      	push	{r7}
 801765a:	b087      	sub	sp, #28
 801765c:	af00      	add	r7, sp, #0
 801765e:	6078      	str	r0, [r7, #4]
 8017660:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8017662:	2300      	movs	r3, #0
 8017664:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8017666:	2300      	movs	r3, #0
 8017668:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	891b      	ldrh	r3, [r3, #8]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d101      	bne.n	8017676 <CircularQueue_Sense+0x1e>
 8017672:	2302      	movs	r3, #2
 8017674:	e000      	b.n	8017678 <CircularQueue_Sense+0x20>
 8017676:	2300      	movs	r3, #0
 8017678:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 801767a:	2300      	movs	r3, #0
 801767c:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 801767e:	2300      	movs	r3, #0
 8017680:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	695b      	ldr	r3, [r3, #20]
 8017686:	2b00      	cmp	r3, #0
 8017688:	f000 8090 	beq.w	80177ac <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	68db      	ldr	r3, [r3, #12]
 8017690:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	891b      	ldrh	r3, [r3, #8]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d121      	bne.n	80176de <CircularQueue_Sense+0x86>
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	681a      	ldr	r2, [r3, #0]
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	68db      	ldr	r3, [r3, #12]
 80176a2:	4413      	add	r3, r2
 80176a4:	781b      	ldrb	r3, [r3, #0]
 80176a6:	b29a      	uxth	r2, r3
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	6819      	ldr	r1, [r3, #0]
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	68db      	ldr	r3, [r3, #12]
 80176b0:	1c58      	adds	r0, r3, #1
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	685b      	ldr	r3, [r3, #4]
 80176b6:	4298      	cmp	r0, r3
 80176b8:	d306      	bcc.n	80176c8 <CircularQueue_Sense+0x70>
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	68d8      	ldr	r0, [r3, #12]
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	685b      	ldr	r3, [r3, #4]
 80176c2:	1ac3      	subs	r3, r0, r3
 80176c4:	3301      	adds	r3, #1
 80176c6:	e002      	b.n	80176ce <CircularQueue_Sense+0x76>
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	68db      	ldr	r3, [r3, #12]
 80176cc:	3301      	adds	r3, #1
 80176ce:	440b      	add	r3, r1
 80176d0:	781b      	ldrb	r3, [r3, #0]
 80176d2:	b29b      	uxth	r3, r3
 80176d4:	021b      	lsls	r3, r3, #8
 80176d6:	b29b      	uxth	r3, r3
 80176d8:	4413      	add	r3, r2
 80176da:	b29b      	uxth	r3, r3
 80176dc:	e001      	b.n	80176e2 <CircularQueue_Sense+0x8a>
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	891b      	ldrh	r3, [r3, #8]
 80176e2:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	7f1b      	ldrb	r3, [r3, #28]
 80176e8:	f003 0301 	and.w	r3, r3, #1
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d048      	beq.n	8017782 <CircularQueue_Sense+0x12a>
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	7f1b      	ldrb	r3, [r3, #28]
 80176f4:	f003 0302 	and.w	r3, r3, #2
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d142      	bne.n	8017782 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80176fc:	8a7b      	ldrh	r3, [r7, #18]
 80176fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017702:	4293      	cmp	r3, r2
 8017704:	d103      	bne.n	801770e <CircularQueue_Sense+0xb6>
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	891b      	ldrh	r3, [r3, #8]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d012      	beq.n	8017734 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	68da      	ldr	r2, [r3, #12]
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8017716:	429a      	cmp	r2, r3
 8017718:	d933      	bls.n	8017782 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	891b      	ldrh	r3, [r3, #8]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d02f      	beq.n	8017782 <CircularQueue_Sense+0x12a>
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	685a      	ldr	r2, [r3, #4]
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	68db      	ldr	r3, [r3, #12]
 801772a:	1ad3      	subs	r3, r2, r3
 801772c:	687a      	ldr	r2, [r7, #4]
 801772e:	8912      	ldrh	r2, [r2, #8]
 8017730:	4293      	cmp	r3, r2
 8017732:	d226      	bcs.n	8017782 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8017734:	2300      	movs	r3, #0
 8017736:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	891b      	ldrh	r3, [r3, #8]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d11d      	bne.n	801777c <CircularQueue_Sense+0x124>
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	681a      	ldr	r2, [r3, #0]
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	4413      	add	r3, r2
 8017748:	781b      	ldrb	r3, [r3, #0]
 801774a:	b29a      	uxth	r2, r3
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	6819      	ldr	r1, [r3, #0]
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	1c58      	adds	r0, r3, #1
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	685b      	ldr	r3, [r3, #4]
 8017758:	4298      	cmp	r0, r3
 801775a:	d305      	bcc.n	8017768 <CircularQueue_Sense+0x110>
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	685b      	ldr	r3, [r3, #4]
 8017760:	68f8      	ldr	r0, [r7, #12]
 8017762:	1ac3      	subs	r3, r0, r3
 8017764:	3301      	adds	r3, #1
 8017766:	e001      	b.n	801776c <CircularQueue_Sense+0x114>
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	3301      	adds	r3, #1
 801776c:	440b      	add	r3, r1
 801776e:	781b      	ldrb	r3, [r3, #0]
 8017770:	b29b      	uxth	r3, r3
 8017772:	021b      	lsls	r3, r3, #8
 8017774:	b29b      	uxth	r3, r3
 8017776:	4413      	add	r3, r2
 8017778:	b29b      	uxth	r3, r3
 801777a:	e001      	b.n	8017780 <CircularQueue_Sense+0x128>
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	891b      	ldrh	r3, [r3, #8]
 8017780:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	681a      	ldr	r2, [r3, #0]
 8017786:	7af9      	ldrb	r1, [r7, #11]
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	4419      	add	r1, r3
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	685b      	ldr	r3, [r3, #4]
 8017790:	4299      	cmp	r1, r3
 8017792:	d306      	bcc.n	80177a2 <CircularQueue_Sense+0x14a>
 8017794:	7af9      	ldrb	r1, [r7, #11]
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	4419      	add	r1, r3
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	685b      	ldr	r3, [r3, #4]
 801779e:	1acb      	subs	r3, r1, r3
 80177a0:	e002      	b.n	80177a8 <CircularQueue_Sense+0x150>
 80177a2:	7af9      	ldrb	r1, [r7, #11]
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	440b      	add	r3, r1
 80177a8:	4413      	add	r3, r2
 80177aa:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 80177ac:	683b      	ldr	r3, [r7, #0]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d002      	beq.n	80177b8 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 80177b2:	683b      	ldr	r3, [r7, #0]
 80177b4:	8a7a      	ldrh	r2, [r7, #18]
 80177b6:	801a      	strh	r2, [r3, #0]
  }
  return x;
 80177b8:	697b      	ldr	r3, [r7, #20]
}
 80177ba:	4618      	mov	r0, r3
 80177bc:	371c      	adds	r7, #28
 80177be:	46bd      	mov	sp, r7
 80177c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177c4:	4770      	bx	lr

080177c6 <htobe32>:
 80177c6:	ba00      	rev	r0, r0
 80177c8:	4770      	bx	lr

080177ca <BAES_CmacKeyRoll>:
 80177ca:	b530      	push	{r4, r5, lr}
 80177cc:	e9d0 3500 	ldrd	r3, r5, [r0]
 80177d0:	6884      	ldr	r4, [r0, #8]
 80177d2:	0fe1      	lsrs	r1, r4, #31
 80177d4:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 80177d8:	0fea      	lsrs	r2, r5, #31
 80177da:	6041      	str	r1, [r0, #4]
 80177dc:	68c1      	ldr	r1, [r0, #12]
 80177de:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 80177e2:	6002      	str	r2, [r0, #0]
 80177e4:	0fca      	lsrs	r2, r1, #31
 80177e6:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 80177ea:	6082      	str	r2, [r0, #8]
 80177ec:	0fdb      	lsrs	r3, r3, #31
 80177ee:	2287      	movs	r2, #135	; 0x87
 80177f0:	4353      	muls	r3, r2
 80177f2:	ea83 0341 	eor.w	r3, r3, r1, lsl #1
 80177f6:	60c3      	str	r3, [r0, #12]
 80177f8:	bd30      	pop	{r4, r5, pc}
	...

080177fc <HW_AES_WaitComplete>:
 80177fc:	4b04      	ldr	r3, [pc, #16]	; (8017810 <HW_AES_WaitComplete+0x14>)
 80177fe:	685a      	ldr	r2, [r3, #4]
 8017800:	07d2      	lsls	r2, r2, #31
 8017802:	d5fc      	bpl.n	80177fe <HW_AES_WaitComplete+0x2>
 8017804:	681a      	ldr	r2, [r3, #0]
 8017806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801780a:	601a      	str	r2, [r3, #0]
 801780c:	4770      	bx	lr
 801780e:	bf00      	nop
 8017810:	50060000 	.word	0x50060000

08017814 <HW_AES_Input>:
 8017814:	4b04      	ldr	r3, [pc, #16]	; (8017828 <HW_AES_Input+0x14>)
 8017816:	6802      	ldr	r2, [r0, #0]
 8017818:	609a      	str	r2, [r3, #8]
 801781a:	6842      	ldr	r2, [r0, #4]
 801781c:	609a      	str	r2, [r3, #8]
 801781e:	6882      	ldr	r2, [r0, #8]
 8017820:	609a      	str	r2, [r3, #8]
 8017822:	68c2      	ldr	r2, [r0, #12]
 8017824:	609a      	str	r2, [r3, #8]
 8017826:	4770      	bx	lr
 8017828:	50060000 	.word	0x50060000

0801782c <HW_AES_CcmGenerateTag>:
 801782c:	4909      	ldr	r1, [pc, #36]	; (8017854 <HW_AES_CcmGenerateTag+0x28>)
 801782e:	b508      	push	{r3, lr}
 8017830:	680b      	ldr	r3, [r1, #0]
 8017832:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8017836:	f043 0301 	orr.w	r3, r3, #1
 801783a:	600b      	str	r3, [r1, #0]
 801783c:	f7ff ffde 	bl	80177fc <HW_AES_WaitComplete>
 8017840:	68cb      	ldr	r3, [r1, #12]
 8017842:	6003      	str	r3, [r0, #0]
 8017844:	68cb      	ldr	r3, [r1, #12]
 8017846:	6043      	str	r3, [r0, #4]
 8017848:	68cb      	ldr	r3, [r1, #12]
 801784a:	6083      	str	r3, [r0, #8]
 801784c:	68cb      	ldr	r3, [r1, #12]
 801784e:	60c3      	str	r3, [r0, #12]
 8017850:	bd08      	pop	{r3, pc}
 8017852:	bf00      	nop
 8017854:	50060000 	.word	0x50060000

08017858 <Appli_StartProvisioningCb>:
 8017858:	2301      	movs	r3, #1
 801785a:	7003      	strb	r3, [r0, #0]
 801785c:	2300      	movs	r3, #0
 801785e:	7043      	strb	r3, [r0, #1]
 8017860:	7083      	strb	r3, [r0, #2]
 8017862:	70c3      	strb	r3, [r0, #3]
 8017864:	7103      	strb	r3, [r0, #4]
 8017866:	4770      	bx	lr

08017868 <Appli_PubKeyCb>:
 8017868:	4b01      	ldr	r3, [pc, #4]	; (8017870 <Appli_PubKeyCb+0x8>)
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	6858      	ldr	r0, [r3, #4]
 801786e:	4770      	bx	lr
 8017870:	20000318 	.word	0x20000318

08017874 <Appli_StaticOobCb>:
 8017874:	4b01      	ldr	r3, [pc, #4]	; (801787c <Appli_StaticOobCb+0x8>)
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	6918      	ldr	r0, [r3, #16]
 801787a:	4770      	bx	lr
 801787c:	20000318 	.word	0x20000318

08017880 <Appli_UnprovisionedIdentifyCb>:
 8017880:	4b01      	ldr	r3, [pc, #4]	; (8017888 <Appli_UnprovisionedIdentifyCb+0x8>)
 8017882:	685b      	ldr	r3, [r3, #4]
 8017884:	691b      	ldr	r3, [r3, #16]
 8017886:	4718      	bx	r3
 8017888:	20000318 	.word	0x20000318

0801788c <BnrgmProxyProtocol_SetDataInCharacteristic>:
 801788c:	4b01      	ldr	r3, [pc, #4]	; (8017894 <BnrgmProxyProtocol_SetDataInCharacteristic+0x8>)
 801788e:	f8a3 008a 	strh.w	r0, [r3, #138]	; 0x8a
 8017892:	4770      	bx	lr
 8017894:	20000318 	.word	0x20000318

08017898 <BnrgmProxyProtocol_SetDataOutCharacteristic>:
 8017898:	4b01      	ldr	r3, [pc, #4]	; (80178a0 <BnrgmProxyProtocol_SetDataOutCharacteristic+0x8>)
 801789a:	f8a3 008c 	strh.w	r0, [r3, #140]	; 0x8c
 801789e:	4770      	bx	lr
 80178a0:	20000318 	.word	0x20000318

080178a4 <MobleProvisionBearerGatt_RepeatTimerCallback>:
 80178a4:	4770      	bx	lr

080178a6 <MobleConfigModelGetNetIdx>:
 80178a6:	7843      	ldrb	r3, [r0, #1]
 80178a8:	7800      	ldrb	r0, [r0, #0]
 80178aa:	021b      	lsls	r3, r3, #8
 80178ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80178b0:	4418      	add	r0, r3
 80178b2:	4770      	bx	lr

080178b4 <MobleConfigModelPutKeyIdxs>:
 80178b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178b8:	2500      	movs	r5, #0
 80178ba:	4607      	mov	r7, r0
 80178bc:	4628      	mov	r0, r5
 80178be:	b2ee      	uxtb	r6, r5
 80178c0:	428e      	cmp	r6, r1
 80178c2:	d301      	bcc.n	80178c8 <MobleConfigModelPutKeyIdxs+0x14>
 80178c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178c8:	eb06 0807 	add.w	r8, r6, r7
 80178cc:	eb08 0448 	add.w	r4, r8, r8, lsl #1
 80178d0:	1064      	asrs	r4, r4, #1
 80178d2:	f018 0f01 	tst.w	r8, #1
 80178d6:	f833 9016 	ldrh.w	r9, [r3, r6, lsl #1]
 80178da:	f104 0e01 	add.w	lr, r4, #1
 80178de:	d10b      	bne.n	80178f8 <MobleConfigModelPutKeyIdxs+0x44>
 80178e0:	f802 9004 	strb.w	r9, [r2, r4]
 80178e4:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 80178e8:	f3c4 2403 	ubfx	r4, r4, #8, #4
 80178ec:	f802 400e 	strb.w	r4, [r2, lr]
 80178f0:	3002      	adds	r0, #2
 80178f2:	b280      	uxth	r0, r0
 80178f4:	3501      	adds	r5, #1
 80178f6:	e7e2      	b.n	80178be <MobleConfigModelPutKeyIdxs+0xa>
 80178f8:	f812 c004 	ldrb.w	ip, [r2, r4]
 80178fc:	ea4c 1c09 	orr.w	ip, ip, r9, lsl #4
 8017900:	f802 c004 	strb.w	ip, [r2, r4]
 8017904:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 8017908:	0924      	lsrs	r4, r4, #4
 801790a:	f802 400e 	strb.w	r4, [r2, lr]
 801790e:	3001      	adds	r0, #1
 8017910:	e7ef      	b.n	80178f2 <MobleConfigModelPutKeyIdxs+0x3e>

08017912 <BnrgmHealthModelAttention_TimerCallback>:
 8017912:	680b      	ldr	r3, [r1, #0]
 8017914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017916:	f892 306e 	ldrb.w	r3, [r2, #110]	; 0x6e
 801791a:	b133      	cbz	r3, 801792a <BnrgmHealthModelAttention_TimerCallback+0x18>
 801791c:	3b01      	subs	r3, #1
 801791e:	f882 306e 	strb.w	r3, [r2, #110]	; 0x6e
 8017922:	f8d1 31f4 	ldr.w	r3, [r1, #500]	; 0x1f4
 8017926:	b113      	cbz	r3, 801792e <BnrgmHealthModelAttention_TimerCallback+0x1c>
 8017928:	4718      	bx	r3
 801792a:	b100      	cbz	r0, 801792e <BnrgmHealthModelAttention_TimerCallback+0x1c>
 801792c:	7003      	strb	r3, [r0, #0]
 801792e:	4770      	bx	lr

08017930 <Test_UpperTester_Set08>:
 8017930:	4b02      	ldr	r3, [pc, #8]	; (801793c <Test_UpperTester_Set08+0xc>)
 8017932:	2201      	movs	r2, #1
 8017934:	801a      	strh	r2, [r3, #0]
 8017936:	2000      	movs	r0, #0
 8017938:	4770      	bx	lr
 801793a:	bf00      	nop
 801793c:	20000008 	.word	0x20000008

08017940 <Test_UpperTester_Set09>:
 8017940:	4b02      	ldr	r3, [pc, #8]	; (801794c <Test_UpperTester_Set09+0xc>)
 8017942:	2000      	movs	r0, #0
 8017944:	f8a3 00e4 	strh.w	r0, [r3, #228]	; 0xe4
 8017948:	4770      	bx	lr
 801794a:	bf00      	nop
 801794c:	20000318 	.word	0x20000318

08017950 <Test_UpperTester_Set14>:
 8017950:	4b02      	ldr	r3, [pc, #8]	; (801795c <Test_UpperTester_Set14+0xc>)
 8017952:	2203      	movs	r2, #3
 8017954:	801a      	strh	r2, [r3, #0]
 8017956:	2000      	movs	r0, #0
 8017958:	4770      	bx	lr
 801795a:	bf00      	nop
 801795c:	20000008 	.word	0x20000008

08017960 <MobleGattReadCallback>:
 8017960:	b538      	push	{r3, r4, r5, lr}
 8017962:	b928      	cbnz	r0, 8017970 <MobleGattReadCallback+0x10>
 8017964:	4b16      	ldr	r3, [pc, #88]	; (80179c0 <MobleGattReadCallback+0x60>)
 8017966:	4a17      	ldr	r2, [pc, #92]	; (80179c4 <MobleGattReadCallback+0x64>)
 8017968:	215d      	movs	r1, #93	; 0x5d
 801796a:	4817      	ldr	r0, [pc, #92]	; (80179c8 <MobleGattReadCallback+0x68>)
 801796c:	f011 f896 	bl	8028a9c <__assert_func>
 8017970:	b91a      	cbnz	r2, 801797a <MobleGattReadCallback+0x1a>
 8017972:	4b16      	ldr	r3, [pc, #88]	; (80179cc <MobleGattReadCallback+0x6c>)
 8017974:	4a13      	ldr	r2, [pc, #76]	; (80179c4 <MobleGattReadCallback+0x64>)
 8017976:	215e      	movs	r1, #94	; 0x5e
 8017978:	e7f7      	b.n	801796a <MobleGattReadCallback+0xa>
 801797a:	b91b      	cbnz	r3, 8017984 <MobleGattReadCallback+0x24>
 801797c:	4b14      	ldr	r3, [pc, #80]	; (80179d0 <MobleGattReadCallback+0x70>)
 801797e:	4a11      	ldr	r2, [pc, #68]	; (80179c4 <MobleGattReadCallback+0x64>)
 8017980:	215f      	movs	r1, #95	; 0x5f
 8017982:	e7f2      	b.n	801796a <MobleGattReadCallback+0xa>
 8017984:	f8d0 0164 	ldr.w	r0, [r0, #356]	; 0x164
 8017988:	b1c0      	cbz	r0, 80179bc <MobleGattReadCallback+0x5c>
 801798a:	6842      	ldr	r2, [r0, #4]
 801798c:	b1b2      	cbz	r2, 80179bc <MobleGattReadCallback+0x5c>
 801798e:	7885      	ldrb	r5, [r0, #2]
 8017990:	b1a5      	cbz	r5, 80179bc <MobleGattReadCallback+0x5c>
 8017992:	2400      	movs	r4, #0
 8017994:	68d0      	ldr	r0, [r2, #12]
 8017996:	3001      	adds	r0, #1
 8017998:	b280      	uxth	r0, r0
 801799a:	4281      	cmp	r1, r0
 801799c:	d106      	bne.n	80179ac <MobleGattReadCallback+0x4c>
 801799e:	7910      	ldrb	r0, [r2, #4]
 80179a0:	781b      	ldrb	r3, [r3, #0]
 80179a2:	4298      	cmp	r0, r3
 80179a4:	bf94      	ite	ls
 80179a6:	2002      	movls	r0, #2
 80179a8:	2003      	movhi	r0, #3
 80179aa:	bd38      	pop	{r3, r4, r5, pc}
 80179ac:	3401      	adds	r4, #1
 80179ae:	b2e0      	uxtb	r0, r4
 80179b0:	4285      	cmp	r5, r0
 80179b2:	f102 0210 	add.w	r2, r2, #16
 80179b6:	d8ed      	bhi.n	8017994 <MobleGattReadCallback+0x34>
 80179b8:	2001      	movs	r0, #1
 80179ba:	e7f6      	b.n	80179aa <MobleGattReadCallback+0x4a>
 80179bc:	2002      	movs	r0, #2
 80179be:	e7f4      	b.n	80179aa <MobleGattReadCallback+0x4a>
 80179c0:	08033440 	.word	0x08033440
 80179c4:	08031464 	.word	0x08031464
 80179c8:	08033446 	.word	0x08033446
 80179cc:	08033482 	.word	0x08033482
 80179d0:	08033bf8 	.word	0x08033bf8

080179d4 <BPKA_Reverse>:
 80179d4:	6803      	ldr	r3, [r0, #0]
 80179d6:	69c2      	ldr	r2, [r0, #28]
 80179d8:	ba1b      	rev	r3, r3
 80179da:	ba12      	rev	r2, r2
 80179dc:	6002      	str	r2, [r0, #0]
 80179de:	61c3      	str	r3, [r0, #28]
 80179e0:	6982      	ldr	r2, [r0, #24]
 80179e2:	6843      	ldr	r3, [r0, #4]
 80179e4:	ba12      	rev	r2, r2
 80179e6:	ba1b      	rev	r3, r3
 80179e8:	6042      	str	r2, [r0, #4]
 80179ea:	6183      	str	r3, [r0, #24]
 80179ec:	6942      	ldr	r2, [r0, #20]
 80179ee:	6883      	ldr	r3, [r0, #8]
 80179f0:	ba12      	rev	r2, r2
 80179f2:	ba1b      	rev	r3, r3
 80179f4:	6082      	str	r2, [r0, #8]
 80179f6:	6143      	str	r3, [r0, #20]
 80179f8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80179fc:	ba12      	rev	r2, r2
 80179fe:	ba1b      	rev	r3, r3
 8017a00:	60c2      	str	r2, [r0, #12]
 8017a02:	6103      	str	r3, [r0, #16]
 8017a04:	4770      	bx	lr

08017a06 <MoblePBADVEraseTransaction>:
 8017a06:	2100      	movs	r1, #0
 8017a08:	6041      	str	r1, [r0, #4]
 8017a0a:	228a      	movs	r2, #138	; 0x8a
 8017a0c:	3008      	adds	r0, #8
 8017a0e:	f011 b8d7 	b.w	8028bc0 <memset>
	...

08017a14 <BnrgmConfigModelProcessHeartbeat>:
 8017a14:	b530      	push	{r4, r5, lr}
 8017a16:	4c16      	ldr	r4, [pc, #88]	; (8017a70 <BnrgmConfigModelProcessHeartbeat+0x5c>)
 8017a18:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
 8017a1c:	3d01      	subs	r5, #1
 8017a1e:	f1b5 7f7a 	cmp.w	r5, #65536000	; 0x3e80000
 8017a22:	d223      	bcs.n	8017a6c <BnrgmConfigModelProcessHeartbeat+0x58>
 8017a24:	4293      	cmp	r3, r2
 8017a26:	d821      	bhi.n	8017a6c <BnrgmConfigModelProcessHeartbeat+0x58>
 8017a28:	f8b4 50e0 	ldrh.w	r5, [r4, #224]	; 0xe0
 8017a2c:	4285      	cmp	r5, r0
 8017a2e:	d11d      	bne.n	8017a6c <BnrgmConfigModelProcessHeartbeat+0x58>
 8017a30:	f8a4 10e2 	strh.w	r1, [r4, #226]	; 0xe2
 8017a34:	f8b4 10e4 	ldrh.w	r1, [r4, #228]	; 0xe4
 8017a38:	3201      	adds	r2, #1
 8017a3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017a3e:	4281      	cmp	r1, r0
 8017a40:	eba2 0303 	sub.w	r3, r2, r3
 8017a44:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
 8017a48:	bf1c      	itt	ne
 8017a4a:	3101      	addne	r1, #1
 8017a4c:	f8a4 10e4 	strhne.w	r1, [r4, #228]	; 0xe4
 8017a50:	b2db      	uxtb	r3, r3
 8017a52:	b10a      	cbz	r2, 8017a58 <BnrgmConfigModelProcessHeartbeat+0x44>
 8017a54:	4293      	cmp	r3, r2
 8017a56:	d201      	bcs.n	8017a5c <BnrgmConfigModelProcessHeartbeat+0x48>
 8017a58:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
 8017a5c:	f894 20e7 	ldrb.w	r2, [r4, #231]	; 0xe7
 8017a60:	429a      	cmp	r2, r3
 8017a62:	d201      	bcs.n	8017a68 <BnrgmConfigModelProcessHeartbeat+0x54>
 8017a64:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
 8017a68:	2000      	movs	r0, #0
 8017a6a:	e000      	b.n	8017a6e <BnrgmConfigModelProcessHeartbeat+0x5a>
 8017a6c:	2002      	movs	r0, #2
 8017a6e:	bd30      	pop	{r4, r5, pc}
 8017a70:	20000318 	.word	0x20000318

08017a74 <BnrgmHealthModel_ProcessFaultClearUnack>:
 8017a74:	4a09      	ldr	r2, [pc, #36]	; (8017a9c <BnrgmHealthModel_ProcessFaultClearUnack+0x28>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	8852      	ldrh	r2, [r2, #2]
 8017a7a:	b29b      	uxth	r3, r3
 8017a7c:	429a      	cmp	r2, r3
 8017a7e:	d10a      	bne.n	8017a96 <BnrgmHealthModel_ProcessFaultClearUnack+0x22>
 8017a80:	6803      	ldr	r3, [r0, #0]
 8017a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017a84:	2300      	movs	r3, #0
 8017a86:	6553      	str	r3, [r2, #84]	; 0x54
 8017a88:	6593      	str	r3, [r2, #88]	; 0x58
 8017a8a:	6802      	ldr	r2, [r0, #0]
 8017a8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8017a8e:	4618      	mov	r0, r3
 8017a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017a92:	6513      	str	r3, [r2, #80]	; 0x50
 8017a94:	4770      	bx	lr
 8017a96:	2003      	movs	r0, #3
 8017a98:	4770      	bx	lr
 8017a9a:	bf00      	nop
 8017a9c:	20000008 	.word	0x20000008

08017aa0 <BnrgmHealthModel_ProcessFaultTestUnack>:
 8017aa0:	4a0a      	ldr	r2, [pc, #40]	; (8017acc <BnrgmHealthModel_ProcessFaultTestUnack+0x2c>)
 8017aa2:	7819      	ldrb	r1, [r3, #0]
 8017aa4:	f892 2f20 	ldrb.w	r2, [r2, #3872]	; 0xf20
 8017aa8:	428a      	cmp	r2, r1
 8017aaa:	d001      	beq.n	8017ab0 <BnrgmHealthModel_ProcessFaultTestUnack+0x10>
 8017aac:	2003      	movs	r0, #3
 8017aae:	4770      	bx	lr
 8017ab0:	4907      	ldr	r1, [pc, #28]	; (8017ad0 <BnrgmHealthModel_ProcessFaultTestUnack+0x30>)
 8017ab2:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8017ab6:	8849      	ldrh	r1, [r1, #2]
 8017ab8:	b29b      	uxth	r3, r3
 8017aba:	4299      	cmp	r1, r3
 8017abc:	d1f6      	bne.n	8017aac <BnrgmHealthModel_ProcessFaultTestUnack+0xc>
 8017abe:	6803      	ldr	r3, [r0, #0]
 8017ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ac2:	2000      	movs	r0, #0
 8017ac4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8017ac8:	4770      	bx	lr
 8017aca:	bf00      	nop
 8017acc:	20000318 	.word	0x20000318
 8017ad0:	20000008 	.word	0x20000008

08017ad4 <MoblePalTimerFindFreeSlot>:
 8017ad4:	4b06      	ldr	r3, [pc, #24]	; (8017af0 <MoblePalTimerFindFreeSlot+0x1c>)
 8017ad6:	2000      	movs	r0, #0
 8017ad8:	2218      	movs	r2, #24
 8017ada:	fb02 f100 	mul.w	r1, r2, r0
 8017ade:	5cc9      	ldrb	r1, [r1, r3]
 8017ae0:	b121      	cbz	r1, 8017aec <MoblePalTimerFindFreeSlot+0x18>
 8017ae2:	3001      	adds	r0, #1
 8017ae4:	2832      	cmp	r0, #50	; 0x32
 8017ae6:	d1f8      	bne.n	8017ada <MoblePalTimerFindFreeSlot+0x6>
 8017ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017aec:	4770      	bx	lr
 8017aee:	bf00      	nop
 8017af0:	2000123c 	.word	0x2000123c

08017af4 <MoblePalTimerInit>:
 8017af4:	2300      	movs	r3, #0
 8017af6:	4a06      	ldr	r2, [pc, #24]	; (8017b10 <MoblePalTimerInit+0x1c>)
 8017af8:	b510      	push	{r4, lr}
 8017afa:	4618      	mov	r0, r3
 8017afc:	2418      	movs	r4, #24
 8017afe:	fb04 f103 	mul.w	r1, r4, r3
 8017b02:	3301      	adds	r3, #1
 8017b04:	2b32      	cmp	r3, #50	; 0x32
 8017b06:	5488      	strb	r0, [r1, r2]
 8017b08:	d1f9      	bne.n	8017afe <MoblePalTimerInit+0xa>
 8017b0a:	2000      	movs	r0, #0
 8017b0c:	bd10      	pop	{r4, pc}
 8017b0e:	bf00      	nop
 8017b10:	2000123c 	.word	0x2000123c

08017b14 <MoblePalTimerCreate>:
 8017b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b16:	460e      	mov	r6, r1
 8017b18:	4617      	mov	r7, r2
 8017b1a:	4605      	mov	r5, r0
 8017b1c:	b1a8      	cbz	r0, 8017b4a <MoblePalTimerCreate+0x36>
 8017b1e:	b1a1      	cbz	r1, 8017b4a <MoblePalTimerCreate+0x36>
 8017b20:	f7ff ffd8 	bl	8017ad4 <MoblePalTimerFindFreeSlot>
 8017b24:	1e03      	subs	r3, r0, #0
 8017b26:	db12      	blt.n	8017b4e <MoblePalTimerCreate+0x3a>
 8017b28:	4c0a      	ldr	r4, [pc, #40]	; (8017b54 <MoblePalTimerCreate+0x40>)
 8017b2a:	2018      	movs	r0, #24
 8017b2c:	4343      	muls	r3, r0
 8017b2e:	18e1      	adds	r1, r4, r3
 8017b30:	f604 7424 	addw	r4, r4, #3876	; 0xf24
 8017b34:	2201      	movs	r2, #1
 8017b36:	4423      	add	r3, r4
 8017b38:	f881 2f24 	strb.w	r2, [r1, #3876]	; 0xf24
 8017b3c:	f8c1 6f34 	str.w	r6, [r1, #3892]	; 0xf34
 8017b40:	f8c1 7f38 	str.w	r7, [r1, #3896]	; 0xf38
 8017b44:	2000      	movs	r0, #0
 8017b46:	602b      	str	r3, [r5, #0]
 8017b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b4a:	2003      	movs	r0, #3
 8017b4c:	e7fc      	b.n	8017b48 <MoblePalTimerCreate+0x34>
 8017b4e:	2004      	movs	r0, #4
 8017b50:	e7fa      	b.n	8017b48 <MoblePalTimerCreate+0x34>
 8017b52:	bf00      	nop
 8017b54:	20000318 	.word	0x20000318

08017b58 <MoblePalTimerSetup>:
 8017b58:	b570      	push	{r4, r5, r6, lr}
 8017b5a:	460d      	mov	r5, r1
 8017b5c:	4616      	mov	r6, r2
 8017b5e:	4604      	mov	r4, r0
 8017b60:	b168      	cbz	r0, 8017b7e <MoblePalTimerSetup+0x26>
 8017b62:	b161      	cbz	r1, 8017b7e <MoblePalTimerSetup+0x26>
 8017b64:	7803      	ldrb	r3, [r0, #0]
 8017b66:	2b01      	cmp	r3, #1
 8017b68:	d10b      	bne.n	8017b82 <MoblePalTimerSetup+0x2a>
 8017b6a:	f7f0 f987 	bl	8007e7c <HAL_GetTick>
 8017b6e:	2302      	movs	r3, #2
 8017b70:	4405      	add	r5, r0
 8017b72:	6060      	str	r0, [r4, #4]
 8017b74:	60a5      	str	r5, [r4, #8]
 8017b76:	7326      	strb	r6, [r4, #12]
 8017b78:	7023      	strb	r3, [r4, #0]
 8017b7a:	2000      	movs	r0, #0
 8017b7c:	bd70      	pop	{r4, r5, r6, pc}
 8017b7e:	2003      	movs	r0, #3
 8017b80:	e7fc      	b.n	8017b7c <MoblePalTimerSetup+0x24>
 8017b82:	2002      	movs	r0, #2
 8017b84:	e7fa      	b.n	8017b7c <MoblePalTimerSetup+0x24>

08017b86 <MoblePalTimerStart>:
 8017b86:	2200      	movs	r2, #0
 8017b88:	f7ff bfe6 	b.w	8017b58 <MoblePalTimerSetup>

08017b8c <BnrgmHealthModelSetAttentionTimer>:
 8017b8c:	6803      	ldr	r3, [r0, #0]
 8017b8e:	b510      	push	{r4, lr}
 8017b90:	4604      	mov	r4, r0
 8017b92:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017b94:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 8017b98:	b91b      	cbnz	r3, 8017ba2 <BnrgmHealthModelSetAttentionTimer+0x16>
 8017b9a:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	bd10      	pop	{r4, pc}
 8017ba2:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d0f9      	beq.n	8017b9e <BnrgmHealthModelSetAttentionTimer+0x12>
 8017baa:	4909      	ldr	r1, [pc, #36]	; (8017bd0 <BnrgmHealthModelSetAttentionTimer+0x44>)
 8017bac:	4622      	mov	r2, r4
 8017bae:	3070      	adds	r0, #112	; 0x70
 8017bb0:	f7ff ffb0 	bl	8017b14 <MoblePalTimerCreate>
 8017bb4:	2801      	cmp	r0, #1
 8017bb6:	d808      	bhi.n	8017bca <BnrgmHealthModelSetAttentionTimer+0x3e>
 8017bb8:	6823      	ldr	r3, [r4, #0]
 8017bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bc0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8017bc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017bc6:	f7ff bfde 	b.w	8017b86 <MoblePalTimerStart>
 8017bca:	2304      	movs	r3, #4
 8017bcc:	e7e7      	b.n	8017b9e <BnrgmHealthModelSetAttentionTimer+0x12>
 8017bce:	bf00      	nop
 8017bd0:	08017913 	.word	0x08017913

08017bd4 <BnrgmHealthModel_ProcessAttentionSetUnack>:
 8017bd4:	b508      	push	{r3, lr}
 8017bd6:	781a      	ldrb	r2, [r3, #0]
 8017bd8:	6803      	ldr	r3, [r0, #0]
 8017bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bdc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 8017be0:	f7ff ffd4 	bl	8017b8c <BnrgmHealthModelSetAttentionTimer>
 8017be4:	2000      	movs	r0, #0
 8017be6:	bd08      	pop	{r3, pc}

08017be8 <MoblePalTimerStartOnce>:
 8017be8:	2201      	movs	r2, #1
 8017bea:	f7ff bfb5 	b.w	8017b58 <MoblePalTimerSetup>
	...

08017bf0 <MoblePBADVRaiseTransTimeoutTimer>:
 8017bf0:	b510      	push	{r4, lr}
 8017bf2:	4604      	mov	r4, r0
 8017bf4:	4906      	ldr	r1, [pc, #24]	; (8017c10 <MoblePBADVRaiseTransTimeoutTimer+0x20>)
 8017bf6:	4602      	mov	r2, r0
 8017bf8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8017bfc:	f7ff ff8a 	bl	8017b14 <MoblePalTimerCreate>
 8017c00:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
 8017c04:	f64e 2160 	movw	r1, #60000	; 0xea60
 8017c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c0c:	f7ff bfec 	b.w	8017be8 <MoblePalTimerStartOnce>
 8017c10:	08027189 	.word	0x08027189

08017c14 <MoblePBADVRaiseLinkIdleTimer>:
 8017c14:	b510      	push	{r4, lr}
 8017c16:	4604      	mov	r4, r0
 8017c18:	4906      	ldr	r1, [pc, #24]	; (8017c34 <MoblePBADVRaiseLinkIdleTimer+0x20>)
 8017c1a:	4602      	mov	r2, r0
 8017c1c:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
 8017c20:	f7ff ff78 	bl	8017b14 <MoblePalTimerCreate>
 8017c24:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
 8017c28:	f64e 2160 	movw	r1, #60000	; 0xea60
 8017c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c30:	f7ff bfda 	b.w	8017be8 <MoblePalTimerStartOnce>
 8017c34:	08027191 	.word	0x08027191

08017c38 <MoblePalTimerStop>:
 8017c38:	b130      	cbz	r0, 8017c48 <MoblePalTimerStop+0x10>
 8017c3a:	7803      	ldrb	r3, [r0, #0]
 8017c3c:	2b02      	cmp	r3, #2
 8017c3e:	d105      	bne.n	8017c4c <MoblePalTimerStop+0x14>
 8017c40:	2301      	movs	r3, #1
 8017c42:	7003      	strb	r3, [r0, #0]
 8017c44:	2000      	movs	r0, #0
 8017c46:	4770      	bx	lr
 8017c48:	2003      	movs	r0, #3
 8017c4a:	4770      	bx	lr
 8017c4c:	2002      	movs	r0, #2
 8017c4e:	4770      	bx	lr

08017c50 <BnrgmConfigModelHeartbeatSubscription_TimerCallback>:
 8017c50:	4a08      	ldr	r2, [pc, #32]	; (8017c74 <BnrgmConfigModelHeartbeatSubscription_TimerCallback+0x24>)
 8017c52:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8017c56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017c5a:	d204      	bcs.n	8017c66 <BnrgmConfigModelHeartbeatSubscription_TimerCallback+0x16>
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8017c62:	f7ff bfe9 	b.w	8017c38 <MoblePalTimerStop>
 8017c66:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8017c6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d0f7      	beq.n	8017c62 <BnrgmConfigModelHeartbeatSubscription_TimerCallback+0x12>
 8017c72:	4770      	bx	lr
 8017c74:	20000318 	.word	0x20000318

08017c78 <MoblePalTimerDestroy>:
 8017c78:	b118      	cbz	r0, 8017c82 <MoblePalTimerDestroy+0xa>
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	7003      	strb	r3, [r0, #0]
 8017c7e:	4618      	mov	r0, r3
 8017c80:	4770      	bx	lr
 8017c82:	2003      	movs	r0, #3
 8017c84:	4770      	bx	lr
	...

08017c88 <MobleTransEraseTimer>:
 8017c88:	4602      	mov	r2, r0
 8017c8a:	6800      	ldr	r0, [r0, #0]
 8017c8c:	b570      	push	{r4, r5, r6, lr}
 8017c8e:	b170      	cbz	r0, 8017cae <MobleTransEraseTimer+0x26>
 8017c90:	4b0a      	ldr	r3, [pc, #40]	; (8017cbc <MobleTransEraseTimer+0x34>)
 8017c92:	f893 52dc 	ldrb.w	r5, [r3, #732]	; 0x2dc
 8017c96:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8017c9a:	2100      	movs	r1, #0
 8017c9c:	3314      	adds	r3, #20
 8017c9e:	460e      	mov	r6, r1
 8017ca0:	b2cc      	uxtb	r4, r1
 8017ca2:	42a5      	cmp	r5, r4
 8017ca4:	d804      	bhi.n	8017cb0 <MobleTransEraseTimer+0x28>
 8017ca6:	f7ff ffe7 	bl	8017c78 <MoblePalTimerDestroy>
 8017caa:	2300      	movs	r3, #0
 8017cac:	6013      	str	r3, [r2, #0]
 8017cae:	bd70      	pop	{r4, r5, r6, pc}
 8017cb0:	429a      	cmp	r2, r3
 8017cb2:	bf08      	it	eq
 8017cb4:	7416      	strbeq	r6, [r2, #16]
 8017cb6:	3101      	adds	r1, #1
 8017cb8:	332c      	adds	r3, #44	; 0x2c
 8017cba:	e7f1      	b.n	8017ca0 <MobleTransEraseTimer+0x18>
 8017cbc:	20001410 	.word	0x20001410

08017cc0 <MobleTransSarOnTimeout>:
 8017cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cc2:	f101 0014 	add.w	r0, r1, #20
 8017cc6:	460c      	mov	r4, r1
 8017cc8:	f7ff ffde 	bl	8017c88 <MobleTransEraseTimer>
 8017ccc:	f104 0020 	add.w	r0, r4, #32
 8017cd0:	f7ff ffda 	bl	8017c88 <MobleTransEraseTimer>
 8017cd4:	490f      	ldr	r1, [pc, #60]	; (8017d14 <MobleTransSarOnTimeout+0x54>)
 8017cd6:	e9d1 36b8 	ldrd	r3, r6, [r1, #736]	; 0x2e0
 8017cda:	2200      	movs	r2, #0
 8017cdc:	4610      	mov	r0, r2
 8017cde:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8017ce2:	f891 52dc 	ldrb.w	r5, [r1, #732]	; 0x2dc
 8017ce6:	4295      	cmp	r5, r2
 8017ce8:	dc02      	bgt.n	8017cf0 <MobleTransSarOnTimeout+0x30>
 8017cea:	2300      	movs	r3, #0
 8017cec:	7023      	strb	r3, [r4, #0]
 8017cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cf0:	781d      	ldrb	r5, [r3, #0]
 8017cf2:	b15d      	cbz	r5, 8017d0c <MobleTransSarOnTimeout+0x4c>
 8017cf4:	885f      	ldrh	r7, [r3, #2]
 8017cf6:	88a5      	ldrh	r5, [r4, #4]
 8017cf8:	42af      	cmp	r7, r5
 8017cfa:	d107      	bne.n	8017d0c <MobleTransSarOnTimeout+0x4c>
 8017cfc:	68e5      	ldr	r5, [r4, #12]
 8017cfe:	685f      	ldr	r7, [r3, #4]
 8017d00:	42af      	cmp	r7, r5
 8017d02:	bf02      	ittt	eq
 8017d04:	fb0c f502 	muleq.w	r5, ip, r2
 8017d08:	7018      	strbeq	r0, [r3, #0]
 8017d0a:	5570      	strbeq	r0, [r6, r5]
 8017d0c:	3201      	adds	r2, #1
 8017d0e:	332c      	adds	r3, #44	; 0x2c
 8017d10:	e7e7      	b.n	8017ce2 <MobleTransSarOnTimeout+0x22>
 8017d12:	bf00      	nop
 8017d14:	20001410 	.word	0x20001410

08017d18 <MoblePBADVEraseTimer>:
 8017d18:	4602      	mov	r2, r0
 8017d1a:	6800      	ldr	r0, [r0, #0]
 8017d1c:	b508      	push	{r3, lr}
 8017d1e:	b118      	cbz	r0, 8017d28 <MoblePBADVEraseTimer+0x10>
 8017d20:	f7ff ffaa 	bl	8017c78 <MoblePalTimerDestroy>
 8017d24:	2300      	movs	r3, #0
 8017d26:	6013      	str	r3, [r2, #0]
 8017d28:	bd08      	pop	{r3, pc}

08017d2a <MoblePBADVClearTimers>:
 8017d2a:	b508      	push	{r3, lr}
 8017d2c:	4601      	mov	r1, r0
 8017d2e:	f500 70aa 	add.w	r0, r0, #340	; 0x154
 8017d32:	f7ff fff1 	bl	8017d18 <MoblePBADVEraseTimer>
 8017d36:	f501 70a8 	add.w	r0, r1, #336	; 0x150
 8017d3a:	f7ff ffed 	bl	8017d18 <MoblePBADVEraseTimer>
 8017d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017d42:	f501 70a6 	add.w	r0, r1, #332	; 0x14c
 8017d46:	f7ff bfe7 	b.w	8017d18 <MoblePBADVEraseTimer>
	...

08017d4c <BnrgmStackNodeIdentityTimerCallback>:
 8017d4c:	4b03      	ldr	r3, [pc, #12]	; (8017d5c <BnrgmStackNodeIdentityTimerCallback+0x10>)
 8017d4e:	f8d1 017c 	ldr.w	r0, [r1, #380]	; 0x17c
 8017d52:	2200      	movs	r2, #0
 8017d54:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8017d58:	f7ff bf8e 	b.w	8017c78 <MoblePalTimerDestroy>
 8017d5c:	20000318 	.word	0x20000318

08017d60 <BnrgmHealthModelSetPublishTimer.isra.0>:
 8017d60:	b538      	push	{r3, r4, r5, lr}
 8017d62:	6803      	ldr	r3, [r0, #0]
 8017d64:	4a1e      	ldr	r2, [pc, #120]	; (8017de0 <BnrgmHealthModelSetPublishTimer.isra.0+0x80>)
 8017d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d68:	f8b2 110a 	ldrh.w	r1, [r2, #266]	; 0x10a
 8017d6c:	f8a3 105e 	strh.w	r1, [r3, #94]	; 0x5e
 8017d70:	f892 110f 	ldrb.w	r1, [r2, #271]	; 0x10f
 8017d74:	f8b2 2108 	ldrh.w	r2, [r2, #264]	; 0x108
 8017d78:	f883 1063 	strb.w	r1, [r3, #99]	; 0x63
 8017d7c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8017d80:	4605      	mov	r5, r0
 8017d82:	f002 043f 	and.w	r4, r2, #63	; 0x3f
 8017d86:	f3c2 1181 	ubfx	r1, r2, #6, #2
 8017d8a:	d11c      	bne.n	8017dc6 <BnrgmHealthModelSetPublishTimer.isra.0+0x66>
 8017d8c:	2264      	movs	r2, #100	; 0x64
 8017d8e:	fb14 f402 	smulbb	r4, r4, r2
 8017d92:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8017d96:	b112      	cbz	r2, 8017d9e <BnrgmHealthModelSetPublishTimer.isra.0+0x3e>
 8017d98:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
 8017d9c:	40d4      	lsrs	r4, r2
 8017d9e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8017da0:	4910      	ldr	r1, [pc, #64]	; (8017de4 <BnrgmHealthModelSetPublishTimer.isra.0+0x84>)
 8017da2:	f7ff ff69 	bl	8017c78 <MoblePalTimerDestroy>
 8017da6:	682b      	ldr	r3, [r5, #0]
 8017da8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017daa:	462a      	mov	r2, r5
 8017dac:	3074      	adds	r0, #116	; 0x74
 8017dae:	f7ff feb1 	bl	8017b14 <MoblePalTimerCreate>
 8017db2:	2801      	cmp	r0, #1
 8017db4:	d813      	bhi.n	8017dde <BnrgmHealthModelSetPublishTimer.isra.0+0x7e>
 8017db6:	682b      	ldr	r3, [r5, #0]
 8017db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dba:	b2a1      	uxth	r1, r4
 8017dbc:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8017dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dc2:	f7ff bee0 	b.w	8017b86 <MoblePalTimerStart>
 8017dc6:	2901      	cmp	r1, #1
 8017dc8:	d103      	bne.n	8017dd2 <BnrgmHealthModelSetPublishTimer.isra.0+0x72>
 8017dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017dce:	4354      	muls	r4, r2
 8017dd0:	e7df      	b.n	8017d92 <BnrgmHealthModelSetPublishTimer.isra.0+0x32>
 8017dd2:	2902      	cmp	r1, #2
 8017dd4:	bf14      	ite	ne
 8017dd6:	4a04      	ldrne	r2, [pc, #16]	; (8017de8 <BnrgmHealthModelSetPublishTimer.isra.0+0x88>)
 8017dd8:	f242 7210 	movweq	r2, #10000	; 0x2710
 8017ddc:	e7f7      	b.n	8017dce <BnrgmHealthModelSetPublishTimer.isra.0+0x6e>
 8017dde:	bd38      	pop	{r3, r4, r5, pc}
 8017de0:	20000318 	.word	0x20000318
 8017de4:	08025275 	.word	0x08025275
 8017de8:	000927c0 	.word	0x000927c0

08017dec <BnrgmHealthModel_ProcessPeriodSetUnack>:
 8017dec:	b508      	push	{r3, lr}
 8017dee:	781b      	ldrb	r3, [r3, #0]
 8017df0:	2b0f      	cmp	r3, #15
 8017df2:	d807      	bhi.n	8017e04 <BnrgmHealthModel_ProcessPeriodSetUnack+0x18>
 8017df4:	6802      	ldr	r2, [r0, #0]
 8017df6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8017df8:	f882 306d 	strb.w	r3, [r2, #109]	; 0x6d
 8017dfc:	f7ff ffb0 	bl	8017d60 <BnrgmHealthModelSetPublishTimer.isra.0>
 8017e00:	2000      	movs	r0, #0
 8017e02:	bd08      	pop	{r3, pc}
 8017e04:	2003      	movs	r0, #3
 8017e06:	e7fc      	b.n	8017e02 <BnrgmHealthModel_ProcessPeriodSetUnack+0x16>

08017e08 <MoblePalTimerProcess>:
 8017e08:	b570      	push	{r4, r5, r6, lr}
 8017e0a:	4c13      	ldr	r4, [pc, #76]	; (8017e58 <MoblePalTimerProcess+0x50>)
 8017e0c:	2600      	movs	r6, #0
 8017e0e:	2501      	movs	r5, #1
 8017e10:	7823      	ldrb	r3, [r4, #0]
 8017e12:	2b02      	cmp	r3, #2
 8017e14:	d117      	bne.n	8017e46 <MoblePalTimerProcess+0x3e>
 8017e16:	f7f0 f831 	bl	8007e7c <HAL_GetTick>
 8017e1a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8017e1e:	429a      	cmp	r2, r3
 8017e20:	d20f      	bcs.n	8017e42 <MoblePalTimerProcess+0x3a>
 8017e22:	4298      	cmp	r0, r3
 8017e24:	d201      	bcs.n	8017e2a <MoblePalTimerProcess+0x22>
 8017e26:	4290      	cmp	r0, r2
 8017e28:	d20d      	bcs.n	8017e46 <MoblePalTimerProcess+0x3e>
 8017e2a:	7b21      	ldrb	r1, [r4, #12]
 8017e2c:	b991      	cbnz	r1, 8017e54 <MoblePalTimerProcess+0x4c>
 8017e2e:	1a9a      	subs	r2, r3, r2
 8017e30:	4402      	add	r2, r0
 8017e32:	6060      	str	r0, [r4, #4]
 8017e34:	60a2      	str	r2, [r4, #8]
 8017e36:	6923      	ldr	r3, [r4, #16]
 8017e38:	b12b      	cbz	r3, 8017e46 <MoblePalTimerProcess+0x3e>
 8017e3a:	6961      	ldr	r1, [r4, #20]
 8017e3c:	4620      	mov	r0, r4
 8017e3e:	4798      	blx	r3
 8017e40:	e001      	b.n	8017e46 <MoblePalTimerProcess+0x3e>
 8017e42:	4298      	cmp	r0, r3
 8017e44:	d2ef      	bcs.n	8017e26 <MoblePalTimerProcess+0x1e>
 8017e46:	3601      	adds	r6, #1
 8017e48:	2e32      	cmp	r6, #50	; 0x32
 8017e4a:	f104 0418 	add.w	r4, r4, #24
 8017e4e:	d1df      	bne.n	8017e10 <MoblePalTimerProcess+0x8>
 8017e50:	2000      	movs	r0, #0
 8017e52:	bd70      	pop	{r4, r5, r6, pc}
 8017e54:	7025      	strb	r5, [r4, #0]
 8017e56:	e7ee      	b.n	8017e36 <MoblePalTimerProcess+0x2e>
 8017e58:	2000123c 	.word	0x2000123c

08017e5c <MoblePalBluetoothCheckManufacturerID>:
 8017e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017e5e:	f10d 030e 	add.w	r3, sp, #14
 8017e62:	9300      	str	r3, [sp, #0]
 8017e64:	f10d 0209 	add.w	r2, sp, #9
 8017e68:	ab03      	add	r3, sp, #12
 8017e6a:	f10d 010a 	add.w	r1, sp, #10
 8017e6e:	a802      	add	r0, sp, #8
 8017e70:	f7fd fbee 	bl	8015650 <hci_read_local_version_information>
 8017e74:	2800      	cmp	r0, #0
 8017e76:	bf18      	it	ne
 8017e78:	2002      	movne	r0, #2
 8017e7a:	b005      	add	sp, #20
 8017e7c:	f85d fb04 	ldr.w	pc, [sp], #4

08017e80 <MoblePalBluetoothSetConnectionInterval>:
 8017e80:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8017e84:	4358      	muls	r0, r3
 8017e86:	4b04      	ldr	r3, [pc, #16]	; (8017e98 <MoblePalBluetoothSetConnectionInterval+0x18>)
 8017e88:	f8d3 2350 	ldr.w	r2, [r3, #848]	; 0x350
 8017e8c:	4282      	cmp	r2, r0
 8017e8e:	bf18      	it	ne
 8017e90:	f8c3 0350 	strne.w	r0, [r3, #848]	; 0x350
 8017e94:	4770      	bx	lr
 8017e96:	bf00      	nop
 8017e98:	20001410 	.word	0x20001410

08017e9c <MoblePalBluetoothGattAddService>:
 8017e9c:	b510      	push	{r4, lr}
 8017e9e:	b086      	sub	sp, #24
 8017ea0:	461c      	mov	r4, r3
 8017ea2:	f8ad 100e 	strh.w	r1, [sp, #14]
 8017ea6:	b1ab      	cbz	r3, 8017ed4 <MoblePalBluetoothGattAddService+0x38>
 8017ea8:	2801      	cmp	r0, #1
 8017eaa:	f10d 0316 	add.w	r3, sp, #22
 8017eae:	9300      	str	r3, [sp, #0]
 8017eb0:	f10d 010e 	add.w	r1, sp, #14
 8017eb4:	4613      	mov	r3, r2
 8017eb6:	bf0c      	ite	eq
 8017eb8:	4602      	moveq	r2, r0
 8017eba:	2202      	movne	r2, #2
 8017ebc:	2001      	movs	r0, #1
 8017ebe:	f7fc fd82 	bl	80149c6 <aci_gatt_add_service>
 8017ec2:	b948      	cbnz	r0, 8017ed8 <MoblePalBluetoothGattAddService+0x3c>
 8017ec4:	4a05      	ldr	r2, [pc, #20]	; (8017edc <MoblePalBluetoothGattAddService+0x40>)
 8017ec6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017eca:	6023      	str	r3, [r4, #0]
 8017ecc:	f8a2 3340 	strh.w	r3, [r2, #832]	; 0x340
 8017ed0:	b006      	add	sp, #24
 8017ed2:	bd10      	pop	{r4, pc}
 8017ed4:	2003      	movs	r0, #3
 8017ed6:	e7fb      	b.n	8017ed0 <MoblePalBluetoothGattAddService+0x34>
 8017ed8:	2002      	movs	r0, #2
 8017eda:	e7f9      	b.n	8017ed0 <MoblePalBluetoothGattAddService+0x34>
 8017edc:	20001410 	.word	0x20001410

08017ee0 <MoblePalBluetoothGattDelService>:
 8017ee0:	b508      	push	{r3, lr}
 8017ee2:	b280      	uxth	r0, r0
 8017ee4:	f7fd f85e 	bl	8014fa4 <aci_gatt_del_service>
 8017ee8:	2800      	cmp	r0, #0
 8017eea:	bf18      	it	ne
 8017eec:	2002      	movne	r0, #2
 8017eee:	bd08      	pop	{r3, pc}

08017ef0 <MoblePalBluetoothGattAddCharacteristic>:
 8017ef0:	b570      	push	{r4, r5, r6, lr}
 8017ef2:	b08a      	sub	sp, #40	; 0x28
 8017ef4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8017ef6:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8017efa:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8017efe:	f8ad 101e 	strh.w	r1, [sp, #30]
 8017f02:	2e00      	cmp	r6, #0
 8017f04:	d037      	beq.n	8017f76 <MoblePalBluetoothGattAddCharacteristic+0x86>
 8017f06:	f014 0101 	ands.w	r1, r4, #1
 8017f0a:	bf1c      	itt	ne
 8017f0c:	f084 0401 	eorne.w	r4, r4, #1
 8017f10:	2102      	movne	r1, #2
 8017f12:	f014 0f02 	tst.w	r4, #2
 8017f16:	bf1c      	itt	ne
 8017f18:	f084 0402 	eorne.w	r4, r4, #2
 8017f1c:	f041 0104 	orrne.w	r1, r1, #4
 8017f20:	f014 0f04 	tst.w	r4, #4
 8017f24:	bf1c      	itt	ne
 8017f26:	f084 0404 	eorne.w	r4, r4, #4
 8017f2a:	f041 0108 	orrne.w	r1, r1, #8
 8017f2e:	f014 0f08 	tst.w	r4, #8
 8017f32:	bf1c      	itt	ne
 8017f34:	f084 0408 	eorne.w	r4, r4, #8
 8017f38:	f041 0110 	orrne.w	r1, r1, #16
 8017f3c:	432c      	orrs	r4, r5
 8017f3e:	d11a      	bne.n	8017f76 <MoblePalBluetoothGattAddCharacteristic+0x86>
 8017f40:	f10d 0526 	add.w	r5, sp, #38	; 0x26
 8017f44:	9505      	str	r5, [sp, #20]
 8017f46:	1e5d      	subs	r5, r3, #1
 8017f48:	426b      	negs	r3, r5
 8017f4a:	416b      	adcs	r3, r5
 8017f4c:	9304      	str	r3, [sp, #16]
 8017f4e:	2310      	movs	r3, #16
 8017f50:	9303      	str	r3, [sp, #12]
 8017f52:	f3c1 0380 	ubfx	r3, r1, #2, #1
 8017f56:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8017f5a:	9100      	str	r1, [sp, #0]
 8017f5c:	4613      	mov	r3, r2
 8017f5e:	2101      	movs	r1, #1
 8017f60:	f10d 021e 	add.w	r2, sp, #30
 8017f64:	b280      	uxth	r0, r0
 8017f66:	f7fc fe04 	bl	8014b72 <aci_gatt_add_char>
 8017f6a:	b930      	cbnz	r0, 8017f7a <MoblePalBluetoothGattAddCharacteristic+0x8a>
 8017f6c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8017f70:	6033      	str	r3, [r6, #0]
 8017f72:	b00a      	add	sp, #40	; 0x28
 8017f74:	bd70      	pop	{r4, r5, r6, pc}
 8017f76:	2003      	movs	r0, #3
 8017f78:	e7fb      	b.n	8017f72 <MoblePalBluetoothGattAddCharacteristic+0x82>
 8017f7a:	2002      	movs	r0, #2
 8017f7c:	e7f9      	b.n	8017f72 <MoblePalBluetoothGattAddCharacteristic+0x82>

08017f7e <MoblePalBluetoothGattDelCharacteristic>:
 8017f7e:	b508      	push	{r3, lr}
 8017f80:	b289      	uxth	r1, r1
 8017f82:	b280      	uxth	r0, r0
 8017f84:	f7fc ffa6 	bl	8014ed4 <aci_gatt_del_char>
 8017f88:	2800      	cmp	r0, #0
 8017f8a:	bf18      	it	ne
 8017f8c:	2002      	movne	r0, #2
 8017f8e:	bd08      	pop	{r3, pc}

08017f90 <MoblePalBluetoothGetConnectionState>:
 8017f90:	4b06      	ldr	r3, [pc, #24]	; (8017fac <MoblePalBluetoothGetConnectionState+0x1c>)
 8017f92:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8017f96:	f013 0f34 	tst.w	r3, #52	; 0x34
 8017f9a:	d105      	bne.n	8017fa8 <MoblePalBluetoothGetConnectionState+0x18>
 8017f9c:	f013 0f08 	tst.w	r3, #8
 8017fa0:	bf14      	ite	ne
 8017fa2:	2001      	movne	r0, #1
 8017fa4:	2002      	moveq	r0, #2
 8017fa6:	4770      	bx	lr
 8017fa8:	2000      	movs	r0, #0
 8017faa:	4770      	bx	lr
 8017fac:	20001410 	.word	0x20001410

08017fb0 <MoblePalBluetoothSetBluetoothAddress>:
 8017fb0:	4b06      	ldr	r3, [pc, #24]	; (8017fcc <MoblePalBluetoothSetBluetoothAddress+0x1c>)
 8017fb2:	6802      	ldr	r2, [r0, #0]
 8017fb4:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
 8017fb8:	8882      	ldrh	r2, [r0, #4]
 8017fba:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 8017fbe:	2201      	movs	r2, #1
 8017fc0:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
 8017fc4:	f883 1363 	strb.w	r1, [r3, #867]	; 0x363
 8017fc8:	2000      	movs	r0, #0
 8017fca:	4770      	bx	lr
 8017fcc:	20001410 	.word	0x20001410

08017fd0 <MoblePalBluetoothGetBluetoothAddress>:
 8017fd0:	b508      	push	{r3, lr}
 8017fd2:	b188      	cbz	r0, 8017ff8 <MoblePalBluetoothGetBluetoothAddress+0x28>
 8017fd4:	4909      	ldr	r1, [pc, #36]	; (8017ffc <MoblePalBluetoothGetBluetoothAddress+0x2c>)
 8017fd6:	f891 3362 	ldrb.w	r3, [r1, #866]	; 0x362
 8017fda:	2b01      	cmp	r3, #1
 8017fdc:	d106      	bne.n	8017fec <MoblePalBluetoothGetBluetoothAddress+0x1c>
 8017fde:	2206      	movs	r2, #6
 8017fe0:	f501 7157 	add.w	r1, r1, #860	; 0x35c
 8017fe4:	f010 fdd2 	bl	8028b8c <memmove>
 8017fe8:	2000      	movs	r0, #0
 8017fea:	bd08      	pop	{r3, pc}
 8017fec:	f7fd fb76 	bl	80156dc <hci_read_bd_addr>
 8017ff0:	2800      	cmp	r0, #0
 8017ff2:	bf18      	it	ne
 8017ff4:	2002      	movne	r0, #2
 8017ff6:	e7f8      	b.n	8017fea <MoblePalBluetoothGetBluetoothAddress+0x1a>
 8017ff8:	2003      	movs	r0, #3
 8017ffa:	e7f6      	b.n	8017fea <MoblePalBluetoothGetBluetoothAddress+0x1a>
 8017ffc:	20001410 	.word	0x20001410

08018000 <MoblePalBluetoothInit>:
 8018000:	b570      	push	{r4, r5, r6, lr}
 8018002:	4c12      	ldr	r4, [pc, #72]	; (801804c <MoblePalBluetoothInit+0x4c>)
 8018004:	4606      	mov	r6, r0
 8018006:	461d      	mov	r5, r3
 8018008:	f884 1364 	strb.w	r1, [r4, #868]	; 0x364
 801800c:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
 8018010:	f7ff ff24 	bl	8017e5c <MoblePalBluetoothCheckManufacturerID>
 8018014:	2801      	cmp	r0, #1
 8018016:	d818      	bhi.n	801804a <MoblePalBluetoothInit+0x4a>
 8018018:	79e9      	ldrb	r1, [r5, #7]
 801801a:	4628      	mov	r0, r5
 801801c:	f7ff ffc8 	bl	8017fb0 <MoblePalBluetoothSetBluetoothAddress>
 8018020:	2801      	cmp	r0, #1
 8018022:	d812      	bhi.n	801804a <MoblePalBluetoothInit+0x4a>
 8018024:	9b05      	ldr	r3, [sp, #20]
 8018026:	f8c4 3370 	str.w	r3, [r4, #880]	; 0x370
 801802a:	9b04      	ldr	r3, [sp, #16]
 801802c:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
 8018030:	f894 3363 	ldrb.w	r3, [r4, #867]	; 0x363
 8018034:	f8c4 636c 	str.w	r6, [r4, #876]	; 0x36c
 8018038:	2b01      	cmp	r3, #1
 801803a:	bf01      	itttt	eq
 801803c:	f8d4 335c 	ldreq.w	r3, [r4, #860]	; 0x35c
 8018040:	602b      	streq	r3, [r5, #0]
 8018042:	f8b4 3360 	ldrheq.w	r3, [r4, #864]	; 0x360
 8018046:	80ab      	strheq	r3, [r5, #4]
 8018048:	2000      	movs	r0, #0
 801804a:	bd70      	pop	{r4, r5, r6, pc}
 801804c:	20001410 	.word	0x20001410

08018050 <MoblePalBluetoothRandom>:
 8018050:	b507      	push	{r0, r1, r2, lr}
 8018052:	4668      	mov	r0, sp
 8018054:	f7fd fc4c 	bl	80158f0 <hci_le_rand>
 8018058:	466a      	mov	r2, sp
 801805a:	2308      	movs	r3, #8
 801805c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8018060:	b920      	cbnz	r0, 801806c <MoblePalBluetoothRandom+0x1c>
 8018062:	3b01      	subs	r3, #1
 8018064:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8018068:	d1f8      	bne.n	801805c <MoblePalBluetoothRandom+0xc>
 801806a:	e7f2      	b.n	8018052 <MoblePalBluetoothRandom+0x2>
 801806c:	b003      	add	sp, #12
 801806e:	f85d fb04 	ldr.w	pc, [sp], #4

08018072 <MoblePBADVRandom>:
 8018072:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018074:	2400      	movs	r4, #0
 8018076:	ad01      	add	r5, sp, #4
 8018078:	f7ff ffea 	bl	8018050 <MoblePalBluetoothRandom>
 801807c:	3401      	adds	r4, #1
 801807e:	2c04      	cmp	r4, #4
 8018080:	f805 0b01 	strb.w	r0, [r5], #1
 8018084:	d1f8      	bne.n	8018078 <MoblePBADVRandom+0x6>
 8018086:	9801      	ldr	r0, [sp, #4]
 8018088:	b003      	add	sp, #12
 801808a:	bd30      	pop	{r4, r5, pc}

0801808c <MoblePBADVGetNewLink>:
 801808c:	b570      	push	{r4, r5, r6, lr}
 801808e:	7a04      	ldrb	r4, [r0, #8]
 8018090:	4605      	mov	r5, r0
 8018092:	b11c      	cbz	r4, 801809c <MoblePBADVGetNewLink+0x10>
 8018094:	f890 317c 	ldrb.w	r3, [r0, #380]	; 0x17c
 8018098:	bbc3      	cbnz	r3, 801810c <MoblePBADVGetNewLink+0x80>
 801809a:	2401      	movs	r4, #1
 801809c:	f44f 76ba 	mov.w	r6, #372	; 0x174
 80180a0:	fb06 5304 	mla	r3, r6, r4, r5
 80180a4:	60dd      	str	r5, [r3, #12]
 80180a6:	f7ff ffe4 	bl	8018072 <MoblePBADVRandom>
 80180aa:	2300      	movs	r3, #0
 80180ac:	fb06 5203 	mla	r2, r6, r3, r5
 80180b0:	7a11      	ldrb	r1, [r2, #8]
 80180b2:	b131      	cbz	r1, 80180c2 <MoblePBADVGetNewLink+0x36>
 80180b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80180b6:	4282      	cmp	r2, r0
 80180b8:	d103      	bne.n	80180c2 <MoblePBADVGetNewLink+0x36>
 80180ba:	f7ff ffda 	bl	8018072 <MoblePBADVRandom>
 80180be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80180c2:	3301      	adds	r3, #1
 80180c4:	2b02      	cmp	r3, #2
 80180c6:	d1f1      	bne.n	80180ac <MoblePBADVGetNewLink+0x20>
 80180c8:	f44f 73ba 	mov.w	r3, #372	; 0x174
 80180cc:	435c      	muls	r4, r3
 80180ce:	192b      	adds	r3, r5, r4
 80180d0:	f104 0608 	add.w	r6, r4, #8
 80180d4:	2100      	movs	r1, #0
 80180d6:	2201      	movs	r2, #1
 80180d8:	442e      	add	r6, r5
 80180da:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 80180de:	6258      	str	r0, [r3, #36]	; 0x24
 80180e0:	721a      	strb	r2, [r3, #8]
 80180e2:	e9c3 1155 	strd	r1, r1, [r3, #340]	; 0x154
 80180e6:	e9c3 1157 	strd	r1, r1, [r3, #348]	; 0x15c
 80180ea:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
 80180ee:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
 80180f2:	631e      	str	r6, [r3, #48]	; 0x30
 80180f4:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
 80180f8:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
 80180fc:	f883 1164 	strb.w	r1, [r3, #356]	; 0x164
 8018100:	2210      	movs	r2, #16
 8018102:	1928      	adds	r0, r5, r4
 8018104:	f010 fd5c 	bl	8028bc0 <memset>
 8018108:	4630      	mov	r0, r6
 801810a:	bd70      	pop	{r4, r5, r6, pc}
 801810c:	2600      	movs	r6, #0
 801810e:	e7fb      	b.n	8018108 <MoblePBADVGetNewLink+0x7c>

08018110 <MoblePalBluetoothPrvnCmpltReset>:
 8018110:	b538      	push	{r3, r4, r5, lr}
 8018112:	4c13      	ldr	r4, [pc, #76]	; (8018160 <MoblePalBluetoothPrvnCmpltReset+0x50>)
 8018114:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 8018118:	f013 0f3c 	tst.w	r3, #60	; 0x3c
 801811c:	d014      	beq.n	8018148 <MoblePalBluetoothPrvnCmpltReset+0x38>
 801811e:	f8d4 2350 	ldr.w	r2, [r4, #848]	; 0x350
 8018122:	4b10      	ldr	r3, [pc, #64]	; (8018164 <MoblePalBluetoothPrvnCmpltReset+0x54>)
 8018124:	2501      	movs	r5, #1
 8018126:	429a      	cmp	r2, r3
 8018128:	f884 5378 	strb.w	r5, [r4, #888]	; 0x378
 801812c:	d80d      	bhi.n	801814a <MoblePalBluetoothPrvnCmpltReset+0x3a>
 801812e:	f7ef fea5 	bl	8007e7c <HAL_GetTick>
 8018132:	f8d4 3350 	ldr.w	r3, [r4, #848]	; 0x350
 8018136:	220a      	movs	r2, #10
 8018138:	fbb3 f3f2 	udiv	r3, r3, r2
 801813c:	4403      	add	r3, r0
 801813e:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
 8018142:	4b09      	ldr	r3, [pc, #36]	; (8018168 <MoblePalBluetoothPrvnCmpltReset+0x58>)
 8018144:	2201      	movs	r2, #1
 8018146:	701a      	strb	r2, [r3, #0]
 8018148:	bd38      	pop	{r3, r4, r5, pc}
 801814a:	f7ef fe97 	bl	8007e7c <HAL_GetTick>
 801814e:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8018152:	3008      	adds	r0, #8
 8018154:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8018158:	f884 5380 	strb.w	r5, [r4, #896]	; 0x380
 801815c:	e7f1      	b.n	8018142 <MoblePalBluetoothPrvnCmpltReset+0x32>
 801815e:	bf00      	nop
 8018160:	20001410 	.word	0x20001410
 8018164:	0001869f 	.word	0x0001869f
 8018168:	20004439 	.word	0x20004439

0801816c <MoblePalBluetoothProcessDisconnection>:
 801816c:	b510      	push	{r4, lr}
 801816e:	4c0a      	ldr	r4, [pc, #40]	; (8018198 <MoblePalBluetoothProcessDisconnection+0x2c>)
 8018170:	f894 3380 	ldrb.w	r3, [r4, #896]	; 0x380
 8018174:	2b01      	cmp	r3, #1
 8018176:	d10d      	bne.n	8018194 <MoblePalBluetoothProcessDisconnection+0x28>
 8018178:	f7ef fe80 	bl	8007e7c <HAL_GetTick>
 801817c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8018180:	4283      	cmp	r3, r0
 8018182:	d207      	bcs.n	8018194 <MoblePalBluetoothProcessDisconnection+0x28>
 8018184:	f8b4 0382 	ldrh.w	r0, [r4, #898]	; 0x382
 8018188:	2116      	movs	r1, #22
 801818a:	f7fc fa91 	bl	80146b0 <aci_gap_terminate>
 801818e:	2300      	movs	r3, #0
 8018190:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
 8018194:	bd10      	pop	{r4, pc}
 8018196:	bf00      	nop
 8018198:	20001410 	.word	0x20001410

0801819c <MoblePalBluetoothNvmSave>:
 801819c:	4b4e      	ldr	r3, [pc, #312]	; (80182d8 <MoblePalBluetoothNvmSave+0x13c>)
 801819e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80181a2:	f8a3 1388 	strh.w	r1, [r3, #904]	; 0x388
 80181a6:	f8c3 0384 	str.w	r0, [r3, #900]	; 0x384
 80181aa:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 80181ae:	4688      	mov	r8, r1
 80181b0:	0799      	lsls	r1, r3, #30
 80181b2:	4606      	mov	r6, r0
 80181b4:	d145      	bne.n	8018242 <MoblePalBluetoothNvmSave+0xa6>
 80181b6:	4b49      	ldr	r3, [pc, #292]	; (80182dc <MoblePalBluetoothNvmSave+0x140>)
 80181b8:	691d      	ldr	r5, [r3, #16]
 80181ba:	f415 2580 	ands.w	r5, r5, #262144	; 0x40000
 80181be:	d140      	bne.n	8018242 <MoblePalBluetoothNvmSave+0xa6>
 80181c0:	4f47      	ldr	r7, [pc, #284]	; (80182e0 <MoblePalBluetoothNvmSave+0x144>)
 80181c2:	783b      	ldrb	r3, [r7, #0]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d03c      	beq.n	8018242 <MoblePalBluetoothNvmSave+0xa6>
 80181c8:	4c46      	ldr	r4, [pc, #280]	; (80182e4 <MoblePalBluetoothNvmSave+0x148>)
 80181ca:	462b      	mov	r3, r5
 80181cc:	2208      	movs	r2, #8
 80181ce:	6820      	ldr	r0, [r4, #0]
 80181d0:	4669      	mov	r1, sp
 80181d2:	f7ef f8bb 	bl	800734c <PalNvmRead>
 80181d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80181da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80181de:	bf08      	it	eq
 80181e0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80181e4:	d130      	bne.n	8018248 <MoblePalBluetoothNvmSave+0xac>
 80181e6:	4b40      	ldr	r3, [pc, #256]	; (80182e8 <MoblePalBluetoothNvmSave+0x14c>)
 80181e8:	2201      	movs	r2, #1
 80181ea:	701a      	strb	r2, [r3, #0]
 80181ec:	783a      	ldrb	r2, [r7, #0]
 80181ee:	f012 0302 	ands.w	r3, r2, #2
 80181f2:	d068      	beq.n	80182c6 <MoblePalBluetoothNvmSave+0x12a>
 80181f4:	4d3c      	ldr	r5, [pc, #240]	; (80182e8 <MoblePalBluetoothNvmSave+0x14c>)
 80181f6:	6820      	ldr	r0, [r4, #0]
 80181f8:	782b      	ldrb	r3, [r5, #0]
 80181fa:	4642      	mov	r2, r8
 80181fc:	4631      	mov	r1, r6
 80181fe:	b90b      	cbnz	r3, 8018204 <MoblePalBluetoothNvmSave+0x68>
 8018200:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8018204:	f7ef f960 	bl	80074c8 <PalNvmWrite>
 8018208:	2801      	cmp	r0, #1
 801820a:	d818      	bhi.n	801823e <MoblePalBluetoothNvmSave+0xa2>
 801820c:	782b      	ldrb	r3, [r5, #0]
 801820e:	6820      	ldr	r0, [r4, #0]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d13e      	bne.n	8018292 <MoblePalBluetoothNvmSave+0xf6>
 8018214:	2208      	movs	r2, #8
 8018216:	4669      	mov	r1, sp
 8018218:	f7ef f898 	bl	800734c <PalNvmRead>
 801821c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018224:	bf08      	it	eq
 8018226:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 801822a:	d005      	beq.n	8018238 <MoblePalBluetoothNvmSave+0x9c>
 801822c:	6820      	ldr	r0, [r4, #0]
 801822e:	2101      	movs	r1, #1
 8018230:	f7ef f930 	bl	8007494 <PalNvmErase>
 8018234:	2801      	cmp	r0, #1
 8018236:	d802      	bhi.n	801823e <MoblePalBluetoothNvmSave+0xa2>
 8018238:	4b2b      	ldr	r3, [pc, #172]	; (80182e8 <MoblePalBluetoothNvmSave+0x14c>)
 801823a:	2201      	movs	r2, #1
 801823c:	701a      	strb	r2, [r3, #0]
 801823e:	2300      	movs	r3, #0
 8018240:	703b      	strb	r3, [r7, #0]
 8018242:	b002      	add	sp, #8
 8018244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018248:	6820      	ldr	r0, [r4, #0]
 801824a:	462b      	mov	r3, r5
 801824c:	2208      	movs	r2, #8
 801824e:	4669      	mov	r1, sp
 8018250:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8018254:	f7ef f87a 	bl	800734c <PalNvmRead>
 8018258:	e9dd 2300 	ldrd	r2, r3, [sp]
 801825c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018260:	bf08      	it	eq
 8018262:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8018266:	d102      	bne.n	801826e <MoblePalBluetoothNvmSave+0xd2>
 8018268:	4b1f      	ldr	r3, [pc, #124]	; (80182e8 <MoblePalBluetoothNvmSave+0x14c>)
 801826a:	701d      	strb	r5, [r3, #0]
 801826c:	e7be      	b.n	80181ec <MoblePalBluetoothNvmSave+0x50>
 801826e:	6820      	ldr	r0, [r4, #0]
 8018270:	2101      	movs	r1, #1
 8018272:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8018276:	f7ef f90d 	bl	8007494 <PalNvmErase>
 801827a:	2801      	cmp	r0, #1
 801827c:	bf98      	it	ls
 801827e:	4b1a      	ldrls	r3, [pc, #104]	; (80182e8 <MoblePalBluetoothNvmSave+0x14c>)
 8018280:	6820      	ldr	r0, [r4, #0]
 8018282:	bf98      	it	ls
 8018284:	701d      	strbls	r5, [r3, #0]
 8018286:	2101      	movs	r1, #1
 8018288:	f7ef f904 	bl	8007494 <PalNvmErase>
 801828c:	2801      	cmp	r0, #1
 801828e:	d8ad      	bhi.n	80181ec <MoblePalBluetoothNvmSave+0x50>
 8018290:	e7a9      	b.n	80181e6 <MoblePalBluetoothNvmSave+0x4a>
 8018292:	2300      	movs	r3, #0
 8018294:	2208      	movs	r2, #8
 8018296:	4669      	mov	r1, sp
 8018298:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 801829c:	f7ef f856 	bl	800734c <PalNvmRead>
 80182a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80182a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80182a8:	bf08      	it	eq
 80182aa:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80182ae:	d007      	beq.n	80182c0 <MoblePalBluetoothNvmSave+0x124>
 80182b0:	6820      	ldr	r0, [r4, #0]
 80182b2:	2101      	movs	r1, #1
 80182b4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80182b8:	f7ef f8ec 	bl	8007494 <PalNvmErase>
 80182bc:	2801      	cmp	r0, #1
 80182be:	d8be      	bhi.n	801823e <MoblePalBluetoothNvmSave+0xa2>
 80182c0:	4b09      	ldr	r3, [pc, #36]	; (80182e8 <MoblePalBluetoothNvmSave+0x14c>)
 80182c2:	2200      	movs	r2, #0
 80182c4:	e7ba      	b.n	801823c <MoblePalBluetoothNvmSave+0xa0>
 80182c6:	07d2      	lsls	r2, r2, #31
 80182c8:	d5b9      	bpl.n	801823e <MoblePalBluetoothNvmSave+0xa2>
 80182ca:	4a07      	ldr	r2, [pc, #28]	; (80182e8 <MoblePalBluetoothNvmSave+0x14c>)
 80182cc:	6820      	ldr	r0, [r4, #0]
 80182ce:	7812      	ldrb	r2, [r2, #0]
 80182d0:	2a00      	cmp	r2, #0
 80182d2:	d1df      	bne.n	8018294 <MoblePalBluetoothNvmSave+0xf8>
 80182d4:	4613      	mov	r3, r2
 80182d6:	e79d      	b.n	8018214 <MoblePalBluetoothNvmSave+0x78>
 80182d8:	20001410 	.word	0x20001410
 80182dc:	58004000 	.word	0x58004000
 80182e0:	20004437 	.word	0x20004437
 80182e4:	20004448 	.word	0x20004448
 80182e8:	20004438 	.word	0x20004438

080182ec <MoblePalBluetoothModeStopAdv>:
 80182ec:	b538      	push	{r3, r4, r5, lr}
 80182ee:	4d0d      	ldr	r5, [pc, #52]	; (8018324 <MoblePalBluetoothModeStopAdv+0x38>)
 80182f0:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 80182f4:	07db      	lsls	r3, r3, #31
 80182f6:	d511      	bpl.n	801831c <MoblePalBluetoothModeStopAdv+0x30>
 80182f8:	f7fc f80f 	bl	801431a <aci_gap_set_non_discoverable>
 80182fc:	4604      	mov	r4, r0
 80182fe:	b978      	cbnz	r0, 8018320 <MoblePalBluetoothModeStopAdv+0x34>
 8018300:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 8018304:	f8b5 1388 	ldrh.w	r1, [r5, #904]	; 0x388
 8018308:	f8d5 0384 	ldr.w	r0, [r5, #900]	; 0x384
 801830c:	f083 0301 	eor.w	r3, r3, #1
 8018310:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
 8018314:	f7ff ff42 	bl	801819c <MoblePalBluetoothNvmSave>
 8018318:	4620      	mov	r0, r4
 801831a:	bd38      	pop	{r3, r4, r5, pc}
 801831c:	2401      	movs	r4, #1
 801831e:	e7fb      	b.n	8018318 <MoblePalBluetoothModeStopAdv+0x2c>
 8018320:	2402      	movs	r4, #2
 8018322:	e7f9      	b.n	8018318 <MoblePalBluetoothModeStopAdv+0x2c>
 8018324:	20001410 	.word	0x20001410

08018328 <MoblePalBluetoothModeStartAdv>:
 8018328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801832c:	4680      	mov	r8, r0
 801832e:	b088      	sub	sp, #32
 8018330:	4616      	mov	r6, r2
 8018332:	461c      	mov	r4, r3
 8018334:	460f      	mov	r7, r1
 8018336:	b931      	cbnz	r1, 8018346 <MoblePalBluetoothModeStartAdv+0x1e>
 8018338:	4b31      	ldr	r3, [pc, #196]	; (8018400 <MoblePalBluetoothModeStartAdv+0xd8>)
 801833a:	4a32      	ldr	r2, [pc, #200]	; (8018404 <MoblePalBluetoothModeStartAdv+0xdc>)
 801833c:	f240 61e9 	movw	r1, #1769	; 0x6e9
 8018340:	4831      	ldr	r0, [pc, #196]	; (8018408 <MoblePalBluetoothModeStartAdv+0xe0>)
 8018342:	f010 fbab 	bl	8028a9c <__assert_func>
 8018346:	b922      	cbnz	r2, 8018352 <MoblePalBluetoothModeStartAdv+0x2a>
 8018348:	4b30      	ldr	r3, [pc, #192]	; (801840c <MoblePalBluetoothModeStartAdv+0xe4>)
 801834a:	4a2e      	ldr	r2, [pc, #184]	; (8018404 <MoblePalBluetoothModeStartAdv+0xdc>)
 801834c:	f240 61ea 	movw	r1, #1770	; 0x6ea
 8018350:	e7f6      	b.n	8018340 <MoblePalBluetoothModeStartAdv+0x18>
 8018352:	4d2f      	ldr	r5, [pc, #188]	; (8018410 <MoblePalBluetoothModeStartAdv+0xe8>)
 8018354:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 8018358:	079a      	lsls	r2, r3, #30
 801835a:	d504      	bpl.n	8018366 <MoblePalBluetoothModeStartAdv+0x3e>
 801835c:	2402      	movs	r4, #2
 801835e:	4620      	mov	r0, r4
 8018360:	b008      	add	sp, #32
 8018362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018366:	07db      	lsls	r3, r3, #31
 8018368:	d509      	bpl.n	801837e <MoblePalBluetoothModeStartAdv+0x56>
 801836a:	f7fb ffd6 	bl	801431a <aci_gap_set_non_discoverable>
 801836e:	2800      	cmp	r0, #0
 8018370:	d1f4      	bne.n	801835c <MoblePalBluetoothModeStartAdv+0x34>
 8018372:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 8018376:	f083 0301 	eor.w	r3, r3, #1
 801837a:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
 801837e:	2e1f      	cmp	r6, #31
 8018380:	d83c      	bhi.n	80183fc <MoblePalBluetoothModeStartAdv+0xd4>
 8018382:	f1a4 020a 	sub.w	r2, r4, #10
 8018386:	f242 73f6 	movw	r3, #10230	; 0x27f6
 801838a:	429a      	cmp	r2, r3
 801838c:	d836      	bhi.n	80183fc <MoblePalBluetoothModeStartAdv+0xd4>
 801838e:	f895 3363 	ldrb.w	r3, [r5, #867]	; 0x363
 8018392:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018396:	f1b8 0f01 	cmp.w	r8, #1
 801839a:	e9cd 1105 	strd	r1, r1, [sp, #20]
 801839e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 80183a2:	bf0c      	ite	eq
 80183a4:	2000      	moveq	r0, #0
 80183a6:	2003      	movne	r0, #3
 80183a8:	2205      	movs	r2, #5
 80183aa:	424b      	negs	r3, r1
 80183ac:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80183b0:	fbb4 f4f2 	udiv	r4, r4, r2
 80183b4:	b2a2      	uxth	r2, r4
 80183b6:	f04f 0400 	mov.w	r4, #0
 80183ba:	414b      	adcs	r3, r1
 80183bc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80183c0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80183c4:	9400      	str	r4, [sp, #0]
 80183c6:	4611      	mov	r1, r2
 80183c8:	f7fb ffcb 	bl	8014362 <aci_gap_set_discoverable>
 80183cc:	2800      	cmp	r0, #0
 80183ce:	d1c5      	bne.n	801835c <MoblePalBluetoothModeStartAdv+0x34>
 80183d0:	4639      	mov	r1, r7
 80183d2:	4630      	mov	r0, r6
 80183d4:	f7fd f9ba 	bl	801574c <hci_le_set_advertising_data>
 80183d8:	4604      	mov	r4, r0
 80183da:	2800      	cmp	r0, #0
 80183dc:	d1be      	bne.n	801835c <MoblePalBluetoothModeStartAdv+0x34>
 80183de:	f895 0364 	ldrb.w	r0, [r5, #868]	; 0x364
 80183e2:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
 80183e6:	3002      	adds	r0, #2
 80183e8:	b2c0      	uxtb	r0, r0
 80183ea:	f7fd fa18 	bl	801581e <hci_le_set_scan_response_data>
 80183ee:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 80183f2:	f043 0301 	orr.w	r3, r3, #1
 80183f6:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
 80183fa:	e7b0      	b.n	801835e <MoblePalBluetoothModeStartAdv+0x36>
 80183fc:	2403      	movs	r4, #3
 80183fe:	e7ae      	b.n	801835e <MoblePalBluetoothModeStartAdv+0x36>
 8018400:	080334e0 	.word	0x080334e0
 8018404:	0803149b 	.word	0x0803149b
 8018408:	080334e5 	.word	0x080334e5
 801840c:	0803352c 	.word	0x0803352c
 8018410:	20001410 	.word	0x20001410

08018414 <MoblePalBluetoothModeStopScan>:
 8018414:	b538      	push	{r3, r4, r5, lr}
 8018416:	4d0d      	ldr	r5, [pc, #52]	; (801844c <MoblePalBluetoothModeStopScan+0x38>)
 8018418:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 801841c:	079b      	lsls	r3, r3, #30
 801841e:	d402      	bmi.n	8018426 <MoblePalBluetoothModeStopScan+0x12>
 8018420:	2401      	movs	r4, #1
 8018422:	4620      	mov	r0, r4
 8018424:	bd38      	pop	{r3, r4, r5, pc}
 8018426:	2080      	movs	r0, #128	; 0x80
 8018428:	f7fc f9ac 	bl	8014784 <aci_gap_terminate_gap_proc>
 801842c:	4604      	mov	r4, r0
 801842e:	2800      	cmp	r0, #0
 8018430:	d1f6      	bne.n	8018420 <MoblePalBluetoothModeStopScan+0xc>
 8018432:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 8018436:	f8b5 1388 	ldrh.w	r1, [r5, #904]	; 0x388
 801843a:	f8d5 0384 	ldr.w	r0, [r5, #900]	; 0x384
 801843e:	f083 0302 	eor.w	r3, r3, #2
 8018442:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
 8018446:	f7ff fea9 	bl	801819c <MoblePalBluetoothNvmSave>
 801844a:	e7ea      	b.n	8018422 <MoblePalBluetoothModeStopScan+0xe>
 801844c:	20001410 	.word	0x20001410

08018450 <MoblePalBluetoothModeStartScan>:
 8018450:	f1a1 020a 	sub.w	r2, r1, #10
 8018454:	f242 73f6 	movw	r3, #10230	; 0x27f6
 8018458:	429a      	cmp	r2, r3
 801845a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801845c:	d822      	bhi.n	80184a4 <MoblePalBluetoothModeStartScan+0x54>
 801845e:	4281      	cmp	r1, r0
 8018460:	d320      	bcc.n	80184a4 <MoblePalBluetoothModeStartScan+0x54>
 8018462:	4d13      	ldr	r5, [pc, #76]	; (80184b0 <MoblePalBluetoothModeStartScan+0x60>)
 8018464:	f8d5 2354 	ldr.w	r2, [r5, #852]	; 0x354
 8018468:	f012 0202 	ands.w	r2, r2, #2
 801846c:	d11c      	bne.n	80184a8 <MoblePalBluetoothModeStartScan+0x58>
 801846e:	f895 3363 	ldrb.w	r3, [r5, #867]	; 0x363
 8018472:	00c0      	lsls	r0, r0, #3
 8018474:	2605      	movs	r6, #5
 8018476:	fbb0 f4f6 	udiv	r4, r0, r6
 801847a:	00c8      	lsls	r0, r1, #3
 801847c:	1e59      	subs	r1, r3, #1
 801847e:	424b      	negs	r3, r1
 8018480:	414b      	adcs	r3, r1
 8018482:	fbb0 f0f6 	udiv	r0, r0, r6
 8018486:	e9cd 2200 	strd	r2, r2, [sp]
 801848a:	b2a1      	uxth	r1, r4
 801848c:	b280      	uxth	r0, r0
 801848e:	f7fc f9cd 	bl	801482c <aci_gap_start_observation_proc>
 8018492:	b958      	cbnz	r0, 80184ac <MoblePalBluetoothModeStartScan+0x5c>
 8018494:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 8018498:	f043 0302 	orr.w	r3, r3, #2
 801849c:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
 80184a0:	b002      	add	sp, #8
 80184a2:	bd70      	pop	{r4, r5, r6, pc}
 80184a4:	2003      	movs	r0, #3
 80184a6:	e7fb      	b.n	80184a0 <MoblePalBluetoothModeStartScan+0x50>
 80184a8:	2001      	movs	r0, #1
 80184aa:	e7f9      	b.n	80184a0 <MoblePalBluetoothModeStartScan+0x50>
 80184ac:	2002      	movs	r0, #2
 80184ae:	e7f7      	b.n	80184a0 <MoblePalBluetoothModeStartScan+0x50>
 80184b0:	20001410 	.word	0x20001410

080184b4 <BPKA_ReadP256Key>:
 80184b4:	4601      	mov	r1, r0
 80184b6:	480b      	ldr	r0, [pc, #44]	; (80184e4 <BPKA_ReadP256Key+0x30>)
 80184b8:	b538      	push	{r3, r4, r5, lr}
 80184ba:	f7ff fa8b 	bl	80179d4 <BPKA_Reverse>
 80184be:	3020      	adds	r0, #32
 80184c0:	f7ff fa88 	bl	80179d4 <BPKA_Reverse>
 80184c4:	f1a0 0420 	sub.w	r4, r0, #32
 80184c8:	460b      	mov	r3, r1
 80184ca:	f100 0520 	add.w	r5, r0, #32
 80184ce:	4622      	mov	r2, r4
 80184d0:	ca03      	ldmia	r2!, {r0, r1}
 80184d2:	42aa      	cmp	r2, r5
 80184d4:	6018      	str	r0, [r3, #0]
 80184d6:	6059      	str	r1, [r3, #4]
 80184d8:	4614      	mov	r4, r2
 80184da:	f103 0308 	add.w	r3, r3, #8
 80184de:	d1f6      	bne.n	80184ce <BPKA_ReadP256Key+0x1a>
 80184e0:	bd38      	pop	{r3, r4, r5, pc}
 80184e2:	bf00      	nop
 80184e4:	2000179c 	.word	0x2000179c

080184e8 <BPKA_ReadDhKey>:
 80184e8:	b538      	push	{r3, r4, r5, lr}
 80184ea:	4c0f      	ldr	r4, [pc, #60]	; (8018528 <BPKA_ReadDhKey+0x40>)
 80184ec:	f894 33ec 	ldrb.w	r3, [r4, #1004]	; 0x3ec
 80184f0:	4601      	mov	r1, r0
 80184f2:	b133      	cbz	r3, 8018502 <BPKA_ReadDhKey+0x1a>
 80184f4:	2220      	movs	r2, #32
 80184f6:	21ff      	movs	r1, #255	; 0xff
 80184f8:	f010 fb62 	bl	8028bc0 <memset>
 80184fc:	f06f 0002 	mvn.w	r0, #2
 8018500:	bd38      	pop	{r3, r4, r5, pc}
 8018502:	f504 7063 	add.w	r0, r4, #908	; 0x38c
 8018506:	f7ff fa65 	bl	80179d4 <BPKA_Reverse>
 801850a:	4605      	mov	r5, r0
 801850c:	460b      	mov	r3, r1
 801850e:	f504 746b 	add.w	r4, r4, #940	; 0x3ac
 8018512:	462a      	mov	r2, r5
 8018514:	ca03      	ldmia	r2!, {r0, r1}
 8018516:	42a2      	cmp	r2, r4
 8018518:	6018      	str	r0, [r3, #0]
 801851a:	6059      	str	r1, [r3, #4]
 801851c:	4615      	mov	r5, r2
 801851e:	f103 0308 	add.w	r3, r3, #8
 8018522:	d1f6      	bne.n	8018512 <BPKA_ReadDhKey+0x2a>
 8018524:	2000      	movs	r0, #0
 8018526:	e7eb      	b.n	8018500 <BPKA_ReadDhKey+0x18>
 8018528:	20001410 	.word	0x20001410

0801852c <HW_AES_Enable>:
 801852c:	4b0d      	ldr	r3, [pc, #52]	; (8018564 <HW_AES_Enable+0x38>)
 801852e:	f893 23ed 	ldrb.w	r2, [r3, #1005]	; 0x3ed
 8018532:	b082      	sub	sp, #8
 8018534:	b9a2      	cbnz	r2, 8018560 <HW_AES_Enable+0x34>
 8018536:	2001      	movs	r0, #1
 8018538:	f883 03ed 	strb.w	r0, [r3, #1005]	; 0x3ed
 801853c:	f3ef 8110 	mrs	r1, PRIMASK
 8018540:	b672      	cpsid	i
 8018542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018548:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801854c:	64da      	str	r2, [r3, #76]	; 0x4c
 801854e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018554:	9301      	str	r3, [sp, #4]
 8018556:	9b01      	ldr	r3, [sp, #4]
 8018558:	f381 8810 	msr	PRIMASK, r1
 801855c:	b002      	add	sp, #8
 801855e:	4770      	bx	lr
 8018560:	2000      	movs	r0, #0
 8018562:	e7fb      	b.n	801855c <HW_AES_Enable+0x30>
 8018564:	20001410 	.word	0x20001410

08018568 <HW_AES_Disable>:
 8018568:	b510      	push	{r4, lr}
 801856a:	4a0a      	ldr	r2, [pc, #40]	; (8018594 <HW_AES_Disable+0x2c>)
 801856c:	f892 33ed 	ldrb.w	r3, [r2, #1005]	; 0x3ed
 8018570:	b17b      	cbz	r3, 8018592 <HW_AES_Disable+0x2a>
 8018572:	4b09      	ldr	r3, [pc, #36]	; (8018598 <HW_AES_Disable+0x30>)
 8018574:	2100      	movs	r1, #0
 8018576:	6019      	str	r1, [r3, #0]
 8018578:	f3ef 8410 	mrs	r4, PRIMASK
 801857c:	b672      	cpsid	i
 801857e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8018582:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018588:	64c3      	str	r3, [r0, #76]	; 0x4c
 801858a:	f384 8810 	msr	PRIMASK, r4
 801858e:	f882 13ed 	strb.w	r1, [r2, #1005]	; 0x3ed
 8018592:	bd10      	pop	{r4, pc}
 8018594:	20001410 	.word	0x20001410
 8018598:	50060000 	.word	0x50060000

0801859c <HW_AES_SetKey>:
 801859c:	b530      	push	{r4, r5, lr}
 801859e:	4b0f      	ldr	r3, [pc, #60]	; (80185dc <HW_AES_SetKey+0x40>)
 80185a0:	b085      	sub	sp, #20
 80185a2:	2200      	movs	r2, #0
 80185a4:	601a      	str	r2, [r3, #0]
 80185a6:	466c      	mov	r4, sp
 80185a8:	4603      	mov	r3, r0
 80185aa:	f100 0510 	add.w	r5, r0, #16
 80185ae:	6818      	ldr	r0, [r3, #0]
 80185b0:	6859      	ldr	r1, [r3, #4]
 80185b2:	4622      	mov	r2, r4
 80185b4:	c203      	stmia	r2!, {r0, r1}
 80185b6:	3308      	adds	r3, #8
 80185b8:	42ab      	cmp	r3, r5
 80185ba:	4614      	mov	r4, r2
 80185bc:	d1f7      	bne.n	80185ae <HW_AES_SetKey+0x12>
 80185be:	9b00      	ldr	r3, [sp, #0]
 80185c0:	ba1a      	rev	r2, r3
 80185c2:	4b06      	ldr	r3, [pc, #24]	; (80185dc <HW_AES_SetKey+0x40>)
 80185c4:	61da      	str	r2, [r3, #28]
 80185c6:	9a01      	ldr	r2, [sp, #4]
 80185c8:	ba12      	rev	r2, r2
 80185ca:	619a      	str	r2, [r3, #24]
 80185cc:	9a02      	ldr	r2, [sp, #8]
 80185ce:	ba12      	rev	r2, r2
 80185d0:	615a      	str	r2, [r3, #20]
 80185d2:	9a03      	ldr	r2, [sp, #12]
 80185d4:	ba12      	rev	r2, r2
 80185d6:	611a      	str	r2, [r3, #16]
 80185d8:	b005      	add	sp, #20
 80185da:	bd30      	pop	{r4, r5, pc}
 80185dc:	50060000 	.word	0x50060000

080185e0 <HW_AES_Crypt>:
 80185e0:	b508      	push	{r3, lr}
 80185e2:	f7ff f917 	bl	8017814 <HW_AES_Input>
 80185e6:	f7ff f909 	bl	80177fc <HW_AES_WaitComplete>
 80185ea:	4b05      	ldr	r3, [pc, #20]	; (8018600 <HW_AES_Crypt+0x20>)
 80185ec:	68da      	ldr	r2, [r3, #12]
 80185ee:	600a      	str	r2, [r1, #0]
 80185f0:	68da      	ldr	r2, [r3, #12]
 80185f2:	604a      	str	r2, [r1, #4]
 80185f4:	68da      	ldr	r2, [r3, #12]
 80185f6:	608a      	str	r2, [r1, #8]
 80185f8:	68db      	ldr	r3, [r3, #12]
 80185fa:	60cb      	str	r3, [r1, #12]
 80185fc:	bd08      	pop	{r3, pc}
 80185fe:	bf00      	nop
 8018600:	50060000 	.word	0x50060000

08018604 <BAES_CmacCompute>:
 8018604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018608:	460d      	mov	r5, r1
 801860a:	b089      	sub	sp, #36	; 0x24
 801860c:	4614      	mov	r4, r2
 801860e:	461e      	mov	r6, r3
 8018610:	4607      	mov	r7, r0
 8018612:	b168      	cbz	r0, 8018630 <BAES_CmacCompute+0x2c>
 8018614:	f7ff ff8a 	bl	801852c <HW_AES_Enable>
 8018618:	4638      	mov	r0, r7
 801861a:	f7ff ffbf 	bl	801859c <HW_AES_SetKey>
 801861e:	4b5d      	ldr	r3, [pc, #372]	; (8018794 <BAES_CmacCompute+0x190>)
 8018620:	2201      	movs	r2, #1
 8018622:	601a      	str	r2, [r3, #0]
 8018624:	4b5c      	ldr	r3, [pc, #368]	; (8018798 <BAES_CmacCompute+0x194>)
 8018626:	2200      	movs	r2, #0
 8018628:	e9c3 22fe 	strd	r2, r2, [r3, #1016]	; 0x3f8
 801862c:	e9c3 22fc 	strd	r2, r2, [r3, #1008]	; 0x3f0
 8018630:	2e00      	cmp	r6, #0
 8018632:	f000 809a 	beq.w	801876a <BAES_CmacCompute+0x166>
 8018636:	f004 070f 	and.w	r7, r4, #15
 801863a:	b114      	cbz	r4, 8018642 <BAES_CmacCompute+0x3e>
 801863c:	2f00      	cmp	r7, #0
 801863e:	bf08      	it	eq
 8018640:	2710      	moveq	r7, #16
 8018642:	1be4      	subs	r4, r4, r7
 8018644:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8018798 <BAES_CmacCompute+0x194>
 8018648:	442c      	add	r4, r5
 801864a:	f508 797c 	add.w	r9, r8, #1008	; 0x3f0
 801864e:	e026      	b.n	801869e <BAES_CmacCompute+0x9a>
 8018650:	466a      	mov	r2, sp
 8018652:	f105 0c10 	add.w	ip, r5, #16
 8018656:	6828      	ldr	r0, [r5, #0]
 8018658:	6869      	ldr	r1, [r5, #4]
 801865a:	4613      	mov	r3, r2
 801865c:	c303      	stmia	r3!, {r0, r1}
 801865e:	3508      	adds	r5, #8
 8018660:	4565      	cmp	r5, ip
 8018662:	461a      	mov	r2, r3
 8018664:	d1f7      	bne.n	8018656 <BAES_CmacCompute+0x52>
 8018666:	9b00      	ldr	r3, [sp, #0]
 8018668:	ba1a      	rev	r2, r3
 801866a:	f8d8 33f0 	ldr.w	r3, [r8, #1008]	; 0x3f0
 801866e:	4053      	eors	r3, r2
 8018670:	9300      	str	r3, [sp, #0]
 8018672:	9b01      	ldr	r3, [sp, #4]
 8018674:	ba1a      	rev	r2, r3
 8018676:	f8d8 33f4 	ldr.w	r3, [r8, #1012]	; 0x3f4
 801867a:	4053      	eors	r3, r2
 801867c:	9301      	str	r3, [sp, #4]
 801867e:	9b02      	ldr	r3, [sp, #8]
 8018680:	ba1a      	rev	r2, r3
 8018682:	f8d8 33f8 	ldr.w	r3, [r8, #1016]	; 0x3f8
 8018686:	4053      	eors	r3, r2
 8018688:	9302      	str	r3, [sp, #8]
 801868a:	9b03      	ldr	r3, [sp, #12]
 801868c:	ba1a      	rev	r2, r3
 801868e:	f8d8 33fc 	ldr.w	r3, [r8, #1020]	; 0x3fc
 8018692:	4649      	mov	r1, r9
 8018694:	4053      	eors	r3, r2
 8018696:	4668      	mov	r0, sp
 8018698:	9303      	str	r3, [sp, #12]
 801869a:	f7ff ffa1 	bl	80185e0 <HW_AES_Crypt>
 801869e:	42a5      	cmp	r5, r4
 80186a0:	d1d6      	bne.n	8018650 <BAES_CmacCompute+0x4c>
 80186a2:	2e00      	cmp	r6, #0
 80186a4:	d05e      	beq.n	8018764 <BAES_CmacCompute+0x160>
 80186a6:	2400      	movs	r4, #0
 80186a8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80186ac:	e9cd 4400 	strd	r4, r4, [sp]
 80186b0:	42bc      	cmp	r4, r7
 80186b2:	d15c      	bne.n	801876e <BAES_CmacCompute+0x16a>
 80186b4:	ad04      	add	r5, sp, #16
 80186b6:	2300      	movs	r3, #0
 80186b8:	4629      	mov	r1, r5
 80186ba:	4628      	mov	r0, r5
 80186bc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80186c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80186c4:	f7ff ff8c 	bl	80185e0 <HW_AES_Crypt>
 80186c8:	f7ff f87f 	bl	80177ca <BAES_CmacKeyRoll>
 80186cc:	2c10      	cmp	r4, #16
 80186ce:	d013      	beq.n	80186f8 <BAES_CmacCompute+0xf4>
 80186d0:	f024 0203 	bic.w	r2, r4, #3
 80186d4:	f102 0320 	add.w	r3, r2, #32
 80186d8:	43e4      	mvns	r4, r4
 80186da:	eb0d 0203 	add.w	r2, sp, r3
 80186de:	f004 0403 	and.w	r4, r4, #3
 80186e2:	2380      	movs	r3, #128	; 0x80
 80186e4:	00e4      	lsls	r4, r4, #3
 80186e6:	fa03 f404 	lsl.w	r4, r3, r4
 80186ea:	f852 3c20 	ldr.w	r3, [r2, #-32]
 80186ee:	431c      	orrs	r4, r3
 80186f0:	f842 4c20 	str.w	r4, [r2, #-32]
 80186f4:	f7ff f869 	bl	80177ca <BAES_CmacKeyRoll>
 80186f8:	466a      	mov	r2, sp
 80186fa:	4f28      	ldr	r7, [pc, #160]	; (801879c <BAES_CmacCompute+0x198>)
 80186fc:	4628      	mov	r0, r5
 80186fe:	f04f 0e04 	mov.w	lr, #4
 8018702:	4614      	mov	r4, r2
 8018704:	6811      	ldr	r1, [r2, #0]
 8018706:	f857 3b04 	ldr.w	r3, [r7], #4
 801870a:	f850 cb04 	ldr.w	ip, [r0], #4
 801870e:	404b      	eors	r3, r1
 8018710:	ea83 030c 	eor.w	r3, r3, ip
 8018714:	f1be 0e01 	subs.w	lr, lr, #1
 8018718:	f842 3b04 	str.w	r3, [r2], #4
 801871c:	d1f2      	bne.n	8018704 <BAES_CmacCompute+0x100>
 801871e:	4f1e      	ldr	r7, [pc, #120]	; (8018798 <BAES_CmacCompute+0x194>)
 8018720:	4620      	mov	r0, r4
 8018722:	f507 717c 	add.w	r1, r7, #1008	; 0x3f0
 8018726:	f7ff ff5b 	bl	80185e0 <HW_AES_Crypt>
 801872a:	f7ff ff1d 	bl	8018568 <HW_AES_Disable>
 801872e:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8018732:	ba1b      	rev	r3, r3
 8018734:	9300      	str	r3, [sp, #0]
 8018736:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 801873a:	ba1b      	rev	r3, r3
 801873c:	9301      	str	r3, [sp, #4]
 801873e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8018742:	ba1b      	rev	r3, r3
 8018744:	9302      	str	r3, [sp, #8]
 8018746:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 801874a:	ba1b      	rev	r3, r3
 801874c:	9303      	str	r3, [sp, #12]
 801874e:	4622      	mov	r2, r4
 8018750:	4633      	mov	r3, r6
 8018752:	4614      	mov	r4, r2
 8018754:	cc03      	ldmia	r4!, {r0, r1}
 8018756:	42ac      	cmp	r4, r5
 8018758:	6018      	str	r0, [r3, #0]
 801875a:	6059      	str	r1, [r3, #4]
 801875c:	4622      	mov	r2, r4
 801875e:	f103 0308 	add.w	r3, r3, #8
 8018762:	d1f6      	bne.n	8018752 <BAES_CmacCompute+0x14e>
 8018764:	b009      	add	sp, #36	; 0x24
 8018766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801876a:	4637      	mov	r7, r6
 801876c:	e76a      	b.n	8018644 <BAES_CmacCompute+0x40>
 801876e:	f024 0103 	bic.w	r1, r4, #3
 8018772:	f101 0320 	add.w	r3, r1, #32
 8018776:	43e2      	mvns	r2, r4
 8018778:	eb0d 0103 	add.w	r1, sp, r3
 801877c:	f002 0203 	and.w	r2, r2, #3
 8018780:	5d2b      	ldrb	r3, [r5, r4]
 8018782:	00d2      	lsls	r2, r2, #3
 8018784:	4093      	lsls	r3, r2
 8018786:	f851 2c20 	ldr.w	r2, [r1, #-32]
 801878a:	4313      	orrs	r3, r2
 801878c:	f841 3c20 	str.w	r3, [r1, #-32]
 8018790:	3401      	adds	r4, #1
 8018792:	e78d      	b.n	80186b0 <BAES_CmacCompute+0xac>
 8018794:	50060000 	.word	0x50060000
 8018798:	20001410 	.word	0x20001410
 801879c:	20001800 	.word	0x20001800

080187a0 <MoblePalCryptoK1.part.0>:
 80187a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187a2:	4616      	mov	r6, r2
 80187a4:	b089      	sub	sp, #36	; 0x24
 80187a6:	2210      	movs	r2, #16
 80187a8:	461f      	mov	r7, r3
 80187aa:	4604      	mov	r4, r0
 80187ac:	460d      	mov	r5, r1
 80187ae:	eb0d 0002 	add.w	r0, sp, r2
 80187b2:	2100      	movs	r1, #0
 80187b4:	f010 fa04 	bl	8028bc0 <memset>
 80187b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80187ba:	4639      	mov	r1, r7
 80187bc:	a804      	add	r0, sp, #16
 80187be:	f010 f9d7 	bl	8028b70 <memcpy>
 80187c2:	466b      	mov	r3, sp
 80187c4:	4632      	mov	r2, r6
 80187c6:	4629      	mov	r1, r5
 80187c8:	a804      	add	r0, sp, #16
 80187ca:	f7ff ff1b 	bl	8018604 <BAES_CmacCompute>
 80187ce:	4668      	mov	r0, sp
 80187d0:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
 80187d4:	4623      	mov	r3, r4
 80187d6:	f7ff ff15 	bl	8018604 <BAES_CmacCompute>
 80187da:	2000      	movs	r0, #0
 80187dc:	b009      	add	sp, #36	; 0x24
 80187de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080187e0 <BAES_EcbEncrypt>:
 80187e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80187e2:	4606      	mov	r6, r0
 80187e4:	460c      	mov	r4, r1
 80187e6:	4615      	mov	r5, r2
 80187e8:	f7ff fea0 	bl	801852c <HW_AES_Enable>
 80187ec:	4630      	mov	r0, r6
 80187ee:	f7ff fed5 	bl	801859c <HW_AES_SetKey>
 80187f2:	4b11      	ldr	r3, [pc, #68]	; (8018838 <BAES_EcbEncrypt+0x58>)
 80187f4:	2205      	movs	r2, #5
 80187f6:	601a      	str	r2, [r3, #0]
 80187f8:	4623      	mov	r3, r4
 80187fa:	f103 0610 	add.w	r6, r3, #16
 80187fe:	466c      	mov	r4, sp
 8018800:	6818      	ldr	r0, [r3, #0]
 8018802:	6859      	ldr	r1, [r3, #4]
 8018804:	4622      	mov	r2, r4
 8018806:	c203      	stmia	r2!, {r0, r1}
 8018808:	3308      	adds	r3, #8
 801880a:	42b3      	cmp	r3, r6
 801880c:	4614      	mov	r4, r2
 801880e:	d1f7      	bne.n	8018800 <BAES_EcbEncrypt+0x20>
 8018810:	4669      	mov	r1, sp
 8018812:	4668      	mov	r0, sp
 8018814:	f7ff fee4 	bl	80185e0 <HW_AES_Crypt>
 8018818:	f7ff fea6 	bl	8018568 <HW_AES_Disable>
 801881c:	462a      	mov	r2, r5
 801881e:	466b      	mov	r3, sp
 8018820:	ad04      	add	r5, sp, #16
 8018822:	461c      	mov	r4, r3
 8018824:	cc03      	ldmia	r4!, {r0, r1}
 8018826:	42ac      	cmp	r4, r5
 8018828:	6010      	str	r0, [r2, #0]
 801882a:	6051      	str	r1, [r2, #4]
 801882c:	4623      	mov	r3, r4
 801882e:	f102 0208 	add.w	r2, r2, #8
 8018832:	d1f6      	bne.n	8018822 <BAES_EcbEncrypt+0x42>
 8018834:	b004      	add	sp, #16
 8018836:	bd70      	pop	{r4, r5, r6, pc}
 8018838:	50060000 	.word	0x50060000

0801883c <HW_AES_CcmStart>:
 801883c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018840:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8018842:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018844:	3e02      	subs	r6, #2
 8018846:	1e1c      	subs	r4, r3, #0
 8018848:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801884c:	f1c1 030e 	rsb	r3, r1, #14
 8018850:	4615      	mov	r5, r2
 8018852:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 8018856:	bf14      	ite	ne
 8018858:	2240      	movne	r2, #64	; 0x40
 801885a:	2200      	moveq	r2, #0
 801885c:	4313      	orrs	r3, r2
 801885e:	f1c1 080f 	rsb	r8, r1, #15
 8018862:	460a      	mov	r2, r1
 8018864:	4601      	mov	r1, r0
 8018866:	f10d 0001 	add.w	r0, sp, #1
 801886a:	f88d 3000 	strb.w	r3, [sp]
 801886e:	f010 f97f 	bl	8028b70 <memcpy>
 8018872:	aa04      	add	r2, sp, #16
 8018874:	2300      	movs	r3, #0
 8018876:	4543      	cmp	r3, r8
 8018878:	d154      	bne.n	8018924 <HW_AES_CcmStart+0xe8>
 801887a:	9b00      	ldr	r3, [sp, #0]
 801887c:	4835      	ldr	r0, [pc, #212]	; (8018954 <HW_AES_CcmStart+0x118>)
 801887e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018880:	4935      	ldr	r1, [pc, #212]	; (8018958 <HW_AES_CcmStart+0x11c>)
 8018882:	ba1b      	rev	r3, r3
 8018884:	62c3      	str	r3, [r0, #44]	; 0x2c
 8018886:	9b01      	ldr	r3, [sp, #4]
 8018888:	ba1b      	rev	r3, r3
 801888a:	6283      	str	r3, [r0, #40]	; 0x28
 801888c:	9b02      	ldr	r3, [sp, #8]
 801888e:	ba1b      	rev	r3, r3
 8018890:	6243      	str	r3, [r0, #36]	; 0x24
 8018892:	9b03      	ldr	r3, [sp, #12]
 8018894:	ba1b      	rev	r3, r3
 8018896:	6203      	str	r3, [r0, #32]
 8018898:	4b30      	ldr	r3, [pc, #192]	; (801895c <HW_AES_CcmStart+0x120>)
 801889a:	2a00      	cmp	r2, #0
 801889c:	bf08      	it	eq
 801889e:	4619      	moveq	r1, r3
 80188a0:	6001      	str	r1, [r0, #0]
 80188a2:	f7fe ffab 	bl	80177fc <HW_AES_WaitComplete>
 80188a6:	b3d4      	cbz	r4, 801891e <HW_AES_CcmStart+0xe2>
 80188a8:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80188ac:	6001      	str	r1, [r0, #0]
 80188ae:	2210      	movs	r2, #16
 80188b0:	2100      	movs	r1, #0
 80188b2:	4668      	mov	r0, sp
 80188b4:	f010 f984 	bl	8028bc0 <memset>
 80188b8:	2c0e      	cmp	r4, #14
 80188ba:	4626      	mov	r6, r4
 80188bc:	bf28      	it	cs
 80188be:	260e      	movcs	r6, #14
 80188c0:	ba63      	rev16	r3, r4
 80188c2:	4632      	mov	r2, r6
 80188c4:	4629      	mov	r1, r5
 80188c6:	f10d 0002 	add.w	r0, sp, #2
 80188ca:	f8ad 3000 	strh.w	r3, [sp]
 80188ce:	f010 f94f 	bl	8028b70 <memcpy>
 80188d2:	4668      	mov	r0, sp
 80188d4:	f7fe ff9e 	bl	8017814 <HW_AES_Input>
 80188d8:	f7fe ff90 	bl	80177fc <HW_AES_WaitComplete>
 80188dc:	4435      	add	r5, r6
 80188de:	1ba4      	subs	r4, r4, r6
 80188e0:	4626      	mov	r6, r4
 80188e2:	eb05 0804 	add.w	r8, r5, r4
 80188e6:	2e0f      	cmp	r6, #15
 80188e8:	eba8 0306 	sub.w	r3, r8, r6
 80188ec:	d81f      	bhi.n	801892e <HW_AES_CcmStart+0xf2>
 80188ee:	f024 030f 	bic.w	r3, r4, #15
 80188f2:	0922      	lsrs	r2, r4, #4
 80188f4:	441d      	add	r5, r3
 80188f6:	f06f 030f 	mvn.w	r3, #15
 80188fa:	fb03 4402 	mla	r4, r3, r2, r4
 80188fe:	b174      	cbz	r4, 801891e <HW_AES_CcmStart+0xe2>
 8018900:	2210      	movs	r2, #16
 8018902:	2100      	movs	r1, #0
 8018904:	4668      	mov	r0, sp
 8018906:	f010 f95b 	bl	8028bc0 <memset>
 801890a:	4622      	mov	r2, r4
 801890c:	4629      	mov	r1, r5
 801890e:	4668      	mov	r0, sp
 8018910:	f010 f92e 	bl	8028b70 <memcpy>
 8018914:	4668      	mov	r0, sp
 8018916:	f7fe ff7d 	bl	8017814 <HW_AES_Input>
 801891a:	f7fe ff6f 	bl	80177fc <HW_AES_WaitComplete>
 801891e:	b004      	add	sp, #16
 8018920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018924:	f802 7d01 	strb.w	r7, [r2, #-1]!
 8018928:	3301      	adds	r3, #1
 801892a:	0a3f      	lsrs	r7, r7, #8
 801892c:	e7a3      	b.n	8018876 <HW_AES_CcmStart+0x3a>
 801892e:	46ec      	mov	ip, sp
 8018930:	f103 0210 	add.w	r2, r3, #16
 8018934:	6818      	ldr	r0, [r3, #0]
 8018936:	6859      	ldr	r1, [r3, #4]
 8018938:	4667      	mov	r7, ip
 801893a:	c703      	stmia	r7!, {r0, r1}
 801893c:	3308      	adds	r3, #8
 801893e:	4293      	cmp	r3, r2
 8018940:	46bc      	mov	ip, r7
 8018942:	d1f7      	bne.n	8018934 <HW_AES_CcmStart+0xf8>
 8018944:	4668      	mov	r0, sp
 8018946:	f7fe ff65 	bl	8017814 <HW_AES_Input>
 801894a:	3e10      	subs	r6, #16
 801894c:	f7fe ff56 	bl	80177fc <HW_AES_WaitComplete>
 8018950:	e7c9      	b.n	80188e6 <HW_AES_CcmStart+0xaa>
 8018952:	bf00      	nop
 8018954:	50060000 	.word	0x50060000
 8018958:	00010005 	.word	0x00010005
 801895c:	00010015 	.word	0x00010015

08018960 <HW_AES_CcmCrypt>:
 8018960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018964:	4681      	mov	r9, r0
 8018966:	b085      	sub	sp, #20
 8018968:	4616      	mov	r6, r2
 801896a:	460d      	mov	r5, r1
 801896c:	2900      	cmp	r1, #0
 801896e:	d03c      	beq.n	80189ea <HW_AES_CcmCrypt+0x8a>
 8018970:	4b2d      	ldr	r3, [pc, #180]	; (8018a28 <HW_AES_CcmCrypt+0xc8>)
 8018972:	f8d3 8000 	ldr.w	r8, [r3]
 8018976:	f428 44c0 	bic.w	r4, r8, #24576	; 0x6000
 801897a:	f024 0401 	bic.w	r4, r4, #1
 801897e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8018982:	f044 0401 	orr.w	r4, r4, #1
 8018986:	601c      	str	r4, [r3, #0]
 8018988:	2700      	movs	r7, #0
 801898a:	f10d 0a10 	add.w	sl, sp, #16
 801898e:	1bea      	subs	r2, r5, r7
 8018990:	2a0f      	cmp	r2, #15
 8018992:	eb06 0b07 	add.w	fp, r6, r7
 8018996:	eb09 0307 	add.w	r3, r9, r7
 801899a:	d829      	bhi.n	80189f0 <HW_AES_CcmCrypt+0x90>
 801899c:	0929      	lsrs	r1, r5, #4
 801899e:	f06f 030f 	mvn.w	r3, #15
 80189a2:	f025 020f 	bic.w	r2, r5, #15
 80189a6:	fb03 5501 	mla	r5, r3, r1, r5
 80189aa:	4491      	add	r9, r2
 80189ac:	4416      	add	r6, r2
 80189ae:	b1e5      	cbz	r5, 80189ea <HW_AES_CcmCrypt+0x8a>
 80189b0:	f018 0f10 	tst.w	r8, #16
 80189b4:	bf1e      	ittt	ne
 80189b6:	f1c5 0310 	rsbne	r3, r5, #16
 80189ba:	ea44 5403 	orrne.w	r4, r4, r3, lsl #20
 80189be:	4b1a      	ldrne	r3, [pc, #104]	; (8018a28 <HW_AES_CcmCrypt+0xc8>)
 80189c0:	f04f 0210 	mov.w	r2, #16
 80189c4:	bf18      	it	ne
 80189c6:	601c      	strne	r4, [r3, #0]
 80189c8:	2100      	movs	r1, #0
 80189ca:	4668      	mov	r0, sp
 80189cc:	f010 f8f8 	bl	8028bc0 <memset>
 80189d0:	462a      	mov	r2, r5
 80189d2:	4649      	mov	r1, r9
 80189d4:	4668      	mov	r0, sp
 80189d6:	f010 f8cb 	bl	8028b70 <memcpy>
 80189da:	4669      	mov	r1, sp
 80189dc:	4608      	mov	r0, r1
 80189de:	f7ff fdff 	bl	80185e0 <HW_AES_Crypt>
 80189e2:	462a      	mov	r2, r5
 80189e4:	4630      	mov	r0, r6
 80189e6:	f010 f8c3 	bl	8028b70 <memcpy>
 80189ea:	b005      	add	sp, #20
 80189ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189f0:	46ec      	mov	ip, sp
 80189f2:	f103 0e10 	add.w	lr, r3, #16
 80189f6:	6818      	ldr	r0, [r3, #0]
 80189f8:	6859      	ldr	r1, [r3, #4]
 80189fa:	4662      	mov	r2, ip
 80189fc:	c203      	stmia	r2!, {r0, r1}
 80189fe:	3308      	adds	r3, #8
 8018a00:	4573      	cmp	r3, lr
 8018a02:	4694      	mov	ip, r2
 8018a04:	d1f7      	bne.n	80189f6 <HW_AES_CcmCrypt+0x96>
 8018a06:	4669      	mov	r1, sp
 8018a08:	4668      	mov	r0, sp
 8018a0a:	f7ff fde9 	bl	80185e0 <HW_AES_Crypt>
 8018a0e:	46ec      	mov	ip, sp
 8018a10:	465a      	mov	r2, fp
 8018a12:	4663      	mov	r3, ip
 8018a14:	cb03      	ldmia	r3!, {r0, r1}
 8018a16:	4553      	cmp	r3, sl
 8018a18:	6010      	str	r0, [r2, #0]
 8018a1a:	6051      	str	r1, [r2, #4]
 8018a1c:	469c      	mov	ip, r3
 8018a1e:	f102 0208 	add.w	r2, r2, #8
 8018a22:	d1f6      	bne.n	8018a12 <HW_AES_CcmCrypt+0xb2>
 8018a24:	3710      	adds	r7, #16
 8018a26:	e7b2      	b.n	801898e <HW_AES_CcmCrypt+0x2e>
 8018a28:	50060000 	.word	0x50060000

08018a2c <HW_AES_CcmGetTag>:
 8018a2c:	b510      	push	{r4, lr}
 8018a2e:	b086      	sub	sp, #24
 8018a30:	4604      	mov	r4, r0
 8018a32:	a802      	add	r0, sp, #8
 8018a34:	9101      	str	r1, [sp, #4]
 8018a36:	f7fe fef9 	bl	801782c <HW_AES_CcmGenerateTag>
 8018a3a:	4601      	mov	r1, r0
 8018a3c:	9a01      	ldr	r2, [sp, #4]
 8018a3e:	4620      	mov	r0, r4
 8018a40:	f010 f896 	bl	8028b70 <memcpy>
 8018a44:	b006      	add	sp, #24
 8018a46:	bd10      	pop	{r4, pc}

08018a48 <BAES_CcmEncrypt>:
 8018a48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018a4c:	461f      	mov	r7, r3
 8018a4e:	4614      	mov	r4, r2
 8018a50:	460d      	mov	r5, r1
 8018a52:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8018a56:	4606      	mov	r6, r0
 8018a58:	f7ff fd68 	bl	801852c <HW_AES_Enable>
 8018a5c:	4638      	mov	r0, r7
 8018a5e:	f7ff fd9d 	bl	801859c <HW_AES_SetKey>
 8018a62:	2301      	movs	r3, #1
 8018a64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018a68:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8018a6c:	f8cd 8000 	str.w	r8, [sp]
 8018a70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8018a74:	f7ff fee2 	bl	801883c <HW_AES_CcmStart>
 8018a78:	4632      	mov	r2, r6
 8018a7a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018a7c:	4641      	mov	r1, r8
 8018a7e:	f7ff ff6f 	bl	8018960 <HW_AES_CcmCrypt>
 8018a82:	4628      	mov	r0, r5
 8018a84:	4621      	mov	r1, r4
 8018a86:	f7ff ffd1 	bl	8018a2c <HW_AES_CcmGetTag>
 8018a8a:	f7ff fd6d 	bl	8018568 <HW_AES_Disable>
 8018a8e:	2000      	movs	r0, #0
 8018a90:	b004      	add	sp, #16
 8018a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018a96 <HW_AES_CcmCheckTag>:
 8018a96:	b530      	push	{r4, r5, lr}
 8018a98:	b085      	sub	sp, #20
 8018a9a:	4604      	mov	r4, r0
 8018a9c:	460d      	mov	r5, r1
 8018a9e:	4668      	mov	r0, sp
 8018aa0:	f7fe fec4 	bl	801782c <HW_AES_CcmGenerateTag>
 8018aa4:	4425      	add	r5, r4
 8018aa6:	4623      	mov	r3, r4
 8018aa8:	2200      	movs	r2, #0
 8018aaa:	42ab      	cmp	r3, r5
 8018aac:	d104      	bne.n	8018ab8 <HW_AES_CcmCheckTag+0x22>
 8018aae:	1e10      	subs	r0, r2, #0
 8018ab0:	bf18      	it	ne
 8018ab2:	2001      	movne	r0, #1
 8018ab4:	b005      	add	sp, #20
 8018ab6:	bd30      	pop	{r4, r5, pc}
 8018ab8:	f813 1b01 	ldrb.w	r1, [r3], #1
 8018abc:	f810 4b01 	ldrb.w	r4, [r0], #1
 8018ac0:	4061      	eors	r1, r4
 8018ac2:	430a      	orrs	r2, r1
 8018ac4:	e7f1      	b.n	8018aaa <HW_AES_CcmCheckTag+0x14>

08018ac6 <BAES_CcmDecrypt>:
 8018ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018aca:	b086      	sub	sp, #24
 8018acc:	460e      	mov	r6, r1
 8018ace:	4615      	mov	r5, r2
 8018ad0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8018ad2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8018ad6:	9305      	str	r3, [sp, #20]
 8018ad8:	4604      	mov	r4, r0
 8018ada:	f7ff fd27 	bl	801852c <HW_AES_Enable>
 8018ade:	4630      	mov	r0, r6
 8018ae0:	f7ff fd5c 	bl	801859c <HW_AES_SetKey>
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8018aea:	9905      	ldr	r1, [sp, #20]
 8018aec:	f8cd 8000 	str.w	r8, [sp]
 8018af0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018af4:	4628      	mov	r0, r5
 8018af6:	f7ff fea1 	bl	801883c <HW_AES_CcmStart>
 8018afa:	4622      	mov	r2, r4
 8018afc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018afe:	4641      	mov	r1, r8
 8018b00:	f7ff ff2e 	bl	8018960 <HW_AES_CcmCrypt>
 8018b04:	4639      	mov	r1, r7
 8018b06:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018b08:	f7ff ffc5 	bl	8018a96 <HW_AES_CcmCheckTag>
 8018b0c:	9005      	str	r0, [sp, #20]
 8018b0e:	f7ff fd2b 	bl	8018568 <HW_AES_Disable>
 8018b12:	9805      	ldr	r0, [sp, #20]
 8018b14:	b006      	add	sp, #24
 8018b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08018b1c <HW_PKA_Enable>:
 8018b1c:	4b12      	ldr	r3, [pc, #72]	; (8018b68 <HW_PKA_Enable+0x4c>)
 8018b1e:	f893 0400 	ldrb.w	r0, [r3, #1024]	; 0x400
 8018b22:	b082      	sub	sp, #8
 8018b24:	b9f0      	cbnz	r0, 8018b64 <HW_PKA_Enable+0x48>
 8018b26:	4a11      	ldr	r2, [pc, #68]	; (8018b6c <HW_PKA_Enable+0x50>)
 8018b28:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8018b2c:	4a10      	ldr	r2, [pc, #64]	; (8018b70 <HW_PKA_Enable+0x54>)
 8018b2e:	4291      	cmp	r1, r2
 8018b30:	d116      	bne.n	8018b60 <HW_PKA_Enable+0x44>
 8018b32:	2001      	movs	r0, #1
 8018b34:	f883 0400 	strb.w	r0, [r3, #1024]	; 0x400
 8018b38:	f3ef 8110 	mrs	r1, PRIMASK
 8018b3c:	b672      	cpsid	i
 8018b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018b42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018b44:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8018b48:	651a      	str	r2, [r3, #80]	; 0x50
 8018b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018b50:	9301      	str	r3, [sp, #4]
 8018b52:	9b01      	ldr	r3, [sp, #4]
 8018b54:	f381 8810 	msr	PRIMASK, r1
 8018b58:	4a06      	ldr	r2, [pc, #24]	; (8018b74 <HW_PKA_Enable+0x58>)
 8018b5a:	6813      	ldr	r3, [r2, #0]
 8018b5c:	4303      	orrs	r3, r0
 8018b5e:	6013      	str	r3, [r2, #0]
 8018b60:	b002      	add	sp, #8
 8018b62:	4770      	bx	lr
 8018b64:	2000      	movs	r0, #0
 8018b66:	e7fb      	b.n	8018b60 <HW_PKA_Enable+0x44>
 8018b68:	20001410 	.word	0x20001410
 8018b6c:	58001400 	.word	0x58001400
 8018b70:	80000400 	.word	0x80000400
 8018b74:	58002000 	.word	0x58002000

08018b78 <HW_PKA_WriteOperand>:
 8018b78:	0080      	lsls	r0, r0, #2
 8018b7a:	f100 40b0 	add.w	r0, r0, #1476395008	; 0x58000000
 8018b7e:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
 8018b82:	b530      	push	{r4, r5, lr}
 8018b84:	460b      	mov	r3, r1
 8018b86:	1f04      	subs	r4, r0, #4
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	dc05      	bgt.n	8018b98 <HW_PKA_WriteOperand+0x20>
 8018b8c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8018b90:	2300      	movs	r3, #0
 8018b92:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 8018b96:	bd30      	pop	{r4, r5, pc}
 8018b98:	f852 5b04 	ldr.w	r5, [r2], #4
 8018b9c:	f844 5f04 	str.w	r5, [r4, #4]!
 8018ba0:	3b01      	subs	r3, #1
 8018ba2:	e7f1      	b.n	8018b88 <HW_PKA_WriteOperand+0x10>

08018ba4 <HW_PKA_Start>:
 8018ba4:	4b07      	ldr	r3, [pc, #28]	; (8018bc4 <HW_PKA_Start+0x20>)
 8018ba6:	681a      	ldr	r2, [r3, #0]
 8018ba8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8018bac:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8018bb0:	6018      	str	r0, [r3, #0]
 8018bb2:	689a      	ldr	r2, [r3, #8]
 8018bb4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8018bb8:	609a      	str	r2, [r3, #8]
 8018bba:	681a      	ldr	r2, [r3, #0]
 8018bbc:	f042 0202 	orr.w	r2, r2, #2
 8018bc0:	601a      	str	r2, [r3, #0]
 8018bc2:	4770      	bx	lr
 8018bc4:	58002000 	.word	0x58002000

08018bc8 <HW_PKA_EndOfOperation>:
 8018bc8:	4b02      	ldr	r3, [pc, #8]	; (8018bd4 <HW_PKA_EndOfOperation+0xc>)
 8018bca:	6858      	ldr	r0, [r3, #4]
 8018bcc:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8018bd0:	4770      	bx	lr
 8018bd2:	bf00      	nop
 8018bd4:	58002000 	.word	0x58002000

08018bd8 <HW_PKA_ReadResult>:
 8018bd8:	0080      	lsls	r0, r0, #2
 8018bda:	f100 40b0 	add.w	r0, r0, #1476395008	; 0x58000000
 8018bde:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
 8018be2:	3a04      	subs	r2, #4
 8018be4:	2900      	cmp	r1, #0
 8018be6:	dc00      	bgt.n	8018bea <HW_PKA_ReadResult+0x12>
 8018be8:	4770      	bx	lr
 8018bea:	f850 3b04 	ldr.w	r3, [r0], #4
 8018bee:	f842 3f04 	str.w	r3, [r2, #4]!
 8018bf2:	3901      	subs	r1, #1
 8018bf4:	e7f6      	b.n	8018be4 <HW_PKA_ReadResult+0xc>
	...

08018bf8 <HW_PKA_Disable>:
 8018bf8:	4a0d      	ldr	r2, [pc, #52]	; (8018c30 <HW_PKA_Disable+0x38>)
 8018bfa:	f892 3400 	ldrb.w	r3, [r2, #1024]	; 0x400
 8018bfe:	b1b3      	cbz	r3, 8018c2e <HW_PKA_Disable+0x36>
 8018c00:	490c      	ldr	r1, [pc, #48]	; (8018c34 <HW_PKA_Disable+0x3c>)
 8018c02:	680b      	ldr	r3, [r1, #0]
 8018c04:	f023 0301 	bic.w	r3, r3, #1
 8018c08:	600b      	str	r3, [r1, #0]
 8018c0a:	f3ef 8010 	mrs	r0, PRIMASK
 8018c0e:	b672      	cpsid	i
 8018c10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018c14:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8018c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018c1a:	650b      	str	r3, [r1, #80]	; 0x50
 8018c1c:	f380 8810 	msr	PRIMASK, r0
 8018c20:	4b05      	ldr	r3, [pc, #20]	; (8018c38 <HW_PKA_Disable+0x40>)
 8018c22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018c26:	6059      	str	r1, [r3, #4]
 8018c28:	2300      	movs	r3, #0
 8018c2a:	f882 3400 	strb.w	r3, [r2, #1024]	; 0x400
 8018c2e:	4770      	bx	lr
 8018c30:	20001410 	.word	0x20001410
 8018c34:	58002000 	.word	0x58002000
 8018c38:	58001400 	.word	0x58001400

08018c3c <HW_PKA_P256_StartRangeCheck>:
 8018c3c:	b508      	push	{r3, lr}
 8018c3e:	4b0b      	ldr	r3, [pc, #44]	; (8018c6c <HW_PKA_P256_StartRangeCheck+0x30>)
 8018c40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018c44:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 8018c48:	4602      	mov	r2, r0
 8018c4a:	2108      	movs	r1, #8
 8018c4c:	f240 102d 	movw	r0, #301	; 0x12d
 8018c50:	f7ff ff92 	bl	8018b78 <HW_PKA_WriteOperand>
 8018c54:	f240 1091 	movw	r0, #401	; 0x191
 8018c58:	4a05      	ldr	r2, [pc, #20]	; (8018c70 <HW_PKA_P256_StartRangeCheck+0x34>)
 8018c5a:	2108      	movs	r1, #8
 8018c5c:	f7ff ff8c 	bl	8018b78 <HW_PKA_WriteOperand>
 8018c60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018c64:	200c      	movs	r0, #12
 8018c66:	f7ff bf9d 	b.w	8018ba4 <HW_PKA_Start>
 8018c6a:	bf00      	nop
 8018c6c:	58002000 	.word	0x58002000
 8018c70:	080314bc 	.word	0x080314bc

08018c74 <BPKA_StartDhKey>:
 8018c74:	b570      	push	{r4, r5, r6, lr}
 8018c76:	4605      	mov	r5, r0
 8018c78:	460c      	mov	r4, r1
 8018c7a:	f7ff ff4f 	bl	8018b1c <HW_PKA_Enable>
 8018c7e:	b378      	cbz	r0, 8018ce0 <BPKA_StartDhKey+0x6c>
 8018c80:	462b      	mov	r3, r5
 8018c82:	4d19      	ldr	r5, [pc, #100]	; (8018ce8 <BPKA_StartDhKey+0x74>)
 8018c84:	f103 0620 	add.w	r6, r3, #32
 8018c88:	6818      	ldr	r0, [r3, #0]
 8018c8a:	6859      	ldr	r1, [r3, #4]
 8018c8c:	462a      	mov	r2, r5
 8018c8e:	c203      	stmia	r2!, {r0, r1}
 8018c90:	3308      	adds	r3, #8
 8018c92:	42b3      	cmp	r3, r6
 8018c94:	4615      	mov	r5, r2
 8018c96:	d1f7      	bne.n	8018c88 <BPKA_StartDhKey+0x14>
 8018c98:	4a14      	ldr	r2, [pc, #80]	; (8018cec <BPKA_StartDhKey+0x78>)
 8018c9a:	4623      	mov	r3, r4
 8018c9c:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8018ca0:	4615      	mov	r5, r2
 8018ca2:	6818      	ldr	r0, [r3, #0]
 8018ca4:	6859      	ldr	r1, [r3, #4]
 8018ca6:	4614      	mov	r4, r2
 8018ca8:	c403      	stmia	r4!, {r0, r1}
 8018caa:	3308      	adds	r3, #8
 8018cac:	42b3      	cmp	r3, r6
 8018cae:	4622      	mov	r2, r4
 8018cb0:	d1f7      	bne.n	8018ca2 <BPKA_StartDhKey+0x2e>
 8018cb2:	4c0f      	ldr	r4, [pc, #60]	; (8018cf0 <BPKA_StartDhKey+0x7c>)
 8018cb4:	f504 7063 	add.w	r0, r4, #908	; 0x38c
 8018cb8:	f7fe fe8c 	bl	80179d4 <BPKA_Reverse>
 8018cbc:	4628      	mov	r0, r5
 8018cbe:	f7fe fe89 	bl	80179d4 <BPKA_Reverse>
 8018cc2:	f504 7073 	add.w	r0, r4, #972	; 0x3cc
 8018cc6:	f7fe fe85 	bl	80179d4 <BPKA_Reverse>
 8018cca:	4628      	mov	r0, r5
 8018ccc:	f7ff ffb6 	bl	8018c3c <HW_PKA_P256_StartRangeCheck>
 8018cd0:	2302      	movs	r3, #2
 8018cd2:	f884 3401 	strb.w	r3, [r4, #1025]	; 0x401
 8018cd6:	2301      	movs	r3, #1
 8018cd8:	f884 33ec 	strb.w	r3, [r4, #1004]	; 0x3ec
 8018cdc:	2000      	movs	r0, #0
 8018cde:	bd70      	pop	{r4, r5, r6, pc}
 8018ce0:	f06f 0001 	mvn.w	r0, #1
 8018ce4:	e7fb      	b.n	8018cde <BPKA_StartDhKey+0x6a>
 8018ce6:	bf00      	nop
 8018ce8:	2000179c 	.word	0x2000179c
 8018cec:	200017bc 	.word	0x200017bc
 8018cf0:	20001410 	.word	0x20001410

08018cf4 <HW_PKA_P256_StartPointCheck>:
 8018cf4:	4b16      	ldr	r3, [pc, #88]	; (8018d50 <HW_PKA_P256_StartPointCheck+0x5c>)
 8018cf6:	b570      	push	{r4, r5, r6, lr}
 8018cf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018cfc:	4c15      	ldr	r4, [pc, #84]	; (8018d54 <HW_PKA_P256_StartPointCheck+0x60>)
 8018cfe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8018d02:	2201      	movs	r2, #1
 8018d04:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8018d08:	4606      	mov	r6, r0
 8018d0a:	460d      	mov	r5, r1
 8018d0c:	f104 0278 	add.w	r2, r4, #120	; 0x78
 8018d10:	2108      	movs	r1, #8
 8018d12:	2003      	movs	r0, #3
 8018d14:	f7ff ff30 	bl	8018b78 <HW_PKA_WriteOperand>
 8018d18:	f104 0258 	add.w	r2, r4, #88	; 0x58
 8018d1c:	2108      	movs	r1, #8
 8018d1e:	2018      	movs	r0, #24
 8018d20:	f7ff ff2a 	bl	8018b78 <HW_PKA_WriteOperand>
 8018d24:	4632      	mov	r2, r6
 8018d26:	2108      	movs	r1, #8
 8018d28:	2057      	movs	r0, #87	; 0x57
 8018d2a:	f7ff ff25 	bl	8018b78 <HW_PKA_WriteOperand>
 8018d2e:	462a      	mov	r2, r5
 8018d30:	2108      	movs	r1, #8
 8018d32:	206c      	movs	r0, #108	; 0x6c
 8018d34:	f7ff ff20 	bl	8018b78 <HW_PKA_WriteOperand>
 8018d38:	f104 0298 	add.w	r2, r4, #152	; 0x98
 8018d3c:	20ff      	movs	r0, #255	; 0xff
 8018d3e:	2108      	movs	r1, #8
 8018d40:	f7ff ff1a 	bl	8018b78 <HW_PKA_WriteOperand>
 8018d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d48:	2028      	movs	r0, #40	; 0x28
 8018d4a:	f7ff bf2b 	b.w	8018ba4 <HW_PKA_Start>
 8018d4e:	bf00      	nop
 8018d50:	58002000 	.word	0x58002000
 8018d54:	08031464 	.word	0x08031464

08018d58 <HW_PKA_P256_StartEccScalarMul>:
 8018d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d5a:	4b1e      	ldr	r3, [pc, #120]	; (8018dd4 <HW_PKA_P256_StartEccScalarMul+0x7c>)
 8018d5c:	4c1e      	ldr	r4, [pc, #120]	; (8018dd8 <HW_PKA_P256_StartEccScalarMul+0x80>)
 8018d5e:	4615      	mov	r5, r2
 8018d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018d64:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8018d68:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8018d6c:	2201      	movs	r2, #1
 8018d6e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8018d72:	4607      	mov	r7, r0
 8018d74:	460e      	mov	r6, r1
 8018d76:	f104 0278 	add.w	r2, r4, #120	; 0x78
 8018d7a:	2108      	movs	r1, #8
 8018d7c:	2003      	movs	r0, #3
 8018d7e:	f7ff fefb 	bl	8018b78 <HW_PKA_WriteOperand>
 8018d82:	f104 0258 	add.w	r2, r4, #88	; 0x58
 8018d86:	2108      	movs	r1, #8
 8018d88:	2018      	movs	r0, #24
 8018d8a:	f7ff fef5 	bl	8018b78 <HW_PKA_WriteOperand>
 8018d8e:	f104 02f8 	add.w	r2, r4, #248	; 0xf8
 8018d92:	2108      	movs	r1, #8
 8018d94:	202d      	movs	r0, #45	; 0x2d
 8018d96:	f7ff feef 	bl	8018b78 <HW_PKA_WriteOperand>
 8018d9a:	463a      	mov	r2, r7
 8018d9c:	2108      	movs	r1, #8
 8018d9e:	2042      	movs	r0, #66	; 0x42
 8018da0:	f7ff feea 	bl	8018b78 <HW_PKA_WriteOperand>
 8018da4:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
 8018da8:	2e00      	cmp	r6, #0
 8018daa:	bf18      	it	ne
 8018dac:	4632      	movne	r2, r6
 8018dae:	2108      	movs	r1, #8
 8018db0:	2057      	movs	r0, #87	; 0x57
 8018db2:	34d8      	adds	r4, #216	; 0xd8
 8018db4:	f7ff fee0 	bl	8018b78 <HW_PKA_WriteOperand>
 8018db8:	2d00      	cmp	r5, #0
 8018dba:	bf14      	ite	ne
 8018dbc:	462a      	movne	r2, r5
 8018dbe:	4622      	moveq	r2, r4
 8018dc0:	206c      	movs	r0, #108	; 0x6c
 8018dc2:	2108      	movs	r1, #8
 8018dc4:	f7ff fed8 	bl	8018b78 <HW_PKA_WriteOperand>
 8018dc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018dcc:	2022      	movs	r0, #34	; 0x22
 8018dce:	f7ff bee9 	b.w	8018ba4 <HW_PKA_Start>
 8018dd2:	bf00      	nop
 8018dd4:	58002000 	.word	0x58002000
 8018dd8:	08031464 	.word	0x08031464

08018ddc <BPKA_StartP256Key>:
 8018ddc:	b530      	push	{r4, r5, lr}
 8018dde:	b089      	sub	sp, #36	; 0x24
 8018de0:	4604      	mov	r4, r0
 8018de2:	f7ff fe9b 	bl	8018b1c <HW_PKA_Enable>
 8018de6:	b1c8      	cbz	r0, 8018e1c <BPKA_StartP256Key+0x40>
 8018de8:	4623      	mov	r3, r4
 8018dea:	f103 0520 	add.w	r5, r3, #32
 8018dee:	466c      	mov	r4, sp
 8018df0:	6818      	ldr	r0, [r3, #0]
 8018df2:	6859      	ldr	r1, [r3, #4]
 8018df4:	4622      	mov	r2, r4
 8018df6:	c203      	stmia	r2!, {r0, r1}
 8018df8:	3308      	adds	r3, #8
 8018dfa:	42ab      	cmp	r3, r5
 8018dfc:	4614      	mov	r4, r2
 8018dfe:	d1f7      	bne.n	8018df0 <BPKA_StartP256Key+0x14>
 8018e00:	4668      	mov	r0, sp
 8018e02:	f7fe fde7 	bl	80179d4 <BPKA_Reverse>
 8018e06:	2200      	movs	r2, #0
 8018e08:	4611      	mov	r1, r2
 8018e0a:	f7ff ffa5 	bl	8018d58 <HW_PKA_P256_StartEccScalarMul>
 8018e0e:	4b05      	ldr	r3, [pc, #20]	; (8018e24 <BPKA_StartP256Key+0x48>)
 8018e10:	2201      	movs	r2, #1
 8018e12:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
 8018e16:	2000      	movs	r0, #0
 8018e18:	b009      	add	sp, #36	; 0x24
 8018e1a:	bd30      	pop	{r4, r5, pc}
 8018e1c:	f06f 0001 	mvn.w	r0, #1
 8018e20:	e7fa      	b.n	8018e18 <BPKA_StartP256Key+0x3c>
 8018e22:	bf00      	nop
 8018e24:	20001410 	.word	0x20001410

08018e28 <HW_PKA_P256_ReadEccScalarMul>:
 8018e28:	b510      	push	{r4, lr}
 8018e2a:	4602      	mov	r2, r0
 8018e2c:	460c      	mov	r4, r1
 8018e2e:	b118      	cbz	r0, 8018e38 <HW_PKA_P256_ReadEccScalarMul+0x10>
 8018e30:	2108      	movs	r1, #8
 8018e32:	2057      	movs	r0, #87	; 0x57
 8018e34:	f7ff fed0 	bl	8018bd8 <HW_PKA_ReadResult>
 8018e38:	b134      	cbz	r4, 8018e48 <HW_PKA_P256_ReadEccScalarMul+0x20>
 8018e3a:	4622      	mov	r2, r4
 8018e3c:	2108      	movs	r1, #8
 8018e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e42:	206c      	movs	r0, #108	; 0x6c
 8018e44:	f7ff bec8 	b.w	8018bd8 <HW_PKA_ReadResult>
 8018e48:	bd10      	pop	{r4, pc}
	...

08018e4c <BPKA_Status>:
 8018e4c:	b510      	push	{r4, lr}
 8018e4e:	f7ff febb 	bl	8018bc8 <HW_PKA_EndOfOperation>
 8018e52:	b300      	cbz	r0, 8018e96 <BPKA_Status+0x4a>
 8018e54:	4c23      	ldr	r4, [pc, #140]	; (8018ee4 <BPKA_Status+0x98>)
 8018e56:	f894 3401 	ldrb.w	r3, [r4, #1025]	; 0x401
 8018e5a:	3b01      	subs	r3, #1
 8018e5c:	2b04      	cmp	r3, #4
 8018e5e:	d83f      	bhi.n	8018ee0 <BPKA_Status+0x94>
 8018e60:	e8df f003 	tbb	[pc, r3]
 8018e64:	281c0e03 	.word	0x281c0e03
 8018e68:	36          	.byte	0x36
 8018e69:	00          	.byte	0x00
 8018e6a:	491f      	ldr	r1, [pc, #124]	; (8018ee8 <BPKA_Status+0x9c>)
 8018e6c:	f1a1 0020 	sub.w	r0, r1, #32
 8018e70:	f7ff ffda 	bl	8018e28 <HW_PKA_P256_ReadEccScalarMul>
 8018e74:	f7ff fec0 	bl	8018bf8 <HW_PKA_Disable>
 8018e78:	2000      	movs	r0, #0
 8018e7a:	f884 0401 	strb.w	r0, [r4, #1025]	; 0x401
 8018e7e:	e00c      	b.n	8018e9a <BPKA_Status+0x4e>
 8018e80:	4b1a      	ldr	r3, [pc, #104]	; (8018eec <BPKA_Status+0xa0>)
 8018e82:	f8d3 3bd0 	ldr.w	r3, [r3, #3024]	; 0xbd0
 8018e86:	2b02      	cmp	r3, #2
 8018e88:	d1f4      	bne.n	8018e74 <BPKA_Status+0x28>
 8018e8a:	4819      	ldr	r0, [pc, #100]	; (8018ef0 <BPKA_Status+0xa4>)
 8018e8c:	f7ff fed6 	bl	8018c3c <HW_PKA_P256_StartRangeCheck>
 8018e90:	2303      	movs	r3, #3
 8018e92:	f884 3401 	strb.w	r3, [r4, #1025]	; 0x401
 8018e96:	f06f 0001 	mvn.w	r0, #1
 8018e9a:	bd10      	pop	{r4, pc}
 8018e9c:	4b13      	ldr	r3, [pc, #76]	; (8018eec <BPKA_Status+0xa0>)
 8018e9e:	f8d3 3bd0 	ldr.w	r3, [r3, #3024]	; 0xbd0
 8018ea2:	2b02      	cmp	r3, #2
 8018ea4:	d1e6      	bne.n	8018e74 <BPKA_Status+0x28>
 8018ea6:	4912      	ldr	r1, [pc, #72]	; (8018ef0 <BPKA_Status+0xa4>)
 8018ea8:	f1a1 0020 	sub.w	r0, r1, #32
 8018eac:	f7ff ff22 	bl	8018cf4 <HW_PKA_P256_StartPointCheck>
 8018eb0:	2304      	movs	r3, #4
 8018eb2:	e7ee      	b.n	8018e92 <BPKA_Status+0x46>
 8018eb4:	4b0d      	ldr	r3, [pc, #52]	; (8018eec <BPKA_Status+0xa0>)
 8018eb6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d1da      	bne.n	8018e74 <BPKA_Status+0x28>
 8018ebe:	4a0c      	ldr	r2, [pc, #48]	; (8018ef0 <BPKA_Status+0xa4>)
 8018ec0:	f1a2 0120 	sub.w	r1, r2, #32
 8018ec4:	f1a2 0040 	sub.w	r0, r2, #64	; 0x40
 8018ec8:	f7ff ff46 	bl	8018d58 <HW_PKA_P256_StartEccScalarMul>
 8018ecc:	2305      	movs	r3, #5
 8018ece:	e7e0      	b.n	8018e92 <BPKA_Status+0x46>
 8018ed0:	4808      	ldr	r0, [pc, #32]	; (8018ef4 <BPKA_Status+0xa8>)
 8018ed2:	2100      	movs	r1, #0
 8018ed4:	f7ff ffa8 	bl	8018e28 <HW_PKA_P256_ReadEccScalarMul>
 8018ed8:	2300      	movs	r3, #0
 8018eda:	f884 33ec 	strb.w	r3, [r4, #1004]	; 0x3ec
 8018ede:	e7c9      	b.n	8018e74 <BPKA_Status+0x28>
 8018ee0:	2000      	movs	r0, #0
 8018ee2:	e7da      	b.n	8018e9a <BPKA_Status+0x4e>
 8018ee4:	20001410 	.word	0x20001410
 8018ee8:	200017bc 	.word	0x200017bc
 8018eec:	58002000 	.word	0x58002000
 8018ef0:	200017dc 	.word	0x200017dc
 8018ef4:	2000179c 	.word	0x2000179c

08018ef8 <MoblePalCryptoGetEccPublicKey.part.0>:
 8018ef8:	b538      	push	{r3, r4, r5, lr}
 8018efa:	4605      	mov	r5, r0
 8018efc:	4807      	ldr	r0, [pc, #28]	; (8018f1c <MoblePalCryptoGetEccPublicKey.part.0+0x24>)
 8018efe:	f7ff ff6d 	bl	8018ddc <BPKA_StartP256Key>
 8018f02:	2800      	cmp	r0, #0
 8018f04:	d1fa      	bne.n	8018efc <MoblePalCryptoGetEccPublicKey.part.0+0x4>
 8018f06:	f7ff ffa1 	bl	8018e4c <BPKA_Status>
 8018f0a:	4604      	mov	r4, r0
 8018f0c:	2800      	cmp	r0, #0
 8018f0e:	d1fa      	bne.n	8018f06 <MoblePalCryptoGetEccPublicKey.part.0+0xe>
 8018f10:	4628      	mov	r0, r5
 8018f12:	f7ff facf 	bl	80184b4 <BPKA_ReadP256Key>
 8018f16:	4620      	mov	r0, r4
 8018f18:	bd38      	pop	{r3, r4, r5, pc}
 8018f1a:	bf00      	nop
 8018f1c:	20001813 	.word	0x20001813

08018f20 <MoblePalCryptoInit>:
 8018f20:	4919      	ldr	r1, [pc, #100]	; (8018f88 <MoblePalCryptoInit+0x68>)
 8018f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f24:	2300      	movs	r3, #0
 8018f26:	880c      	ldrh	r4, [r1, #0]
 8018f28:	4d18      	ldr	r5, [pc, #96]	; (8018f8c <MoblePalCryptoInit+0x6c>)
 8018f2a:	277c      	movs	r7, #124	; 0x7c
 8018f2c:	4618      	mov	r0, r3
 8018f2e:	b2da      	uxtb	r2, r3
 8018f30:	42a2      	cmp	r2, r4
 8018f32:	f103 0601 	add.w	r6, r3, #1
 8018f36:	d318      	bcc.n	8018f6a <MoblePalCryptoInit+0x4a>
 8018f38:	2300      	movs	r3, #0
 8018f3a:	8909      	ldrh	r1, [r1, #8]
 8018f3c:	242c      	movs	r4, #44	; 0x2c
 8018f3e:	461e      	mov	r6, r3
 8018f40:	b2da      	uxtb	r2, r3
 8018f42:	428a      	cmp	r2, r1
 8018f44:	f103 0001 	add.w	r0, r3, #1
 8018f48:	d317      	bcc.n	8018f7a <MoblePalCryptoInit+0x5a>
 8018f4a:	2400      	movs	r4, #0
 8018f4c:	2228      	movs	r2, #40	; 0x28
 8018f4e:	4621      	mov	r1, r4
 8018f50:	480f      	ldr	r0, [pc, #60]	; (8018f90 <MoblePalCryptoInit+0x70>)
 8018f52:	f8c5 4658 	str.w	r4, [r5, #1624]	; 0x658
 8018f56:	f885 465c 	strb.w	r4, [r5, #1628]	; 0x65c
 8018f5a:	f00f fe31 	bl	8028bc0 <memset>
 8018f5e:	f8a5 461c 	strh.w	r4, [r5, #1564]	; 0x61c
 8018f62:	f885 461e 	strb.w	r4, [r5, #1566]	; 0x61e
 8018f66:	4620      	mov	r0, r4
 8018f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f6a:	fb07 5302 	mla	r3, r7, r2, r5
 8018f6e:	f883 0445 	strb.w	r0, [r3, #1093]	; 0x445
 8018f72:	f883 0446 	strb.w	r0, [r3, #1094]	; 0x446
 8018f76:	4633      	mov	r3, r6
 8018f78:	e7d9      	b.n	8018f2e <MoblePalCryptoInit+0xe>
 8018f7a:	fb04 5202 	mla	r2, r4, r2, r5
 8018f7e:	4603      	mov	r3, r0
 8018f80:	f8a2 65b8 	strh.w	r6, [r2, #1464]	; 0x5b8
 8018f84:	e7dc      	b.n	8018f40 <MoblePalCryptoInit+0x20>
 8018f86:	bf00      	nop
 8018f88:	20000008 	.word	0x20000008
 8018f8c:	20001410 	.word	0x20001410
 8018f90:	20001a40 	.word	0x20001a40

08018f94 <MoblePalCryptoHasNewNetworkKey>:
 8018f94:	4b0a      	ldr	r3, [pc, #40]	; (8018fc0 <MoblePalCryptoHasNewNetworkKey+0x2c>)
 8018f96:	b570      	push	{r4, r5, r6, lr}
 8018f98:	4d0a      	ldr	r5, [pc, #40]	; (8018fc4 <MoblePalCryptoHasNewNetworkKey+0x30>)
 8018f9a:	8819      	ldrh	r1, [r3, #0]
 8018f9c:	267c      	movs	r6, #124	; 0x7c
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	b2da      	uxtb	r2, r3
 8018fa2:	428a      	cmp	r2, r1
 8018fa4:	d301      	bcc.n	8018faa <MoblePalCryptoHasNewNetworkKey+0x16>
 8018fa6:	2000      	movs	r0, #0
 8018fa8:	e008      	b.n	8018fbc <MoblePalCryptoHasNewNetworkKey+0x28>
 8018faa:	fb06 5202 	mla	r2, r6, r2, r5
 8018fae:	3301      	adds	r3, #1
 8018fb0:	f8b2 4448 	ldrh.w	r4, [r2, #1096]	; 0x448
 8018fb4:	4284      	cmp	r4, r0
 8018fb6:	d1f3      	bne.n	8018fa0 <MoblePalCryptoHasNewNetworkKey+0xc>
 8018fb8:	f892 0446 	ldrb.w	r0, [r2, #1094]	; 0x446
 8018fbc:	bd70      	pop	{r4, r5, r6, pc}
 8018fbe:	bf00      	nop
 8018fc0:	20000008 	.word	0x20000008
 8018fc4:	20001410 	.word	0x20001410

08018fc8 <MoblePalCryptoHasNetworkKey>:
 8018fc8:	4b0a      	ldr	r3, [pc, #40]	; (8018ff4 <MoblePalCryptoHasNetworkKey+0x2c>)
 8018fca:	b570      	push	{r4, r5, r6, lr}
 8018fcc:	4d0a      	ldr	r5, [pc, #40]	; (8018ff8 <MoblePalCryptoHasNetworkKey+0x30>)
 8018fce:	8819      	ldrh	r1, [r3, #0]
 8018fd0:	267c      	movs	r6, #124	; 0x7c
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	b2da      	uxtb	r2, r3
 8018fd6:	428a      	cmp	r2, r1
 8018fd8:	d301      	bcc.n	8018fde <MoblePalCryptoHasNetworkKey+0x16>
 8018fda:	2000      	movs	r0, #0
 8018fdc:	e008      	b.n	8018ff0 <MoblePalCryptoHasNetworkKey+0x28>
 8018fde:	fb06 5202 	mla	r2, r6, r2, r5
 8018fe2:	3301      	adds	r3, #1
 8018fe4:	f8b2 4448 	ldrh.w	r4, [r2, #1096]	; 0x448
 8018fe8:	4284      	cmp	r4, r0
 8018fea:	d1f3      	bne.n	8018fd4 <MoblePalCryptoHasNetworkKey+0xc>
 8018fec:	f892 0445 	ldrb.w	r0, [r2, #1093]	; 0x445
 8018ff0:	bd70      	pop	{r4, r5, r6, pc}
 8018ff2:	bf00      	nop
 8018ff4:	20000008 	.word	0x20000008
 8018ff8:	20001410 	.word	0x20001410

08018ffc <MoblePalCryptoHasAppKey>:
 8018ffc:	4b0a      	ldr	r3, [pc, #40]	; (8019028 <MoblePalCryptoHasAppKey+0x2c>)
 8018ffe:	b570      	push	{r4, r5, r6, lr}
 8019000:	4d0a      	ldr	r5, [pc, #40]	; (801902c <MoblePalCryptoHasAppKey+0x30>)
 8019002:	8919      	ldrh	r1, [r3, #8]
 8019004:	262c      	movs	r6, #44	; 0x2c
 8019006:	2300      	movs	r3, #0
 8019008:	b2da      	uxtb	r2, r3
 801900a:	428a      	cmp	r2, r1
 801900c:	d301      	bcc.n	8019012 <MoblePalCryptoHasAppKey+0x16>
 801900e:	2000      	movs	r0, #0
 8019010:	e008      	b.n	8019024 <MoblePalCryptoHasAppKey+0x28>
 8019012:	fb06 5202 	mla	r2, r6, r2, r5
 8019016:	3301      	adds	r3, #1
 8019018:	f8b2 45ba 	ldrh.w	r4, [r2, #1466]	; 0x5ba
 801901c:	4284      	cmp	r4, r0
 801901e:	d1f3      	bne.n	8019008 <MoblePalCryptoHasAppKey+0xc>
 8019020:	f892 05b8 	ldrb.w	r0, [r2, #1464]	; 0x5b8
 8019024:	bd70      	pop	{r4, r5, r6, pc}
 8019026:	bf00      	nop
 8019028:	20000008 	.word	0x20000008
 801902c:	20001410 	.word	0x20001410

08019030 <MoblePalCryptoSetNodeIdntyState>:
 8019030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019032:	4605      	mov	r5, r0
 8019034:	460c      	mov	r4, r1
 8019036:	f7ff ffc7 	bl	8018fc8 <MoblePalCryptoHasNetworkKey>
 801903a:	b1c8      	cbz	r0, 8019070 <MoblePalCryptoSetNodeIdntyState+0x40>
 801903c:	2c01      	cmp	r4, #1
 801903e:	d817      	bhi.n	8019070 <MoblePalCryptoSetNodeIdntyState+0x40>
 8019040:	4b0c      	ldr	r3, [pc, #48]	; (8019074 <MoblePalCryptoSetNodeIdntyState+0x44>)
 8019042:	4e0d      	ldr	r6, [pc, #52]	; (8019078 <MoblePalCryptoSetNodeIdntyState+0x48>)
 8019044:	8819      	ldrh	r1, [r3, #0]
 8019046:	2200      	movs	r2, #0
 8019048:	277c      	movs	r7, #124	; 0x7c
 801904a:	b2d3      	uxtb	r3, r2
 801904c:	428b      	cmp	r3, r1
 801904e:	d301      	bcc.n	8019054 <MoblePalCryptoSetNodeIdntyState+0x24>
 8019050:	2000      	movs	r0, #0
 8019052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019054:	fb07 6303 	mla	r3, r7, r3, r6
 8019058:	f893 0445 	ldrb.w	r0, [r3, #1093]	; 0x445
 801905c:	2801      	cmp	r0, #1
 801905e:	d105      	bne.n	801906c <MoblePalCryptoSetNodeIdntyState+0x3c>
 8019060:	f8b3 0448 	ldrh.w	r0, [r3, #1096]	; 0x448
 8019064:	42a8      	cmp	r0, r5
 8019066:	bf08      	it	eq
 8019068:	f883 4444 	strbeq.w	r4, [r3, #1092]	; 0x444
 801906c:	3201      	adds	r2, #1
 801906e:	e7ec      	b.n	801904a <MoblePalCryptoSetNodeIdntyState+0x1a>
 8019070:	2003      	movs	r0, #3
 8019072:	e7ee      	b.n	8019052 <MoblePalCryptoSetNodeIdntyState+0x22>
 8019074:	20000008 	.word	0x20000008
 8019078:	20001410 	.word	0x20001410

0801907c <MoblePalCryptoGetNodeIdntyState>:
 801907c:	4b0c      	ldr	r3, [pc, #48]	; (80190b0 <MoblePalCryptoGetNodeIdntyState+0x34>)
 801907e:	b570      	push	{r4, r5, r6, lr}
 8019080:	8819      	ldrh	r1, [r3, #0]
 8019082:	4d0c      	ldr	r5, [pc, #48]	; (80190b4 <MoblePalCryptoGetNodeIdntyState+0x38>)
 8019084:	2200      	movs	r2, #0
 8019086:	267c      	movs	r6, #124	; 0x7c
 8019088:	b2d3      	uxtb	r3, r2
 801908a:	428b      	cmp	r3, r1
 801908c:	d301      	bcc.n	8019092 <MoblePalCryptoGetNodeIdntyState+0x16>
 801908e:	2000      	movs	r0, #0
 8019090:	e00b      	b.n	80190aa <MoblePalCryptoGetNodeIdntyState+0x2e>
 8019092:	fb06 5303 	mla	r3, r6, r3, r5
 8019096:	f893 4445 	ldrb.w	r4, [r3, #1093]	; 0x445
 801909a:	2c01      	cmp	r4, #1
 801909c:	d106      	bne.n	80190ac <MoblePalCryptoGetNodeIdntyState+0x30>
 801909e:	f8b3 4448 	ldrh.w	r4, [r3, #1096]	; 0x448
 80190a2:	4284      	cmp	r4, r0
 80190a4:	d102      	bne.n	80190ac <MoblePalCryptoGetNodeIdntyState+0x30>
 80190a6:	f893 0444 	ldrb.w	r0, [r3, #1092]	; 0x444
 80190aa:	bd70      	pop	{r4, r5, r6, pc}
 80190ac:	3201      	adds	r2, #1
 80190ae:	e7eb      	b.n	8019088 <MoblePalCryptoGetNodeIdntyState+0xc>
 80190b0:	20000008 	.word	0x20000008
 80190b4:	20001410 	.word	0x20001410

080190b8 <MoblePalCryptoGetNodeIdntyToBeAdvt>:
 80190b8:	b530      	push	{r4, r5, lr}
 80190ba:	4b11      	ldr	r3, [pc, #68]	; (8019100 <MoblePalCryptoGetNodeIdntyToBeAdvt+0x48>)
 80190bc:	8819      	ldrh	r1, [r3, #0]
 80190be:	4b11      	ldr	r3, [pc, #68]	; (8019104 <MoblePalCryptoGetNodeIdntyToBeAdvt+0x4c>)
 80190c0:	f893 265d 	ldrb.w	r2, [r3, #1629]	; 0x65d
 80190c4:	428a      	cmp	r2, r1
 80190c6:	bf24      	itt	cs
 80190c8:	2200      	movcs	r2, #0
 80190ca:	f883 265d 	strbcs.w	r2, [r3, #1629]	; 0x65d
 80190ce:	f893 065d 	ldrb.w	r0, [r3, #1629]	; 0x65d
 80190d2:	257c      	movs	r5, #124	; 0x7c
 80190d4:	b284      	uxth	r4, r0
 80190d6:	4602      	mov	r2, r0
 80190d8:	42a1      	cmp	r1, r4
 80190da:	f100 0001 	add.w	r0, r0, #1
 80190de:	b2c0      	uxtb	r0, r0
 80190e0:	d905      	bls.n	80190ee <MoblePalCryptoGetNodeIdntyToBeAdvt+0x36>
 80190e2:	fb05 3202 	mla	r2, r5, r2, r3
 80190e6:	f892 2444 	ldrb.w	r2, [r2, #1092]	; 0x444
 80190ea:	2a01      	cmp	r2, #1
 80190ec:	d1f2      	bne.n	80190d4 <MoblePalCryptoGetNodeIdntyToBeAdvt+0x1c>
 80190ee:	f883 065d 	strb.w	r0, [r3, #1629]	; 0x65d
 80190f2:	4b05      	ldr	r3, [pc, #20]	; (8019108 <MoblePalCryptoGetNodeIdntyToBeAdvt+0x50>)
 80190f4:	227c      	movs	r2, #124	; 0x7c
 80190f6:	3801      	subs	r0, #1
 80190f8:	fb02 3000 	mla	r0, r2, r0, r3
 80190fc:	bd30      	pop	{r4, r5, pc}
 80190fe:	bf00      	nop
 8019100:	20000008 	.word	0x20000008
 8019104:	20001410 	.word	0x20001410
 8019108:	20001834 	.word	0x20001834

0801910c <MoblePalCryptoGetNetworkIdToBeAdvt>:
 801910c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801910e:	4d1c      	ldr	r5, [pc, #112]	; (8019180 <MoblePalCryptoGetNetworkIdToBeAdvt+0x74>)
 8019110:	4c1c      	ldr	r4, [pc, #112]	; (8019184 <MoblePalCryptoGetNetworkIdToBeAdvt+0x78>)
 8019112:	f895 365e 	ldrb.w	r3, [r5, #1630]	; 0x65e
 8019116:	f895 661c 	ldrb.w	r6, [r5, #1564]	; 0x61c
 801911a:	481b      	ldr	r0, [pc, #108]	; (8019188 <MoblePalCryptoGetNetworkIdToBeAdvt+0x7c>)
 801911c:	42b3      	cmp	r3, r6
 801911e:	bf24      	itt	cs
 8019120:	2300      	movcs	r3, #0
 8019122:	f885 365e 	strbcs.w	r3, [r5, #1630]	; 0x65e
 8019126:	f895 265e 	ldrb.w	r2, [r5, #1630]	; 0x65e
 801912a:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
 801912e:	4414      	add	r4, r2
 8019130:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019134:	b2d3      	uxtb	r3, r2
 8019136:	429e      	cmp	r6, r3
 8019138:	d810      	bhi.n	801915c <MoblePalCryptoGetNetworkIdToBeAdvt+0x50>
 801913a:	3301      	adds	r3, #1
 801913c:	b2db      	uxtb	r3, r3
 801913e:	f885 365e 	strb.w	r3, [r5, #1630]	; 0x65e
 8019142:	217c      	movs	r1, #124	; 0x7c
 8019144:	3b01      	subs	r3, #1
 8019146:	434b      	muls	r3, r1
 8019148:	4910      	ldr	r1, [pc, #64]	; (801918c <MoblePalCryptoGetNetworkIdToBeAdvt+0x80>)
 801914a:	440a      	add	r2, r1
 801914c:	f892 20c0 	ldrb.w	r2, [r2, #192]	; 0xc0
 8019150:	2a02      	cmp	r2, #2
 8019152:	bf0c      	ite	eq
 8019154:	3330      	addeq	r3, #48	; 0x30
 8019156:	3328      	addne	r3, #40	; 0x28
 8019158:	4418      	add	r0, r3
 801915a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801915c:	f891 7021 	ldrb.w	r7, [r1, #33]	; 0x21
 8019160:	2f01      	cmp	r7, #1
 8019162:	d102      	bne.n	801916a <MoblePalCryptoGetNetworkIdToBeAdvt+0x5e>
 8019164:	7827      	ldrb	r7, [r4, #0]
 8019166:	2f02      	cmp	r7, #2
 8019168:	d1e7      	bne.n	801913a <MoblePalCryptoGetNetworkIdToBeAdvt+0x2e>
 801916a:	f891 7022 	ldrb.w	r7, [r1, #34]	; 0x22
 801916e:	2f01      	cmp	r7, #1
 8019170:	d102      	bne.n	8019178 <MoblePalCryptoGetNetworkIdToBeAdvt+0x6c>
 8019172:	7827      	ldrb	r7, [r4, #0]
 8019174:	2f02      	cmp	r7, #2
 8019176:	d0e0      	beq.n	801913a <MoblePalCryptoGetNetworkIdToBeAdvt+0x2e>
 8019178:	3201      	adds	r2, #1
 801917a:	3401      	adds	r4, #1
 801917c:	317c      	adds	r1, #124	; 0x7c
 801917e:	e7d9      	b.n	8019134 <MoblePalCryptoGetNetworkIdToBeAdvt+0x28>
 8019180:	20001410 	.word	0x20001410
 8019184:	200003d8 	.word	0x200003d8
 8019188:	20001834 	.word	0x20001834
 801918c:	20000318 	.word	0x20000318

08019190 <MoblePalCrypto_GetNetKeyIndexes>:
 8019190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019192:	2300      	movs	r3, #0
 8019194:	f8df c038 	ldr.w	ip, [pc, #56]	; 80191d0 <MoblePalCrypto_GetNetKeyIndexes+0x40>
 8019198:	4e0c      	ldr	r6, [pc, #48]	; (80191cc <MoblePalCrypto_GetNetKeyIndexes+0x3c>)
 801919a:	461a      	mov	r2, r3
 801919c:	f04f 0e7c 	mov.w	lr, #124	; 0x7c
 80191a0:	f8bc 7000 	ldrh.w	r7, [ip]
 80191a4:	b2dc      	uxtb	r4, r3
 80191a6:	42bc      	cmp	r4, r7
 80191a8:	d303      	bcc.n	80191b2 <MoblePalCrypto_GetNetKeyIndexes+0x22>
 80191aa:	f896 361c 	ldrb.w	r3, [r6, #1564]	; 0x61c
 80191ae:	800b      	strh	r3, [r1, #0]
 80191b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191b2:	fb0e 6404 	mla	r4, lr, r4, r6
 80191b6:	f894 5445 	ldrb.w	r5, [r4, #1093]	; 0x445
 80191ba:	b12d      	cbz	r5, 80191c8 <MoblePalCrypto_GetNetKeyIndexes+0x38>
 80191bc:	f8b4 4448 	ldrh.w	r4, [r4, #1096]	; 0x448
 80191c0:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
 80191c4:	3201      	adds	r2, #1
 80191c6:	b2d2      	uxtb	r2, r2
 80191c8:	3301      	adds	r3, #1
 80191ca:	e7e9      	b.n	80191a0 <MoblePalCrypto_GetNetKeyIndexes+0x10>
 80191cc:	20001410 	.word	0x20001410
 80191d0:	20000008 	.word	0x20000008

080191d4 <MoblePalCrypto_isPrimarySubnet>:
 80191d4:	4b0b      	ldr	r3, [pc, #44]	; (8019204 <MoblePalCrypto_isPrimarySubnet+0x30>)
 80191d6:	b530      	push	{r4, r5, lr}
 80191d8:	4c0b      	ldr	r4, [pc, #44]	; (8019208 <MoblePalCrypto_isPrimarySubnet+0x34>)
 80191da:	8819      	ldrh	r1, [r3, #0]
 80191dc:	257c      	movs	r5, #124	; 0x7c
 80191de:	2300      	movs	r3, #0
 80191e0:	b2da      	uxtb	r2, r3
 80191e2:	428a      	cmp	r2, r1
 80191e4:	d301      	bcc.n	80191ea <MoblePalCrypto_isPrimarySubnet+0x16>
 80191e6:	2000      	movs	r0, #0
 80191e8:	bd30      	pop	{r4, r5, pc}
 80191ea:	fb05 4202 	mla	r2, r5, r2, r4
 80191ee:	f892 0445 	ldrb.w	r0, [r2, #1093]	; 0x445
 80191f2:	b110      	cbz	r0, 80191fa <MoblePalCrypto_isPrimarySubnet+0x26>
 80191f4:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	; 0x448
 80191f8:	b10a      	cbz	r2, 80191fe <MoblePalCrypto_isPrimarySubnet+0x2a>
 80191fa:	3301      	adds	r3, #1
 80191fc:	e7f0      	b.n	80191e0 <MoblePalCrypto_isPrimarySubnet+0xc>
 80191fe:	2001      	movs	r0, #1
 8019200:	e7f2      	b.n	80191e8 <MoblePalCrypto_isPrimarySubnet+0x14>
 8019202:	bf00      	nop
 8019204:	20000008 	.word	0x20000008
 8019208:	20001410 	.word	0x20001410

0801920c <MoblePalCryptoSetDevKey>:
 801920c:	b510      	push	{r4, lr}
 801920e:	4c05      	ldr	r4, [pc, #20]	; (8019224 <MoblePalCryptoSetDevKey+0x18>)
 8019210:	4601      	mov	r1, r0
 8019212:	2210      	movs	r2, #16
 8019214:	f504 60c4 	add.w	r0, r4, #1568	; 0x620
 8019218:	f00f fcb8 	bl	8028b8c <memmove>
 801921c:	2301      	movs	r3, #1
 801921e:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 8019222:	bd10      	pop	{r4, pc}
 8019224:	20001410 	.word	0x20001410

08019228 <MoblePalCryptoForgetAllKeys>:
 8019228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801922c:	4e36      	ldr	r6, [pc, #216]	; (8019308 <MoblePalCryptoForgetAllKeys+0xe0>)
 801922e:	4c37      	ldr	r4, [pc, #220]	; (801930c <MoblePalCryptoForgetAllKeys+0xe4>)
 8019230:	2500      	movs	r5, #0
 8019232:	8833      	ldrh	r3, [r6, #0]
 8019234:	b2ef      	uxtb	r7, r5
 8019236:	429f      	cmp	r7, r3
 8019238:	d314      	bcc.n	8019264 <MoblePalCryptoForgetAllKeys+0x3c>
 801923a:	f04f 0a00 	mov.w	sl, #0
 801923e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8019314 <MoblePalCryptoForgetAllKeys+0xec>
 8019242:	272c      	movs	r7, #44	; 0x2c
 8019244:	46d0      	mov	r8, sl
 8019246:	8932      	ldrh	r2, [r6, #8]
 8019248:	fa5f f58a 	uxtb.w	r5, sl
 801924c:	4295      	cmp	r5, r2
 801924e:	d32e      	bcc.n	80192ae <MoblePalCryptoForgetAllKeys+0x86>
 8019250:	2210      	movs	r2, #16
 8019252:	2100      	movs	r1, #0
 8019254:	482e      	ldr	r0, [pc, #184]	; (8019310 <MoblePalCryptoForgetAllKeys+0xe8>)
 8019256:	f00f fcb3 	bl	8028bc0 <memset>
 801925a:	2000      	movs	r0, #0
 801925c:	f884 061e 	strb.w	r0, [r4, #1566]	; 0x61e
 8019260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019264:	207c      	movs	r0, #124	; 0x7c
 8019266:	4378      	muls	r0, r7
 8019268:	1823      	adds	r3, r4, r0
 801926a:	f893 2445 	ldrb.w	r2, [r3, #1093]	; 0x445
 801926e:	2a01      	cmp	r2, #1
 8019270:	d10c      	bne.n	801928c <MoblePalCryptoForgetAllKeys+0x64>
 8019272:	2100      	movs	r1, #0
 8019274:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
 8019278:	4b26      	ldr	r3, [pc, #152]	; (8019314 <MoblePalCryptoForgetAllKeys+0xec>)
 801927a:	2210      	movs	r2, #16
 801927c:	4418      	add	r0, r3
 801927e:	f00f fc9f 	bl	8028bc0 <memset>
 8019282:	f894 361c 	ldrb.w	r3, [r4, #1564]	; 0x61c
 8019286:	3b01      	subs	r3, #1
 8019288:	f884 361c 	strb.w	r3, [r4, #1564]	; 0x61c
 801928c:	237c      	movs	r3, #124	; 0x7c
 801928e:	437b      	muls	r3, r7
 8019290:	18e2      	adds	r2, r4, r3
 8019292:	f892 1446 	ldrb.w	r1, [r2, #1094]	; 0x446
 8019296:	2901      	cmp	r1, #1
 8019298:	d107      	bne.n	80192aa <MoblePalCryptoForgetAllKeys+0x82>
 801929a:	481f      	ldr	r0, [pc, #124]	; (8019318 <MoblePalCryptoForgetAllKeys+0xf0>)
 801929c:	2100      	movs	r1, #0
 801929e:	f882 1446 	strb.w	r1, [r2, #1094]	; 0x446
 80192a2:	4418      	add	r0, r3
 80192a4:	2210      	movs	r2, #16
 80192a6:	f00f fc8b 	bl	8028bc0 <memset>
 80192aa:	3501      	adds	r5, #1
 80192ac:	e7c1      	b.n	8019232 <MoblePalCryptoForgetAllKeys+0xa>
 80192ae:	fb07 f005 	mul.w	r0, r7, r5
 80192b2:	1823      	adds	r3, r4, r0
 80192b4:	f893 25b8 	ldrb.w	r2, [r3, #1464]	; 0x5b8
 80192b8:	2a01      	cmp	r2, #1
 80192ba:	d10d      	bne.n	80192d8 <MoblePalCryptoForgetAllKeys+0xb0>
 80192bc:	f500 70ba 	add.w	r0, r0, #372	; 0x174
 80192c0:	f883 85b8 	strb.w	r8, [r3, #1464]	; 0x5b8
 80192c4:	2210      	movs	r2, #16
 80192c6:	2100      	movs	r1, #0
 80192c8:	4448      	add	r0, r9
 80192ca:	f00f fc79 	bl	8028bc0 <memset>
 80192ce:	f894 361d 	ldrb.w	r3, [r4, #1565]	; 0x61d
 80192d2:	3b01      	subs	r3, #1
 80192d4:	f884 361d 	strb.w	r3, [r4, #1565]	; 0x61d
 80192d8:	437d      	muls	r5, r7
 80192da:	1963      	adds	r3, r4, r5
 80192dc:	f893 25b9 	ldrb.w	r2, [r3, #1465]	; 0x5b9
 80192e0:	2a01      	cmp	r2, #1
 80192e2:	d10e      	bne.n	8019302 <MoblePalCryptoForgetAllKeys+0xda>
 80192e4:	f505 75c2 	add.w	r5, r5, #388	; 0x184
 80192e8:	f883 85b9 	strb.w	r8, [r3, #1465]	; 0x5b9
 80192ec:	2210      	movs	r2, #16
 80192ee:	2100      	movs	r1, #0
 80192f0:	eb09 0005 	add.w	r0, r9, r5
 80192f4:	f00f fc64 	bl	8028bc0 <memset>
 80192f8:	f894 361d 	ldrb.w	r3, [r4, #1565]	; 0x61d
 80192fc:	3b01      	subs	r3, #1
 80192fe:	f884 361d 	strb.w	r3, [r4, #1565]	; 0x61d
 8019302:	f10a 0a01 	add.w	sl, sl, #1
 8019306:	e79e      	b.n	8019246 <MoblePalCryptoForgetAllKeys+0x1e>
 8019308:	20000008 	.word	0x20000008
 801930c:	20001410 	.word	0x20001410
 8019310:	20001a30 	.word	0x20001a30
 8019314:	20001834 	.word	0x20001834
 8019318:	20001844 	.word	0x20001844

0801931c <MoblePalCryptoModelsDeInit>:
 801931c:	b570      	push	{r4, r5, r6, lr}
 801931e:	4c1e      	ldr	r4, [pc, #120]	; (8019398 <MoblePalCryptoModelsDeInit+0x7c>)
 8019320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019322:	b09e      	sub	sp, #120	; 0x78
 8019324:	ad0e      	add	r5, sp, #56	; 0x38
 8019326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801932a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801932c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801932e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019330:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019334:	f104 0610 	add.w	r6, r4, #16
 8019338:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801933c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801933e:	ad01      	add	r5, sp, #4
 8019340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019342:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8019344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019346:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8019348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801934a:	6833      	ldr	r3, [r6, #0]
 801934c:	602b      	str	r3, [r5, #0]
 801934e:	3c34      	subs	r4, #52	; 0x34
 8019350:	2500      	movs	r5, #0
 8019352:	4620      	mov	r0, r4
 8019354:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8019358:	2100      	movs	r1, #0
 801935a:	3501      	adds	r5, #1
 801935c:	f00f fc30 	bl	8028bc0 <memset>
 8019360:	2d05      	cmp	r5, #5
 8019362:	f504 7439 	add.w	r4, r4, #740	; 0x2e4
 8019366:	d1f4      	bne.n	8019352 <MoblePalCryptoModelsDeInit+0x36>
 8019368:	ad0e      	add	r5, sp, #56	; 0x38
 801936a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801936c:	4c0a      	ldr	r4, [pc, #40]	; (8019398 <MoblePalCryptoModelsDeInit+0x7c>)
 801936e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019378:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801937c:	ad01      	add	r5, sp, #4
 801937e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019384:	3410      	adds	r4, #16
 8019386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801938a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801938c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801938e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019390:	682b      	ldr	r3, [r5, #0]
 8019392:	6023      	str	r3, [r4, #0]
 8019394:	b01e      	add	sp, #120	; 0x78
 8019396:	bd70      	pop	{r4, r5, r6, pc}
 8019398:	200003c8 	.word	0x200003c8

0801939c <MoblePalCryptoGetNetworkSecurityKeys>:
 801939c:	4b09      	ldr	r3, [pc, #36]	; (80193c4 <MoblePalCryptoGetNetworkSecurityKeys+0x28>)
 801939e:	227c      	movs	r2, #124	; 0x7c
 80193a0:	fb02 3301 	mla	r3, r2, r1, r3
 80193a4:	b958      	cbnz	r0, 80193be <MoblePalCryptoGetNetworkSecurityKeys+0x22>
 80193a6:	f893 3445 	ldrb.w	r3, [r3, #1093]	; 0x445
 80193aa:	4807      	ldr	r0, [pc, #28]	; (80193c8 <MoblePalCryptoGetNetworkSecurityKeys+0x2c>)
 80193ac:	2b01      	cmp	r3, #1
 80193ae:	bf18      	it	ne
 80193b0:	2100      	movne	r1, #0
 80193b2:	b209      	sxth	r1, r1
 80193b4:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 80193b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80193bc:	4770      	bx	lr
 80193be:	f893 3446 	ldrb.w	r3, [r3, #1094]	; 0x446
 80193c2:	e7f2      	b.n	80193aa <MoblePalCryptoGetNetworkSecurityKeys+0xe>
 80193c4:	20001410 	.word	0x20001410
 80193c8:	20001834 	.word	0x20001834

080193cc <MoblePalCryptoGetApplicationSecurityKeys>:
 80193cc:	4b0a      	ldr	r3, [pc, #40]	; (80193f8 <MoblePalCryptoGetApplicationSecurityKeys+0x2c>)
 80193ce:	222c      	movs	r2, #44	; 0x2c
 80193d0:	fb02 3301 	mla	r3, r2, r1, r3
 80193d4:	b960      	cbnz	r0, 80193f0 <MoblePalCryptoGetApplicationSecurityKeys+0x24>
 80193d6:	f893 35b8 	ldrb.w	r3, [r3, #1464]	; 0x5b8
 80193da:	2b01      	cmp	r3, #1
 80193dc:	bf18      	it	ne
 80193de:	2100      	movne	r1, #0
 80193e0:	202c      	movs	r0, #44	; 0x2c
 80193e2:	f44f 73ba 	mov.w	r3, #372	; 0x174
 80193e6:	fb10 3101 	smlabb	r1, r0, r1, r3
 80193ea:	4804      	ldr	r0, [pc, #16]	; (80193fc <MoblePalCryptoGetApplicationSecurityKeys+0x30>)
 80193ec:	4408      	add	r0, r1
 80193ee:	4770      	bx	lr
 80193f0:	f893 35b9 	ldrb.w	r3, [r3, #1465]	; 0x5b9
 80193f4:	e7f1      	b.n	80193da <MoblePalCryptoGetApplicationSecurityKeys+0xe>
 80193f6:	bf00      	nop
 80193f8:	20001410 	.word	0x20001410
 80193fc:	20001834 	.word	0x20001834

08019400 <MoblePalCryptoGetSecurityKeys_Beacon>:
 8019400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019404:	4c18      	ldr	r4, [pc, #96]	; (8019468 <MoblePalCryptoGetSecurityKeys_Beacon+0x68>)
 8019406:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8019470 <MoblePalCryptoGetSecurityKeys_Beacon+0x70>
 801940a:	f894 861c 	ldrb.w	r8, [r4, #1564]	; 0x61c
 801940e:	4607      	mov	r7, r0
 8019410:	f204 4454 	addw	r4, r4, #1108	; 0x454
 8019414:	2600      	movs	r6, #0
 8019416:	b2f5      	uxtb	r5, r6
 8019418:	45a8      	cmp	r8, r5
 801941a:	d807      	bhi.n	801942c <MoblePalCryptoGetSecurityKeys_Beacon+0x2c>
 801941c:	2500      	movs	r5, #0
 801941e:	4813      	ldr	r0, [pc, #76]	; (801946c <MoblePalCryptoGetSecurityKeys_Beacon+0x6c>)
 8019420:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 8019424:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8019428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801942c:	f814 3c0f 	ldrb.w	r3, [r4, #-15]
 8019430:	b163      	cbz	r3, 801944c <MoblePalCryptoGetSecurityKeys_Beacon+0x4c>
 8019432:	eb06 0309 	add.w	r3, r6, r9
 8019436:	7d1b      	ldrb	r3, [r3, #20]
 8019438:	2b02      	cmp	r3, #2
 801943a:	d007      	beq.n	801944c <MoblePalCryptoGetSecurityKeys_Beacon+0x4c>
 801943c:	2208      	movs	r2, #8
 801943e:	f1a4 0108 	sub.w	r1, r4, #8
 8019442:	4638      	mov	r0, r7
 8019444:	f00f fb84 	bl	8028b50 <memcmp>
 8019448:	2800      	cmp	r0, #0
 801944a:	d0e8      	beq.n	801941e <MoblePalCryptoGetSecurityKeys_Beacon+0x1e>
 801944c:	f814 3c0e 	ldrb.w	r3, [r4, #-14]
 8019450:	b133      	cbz	r3, 8019460 <MoblePalCryptoGetSecurityKeys_Beacon+0x60>
 8019452:	2208      	movs	r2, #8
 8019454:	4621      	mov	r1, r4
 8019456:	4638      	mov	r0, r7
 8019458:	f00f fb7a 	bl	8028b50 <memcmp>
 801945c:	2800      	cmp	r0, #0
 801945e:	d0de      	beq.n	801941e <MoblePalCryptoGetSecurityKeys_Beacon+0x1e>
 8019460:	3601      	adds	r6, #1
 8019462:	347c      	adds	r4, #124	; 0x7c
 8019464:	e7d7      	b.n	8019416 <MoblePalCryptoGetSecurityKeys_Beacon+0x16>
 8019466:	bf00      	nop
 8019468:	20001410 	.word	0x20001410
 801946c:	20001834 	.word	0x20001834
 8019470:	200003c4 	.word	0x200003c4

08019474 <MoblePalCryptoS1>:
 8019474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019476:	2400      	movs	r4, #0
 8019478:	4603      	mov	r3, r0
 801947a:	4668      	mov	r0, sp
 801947c:	e9cd 4400 	strd	r4, r4, [sp]
 8019480:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8019484:	f7ff f8be 	bl	8018604 <BAES_CmacCompute>
 8019488:	4620      	mov	r0, r4
 801948a:	b004      	add	sp, #16
 801948c:	bd10      	pop	{r4, pc}
	...

08019490 <MobleConfigModelGetAddressFromVirtual>:
 8019490:	b510      	push	{r4, lr}
 8019492:	b088      	sub	sp, #32
 8019494:	4604      	mov	r4, r0
 8019496:	490b      	ldr	r1, [pc, #44]	; (80194c4 <MobleConfigModelGetAddressFromVirtual+0x34>)
 8019498:	2204      	movs	r2, #4
 801949a:	4668      	mov	r0, sp
 801949c:	f7ff ffea 	bl	8019474 <MoblePalCryptoS1>
 80194a0:	ab04      	add	r3, sp, #16
 80194a2:	4668      	mov	r0, sp
 80194a4:	2210      	movs	r2, #16
 80194a6:	4621      	mov	r1, r4
 80194a8:	f7ff f8ac 	bl	8018604 <BAES_CmacCompute>
 80194ac:	f89d 001e 	ldrb.w	r0, [sp, #30]
 80194b0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80194b4:	0200      	lsls	r0, r0, #8
 80194b6:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
 80194ba:	4318      	orrs	r0, r3
 80194bc:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80194c0:	b008      	add	sp, #32
 80194c2:	bd10      	pop	{r4, pc}
 80194c4:	08033533 	.word	0x08033533

080194c8 <MoblePalCryptoK2>:
 80194c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194cc:	b098      	sub	sp, #96	; 0x60
 80194ce:	ae0f      	add	r6, sp, #60	; 0x3c
 80194d0:	460d      	mov	r5, r1
 80194d2:	4680      	mov	r8, r0
 80194d4:	2100      	movs	r1, #0
 80194d6:	4691      	mov	r9, r2
 80194d8:	4630      	mov	r0, r6
 80194da:	2221      	movs	r2, #33	; 0x21
 80194dc:	e9dd a421 	ldrd	sl, r4, [sp, #132]	; 0x84
 80194e0:	461f      	mov	r7, r3
 80194e2:	f00f fb6d 	bl	8028bc0 <memset>
 80194e6:	2210      	movs	r2, #16
 80194e8:	2100      	movs	r1, #0
 80194ea:	a803      	add	r0, sp, #12
 80194ec:	f00f fb68 	bl	8028bc0 <memset>
 80194f0:	4929      	ldr	r1, [pc, #164]	; (8019598 <MoblePalCryptoK2+0xd0>)
 80194f2:	2204      	movs	r2, #4
 80194f4:	a80b      	add	r0, sp, #44	; 0x2c
 80194f6:	f7ff ffbd 	bl	8019474 <MoblePalCryptoS1>
 80194fa:	ab03      	add	r3, sp, #12
 80194fc:	4639      	mov	r1, r7
 80194fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019500:	a80b      	add	r0, sp, #44	; 0x2c
 8019502:	f7ff f87f 	bl	8018604 <BAES_CmacCompute>
 8019506:	4622      	mov	r2, r4
 8019508:	4651      	mov	r1, sl
 801950a:	4630      	mov	r0, r6
 801950c:	f00f fb30 	bl	8028b70 <memcpy>
 8019510:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8019514:	446b      	add	r3, sp
 8019516:	af07      	add	r7, sp, #28
 8019518:	2201      	movs	r2, #1
 801951a:	f803 2c24 	strb.w	r2, [r3, #-36]
 801951e:	4631      	mov	r1, r6
 8019520:	463b      	mov	r3, r7
 8019522:	18a2      	adds	r2, r4, r2
 8019524:	a803      	add	r0, sp, #12
 8019526:	f7ff f86d 	bl	8018604 <BAES_CmacCompute>
 801952a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801952e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8019532:	4622      	mov	r2, r4
 8019534:	4651      	mov	r1, sl
 8019536:	a813      	add	r0, sp, #76	; 0x4c
 8019538:	f00f fb1a 	bl	8028b70 <memcpy>
 801953c:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8019540:	eb0d 0703 	add.w	r7, sp, r3
 8019544:	2302      	movs	r3, #2
 8019546:	f104 0211 	add.w	r2, r4, #17
 801954a:	f807 3c24 	strb.w	r3, [r7, #-36]
 801954e:	4631      	mov	r1, r6
 8019550:	462b      	mov	r3, r5
 8019552:	a803      	add	r0, sp, #12
 8019554:	9201      	str	r2, [sp, #4]
 8019556:	f7ff f855 	bl	8018604 <BAES_CmacCompute>
 801955a:	9a01      	ldr	r2, [sp, #4]
 801955c:	46b4      	mov	ip, r6
 801955e:	f105 0410 	add.w	r4, r5, #16
 8019562:	6828      	ldr	r0, [r5, #0]
 8019564:	6869      	ldr	r1, [r5, #4]
 8019566:	4663      	mov	r3, ip
 8019568:	c303      	stmia	r3!, {r0, r1}
 801956a:	3508      	adds	r5, #8
 801956c:	42a5      	cmp	r5, r4
 801956e:	469c      	mov	ip, r3
 8019570:	d1f7      	bne.n	8019562 <MoblePalCryptoK2+0x9a>
 8019572:	2303      	movs	r3, #3
 8019574:	f807 3c24 	strb.w	r3, [r7, #-36]
 8019578:	a803      	add	r0, sp, #12
 801957a:	464b      	mov	r3, r9
 801957c:	4631      	mov	r1, r6
 801957e:	f7ff f841 	bl	8018604 <BAES_CmacCompute>
 8019582:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8019586:	2000      	movs	r0, #0
 8019588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801958c:	f888 3000 	strb.w	r3, [r8]
 8019590:	b018      	add	sp, #96	; 0x60
 8019592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019596:	bf00      	nop
 8019598:	08033538 	.word	0x08033538

0801959c <MoblePalCryptoK3>:
 801959c:	b530      	push	{r4, r5, lr}
 801959e:	4b12      	ldr	r3, [pc, #72]	; (80195e8 <MoblePalCryptoK3+0x4c>)
 80195a0:	b08f      	sub	sp, #60	; 0x3c
 80195a2:	4604      	mov	r4, r0
 80195a4:	6818      	ldr	r0, [r3, #0]
 80195a6:	9000      	str	r0, [sp, #0]
 80195a8:	791b      	ldrb	r3, [r3, #4]
 80195aa:	f88d 3004 	strb.w	r3, [sp, #4]
 80195ae:	460d      	mov	r5, r1
 80195b0:	2204      	movs	r2, #4
 80195b2:	490e      	ldr	r1, [pc, #56]	; (80195ec <MoblePalCryptoK3+0x50>)
 80195b4:	a802      	add	r0, sp, #8
 80195b6:	f7ff ff5d 	bl	8019474 <MoblePalCryptoS1>
 80195ba:	2801      	cmp	r0, #1
 80195bc:	d812      	bhi.n	80195e4 <MoblePalCryptoK3+0x48>
 80195be:	ab06      	add	r3, sp, #24
 80195c0:	2210      	movs	r2, #16
 80195c2:	4629      	mov	r1, r5
 80195c4:	a802      	add	r0, sp, #8
 80195c6:	f7ff f81d 	bl	8018604 <BAES_CmacCompute>
 80195ca:	ab0a      	add	r3, sp, #40	; 0x28
 80195cc:	4669      	mov	r1, sp
 80195ce:	a806      	add	r0, sp, #24
 80195d0:	2205      	movs	r2, #5
 80195d2:	f7ff f817 	bl	8018604 <BAES_CmacCompute>
 80195d6:	ab0c      	add	r3, sp, #48	; 0x30
 80195d8:	cb03      	ldmia	r3!, {r0, r1}
 80195da:	6020      	str	r0, [r4, #0]
 80195dc:	6061      	str	r1, [r4, #4]
 80195de:	2000      	movs	r0, #0
 80195e0:	b00f      	add	sp, #60	; 0x3c
 80195e2:	bd30      	pop	{r4, r5, pc}
 80195e4:	2002      	movs	r0, #2
 80195e6:	e7fb      	b.n	80195e0 <MoblePalCryptoK3+0x44>
 80195e8:	08033542 	.word	0x08033542
 80195ec:	0803353d 	.word	0x0803353d

080195f0 <MoblePalCryptoK4>:
 80195f0:	b530      	push	{r4, r5, lr}
 80195f2:	b08f      	sub	sp, #60	; 0x3c
 80195f4:	4b10      	ldr	r3, [pc, #64]	; (8019638 <MoblePalCryptoK4+0x48>)
 80195f6:	9301      	str	r3, [sp, #4]
 80195f8:	4604      	mov	r4, r0
 80195fa:	460d      	mov	r5, r1
 80195fc:	2204      	movs	r2, #4
 80195fe:	490f      	ldr	r1, [pc, #60]	; (801963c <MoblePalCryptoK4+0x4c>)
 8019600:	a802      	add	r0, sp, #8
 8019602:	f7ff ff37 	bl	8019474 <MoblePalCryptoS1>
 8019606:	2801      	cmp	r0, #1
 8019608:	d814      	bhi.n	8019634 <MoblePalCryptoK4+0x44>
 801960a:	ab06      	add	r3, sp, #24
 801960c:	2210      	movs	r2, #16
 801960e:	4629      	mov	r1, r5
 8019610:	a802      	add	r0, sp, #8
 8019612:	f7fe fff7 	bl	8018604 <BAES_CmacCompute>
 8019616:	2204      	movs	r2, #4
 8019618:	ab0a      	add	r3, sp, #40	; 0x28
 801961a:	a806      	add	r0, sp, #24
 801961c:	eb0d 0102 	add.w	r1, sp, r2
 8019620:	f7fe fff0 	bl	8018604 <BAES_CmacCompute>
 8019624:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8019628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801962c:	7023      	strb	r3, [r4, #0]
 801962e:	2000      	movs	r0, #0
 8019630:	b00f      	add	sp, #60	; 0x3c
 8019632:	bd30      	pop	{r4, r5, pc}
 8019634:	2002      	movs	r0, #2
 8019636:	e7fb      	b.n	8019630 <MoblePalCryptoK4+0x40>
 8019638:	01366469 	.word	0x01366469
 801963c:	08033548 	.word	0x08033548

08019640 <MoblePalCryptoSetNewAppKey>:
 8019640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019644:	4f41      	ldr	r7, [pc, #260]	; (801974c <MoblePalCryptoSetNewAppKey+0x10c>)
 8019646:	4c42      	ldr	r4, [pc, #264]	; (8019750 <MoblePalCryptoSetNewAppKey+0x110>)
 8019648:	883e      	ldrh	r6, [r7, #0]
 801964a:	4603      	mov	r3, r0
 801964c:	f04f 0e7c 	mov.w	lr, #124	; 0x7c
 8019650:	2000      	movs	r0, #0
 8019652:	b2c5      	uxtb	r5, r0
 8019654:	42b5      	cmp	r5, r6
 8019656:	d301      	bcc.n	801965c <MoblePalCryptoSetNewAppKey+0x1c>
 8019658:	2600      	movs	r6, #0
 801965a:	e029      	b.n	80196b0 <MoblePalCryptoSetNewAppKey+0x70>
 801965c:	fb0e 4505 	mla	r5, lr, r5, r4
 8019660:	3001      	adds	r0, #1
 8019662:	f8b5 5448 	ldrh.w	r5, [r5, #1096]	; 0x448
 8019666:	4295      	cmp	r5, r2
 8019668:	d1f3      	bne.n	8019652 <MoblePalCryptoSetNewAppKey+0x12>
 801966a:	2500      	movs	r5, #0
 801966c:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8019670:	4628      	mov	r0, r5
 8019672:	f04f 092c 	mov.w	r9, #44	; 0x2c
 8019676:	b2ee      	uxtb	r6, r5
 8019678:	4546      	cmp	r6, r8
 801967a:	d302      	bcc.n	8019682 <MoblePalCryptoSetNewAppKey+0x42>
 801967c:	b1c0      	cbz	r0, 80196b0 <MoblePalCryptoSetNewAppKey+0x70>
 801967e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019682:	fb09 f006 	mul.w	r0, r9, r6
 8019686:	eb04 0c00 	add.w	ip, r4, r0
 801968a:	f89c e5b9 	ldrb.w	lr, [ip, #1465]	; 0x5b9
 801968e:	f1be 0f00 	cmp.w	lr, #0
 8019692:	d11d      	bne.n	80196d0 <MoblePalCryptoSetNewAppKey+0x90>
 8019694:	f8bc e5be 	ldrh.w	lr, [ip, #1470]	; 0x5be
 8019698:	4596      	cmp	lr, r2
 801969a:	d131      	bne.n	8019700 <MoblePalCryptoSetNewAppKey+0xc0>
 801969c:	f8bc c5ba 	ldrh.w	ip, [ip, #1466]	; 0x5ba
 80196a0:	458c      	cmp	ip, r1
 80196a2:	d12d      	bne.n	8019700 <MoblePalCryptoSetNewAppKey+0xc0>
 80196a4:	4619      	mov	r1, r3
 80196a6:	4b2b      	ldr	r3, [pc, #172]	; (8019754 <MoblePalCryptoSetNewAppKey+0x114>)
 80196a8:	2210      	movs	r2, #16
 80196aa:	4418      	add	r0, r3
 80196ac:	f00f fa6e 	bl	8028b8c <memmove>
 80196b0:	222c      	movs	r2, #44	; 0x2c
 80196b2:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 80196b6:	4828      	ldr	r0, [pc, #160]	; (8019758 <MoblePalCryptoSetNewAppKey+0x118>)
 80196b8:	f894 c61d 	ldrb.w	ip, [r4, #1565]	; 0x61d
 80196bc:	fb16 f702 	smulbb	r7, r6, r2
 80196c0:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 80196c4:	4401      	add	r1, r0
 80196c6:	460d      	mov	r5, r1
 80196c8:	2310      	movs	r3, #16
 80196ca:	fb02 4406 	mla	r4, r2, r6, r4
 80196ce:	e022      	b.n	8019716 <MoblePalCryptoSetNewAppKey+0xd6>
 80196d0:	f1be 0f01 	cmp.w	lr, #1
 80196d4:	d114      	bne.n	8019700 <MoblePalCryptoSetNewAppKey+0xc0>
 80196d6:	f8bc e5be 	ldrh.w	lr, [ip, #1470]	; 0x5be
 80196da:	4596      	cmp	lr, r2
 80196dc:	d110      	bne.n	8019700 <MoblePalCryptoSetNewAppKey+0xc0>
 80196de:	f8bc c5ba 	ldrh.w	ip, [ip, #1466]	; 0x5ba
 80196e2:	458c      	cmp	ip, r1
 80196e4:	d10c      	bne.n	8019700 <MoblePalCryptoSetNewAppKey+0xc0>
 80196e6:	4a1b      	ldr	r2, [pc, #108]	; (8019754 <MoblePalCryptoSetNewAppKey+0x114>)
 80196e8:	4410      	add	r0, r2
 80196ea:	1e5a      	subs	r2, r3, #1
 80196ec:	330f      	adds	r3, #15
 80196ee:	f810 1b01 	ldrb.w	r1, [r0], #1
 80196f2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80196f6:	428d      	cmp	r5, r1
 80196f8:	d125      	bne.n	8019746 <MoblePalCryptoSetNewAppKey+0x106>
 80196fa:	429a      	cmp	r2, r3
 80196fc:	d1f7      	bne.n	80196ee <MoblePalCryptoSetNewAppKey+0xae>
 80196fe:	e7d7      	b.n	80196b0 <MoblePalCryptoSetNewAppKey+0x70>
 8019700:	3501      	adds	r5, #1
 8019702:	2001      	movs	r0, #1
 8019704:	e7b7      	b.n	8019676 <MoblePalCryptoSetNewAppKey+0x36>
 8019706:	f886 8000 	strb.w	r8, [r6]
 801970a:	2002      	movs	r0, #2
 801970c:	e7b7      	b.n	801967e <MoblePalCryptoSetNewAppKey+0x3e>
 801970e:	3b01      	subs	r3, #1
 8019710:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8019714:	d015      	beq.n	8019742 <MoblePalCryptoSetNewAppKey+0x102>
 8019716:	f815 2b01 	ldrb.w	r2, [r5], #1
 801971a:	2a00      	cmp	r2, #0
 801971c:	d0f7      	beq.n	801970e <MoblePalCryptoSetNewAppKey+0xce>
 801971e:	45f4      	cmp	ip, lr
 8019720:	d8f5      	bhi.n	801970e <MoblePalCryptoSetNewAppKey+0xce>
 8019722:	f894 85b9 	ldrb.w	r8, [r4, #1465]	; 0x5b9
 8019726:	f204 56b9 	addw	r6, r4, #1465	; 0x5b9
 801972a:	f1b8 0f00 	cmp.w	r8, #0
 801972e:	d1ee      	bne.n	801970e <MoblePalCryptoSetNewAppKey+0xce>
 8019730:	2301      	movs	r3, #1
 8019732:	f207 1799 	addw	r7, r7, #409	; 0x199
 8019736:	7033      	strb	r3, [r6, #0]
 8019738:	4438      	add	r0, r7
 801973a:	f7ff ff59 	bl	80195f0 <MoblePalCryptoK4>
 801973e:	2801      	cmp	r0, #1
 8019740:	d8e1      	bhi.n	8019706 <MoblePalCryptoSetNewAppKey+0xc6>
 8019742:	2000      	movs	r0, #0
 8019744:	e79b      	b.n	801967e <MoblePalCryptoSetNewAppKey+0x3e>
 8019746:	2003      	movs	r0, #3
 8019748:	e799      	b.n	801967e <MoblePalCryptoSetNewAppKey+0x3e>
 801974a:	bf00      	nop
 801974c:	20000008 	.word	0x20000008
 8019750:	20001410 	.word	0x20001410
 8019754:	200019b8 	.word	0x200019b8
 8019758:	20001834 	.word	0x20001834

0801975c <MoblePalCryptoSetAppKey>:
 801975c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019760:	4f43      	ldr	r7, [pc, #268]	; (8019870 <MoblePalCryptoSetAppKey+0x114>)
 8019762:	4d44      	ldr	r5, [pc, #272]	; (8019874 <MoblePalCryptoSetAppKey+0x118>)
 8019764:	883c      	ldrh	r4, [r7, #0]
 8019766:	4616      	mov	r6, r2
 8019768:	4603      	mov	r3, r0
 801976a:	2200      	movs	r2, #0
 801976c:	f04f 0e7c 	mov.w	lr, #124	; 0x7c
 8019770:	b2d0      	uxtb	r0, r2
 8019772:	42a0      	cmp	r0, r4
 8019774:	d301      	bcc.n	801977a <MoblePalCryptoSetAppKey+0x1e>
 8019776:	2400      	movs	r4, #0
 8019778:	e026      	b.n	80197c8 <MoblePalCryptoSetAppKey+0x6c>
 801977a:	fb0e 5000 	mla	r0, lr, r0, r5
 801977e:	3201      	adds	r2, #1
 8019780:	f8b0 0448 	ldrh.w	r0, [r0, #1096]	; 0x448
 8019784:	42b0      	cmp	r0, r6
 8019786:	d1f3      	bne.n	8019770 <MoblePalCryptoSetAppKey+0x14>
 8019788:	2200      	movs	r2, #0
 801978a:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 801978e:	4610      	mov	r0, r2
 8019790:	f04f 092c 	mov.w	r9, #44	; 0x2c
 8019794:	b2d4      	uxtb	r4, r2
 8019796:	4544      	cmp	r4, r8
 8019798:	d302      	bcc.n	80197a0 <MoblePalCryptoSetAppKey+0x44>
 801979a:	b1a8      	cbz	r0, 80197c8 <MoblePalCryptoSetAppKey+0x6c>
 801979c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197a0:	fb09 f004 	mul.w	r0, r9, r4
 80197a4:	eb05 0c00 	add.w	ip, r5, r0
 80197a8:	f89c e5b8 	ldrb.w	lr, [ip, #1464]	; 0x5b8
 80197ac:	f1be 0f00 	cmp.w	lr, #0
 80197b0:	d11a      	bne.n	80197e8 <MoblePalCryptoSetAppKey+0x8c>
 80197b2:	f8ac 15ba 	strh.w	r1, [ip, #1466]	; 0x5ba
 80197b6:	4619      	mov	r1, r3
 80197b8:	4b2f      	ldr	r3, [pc, #188]	; (8019878 <MoblePalCryptoSetAppKey+0x11c>)
 80197ba:	2210      	movs	r2, #16
 80197bc:	4418      	add	r0, r3
 80197be:	f00f f9e5 	bl	8028b8c <memmove>
 80197c2:	1c63      	adds	r3, r4, #1
 80197c4:	f885 361d 	strb.w	r3, [r5, #1565]	; 0x61d
 80197c8:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 80197cc:	482b      	ldr	r0, [pc, #172]	; (801987c <MoblePalCryptoSetAppKey+0x120>)
 80197ce:	f895 e61d 	ldrb.w	lr, [r5, #1565]	; 0x61d
 80197d2:	272c      	movs	r7, #44	; 0x2c
 80197d4:	fb14 f207 	smulbb	r2, r4, r7
 80197d8:	f502 71ba 	add.w	r1, r2, #372	; 0x174
 80197dc:	4401      	add	r1, r0
 80197de:	468c      	mov	ip, r1
 80197e0:	2310      	movs	r3, #16
 80197e2:	fb07 5404 	mla	r4, r7, r4, r5
 80197e6:	e025      	b.n	8019834 <MoblePalCryptoSetAppKey+0xd8>
 80197e8:	f1be 0f01 	cmp.w	lr, #1
 80197ec:	d114      	bne.n	8019818 <MoblePalCryptoSetAppKey+0xbc>
 80197ee:	f8bc e5be 	ldrh.w	lr, [ip, #1470]	; 0x5be
 80197f2:	45b6      	cmp	lr, r6
 80197f4:	d110      	bne.n	8019818 <MoblePalCryptoSetAppKey+0xbc>
 80197f6:	f8bc c5ba 	ldrh.w	ip, [ip, #1466]	; 0x5ba
 80197fa:	458c      	cmp	ip, r1
 80197fc:	d10c      	bne.n	8019818 <MoblePalCryptoSetAppKey+0xbc>
 80197fe:	4a1e      	ldr	r2, [pc, #120]	; (8019878 <MoblePalCryptoSetAppKey+0x11c>)
 8019800:	4410      	add	r0, r2
 8019802:	1e5a      	subs	r2, r3, #1
 8019804:	330f      	adds	r3, #15
 8019806:	f810 1b01 	ldrb.w	r1, [r0], #1
 801980a:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 801980e:	458c      	cmp	ip, r1
 8019810:	d12b      	bne.n	801986a <MoblePalCryptoSetAppKey+0x10e>
 8019812:	429a      	cmp	r2, r3
 8019814:	d1f7      	bne.n	8019806 <MoblePalCryptoSetAppKey+0xaa>
 8019816:	e7d7      	b.n	80197c8 <MoblePalCryptoSetAppKey+0x6c>
 8019818:	3201      	adds	r2, #1
 801981a:	2001      	movs	r0, #1
 801981c:	e7ba      	b.n	8019794 <MoblePalCryptoSetAppKey+0x38>
 801981e:	703d      	strb	r5, [r7, #0]
 8019820:	f8a4 55be 	strh.w	r5, [r4, #1470]	; 0x5be
 8019824:	f884 55c0 	strb.w	r5, [r4, #1472]	; 0x5c0
 8019828:	2002      	movs	r0, #2
 801982a:	e7b7      	b.n	801979c <MoblePalCryptoSetAppKey+0x40>
 801982c:	3b01      	subs	r3, #1
 801982e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8019832:	d018      	beq.n	8019866 <MoblePalCryptoSetAppKey+0x10a>
 8019834:	f81c 5b01 	ldrb.w	r5, [ip], #1
 8019838:	2d00      	cmp	r5, #0
 801983a:	d0f7      	beq.n	801982c <MoblePalCryptoSetAppKey+0xd0>
 801983c:	45c6      	cmp	lr, r8
 801983e:	d8f5      	bhi.n	801982c <MoblePalCryptoSetAppKey+0xd0>
 8019840:	f894 55b8 	ldrb.w	r5, [r4, #1464]	; 0x5b8
 8019844:	f504 67b7 	add.w	r7, r4, #1464	; 0x5b8
 8019848:	2d00      	cmp	r5, #0
 801984a:	d1ef      	bne.n	801982c <MoblePalCryptoSetAppKey+0xd0>
 801984c:	2301      	movs	r3, #1
 801984e:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 8019852:	703b      	strb	r3, [r7, #0]
 8019854:	f8a4 65be 	strh.w	r6, [r4, #1470]	; 0x5be
 8019858:	f884 35c0 	strb.w	r3, [r4, #1472]	; 0x5c0
 801985c:	4410      	add	r0, r2
 801985e:	f7ff fec7 	bl	80195f0 <MoblePalCryptoK4>
 8019862:	2801      	cmp	r0, #1
 8019864:	d8db      	bhi.n	801981e <MoblePalCryptoSetAppKey+0xc2>
 8019866:	2000      	movs	r0, #0
 8019868:	e798      	b.n	801979c <MoblePalCryptoSetAppKey+0x40>
 801986a:	2003      	movs	r0, #3
 801986c:	e796      	b.n	801979c <MoblePalCryptoSetAppKey+0x40>
 801986e:	bf00      	nop
 8019870:	20000008 	.word	0x20000008
 8019874:	20001410 	.word	0x20001410
 8019878:	200019a8 	.word	0x200019a8
 801987c:	20001834 	.word	0x20001834

08019880 <MoblePalCryptoBeaconKey>:
 8019880:	b530      	push	{r4, r5, lr}
 8019882:	4b11      	ldr	r3, [pc, #68]	; (80198c8 <MoblePalCryptoBeaconKey+0x48>)
 8019884:	b08b      	sub	sp, #44	; 0x2c
 8019886:	4604      	mov	r4, r0
 8019888:	6818      	ldr	r0, [r3, #0]
 801988a:	9004      	str	r0, [sp, #16]
 801988c:	889b      	ldrh	r3, [r3, #4]
 801988e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019892:	460d      	mov	r5, r1
 8019894:	2204      	movs	r2, #4
 8019896:	490d      	ldr	r1, [pc, #52]	; (80198cc <MoblePalCryptoBeaconKey+0x4c>)
 8019898:	a806      	add	r0, sp, #24
 801989a:	f7ff fdeb 	bl	8019474 <MoblePalCryptoS1>
 801989e:	2801      	cmp	r0, #1
 80198a0:	d80c      	bhi.n	80198bc <MoblePalCryptoBeaconKey+0x3c>
 80198a2:	2306      	movs	r3, #6
 80198a4:	9302      	str	r3, [sp, #8]
 80198a6:	2210      	movs	r2, #16
 80198a8:	ab04      	add	r3, sp, #16
 80198aa:	9301      	str	r3, [sp, #4]
 80198ac:	9200      	str	r2, [sp, #0]
 80198ae:	ab06      	add	r3, sp, #24
 80198b0:	4629      	mov	r1, r5
 80198b2:	4620      	mov	r0, r4
 80198b4:	f7fe ff74 	bl	80187a0 <MoblePalCryptoK1.part.0>
 80198b8:	2801      	cmp	r0, #1
 80198ba:	d902      	bls.n	80198c2 <MoblePalCryptoBeaconKey+0x42>
 80198bc:	2002      	movs	r0, #2
 80198be:	b00b      	add	sp, #44	; 0x2c
 80198c0:	bd30      	pop	{r4, r5, pc}
 80198c2:	2000      	movs	r0, #0
 80198c4:	e7fb      	b.n	80198be <MoblePalCryptoBeaconKey+0x3e>
 80198c6:	bf00      	nop
 80198c8:	08033552 	.word	0x08033552
 80198cc:	0803354d 	.word	0x0803354d

080198d0 <MoblePalCryptoIdentityKey>:
 80198d0:	b530      	push	{r4, r5, lr}
 80198d2:	4b11      	ldr	r3, [pc, #68]	; (8019918 <MoblePalCryptoIdentityKey+0x48>)
 80198d4:	b08b      	sub	sp, #44	; 0x2c
 80198d6:	4604      	mov	r4, r0
 80198d8:	6818      	ldr	r0, [r3, #0]
 80198da:	9004      	str	r0, [sp, #16]
 80198dc:	889b      	ldrh	r3, [r3, #4]
 80198de:	f8ad 3014 	strh.w	r3, [sp, #20]
 80198e2:	460d      	mov	r5, r1
 80198e4:	2204      	movs	r2, #4
 80198e6:	490d      	ldr	r1, [pc, #52]	; (801991c <MoblePalCryptoIdentityKey+0x4c>)
 80198e8:	a806      	add	r0, sp, #24
 80198ea:	f7ff fdc3 	bl	8019474 <MoblePalCryptoS1>
 80198ee:	2801      	cmp	r0, #1
 80198f0:	d80c      	bhi.n	801990c <MoblePalCryptoIdentityKey+0x3c>
 80198f2:	2306      	movs	r3, #6
 80198f4:	9302      	str	r3, [sp, #8]
 80198f6:	2210      	movs	r2, #16
 80198f8:	ab04      	add	r3, sp, #16
 80198fa:	9301      	str	r3, [sp, #4]
 80198fc:	9200      	str	r2, [sp, #0]
 80198fe:	ab06      	add	r3, sp, #24
 8019900:	4629      	mov	r1, r5
 8019902:	4620      	mov	r0, r4
 8019904:	f7fe ff4c 	bl	80187a0 <MoblePalCryptoK1.part.0>
 8019908:	2801      	cmp	r0, #1
 801990a:	d902      	bls.n	8019912 <MoblePalCryptoIdentityKey+0x42>
 801990c:	2002      	movs	r0, #2
 801990e:	b00b      	add	sp, #44	; 0x2c
 8019910:	bd30      	pop	{r4, r5, pc}
 8019912:	2000      	movs	r0, #0
 8019914:	e7fb      	b.n	801990e <MoblePalCryptoIdentityKey+0x3e>
 8019916:	bf00      	nop
 8019918:	08033552 	.word	0x08033552
 801991c:	08033559 	.word	0x08033559

08019920 <MoblePalCryptoAesCcmEncrypt>:
 8019920:	b510      	push	{r4, lr}
 8019922:	b086      	sub	sp, #24
 8019924:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019926:	9405      	str	r4, [sp, #20]
 8019928:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801992a:	9404      	str	r4, [sp, #16]
 801992c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801992e:	9403      	str	r4, [sp, #12]
 8019930:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019932:	9402      	str	r4, [sp, #8]
 8019934:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019936:	9401      	str	r4, [sp, #4]
 8019938:	9c08      	ldr	r4, [sp, #32]
 801993a:	9400      	str	r4, [sp, #0]
 801993c:	f7ff f884 	bl	8018a48 <BAES_CcmEncrypt>
 8019940:	2800      	cmp	r0, #0
 8019942:	bf14      	ite	ne
 8019944:	2003      	movne	r0, #3
 8019946:	2000      	moveq	r0, #0
 8019948:	b006      	add	sp, #24
 801994a:	bd10      	pop	{r4, pc}

0801994c <MoblePalCryptoAesCcmDecrypt>:
 801994c:	b510      	push	{r4, lr}
 801994e:	b086      	sub	sp, #24
 8019950:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019952:	9405      	str	r4, [sp, #20]
 8019954:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019956:	9404      	str	r4, [sp, #16]
 8019958:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801995a:	9403      	str	r4, [sp, #12]
 801995c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801995e:	9402      	str	r4, [sp, #8]
 8019960:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019962:	9401      	str	r4, [sp, #4]
 8019964:	9c08      	ldr	r4, [sp, #32]
 8019966:	9400      	str	r4, [sp, #0]
 8019968:	f7ff f8ad 	bl	8018ac6 <BAES_CcmDecrypt>
 801996c:	2800      	cmp	r0, #0
 801996e:	bf14      	ite	ne
 8019970:	2003      	movne	r0, #3
 8019972:	2000      	moveq	r0, #0
 8019974:	b006      	add	sp, #24
 8019976:	bd10      	pop	{r4, pc}

08019978 <MoblePalCryptoAesEcb>:
 8019978:	b538      	push	{r3, r4, r5, lr}
 801997a:	460d      	mov	r5, r1
 801997c:	4611      	mov	r1, r2
 801997e:	4602      	mov	r2, r0
 8019980:	b148      	cbz	r0, 8019996 <MoblePalCryptoAesEcb+0x1e>
 8019982:	b145      	cbz	r5, 8019996 <MoblePalCryptoAesEcb+0x1e>
 8019984:	b139      	cbz	r1, 8019996 <MoblePalCryptoAesEcb+0x1e>
 8019986:	f013 040f 	ands.w	r4, r3, #15
 801998a:	d104      	bne.n	8019996 <MoblePalCryptoAesEcb+0x1e>
 801998c:	4628      	mov	r0, r5
 801998e:	f7fe ff27 	bl	80187e0 <BAES_EcbEncrypt>
 8019992:	4620      	mov	r0, r4
 8019994:	bd38      	pop	{r3, r4, r5, pc}
 8019996:	2003      	movs	r0, #3
 8019998:	e7fc      	b.n	8019994 <MoblePalCryptoAesEcb+0x1c>

0801999a <MoblePalCryptoXor>:
 801999a:	b510      	push	{r4, lr}
 801999c:	3901      	subs	r1, #1
 801999e:	4402      	add	r2, r0
 80199a0:	4290      	cmp	r0, r2
 80199a2:	d100      	bne.n	80199a6 <MoblePalCryptoXor+0xc>
 80199a4:	bd10      	pop	{r4, pc}
 80199a6:	7803      	ldrb	r3, [r0, #0]
 80199a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80199ac:	4063      	eors	r3, r4
 80199ae:	f800 3b01 	strb.w	r3, [r0], #1
 80199b2:	e7f5      	b.n	80199a0 <MoblePalCryptoXor+0x6>

080199b4 <MoblePalCryptoUpdateNetKeyVectors>:
 80199b4:	b510      	push	{r4, lr}
 80199b6:	b088      	sub	sp, #32
 80199b8:	2300      	movs	r3, #0
 80199ba:	f88d 301f 	strb.w	r3, [sp, #31]
 80199be:	4604      	mov	r4, r0
 80199c0:	b930      	cbnz	r0, 80199d0 <MoblePalCryptoUpdateNetKeyVectors+0x1c>
 80199c2:	4b22      	ldr	r3, [pc, #136]	; (8019a4c <MoblePalCryptoUpdateNetKeyVectors+0x98>)
 80199c4:	4a22      	ldr	r2, [pc, #136]	; (8019a50 <MoblePalCryptoUpdateNetKeyVectors+0x9c>)
 80199c6:	4823      	ldr	r0, [pc, #140]	; (8019a54 <MoblePalCryptoUpdateNetKeyVectors+0xa0>)
 80199c8:	f240 5185 	movw	r1, #1413	; 0x585
 80199cc:	f00f f866 	bl	8028a9c <__assert_func>
 80199d0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80199d4:	b913      	cbnz	r3, 80199dc <MoblePalCryptoUpdateNetKeyVectors+0x28>
 80199d6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80199da:	b1e3      	cbz	r3, 8019a16 <MoblePalCryptoUpdateNetKeyVectors+0x62>
 80199dc:	b1e9      	cbz	r1, 8019a1a <MoblePalCryptoUpdateNetKeyVectors+0x66>
 80199de:	4621      	mov	r1, r4
 80199e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80199e4:	f7ff fdda 	bl	801959c <MoblePalCryptoK3>
 80199e8:	2801      	cmp	r0, #1
 80199ea:	d814      	bhi.n	8019a16 <MoblePalCryptoUpdateNetKeyVectors+0x62>
 80199ec:	2301      	movs	r3, #1
 80199ee:	9302      	str	r3, [sp, #8]
 80199f0:	f10d 031f 	add.w	r3, sp, #31
 80199f4:	9301      	str	r3, [sp, #4]
 80199f6:	2310      	movs	r3, #16
 80199f8:	9300      	str	r3, [sp, #0]
 80199fa:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 80199fe:	4623      	mov	r3, r4
 8019a00:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8019a04:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8019a08:	f7ff fd5e 	bl	80194c8 <MoblePalCryptoK2>
 8019a0c:	2801      	cmp	r0, #1
 8019a0e:	d802      	bhi.n	8019a16 <MoblePalCryptoUpdateNetKeyVectors+0x62>
 8019a10:	2000      	movs	r0, #0
 8019a12:	b008      	add	sp, #32
 8019a14:	bd10      	pop	{r4, pc}
 8019a16:	2002      	movs	r0, #2
 8019a18:	e7fb      	b.n	8019a12 <MoblePalCryptoUpdateNetKeyVectors+0x5e>
 8019a1a:	f104 0310 	add.w	r3, r4, #16
 8019a1e:	4619      	mov	r1, r3
 8019a20:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8019a24:	9305      	str	r3, [sp, #20]
 8019a26:	f7ff fdb9 	bl	801959c <MoblePalCryptoK3>
 8019a2a:	2801      	cmp	r0, #1
 8019a2c:	d8f3      	bhi.n	8019a16 <MoblePalCryptoUpdateNetKeyVectors+0x62>
 8019a2e:	2201      	movs	r2, #1
 8019a30:	9202      	str	r2, [sp, #8]
 8019a32:	f10d 021f 	add.w	r2, sp, #31
 8019a36:	9201      	str	r2, [sp, #4]
 8019a38:	2210      	movs	r2, #16
 8019a3a:	9200      	str	r2, [sp, #0]
 8019a3c:	9b05      	ldr	r3, [sp, #20]
 8019a3e:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8019a42:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8019a46:	f104 0039 	add.w	r0, r4, #57	; 0x39
 8019a4a:	e7dd      	b.n	8019a08 <MoblePalCryptoUpdateNetKeyVectors+0x54>
 8019a4c:	0803355e 	.word	0x0803355e
 8019a50:	0803157c 	.word	0x0803157c
 8019a54:	08033563 	.word	0x08033563

08019a58 <MoblePalCryptoSetNewNetworkKey>:
 8019a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a5c:	4b2f      	ldr	r3, [pc, #188]	; (8019b1c <MoblePalCryptoSetNewNetworkKey+0xc4>)
 8019a5e:	4c30      	ldr	r4, [pc, #192]	; (8019b20 <MoblePalCryptoSetNewNetworkKey+0xc8>)
 8019a60:	f8b3 e000 	ldrh.w	lr, [r3]
 8019a64:	2700      	movs	r7, #0
 8019a66:	463b      	mov	r3, r7
 8019a68:	f04f 087c 	mov.w	r8, #124	; 0x7c
 8019a6c:	b2fd      	uxtb	r5, r7
 8019a6e:	fb08 fc05 	mul.w	ip, r8, r5
 8019a72:	eb04 020c 	add.w	r2, r4, ip
 8019a76:	4575      	cmp	r5, lr
 8019a78:	f892 6446 	ldrb.w	r6, [r2, #1094]	; 0x446
 8019a7c:	d210      	bcs.n	8019aa0 <MoblePalCryptoSetNewNetworkKey+0x48>
 8019a7e:	bb4e      	cbnz	r6, 8019ad4 <MoblePalCryptoSetNewNetworkKey+0x7c>
 8019a80:	f892 9445 	ldrb.w	r9, [r2, #1093]	; 0x445
 8019a84:	f1b9 0f01 	cmp.w	r9, #1
 8019a88:	d138      	bne.n	8019afc <MoblePalCryptoSetNewNetworkKey+0xa4>
 8019a8a:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	; 0x448
 8019a8e:	428a      	cmp	r2, r1
 8019a90:	d134      	bne.n	8019afc <MoblePalCryptoSetNewNetworkKey+0xa4>
 8019a92:	4601      	mov	r1, r0
 8019a94:	4823      	ldr	r0, [pc, #140]	; (8019b24 <MoblePalCryptoSetNewNetworkKey+0xcc>)
 8019a96:	2210      	movs	r2, #16
 8019a98:	4460      	add	r0, ip
 8019a9a:	f00f f877 	bl	8028b8c <memmove>
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	267c      	movs	r6, #124	; 0x7c
 8019aa2:	436e      	muls	r6, r5
 8019aa4:	19a2      	adds	r2, r4, r6
 8019aa6:	f892 2446 	ldrb.w	r2, [r2, #1094]	; 0x446
 8019aaa:	431a      	orrs	r2, r3
 8019aac:	d10f      	bne.n	8019ace <MoblePalCryptoSetNewNetworkKey+0x76>
 8019aae:	481e      	ldr	r0, [pc, #120]	; (8019b28 <MoblePalCryptoSetNewNetworkKey+0xd0>)
 8019ab0:	f894 161c 	ldrb.w	r1, [r4, #1564]	; 0x61c
 8019ab4:	f106 0210 	add.w	r2, r6, #16
 8019ab8:	4402      	add	r2, r0
 8019aba:	2310      	movs	r3, #16
 8019abc:	f812 7b01 	ldrb.w	r7, [r2], #1
 8019ac0:	b10f      	cbz	r7, 8019ac6 <MoblePalCryptoSetNewNetworkKey+0x6e>
 8019ac2:	2903      	cmp	r1, #3
 8019ac4:	d91e      	bls.n	8019b04 <MoblePalCryptoSetNewNetworkKey+0xac>
 8019ac6:	3b01      	subs	r3, #1
 8019ac8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8019acc:	d1f6      	bne.n	8019abc <MoblePalCryptoSetNewNetworkKey+0x64>
 8019ace:	4618      	mov	r0, r3
 8019ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ad4:	2e01      	cmp	r6, #1
 8019ad6:	d111      	bne.n	8019afc <MoblePalCryptoSetNewNetworkKey+0xa4>
 8019ad8:	f8b2 3448 	ldrh.w	r3, [r2, #1096]	; 0x448
 8019adc:	428b      	cmp	r3, r1
 8019ade:	d10c      	bne.n	8019afa <MoblePalCryptoSetNewNetworkKey+0xa2>
 8019ae0:	4b10      	ldr	r3, [pc, #64]	; (8019b24 <MoblePalCryptoSetNewNetworkKey+0xcc>)
 8019ae2:	1e42      	subs	r2, r0, #1
 8019ae4:	4463      	add	r3, ip
 8019ae6:	300f      	adds	r0, #15
 8019ae8:	f813 1b01 	ldrb.w	r1, [r3], #1
 8019aec:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8019af0:	428e      	cmp	r6, r1
 8019af2:	d105      	bne.n	8019b00 <MoblePalCryptoSetNewNetworkKey+0xa8>
 8019af4:	4282      	cmp	r2, r0
 8019af6:	d1f7      	bne.n	8019ae8 <MoblePalCryptoSetNewNetworkKey+0x90>
 8019af8:	e7d1      	b.n	8019a9e <MoblePalCryptoSetNewNetworkKey+0x46>
 8019afa:	4633      	mov	r3, r6
 8019afc:	3701      	adds	r7, #1
 8019afe:	e7b5      	b.n	8019a6c <MoblePalCryptoSetNewNetworkKey+0x14>
 8019b00:	2303      	movs	r3, #3
 8019b02:	e7cd      	b.n	8019aa0 <MoblePalCryptoSetNewNetworkKey+0x48>
 8019b04:	237c      	movs	r3, #124	; 0x7c
 8019b06:	fb03 4405 	mla	r4, r3, r5, r4
 8019b0a:	2301      	movs	r3, #1
 8019b0c:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
 8019b10:	4430      	add	r0, r6
 8019b12:	2100      	movs	r1, #0
 8019b14:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b18:	f7ff bf4c 	b.w	80199b4 <MoblePalCryptoUpdateNetKeyVectors>
 8019b1c:	20000008 	.word	0x20000008
 8019b20:	20001410 	.word	0x20001410
 8019b24:	20001844 	.word	0x20001844
 8019b28:	20001834 	.word	0x20001834

08019b2c <MoblePalCryptoSetNetworkKey>:
 8019b2c:	4b2e      	ldr	r3, [pc, #184]	; (8019be8 <MoblePalCryptoSetNetworkKey+0xbc>)
 8019b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b32:	2200      	movs	r2, #0
 8019b34:	4c2d      	ldr	r4, [pc, #180]	; (8019bec <MoblePalCryptoSetNetworkKey+0xc0>)
 8019b36:	881e      	ldrh	r6, [r3, #0]
 8019b38:	f04f 087c 	mov.w	r8, #124	; 0x7c
 8019b3c:	4613      	mov	r3, r2
 8019b3e:	b2d5      	uxtb	r5, r2
 8019b40:	fb08 fe05 	mul.w	lr, r8, r5
 8019b44:	eb04 0c0e 	add.w	ip, r4, lr
 8019b48:	42b5      	cmp	r5, r6
 8019b4a:	f89c 7445 	ldrb.w	r7, [ip, #1093]	; 0x445
 8019b4e:	d20c      	bcs.n	8019b6a <MoblePalCryptoSetNetworkKey+0x3e>
 8019b50:	bb2f      	cbnz	r7, 8019b9e <MoblePalCryptoSetNetworkKey+0x72>
 8019b52:	f8ac 1448 	strh.w	r1, [ip, #1096]	; 0x448
 8019b56:	4601      	mov	r1, r0
 8019b58:	4825      	ldr	r0, [pc, #148]	; (8019bf0 <MoblePalCryptoSetNetworkKey+0xc4>)
 8019b5a:	2210      	movs	r2, #16
 8019b5c:	4470      	add	r0, lr
 8019b5e:	f00f f815 	bl	8028b8c <memmove>
 8019b62:	1c6b      	adds	r3, r5, #1
 8019b64:	f884 361c 	strb.w	r3, [r4, #1564]	; 0x61c
 8019b68:	2300      	movs	r3, #0
 8019b6a:	207c      	movs	r0, #124	; 0x7c
 8019b6c:	fb00 f105 	mul.w	r1, r0, r5
 8019b70:	1862      	adds	r2, r4, r1
 8019b72:	f892 2445 	ldrb.w	r2, [r2, #1093]	; 0x445
 8019b76:	431a      	orrs	r2, r3
 8019b78:	d10e      	bne.n	8019b98 <MoblePalCryptoSetNetworkKey+0x6c>
 8019b7a:	f894 361c 	ldrb.w	r3, [r4, #1564]	; 0x61c
 8019b7e:	42b3      	cmp	r3, r6
 8019b80:	d825      	bhi.n	8019bce <MoblePalCryptoSetNetworkKey+0xa2>
 8019b82:	481b      	ldr	r0, [pc, #108]	; (8019bf0 <MoblePalCryptoSetNetworkKey+0xc4>)
 8019b84:	4408      	add	r0, r1
 8019b86:	4602      	mov	r2, r0
 8019b88:	2310      	movs	r3, #16
 8019b8a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8019b8e:	bb01      	cbnz	r1, 8019bd2 <MoblePalCryptoSetNetworkKey+0xa6>
 8019b90:	3b01      	subs	r3, #1
 8019b92:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8019b96:	d1f8      	bne.n	8019b8a <MoblePalCryptoSetNetworkKey+0x5e>
 8019b98:	4618      	mov	r0, r3
 8019b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b9e:	2f01      	cmp	r7, #1
 8019ba0:	d111      	bne.n	8019bc6 <MoblePalCryptoSetNetworkKey+0x9a>
 8019ba2:	f8bc 3448 	ldrh.w	r3, [ip, #1096]	; 0x448
 8019ba6:	428b      	cmp	r3, r1
 8019ba8:	d10c      	bne.n	8019bc4 <MoblePalCryptoSetNetworkKey+0x98>
 8019baa:	4b11      	ldr	r3, [pc, #68]	; (8019bf0 <MoblePalCryptoSetNetworkKey+0xc4>)
 8019bac:	1e42      	subs	r2, r0, #1
 8019bae:	4473      	add	r3, lr
 8019bb0:	300f      	adds	r0, #15
 8019bb2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8019bb6:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8019bba:	428f      	cmp	r7, r1
 8019bbc:	d105      	bne.n	8019bca <MoblePalCryptoSetNetworkKey+0x9e>
 8019bbe:	4282      	cmp	r2, r0
 8019bc0:	d1f7      	bne.n	8019bb2 <MoblePalCryptoSetNetworkKey+0x86>
 8019bc2:	e7d1      	b.n	8019b68 <MoblePalCryptoSetNetworkKey+0x3c>
 8019bc4:	463b      	mov	r3, r7
 8019bc6:	3201      	adds	r2, #1
 8019bc8:	e7b9      	b.n	8019b3e <MoblePalCryptoSetNetworkKey+0x12>
 8019bca:	2303      	movs	r3, #3
 8019bcc:	e7cd      	b.n	8019b6a <MoblePalCryptoSetNetworkKey+0x3e>
 8019bce:	4613      	mov	r3, r2
 8019bd0:	e7e2      	b.n	8019b98 <MoblePalCryptoSetNetworkKey+0x6c>
 8019bd2:	237c      	movs	r3, #124	; 0x7c
 8019bd4:	fb03 4405 	mla	r4, r3, r5, r4
 8019bd8:	2101      	movs	r1, #1
 8019bda:	f884 1445 	strb.w	r1, [r4, #1093]	; 0x445
 8019bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019be2:	f7ff bee7 	b.w	80199b4 <MoblePalCryptoUpdateNetKeyVectors>
 8019be6:	bf00      	nop
 8019be8:	20000008 	.word	0x20000008
 8019bec:	20001410 	.word	0x20001410
 8019bf0:	20001834 	.word	0x20001834

08019bf4 <MoblePalCryptoSetIvIndex>:
 8019bf4:	b508      	push	{r3, lr}
 8019bf6:	4b05      	ldr	r3, [pc, #20]	; (8019c0c <MoblePalCryptoSetIvIndex+0x18>)
 8019bf8:	2101      	movs	r1, #1
 8019bfa:	f8c3 0658 	str.w	r0, [r3, #1624]	; 0x658
 8019bfe:	f203 4024 	addw	r0, r3, #1060	; 0x424
 8019c02:	f7ff fed7 	bl	80199b4 <MoblePalCryptoUpdateNetKeyVectors>
 8019c06:	2000      	movs	r0, #0
 8019c08:	bd08      	pop	{r3, pc}
 8019c0a:	bf00      	nop
 8019c0c:	20001410 	.word	0x20001410

08019c10 <MoblePalCryptoParseNetHdr>:
 8019c10:	7803      	ldrb	r3, [r0, #0]
 8019c12:	09db      	lsrs	r3, r3, #7
 8019c14:	700b      	strb	r3, [r1, #0]
 8019c16:	7803      	ldrb	r3, [r0, #0]
 8019c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019c1c:	704b      	strb	r3, [r1, #1]
 8019c1e:	7843      	ldrb	r3, [r0, #1]
 8019c20:	09db      	lsrs	r3, r3, #7
 8019c22:	708b      	strb	r3, [r1, #2]
 8019c24:	7843      	ldrb	r3, [r0, #1]
 8019c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019c2a:	70cb      	strb	r3, [r1, #3]
 8019c2c:	78c3      	ldrb	r3, [r0, #3]
 8019c2e:	7882      	ldrb	r2, [r0, #2]
 8019c30:	021b      	lsls	r3, r3, #8
 8019c32:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8019c36:	7902      	ldrb	r2, [r0, #4]
 8019c38:	4413      	add	r3, r2
 8019c3a:	604b      	str	r3, [r1, #4]
 8019c3c:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 8019c40:	810b      	strh	r3, [r1, #8]
 8019c42:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 8019c46:	ba5b      	rev16	r3, r3
 8019c48:	ba52      	rev16	r2, r2
 8019c4a:	810b      	strh	r3, [r1, #8]
 8019c4c:	814a      	strh	r2, [r1, #10]
 8019c4e:	4770      	bx	lr

08019c50 <MoblePalCryptoAuthenticateSecureNetworkBeacon>:
 8019c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c54:	460c      	mov	r4, r1
 8019c56:	b08a      	sub	sp, #40	; 0x28
 8019c58:	4617      	mov	r7, r2
 8019c5a:	4698      	mov	r8, r3
 8019c5c:	4605      	mov	r5, r0
 8019c5e:	2800      	cmp	r0, #0
 8019c60:	d035      	beq.n	8019cce <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x7e>
 8019c62:	2900      	cmp	r1, #0
 8019c64:	d033      	beq.n	8019cce <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x7e>
 8019c66:	f8d1 0001 	ldr.w	r0, [r1, #1]
 8019c6a:	f8d1 1005 	ldr.w	r1, [r1, #5]
 8019c6e:	466e      	mov	r6, sp
 8019c70:	c603      	stmia	r6!, {r0, r1}
 8019c72:	2108      	movs	r1, #8
 8019c74:	4668      	mov	r0, sp
 8019c76:	f7ff fbc3 	bl	8019400 <MoblePalCryptoGetSecurityKeys_Beacon>
 8019c7a:	4601      	mov	r1, r0
 8019c7c:	b930      	cbnz	r0, 8019c8c <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x3c>
 8019c7e:	4b15      	ldr	r3, [pc, #84]	; (8019cd4 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x84>)
 8019c80:	4a15      	ldr	r2, [pc, #84]	; (8019cd8 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x88>)
 8019c82:	4816      	ldr	r0, [pc, #88]	; (8019cdc <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x8c>)
 8019c84:	f640 1116 	movw	r1, #2326	; 0x916
 8019c88:	f00e ff08 	bl	8028a9c <__assert_func>
 8019c8c:	f1b8 0f00 	cmp.w	r8, #0
 8019c90:	d018      	beq.n	8019cc4 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x74>
 8019c92:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8019c96:	b91b      	cbnz	r3, 8019ca0 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x50>
 8019c98:	2002      	movs	r0, #2
 8019c9a:	b00a      	add	sp, #40	; 0x28
 8019c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ca0:	3110      	adds	r1, #16
 8019ca2:	a802      	add	r0, sp, #8
 8019ca4:	f7ff fdec 	bl	8019880 <MoblePalCryptoBeaconKey>
 8019ca8:	2801      	cmp	r0, #1
 8019caa:	d8f5      	bhi.n	8019c98 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x48>
 8019cac:	ab06      	add	r3, sp, #24
 8019cae:	4621      	mov	r1, r4
 8019cb0:	a802      	add	r0, sp, #8
 8019cb2:	463a      	mov	r2, r7
 8019cb4:	f7fe fca6 	bl	8018604 <BAES_CmacCompute>
 8019cb8:	ab06      	add	r3, sp, #24
 8019cba:	cb03      	ldmia	r3!, {r0, r1}
 8019cbc:	6028      	str	r0, [r5, #0]
 8019cbe:	6069      	str	r1, [r5, #4]
 8019cc0:	2000      	movs	r0, #0
 8019cc2:	e7ea      	b.n	8019c9a <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x4a>
 8019cc4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d1ea      	bne.n	8019ca2 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x52>
 8019ccc:	e7e4      	b.n	8019c98 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x48>
 8019cce:	2003      	movs	r0, #3
 8019cd0:	e7e3      	b.n	8019c9a <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x4a>
 8019cd2:	bf00      	nop
 8019cd4:	0803355e 	.word	0x0803355e
 8019cd8:	0803159e 	.word	0x0803159e
 8019cdc:	08033563 	.word	0x08033563

08019ce0 <MoblePalCryptoInitEcc>:
 8019ce0:	4b07      	ldr	r3, [pc, #28]	; (8019d00 <MoblePalCryptoInitEcc+0x20>)
 8019ce2:	f100 0220 	add.w	r2, r0, #32
 8019ce6:	f850 1b04 	ldr.w	r1, [r0], #4
 8019cea:	f843 1b04 	str.w	r1, [r3], #4
 8019cee:	4290      	cmp	r0, r2
 8019cf0:	d1f9      	bne.n	8019ce6 <MoblePalCryptoInitEcc+0x6>
 8019cf2:	4b04      	ldr	r3, [pc, #16]	; (8019d04 <MoblePalCryptoInitEcc+0x24>)
 8019cf4:	2201      	movs	r2, #1
 8019cf6:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 8019cfa:	2000      	movs	r0, #0
 8019cfc:	4770      	bx	lr
 8019cfe:	bf00      	nop
 8019d00:	20001813 	.word	0x20001813
 8019d04:	20001410 	.word	0x20001410

08019d08 <MoblePalCryptoGetEccGenSecret>:
 8019d08:	b510      	push	{r4, lr}
 8019d0a:	4604      	mov	r4, r0
 8019d0c:	4807      	ldr	r0, [pc, #28]	; (8019d2c <MoblePalCryptoGetEccGenSecret+0x24>)
 8019d0e:	4621      	mov	r1, r4
 8019d10:	f7fe ffb0 	bl	8018c74 <BPKA_StartDhKey>
 8019d14:	2800      	cmp	r0, #0
 8019d16:	d1f9      	bne.n	8019d0c <MoblePalCryptoGetEccGenSecret+0x4>
 8019d18:	f7ff f898 	bl	8018e4c <BPKA_Status>
 8019d1c:	2800      	cmp	r0, #0
 8019d1e:	d1fb      	bne.n	8019d18 <MoblePalCryptoGetEccGenSecret+0x10>
 8019d20:	4803      	ldr	r0, [pc, #12]	; (8019d30 <MoblePalCryptoGetEccGenSecret+0x28>)
 8019d22:	f7fe fbe1 	bl	80184e8 <BPKA_ReadDhKey>
 8019d26:	4802      	ldr	r0, [pc, #8]	; (8019d30 <MoblePalCryptoGetEccGenSecret+0x28>)
 8019d28:	bd10      	pop	{r4, pc}
 8019d2a:	bf00      	nop
 8019d2c:	20001813 	.word	0x20001813
 8019d30:	20001a6f 	.word	0x20001a6f

08019d34 <MoblePalCryptoFreeEcc>:
 8019d34:	4b04      	ldr	r3, [pc, #16]	; (8019d48 <MoblePalCryptoFreeEcc+0x14>)
 8019d36:	f893 2402 	ldrb.w	r2, [r3, #1026]	; 0x402
 8019d3a:	b11a      	cbz	r2, 8019d44 <MoblePalCryptoFreeEcc+0x10>
 8019d3c:	2000      	movs	r0, #0
 8019d3e:	f883 0402 	strb.w	r0, [r3, #1026]	; 0x402
 8019d42:	4770      	bx	lr
 8019d44:	2002      	movs	r0, #2
 8019d46:	4770      	bx	lr
 8019d48:	20001410 	.word	0x20001410

08019d4c <MoblePalCrypto_PK_convert_le>:
 8019d4c:	b510      	push	{r4, lr}
 8019d4e:	f100 0320 	add.w	r3, r0, #32
 8019d52:	1e4a      	subs	r2, r1, #1
 8019d54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019d58:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019d5c:	4283      	cmp	r3, r0
 8019d5e:	d1f9      	bne.n	8019d54 <MoblePalCrypto_PK_convert_le+0x8>
 8019d60:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8019d64:	311f      	adds	r1, #31
 8019d66:	3320      	adds	r3, #32
 8019d68:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 8019d6c:	f801 0f01 	strb.w	r0, [r1, #1]!
 8019d70:	429a      	cmp	r2, r3
 8019d72:	d1f9      	bne.n	8019d68 <MoblePalCrypto_PK_convert_le+0x1c>
 8019d74:	bd10      	pop	{r4, pc}
	...

08019d78 <MoblePalCryptoGetAppKeyIndexes>:
 8019d78:	f8df c074 	ldr.w	ip, [pc, #116]	; 8019df0 <MoblePalCryptoGetAppKeyIndexes+0x78>
 8019d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d80:	4606      	mov	r6, r0
 8019d82:	f8df e070 	ldr.w	lr, [pc, #112]	; 8019df4 <MoblePalCryptoGetAppKeyIndexes+0x7c>
 8019d86:	f8bc 0000 	ldrh.w	r0, [ip]
 8019d8a:	2300      	movs	r3, #0
 8019d8c:	277c      	movs	r7, #124	; 0x7c
 8019d8e:	b2dc      	uxtb	r4, r3
 8019d90:	4284      	cmp	r4, r0
 8019d92:	d302      	bcc.n	8019d9a <MoblePalCryptoGetAppKeyIndexes+0x22>
 8019d94:	2300      	movs	r3, #0
 8019d96:	2002      	movs	r0, #2
 8019d98:	e025      	b.n	8019de6 <MoblePalCryptoGetAppKeyIndexes+0x6e>
 8019d9a:	fb07 e404 	mla	r4, r7, r4, lr
 8019d9e:	f8b4 5448 	ldrh.w	r5, [r4, #1096]	; 0x448
 8019da2:	4295      	cmp	r5, r2
 8019da4:	d122      	bne.n	8019dec <MoblePalCryptoGetAppKeyIndexes+0x74>
 8019da6:	f894 4445 	ldrb.w	r4, [r4, #1093]	; 0x445
 8019daa:	2c01      	cmp	r4, #1
 8019dac:	d11e      	bne.n	8019dec <MoblePalCryptoGetAppKeyIndexes+0x74>
 8019dae:	2400      	movs	r4, #0
 8019db0:	4623      	mov	r3, r4
 8019db2:	2002      	movs	r0, #2
 8019db4:	f04f 092c 	mov.w	r9, #44	; 0x2c
 8019db8:	e010      	b.n	8019ddc <MoblePalCryptoGetAppKeyIndexes+0x64>
 8019dba:	fb09 e505 	mla	r5, r9, r5, lr
 8019dbe:	f8b5 75be 	ldrh.w	r7, [r5, #1470]	; 0x5be
 8019dc2:	4297      	cmp	r7, r2
 8019dc4:	d109      	bne.n	8019dda <MoblePalCryptoGetAppKeyIndexes+0x62>
 8019dc6:	f895 75c0 	ldrb.w	r7, [r5, #1472]	; 0x5c0
 8019dca:	b137      	cbz	r7, 8019dda <MoblePalCryptoGetAppKeyIndexes+0x62>
 8019dcc:	f8b5 05ba 	ldrh.w	r0, [r5, #1466]	; 0x5ba
 8019dd0:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
 8019dd4:	3301      	adds	r3, #1
 8019dd6:	b29b      	uxth	r3, r3
 8019dd8:	2000      	movs	r0, #0
 8019dda:	3401      	adds	r4, #1
 8019ddc:	f8bc 8008 	ldrh.w	r8, [ip, #8]
 8019de0:	b2e5      	uxtb	r5, r4
 8019de2:	4545      	cmp	r5, r8
 8019de4:	d3e9      	bcc.n	8019dba <MoblePalCryptoGetAppKeyIndexes+0x42>
 8019de6:	800b      	strh	r3, [r1, #0]
 8019de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019dec:	3301      	adds	r3, #1
 8019dee:	e7ce      	b.n	8019d8e <MoblePalCryptoGetAppKeyIndexes+0x16>
 8019df0:	20000008 	.word	0x20000008
 8019df4:	20001410 	.word	0x20001410

08019df8 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>:
 8019df8:	4b0c      	ldr	r3, [pc, #48]	; (8019e2c <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x34>)
 8019dfa:	b570      	push	{r4, r5, r6, lr}
 8019dfc:	8919      	ldrh	r1, [r3, #8]
 8019dfe:	4d0c      	ldr	r5, [pc, #48]	; (8019e30 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x38>)
 8019e00:	2200      	movs	r2, #0
 8019e02:	262c      	movs	r6, #44	; 0x2c
 8019e04:	b2d3      	uxtb	r3, r2
 8019e06:	428b      	cmp	r3, r1
 8019e08:	d301      	bcc.n	8019e0e <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x16>
 8019e0a:	2000      	movs	r0, #0
 8019e0c:	e00a      	b.n	8019e24 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x2c>
 8019e0e:	fb06 5303 	mla	r3, r6, r3, r5
 8019e12:	f8b3 45ba 	ldrh.w	r4, [r3, #1466]	; 0x5ba
 8019e16:	4284      	cmp	r4, r0
 8019e18:	d105      	bne.n	8019e26 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x2e>
 8019e1a:	f893 45c0 	ldrb.w	r4, [r3, #1472]	; 0x5c0
 8019e1e:	b114      	cbz	r4, 8019e26 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x2e>
 8019e20:	f8b3 05be 	ldrh.w	r0, [r3, #1470]	; 0x5be
 8019e24:	bd70      	pop	{r4, r5, r6, pc}
 8019e26:	3201      	adds	r2, #1
 8019e28:	e7ec      	b.n	8019e04 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0xc>
 8019e2a:	bf00      	nop
 8019e2c:	20000008 	.word	0x20000008
 8019e30:	20001410 	.word	0x20001410

08019e34 <MoblePalCryptoModelAppBindDelete>:
 8019e34:	4b2d      	ldr	r3, [pc, #180]	; (8019eec <MoblePalCryptoModelAppBindDelete+0xb8>)
 8019e36:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8019ef4 <MoblePalCryptoModelAppBindDelete+0xc0>
 8019e3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e3e:	4d2c      	ldr	r5, [pc, #176]	; (8019ef0 <MoblePalCryptoModelAppBindDelete+0xbc>)
 8019e40:	891f      	ldrh	r7, [r3, #8]
 8019e42:	2100      	movs	r1, #0
 8019e44:	4604      	mov	r4, r0
 8019e46:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 8019e4a:	4608      	mov	r0, r1
 8019e4c:	f1a5 06ac 	sub.w	r6, r5, #172	; 0xac
 8019e50:	f04f 0a00 	mov.w	sl, #0
 8019e54:	e012      	b.n	8019e7c <MoblePalCryptoModelAppBindDelete+0x48>
 8019e56:	b92b      	cbnz	r3, 8019e64 <MoblePalCryptoModelAppBindDelete+0x30>
 8019e58:	f83a b002 	ldrh.w	fp, [sl, r2]
 8019e5c:	45a3      	cmp	fp, r4
 8019e5e:	d102      	bne.n	8019e66 <MoblePalCryptoModelAppBindDelete+0x32>
 8019e60:	4618      	mov	r0, r3
 8019e62:	e03d      	b.n	8019ee0 <MoblePalCryptoModelAppBindDelete+0xac>
 8019e64:	2002      	movs	r0, #2
 8019e66:	f109 0901 	add.w	r9, r9, #1
 8019e6a:	f1b9 0f0b 	cmp.w	r9, #11
 8019e6e:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
 8019e72:	d119      	bne.n	8019ea8 <MoblePalCryptoModelAppBindDelete+0x74>
 8019e74:	e034      	b.n	8019ee0 <MoblePalCryptoModelAppBindDelete+0xac>
 8019e76:	f10a 0a01 	add.w	sl, sl, #1
 8019e7a:	2003      	movs	r0, #3
 8019e7c:	fa5f f88a 	uxtb.w	r8, sl
 8019e80:	45b8      	cmp	r8, r7
 8019e82:	d22d      	bcs.n	8019ee0 <MoblePalCryptoModelAppBindDelete+0xac>
 8019e84:	fb0e c208 	mla	r2, lr, r8, ip
 8019e88:	f892 35b8 	ldrb.w	r3, [r2, #1464]	; 0x5b8
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	d1f2      	bne.n	8019e76 <MoblePalCryptoModelAppBindDelete+0x42>
 8019e90:	f8b2 25ba 	ldrh.w	r2, [r2, #1466]	; 0x5ba
 8019e94:	42a2      	cmp	r2, r4
 8019e96:	d1ee      	bne.n	8019e76 <MoblePalCryptoModelAppBindDelete+0x42>
 8019e98:	f44f 7a39 	mov.w	sl, #740	; 0x2e4
 8019e9c:	fb0a 8a01 	mla	sl, sl, r1, r8
 8019ea0:	44aa      	add	sl, r5
 8019ea2:	4699      	mov	r9, r3
 8019ea4:	f108 02a0 	add.w	r2, r8, #160	; 0xa0
 8019ea8:	f89a 30a6 	ldrb.w	r3, [sl, #166]	; 0xa6
 8019eac:	2b01      	cmp	r3, #1
 8019eae:	d1d2      	bne.n	8019e56 <MoblePalCryptoModelAppBindDelete+0x22>
 8019eb0:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 8019eb4:	2338      	movs	r3, #56	; 0x38
 8019eb6:	4348      	muls	r0, r1
 8019eb8:	fb03 0009 	mla	r0, r3, r9, r0
 8019ebc:	4430      	add	r0, r6
 8019ebe:	4440      	add	r0, r8
 8019ec0:	2200      	movs	r2, #0
 8019ec2:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8019ec6:	f880 2152 	strb.w	r2, [r0, #338]	; 0x152
 8019eca:	434b      	muls	r3, r1
 8019ecc:	201c      	movs	r0, #28
 8019ece:	fb00 3309 	mla	r3, r0, r9, r3
 8019ed2:	4443      	add	r3, r8
 8019ed4:	3350      	adds	r3, #80	; 0x50
 8019ed6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8019eda:	4610      	mov	r0, r2
 8019edc:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8019ee0:	3101      	adds	r1, #1
 8019ee2:	2905      	cmp	r1, #5
 8019ee4:	d1b4      	bne.n	8019e50 <MoblePalCryptoModelAppBindDelete+0x1c>
 8019ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eea:	bf00      	nop
 8019eec:	20000008 	.word	0x20000008
 8019ef0:	200003c4 	.word	0x200003c4
 8019ef4:	20001410 	.word	0x20001410

08019ef8 <MoblePalCryptoDeleteAppKey>:
 8019ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019efa:	4604      	mov	r4, r0
 8019efc:	481b      	ldr	r0, [pc, #108]	; (8019f6c <MoblePalCryptoDeleteAppKey+0x74>)
 8019efe:	4d1c      	ldr	r5, [pc, #112]	; (8019f70 <MoblePalCryptoDeleteAppKey+0x78>)
 8019f00:	8806      	ldrh	r6, [r0, #0]
 8019f02:	2300      	movs	r3, #0
 8019f04:	f04f 0c7c 	mov.w	ip, #124	; 0x7c
 8019f08:	b2da      	uxtb	r2, r3
 8019f0a:	42b2      	cmp	r2, r6
 8019f0c:	d20c      	bcs.n	8019f28 <MoblePalCryptoDeleteAppKey+0x30>
 8019f0e:	fb0c 5202 	mla	r2, ip, r2, r5
 8019f12:	3301      	adds	r3, #1
 8019f14:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	; 0x448
 8019f18:	428a      	cmp	r2, r1
 8019f1a:	d1f5      	bne.n	8019f08 <MoblePalCryptoDeleteAppKey+0x10>
 8019f1c:	8901      	ldrh	r1, [r0, #8]
 8019f1e:	2300      	movs	r3, #0
 8019f20:	262c      	movs	r6, #44	; 0x2c
 8019f22:	b2d8      	uxtb	r0, r3
 8019f24:	4288      	cmp	r0, r1
 8019f26:	d301      	bcc.n	8019f2c <MoblePalCryptoDeleteAppKey+0x34>
 8019f28:	2001      	movs	r0, #1
 8019f2a:	e01d      	b.n	8019f68 <MoblePalCryptoDeleteAppKey+0x70>
 8019f2c:	4370      	muls	r0, r6
 8019f2e:	182a      	adds	r2, r5, r0
 8019f30:	3301      	adds	r3, #1
 8019f32:	f8b2 75ba 	ldrh.w	r7, [r2, #1466]	; 0x5ba
 8019f36:	42a7      	cmp	r7, r4
 8019f38:	d1f3      	bne.n	8019f22 <MoblePalCryptoDeleteAppKey+0x2a>
 8019f3a:	f892 35b8 	ldrb.w	r3, [r2, #1464]	; 0x5b8
 8019f3e:	2b01      	cmp	r3, #1
 8019f40:	d10e      	bne.n	8019f60 <MoblePalCryptoDeleteAppKey+0x68>
 8019f42:	4b0c      	ldr	r3, [pc, #48]	; (8019f74 <MoblePalCryptoDeleteAppKey+0x7c>)
 8019f44:	2100      	movs	r1, #0
 8019f46:	f882 15b8 	strb.w	r1, [r2, #1464]	; 0x5b8
 8019f4a:	f882 15c0 	strb.w	r1, [r2, #1472]	; 0x5c0
 8019f4e:	4418      	add	r0, r3
 8019f50:	2210      	movs	r2, #16
 8019f52:	f00e fe35 	bl	8028bc0 <memset>
 8019f56:	f895 361d 	ldrb.w	r3, [r5, #1565]	; 0x61d
 8019f5a:	3b01      	subs	r3, #1
 8019f5c:	f885 361d 	strb.w	r3, [r5, #1565]	; 0x61d
 8019f60:	4620      	mov	r0, r4
 8019f62:	f7ff ff67 	bl	8019e34 <MoblePalCryptoModelAppBindDelete>
 8019f66:	2000      	movs	r0, #0
 8019f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f6a:	bf00      	nop
 8019f6c:	20000008 	.word	0x20000008
 8019f70:	20001410 	.word	0x20001410
 8019f74:	200019a8 	.word	0x200019a8

08019f78 <MoblePalCryptoDeleteNetworkKey>:
 8019f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f7c:	4f2a      	ldr	r7, [pc, #168]	; (801a028 <MoblePalCryptoDeleteNetworkKey+0xb0>)
 8019f7e:	4d2b      	ldr	r5, [pc, #172]	; (801a02c <MoblePalCryptoDeleteNetworkKey+0xb4>)
 8019f80:	8839      	ldrh	r1, [r7, #0]
 8019f82:	f895 c61c 	ldrb.w	ip, [r5, #1564]	; 0x61c
 8019f86:	2200      	movs	r2, #0
 8019f88:	4604      	mov	r4, r0
 8019f8a:	4613      	mov	r3, r2
 8019f8c:	f04f 0e7c 	mov.w	lr, #124	; 0x7c
 8019f90:	b2d0      	uxtb	r0, r2
 8019f92:	4288      	cmp	r0, r1
 8019f94:	d303      	bcc.n	8019f9e <MoblePalCryptoDeleteNetworkKey+0x26>
 8019f96:	b313      	cbz	r3, 8019fde <MoblePalCryptoDeleteNetworkKey+0x66>
 8019f98:	4618      	mov	r0, r3
 8019f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f9e:	fb0e f000 	mul.w	r0, lr, r0
 8019fa2:	182e      	adds	r6, r5, r0
 8019fa4:	f8b6 8448 	ldrh.w	r8, [r6, #1096]	; 0x448
 8019fa8:	45a0      	cmp	r8, r4
 8019faa:	d124      	bne.n	8019ff6 <MoblePalCryptoDeleteNetworkKey+0x7e>
 8019fac:	f896 8445 	ldrb.w	r8, [r6, #1093]	; 0x445
 8019fb0:	f1b8 0f01 	cmp.w	r8, #1
 8019fb4:	d120      	bne.n	8019ff8 <MoblePalCryptoDeleteNetworkKey+0x80>
 8019fb6:	f1bc 0f01 	cmp.w	ip, #1
 8019fba:	d919      	bls.n	8019ff0 <MoblePalCryptoDeleteNetworkKey+0x78>
 8019fbc:	4b1c      	ldr	r3, [pc, #112]	; (801a030 <MoblePalCryptoDeleteNetworkKey+0xb8>)
 8019fbe:	f04f 0800 	mov.w	r8, #0
 8019fc2:	4418      	add	r0, r3
 8019fc4:	f886 8445 	strb.w	r8, [r6, #1093]	; 0x445
 8019fc8:	2210      	movs	r2, #16
 8019fca:	4641      	mov	r1, r8
 8019fcc:	f00e fdf8 	bl	8028bc0 <memset>
 8019fd0:	f895 361c 	ldrb.w	r3, [r5, #1564]	; 0x61c
 8019fd4:	f886 8444 	strb.w	r8, [r6, #1092]	; 0x444
 8019fd8:	3b01      	subs	r3, #1
 8019fda:	f885 361c 	strb.w	r3, [r5, #1564]	; 0x61c
 8019fde:	2600      	movs	r6, #0
 8019fe0:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8019fe4:	8939      	ldrh	r1, [r7, #8]
 8019fe6:	b2f3      	uxtb	r3, r6
 8019fe8:	428b      	cmp	r3, r1
 8019fea:	d307      	bcc.n	8019ffc <MoblePalCryptoDeleteNetworkKey+0x84>
 8019fec:	2300      	movs	r3, #0
 8019fee:	e7d3      	b.n	8019f98 <MoblePalCryptoDeleteNetworkKey+0x20>
 8019ff0:	d102      	bne.n	8019ff8 <MoblePalCryptoDeleteNetworkKey+0x80>
 8019ff2:	2303      	movs	r3, #3
 8019ff4:	e7d0      	b.n	8019f98 <MoblePalCryptoDeleteNetworkKey+0x20>
 8019ff6:	2301      	movs	r3, #1
 8019ff8:	3201      	adds	r2, #1
 8019ffa:	e7c9      	b.n	8019f90 <MoblePalCryptoDeleteNetworkKey+0x18>
 8019ffc:	fb08 5303 	mla	r3, r8, r3, r5
 801a000:	f893 25b8 	ldrb.w	r2, [r3, #1464]	; 0x5b8
 801a004:	2a01      	cmp	r2, #1
 801a006:	d10c      	bne.n	801a022 <MoblePalCryptoDeleteNetworkKey+0xaa>
 801a008:	f893 25c0 	ldrb.w	r2, [r3, #1472]	; 0x5c0
 801a00c:	2a01      	cmp	r2, #1
 801a00e:	d108      	bne.n	801a022 <MoblePalCryptoDeleteNetworkKey+0xaa>
 801a010:	f8b3 25be 	ldrh.w	r2, [r3, #1470]	; 0x5be
 801a014:	42a2      	cmp	r2, r4
 801a016:	d104      	bne.n	801a022 <MoblePalCryptoDeleteNetworkKey+0xaa>
 801a018:	f8b3 05ba 	ldrh.w	r0, [r3, #1466]	; 0x5ba
 801a01c:	4621      	mov	r1, r4
 801a01e:	f7ff ff6b 	bl	8019ef8 <MoblePalCryptoDeleteAppKey>
 801a022:	3601      	adds	r6, #1
 801a024:	e7de      	b.n	8019fe4 <MoblePalCryptoDeleteNetworkKey+0x6c>
 801a026:	bf00      	nop
 801a028:	20000008 	.word	0x20000008
 801a02c:	20001410 	.word	0x20001410
 801a030:	20001834 	.word	0x20001834

0801a034 <MoblePalCrypto_GetAppBind_VendorModel>:
 801a034:	4b20      	ldr	r3, [pc, #128]	; (801a0b8 <MoblePalCrypto_GetAppBind_VendorModel+0x84>)
 801a036:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a038:	2400      	movs	r4, #0
 801a03a:	f44f 7639 	mov.w	r6, #740	; 0x2e4
 801a03e:	fb06 f504 	mul.w	r5, r6, r4
 801a042:	5aef      	ldrh	r7, [r5, r3]
 801a044:	4287      	cmp	r7, r0
 801a046:	d133      	bne.n	801a0b0 <MoblePalCrypto_GetAppBind_VendorModel+0x7c>
 801a048:	1958      	adds	r0, r3, r5
 801a04a:	2500      	movs	r5, #0
 801a04c:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
 801a050:	2b01      	cmp	r3, #1
 801a052:	d127      	bne.n	801a0a4 <MoblePalCrypto_GetAppBind_VendorModel+0x70>
 801a054:	4b19      	ldr	r3, [pc, #100]	; (801a0bc <MoblePalCrypto_GetAppBind_VendorModel+0x88>)
 801a056:	4f1a      	ldr	r7, [pc, #104]	; (801a0c0 <MoblePalCrypto_GetAppBind_VendorModel+0x8c>)
 801a058:	891b      	ldrh	r3, [r3, #8]
 801a05a:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 801a05e:	4360      	muls	r0, r4
 801a060:	f04f 0c38 	mov.w	ip, #56	; 0x38
 801a064:	fb0c 0005 	mla	r0, ip, r5, r0
 801a068:	2600      	movs	r6, #0
 801a06a:	4438      	add	r0, r7
 801a06c:	fa5f fc86 	uxtb.w	ip, r6
 801a070:	459c      	cmp	ip, r3
 801a072:	46e6      	mov	lr, ip
 801a074:	d215      	bcs.n	801a0a2 <MoblePalCrypto_GetAppBind_VendorModel+0x6e>
 801a076:	eb00 0e0c 	add.w	lr, r0, ip
 801a07a:	3601      	adds	r6, #1
 801a07c:	f89e e152 	ldrb.w	lr, [lr, #338]	; 0x152
 801a080:	f1be 0f01 	cmp.w	lr, #1
 801a084:	d1f2      	bne.n	801a06c <MoblePalCrypto_GetAppBind_VendorModel+0x38>
 801a086:	f44f 73b9 	mov.w	r3, #370	; 0x172
 801a08a:	4363      	muls	r3, r4
 801a08c:	201c      	movs	r0, #28
 801a08e:	fb00 3305 	mla	r3, r0, r5, r3
 801a092:	4463      	add	r3, ip
 801a094:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801a098:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 801a09c:	800b      	strh	r3, [r1, #0]
 801a09e:	f8a2 e000 	strh.w	lr, [r2]
 801a0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0a4:	3501      	adds	r5, #1
 801a0a6:	2d0b      	cmp	r5, #11
 801a0a8:	f100 0038 	add.w	r0, r0, #56	; 0x38
 801a0ac:	d1ce      	bne.n	801a04c <MoblePalCrypto_GetAppBind_VendorModel+0x18>
 801a0ae:	e7f8      	b.n	801a0a2 <MoblePalCrypto_GetAppBind_VendorModel+0x6e>
 801a0b0:	3401      	adds	r4, #1
 801a0b2:	2c05      	cmp	r4, #5
 801a0b4:	d1c3      	bne.n	801a03e <MoblePalCrypto_GetAppBind_VendorModel+0xa>
 801a0b6:	e7f4      	b.n	801a0a2 <MoblePalCrypto_GetAppBind_VendorModel+0x6e>
 801a0b8:	200003c4 	.word	0x200003c4
 801a0bc:	20000008 	.word	0x20000008
 801a0c0:	20000318 	.word	0x20000318

0801a0c4 <MoblePalCrypto_GetAppBind_SIGModel>:
 801a0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0c6:	4c1f      	ldr	r4, [pc, #124]	; (801a144 <MoblePalCrypto_GetAppBind_SIGModel+0x80>)
 801a0c8:	2500      	movs	r5, #0
 801a0ca:	f44f 7639 	mov.w	r6, #740	; 0x2e4
 801a0ce:	fb06 f305 	mul.w	r3, r6, r5
 801a0d2:	5b1f      	ldrh	r7, [r3, r4]
 801a0d4:	4287      	cmp	r7, r0
 801a0d6:	d131      	bne.n	801a13c <MoblePalCrypto_GetAppBind_SIGModel+0x78>
 801a0d8:	441c      	add	r4, r3
 801a0da:	2600      	movs	r6, #0
 801a0dc:	f894 0099 	ldrb.w	r0, [r4, #153]	; 0x99
 801a0e0:	bb30      	cbnz	r0, 801a130 <MoblePalCrypto_GetAppBind_SIGModel+0x6c>
 801a0e2:	4b19      	ldr	r3, [pc, #100]	; (801a148 <MoblePalCrypto_GetAppBind_SIGModel+0x84>)
 801a0e4:	4f19      	ldr	r7, [pc, #100]	; (801a14c <MoblePalCrypto_GetAppBind_SIGModel+0x88>)
 801a0e6:	891b      	ldrh	r3, [r3, #8]
 801a0e8:	f44f 7439 	mov.w	r4, #740	; 0x2e4
 801a0ec:	436c      	muls	r4, r5
 801a0ee:	f04f 0c38 	mov.w	ip, #56	; 0x38
 801a0f2:	fb0c 4406 	mla	r4, ip, r6, r4
 801a0f6:	443c      	add	r4, r7
 801a0f8:	fa5f fc80 	uxtb.w	ip, r0
 801a0fc:	459c      	cmp	ip, r3
 801a0fe:	46e6      	mov	lr, ip
 801a100:	d215      	bcs.n	801a12e <MoblePalCrypto_GetAppBind_SIGModel+0x6a>
 801a102:	eb04 0e0c 	add.w	lr, r4, ip
 801a106:	3001      	adds	r0, #1
 801a108:	f89e e152 	ldrb.w	lr, [lr, #338]	; 0x152
 801a10c:	f1be 0f01 	cmp.w	lr, #1
 801a110:	d1f2      	bne.n	801a0f8 <MoblePalCrypto_GetAppBind_SIGModel+0x34>
 801a112:	f44f 73b9 	mov.w	r3, #370	; 0x172
 801a116:	436b      	muls	r3, r5
 801a118:	201c      	movs	r0, #28
 801a11a:	fb00 3306 	mla	r3, r0, r6, r3
 801a11e:	4463      	add	r3, ip
 801a120:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801a124:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 801a128:	800b      	strh	r3, [r1, #0]
 801a12a:	f8a2 e000 	strh.w	lr, [r2]
 801a12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a130:	3601      	adds	r6, #1
 801a132:	2e0b      	cmp	r6, #11
 801a134:	f104 0438 	add.w	r4, r4, #56	; 0x38
 801a138:	d1d0      	bne.n	801a0dc <MoblePalCrypto_GetAppBind_SIGModel+0x18>
 801a13a:	e7f8      	b.n	801a12e <MoblePalCrypto_GetAppBind_SIGModel+0x6a>
 801a13c:	3501      	adds	r5, #1
 801a13e:	2d05      	cmp	r5, #5
 801a140:	d1c5      	bne.n	801a0ce <MoblePalCrypto_GetAppBind_SIGModel+0xa>
 801a142:	e7f4      	b.n	801a12e <MoblePalCrypto_GetAppBind_SIGModel+0x6a>
 801a144:	200003c4 	.word	0x200003c4
 801a148:	20000008 	.word	0x20000008
 801a14c:	20000318 	.word	0x20000318

0801a150 <MoblePalCryptoHasAppKeyBind>:
 801a150:	4b22      	ldr	r3, [pc, #136]	; (801a1dc <MoblePalCryptoHasAppKeyBind+0x8c>)
 801a152:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a154:	4604      	mov	r4, r0
 801a156:	2500      	movs	r5, #0
 801a158:	f44f 7639 	mov.w	r6, #740	; 0x2e4
 801a15c:	fb06 f005 	mul.w	r0, r6, r5
 801a160:	5ac7      	ldrh	r7, [r0, r3]
 801a162:	428f      	cmp	r7, r1
 801a164:	d134      	bne.n	801a1d0 <MoblePalCryptoHasAppKeyBind+0x80>
 801a166:	4403      	add	r3, r0
 801a168:	2100      	movs	r1, #0
 801a16a:	2001      	movs	r0, #1
 801a16c:	6f9e      	ldr	r6, [r3, #120]	; 0x78
 801a16e:	42a6      	cmp	r6, r4
 801a170:	d126      	bne.n	801a1c0 <MoblePalCryptoHasAppKeyBind+0x70>
 801a172:	4b1b      	ldr	r3, [pc, #108]	; (801a1e0 <MoblePalCryptoHasAppKeyBind+0x90>)
 801a174:	4f1b      	ldr	r7, [pc, #108]	; (801a1e4 <MoblePalCryptoHasAppKeyBind+0x94>)
 801a176:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801a17a:	f44f 7439 	mov.w	r4, #740	; 0x2e4
 801a17e:	2338      	movs	r3, #56	; 0x38
 801a180:	436c      	muls	r4, r5
 801a182:	fb03 4401 	mla	r4, r3, r1, r4
 801a186:	231c      	movs	r3, #28
 801a188:	2600      	movs	r6, #0
 801a18a:	443c      	add	r4, r7
 801a18c:	4359      	muls	r1, r3
 801a18e:	fa5f fe86 	uxtb.w	lr, r6
 801a192:	45e6      	cmp	lr, ip
 801a194:	d300      	bcc.n	801a198 <MoblePalCryptoHasAppKeyBind+0x48>
 801a196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a198:	eb04 030e 	add.w	r3, r4, lr
 801a19c:	f893 0152 	ldrb.w	r0, [r3, #338]	; 0x152
 801a1a0:	2801      	cmp	r0, #1
 801a1a2:	d10a      	bne.n	801a1ba <MoblePalCryptoHasAppKeyBind+0x6a>
 801a1a4:	f44f 73b9 	mov.w	r3, #370	; 0x172
 801a1a8:	fb03 1305 	mla	r3, r3, r5, r1
 801a1ac:	4473      	add	r3, lr
 801a1ae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801a1b2:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 801a1b6:	4293      	cmp	r3, r2
 801a1b8:	d0ed      	beq.n	801a196 <MoblePalCryptoHasAppKeyBind+0x46>
 801a1ba:	3601      	adds	r6, #1
 801a1bc:	2000      	movs	r0, #0
 801a1be:	e7e6      	b.n	801a18e <MoblePalCryptoHasAppKeyBind+0x3e>
 801a1c0:	3101      	adds	r1, #1
 801a1c2:	290b      	cmp	r1, #11
 801a1c4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801a1c8:	f04f 0000 	mov.w	r0, #0
 801a1cc:	d1ce      	bne.n	801a16c <MoblePalCryptoHasAppKeyBind+0x1c>
 801a1ce:	e7e2      	b.n	801a196 <MoblePalCryptoHasAppKeyBind+0x46>
 801a1d0:	3501      	adds	r5, #1
 801a1d2:	2d05      	cmp	r5, #5
 801a1d4:	d1c2      	bne.n	801a15c <MoblePalCryptoHasAppKeyBind+0xc>
 801a1d6:	2001      	movs	r0, #1
 801a1d8:	e7dd      	b.n	801a196 <MoblePalCryptoHasAppKeyBind+0x46>
 801a1da:	bf00      	nop
 801a1dc:	200003c4 	.word	0x200003c4
 801a1e0:	20000008 	.word	0x20000008
 801a1e4:	20000318 	.word	0x20000318

0801a1e8 <MoblePalCryptoHasAppKeyIndex>:
 801a1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1ea:	4c17      	ldr	r4, [pc, #92]	; (801a248 <MoblePalCryptoHasAppKeyIndex+0x60>)
 801a1ec:	4d17      	ldr	r5, [pc, #92]	; (801a24c <MoblePalCryptoHasAppKeyIndex+0x64>)
 801a1ee:	8826      	ldrh	r6, [r4, #0]
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	f04f 0c7c 	mov.w	ip, #124	; 0x7c
 801a1f6:	b2da      	uxtb	r2, r3
 801a1f8:	42b2      	cmp	r2, r6
 801a1fa:	d20c      	bcs.n	801a216 <MoblePalCryptoHasAppKeyIndex+0x2e>
 801a1fc:	fb0c 5202 	mla	r2, ip, r2, r5
 801a200:	3301      	adds	r3, #1
 801a202:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	; 0x448
 801a206:	4282      	cmp	r2, r0
 801a208:	d1f5      	bne.n	801a1f6 <MoblePalCryptoHasAppKeyIndex+0xe>
 801a20a:	8926      	ldrh	r6, [r4, #8]
 801a20c:	2200      	movs	r2, #0
 801a20e:	272c      	movs	r7, #44	; 0x2c
 801a210:	b2d3      	uxtb	r3, r2
 801a212:	42b3      	cmp	r3, r6
 801a214:	d301      	bcc.n	801a21a <MoblePalCryptoHasAppKeyIndex+0x32>
 801a216:	2001      	movs	r0, #1
 801a218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a21a:	fb07 5303 	mla	r3, r7, r3, r5
 801a21e:	f8b3 c5ba 	ldrh.w	ip, [r3, #1466]	; 0x5ba
 801a222:	f893 45b8 	ldrb.w	r4, [r3, #1464]	; 0x5b8
 801a226:	458c      	cmp	ip, r1
 801a228:	d107      	bne.n	801a23a <MoblePalCryptoHasAppKeyIndex+0x52>
 801a22a:	2c01      	cmp	r4, #1
 801a22c:	d107      	bne.n	801a23e <MoblePalCryptoHasAppKeyIndex+0x56>
 801a22e:	f8b3 35be 	ldrh.w	r3, [r3, #1470]	; 0x5be
 801a232:	4283      	cmp	r3, r0
 801a234:	d103      	bne.n	801a23e <MoblePalCryptoHasAppKeyIndex+0x56>
 801a236:	2000      	movs	r0, #0
 801a238:	e7ee      	b.n	801a218 <MoblePalCryptoHasAppKeyIndex+0x30>
 801a23a:	2c01      	cmp	r4, #1
 801a23c:	d001      	beq.n	801a242 <MoblePalCryptoHasAppKeyIndex+0x5a>
 801a23e:	3201      	adds	r2, #1
 801a240:	e7e6      	b.n	801a210 <MoblePalCryptoHasAppKeyIndex+0x28>
 801a242:	2003      	movs	r0, #3
 801a244:	e7e8      	b.n	801a218 <MoblePalCryptoHasAppKeyIndex+0x30>
 801a246:	bf00      	nop
 801a248:	20000008 	.word	0x20000008
 801a24c:	20001410 	.word	0x20001410

0801a250 <BnrgmPalCryptoMatchAid>:
 801a250:	4b18      	ldr	r3, [pc, #96]	; (801a2b4 <BnrgmPalCryptoMatchAid+0x64>)
 801a252:	b570      	push	{r4, r5, r6, lr}
 801a254:	891e      	ldrh	r6, [r3, #8]
 801a256:	4b18      	ldr	r3, [pc, #96]	; (801a2b8 <BnrgmPalCryptoMatchAid+0x68>)
 801a258:	2400      	movs	r4, #0
 801a25a:	b2a5      	uxth	r5, r4
 801a25c:	42ae      	cmp	r6, r5
 801a25e:	7802      	ldrb	r2, [r0, #0]
 801a260:	d805      	bhi.n	801a26e <BnrgmPalCryptoMatchAid+0x1e>
 801a262:	bb22      	cbnz	r2, 801a2ae <BnrgmPalCryptoMatchAid+0x5e>
 801a264:	7900      	ldrb	r0, [r0, #4]
 801a266:	fab0 f080 	clz	r0, r0
 801a26a:	0940      	lsrs	r0, r0, #5
 801a26c:	bd70      	pop	{r4, r5, r6, pc}
 801a26e:	f893 5194 	ldrb.w	r5, [r3, #404]	; 0x194
 801a272:	b155      	cbz	r5, 801a28a <BnrgmPalCryptoMatchAid+0x3a>
 801a274:	f893 5198 	ldrb.w	r5, [r3, #408]	; 0x198
 801a278:	428d      	cmp	r5, r1
 801a27a:	d106      	bne.n	801a28a <BnrgmPalCryptoMatchAid+0x3a>
 801a27c:	f893 519c 	ldrb.w	r5, [r3, #412]	; 0x19c
 801a280:	b11d      	cbz	r5, 801a28a <BnrgmPalCryptoMatchAid+0x3a>
 801a282:	1885      	adds	r5, r0, r2
 801a284:	3201      	adds	r2, #1
 801a286:	706c      	strb	r4, [r5, #1]
 801a288:	7002      	strb	r2, [r0, #0]
 801a28a:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
 801a28e:	b15a      	cbz	r2, 801a2a8 <BnrgmPalCryptoMatchAid+0x58>
 801a290:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 801a294:	428a      	cmp	r2, r1
 801a296:	d107      	bne.n	801a2a8 <BnrgmPalCryptoMatchAid+0x58>
 801a298:	f893 219c 	ldrb.w	r2, [r3, #412]	; 0x19c
 801a29c:	b122      	cbz	r2, 801a2a8 <BnrgmPalCryptoMatchAid+0x58>
 801a29e:	7902      	ldrb	r2, [r0, #4]
 801a2a0:	1885      	adds	r5, r0, r2
 801a2a2:	3201      	adds	r2, #1
 801a2a4:	716c      	strb	r4, [r5, #5]
 801a2a6:	7102      	strb	r2, [r0, #4]
 801a2a8:	3401      	adds	r4, #1
 801a2aa:	332c      	adds	r3, #44	; 0x2c
 801a2ac:	e7d5      	b.n	801a25a <BnrgmPalCryptoMatchAid+0xa>
 801a2ae:	2000      	movs	r0, #0
 801a2b0:	e7dc      	b.n	801a26c <BnrgmPalCryptoMatchAid+0x1c>
 801a2b2:	bf00      	nop
 801a2b4:	20000008 	.word	0x20000008
 801a2b8:	20001834 	.word	0x20001834

0801a2bc <BnrgmPalCryptoMatchNid>:
 801a2bc:	4b2b      	ldr	r3, [pc, #172]	; (801a36c <BnrgmPalCryptoMatchNid+0xb0>)
 801a2be:	4a2c      	ldr	r2, [pc, #176]	; (801a370 <BnrgmPalCryptoMatchNid+0xb4>)
 801a2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2c2:	881e      	ldrh	r6, [r3, #0]
 801a2c4:	2400      	movs	r4, #0
 801a2c6:	b2a5      	uxth	r5, r4
 801a2c8:	42ae      	cmp	r6, r5
 801a2ca:	7803      	ldrb	r3, [r0, #0]
 801a2cc:	d80c      	bhi.n	801a2e8 <BnrgmPalCryptoMatchNid+0x2c>
 801a2ce:	4d29      	ldr	r5, [pc, #164]	; (801a374 <BnrgmPalCryptoMatchNid+0xb8>)
 801a2d0:	2200      	movs	r2, #0
 801a2d2:	f5a5 67c6 	sub.w	r7, r5, #1584	; 0x630
 801a2d6:	f04f 0c7c 	mov.w	ip, #124	; 0x7c
 801a2da:	f855 6b04 	ldr.w	r6, [r5], #4
 801a2de:	b9ee      	cbnz	r6, 801a31c <BnrgmPalCryptoMatchNid+0x60>
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d038      	beq.n	801a356 <BnrgmPalCryptoMatchNid+0x9a>
 801a2e4:	2300      	movs	r3, #0
 801a2e6:	e03e      	b.n	801a366 <BnrgmPalCryptoMatchNid+0xaa>
 801a2e8:	f892 5021 	ldrb.w	r5, [r2, #33]	; 0x21
 801a2ec:	b19d      	cbz	r5, 801a316 <BnrgmPalCryptoMatchNid+0x5a>
 801a2ee:	f892 5038 	ldrb.w	r5, [r2, #56]	; 0x38
 801a2f2:	428d      	cmp	r5, r1
 801a2f4:	bf01      	itttt	eq
 801a2f6:	18c5      	addeq	r5, r0, r3
 801a2f8:	3301      	addeq	r3, #1
 801a2fa:	706c      	strbeq	r4, [r5, #1]
 801a2fc:	7003      	strbeq	r3, [r0, #0]
 801a2fe:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 801a302:	b143      	cbz	r3, 801a316 <BnrgmPalCryptoMatchNid+0x5a>
 801a304:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 801a308:	428b      	cmp	r3, r1
 801a30a:	d104      	bne.n	801a316 <BnrgmPalCryptoMatchNid+0x5a>
 801a30c:	7903      	ldrb	r3, [r0, #4]
 801a30e:	18c5      	adds	r5, r0, r3
 801a310:	3301      	adds	r3, #1
 801a312:	716c      	strb	r4, [r5, #5]
 801a314:	7103      	strb	r3, [r0, #4]
 801a316:	3401      	adds	r4, #1
 801a318:	327c      	adds	r2, #124	; 0x7c
 801a31a:	e7d4      	b.n	801a2c6 <BnrgmPalCryptoMatchNid+0xa>
 801a31c:	f896 4040 	ldrb.w	r4, [r6, #64]	; 0x40
 801a320:	b1a4      	cbz	r4, 801a34c <BnrgmPalCryptoMatchNid+0x90>
 801a322:	428c      	cmp	r4, r1
 801a324:	d106      	bne.n	801a334 <BnrgmPalCryptoMatchNid+0x78>
 801a326:	7a04      	ldrb	r4, [r0, #8]
 801a328:	eb00 0e04 	add.w	lr, r0, r4
 801a32c:	3401      	adds	r4, #1
 801a32e:	f88e 2009 	strb.w	r2, [lr, #9]
 801a332:	7204      	strb	r4, [r0, #8]
 801a334:	f896 4042 	ldrb.w	r4, [r6, #66]	; 0x42
 801a338:	fb0c 7404 	mla	r4, ip, r4, r7
 801a33c:	f894 4446 	ldrb.w	r4, [r4, #1094]	; 0x446
 801a340:	b124      	cbz	r4, 801a34c <BnrgmPalCryptoMatchNid+0x90>
 801a342:	7cc4      	ldrb	r4, [r0, #19]
 801a344:	1906      	adds	r6, r0, r4
 801a346:	3401      	adds	r4, #1
 801a348:	7532      	strb	r2, [r6, #20]
 801a34a:	74c4      	strb	r4, [r0, #19]
 801a34c:	3201      	adds	r2, #1
 801a34e:	b2d2      	uxtb	r2, r2
 801a350:	2a0a      	cmp	r2, #10
 801a352:	d1c2      	bne.n	801a2da <BnrgmPalCryptoMatchNid+0x1e>
 801a354:	e7c4      	b.n	801a2e0 <BnrgmPalCryptoMatchNid+0x24>
 801a356:	7902      	ldrb	r2, [r0, #4]
 801a358:	b92a      	cbnz	r2, 801a366 <BnrgmPalCryptoMatchNid+0xaa>
 801a35a:	7a02      	ldrb	r2, [r0, #8]
 801a35c:	b91a      	cbnz	r2, 801a366 <BnrgmPalCryptoMatchNid+0xaa>
 801a35e:	7cc3      	ldrb	r3, [r0, #19]
 801a360:	fab3 f383 	clz	r3, r3
 801a364:	095b      	lsrs	r3, r3, #5
 801a366:	4618      	mov	r0, r3
 801a368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a36a:	bf00      	nop
 801a36c:	20000008 	.word	0x20000008
 801a370:	20001834 	.word	0x20001834
 801a374:	20001a40 	.word	0x20001a40

0801a378 <BnrgmPalCryptoInitFriendshipKeysP>:
 801a378:	280a      	cmp	r0, #10
 801a37a:	d80b      	bhi.n	801a394 <BnrgmPalCryptoInitFriendshipKeysP+0x1c>
 801a37c:	4b06      	ldr	r3, [pc, #24]	; (801a398 <BnrgmPalCryptoInitFriendshipKeysP+0x20>)
 801a37e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801a382:	4281      	cmp	r1, r0
 801a384:	d101      	bne.n	801a38a <BnrgmPalCryptoInitFriendshipKeysP+0x12>
 801a386:	2000      	movs	r0, #0
 801a388:	4770      	bx	lr
 801a38a:	f851 2b04 	ldr.w	r2, [r1], #4
 801a38e:	f843 2b04 	str.w	r2, [r3], #4
 801a392:	e7f6      	b.n	801a382 <BnrgmPalCryptoInitFriendshipKeysP+0xa>
 801a394:	2002      	movs	r0, #2
 801a396:	4770      	bx	lr
 801a398:	20001a40 	.word	0x20001a40

0801a39c <BnrgmPalCryptoSetFriendshipNetKeyOffset>:
 801a39c:	280a      	cmp	r0, #10
 801a39e:	d80d      	bhi.n	801a3bc <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x20>
 801a3a0:	4b07      	ldr	r3, [pc, #28]	; (801a3c0 <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x24>)
 801a3a2:	881b      	ldrh	r3, [r3, #0]
 801a3a4:	428b      	cmp	r3, r1
 801a3a6:	d309      	bcc.n	801a3bc <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x20>
 801a3a8:	4b06      	ldr	r3, [pc, #24]	; (801a3c4 <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x28>)
 801a3aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a3ae:	f8d0 0630 	ldr.w	r0, [r0, #1584]	; 0x630
 801a3b2:	b120      	cbz	r0, 801a3be <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x22>
 801a3b4:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
 801a3b8:	2000      	movs	r0, #0
 801a3ba:	4770      	bx	lr
 801a3bc:	2003      	movs	r0, #3
 801a3be:	4770      	bx	lr
 801a3c0:	20000008 	.word	0x20000008
 801a3c4:	20001410 	.word	0x20001410

0801a3c8 <BnrgmPalCryptoSetFriendshipKeys>:
 801a3c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a3cc:	b089      	sub	sp, #36	; 0x24
 801a3ce:	2501      	movs	r5, #1
 801a3d0:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
 801a3d4:	f88d 5014 	strb.w	r5, [sp, #20]
 801a3d8:	f88d 1016 	strb.w	r1, [sp, #22]
 801a3dc:	0a0d      	lsrs	r5, r1, #8
 801a3de:	f88d 2018 	strb.w	r2, [sp, #24]
 801a3e2:	0a11      	lsrs	r1, r2, #8
 801a3e4:	f88d 301a 	strb.w	r3, [sp, #26]
 801a3e8:	0a1a      	lsrs	r2, r3, #8
 801a3ea:	280a      	cmp	r0, #10
 801a3ec:	ea4f 2314 	mov.w	r3, r4, lsr #8
 801a3f0:	f88d 5015 	strb.w	r5, [sp, #21]
 801a3f4:	f88d 1017 	strb.w	r1, [sp, #23]
 801a3f8:	f88d 2019 	strb.w	r2, [sp, #25]
 801a3fc:	f88d 301b 	strb.w	r3, [sp, #27]
 801a400:	f88d 401c 	strb.w	r4, [sp, #28]
 801a404:	d838      	bhi.n	801a478 <BnrgmPalCryptoSetFriendshipKeys+0xb0>
 801a406:	4e1d      	ldr	r6, [pc, #116]	; (801a47c <BnrgmPalCryptoSetFriendshipKeys+0xb4>)
 801a408:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801a40c:	f206 4824 	addw	r8, r6, #1060	; 0x424
 801a410:	f8d0 4630 	ldr.w	r4, [r0, #1584]	; 0x630
 801a414:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801a418:	f04f 0909 	mov.w	r9, #9
 801a41c:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 801a420:	ad05      	add	r5, sp, #20
 801a422:	2710      	movs	r7, #16
 801a424:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801a428:	f104 0220 	add.w	r2, r4, #32
 801a42c:	4621      	mov	r1, r4
 801a42e:	f8cd 9008 	str.w	r9, [sp, #8]
 801a432:	9501      	str	r5, [sp, #4]
 801a434:	9700      	str	r7, [sp, #0]
 801a436:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801a43a:	f7ff f845 	bl	80194c8 <MoblePalCryptoK2>
 801a43e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 801a442:	237c      	movs	r3, #124	; 0x7c
 801a444:	fb03 6602 	mla	r6, r3, r2, r6
 801a448:	f896 1446 	ldrb.w	r1, [r6, #1094]	; 0x446
 801a44c:	2901      	cmp	r1, #1
 801a44e:	d10c      	bne.n	801a46a <BnrgmPalCryptoSetFriendshipKeys+0xa2>
 801a450:	fb13 7302 	smlabb	r3, r3, r2, r7
 801a454:	e9cd 5901 	strd	r5, r9, [sp, #4]
 801a458:	9700      	str	r7, [sp, #0]
 801a45a:	4443      	add	r3, r8
 801a45c:	f104 0230 	add.w	r2, r4, #48	; 0x30
 801a460:	19e1      	adds	r1, r4, r7
 801a462:	f104 0041 	add.w	r0, r4, #65	; 0x41
 801a466:	f7ff f82f 	bl	80194c8 <MoblePalCryptoK2>
 801a46a:	2802      	cmp	r0, #2
 801a46c:	bf34      	ite	cc
 801a46e:	2000      	movcc	r0, #0
 801a470:	2002      	movcs	r0, #2
 801a472:	b009      	add	sp, #36	; 0x24
 801a474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a478:	2003      	movs	r0, #3
 801a47a:	e7fa      	b.n	801a472 <BnrgmPalCryptoSetFriendshipKeys+0xaa>
 801a47c:	20001410 	.word	0x20001410

0801a480 <BnrgmPalCryptoSwitchFriendshipKeys>:
 801a480:	280a      	cmp	r0, #10
 801a482:	b570      	push	{r4, r5, r6, lr}
 801a484:	d830      	bhi.n	801a4e8 <BnrgmPalCryptoSwitchFriendshipKeys+0x68>
 801a486:	4b19      	ldr	r3, [pc, #100]	; (801a4ec <BnrgmPalCryptoSwitchFriendshipKeys+0x6c>)
 801a488:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a48c:	f8d0 3630 	ldr.w	r3, [r0, #1584]	; 0x630
 801a490:	b353      	cbz	r3, 801a4e8 <BnrgmPalCryptoSwitchFriendshipKeys+0x68>
 801a492:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 801a496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a49a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801a49e:	4602      	mov	r2, r0
 801a4a0:	f103 0120 	add.w	r1, r3, #32
 801a4a4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801a4a8:	f852 5b04 	ldr.w	r5, [r2], #4
 801a4ac:	f841 5b04 	str.w	r5, [r1], #4
 801a4b0:	42a2      	cmp	r2, r4
 801a4b2:	d1f9      	bne.n	801a4a8 <BnrgmPalCryptoSwitchFriendshipKeys+0x28>
 801a4b4:	f103 0510 	add.w	r5, r3, #16
 801a4b8:	462a      	mov	r2, r5
 801a4ba:	4619      	mov	r1, r3
 801a4bc:	f105 0410 	add.w	r4, r5, #16
 801a4c0:	f852 6b04 	ldr.w	r6, [r2], #4
 801a4c4:	f841 6b04 	str.w	r6, [r1], #4
 801a4c8:	42a2      	cmp	r2, r4
 801a4ca:	d1f9      	bne.n	801a4c0 <BnrgmPalCryptoSwitchFriendshipKeys+0x40>
 801a4cc:	2400      	movs	r4, #0
 801a4ce:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
 801a4d2:	2210      	movs	r2, #16
 801a4d4:	4621      	mov	r1, r4
 801a4d6:	f00e fb73 	bl	8028bc0 <memset>
 801a4da:	2210      	movs	r2, #16
 801a4dc:	4621      	mov	r1, r4
 801a4de:	4628      	mov	r0, r5
 801a4e0:	f00e fb6e 	bl	8028bc0 <memset>
 801a4e4:	4620      	mov	r0, r4
 801a4e6:	bd70      	pop	{r4, r5, r6, pc}
 801a4e8:	2003      	movs	r0, #3
 801a4ea:	e7fc      	b.n	801a4e6 <BnrgmPalCryptoSwitchFriendshipKeys+0x66>
 801a4ec:	20001410 	.word	0x20001410

0801a4f0 <BnrgmPalCryptoDeleteFriendshipKeys>:
 801a4f0:	280a      	cmp	r0, #10
 801a4f2:	b508      	push	{r3, lr}
 801a4f4:	d80b      	bhi.n	801a50e <BnrgmPalCryptoDeleteFriendshipKeys+0x1e>
 801a4f6:	4b07      	ldr	r3, [pc, #28]	; (801a514 <BnrgmPalCryptoDeleteFriendshipKeys+0x24>)
 801a4f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a4fc:	f8d0 0630 	ldr.w	r0, [r0, #1584]	; 0x630
 801a500:	b128      	cbz	r0, 801a50e <BnrgmPalCryptoDeleteFriendshipKeys+0x1e>
 801a502:	2244      	movs	r2, #68	; 0x44
 801a504:	2100      	movs	r1, #0
 801a506:	f00e fb5b 	bl	8028bc0 <memset>
 801a50a:	2000      	movs	r0, #0
 801a50c:	bd08      	pop	{r3, pc}
 801a50e:	2003      	movs	r0, #3
 801a510:	e7fc      	b.n	801a50c <BnrgmPalCryptoDeleteFriendshipKeys+0x1c>
 801a512:	bf00      	nop
 801a514:	20001410 	.word	0x20001410

0801a518 <MoblePalCrypto_UpdateModelPublicationParameters>:
 801a518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a51a:	b931      	cbnz	r1, 801a52a <MoblePalCrypto_UpdateModelPublicationParameters+0x12>
 801a51c:	4b25      	ldr	r3, [pc, #148]	; (801a5b4 <MoblePalCrypto_UpdateModelPublicationParameters+0x9c>)
 801a51e:	4a26      	ldr	r2, [pc, #152]	; (801a5b8 <MoblePalCrypto_UpdateModelPublicationParameters+0xa0>)
 801a520:	f640 31c6 	movw	r1, #3014	; 0xbc6
 801a524:	4825      	ldr	r0, [pc, #148]	; (801a5bc <MoblePalCrypto_UpdateModelPublicationParameters+0xa4>)
 801a526:	f00e fab9 	bl	8028a9c <__assert_func>
 801a52a:	b952      	cbnz	r2, 801a542 <MoblePalCrypto_UpdateModelPublicationParameters+0x2a>
 801a52c:	4b24      	ldr	r3, [pc, #144]	; (801a5c0 <MoblePalCrypto_UpdateModelPublicationParameters+0xa8>)
 801a52e:	4a22      	ldr	r2, [pc, #136]	; (801a5b8 <MoblePalCrypto_UpdateModelPublicationParameters+0xa0>)
 801a530:	f640 31c7 	movw	r1, #3015	; 0xbc7
 801a534:	e7f6      	b.n	801a524 <MoblePalCrypto_UpdateModelPublicationParameters+0xc>
 801a536:	3001      	adds	r0, #1
 801a538:	280b      	cmp	r0, #11
 801a53a:	f101 0138 	add.w	r1, r1, #56	; 0x38
 801a53e:	d114      	bne.n	801a56a <MoblePalCrypto_UpdateModelPublicationParameters+0x52>
 801a540:	e034      	b.n	801a5ac <MoblePalCrypto_UpdateModelPublicationParameters+0x94>
 801a542:	4b20      	ldr	r3, [pc, #128]	; (801a5c4 <MoblePalCrypto_UpdateModelPublicationParameters+0xac>)
 801a544:	2400      	movs	r4, #0
 801a546:	f44f 7539 	mov.w	r5, #740	; 0x2e4
 801a54a:	f5a3 7739 	sub.w	r7, r3, #740	; 0x2e4
 801a54e:	b2e6      	uxtb	r6, r4
 801a550:	42b0      	cmp	r0, r6
 801a552:	d92b      	bls.n	801a5ac <MoblePalCrypto_UpdateModelPublicationParameters+0x94>
 801a554:	fb04 5c05 	mla	ip, r4, r5, r5
 801a558:	1c66      	adds	r6, r4, #1
 801a55a:	f83c c007 	ldrh.w	ip, [ip, r7]
 801a55e:	458c      	cmp	ip, r1
 801a560:	d125      	bne.n	801a5ae <MoblePalCrypto_UpdateModelPublicationParameters+0x96>
 801a562:	6816      	ldr	r6, [r2, #0]
 801a564:	fb05 3104 	mla	r1, r5, r4, r3
 801a568:	2000      	movs	r0, #0
 801a56a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801a56c:	42b3      	cmp	r3, r6
 801a56e:	d1e2      	bne.n	801a536 <MoblePalCrypto_UpdateModelPublicationParameters+0x1e>
 801a570:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 801a574:	435c      	muls	r4, r3
 801a576:	2338      	movs	r3, #56	; 0x38
 801a578:	fb03 4400 	mla	r4, r3, r0, r4
 801a57c:	4b12      	ldr	r3, [pc, #72]	; (801a5c8 <MoblePalCrypto_UpdateModelPublicationParameters+0xb0>)
 801a57e:	8891      	ldrh	r1, [r2, #4]
 801a580:	4423      	add	r3, r4
 801a582:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
 801a586:	88d1      	ldrh	r1, [r2, #6]
 801a588:	f8a3 112a 	strh.w	r1, [r3, #298]	; 0x12a
 801a58c:	7f11      	ldrb	r1, [r2, #28]
 801a58e:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
 801a592:	7f51      	ldrb	r1, [r2, #29]
 801a594:	f883 1141 	strb.w	r1, [r3, #321]	; 0x141
 801a598:	7f91      	ldrb	r1, [r2, #30]
 801a59a:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
 801a59e:	7fd1      	ldrb	r1, [r2, #31]
 801a5a0:	f883 1143 	strb.w	r1, [r3, #323]	; 0x143
 801a5a4:	f892 2020 	ldrb.w	r2, [r2, #32]
 801a5a8:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 801a5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5ae:	4634      	mov	r4, r6
 801a5b0:	e7cd      	b.n	801a54e <MoblePalCrypto_UpdateModelPublicationParameters+0x36>
 801a5b2:	bf00      	nop
 801a5b4:	080335a7 	.word	0x080335a7
 801a5b8:	080315cc 	.word	0x080315cc
 801a5bc:	08033563 	.word	0x08033563
 801a5c0:	080335b6 	.word	0x080335b6
 801a5c4:	200003c4 	.word	0x200003c4
 801a5c8:	20000318 	.word	0x20000318

0801a5cc <MoblePalCrypto_UpdateHealthModelPublicationParameters>:
 801a5cc:	b508      	push	{r3, lr}
 801a5ce:	b930      	cbnz	r0, 801a5de <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x12>
 801a5d0:	4b12      	ldr	r3, [pc, #72]	; (801a61c <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x50>)
 801a5d2:	4a13      	ldr	r2, [pc, #76]	; (801a620 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x54>)
 801a5d4:	f640 31ed 	movw	r1, #3053	; 0xbed
 801a5d8:	4812      	ldr	r0, [pc, #72]	; (801a624 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x58>)
 801a5da:	f00e fa5f 	bl	8028a9c <__assert_func>
 801a5de:	b921      	cbnz	r1, 801a5ea <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x1e>
 801a5e0:	4b11      	ldr	r3, [pc, #68]	; (801a628 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x5c>)
 801a5e2:	4a0f      	ldr	r2, [pc, #60]	; (801a620 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x54>)
 801a5e4:	f640 31ee 	movw	r1, #3054	; 0xbee
 801a5e8:	e7f6      	b.n	801a5d8 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0xc>
 801a5ea:	4b10      	ldr	r3, [pc, #64]	; (801a62c <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x60>)
 801a5ec:	888a      	ldrh	r2, [r1, #4]
 801a5ee:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
 801a5f2:	88ca      	ldrh	r2, [r1, #6]
 801a5f4:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 801a5f8:	7f0a      	ldrb	r2, [r1, #28]
 801a5fa:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 801a5fe:	7f4a      	ldrb	r2, [r1, #29]
 801a600:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 801a604:	7f8a      	ldrb	r2, [r1, #30]
 801a606:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
 801a60a:	7fca      	ldrb	r2, [r1, #31]
 801a60c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 801a610:	f891 2020 	ldrb.w	r2, [r1, #32]
 801a614:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 801a618:	bd08      	pop	{r3, pc}
 801a61a:	bf00      	nop
 801a61c:	080335a7 	.word	0x080335a7
 801a620:	080315fc 	.word	0x080315fc
 801a624:	08033563 	.word	0x08033563
 801a628:	080335b6 	.word	0x080335b6
 801a62c:	20000318 	.word	0x20000318

0801a630 <MoblePalCrypto_GetModelPublicationParameters>:
 801a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a632:	b931      	cbnz	r1, 801a642 <MoblePalCrypto_GetModelPublicationParameters+0x12>
 801a634:	4b1b      	ldr	r3, [pc, #108]	; (801a6a4 <MoblePalCrypto_GetModelPublicationParameters+0x74>)
 801a636:	4a1c      	ldr	r2, [pc, #112]	; (801a6a8 <MoblePalCrypto_GetModelPublicationParameters+0x78>)
 801a638:	f640 4162 	movw	r1, #3170	; 0xc62
 801a63c:	481b      	ldr	r0, [pc, #108]	; (801a6ac <MoblePalCrypto_GetModelPublicationParameters+0x7c>)
 801a63e:	f00e fa2d 	bl	8028a9c <__assert_func>
 801a642:	b922      	cbnz	r2, 801a64e <MoblePalCrypto_GetModelPublicationParameters+0x1e>
 801a644:	4b1a      	ldr	r3, [pc, #104]	; (801a6b0 <MoblePalCrypto_GetModelPublicationParameters+0x80>)
 801a646:	4a18      	ldr	r2, [pc, #96]	; (801a6a8 <MoblePalCrypto_GetModelPublicationParameters+0x78>)
 801a648:	f640 4163 	movw	r1, #3171	; 0xc63
 801a64c:	e7f6      	b.n	801a63c <MoblePalCrypto_GetModelPublicationParameters+0xc>
 801a64e:	4d19      	ldr	r5, [pc, #100]	; (801a6b4 <MoblePalCrypto_GetModelPublicationParameters+0x84>)
 801a650:	2300      	movs	r3, #0
 801a652:	f44f 7639 	mov.w	r6, #740	; 0x2e4
 801a656:	f5a5 7739 	sub.w	r7, r5, #740	; 0x2e4
 801a65a:	b2dc      	uxtb	r4, r3
 801a65c:	42a0      	cmp	r0, r4
 801a65e:	d913      	bls.n	801a688 <MoblePalCrypto_GetModelPublicationParameters+0x58>
 801a660:	fb03 6e06 	mla	lr, r3, r6, r6
 801a664:	f103 0c01 	add.w	ip, r3, #1
 801a668:	f83e e007 	ldrh.w	lr, [lr, r7]
 801a66c:	458e      	cmp	lr, r1
 801a66e:	d116      	bne.n	801a69e <MoblePalCrypto_GetModelPublicationParameters+0x6e>
 801a670:	fb06 5303 	mla	r3, r6, r3, r5
 801a674:	2100      	movs	r1, #0
 801a676:	6f9e      	ldr	r6, [r3, #120]	; 0x78
 801a678:	4296      	cmp	r6, r2
 801a67a:	b2c8      	uxtb	r0, r1
 801a67c:	d006      	beq.n	801a68c <MoblePalCrypto_GetModelPublicationParameters+0x5c>
 801a67e:	3101      	adds	r1, #1
 801a680:	290b      	cmp	r1, #11
 801a682:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801a686:	d1f6      	bne.n	801a676 <MoblePalCrypto_GetModelPublicationParameters+0x46>
 801a688:	2400      	movs	r4, #0
 801a68a:	4620      	mov	r0, r4
 801a68c:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 801a690:	435c      	muls	r4, r3
 801a692:	2338      	movs	r3, #56	; 0x38
 801a694:	fb13 4400 	smlabb	r4, r3, r0, r4
 801a698:	3478      	adds	r4, #120	; 0x78
 801a69a:	1928      	adds	r0, r5, r4
 801a69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a69e:	4663      	mov	r3, ip
 801a6a0:	e7db      	b.n	801a65a <MoblePalCrypto_GetModelPublicationParameters+0x2a>
 801a6a2:	bf00      	nop
 801a6a4:	080335a7 	.word	0x080335a7
 801a6a8:	08031632 	.word	0x08031632
 801a6ac:	08033563 	.word	0x08033563
 801a6b0:	080335c6 	.word	0x080335c6
 801a6b4:	200003c4 	.word	0x200003c4

0801a6b8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>:
 801a6b8:	4b0b      	ldr	r3, [pc, #44]	; (801a6e8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x30>)
 801a6ba:	f8b3 2448 	ldrh.w	r2, [r3, #1096]	; 0x448
 801a6be:	4282      	cmp	r2, r0
 801a6c0:	d00a      	beq.n	801a6d8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x20>
 801a6c2:	f8b3 24c4 	ldrh.w	r2, [r3, #1220]	; 0x4c4
 801a6c6:	4282      	cmp	r2, r0
 801a6c8:	d008      	beq.n	801a6dc <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x24>
 801a6ca:	f8b3 3540 	ldrh.w	r3, [r3, #1344]	; 0x540
 801a6ce:	4283      	cmp	r3, r0
 801a6d0:	d106      	bne.n	801a6e0 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x28>
 801a6d2:	2002      	movs	r0, #2
 801a6d4:	b240      	sxtb	r0, r0
 801a6d6:	4770      	bx	lr
 801a6d8:	2000      	movs	r0, #0
 801a6da:	e7fb      	b.n	801a6d4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x1c>
 801a6dc:	2001      	movs	r0, #1
 801a6de:	e7f9      	b.n	801a6d4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x1c>
 801a6e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a6e4:	4770      	bx	lr
 801a6e6:	bf00      	nop
 801a6e8:	20001410 	.word	0x20001410

0801a6ec <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>:
 801a6ec:	4b0b      	ldr	r3, [pc, #44]	; (801a71c <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x30>)
 801a6ee:	f8b3 25ba 	ldrh.w	r2, [r3, #1466]	; 0x5ba
 801a6f2:	4282      	cmp	r2, r0
 801a6f4:	d00a      	beq.n	801a70c <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x20>
 801a6f6:	f8b3 25e6 	ldrh.w	r2, [r3, #1510]	; 0x5e6
 801a6fa:	4282      	cmp	r2, r0
 801a6fc:	d008      	beq.n	801a710 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x24>
 801a6fe:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 801a702:	4283      	cmp	r3, r0
 801a704:	d106      	bne.n	801a714 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x28>
 801a706:	2002      	movs	r0, #2
 801a708:	b240      	sxtb	r0, r0
 801a70a:	4770      	bx	lr
 801a70c:	2000      	movs	r0, #0
 801a70e:	e7fb      	b.n	801a708 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x1c>
 801a710:	2001      	movs	r0, #1
 801a712:	e7f9      	b.n	801a708 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x1c>
 801a714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a718:	4770      	bx	lr
 801a71a:	bf00      	nop
 801a71c:	20001410 	.word	0x20001410

0801a720 <MoblePalCryptoSwitchKeys>:
 801a720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a724:	b085      	sub	sp, #20
 801a726:	4602      	mov	r2, r0
 801a728:	4607      	mov	r7, r0
 801a72a:	460d      	mov	r5, r1
 801a72c:	2400      	movs	r4, #0
 801a72e:	f10d 0102 	add.w	r1, sp, #2
 801a732:	a802      	add	r0, sp, #8
 801a734:	f10d 0804 	add.w	r8, sp, #4
 801a738:	f8ad 4002 	strh.w	r4, [sp, #2]
 801a73c:	ae02      	add	r6, sp, #8
 801a73e:	f7ff fb1b 	bl	8019d78 <MoblePalCryptoGetAppKeyIndexes>
 801a742:	4641      	mov	r1, r8
 801a744:	f836 0b02 	ldrh.w	r0, [r6], #2
 801a748:	f7ff ffd0 	bl	801a6ec <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 801a74c:	3401      	adds	r4, #1
 801a74e:	b2e4      	uxtb	r4, r4
 801a750:	2c03      	cmp	r4, #3
 801a752:	f801 0b01 	strb.w	r0, [r1], #1
 801a756:	d1f5      	bne.n	801a744 <MoblePalCryptoSwitchKeys+0x24>
 801a758:	4e1d      	ldr	r6, [pc, #116]	; (801a7d0 <MoblePalCryptoSwitchKeys+0xb0>)
 801a75a:	207c      	movs	r0, #124	; 0x7c
 801a75c:	fb00 6405 	mla	r4, r0, r5, r6
 801a760:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
 801a764:	2b01      	cmp	r3, #1
 801a766:	d10a      	bne.n	801a77e <MoblePalCryptoSwitchKeys+0x5e>
 801a768:	f04f 0900 	mov.w	r9, #0
 801a76c:	f884 9445 	strb.w	r9, [r4, #1093]	; 0x445
 801a770:	4639      	mov	r1, r7
 801a772:	f204 4034 	addw	r0, r4, #1076	; 0x434
 801a776:	f7ff f9d9 	bl	8019b2c <MoblePalCryptoSetNetworkKey>
 801a77a:	f884 9446 	strb.w	r9, [r4, #1094]	; 0x446
 801a77e:	2300      	movs	r3, #0
 801a780:	222c      	movs	r2, #44	; 0x2c
 801a782:	f918 1b01 	ldrsb.w	r1, [r8], #1
 801a786:	fb02 6401 	mla	r4, r2, r1, r6
 801a78a:	f504 60b7 	add.w	r0, r4, #1464	; 0x5b8
 801a78e:	f894 55b8 	ldrb.w	r5, [r4, #1464]	; 0x5b8
 801a792:	2d01      	cmp	r5, #1
 801a794:	d118      	bne.n	801a7c8 <MoblePalCryptoSwitchKeys+0xa8>
 801a796:	f204 55b9 	addw	r5, r4, #1465	; 0x5b9
 801a79a:	f894 45b9 	ldrb.w	r4, [r4, #1465]	; 0x5b9
 801a79e:	2c01      	cmp	r4, #1
 801a7a0:	d112      	bne.n	801a7c8 <MoblePalCryptoSwitchKeys+0xa8>
 801a7a2:	2400      	movs	r4, #0
 801a7a4:	7004      	strb	r4, [r0, #0]
 801a7a6:	a804      	add	r0, sp, #16
 801a7a8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a7ac:	4809      	ldr	r0, [pc, #36]	; (801a7d4 <MoblePalCryptoSwitchKeys+0xb4>)
 801a7ae:	fb02 0001 	mla	r0, r2, r1, r0
 801a7b2:	f500 70c2 	add.w	r0, r0, #388	; 0x184
 801a7b6:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 801a7ba:	463a      	mov	r2, r7
 801a7bc:	f7fe ffce 	bl	801975c <MoblePalCryptoSetAppKey>
 801a7c0:	702c      	strb	r4, [r5, #0]
 801a7c2:	b005      	add	sp, #20
 801a7c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a7c8:	3301      	adds	r3, #1
 801a7ca:	2b03      	cmp	r3, #3
 801a7cc:	d1d9      	bne.n	801a782 <MoblePalCryptoSwitchKeys+0x62>
 801a7ce:	e7f8      	b.n	801a7c2 <MoblePalCryptoSwitchKeys+0xa2>
 801a7d0:	20001410 	.word	0x20001410
 801a7d4:	20001834 	.word	0x20001834

0801a7d8 <MoblePalCryptoIsSubscriptionExists>:
 801a7d8:	4a15      	ldr	r2, [pc, #84]	; (801a830 <MoblePalCryptoIsSubscriptionExists+0x58>)
 801a7da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a7dc:	4605      	mov	r5, r0
 801a7de:	2400      	movs	r4, #0
 801a7e0:	2002      	movs	r0, #2
 801a7e2:	8813      	ldrh	r3, [r2, #0]
 801a7e4:	b303      	cbz	r3, 801a828 <MoblePalCryptoIsSubscriptionExists+0x50>
 801a7e6:	4611      	mov	r1, r2
 801a7e8:	2600      	movs	r6, #0
 801a7ea:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801a7ec:	b1b3      	cbz	r3, 801a81c <MoblePalCryptoIsSubscriptionExists+0x44>
 801a7ee:	b178      	cbz	r0, 801a810 <MoblePalCryptoIsSubscriptionExists+0x38>
 801a7f0:	f101 0780 	add.w	r7, r1, #128	; 0x80
 801a7f4:	230a      	movs	r3, #10
 801a7f6:	f837 cb02 	ldrh.w	ip, [r7], #2
 801a7fa:	45ac      	cmp	ip, r5
 801a7fc:	d012      	beq.n	801a824 <MoblePalCryptoIsSubscriptionExists+0x4c>
 801a7fe:	3b01      	subs	r3, #1
 801a800:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801a804:	d1f7      	bne.n	801a7f6 <MoblePalCryptoIsSubscriptionExists+0x1e>
 801a806:	360e      	adds	r6, #14
 801a808:	2e9a      	cmp	r6, #154	; 0x9a
 801a80a:	f101 0138 	add.w	r1, r1, #56	; 0x38
 801a80e:	d1ec      	bne.n	801a7ea <MoblePalCryptoIsSubscriptionExists+0x12>
 801a810:	3401      	adds	r4, #1
 801a812:	2c05      	cmp	r4, #5
 801a814:	f502 7239 	add.w	r2, r2, #740	; 0x2e4
 801a818:	d1e3      	bne.n	801a7e2 <MoblePalCryptoIsSubscriptionExists+0xa>
 801a81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a81c:	2800      	cmp	r0, #0
 801a81e:	d0f7      	beq.n	801a810 <MoblePalCryptoIsSubscriptionExists+0x38>
 801a820:	2002      	movs	r0, #2
 801a822:	e7f0      	b.n	801a806 <MoblePalCryptoIsSubscriptionExists+0x2e>
 801a824:	2000      	movs	r0, #0
 801a826:	e7ee      	b.n	801a806 <MoblePalCryptoIsSubscriptionExists+0x2e>
 801a828:	2800      	cmp	r0, #0
 801a82a:	d0f6      	beq.n	801a81a <MoblePalCryptoIsSubscriptionExists+0x42>
 801a82c:	2002      	movs	r0, #2
 801a82e:	e7ef      	b.n	801a810 <MoblePalCryptoIsSubscriptionExists+0x38>
 801a830:	200003c4 	.word	0x200003c4

0801a834 <BnrgmTransmitQueueInit>:
 801a834:	4a08      	ldr	r2, [pc, #32]	; (801a858 <BnrgmTransmitQueueInit+0x24>)
 801a836:	2300      	movs	r3, #0
 801a838:	7013      	strb	r3, [r2, #0]
 801a83a:	7413      	strb	r3, [r2, #16]
 801a83c:	f882 3020 	strb.w	r3, [r2, #32]
 801a840:	4619      	mov	r1, r3
 801a842:	3301      	adds	r3, #1
 801a844:	2b64      	cmp	r3, #100	; 0x64
 801a846:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
 801a84a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 801a84e:	d1f8      	bne.n	801a842 <BnrgmTransmitQueueInit+0xe>
 801a850:	4b02      	ldr	r3, [pc, #8]	; (801a85c <BnrgmTransmitQueueInit+0x28>)
 801a852:	f8c3 1164 	str.w	r1, [r3, #356]	; 0x164
 801a856:	4770      	bx	lr
 801a858:	20002f58 	.word	0x20002f58
 801a85c:	20003f58 	.word	0x20003f58

0801a860 <BnrgmTransmitQueuePush>:
 801a860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a862:	4d1f      	ldr	r5, [pc, #124]	; (801a8e0 <BnrgmTransmitQueuePush+0x80>)
 801a864:	460e      	mov	r6, r1
 801a866:	4619      	mov	r1, r3
 801a868:	f895 3166 	ldrb.w	r3, [r5, #358]	; 0x166
 801a86c:	2b63      	cmp	r3, #99	; 0x63
 801a86e:	4617      	mov	r7, r2
 801a870:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801a874:	d831      	bhi.n	801a8da <BnrgmTransmitQueuePush+0x7a>
 801a876:	f895 c165 	ldrb.w	ip, [r5, #357]	; 0x165
 801a87a:	232c      	movs	r3, #44	; 0x2c
 801a87c:	f5a5 647d 	sub.w	r4, r5, #4048	; 0xfd0
 801a880:	fb0c 4403 	mla	r4, ip, r3, r4
 801a884:	2301      	movs	r3, #1
 801a886:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 801a88a:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801a88e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801a892:	f884 0020 	strb.w	r0, [r4, #32]
 801a896:	2600      	movs	r6, #0
 801a898:	8463      	strh	r3, [r4, #34]	; 0x22
 801a89a:	77e2      	strb	r2, [r4, #31]
 801a89c:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 801a8a0:	62a6      	str	r6, [r4, #40]	; 0x28
 801a8a2:	4620      	mov	r0, r4
 801a8a4:	f00e f964 	bl	8028b70 <memcpy>
 801a8a8:	f895 3165 	ldrb.w	r3, [r5, #357]	; 0x165
 801a8ac:	2264      	movs	r2, #100	; 0x64
 801a8ae:	3301      	adds	r3, #1
 801a8b0:	fbb3 f1f2 	udiv	r1, r3, r2
 801a8b4:	fb02 3311 	mls	r3, r2, r1, r3
 801a8b8:	f885 3165 	strb.w	r3, [r5, #357]	; 0x165
 801a8bc:	f895 3166 	ldrb.w	r3, [r5, #358]	; 0x166
 801a8c0:	2f01      	cmp	r7, #1
 801a8c2:	f103 0301 	add.w	r3, r3, #1
 801a8c6:	f885 3166 	strb.w	r3, [r5, #358]	; 0x166
 801a8ca:	d104      	bne.n	801a8d6 <BnrgmTransmitQueuePush+0x76>
 801a8cc:	f895 3167 	ldrb.w	r3, [r5, #359]	; 0x167
 801a8d0:	3301      	adds	r3, #1
 801a8d2:	f885 3167 	strb.w	r3, [r5, #359]	; 0x167
 801a8d6:	4630      	mov	r0, r6
 801a8d8:	e000      	b.n	801a8dc <BnrgmTransmitQueuePush+0x7c>
 801a8da:	2004      	movs	r0, #4
 801a8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8de:	bf00      	nop
 801a8e0:	20003f58 	.word	0x20003f58

0801a8e4 <BnrgmTransmitQueDecreasePktCount>:
 801a8e4:	b510      	push	{r4, lr}
 801a8e6:	4604      	mov	r4, r0
 801a8e8:	b188      	cbz	r0, 801a90e <BnrgmTransmitQueDecreasePktCount+0x2a>
 801a8ea:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801a8ee:	2b01      	cmp	r3, #1
 801a8f0:	d10d      	bne.n	801a90e <BnrgmTransmitQueDecreasePktCount+0x2a>
 801a8f2:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 801a8f6:	b910      	cbnz	r0, 801a8fe <BnrgmTransmitQueDecreasePktCount+0x1a>
 801a8f8:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
 801a8fc:	bd10      	pop	{r4, pc}
 801a8fe:	1e43      	subs	r3, r0, #1
 801a900:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 801a904:	f7ed faba 	bl	8007e7c <HAL_GetTick>
 801a908:	62a0      	str	r0, [r4, #40]	; 0x28
 801a90a:	2000      	movs	r0, #0
 801a90c:	e7f6      	b.n	801a8fc <BnrgmTransmitQueDecreasePktCount+0x18>
 801a90e:	2002      	movs	r0, #2
 801a910:	e7f4      	b.n	801a8fc <BnrgmTransmitQueDecreasePktCount+0x18>
	...

0801a914 <BnrgmTransmitQueuePrepNextItem>:
 801a914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a918:	4d25      	ldr	r5, [pc, #148]	; (801a9b0 <BnrgmTransmitQueuePrepNextItem+0x9c>)
 801a91a:	f895 2167 	ldrb.w	r2, [r5, #359]	; 0x167
 801a91e:	2300      	movs	r3, #0
 801a920:	f8c5 3160 	str.w	r3, [r5, #352]	; 0x160
 801a924:	b1e2      	cbz	r2, 801a960 <BnrgmTransmitQueuePrepNextItem+0x4c>
 801a926:	f895 4164 	ldrb.w	r4, [r5, #356]	; 0x164
 801a92a:	2064      	movs	r0, #100	; 0x64
 801a92c:	262c      	movs	r6, #44	; 0x2c
 801a92e:	f5a5 617d 	sub.w	r1, r5, #4048	; 0xfd0
 801a932:	f240 1701 	movw	r7, #257	; 0x101
 801a936:	18e2      	adds	r2, r4, r3
 801a938:	fbb2 fcf0 	udiv	ip, r2, r0
 801a93c:	fb00 221c 	mls	r2, r0, ip, r2
 801a940:	fb06 1202 	mla	r2, r6, r2, r1
 801a944:	f8b2 c024 	ldrh.w	ip, [r2, #36]	; 0x24
 801a948:	45bc      	cmp	ip, r7
 801a94a:	d106      	bne.n	801a95a <BnrgmTransmitQueuePrepNextItem+0x46>
 801a94c:	f501 617d 	add.w	r1, r1, #4048	; 0xfd0
 801a950:	f8c1 2160 	str.w	r2, [r1, #352]	; 0x160
 801a954:	2000      	movs	r0, #0
 801a956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a95a:	3301      	adds	r3, #1
 801a95c:	2b64      	cmp	r3, #100	; 0x64
 801a95e:	d1ea      	bne.n	801a936 <BnrgmTransmitQueuePrepNextItem+0x22>
 801a960:	f895 3166 	ldrb.w	r3, [r5, #358]	; 0x166
 801a964:	b30b      	cbz	r3, 801a9aa <BnrgmTransmitQueuePrepNextItem+0x96>
 801a966:	f8df 904c 	ldr.w	r9, [pc, #76]	; 801a9b4 <BnrgmTransmitQueuePrepNextItem+0xa0>
 801a96a:	2600      	movs	r6, #0
 801a96c:	2764      	movs	r7, #100	; 0x64
 801a96e:	f04f 082c 	mov.w	r8, #44	; 0x2c
 801a972:	f895 4164 	ldrb.w	r4, [r5, #356]	; 0x164
 801a976:	4434      	add	r4, r6
 801a978:	fbb4 f3f7 	udiv	r3, r4, r7
 801a97c:	fb07 4413 	mls	r4, r7, r3, r4
 801a980:	fb08 9404 	mla	r4, r8, r4, r9
 801a984:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a988:	2b01      	cmp	r3, #1
 801a98a:	d10b      	bne.n	801a9a4 <BnrgmTransmitQueuePrepNextItem+0x90>
 801a98c:	f8b4 a022 	ldrh.w	sl, [r4, #34]	; 0x22
 801a990:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a992:	449a      	add	sl, r3
 801a994:	f7ed fa72 	bl	8007e7c <HAL_GetTick>
 801a998:	3014      	adds	r0, #20
 801a99a:	4582      	cmp	sl, r0
 801a99c:	d802      	bhi.n	801a9a4 <BnrgmTransmitQueuePrepNextItem+0x90>
 801a99e:	f8c5 4160 	str.w	r4, [r5, #352]	; 0x160
 801a9a2:	e7d7      	b.n	801a954 <BnrgmTransmitQueuePrepNextItem+0x40>
 801a9a4:	3601      	adds	r6, #1
 801a9a6:	2e64      	cmp	r6, #100	; 0x64
 801a9a8:	d1e3      	bne.n	801a972 <BnrgmTransmitQueuePrepNextItem+0x5e>
 801a9aa:	2001      	movs	r0, #1
 801a9ac:	e7d3      	b.n	801a956 <BnrgmTransmitQueuePrepNextItem+0x42>
 801a9ae:	bf00      	nop
 801a9b0:	20003f58 	.word	0x20003f58
 801a9b4:	20002f88 	.word	0x20002f88

0801a9b8 <BnrgmTransmitQueueAlign>:
 801a9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9bc:	4f2f      	ldr	r7, [pc, #188]	; (801aa7c <BnrgmTransmitQueueAlign+0xc4>)
 801a9be:	f897 4165 	ldrb.w	r4, [r7, #357]	; 0x165
 801a9c2:	2c00      	cmp	r4, #0
 801a9c4:	d044      	beq.n	801aa50 <BnrgmTransmitQueueAlign+0x98>
 801a9c6:	3c01      	subs	r4, #1
 801a9c8:	b2e4      	uxtb	r4, r4
 801a9ca:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 801aa80 <BnrgmTransmitQueueAlign+0xc8>
 801a9ce:	46a4      	mov	ip, r4
 801a9d0:	f04f 0864 	mov.w	r8, #100	; 0x64
 801a9d4:	f04f 092c 	mov.w	r9, #44	; 0x2c
 801a9d8:	f04f 0b00 	mov.w	fp, #0
 801a9dc:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
 801a9e0:	b343      	cbz	r3, 801aa34 <BnrgmTransmitQueueAlign+0x7c>
 801a9e2:	fb1c fe09 	smulbb	lr, ip, r9
 801a9e6:	44d6      	add	lr, sl
 801a9e8:	f89e 2025 	ldrb.w	r2, [lr, #37]	; 0x25
 801a9ec:	2a01      	cmp	r2, #1
 801a9ee:	d131      	bne.n	801aa54 <BnrgmTransmitQueueAlign+0x9c>
 801a9f0:	4564      	cmp	r4, ip
 801a9f2:	d00c      	beq.n	801aa0e <BnrgmTransmitQueueAlign+0x56>
 801a9f4:	4676      	mov	r6, lr
 801a9f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a9f8:	fb04 a509 	mla	r5, r4, r9, sl
 801a9fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a9fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801aa00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801aa02:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801aa06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801aa0a:	f88e b025 	strb.w	fp, [lr, #37]	; 0x25
 801aa0e:	b384      	cbz	r4, 801aa72 <BnrgmTransmitQueueAlign+0xba>
 801aa10:	3c01      	subs	r4, #1
 801aa12:	b2e4      	uxtb	r4, r4
 801aa14:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 801aa18:	4563      	cmp	r3, ip
 801aa1a:	d00b      	beq.n	801aa34 <BnrgmTransmitQueueAlign+0x7c>
 801aa1c:	f1bc 0f00 	cmp.w	ip, #0
 801aa20:	d029      	beq.n	801aa76 <BnrgmTransmitQueueAlign+0xbe>
 801aa22:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801aa26:	fa5f fc8c 	uxtb.w	ip, ip
 801aa2a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801aa2e:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 801aa32:	d1d3      	bne.n	801a9dc <BnrgmTransmitQueueAlign+0x24>
 801aa34:	f897 3165 	ldrb.w	r3, [r7, #357]	; 0x165
 801aa38:	f897 2166 	ldrb.w	r2, [r7, #358]	; 0x166
 801aa3c:	429a      	cmp	r2, r3
 801aa3e:	bf88      	it	hi
 801aa40:	3364      	addhi	r3, #100	; 0x64
 801aa42:	1a9b      	subs	r3, r3, r2
 801aa44:	b2db      	uxtb	r3, r3
 801aa46:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
 801aa4a:	2000      	movs	r0, #0
 801aa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa50:	2463      	movs	r4, #99	; 0x63
 801aa52:	e7ba      	b.n	801a9ca <BnrgmTransmitQueueAlign+0x12>
 801aa54:	3b01      	subs	r3, #1
 801aa56:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
 801aa5a:	f89e 3024 	ldrb.w	r3, [lr, #36]	; 0x24
 801aa5e:	2b01      	cmp	r3, #1
 801aa60:	d1d8      	bne.n	801aa14 <BnrgmTransmitQueueAlign+0x5c>
 801aa62:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d0d4      	beq.n	801aa14 <BnrgmTransmitQueueAlign+0x5c>
 801aa6a:	3b01      	subs	r3, #1
 801aa6c:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 801aa70:	e7d0      	b.n	801aa14 <BnrgmTransmitQueueAlign+0x5c>
 801aa72:	2463      	movs	r4, #99	; 0x63
 801aa74:	e7ce      	b.n	801aa14 <BnrgmTransmitQueueAlign+0x5c>
 801aa76:	f04f 0c63 	mov.w	ip, #99	; 0x63
 801aa7a:	e7d6      	b.n	801aa2a <BnrgmTransmitQueueAlign+0x72>
 801aa7c:	20003f58 	.word	0x20003f58
 801aa80:	20002f88 	.word	0x20002f88

0801aa84 <MobleTransmitNow>:
 801aa84:	b470      	push	{r4, r5, r6}
 801aa86:	4604      	mov	r4, r0
 801aa88:	f89d 600c 	ldrb.w	r6, [sp, #12]
 801aa8c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801aa90:	4618      	mov	r0, r3
 801aa92:	460b      	mov	r3, r1
 801aa94:	b159      	cbz	r1, 801aaae <MobleTransmitNow+0x2a>
 801aa96:	2a1f      	cmp	r2, #31
 801aa98:	d809      	bhi.n	801aaae <MobleTransmitNow+0x2a>
 801aa9a:	2d13      	cmp	r5, #19
 801aa9c:	d907      	bls.n	801aaae <MobleTransmitNow+0x2a>
 801aa9e:	e9cd 2503 	strd	r2, r5, [sp, #12]
 801aaa2:	4631      	mov	r1, r6
 801aaa4:	f3c4 1200 	ubfx	r2, r4, #4, #1
 801aaa8:	bc70      	pop	{r4, r5, r6}
 801aaaa:	f7ff bed9 	b.w	801a860 <BnrgmTransmitQueuePush>
 801aaae:	2003      	movs	r0, #3
 801aab0:	bc70      	pop	{r4, r5, r6}
 801aab2:	4770      	bx	lr

0801aab4 <MobleTransmitTimerCallback>:
 801aab4:	b570      	push	{r4, r5, r6, lr}
 801aab6:	684b      	ldr	r3, [r1, #4]
 801aab8:	b092      	sub	sp, #72	; 0x48
 801aaba:	881e      	ldrh	r6, [r3, #0]
 801aabc:	4605      	mov	r5, r0
 801aabe:	460c      	mov	r4, r1
 801aac0:	f7fd fac6 	bl	8018050 <MoblePalBluetoothRandom>
 801aac4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801aac8:	1831      	adds	r1, r6, r0
 801aaca:	b289      	uxth	r1, r1
 801aacc:	4628      	mov	r0, r5
 801aace:	f7fd f88b 	bl	8017be8 <MoblePalTimerStartOnce>
 801aad2:	4b0f      	ldr	r3, [pc, #60]	; (801ab10 <MobleTransmitTimerCallback+0x5c>)
 801aad4:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 801aad8:	2a01      	cmp	r2, #1
 801aada:	d016      	beq.n	801ab0a <MobleTransmitTimerCallback+0x56>
 801aadc:	78a2      	ldrb	r2, [r4, #2]
 801aade:	2a01      	cmp	r2, #1
 801aae0:	d102      	bne.n	801aae8 <MobleTransmitTimerCallback+0x34>
 801aae2:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 801aae6:	b983      	cbnz	r3, 801ab0a <MobleTransmitTimerCallback+0x56>
 801aae8:	68a3      	ldr	r3, [r4, #8]
 801aaea:	211f      	movs	r1, #31
 801aaec:	a802      	add	r0, sp, #8
 801aaee:	4798      	blx	r3
 801aaf0:	1e02      	subs	r2, r0, #0
 801aaf2:	dd0a      	ble.n	801ab0a <MobleTransmitTimerCallback+0x56>
 801aaf4:	6863      	ldr	r3, [r4, #4]
 801aaf6:	881b      	ldrh	r3, [r3, #0]
 801aaf8:	9301      	str	r3, [sp, #4]
 801aafa:	78e3      	ldrb	r3, [r4, #3]
 801aafc:	9300      	str	r3, [sp, #0]
 801aafe:	b2d2      	uxtb	r2, r2
 801ab00:	7863      	ldrb	r3, [r4, #1]
 801ab02:	a902      	add	r1, sp, #8
 801ab04:	2000      	movs	r0, #0
 801ab06:	f7ff ffbd 	bl	801aa84 <MobleTransmitNow>
 801ab0a:	b012      	add	sp, #72	; 0x48
 801ab0c:	bd70      	pop	{r4, r5, r6, pc}
 801ab0e:	bf00      	nop
 801ab10:	20003f58 	.word	0x20003f58

0801ab14 <MobleTransmitOutOfTurn>:
 801ab14:	2802      	cmp	r0, #2
 801ab16:	b508      	push	{r3, lr}
 801ab18:	d80a      	bhi.n	801ab30 <MobleTransmitOutOfTurn+0x1c>
 801ab1a:	4b07      	ldr	r3, [pc, #28]	; (801ab38 <MobleTransmitOutOfTurn+0x24>)
 801ab1c:	0102      	lsls	r2, r0, #4
 801ab1e:	eb03 1100 	add.w	r1, r3, r0, lsl #4
 801ab22:	5cd3      	ldrb	r3, [r2, r3]
 801ab24:	b133      	cbz	r3, 801ab34 <MobleTransmitOutOfTurn+0x20>
 801ab26:	2000      	movs	r0, #0
 801ab28:	f7ff ffc4 	bl	801aab4 <MobleTransmitTimerCallback>
 801ab2c:	2000      	movs	r0, #0
 801ab2e:	bd08      	pop	{r3, pc}
 801ab30:	2003      	movs	r0, #3
 801ab32:	e7fc      	b.n	801ab2e <MobleTransmitOutOfTurn+0x1a>
 801ab34:	2002      	movs	r0, #2
 801ab36:	e7fa      	b.n	801ab2e <MobleTransmitOutOfTurn+0x1a>
 801ab38:	20002f58 	.word	0x20002f58

0801ab3c <MobleTransmitFindFreeSlot>:
 801ab3c:	4b07      	ldr	r3, [pc, #28]	; (801ab5c <MobleTransmitFindFreeSlot+0x20>)
 801ab3e:	7818      	ldrb	r0, [r3, #0]
 801ab40:	b150      	cbz	r0, 801ab58 <MobleTransmitFindFreeSlot+0x1c>
 801ab42:	7c1a      	ldrb	r2, [r3, #16]
 801ab44:	b13a      	cbz	r2, 801ab56 <MobleTransmitFindFreeSlot+0x1a>
 801ab46:	f893 3020 	ldrb.w	r3, [r3, #32]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	bf0c      	ite	eq
 801ab4e:	2002      	moveq	r0, #2
 801ab50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801ab54:	4770      	bx	lr
 801ab56:	2001      	movs	r0, #1
 801ab58:	4770      	bx	lr
 801ab5a:	bf00      	nop
 801ab5c:	20002f58 	.word	0x20002f58

0801ab60 <MobleTransmitSetup>:
 801ab60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab64:	4682      	mov	sl, r0
 801ab66:	4615      	mov	r5, r2
 801ab68:	461f      	mov	r7, r3
 801ab6a:	b1f3      	cbz	r3, 801abaa <MobleTransmitSetup+0x4a>
 801ab6c:	b1ea      	cbz	r2, 801abaa <MobleTransmitSetup+0x4a>
 801ab6e:	f7ff ffe5 	bl	801ab3c <MobleTransmitFindFreeSlot>
 801ab72:	1e06      	subs	r6, r0, #0
 801ab74:	db1b      	blt.n	801abae <MobleTransmitSetup+0x4e>
 801ab76:	f8df 8040 	ldr.w	r8, [pc, #64]	; 801abb8 <MobleTransmitSetup+0x58>
 801ab7a:	b234      	sxth	r4, r6
 801ab7c:	eb08 1204 	add.w	r2, r8, r4, lsl #4
 801ab80:	3d01      	subs	r5, #1
 801ab82:	7091      	strb	r1, [r2, #2]
 801ab84:	f882 a001 	strb.w	sl, [r2, #1]
 801ab88:	490a      	ldr	r1, [pc, #40]	; (801abb4 <MobleTransmitSetup+0x54>)
 801ab8a:	70d5      	strb	r5, [r2, #3]
 801ab8c:	f102 000c 	add.w	r0, r2, #12
 801ab90:	f7fc ffc0 	bl	8017b14 <MoblePalTimerCreate>
 801ab94:	2801      	cmp	r0, #1
 801ab96:	ea4f 1904 	mov.w	r9, r4, lsl #4
 801ab9a:	d804      	bhi.n	801aba6 <MobleTransmitSetup+0x46>
 801ab9c:	2301      	movs	r3, #1
 801ab9e:	f809 3008 	strb.w	r3, [r9, r8]
 801aba2:	2000      	movs	r0, #0
 801aba4:	603e      	str	r6, [r7, #0]
 801aba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abaa:	2003      	movs	r0, #3
 801abac:	e7fb      	b.n	801aba6 <MobleTransmitSetup+0x46>
 801abae:	2004      	movs	r0, #4
 801abb0:	e7f9      	b.n	801aba6 <MobleTransmitSetup+0x46>
 801abb2:	bf00      	nop
 801abb4:	0801aab5 	.word	0x0801aab5
 801abb8:	20002f58 	.word	0x20002f58

0801abbc <BnrgmTransmitDisableRegularlyGeneratedBeacon>:
 801abbc:	b508      	push	{r3, lr}
 801abbe:	0102      	lsls	r2, r0, #4
 801abc0:	4b06      	ldr	r3, [pc, #24]	; (801abdc <BnrgmTransmitDisableRegularlyGeneratedBeacon+0x20>)
 801abc2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 801abc6:	5cd3      	ldrb	r3, [r2, r3]
 801abc8:	2b01      	cmp	r3, #1
 801abca:	d104      	bne.n	801abd6 <BnrgmTransmitDisableRegularlyGeneratedBeacon+0x1a>
 801abcc:	68c0      	ldr	r0, [r0, #12]
 801abce:	f7fd f833 	bl	8017c38 <MoblePalTimerStop>
 801abd2:	2000      	movs	r0, #0
 801abd4:	bd08      	pop	{r3, pc}
 801abd6:	2002      	movs	r0, #2
 801abd8:	e7fc      	b.n	801abd4 <BnrgmTransmitDisableRegularlyGeneratedBeacon+0x18>
 801abda:	bf00      	nop
 801abdc:	20002f58 	.word	0x20002f58

0801abe0 <BnrgmTransmitChangeRegularlyGeneratedInterval>:
 801abe0:	b538      	push	{r3, r4, r5, lr}
 801abe2:	0101      	lsls	r1, r0, #4
 801abe4:	4b0c      	ldr	r3, [pc, #48]	; (801ac18 <BnrgmTransmitChangeRegularlyGeneratedInterval+0x38>)
 801abe6:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 801abea:	5ccb      	ldrb	r3, [r1, r3]
 801abec:	2b01      	cmp	r3, #1
 801abee:	d110      	bne.n	801ac12 <BnrgmTransmitChangeRegularlyGeneratedInterval+0x32>
 801abf0:	68d0      	ldr	r0, [r2, #12]
 801abf2:	f7fd f821 	bl	8017c38 <MoblePalTimerStop>
 801abf6:	6853      	ldr	r3, [r2, #4]
 801abf8:	68d5      	ldr	r5, [r2, #12]
 801abfa:	881c      	ldrh	r4, [r3, #0]
 801abfc:	f7fd fa28 	bl	8018050 <MoblePalBluetoothRandom>
 801ac00:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801ac04:	1821      	adds	r1, r4, r0
 801ac06:	b289      	uxth	r1, r1
 801ac08:	4628      	mov	r0, r5
 801ac0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ac0e:	f7fc bfeb 	b.w	8017be8 <MoblePalTimerStartOnce>
 801ac12:	2002      	movs	r0, #2
 801ac14:	bd38      	pop	{r3, r4, r5, pc}
 801ac16:	bf00      	nop
 801ac18:	20002f58 	.word	0x20002f58

0801ac1c <MobleStackFastAdvTimeoutTimerCallback>:
 801ac1c:	4a09      	ldr	r2, [pc, #36]	; (801ac44 <MobleStackFastAdvTimeoutTimerCallback+0x28>)
 801ac1e:	f8d2 07f8 	ldr.w	r0, [r2, #2040]	; 0x7f8
 801ac22:	b508      	push	{r3, lr}
 801ac24:	b108      	cbz	r0, 801ac2a <MobleStackFastAdvTimeoutTimerCallback+0xe>
 801ac26:	f7fd f827 	bl	8017c78 <MoblePalTimerDestroy>
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	f8c2 37f8 	str.w	r3, [r2, #2040]	; 0x7f8
 801ac30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801ac34:	f8a2 3864 	strh.w	r3, [r2, #2148]	; 0x864
 801ac38:	f8d2 0860 	ldr.w	r0, [r2, #2144]	; 0x860
 801ac3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ac40:	f7ff bfce 	b.w	801abe0 <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801ac44:	20001410 	.word	0x20001410

0801ac48 <MobleTransmitRegularlyGenerated>:
 801ac48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac4a:	9f06      	ldr	r7, [sp, #24]
 801ac4c:	460e      	mov	r6, r1
 801ac4e:	461d      	mov	r5, r3
 801ac50:	4611      	mov	r1, r2
 801ac52:	4604      	mov	r4, r0
 801ac54:	b178      	cbz	r0, 801ac76 <MobleTransmitRegularlyGenerated+0x2e>
 801ac56:	b173      	cbz	r3, 801ac76 <MobleTransmitRegularlyGenerated+0x2e>
 801ac58:	463b      	mov	r3, r7
 801ac5a:	2201      	movs	r2, #1
 801ac5c:	4630      	mov	r0, r6
 801ac5e:	f7ff ff7f 	bl	801ab60 <MobleTransmitSetup>
 801ac62:	2801      	cmp	r0, #1
 801ac64:	d806      	bhi.n	801ac74 <MobleTransmitRegularlyGenerated+0x2c>
 801ac66:	683b      	ldr	r3, [r7, #0]
 801ac68:	4a04      	ldr	r2, [pc, #16]	; (801ac7c <MobleTransmitRegularlyGenerated+0x34>)
 801ac6a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 801ac6e:	e9c2 5401 	strd	r5, r4, [r2, #4]
 801ac72:	2000      	movs	r0, #0
 801ac74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac76:	2003      	movs	r0, #3
 801ac78:	e7fc      	b.n	801ac74 <MobleTransmitRegularlyGenerated+0x2c>
 801ac7a:	bf00      	nop
 801ac7c:	20002f58 	.word	0x20002f58

0801ac80 <BnrgmTransmitSend>:
 801ac80:	b470      	push	{r4, r5, r6}
 801ac82:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801ac86:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 801ac8a:	b159      	cbz	r1, 801aca4 <BnrgmTransmitSend+0x24>
 801ac8c:	2a1f      	cmp	r2, #31
 801ac8e:	d809      	bhi.n	801aca4 <BnrgmTransmitSend+0x24>
 801ac90:	2e13      	cmp	r6, #19
 801ac92:	d907      	bls.n	801aca4 <BnrgmTransmitSend+0x24>
 801ac94:	b134      	cbz	r4, 801aca4 <BnrgmTransmitSend+0x24>
 801ac96:	3c01      	subs	r4, #1
 801ac98:	b2e4      	uxtb	r4, r4
 801ac9a:	9604      	str	r6, [sp, #16]
 801ac9c:	9403      	str	r4, [sp, #12]
 801ac9e:	bc70      	pop	{r4, r5, r6}
 801aca0:	f7ff bef0 	b.w	801aa84 <MobleTransmitNow>
 801aca4:	2003      	movs	r0, #3
 801aca6:	bc70      	pop	{r4, r5, r6}
 801aca8:	4770      	bx	lr
	...

0801acac <MoblePBADVSendControl.isra.0>:
 801acac:	b570      	push	{r4, r5, r6, lr}
 801acae:	460d      	mov	r5, r1
 801acb0:	f015 0ffd 	tst.w	r5, #253	; 0xfd
 801acb4:	b088      	sub	sp, #32
 801acb6:	461e      	mov	r6, r3
 801acb8:	4611      	mov	r1, r2
 801acba:	bf0c      	ite	eq
 801acbc:	f890 30b8 	ldrbeq.w	r3, [r0, #184]	; 0xb8
 801acc0:	f890 3024 	ldrbne.w	r3, [r0, #36]	; 0x24
 801acc4:	69c2      	ldr	r2, [r0, #28]
 801acc6:	bf08      	it	eq
 801acc8:	f8c0 00bc 	streq.w	r0, [r0, #188]	; 0xbc
 801accc:	2d03      	cmp	r5, #3
 801acce:	4604      	mov	r4, r0
 801acd0:	f8cd 200a 	str.w	r2, [sp, #10]
 801acd4:	f88d 300e 	strb.w	r3, [sp, #14]
 801acd8:	d139      	bne.n	801ad4e <MoblePBADVSendControl.isra.0+0xa2>
 801acda:	2301      	movs	r3, #1
 801acdc:	f88d 300f 	strb.w	r3, [sp, #15]
 801ace0:	1df3      	adds	r3, r6, #7
 801ace2:	f88d 3008 	strb.w	r3, [sp, #8]
 801ace6:	2329      	movs	r3, #41	; 0x29
 801ace8:	f88d 3009 	strb.w	r3, [sp, #9]
 801acec:	b11e      	cbz	r6, 801acf6 <MoblePBADVSendControl.isra.0+0x4a>
 801acee:	4632      	mov	r2, r6
 801acf0:	a804      	add	r0, sp, #16
 801acf2:	f00d ff3d 	bl	8028b70 <memcpy>
 801acf6:	2303      	movs	r3, #3
 801acf8:	2114      	movs	r1, #20
 801acfa:	e9cd 3100 	strd	r3, r1, [sp]
 801acfe:	f106 0208 	add.w	r2, r6, #8
 801ad02:	2300      	movs	r3, #0
 801ad04:	b2d2      	uxtb	r2, r2
 801ad06:	a902      	add	r1, sp, #8
 801ad08:	4618      	mov	r0, r3
 801ad0a:	f7ff ffb9 	bl	801ac80 <BnrgmTransmitSend>
 801ad0e:	bb2d      	cbnz	r5, 801ad5c <MoblePBADVSendControl.isra.0+0xb0>
 801ad10:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 801ad14:	b913      	cbnz	r3, 801ad1c <MoblePBADVSendControl.isra.0+0x70>
 801ad16:	4620      	mov	r0, r4
 801ad18:	f7fc ff6a 	bl	8017bf0 <MoblePBADVRaiseTransTimeoutTimer>
 801ad1c:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 801ad20:	4910      	ldr	r1, [pc, #64]	; (801ad64 <MoblePBADVSendControl.isra.0+0xb8>)
 801ad22:	3301      	adds	r3, #1
 801ad24:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 801ad28:	4622      	mov	r2, r4
 801ad2a:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 801ad2e:	f7fc fef1 	bl	8017b14 <MoblePalTimerCreate>
 801ad32:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
 801ad36:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801ad3a:	f7fc ff55 	bl	8017be8 <MoblePalTimerStartOnce>
 801ad3e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 801ad42:	f7fc ffe9 	bl	8017d18 <MoblePBADVEraseTimer>
 801ad46:	4620      	mov	r0, r4
 801ad48:	f7fc ff64 	bl	8017c14 <MoblePBADVRaiseLinkIdleTimer>
 801ad4c:	e008      	b.n	801ad60 <MoblePBADVSendControl.isra.0+0xb4>
 801ad4e:	2d01      	cmp	r5, #1
 801ad50:	bf16      	itet	ne
 801ad52:	00ab      	lslne	r3, r5, #2
 801ad54:	2307      	moveq	r3, #7
 801ad56:	f043 0303 	orrne.w	r3, r3, #3
 801ad5a:	e7bf      	b.n	801acdc <MoblePBADVSendControl.isra.0+0x30>
 801ad5c:	2d01      	cmp	r5, #1
 801ad5e:	d0ee      	beq.n	801ad3e <MoblePBADVSendControl.isra.0+0x92>
 801ad60:	b008      	add	sp, #32
 801ad62:	bd70      	pop	{r4, r5, r6, pc}
 801ad64:	08027159 	.word	0x08027159

0801ad68 <BnrgmTransmitStartAdv>:
 801ad68:	4b07      	ldr	r3, [pc, #28]	; (801ad88 <BnrgmTransmitStartAdv+0x20>)
 801ad6a:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
 801ad6e:	b149      	cbz	r1, 801ad84 <BnrgmTransmitStartAdv+0x1c>
 801ad70:	f891 0020 	ldrb.w	r0, [r1, #32]
 801ad74:	7fca      	ldrb	r2, [r1, #31]
 801ad76:	3800      	subs	r0, #0
 801ad78:	f04f 0314 	mov.w	r3, #20
 801ad7c:	bf18      	it	ne
 801ad7e:	2001      	movne	r0, #1
 801ad80:	f7fd bad2 	b.w	8018328 <MoblePalBluetoothModeStartAdv>
 801ad84:	2002      	movs	r0, #2
 801ad86:	4770      	bx	lr
 801ad88:	20003f58 	.word	0x20003f58

0801ad8c <BnrgmTransmitStartScan>:
 801ad8c:	2802      	cmp	r0, #2
 801ad8e:	d903      	bls.n	801ad98 <BnrgmTransmitStartScan+0xc>
 801ad90:	2902      	cmp	r1, #2
 801ad92:	d901      	bls.n	801ad98 <BnrgmTransmitStartScan+0xc>
 801ad94:	f7fd bb5c 	b.w	8018450 <MoblePalBluetoothModeStartScan>
 801ad98:	2002      	movs	r0, #2
 801ad9a:	4770      	bx	lr

0801ad9c <MobleQIInit>:
 801ad9c:	b120      	cbz	r0, 801ada8 <MobleQIInit+0xc>
 801ad9e:	2300      	movs	r3, #0
 801ada0:	e9c0 3300 	strd	r3, r3, [r0]
 801ada4:	4618      	mov	r0, r3
 801ada6:	4770      	bx	lr
 801ada8:	2003      	movs	r0, #3
 801adaa:	4770      	bx	lr

0801adac <MobleQIInsertAfter>:
 801adac:	b140      	cbz	r0, 801adc0 <MobleQIInsertAfter+0x14>
 801adae:	b139      	cbz	r1, 801adc0 <MobleQIInsertAfter+0x14>
 801adb0:	6803      	ldr	r3, [r0, #0]
 801adb2:	b103      	cbz	r3, 801adb6 <MobleQIInsertAfter+0xa>
 801adb4:	6059      	str	r1, [r3, #4]
 801adb6:	6001      	str	r1, [r0, #0]
 801adb8:	e9c1 3000 	strd	r3, r0, [r1]
 801adbc:	2000      	movs	r0, #0
 801adbe:	4770      	bx	lr
 801adc0:	2003      	movs	r0, #3
 801adc2:	4770      	bx	lr

0801adc4 <MoblePalBluetoothPushNotification>:
 801adc4:	4a06      	ldr	r2, [pc, #24]	; (801ade0 <MoblePalBluetoothPushNotification+0x1c>)
 801adc6:	f8d2 3938 	ldr.w	r3, [r2, #2360]	; 0x938
 801adca:	4601      	mov	r1, r0
 801adcc:	b12b      	cbz	r3, 801adda <MoblePalBluetoothPushNotification+0x16>
 801adce:	4618      	mov	r0, r3
 801add0:	681b      	ldr	r3, [r3, #0]
 801add2:	2b00      	cmp	r3, #0
 801add4:	d1fb      	bne.n	801adce <MoblePalBluetoothPushNotification+0xa>
 801add6:	f7ff bfe9 	b.w	801adac <MobleQIInsertAfter>
 801adda:	f8c2 0938 	str.w	r0, [r2, #2360]	; 0x938
 801adde:	4770      	bx	lr
 801ade0:	20001410 	.word	0x20001410

0801ade4 <MobleQIRemove>:
 801ade4:	b150      	cbz	r0, 801adfc <MobleQIRemove+0x18>
 801ade6:	e9d0 3200 	ldrd	r3, r2, [r0]
 801adea:	b102      	cbz	r2, 801adee <MobleQIRemove+0xa>
 801adec:	6013      	str	r3, [r2, #0]
 801adee:	b103      	cbz	r3, 801adf2 <MobleQIRemove+0xe>
 801adf0:	605a      	str	r2, [r3, #4]
 801adf2:	2300      	movs	r3, #0
 801adf4:	e9c0 3300 	strd	r3, r3, [r0]
 801adf8:	4618      	mov	r0, r3
 801adfa:	4770      	bx	lr
 801adfc:	2003      	movs	r0, #3
 801adfe:	4770      	bx	lr

0801ae00 <MoblePalBluetoothPopNotification>:
 801ae00:	b508      	push	{r3, lr}
 801ae02:	4b06      	ldr	r3, [pc, #24]	; (801ae1c <MoblePalBluetoothPopNotification+0x1c>)
 801ae04:	f8d3 1938 	ldr.w	r1, [r3, #2360]	; 0x938
 801ae08:	b129      	cbz	r1, 801ae16 <MoblePalBluetoothPopNotification+0x16>
 801ae0a:	680a      	ldr	r2, [r1, #0]
 801ae0c:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
 801ae10:	4608      	mov	r0, r1
 801ae12:	f7ff ffe7 	bl	801ade4 <MobleQIRemove>
 801ae16:	4608      	mov	r0, r1
 801ae18:	bd08      	pop	{r3, pc}
 801ae1a:	bf00      	nop
 801ae1c:	20001410 	.word	0x20001410

0801ae20 <MobleInitRGN>:
 801ae20:	b138      	cbz	r0, 801ae32 <MobleInitRGN+0x12>
 801ae22:	290b      	cmp	r1, #11
 801ae24:	d905      	bls.n	801ae32 <MobleInitRGN+0x12>
 801ae26:	2300      	movs	r3, #0
 801ae28:	e9c0 3300 	strd	r3, r3, [r0]
 801ae2c:	6081      	str	r1, [r0, #8]
 801ae2e:	4618      	mov	r0, r3
 801ae30:	4770      	bx	lr
 801ae32:	2003      	movs	r0, #3
 801ae34:	4770      	bx	lr

0801ae36 <MobleSplitRGN>:
 801ae36:	b538      	push	{r3, r4, r5, lr}
 801ae38:	460a      	mov	r2, r1
 801ae3a:	4604      	mov	r4, r0
 801ae3c:	b910      	cbnz	r0, 801ae44 <MobleSplitRGN+0xe>
 801ae3e:	2500      	movs	r5, #0
 801ae40:	4628      	mov	r0, r5
 801ae42:	bd38      	pop	{r3, r4, r5, pc}
 801ae44:	290b      	cmp	r1, #11
 801ae46:	d9fa      	bls.n	801ae3e <MobleSplitRGN+0x8>
 801ae48:	078b      	lsls	r3, r1, #30
 801ae4a:	d1f8      	bne.n	801ae3e <MobleSplitRGN+0x8>
 801ae4c:	6881      	ldr	r1, [r0, #8]
 801ae4e:	f102 0310 	add.w	r3, r2, #16
 801ae52:	f021 0003 	bic.w	r0, r1, #3
 801ae56:	4298      	cmp	r0, r3
 801ae58:	d9f1      	bls.n	801ae3e <MobleSplitRGN+0x8>
 801ae5a:	18a5      	adds	r5, r4, r2
 801ae5c:	1a89      	subs	r1, r1, r2
 801ae5e:	4628      	mov	r0, r5
 801ae60:	f7ff ffde 	bl	801ae20 <MobleInitRGN>
 801ae64:	2801      	cmp	r0, #1
 801ae66:	d8ea      	bhi.n	801ae3e <MobleSplitRGN+0x8>
 801ae68:	60a2      	str	r2, [r4, #8]
 801ae6a:	4629      	mov	r1, r5
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	f7ff ff9d 	bl	801adac <MobleQIInsertAfter>
 801ae72:	e7e5      	b.n	801ae40 <MobleSplitRGN+0xa>

0801ae74 <MobleMemAlloc>:
 801ae74:	b538      	push	{r3, r4, r5, lr}
 801ae76:	b908      	cbnz	r0, 801ae7c <MobleMemAlloc+0x8>
 801ae78:	2000      	movs	r0, #0
 801ae7a:	bd38      	pop	{r3, r4, r5, pc}
 801ae7c:	4c1e      	ldr	r4, [pc, #120]	; (801aef8 <MobleMemAlloc+0x84>)
 801ae7e:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
 801ae82:	3003      	adds	r0, #3
 801ae84:	f020 0503 	bic.w	r5, r0, #3
 801ae88:	b973      	cbnz	r3, 801aea8 <MobleMemAlloc+0x34>
 801ae8a:	f8d4 0940 	ldr.w	r0, [r4, #2368]	; 0x940
 801ae8e:	f8b4 1944 	ldrh.w	r1, [r4, #2372]	; 0x944
 801ae92:	f8c4 093c 	str.w	r0, [r4, #2364]	; 0x93c
 801ae96:	f7ff ffc3 	bl	801ae20 <MobleInitRGN>
 801ae9a:	2801      	cmp	r0, #1
 801ae9c:	d8ec      	bhi.n	801ae78 <MobleMemAlloc+0x4>
 801ae9e:	f8d4 093c 	ldr.w	r0, [r4, #2364]	; 0x93c
 801aea2:	210c      	movs	r1, #12
 801aea4:	f7ff ffc7 	bl	801ae36 <MobleSplitRGN>
 801aea8:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
 801aeac:	f105 010c 	add.w	r1, r5, #12
 801aeb0:	2400      	movs	r4, #0
 801aeb2:	b993      	cbnz	r3, 801aeda <MobleMemAlloc+0x66>
 801aeb4:	2c00      	cmp	r4, #0
 801aeb6:	d0df      	beq.n	801ae78 <MobleMemAlloc+0x4>
 801aeb8:	68a3      	ldr	r3, [r4, #8]
 801aeba:	351c      	adds	r5, #28
 801aebc:	42ab      	cmp	r3, r5
 801aebe:	d302      	bcc.n	801aec6 <MobleMemAlloc+0x52>
 801aec0:	4620      	mov	r0, r4
 801aec2:	f7ff ffb8 	bl	801ae36 <MobleSplitRGN>
 801aec6:	68a3      	ldr	r3, [r4, #8]
 801aec8:	f043 0301 	orr.w	r3, r3, #1
 801aecc:	60a3      	str	r3, [r4, #8]
 801aece:	4620      	mov	r0, r4
 801aed0:	f7ff ff88 	bl	801ade4 <MobleQIRemove>
 801aed4:	f104 000c 	add.w	r0, r4, #12
 801aed8:	e7cf      	b.n	801ae7a <MobleMemAlloc+0x6>
 801aeda:	689a      	ldr	r2, [r3, #8]
 801aedc:	428a      	cmp	r2, r1
 801aede:	d009      	beq.n	801aef4 <MobleMemAlloc+0x80>
 801aee0:	d304      	bcc.n	801aeec <MobleMemAlloc+0x78>
 801aee2:	b12c      	cbz	r4, 801aef0 <MobleMemAlloc+0x7c>
 801aee4:	68a0      	ldr	r0, [r4, #8]
 801aee6:	4282      	cmp	r2, r0
 801aee8:	bf38      	it	cc
 801aeea:	461c      	movcc	r4, r3
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	e7e0      	b.n	801aeb2 <MobleMemAlloc+0x3e>
 801aef0:	461c      	mov	r4, r3
 801aef2:	e7fb      	b.n	801aeec <MobleMemAlloc+0x78>
 801aef4:	461c      	mov	r4, r3
 801aef6:	e7df      	b.n	801aeb8 <MobleMemAlloc+0x44>
 801aef8:	20001410 	.word	0x20001410

0801aefc <MoblePalBluetoothGattSendNotification>:
 801aefc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801af00:	461d      	mov	r5, r3
 801af02:	4b1f      	ldr	r3, [pc, #124]	; (801af80 <MoblePalBluetoothGattSendNotification+0x84>)
 801af04:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 801af08:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 801af0c:	f013 0f3c 	tst.w	r3, #60	; 0x3c
 801af10:	4680      	mov	r8, r0
 801af12:	460f      	mov	r7, r1
 801af14:	4616      	mov	r6, r2
 801af16:	d103      	bne.n	801af20 <MoblePalBluetoothGattSendNotification+0x24>
 801af18:	2002      	movs	r0, #2
 801af1a:	b003      	add	sp, #12
 801af1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af20:	4c18      	ldr	r4, [pc, #96]	; (801af84 <MoblePalBluetoothGattSendNotification+0x88>)
 801af22:	7aa3      	ldrb	r3, [r4, #10]
 801af24:	2b01      	cmp	r3, #1
 801af26:	d10e      	bne.n	801af46 <MoblePalBluetoothGattSendNotification+0x4a>
 801af28:	9600      	str	r6, [sp, #0]
 801af2a:	462b      	mov	r3, r5
 801af2c:	2200      	movs	r2, #0
 801af2e:	4639      	mov	r1, r7
 801af30:	4640      	mov	r0, r8
 801af32:	f7f9 ff26 	bl	8014d82 <aci_gatt_update_char_value>
 801af36:	2893      	cmp	r0, #147	; 0x93
 801af38:	d0f6      	beq.n	801af28 <MoblePalBluetoothGattSendNotification+0x2c>
 801af3a:	2800      	cmp	r0, #0
 801af3c:	d0ed      	beq.n	801af1a <MoblePalBluetoothGattSendNotification+0x1e>
 801af3e:	2864      	cmp	r0, #100	; 0x64
 801af40:	d1ea      	bne.n	801af18 <MoblePalBluetoothGattSendNotification+0x1c>
 801af42:	2300      	movs	r3, #0
 801af44:	72a3      	strb	r3, [r4, #10]
 801af46:	f1b9 0f00 	cmp.w	r9, #0
 801af4a:	d014      	beq.n	801af76 <MoblePalBluetoothGattSendNotification+0x7a>
 801af4c:	f105 0010 	add.w	r0, r5, #16
 801af50:	f7ff ff90 	bl	801ae74 <MobleMemAlloc>
 801af54:	4604      	mov	r4, r0
 801af56:	b180      	cbz	r0, 801af7a <MoblePalBluetoothGattSendNotification+0x7e>
 801af58:	f7ff ff20 	bl	801ad9c <MobleQIInit>
 801af5c:	462a      	mov	r2, r5
 801af5e:	f8a4 8008 	strh.w	r8, [r4, #8]
 801af62:	8167      	strh	r7, [r4, #10]
 801af64:	4631      	mov	r1, r6
 801af66:	f104 000d 	add.w	r0, r4, #13
 801af6a:	f00d fe0f 	bl	8028b8c <memmove>
 801af6e:	7325      	strb	r5, [r4, #12]
 801af70:	4620      	mov	r0, r4
 801af72:	f7ff ff27 	bl	801adc4 <MoblePalBluetoothPushNotification>
 801af76:	2001      	movs	r0, #1
 801af78:	e7cf      	b.n	801af1a <MoblePalBluetoothGattSendNotification+0x1e>
 801af7a:	2004      	movs	r0, #4
 801af7c:	e7cd      	b.n	801af1a <MoblePalBluetoothGattSendNotification+0x1e>
 801af7e:	bf00      	nop
 801af80:	20001410 	.word	0x20001410
 801af84:	20000008 	.word	0x20000008

0801af88 <MobleMemFree>:
 801af88:	b570      	push	{r4, r5, r6, lr}
 801af8a:	b388      	cbz	r0, 801aff0 <MobleMemFree+0x68>
 801af8c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801af90:	07da      	lsls	r2, r3, #31
 801af92:	d52d      	bpl.n	801aff0 <MobleMemFree+0x68>
 801af94:	4d17      	ldr	r5, [pc, #92]	; (801aff4 <MobleMemFree+0x6c>)
 801af96:	f023 0301 	bic.w	r3, r3, #1
 801af9a:	f840 3c04 	str.w	r3, [r0, #-4]
 801af9e:	f1a0 010c 	sub.w	r1, r0, #12
 801afa2:	f8d5 093c 	ldr.w	r0, [r5, #2364]	; 0x93c
 801afa6:	f7ff ff01 	bl	801adac <MobleQIInsertAfter>
 801afaa:	f8d5 393c 	ldr.w	r3, [r5, #2364]	; 0x93c
 801afae:	6819      	ldr	r1, [r3, #0]
 801afb0:	2000      	movs	r0, #0
 801afb2:	b1d1      	cbz	r1, 801afea <MobleMemFree+0x62>
 801afb4:	2800      	cmp	r0, #0
 801afb6:	d1f8      	bne.n	801afaa <MobleMemFree+0x22>
 801afb8:	680c      	ldr	r4, [r1, #0]
 801afba:	b104      	cbz	r4, 801afbe <MobleMemFree+0x36>
 801afbc:	b108      	cbz	r0, 801afc2 <MobleMemFree+0x3a>
 801afbe:	6809      	ldr	r1, [r1, #0]
 801afc0:	e7f7      	b.n	801afb2 <MobleMemFree+0x2a>
 801afc2:	688b      	ldr	r3, [r1, #8]
 801afc4:	68a2      	ldr	r2, [r4, #8]
 801afc6:	18ce      	adds	r6, r1, r3
 801afc8:	42b4      	cmp	r4, r6
 801afca:	d107      	bne.n	801afdc <MobleMemFree+0x54>
 801afcc:	4413      	add	r3, r2
 801afce:	608b      	str	r3, [r1, #8]
 801afd0:	4620      	mov	r0, r4
 801afd2:	f7ff ff07 	bl	801ade4 <MobleQIRemove>
 801afd6:	2001      	movs	r0, #1
 801afd8:	6824      	ldr	r4, [r4, #0]
 801afda:	e7ee      	b.n	801afba <MobleMemFree+0x32>
 801afdc:	18a6      	adds	r6, r4, r2
 801afde:	42b1      	cmp	r1, r6
 801afe0:	d1fa      	bne.n	801afd8 <MobleMemFree+0x50>
 801afe2:	4413      	add	r3, r2
 801afe4:	60a3      	str	r3, [r4, #8]
 801afe6:	4608      	mov	r0, r1
 801afe8:	e7f3      	b.n	801afd2 <MobleMemFree+0x4a>
 801afea:	2801      	cmp	r0, #1
 801afec:	d0dd      	beq.n	801afaa <MobleMemFree+0x22>
 801afee:	bd70      	pop	{r4, r5, r6, pc}
 801aff0:	2003      	movs	r0, #3
 801aff2:	e7fc      	b.n	801afee <MobleMemFree+0x66>
 801aff4:	20001410 	.word	0x20001410

0801aff8 <MoblePalBluetoothFreeAllNotifications>:
 801aff8:	b508      	push	{r3, lr}
 801affa:	f7ff ff01 	bl	801ae00 <MoblePalBluetoothPopNotification>
 801affe:	b900      	cbnz	r0, 801b002 <MoblePalBluetoothFreeAllNotifications+0xa>
 801b000:	bd08      	pop	{r3, pc}
 801b002:	f7ff ffc1 	bl	801af88 <MobleMemFree>
 801b006:	e7f8      	b.n	801affa <MoblePalBluetoothFreeAllNotifications+0x2>

0801b008 <MoblePalBluetoothProcessNotifications>:
 801b008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b00a:	4c0a      	ldr	r4, [pc, #40]	; (801b034 <MoblePalBluetoothProcessNotifications+0x2c>)
 801b00c:	2500      	movs	r5, #0
 801b00e:	f8d4 2938 	ldr.w	r2, [r4, #2360]	; 0x938
 801b012:	b90a      	cbnz	r2, 801b018 <MoblePalBluetoothProcessNotifications+0x10>
 801b014:	b003      	add	sp, #12
 801b016:	bd30      	pop	{r4, r5, pc}
 801b018:	7b13      	ldrb	r3, [r2, #12]
 801b01a:	8951      	ldrh	r1, [r2, #10]
 801b01c:	8910      	ldrh	r0, [r2, #8]
 801b01e:	9500      	str	r5, [sp, #0]
 801b020:	320d      	adds	r2, #13
 801b022:	f7ff ff6b 	bl	801aefc <MoblePalBluetoothGattSendNotification>
 801b026:	2800      	cmp	r0, #0
 801b028:	d1f4      	bne.n	801b014 <MoblePalBluetoothProcessNotifications+0xc>
 801b02a:	f7ff fee9 	bl	801ae00 <MoblePalBluetoothPopNotification>
 801b02e:	f7ff ffab 	bl	801af88 <MobleMemFree>
 801b032:	e7ec      	b.n	801b00e <MoblePalBluetoothProcessNotifications+0x6>
 801b034:	20001410 	.word	0x20001410

0801b038 <MoblePalBluetoothProcess>:
 801b038:	b513      	push	{r0, r1, r4, lr}
 801b03a:	4c19      	ldr	r4, [pc, #100]	; (801b0a0 <MoblePalBluetoothProcess+0x68>)
 801b03c:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 801b040:	075b      	lsls	r3, r3, #29
 801b042:	d525      	bpl.n	801b090 <MoblePalBluetoothProcess+0x58>
 801b044:	f7ec ff1a 	bl	8007e7c <HAL_GetTick>
 801b048:	f8d4 3948 	ldr.w	r3, [r4, #2376]	; 0x948
 801b04c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 801b050:	4283      	cmp	r3, r0
 801b052:	d20a      	bcs.n	801b06a <MoblePalBluetoothProcess+0x32>
 801b054:	f8c4 3948 	str.w	r3, [r4, #2376]	; 0x948
 801b058:	23c8      	movs	r3, #200	; 0xc8
 801b05a:	9300      	str	r3, [sp, #0]
 801b05c:	f8b4 0382 	ldrh.w	r0, [r4, #898]	; 0x382
 801b060:	2300      	movs	r3, #0
 801b062:	2278      	movs	r2, #120	; 0x78
 801b064:	2150      	movs	r1, #80	; 0x50
 801b066:	f7fa fc7b 	bl	8015960 <aci_l2cap_connection_parameter_update_req>
 801b06a:	f8d4 2350 	ldr.w	r2, [r4, #848]	; 0x350
 801b06e:	4b0d      	ldr	r3, [pc, #52]	; (801b0a4 <MoblePalBluetoothProcess+0x6c>)
 801b070:	429a      	cmp	r2, r3
 801b072:	d90d      	bls.n	801b090 <MoblePalBluetoothProcess+0x58>
 801b074:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 801b078:	f023 0304 	bic.w	r3, r3, #4
 801b07c:	f043 0308 	orr.w	r3, r3, #8
 801b080:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 801b084:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
 801b088:	b113      	cbz	r3, 801b090 <MoblePalBluetoothProcess+0x58>
 801b08a:	f8d4 036c 	ldr.w	r0, [r4, #876]	; 0x36c
 801b08e:	4798      	blx	r3
 801b090:	f7ff ffba 	bl	801b008 <MoblePalBluetoothProcessNotifications>
 801b094:	b002      	add	sp, #8
 801b096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b09a:	f7fd b867 	b.w	801816c <MoblePalBluetoothProcessDisconnection>
 801b09e:	bf00      	nop
 801b0a0:	20001410 	.word	0x20001410
 801b0a4:	00017317 	.word	0x00017317

0801b0a8 <MoblePalProcess>:
 801b0a8:	b508      	push	{r3, lr}
 801b0aa:	f7fc fead 	bl	8017e08 <MoblePalTimerProcess>
 801b0ae:	f7ff ffc3 	bl	801b038 <MoblePalBluetoothProcess>
 801b0b2:	f7ec fa61 	bl	8007578 <PalNvmProcess>
 801b0b6:	2000      	movs	r0, #0
 801b0b8:	bd08      	pop	{r3, pc}

0801b0ba <MobleModelBluemeshNewPacket_ExtCall>:
 801b0ba:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b0be:	4606      	mov	r6, r0
 801b0c0:	200c      	movs	r0, #12
 801b0c2:	460c      	mov	r4, r1
 801b0c4:	461f      	mov	r7, r3
 801b0c6:	f7ff fed5 	bl	801ae74 <MobleMemAlloc>
 801b0ca:	7007      	strb	r7, [r0, #0]
 801b0cc:	8923      	ldrh	r3, [r4, #8]
 801b0ce:	8083      	strh	r3, [r0, #4]
 801b0d0:	8963      	ldrh	r3, [r4, #10]
 801b0d2:	80c3      	strh	r3, [r0, #6]
 801b0d4:	78e3      	ldrb	r3, [r4, #3]
 801b0d6:	7203      	strb	r3, [r0, #8]
 801b0d8:	7da3      	ldrb	r3, [r4, #22]
 801b0da:	7243      	strb	r3, [r0, #9]
 801b0dc:	7c23      	ldrb	r3, [r4, #16]
 801b0de:	72c3      	strb	r3, [r0, #11]
 801b0e0:	7b23      	ldrb	r3, [r4, #12]
 801b0e2:	7283      	strb	r3, [r0, #10]
 801b0e4:	69e7      	ldr	r7, [r4, #28]
 801b0e6:	4605      	mov	r5, r0
 801b0e8:	2e00      	cmp	r6, #0
 801b0ea:	d037      	beq.n	801b15c <MobleModelBluemeshNewPacket_ExtCall+0xa2>
 801b0ec:	2f02      	cmp	r7, #2
 801b0ee:	d935      	bls.n	801b15c <MobleModelBluemeshNewPacket_ExtCall+0xa2>
 801b0f0:	a802      	add	r0, sp, #8
 801b0f2:	a903      	add	r1, sp, #12
 801b0f4:	f7eb ff68 	bl	8006fc8 <GetApplicationVendorModels>
 801b0f8:	e9dd c302 	ldrd	ip, r3, [sp, #8]
 801b0fc:	2200      	movs	r2, #0
 801b0fe:	4610      	mov	r0, r2
 801b100:	f04f 0e0c 	mov.w	lr, #12
 801b104:	4283      	cmp	r3, r0
 801b106:	fb0e c600 	mla	r6, lr, r0, ip
 801b10a:	d103      	bne.n	801b114 <MobleModelBluemeshNewPacket_ExtCall+0x5a>
 801b10c:	b102      	cbz	r2, 801b110 <MobleModelBluemeshNewPacket_ExtCall+0x56>
 801b10e:	9602      	str	r6, [sp, #8]
 801b110:	2402      	movs	r4, #2
 801b112:	e019      	b.n	801b148 <MobleModelBluemeshNewPacket_ExtCall+0x8e>
 801b114:	f894 1020 	ldrb.w	r1, [r4, #32]
 801b118:	f001 08c0 	and.w	r8, r1, #192	; 0xc0
 801b11c:	f1b8 0fc0 	cmp.w	r8, #192	; 0xc0
 801b120:	d119      	bne.n	801b156 <MobleModelBluemeshNewPacket_ExtCall+0x9c>
 801b122:	f8b4 8021 	ldrh.w	r8, [r4, #33]	; 0x21
 801b126:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 801b12a:	d114      	bne.n	801b156 <MobleModelBluemeshNewPacket_ExtCall+0x9c>
 801b12c:	b102      	cbz	r2, 801b130 <MobleModelBluemeshNewPacket_ExtCall+0x76>
 801b12e:	9602      	str	r6, [sp, #8]
 801b130:	2300      	movs	r3, #0
 801b132:	9300      	str	r3, [sp, #0]
 801b134:	9b02      	ldr	r3, [sp, #8]
 801b136:	f104 0223 	add.w	r2, r4, #35	; 0x23
 801b13a:	689e      	ldr	r6, [r3, #8]
 801b13c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801b140:	1efb      	subs	r3, r7, #3
 801b142:	4628      	mov	r0, r5
 801b144:	47b0      	blx	r6
 801b146:	4604      	mov	r4, r0
 801b148:	4628      	mov	r0, r5
 801b14a:	f7ff ff1d 	bl	801af88 <MobleMemFree>
 801b14e:	4620      	mov	r0, r4
 801b150:	b004      	add	sp, #16
 801b152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b156:	3001      	adds	r0, #1
 801b158:	2201      	movs	r2, #1
 801b15a:	e7d3      	b.n	801b104 <MobleModelBluemeshNewPacket_ExtCall+0x4a>
 801b15c:	2403      	movs	r4, #3
 801b15e:	e7f6      	b.n	801b14e <MobleModelBluemeshNewPacket_ExtCall+0x94>

0801b160 <mem_alloc_init>:
 801b160:	6a03      	ldr	r3, [r0, #32]
 801b162:	4a0e      	ldr	r2, [pc, #56]	; (801b19c <mem_alloc_init+0x3c>)
 801b164:	6819      	ldr	r1, [r3, #0]
 801b166:	f8c2 1940 	str.w	r1, [r2, #2368]	; 0x940
 801b16a:	8899      	ldrh	r1, [r3, #4]
 801b16c:	f8a2 1944 	strh.w	r1, [r2, #2372]	; 0x944
 801b170:	8919      	ldrh	r1, [r3, #8]
 801b172:	230c      	movs	r3, #12
 801b174:	fbb1 f1f3 	udiv	r1, r1, r3
 801b178:	1c4b      	adds	r3, r1, #1
 801b17a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b17e:	009b      	lsls	r3, r3, #2
 801b180:	b29b      	uxth	r3, r3
 801b182:	1f18      	subs	r0, r3, #4
 801b184:	f8a2 394c 	strh.w	r3, [r2, #2380]	; 0x94c
 801b188:	3102      	adds	r1, #2
 801b18a:	3b05      	subs	r3, #5
 801b18c:	f8a2 094e 	strh.w	r0, [r2, #2382]	; 0x94e
 801b190:	f8a2 3950 	strh.w	r3, [r2, #2384]	; 0x950
 801b194:	f882 12dc 	strb.w	r1, [r2, #732]	; 0x2dc
 801b198:	4770      	bx	lr
 801b19a:	bf00      	nop
 801b19c:	20001410 	.word	0x20001410

0801b1a0 <MobleInputStreamGetBigEndian>:
 801b1a0:	4603      	mov	r3, r0
 801b1a2:	2000      	movs	r0, #0
 801b1a4:	b530      	push	{r4, r5, lr}
 801b1a6:	6010      	str	r0, [r2, #0]
 801b1a8:	185d      	adds	r5, r3, r1
 801b1aa:	42ab      	cmp	r3, r5
 801b1ac:	d101      	bne.n	801b1b2 <MobleInputStreamGetBigEndian+0x12>
 801b1ae:	4608      	mov	r0, r1
 801b1b0:	bd30      	pop	{r4, r5, pc}
 801b1b2:	6810      	ldr	r0, [r2, #0]
 801b1b4:	0200      	lsls	r0, r0, #8
 801b1b6:	6010      	str	r0, [r2, #0]
 801b1b8:	f813 4b01 	ldrb.w	r4, [r3], #1
 801b1bc:	4320      	orrs	r0, r4
 801b1be:	6010      	str	r0, [r2, #0]
 801b1c0:	e7f3      	b.n	801b1aa <MobleInputStreamGetBigEndian+0xa>

0801b1c2 <MobleInputStreamGetLittleEndian>:
 801b1c2:	b510      	push	{r4, lr}
 801b1c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b1c8:	00cc      	lsls	r4, r1, #3
 801b1ca:	fa03 f404 	lsl.w	r4, r3, r4
 801b1ce:	6803      	ldr	r3, [r0, #0]
 801b1d0:	ea23 0304 	bic.w	r3, r3, r4
 801b1d4:	6013      	str	r3, [r2, #0]
 801b1d6:	4608      	mov	r0, r1
 801b1d8:	bd10      	pop	{r4, pc}

0801b1da <MobleOutputStreamPutArray>:
 801b1da:	b538      	push	{r3, r4, r5, lr}
 801b1dc:	4614      	mov	r4, r2
 801b1de:	b128      	cbz	r0, 801b1ec <MobleOutputStreamPutArray+0x12>
 801b1e0:	b131      	cbz	r1, 801b1f0 <MobleOutputStreamPutArray+0x16>
 801b1e2:	b10a      	cbz	r2, 801b1e8 <MobleOutputStreamPutArray+0xe>
 801b1e4:	f00d fcd2 	bl	8028b8c <memmove>
 801b1e8:	4620      	mov	r0, r4
 801b1ea:	bd38      	pop	{r3, r4, r5, pc}
 801b1ec:	4604      	mov	r4, r0
 801b1ee:	e7fb      	b.n	801b1e8 <MobleOutputStreamPutArray+0xe>
 801b1f0:	460c      	mov	r4, r1
 801b1f2:	e7f9      	b.n	801b1e8 <MobleOutputStreamPutArray+0xe>

0801b1f4 <MobleOutputStreamPutBigEndian>:
 801b1f4:	4402      	add	r2, r0
 801b1f6:	4282      	cmp	r2, r0
 801b1f8:	d101      	bne.n	801b1fe <MobleOutputStreamPutBigEndian+0xa>
 801b1fa:	2000      	movs	r0, #0
 801b1fc:	4770      	bx	lr
 801b1fe:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801b202:	0a09      	lsrs	r1, r1, #8
 801b204:	e7f7      	b.n	801b1f6 <MobleOutputStreamPutBigEndian+0x2>
	...

0801b208 <MoblePalCryptoEncryptNetwork>:
 801b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b20c:	b0a3      	sub	sp, #140	; 0x8c
 801b20e:	4605      	mov	r5, r0
 801b210:	f89d 60b0 	ldrb.w	r6, [sp, #176]	; 0xb0
 801b214:	4692      	mov	sl, r2
 801b216:	461f      	mov	r7, r3
 801b218:	4689      	mov	r9, r1
 801b21a:	b931      	cbnz	r1, 801b22a <MoblePalCryptoEncryptNetwork+0x22>
 801b21c:	4ba2      	ldr	r3, [pc, #648]	; (801b4a8 <MoblePalCryptoEncryptNetwork+0x2a0>)
 801b21e:	4aa3      	ldr	r2, [pc, #652]	; (801b4ac <MoblePalCryptoEncryptNetwork+0x2a4>)
 801b220:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 801b224:	48a2      	ldr	r0, [pc, #648]	; (801b4b0 <MoblePalCryptoEncryptNetwork+0x2a8>)
 801b226:	f00d fc39 	bl	8028a9c <__assert_func>
 801b22a:	b920      	cbnz	r0, 801b236 <MoblePalCryptoEncryptNetwork+0x2e>
 801b22c:	4ba1      	ldr	r3, [pc, #644]	; (801b4b4 <MoblePalCryptoEncryptNetwork+0x2ac>)
 801b22e:	4a9f      	ldr	r2, [pc, #636]	; (801b4ac <MoblePalCryptoEncryptNetwork+0x2a4>)
 801b230:	f240 51c1 	movw	r1, #1473	; 0x5c1
 801b234:	e7f6      	b.n	801b224 <MoblePalCryptoEncryptNetwork+0x1c>
 801b236:	2b10      	cmp	r3, #16
 801b238:	d904      	bls.n	801b244 <MoblePalCryptoEncryptNetwork+0x3c>
 801b23a:	4b9f      	ldr	r3, [pc, #636]	; (801b4b8 <MoblePalCryptoEncryptNetwork+0x2b0>)
 801b23c:	4a9b      	ldr	r2, [pc, #620]	; (801b4ac <MoblePalCryptoEncryptNetwork+0x2a4>)
 801b23e:	f240 51c2 	movw	r1, #1474	; 0x5c2
 801b242:	e7ef      	b.n	801b224 <MoblePalCryptoEncryptNetwork+0x1c>
 801b244:	4a9d      	ldr	r2, [pc, #628]	; (801b4bc <MoblePalCryptoEncryptNetwork+0x2b4>)
 801b246:	2300      	movs	r3, #0
 801b248:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 801b24c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801b250:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801b254:	930c      	str	r3, [sp, #48]	; 0x30
 801b256:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801b25a:	f892 365c 	ldrb.w	r3, [r2, #1628]	; 0x65c
 801b25e:	f8d2 8658 	ldr.w	r8, [r2, #1624]	; 0x658
 801b262:	2b01      	cmp	r3, #1
 801b264:	d108      	bne.n	801b278 <MoblePalCryptoEncryptNetwork+0x70>
 801b266:	f1b8 0f00 	cmp.w	r8, #0
 801b26a:	d103      	bne.n	801b274 <MoblePalCryptoEncryptNetwork+0x6c>
 801b26c:	2002      	movs	r0, #2
 801b26e:	b023      	add	sp, #140	; 0x8c
 801b270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b274:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801b278:	8b6c      	ldrh	r4, [r5, #26]
 801b27a:	f014 0420 	ands.w	r4, r4, #32
 801b27e:	f000 80bb 	beq.w	801b3f8 <MoblePalCryptoEncryptNetwork+0x1f0>
 801b282:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 801b286:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b28a:	f8d3 1630 	ldr.w	r1, [r3, #1584]	; 0x630
 801b28e:	2900      	cmp	r1, #0
 801b290:	d0ec      	beq.n	801b26c <MoblePalCryptoEncryptNetwork+0x64>
 801b292:	f891 4042 	ldrb.w	r4, [r1, #66]	; 0x42
 801b296:	237c      	movs	r3, #124	; 0x7c
 801b298:	fb03 2404 	mla	r4, r3, r4, r2
 801b29c:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
 801b2a0:	2b01      	cmp	r3, #1
 801b2a2:	d003      	beq.n	801b2ac <MoblePalCryptoEncryptNetwork+0xa4>
 801b2a4:	f894 3446 	ldrb.w	r3, [r4, #1094]	; 0x446
 801b2a8:	2b01      	cmp	r3, #1
 801b2aa:	d1df      	bne.n	801b26c <MoblePalCryptoEncryptNetwork+0x64>
 801b2ac:	2e00      	cmp	r6, #0
 801b2ae:	f040 809c 	bne.w	801b3ea <MoblePalCryptoEncryptNetwork+0x1e2>
 801b2b2:	f891 4040 	ldrb.w	r4, [r1, #64]	; 0x40
 801b2b6:	f101 0620 	add.w	r6, r1, #32
 801b2ba:	468b      	mov	fp, r1
 801b2bc:	8ae9      	ldrh	r1, [r5, #22]
 801b2be:	2202      	movs	r2, #2
 801b2c0:	a816      	add	r0, sp, #88	; 0x58
 801b2c2:	f7ff ff97 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801b2c6:	463a      	mov	r2, r7
 801b2c8:	4651      	mov	r1, sl
 801b2ca:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
 801b2ce:	f7ff ff84 	bl	801b1da <MobleOutputStreamPutArray>
 801b2d2:	7baa      	ldrb	r2, [r5, #14]
 801b2d4:	7be9      	ldrb	r1, [r5, #15]
 801b2d6:	2a00      	cmp	r2, #0
 801b2d8:	bf18      	it	ne
 801b2da:	2280      	movne	r2, #128	; 0x80
 801b2dc:	430a      	orrs	r2, r1
 801b2de:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 801b2e2:	8b6a      	ldrh	r2, [r5, #26]
 801b2e4:	6929      	ldr	r1, [r5, #16]
 801b2e6:	0613      	lsls	r3, r2, #24
 801b2e8:	bf41      	itttt	mi
 801b2ea:	2203      	movmi	r2, #3
 801b2ec:	f88d 2028 	strbmi.w	r2, [sp, #40]	; 0x28
 801b2f0:	2200      	movmi	r2, #0
 801b2f2:	f88d 2029 	strbmi.w	r2, [sp, #41]	; 0x29
 801b2f6:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 801b2fa:	2203      	movs	r2, #3
 801b2fc:	f7ff ff7a 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801b300:	8aa9      	ldrh	r1, [r5, #20]
 801b302:	2202      	movs	r2, #2
 801b304:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 801b308:	f7ff ff74 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801b30c:	2204      	movs	r2, #4
 801b30e:	4641      	mov	r1, r8
 801b310:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 801b314:	f7ff ff6e 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801b318:	7baa      	ldrb	r2, [r5, #14]
 801b31a:	2a00      	cmp	r2, #0
 801b31c:	f04f 020d 	mov.w	r2, #13
 801b320:	f107 0a02 	add.w	sl, r7, #2
 801b324:	ab16      	add	r3, sp, #88	; 0x58
 801b326:	9201      	str	r2, [sp, #4]
 801b328:	f04f 0700 	mov.w	r7, #0
 801b32c:	aa0a      	add	r2, sp, #40	; 0x28
 801b32e:	9200      	str	r2, [sp, #0]
 801b330:	9302      	str	r3, [sp, #8]
 801b332:	bf14      	ite	ne
 801b334:	2208      	movne	r2, #8
 801b336:	2204      	moveq	r2, #4
 801b338:	e9cd 7704 	strd	r7, r7, [sp, #16]
 801b33c:	f8cd a00c 	str.w	sl, [sp, #12]
 801b340:	465b      	mov	r3, fp
 801b342:	a908      	add	r1, sp, #32
 801b344:	a81b      	add	r0, sp, #108	; 0x6c
 801b346:	f7fe faeb 	bl	8019920 <MoblePalCryptoAesCcmEncrypt>
 801b34a:	2801      	cmp	r0, #1
 801b34c:	d88e      	bhi.n	801b26c <MoblePalCryptoEncryptNetwork+0x64>
 801b34e:	7bab      	ldrb	r3, [r5, #14]
 801b350:	42bb      	cmp	r3, r7
 801b352:	ab1b      	add	r3, sp, #108	; 0x6c
 801b354:	bf14      	ite	ne
 801b356:	2208      	movne	r2, #8
 801b358:	2204      	moveq	r2, #4
 801b35a:	a908      	add	r1, sp, #32
 801b35c:	eb03 000a 	add.w	r0, r3, sl
 801b360:	f00d fc06 	bl	8028b70 <memcpy>
 801b364:	2204      	movs	r2, #4
 801b366:	4641      	mov	r1, r8
 801b368:	f10d 003d 	add.w	r0, sp, #61	; 0x3d
 801b36c:	f7ff ff42 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801b370:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801b372:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 801b376:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 801b37a:	f8cd 0041 	str.w	r0, [sp, #65]	; 0x41
 801b37e:	f8ad 2045 	strh.w	r2, [sp, #69]	; 0x45
 801b382:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 801b386:	aa0e      	add	r2, sp, #56	; 0x38
 801b388:	2310      	movs	r3, #16
 801b38a:	4631      	mov	r1, r6
 801b38c:	a812      	add	r0, sp, #72	; 0x48
 801b38e:	f7fe faf3 	bl	8019978 <MoblePalCryptoAesEcb>
 801b392:	7baa      	ldrb	r2, [r5, #14]
 801b394:	7beb      	ldrb	r3, [r5, #15]
 801b396:	6929      	ldr	r1, [r5, #16]
 801b398:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801b39c:	f10d 0019 	add.w	r0, sp, #25
 801b3a0:	2203      	movs	r2, #3
 801b3a2:	f88d 3018 	strb.w	r3, [sp, #24]
 801b3a6:	f7ff ff25 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801b3aa:	8aa9      	ldrh	r1, [r5, #20]
 801b3ac:	2202      	movs	r2, #2
 801b3ae:	a807      	add	r0, sp, #28
 801b3b0:	f7ff ff20 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801b3b4:	2206      	movs	r2, #6
 801b3b6:	a912      	add	r1, sp, #72	; 0x48
 801b3b8:	a806      	add	r0, sp, #24
 801b3ba:	f7fe faee 	bl	801999a <MoblePalCryptoXor>
 801b3be:	4648      	mov	r0, r9
 801b3c0:	ea44 14c8 	orr.w	r4, r4, r8, lsl #7
 801b3c4:	2206      	movs	r2, #6
 801b3c6:	a906      	add	r1, sp, #24
 801b3c8:	f800 4b01 	strb.w	r4, [r0], #1
 801b3cc:	f7ff ff05 	bl	801b1da <MobleOutputStreamPutArray>
 801b3d0:	7bab      	ldrb	r3, [r5, #14]
 801b3d2:	42bb      	cmp	r3, r7
 801b3d4:	bf14      	ite	ne
 801b3d6:	2208      	movne	r2, #8
 801b3d8:	2204      	moveq	r2, #4
 801b3da:	4452      	add	r2, sl
 801b3dc:	a91b      	add	r1, sp, #108	; 0x6c
 801b3de:	f109 0007 	add.w	r0, r9, #7
 801b3e2:	f7ff fefa 	bl	801b1da <MobleOutputStreamPutArray>
 801b3e6:	4638      	mov	r0, r7
 801b3e8:	e741      	b.n	801b26e <MoblePalCryptoEncryptNetwork+0x66>
 801b3ea:	f891 4041 	ldrb.w	r4, [r1, #65]	; 0x41
 801b3ee:	f101 0630 	add.w	r6, r1, #48	; 0x30
 801b3f2:	f101 0b10 	add.w	fp, r1, #16
 801b3f6:	e761      	b.n	801b2bc <MoblePalCryptoEncryptNetwork+0xb4>
 801b3f8:	7f28      	ldrb	r0, [r5, #28]
 801b3fa:	237c      	movs	r3, #124	; 0x7c
 801b3fc:	fb03 2300 	mla	r3, r3, r0, r2
 801b400:	f893 1445 	ldrb.w	r1, [r3, #1093]	; 0x445
 801b404:	2901      	cmp	r1, #1
 801b406:	d003      	beq.n	801b410 <MoblePalCryptoEncryptNetwork+0x208>
 801b408:	f893 3446 	ldrb.w	r3, [r3, #1094]	; 0x446
 801b40c:	2b01      	cmp	r3, #1
 801b40e:	d11c      	bne.n	801b44a <MoblePalCryptoEncryptNetwork+0x242>
 801b410:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 801b414:	4b2a      	ldr	r3, [pc, #168]	; (801b4c0 <MoblePalCryptoEncryptNetwork+0x2b8>)
 801b416:	0089      	lsls	r1, r1, #2
 801b418:	b95e      	cbnz	r6, 801b432 <MoblePalCryptoEncryptNetwork+0x22a>
 801b41a:	f101 065c 	add.w	r6, r1, #92	; 0x5c
 801b41e:	247c      	movs	r4, #124	; 0x7c
 801b420:	313c      	adds	r1, #60	; 0x3c
 801b422:	441e      	add	r6, r3
 801b424:	eb03 0b01 	add.w	fp, r3, r1
 801b428:	fb04 2400 	mla	r4, r4, r0, r2
 801b42c:	f894 445c 	ldrb.w	r4, [r4, #1116]	; 0x45c
 801b430:	e744      	b.n	801b2bc <MoblePalCryptoEncryptNetwork+0xb4>
 801b432:	f101 066c 	add.w	r6, r1, #108	; 0x6c
 801b436:	247c      	movs	r4, #124	; 0x7c
 801b438:	314c      	adds	r1, #76	; 0x4c
 801b43a:	441e      	add	r6, r3
 801b43c:	eb03 0b01 	add.w	fp, r3, r1
 801b440:	fb04 2400 	mla	r4, r4, r0, r2
 801b444:	f894 445d 	ldrb.w	r4, [r4, #1117]	; 0x45d
 801b448:	e738      	b.n	801b2bc <MoblePalCryptoEncryptNetwork+0xb4>
 801b44a:	f892 361c 	ldrb.w	r3, [r2, #1564]	; 0x61c
 801b44e:	2b00      	cmp	r3, #0
 801b450:	f43f af0c 	beq.w	801b26c <MoblePalCryptoEncryptNetwork+0x64>
 801b454:	491a      	ldr	r1, [pc, #104]	; (801b4c0 <MoblePalCryptoEncryptNetwork+0x2b8>)
 801b456:	460b      	mov	r3, r1
 801b458:	f891 0021 	ldrb.w	r0, [r1, #33]	; 0x21
 801b45c:	2801      	cmp	r0, #1
 801b45e:	d10a      	bne.n	801b476 <MoblePalCryptoEncryptNetwork+0x26e>
 801b460:	217c      	movs	r1, #124	; 0x7c
 801b462:	434c      	muls	r4, r1
 801b464:	f104 065c 	add.w	r6, r4, #92	; 0x5c
 801b468:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801b46c:	441e      	add	r6, r3
 801b46e:	eb03 0b01 	add.w	fp, r3, r1
 801b472:	4414      	add	r4, r2
 801b474:	e7da      	b.n	801b42c <MoblePalCryptoEncryptNetwork+0x224>
 801b476:	f891 0022 	ldrb.w	r0, [r1, #34]	; 0x22
 801b47a:	2801      	cmp	r0, #1
 801b47c:	d10a      	bne.n	801b494 <MoblePalCryptoEncryptNetwork+0x28c>
 801b47e:	217c      	movs	r1, #124	; 0x7c
 801b480:	434c      	muls	r4, r1
 801b482:	f104 066c 	add.w	r6, r4, #108	; 0x6c
 801b486:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 801b48a:	441e      	add	r6, r3
 801b48c:	eb03 0b01 	add.w	fp, r3, r1
 801b490:	4414      	add	r4, r2
 801b492:	e7d7      	b.n	801b444 <MoblePalCryptoEncryptNetwork+0x23c>
 801b494:	3401      	adds	r4, #1
 801b496:	2c03      	cmp	r4, #3
 801b498:	f101 017c 	add.w	r1, r1, #124	; 0x7c
 801b49c:	d1dc      	bne.n	801b458 <MoblePalCryptoEncryptNetwork+0x250>
 801b49e:	2400      	movs	r4, #0
 801b4a0:	46a3      	mov	fp, r4
 801b4a2:	4626      	mov	r6, r4
 801b4a4:	e70a      	b.n	801b2bc <MoblePalCryptoEncryptNetwork+0xb4>
 801b4a6:	bf00      	nop
 801b4a8:	080335ce 	.word	0x080335ce
 801b4ac:	0803165f 	.word	0x0803165f
 801b4b0:	08033563 	.word	0x08033563
 801b4b4:	080335d5 	.word	0x080335d5
 801b4b8:	080335df 	.word	0x080335df
 801b4bc:	20001410 	.word	0x20001410
 801b4c0:	20001834 	.word	0x20001834

0801b4c4 <MoblePalCryptoPrepHeaderAndNonceNetwork>:
 801b4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4c8:	4689      	mov	r9, r1
 801b4ca:	b08d      	sub	sp, #52	; 0x34
 801b4cc:	4615      	mov	r5, r2
 801b4ce:	461f      	mov	r7, r3
 801b4d0:	4604      	mov	r4, r0
 801b4d2:	b930      	cbnz	r0, 801b4e2 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x1e>
 801b4d4:	4b52      	ldr	r3, [pc, #328]	; (801b620 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x15c>)
 801b4d6:	4a53      	ldr	r2, [pc, #332]	; (801b624 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801b4d8:	f240 61a4 	movw	r1, #1700	; 0x6a4
 801b4dc:	4852      	ldr	r0, [pc, #328]	; (801b628 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x164>)
 801b4de:	f00d fadd 	bl	8028a9c <__assert_func>
 801b4e2:	b922      	cbnz	r2, 801b4ee <MoblePalCryptoPrepHeaderAndNonceNetwork+0x2a>
 801b4e4:	4b51      	ldr	r3, [pc, #324]	; (801b62c <MoblePalCryptoPrepHeaderAndNonceNetwork+0x168>)
 801b4e6:	4a4f      	ldr	r2, [pc, #316]	; (801b624 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801b4e8:	f240 61a5 	movw	r1, #1701	; 0x6a5
 801b4ec:	e7f6      	b.n	801b4dc <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 801b4ee:	b923      	cbnz	r3, 801b4fa <MoblePalCryptoPrepHeaderAndNonceNetwork+0x36>
 801b4f0:	4b4f      	ldr	r3, [pc, #316]	; (801b630 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x16c>)
 801b4f2:	4a4c      	ldr	r2, [pc, #304]	; (801b624 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801b4f4:	f240 61a6 	movw	r1, #1702	; 0x6a6
 801b4f8:	e7f0      	b.n	801b4dc <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 801b4fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b4fc:	b923      	cbnz	r3, 801b508 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x44>
 801b4fe:	4b4d      	ldr	r3, [pc, #308]	; (801b634 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x170>)
 801b500:	4a48      	ldr	r2, [pc, #288]	; (801b624 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801b502:	f240 61a7 	movw	r1, #1703	; 0x6a7
 801b506:	e7e9      	b.n	801b4dc <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 801b508:	b921      	cbnz	r1, 801b514 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x50>
 801b50a:	4b4b      	ldr	r3, [pc, #300]	; (801b638 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x174>)
 801b50c:	4a45      	ldr	r2, [pc, #276]	; (801b624 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801b50e:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 801b512:	e7e3      	b.n	801b4dc <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 801b514:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b518:	4b48      	ldr	r3, [pc, #288]	; (801b63c <MoblePalCryptoPrepHeaderAndNonceNetwork+0x178>)
 801b51a:	f100 0a0c 	add.w	sl, r0, #12
 801b51e:	f8d3 6658 	ldr.w	r6, [r3, #1624]	; 0x658
 801b522:	4651      	mov	r1, sl
 801b524:	4640      	mov	r0, r8
 801b526:	f7fe fb73 	bl	8019c10 <MoblePalCryptoParseNetHdr>
 801b52a:	7b22      	ldrb	r2, [r4, #12]
 801b52c:	f006 0301 	and.w	r3, r6, #1
 801b530:	429a      	cmp	r2, r3
 801b532:	f108 0b07 	add.w	fp, r8, #7
 801b536:	d002      	beq.n	801b53e <MoblePalCryptoPrepHeaderAndNonceNetwork+0x7a>
 801b538:	2e00      	cmp	r6, #0
 801b53a:	d06e      	beq.n	801b61a <MoblePalCryptoPrepHeaderAndNonceNetwork+0x156>
 801b53c:	3e01      	subs	r6, #1
 801b53e:	2300      	movs	r3, #0
 801b540:	2204      	movs	r2, #4
 801b542:	4631      	mov	r1, r6
 801b544:	f10d 0015 	add.w	r0, sp, #21
 801b548:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801b54c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801b550:	f7ff fe50 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801b554:	2207      	movs	r2, #7
 801b556:	4659      	mov	r1, fp
 801b558:	f10d 0019 	add.w	r0, sp, #25
 801b55c:	f7ff fe3d 	bl	801b1da <MobleOutputStreamPutArray>
 801b560:	2310      	movs	r3, #16
 801b562:	eb0d 0203 	add.w	r2, sp, r3
 801b566:	4649      	mov	r1, r9
 801b568:	a808      	add	r0, sp, #32
 801b56a:	f7fe fa05 	bl	8019978 <MoblePalCryptoAesEcb>
 801b56e:	f8d8 0000 	ldr.w	r0, [r8]
 801b572:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b576:	ab01      	add	r3, sp, #4
 801b578:	c303      	stmia	r3!, {r0, r1}
 801b57a:	f898 2008 	ldrb.w	r2, [r8, #8]
 801b57e:	701a      	strb	r2, [r3, #0]
 801b580:	a908      	add	r1, sp, #32
 801b582:	2206      	movs	r2, #6
 801b584:	f10d 0005 	add.w	r0, sp, #5
 801b588:	f7fe fa07 	bl	801999a <MoblePalCryptoXor>
 801b58c:	4651      	mov	r1, sl
 801b58e:	a801      	add	r0, sp, #4
 801b590:	f7fe fb3e 	bl	8019c10 <MoblePalCryptoParseNetHdr>
 801b594:	7ba3      	ldrb	r3, [r4, #14]
 801b596:	2b01      	cmp	r3, #1
 801b598:	d138      	bne.n	801b60c <MoblePalCryptoPrepHeaderAndNonceNetwork+0x148>
 801b59a:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 801b59e:	f043 0308 	orr.w	r3, r3, #8
 801b5a2:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801b5a6:	f04f 0a08 	mov.w	sl, #8
 801b5aa:	f04f 0900 	mov.w	r9, #0
 801b5ae:	f8c7 9000 	str.w	r9, [r7]
 801b5b2:	f8c7 9004 	str.w	r9, [r7, #4]
 801b5b6:	7a21      	ldrb	r1, [r4, #8]
 801b5b8:	eba1 010a 	sub.w	r1, r1, sl
 801b5bc:	4652      	mov	r2, sl
 801b5be:	4441      	add	r1, r8
 801b5c0:	4638      	mov	r0, r7
 801b5c2:	f00d fae3 	bl	8028b8c <memmove>
 801b5c6:	7a23      	ldrb	r3, [r4, #8]
 801b5c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b5ca:	3b07      	subs	r3, #7
 801b5cc:	eba3 030a 	sub.w	r3, r3, sl
 801b5d0:	6013      	str	r3, [r2, #0]
 801b5d2:	4649      	mov	r1, r9
 801b5d4:	220d      	movs	r2, #13
 801b5d6:	4628      	mov	r0, r5
 801b5d8:	f00d faf2 	bl	8028bc0 <memset>
 801b5dc:	2206      	movs	r2, #6
 801b5de:	f10d 0105 	add.w	r1, sp, #5
 801b5e2:	1c68      	adds	r0, r5, #1
 801b5e4:	f7ff fdf9 	bl	801b1da <MobleOutputStreamPutArray>
 801b5e8:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 801b5ec:	061b      	lsls	r3, r3, #24
 801b5ee:	bf42      	ittt	mi
 801b5f0:	2303      	movmi	r3, #3
 801b5f2:	702b      	strbmi	r3, [r5, #0]
 801b5f4:	f885 9001 	strbmi.w	r9, [r5, #1]
 801b5f8:	2204      	movs	r2, #4
 801b5fa:	4631      	mov	r1, r6
 801b5fc:	f105 0009 	add.w	r0, r5, #9
 801b600:	f7ff fdf8 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801b604:	2000      	movs	r0, #0
 801b606:	b00d      	add	sp, #52	; 0x34
 801b608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	bf14      	ite	ne
 801b610:	f04f 0a08 	movne.w	sl, #8
 801b614:	f04f 0a04 	moveq.w	sl, #4
 801b618:	e7c7      	b.n	801b5aa <MoblePalCryptoPrepHeaderAndNonceNetwork+0xe6>
 801b61a:	2002      	movs	r0, #2
 801b61c:	e7f3      	b.n	801b606 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x142>
 801b61e:	bf00      	nop
 801b620:	080335d5 	.word	0x080335d5
 801b624:	0803167c 	.word	0x0803167c
 801b628:	08033563 	.word	0x08033563
 801b62c:	0803360d 	.word	0x0803360d
 801b630:	08033613 	.word	0x08033613
 801b634:	08033617 	.word	0x08033617
 801b638:	0803362a 	.word	0x0803362a
 801b63c:	20001410 	.word	0x20001410

0801b640 <MoblePalCryptoDecryptNetworkEx>:
 801b640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b644:	460e      	mov	r6, r1
 801b646:	b093      	sub	sp, #76	; 0x4c
 801b648:	4611      	mov	r1, r2
 801b64a:	461f      	mov	r7, r3
 801b64c:	4605      	mov	r5, r0
 801b64e:	b930      	cbnz	r0, 801b65e <MoblePalCryptoDecryptNetworkEx+0x1e>
 801b650:	4b2c      	ldr	r3, [pc, #176]	; (801b704 <MoblePalCryptoDecryptNetworkEx+0xc4>)
 801b652:	4a2d      	ldr	r2, [pc, #180]	; (801b708 <MoblePalCryptoDecryptNetworkEx+0xc8>)
 801b654:	f240 7102 	movw	r1, #1794	; 0x702
 801b658:	482c      	ldr	r0, [pc, #176]	; (801b70c <MoblePalCryptoDecryptNetworkEx+0xcc>)
 801b65a:	f00d fa1f 	bl	8028a9c <__assert_func>
 801b65e:	b926      	cbnz	r6, 801b66a <MoblePalCryptoDecryptNetworkEx+0x2a>
 801b660:	4b2b      	ldr	r3, [pc, #172]	; (801b710 <MoblePalCryptoDecryptNetworkEx+0xd0>)
 801b662:	4a29      	ldr	r2, [pc, #164]	; (801b708 <MoblePalCryptoDecryptNetworkEx+0xc8>)
 801b664:	f240 7103 	movw	r1, #1795	; 0x703
 801b668:	e7f6      	b.n	801b658 <MoblePalCryptoDecryptNetworkEx+0x18>
 801b66a:	b922      	cbnz	r2, 801b676 <MoblePalCryptoDecryptNetworkEx+0x36>
 801b66c:	4b29      	ldr	r3, [pc, #164]	; (801b714 <MoblePalCryptoDecryptNetworkEx+0xd4>)
 801b66e:	4a26      	ldr	r2, [pc, #152]	; (801b708 <MoblePalCryptoDecryptNetworkEx+0xc8>)
 801b670:	f240 7104 	movw	r1, #1796	; 0x704
 801b674:	e7f0      	b.n	801b658 <MoblePalCryptoDecryptNetworkEx+0x18>
 801b676:	b923      	cbnz	r3, 801b682 <MoblePalCryptoDecryptNetworkEx+0x42>
 801b678:	4b27      	ldr	r3, [pc, #156]	; (801b718 <MoblePalCryptoDecryptNetworkEx+0xd8>)
 801b67a:	4a23      	ldr	r2, [pc, #140]	; (801b708 <MoblePalCryptoDecryptNetworkEx+0xc8>)
 801b67c:	f240 7105 	movw	r1, #1797	; 0x705
 801b680:	e7ea      	b.n	801b658 <MoblePalCryptoDecryptNetworkEx+0x18>
 801b682:	7a03      	ldrb	r3, [r0, #8]
 801b684:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b688:	3b0e      	subs	r3, #14
 801b68a:	2400      	movs	r4, #0
 801b68c:	2b0f      	cmp	r3, #15
 801b68e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 801b692:	e9cd 4407 	strd	r4, r4, [sp, #28]
 801b696:	940b      	str	r4, [sp, #44]	; 0x2c
 801b698:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
 801b69c:	9406      	str	r4, [sp, #24]
 801b69e:	d82d      	bhi.n	801b6fc <MoblePalCryptoDecryptNetworkEx+0xbc>
 801b6a0:	f10d 091c 	add.w	r9, sp, #28
 801b6a4:	ab06      	add	r3, sp, #24
 801b6a6:	9300      	str	r3, [sp, #0]
 801b6a8:	aa09      	add	r2, sp, #36	; 0x24
 801b6aa:	464b      	mov	r3, r9
 801b6ac:	f7ff ff0a 	bl	801b4c4 <MoblePalCryptoPrepHeaderAndNonceNetwork>
 801b6b0:	7bab      	ldrb	r3, [r5, #14]
 801b6b2:	9a06      	ldr	r2, [sp, #24]
 801b6b4:	9203      	str	r2, [sp, #12]
 801b6b6:	42a3      	cmp	r3, r4
 801b6b8:	bf14      	ite	ne
 801b6ba:	2308      	movne	r3, #8
 801b6bc:	2304      	moveq	r3, #4
 801b6be:	f108 0207 	add.w	r2, r8, #7
 801b6c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801b6c6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 801b6ca:	f8cd 9000 	str.w	r9, [sp]
 801b6ce:	230d      	movs	r3, #13
 801b6d0:	aa09      	add	r2, sp, #36	; 0x24
 801b6d2:	4639      	mov	r1, r7
 801b6d4:	a80d      	add	r0, sp, #52	; 0x34
 801b6d6:	f7fe f939 	bl	801994c <MoblePalCryptoAesCcmDecrypt>
 801b6da:	2801      	cmp	r0, #1
 801b6dc:	d810      	bhi.n	801b700 <MoblePalCryptoDecryptNetworkEx+0xc0>
 801b6de:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801b6e2:	9a06      	ldr	r2, [sp, #24]
 801b6e4:	ba5b      	rev16	r3, r3
 801b6e6:	82eb      	strh	r3, [r5, #22]
 801b6e8:	3a02      	subs	r2, #2
 801b6ea:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 801b6ee:	4630      	mov	r0, r6
 801b6f0:	f00d fa3e 	bl	8028b70 <memcpy>
 801b6f4:	4620      	mov	r0, r4
 801b6f6:	b013      	add	sp, #76	; 0x4c
 801b6f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b6fc:	2003      	movs	r0, #3
 801b6fe:	e7fa      	b.n	801b6f6 <MoblePalCryptoDecryptNetworkEx+0xb6>
 801b700:	2002      	movs	r0, #2
 801b702:	e7f8      	b.n	801b6f6 <MoblePalCryptoDecryptNetworkEx+0xb6>
 801b704:	080335d5 	.word	0x080335d5
 801b708:	080316a4 	.word	0x080316a4
 801b70c:	08033563 	.word	0x08033563
 801b710:	08033636 	.word	0x08033636
 801b714:	0803362a 	.word	0x0803362a
 801b718:	08033641 	.word	0x08033641

0801b71c <BnrgmPalCryptoDecryptNetwork>:
 801b71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b720:	4f4c      	ldr	r7, [pc, #304]	; (801b854 <BnrgmPalCryptoDecryptNetwork+0x138>)
 801b722:	4604      	mov	r4, r0
 801b724:	4689      	mov	r9, r1
 801b726:	2600      	movs	r6, #0
 801b728:	2002      	movs	r0, #2
 801b72a:	f207 4824 	addw	r8, r7, #1060	; 0x424
 801b72e:	7ea3      	ldrb	r3, [r4, #26]
 801b730:	b2f5      	uxtb	r5, r6
 801b732:	42ab      	cmp	r3, r5
 801b734:	d837      	bhi.n	801b7a6 <BnrgmPalCryptoDecryptNetwork+0x8a>
 801b736:	2801      	cmp	r0, #1
 801b738:	d050      	beq.n	801b7dc <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b73a:	4f46      	ldr	r7, [pc, #280]	; (801b854 <BnrgmPalCryptoDecryptNetwork+0x138>)
 801b73c:	2600      	movs	r6, #0
 801b73e:	f207 4824 	addw	r8, r7, #1060	; 0x424
 801b742:	7fa3      	ldrb	r3, [r4, #30]
 801b744:	b2f5      	uxtb	r5, r6
 801b746:	42ab      	cmp	r3, r5
 801b748:	d84a      	bhi.n	801b7e0 <BnrgmPalCryptoDecryptNetwork+0xc4>
 801b74a:	2801      	cmp	r0, #1
 801b74c:	d046      	beq.n	801b7dc <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b74e:	4f41      	ldr	r7, [pc, #260]	; (801b854 <BnrgmPalCryptoDecryptNetwork+0x138>)
 801b750:	2600      	movs	r6, #0
 801b752:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801b756:	b2f5      	uxtb	r5, r6
 801b758:	42ab      	cmp	r3, r5
 801b75a:	d860      	bhi.n	801b81e <BnrgmPalCryptoDecryptNetwork+0x102>
 801b75c:	2801      	cmp	r0, #1
 801b75e:	d03d      	beq.n	801b7dc <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b760:	4f3c      	ldr	r7, [pc, #240]	; (801b854 <BnrgmPalCryptoDecryptNetwork+0x138>)
 801b762:	2600      	movs	r6, #0
 801b764:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801b768:	b2f5      	uxtb	r5, r6
 801b76a:	42ab      	cmp	r3, r5
 801b76c:	d936      	bls.n	801b7dc <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b76e:	4425      	add	r5, r4
 801b770:	4649      	mov	r1, r9
 801b772:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 801b776:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801b77a:	4620      	mov	r0, r4
 801b77c:	f8d3 2630 	ldr.w	r2, [r3, #1584]	; 0x630
 801b780:	f102 0310 	add.w	r3, r2, #16
 801b784:	3230      	adds	r2, #48	; 0x30
 801b786:	f7ff ff5b 	bl	801b640 <MoblePalCryptoDecryptNetworkEx>
 801b78a:	3601      	adds	r6, #1
 801b78c:	2800      	cmp	r0, #0
 801b78e:	d1e9      	bne.n	801b764 <BnrgmPalCryptoDecryptNetwork+0x48>
 801b790:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 801b794:	f043 0320 	orr.w	r3, r3, #32
 801b798:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801b79c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 801b7a0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801b7a4:	e037      	b.n	801b816 <BnrgmPalCryptoDecryptNetwork+0xfa>
 801b7a6:	4425      	add	r5, r4
 801b7a8:	4649      	mov	r1, r9
 801b7aa:	7eea      	ldrb	r2, [r5, #27]
 801b7ac:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 801b7b0:	0092      	lsls	r2, r2, #2
 801b7b2:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 801b7b6:	325c      	adds	r2, #92	; 0x5c
 801b7b8:	4443      	add	r3, r8
 801b7ba:	4442      	add	r2, r8
 801b7bc:	4620      	mov	r0, r4
 801b7be:	f7ff ff3f 	bl	801b640 <MoblePalCryptoDecryptNetworkEx>
 801b7c2:	3601      	adds	r6, #1
 801b7c4:	2800      	cmp	r0, #0
 801b7c6:	d1b2      	bne.n	801b72e <BnrgmPalCryptoDecryptNetwork+0x12>
 801b7c8:	7eeb      	ldrb	r3, [r5, #27]
 801b7ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b7ce:	227c      	movs	r2, #124	; 0x7c
 801b7d0:	fb02 7303 	mla	r3, r2, r3, r7
 801b7d4:	f8b3 3448 	ldrh.w	r3, [r3, #1096]	; 0x448
 801b7d8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 801b7dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b7e0:	4425      	add	r5, r4
 801b7e2:	4649      	mov	r1, r9
 801b7e4:	7fea      	ldrb	r2, [r5, #31]
 801b7e6:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 801b7ea:	0092      	lsls	r2, r2, #2
 801b7ec:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 801b7f0:	326c      	adds	r2, #108	; 0x6c
 801b7f2:	4443      	add	r3, r8
 801b7f4:	4442      	add	r2, r8
 801b7f6:	4620      	mov	r0, r4
 801b7f8:	f7ff ff22 	bl	801b640 <MoblePalCryptoDecryptNetworkEx>
 801b7fc:	3601      	adds	r6, #1
 801b7fe:	2800      	cmp	r0, #0
 801b800:	d19f      	bne.n	801b742 <BnrgmPalCryptoDecryptNetwork+0x26>
 801b802:	7feb      	ldrb	r3, [r5, #31]
 801b804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b808:	227c      	movs	r2, #124	; 0x7c
 801b80a:	fb02 7303 	mla	r3, r2, r3, r7
 801b80e:	f8b3 3448 	ldrh.w	r3, [r3, #1096]	; 0x448
 801b812:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 801b816:	2301      	movs	r3, #1
 801b818:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801b81c:	e7de      	b.n	801b7dc <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b81e:	4425      	add	r5, r4
 801b820:	4649      	mov	r1, r9
 801b822:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 801b826:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801b82a:	4620      	mov	r0, r4
 801b82c:	f8d3 3630 	ldr.w	r3, [r3, #1584]	; 0x630
 801b830:	f103 0220 	add.w	r2, r3, #32
 801b834:	f7ff ff04 	bl	801b640 <MoblePalCryptoDecryptNetworkEx>
 801b838:	3601      	adds	r6, #1
 801b83a:	2800      	cmp	r0, #0
 801b83c:	d189      	bne.n	801b752 <BnrgmPalCryptoDecryptNetwork+0x36>
 801b83e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 801b842:	f043 0320 	orr.w	r3, r3, #32
 801b846:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801b84a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 801b84e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801b852:	e7c3      	b.n	801b7dc <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b854:	20001410 	.word	0x20001410

0801b858 <MoblePalCryptoEncryptApp>:
 801b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b85c:	b08f      	sub	sp, #60	; 0x3c
 801b85e:	460d      	mov	r5, r1
 801b860:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 801b864:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
 801b868:	4691      	mov	r9, r2
 801b86a:	469a      	mov	sl, r3
 801b86c:	4606      	mov	r6, r0
 801b86e:	b930      	cbnz	r0, 801b87e <MoblePalCryptoEncryptApp+0x26>
 801b870:	4b5c      	ldr	r3, [pc, #368]	; (801b9e4 <MoblePalCryptoEncryptApp+0x18c>)
 801b872:	4a5d      	ldr	r2, [pc, #372]	; (801b9e8 <MoblePalCryptoEncryptApp+0x190>)
 801b874:	f240 719b 	movw	r1, #1947	; 0x79b
 801b878:	485c      	ldr	r0, [pc, #368]	; (801b9ec <MoblePalCryptoEncryptApp+0x194>)
 801b87a:	f00d f90f 	bl	8028a9c <__assert_func>
 801b87e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b880:	b923      	cbnz	r3, 801b88c <MoblePalCryptoEncryptApp+0x34>
 801b882:	4b5b      	ldr	r3, [pc, #364]	; (801b9f0 <MoblePalCryptoEncryptApp+0x198>)
 801b884:	4a58      	ldr	r2, [pc, #352]	; (801b9e8 <MoblePalCryptoEncryptApp+0x190>)
 801b886:	f240 719c 	movw	r1, #1948	; 0x79c
 801b88a:	e7f5      	b.n	801b878 <MoblePalCryptoEncryptApp+0x20>
 801b88c:	4f59      	ldr	r7, [pc, #356]	; (801b9f4 <MoblePalCryptoEncryptApp+0x19c>)
 801b88e:	f8b7 394c 	ldrh.w	r3, [r7, #2380]	; 0x94c
 801b892:	4543      	cmp	r3, r8
 801b894:	d204      	bcs.n	801b8a0 <MoblePalCryptoEncryptApp+0x48>
 801b896:	4b58      	ldr	r3, [pc, #352]	; (801b9f8 <MoblePalCryptoEncryptApp+0x1a0>)
 801b898:	4a53      	ldr	r2, [pc, #332]	; (801b9e8 <MoblePalCryptoEncryptApp+0x190>)
 801b89a:	f240 719d 	movw	r1, #1949	; 0x79d
 801b89e:	e7eb      	b.n	801b878 <MoblePalCryptoEncryptApp+0x20>
 801b8a0:	8b4b      	ldrh	r3, [r1, #26]
 801b8a2:	f241 0201 	movw	r2, #4097	; 0x1001
 801b8a6:	f04f 0b00 	mov.w	fp, #0
 801b8aa:	4213      	tst	r3, r2
 801b8ac:	e9cd bb06 	strd	fp, fp, [sp, #24]
 801b8b0:	f8cd b020 	str.w	fp, [sp, #32]
 801b8b4:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
 801b8b8:	d142      	bne.n	801b940 <MoblePalCryptoEncryptApp+0xe8>
 801b8ba:	f891 1020 	ldrb.w	r1, [r1, #32]
 801b8be:	4620      	mov	r0, r4
 801b8c0:	f7fd fd84 	bl	80193cc <MoblePalCryptoGetApplicationSecurityKeys>
 801b8c4:	4601      	mov	r1, r0
 801b8c6:	b920      	cbnz	r0, 801b8d2 <MoblePalCryptoEncryptApp+0x7a>
 801b8c8:	4b4c      	ldr	r3, [pc, #304]	; (801b9fc <MoblePalCryptoEncryptApp+0x1a4>)
 801b8ca:	4a47      	ldr	r2, [pc, #284]	; (801b9e8 <MoblePalCryptoEncryptApp+0x190>)
 801b8cc:	f44f 61f6 	mov.w	r1, #1968	; 0x7b0
 801b8d0:	e7d2      	b.n	801b878 <MoblePalCryptoEncryptApp+0x20>
 801b8d2:	b35c      	cbz	r4, 801b92c <MoblePalCryptoEncryptApp+0xd4>
 801b8d4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 801b8d8:	b383      	cbz	r3, 801b93c <MoblePalCryptoEncryptApp+0xe4>
 801b8da:	f100 0210 	add.w	r2, r0, #16
 801b8de:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801b8e2:	f100 0320 	add.w	r3, r0, #32
 801b8e6:	6810      	ldr	r0, [r2, #0]
 801b8e8:	6851      	ldr	r1, [r2, #4]
 801b8ea:	4664      	mov	r4, ip
 801b8ec:	c403      	stmia	r4!, {r0, r1}
 801b8ee:	3208      	adds	r2, #8
 801b8f0:	429a      	cmp	r2, r3
 801b8f2:	46a4      	mov	ip, r4
 801b8f4:	d1f7      	bne.n	801b8e6 <MoblePalCryptoEncryptApp+0x8e>
 801b8f6:	2400      	movs	r4, #0
 801b8f8:	2301      	movs	r3, #1
 801b8fa:	f88d 3018 	strb.w	r3, [sp, #24]
 801b8fe:	8aeb      	ldrh	r3, [r5, #22]
 801b900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801b904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b908:	bf0c      	ite	eq
 801b90a:	f04f 0b10 	moveq.w	fp, #16
 801b90e:	f04f 0b00 	movne.w	fp, #0
 801b912:	b93c      	cbnz	r4, 801b924 <MoblePalCryptoEncryptApp+0xcc>
 801b914:	f897 265c 	ldrb.w	r2, [r7, #1628]	; 0x65c
 801b918:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 801b91c:	2a01      	cmp	r2, #1
 801b91e:	d12f      	bne.n	801b980 <MoblePalCryptoEncryptApp+0x128>
 801b920:	bb6b      	cbnz	r3, 801b97e <MoblePalCryptoEncryptApp+0x126>
 801b922:	2402      	movs	r4, #2
 801b924:	4620      	mov	r0, r4
 801b926:	b00f      	add	sp, #60	; 0x3c
 801b928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b92c:	f890 3020 	ldrb.w	r3, [r0, #32]
 801b930:	b123      	cbz	r3, 801b93c <MoblePalCryptoEncryptApp+0xe4>
 801b932:	2210      	movs	r2, #16
 801b934:	a80a      	add	r0, sp, #40	; 0x28
 801b936:	f00d f929 	bl	8028b8c <memmove>
 801b93a:	e7dd      	b.n	801b8f8 <MoblePalCryptoEncryptApp+0xa0>
 801b93c:	2402      	movs	r4, #2
 801b93e:	e7db      	b.n	801b8f8 <MoblePalCryptoEncryptApp+0xa0>
 801b940:	f3c3 3400 	ubfx	r4, r3, #12, #1
 801b944:	04db      	lsls	r3, r3, #19
 801b946:	d50c      	bpl.n	801b962 <MoblePalCryptoEncryptApp+0x10a>
 801b948:	6809      	ldr	r1, [r1, #0]
 801b94a:	b1b1      	cbz	r1, 801b97a <MoblePalCryptoEncryptApp+0x122>
 801b94c:	2210      	movs	r2, #16
 801b94e:	a80a      	add	r0, sp, #40	; 0x28
 801b950:	f00d f91c 	bl	8028b8c <memmove>
 801b954:	465c      	mov	r4, fp
 801b956:	2302      	movs	r3, #2
 801b958:	f88d 3018 	strb.w	r3, [sp, #24]
 801b95c:	f04f 0b00 	mov.w	fp, #0
 801b960:	e7d7      	b.n	801b912 <MoblePalCryptoEncryptApp+0xba>
 801b962:	f897 361e 	ldrb.w	r3, [r7, #1566]	; 0x61e
 801b966:	2b01      	cmp	r3, #1
 801b968:	d107      	bne.n	801b97a <MoblePalCryptoEncryptApp+0x122>
 801b96a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801b96e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b970:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 801b974:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 801b978:	e7ed      	b.n	801b956 <MoblePalCryptoEncryptApp+0xfe>
 801b97a:	2402      	movs	r4, #2
 801b97c:	e7eb      	b.n	801b956 <MoblePalCryptoEncryptApp+0xfe>
 801b97e:	3b01      	subs	r3, #1
 801b980:	2203      	movs	r2, #3
 801b982:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
 801b986:	f10d 001a 	add.w	r0, sp, #26
 801b98a:	f7ff fc33 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801b98e:	8aa9      	ldrh	r1, [r5, #20]
 801b990:	2202      	movs	r2, #2
 801b992:	f10d 001d 	add.w	r0, sp, #29
 801b996:	f7ff fc2d 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801b99a:	8ae9      	ldrh	r1, [r5, #22]
 801b99c:	2202      	movs	r2, #2
 801b99e:	f10d 001f 	add.w	r0, sp, #31
 801b9a2:	f7ff fc27 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801b9a6:	2204      	movs	r2, #4
 801b9a8:	4619      	mov	r1, r3
 801b9aa:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 801b9ae:	f7ff fc21 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801b9b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b9b4:	f8cd b014 	str.w	fp, [sp, #20]
 801b9b8:	e9cd 8303 	strd	r8, r3, [sp, #12]
 801b9bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b9be:	9302      	str	r3, [sp, #8]
 801b9c0:	230d      	movs	r3, #13
 801b9c2:	f1b9 0f00 	cmp.w	r9, #0
 801b9c6:	9301      	str	r3, [sp, #4]
 801b9c8:	ab06      	add	r3, sp, #24
 801b9ca:	9300      	str	r3, [sp, #0]
 801b9cc:	bf14      	ite	ne
 801b9ce:	2208      	movne	r2, #8
 801b9d0:	2204      	moveq	r2, #4
 801b9d2:	ab0a      	add	r3, sp, #40	; 0x28
 801b9d4:	eb06 0108 	add.w	r1, r6, r8
 801b9d8:	4630      	mov	r0, r6
 801b9da:	f7fd ffa1 	bl	8019920 <MoblePalCryptoAesCcmEncrypt>
 801b9de:	2801      	cmp	r0, #1
 801b9e0:	d9a0      	bls.n	801b924 <MoblePalCryptoEncryptApp+0xcc>
 801b9e2:	e79e      	b.n	801b922 <MoblePalCryptoEncryptApp+0xca>
 801b9e4:	080335ce 	.word	0x080335ce
 801b9e8:	080316c3 	.word	0x080316c3
 801b9ec:	08033563 	.word	0x08033563
 801b9f0:	08033650 	.word	0x08033650
 801b9f4:	20001410 	.word	0x20001410
 801b9f8:	08033658 	.word	0x08033658
 801b9fc:	08033687 	.word	0x08033687

0801ba00 <MoblePalCryptoDecryptApp>:
 801ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba04:	b097      	sub	sp, #92	; 0x5c
 801ba06:	e9dd 4726 	ldrd	r4, r7, [sp, #152]	; 0x98
 801ba0a:	9309      	str	r3, [sp, #36]	; 0x24
 801ba0c:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801ba10:	9306      	str	r3, [sp, #24]
 801ba12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ba14:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 801ba18:	f8bd 8084 	ldrh.w	r8, [sp, #132]	; 0x84
 801ba1c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801ba1e:	b933      	cbnz	r3, 801ba2e <MoblePalCryptoDecryptApp+0x2e>
 801ba20:	4b9e      	ldr	r3, [pc, #632]	; (801bc9c <MoblePalCryptoDecryptApp+0x29c>)
 801ba22:	4a9f      	ldr	r2, [pc, #636]	; (801bca0 <MoblePalCryptoDecryptApp+0x2a0>)
 801ba24:	f640 0131 	movw	r1, #2097	; 0x831
 801ba28:	489e      	ldr	r0, [pc, #632]	; (801bca4 <MoblePalCryptoDecryptApp+0x2a4>)
 801ba2a:	f00d f837 	bl	8028a9c <__assert_func>
 801ba2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ba30:	b923      	cbnz	r3, 801ba3c <MoblePalCryptoDecryptApp+0x3c>
 801ba32:	4b9d      	ldr	r3, [pc, #628]	; (801bca8 <MoblePalCryptoDecryptApp+0x2a8>)
 801ba34:	4a9a      	ldr	r2, [pc, #616]	; (801bca0 <MoblePalCryptoDecryptApp+0x2a0>)
 801ba36:	f640 0132 	movw	r1, #2098	; 0x832
 801ba3a:	e7f5      	b.n	801ba28 <MoblePalCryptoDecryptApp+0x28>
 801ba3c:	1f6b      	subs	r3, r5, #5
 801ba3e:	2b9b      	cmp	r3, #155	; 0x9b
 801ba40:	d904      	bls.n	801ba4c <MoblePalCryptoDecryptApp+0x4c>
 801ba42:	4b9a      	ldr	r3, [pc, #616]	; (801bcac <MoblePalCryptoDecryptApp+0x2ac>)
 801ba44:	4a96      	ldr	r2, [pc, #600]	; (801bca0 <MoblePalCryptoDecryptApp+0x2a0>)
 801ba46:	f640 0133 	movw	r1, #2099	; 0x833
 801ba4a:	e7ed      	b.n	801ba28 <MoblePalCryptoDecryptApp+0x28>
 801ba4c:	2a00      	cmp	r2, #0
 801ba4e:	f04f 0300 	mov.w	r3, #0
 801ba52:	bf14      	ite	ne
 801ba54:	f04f 0908 	movne.w	r9, #8
 801ba58:	f04f 0904 	moveq.w	r9, #4
 801ba5c:	2801      	cmp	r0, #1
 801ba5e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801ba62:	9310      	str	r3, [sp, #64]	; 0x40
 801ba64:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 801ba68:	f040 80b7 	bne.w	801bbda <MoblePalCryptoDecryptApp+0x1da>
 801ba6c:	b2c9      	uxtb	r1, r1
 801ba6e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801ba72:	9207      	str	r2, [sp, #28]
 801ba74:	f7fe fbec 	bl	801a250 <BnrgmPalCryptoMatchAid>
 801ba78:	4606      	mov	r6, r0
 801ba7a:	bb10      	cbnz	r0, 801bac2 <MoblePalCryptoDecryptApp+0xc2>
 801ba7c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801ba80:	b30b      	cbz	r3, 801bac6 <MoblePalCryptoDecryptApp+0xc6>
 801ba82:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801ba86:	9308      	str	r3, [sp, #32]
 801ba88:	01d2      	lsls	r2, r2, #7
 801ba8a:	b2d3      	uxtb	r3, r2
 801ba8c:	9307      	str	r3, [sp, #28]
 801ba8e:	f408 4340 	and.w	r3, r8, #49152	; 0xc000
 801ba92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ba96:	bf0c      	ite	eq
 801ba98:	2310      	moveq	r3, #16
 801ba9a:	2300      	movne	r3, #0
 801ba9c:	930a      	str	r3, [sp, #40]	; 0x28
 801ba9e:	bf0c      	ite	eq
 801baa0:	463b      	moveq	r3, r7
 801baa2:	2300      	movne	r3, #0
 801baa4:	930c      	str	r3, [sp, #48]	; 0x30
 801baa6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801baa8:	eba5 0509 	sub.w	r5, r5, r9
 801baac:	442b      	add	r3, r5
 801baae:	f104 0739 	add.w	r7, r4, #57	; 0x39
 801bab2:	f04f 0a00 	mov.w	sl, #0
 801bab6:	930d      	str	r3, [sp, #52]	; 0x34
 801bab8:	9a08      	ldr	r2, [sp, #32]
 801baba:	fa5f f38a 	uxtb.w	r3, sl
 801babe:	4293      	cmp	r3, r2
 801bac0:	d304      	bcc.n	801bacc <MoblePalCryptoDecryptApp+0xcc>
 801bac2:	2602      	movs	r6, #2
 801bac4:	e067      	b.n	801bb96 <MoblePalCryptoDecryptApp+0x196>
 801bac6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801baca:	e7dc      	b.n	801ba86 <MoblePalCryptoDecryptApp+0x86>
 801bacc:	9b06      	ldr	r3, [sp, #24]
 801bace:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 801bad2:	222c      	movs	r2, #44	; 0x2c
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	d062      	beq.n	801bb9e <MoblePalCryptoDecryptApp+0x19e>
 801bad8:	793b      	ldrb	r3, [r7, #4]
 801bada:	4975      	ldr	r1, [pc, #468]	; (801bcb0 <MoblePalCryptoDecryptApp+0x2b0>)
 801badc:	fb02 1303 	mla	r3, r2, r3, r1
 801bae0:	f893 25b9 	ldrb.w	r2, [r3, #1465]	; 0x5b9
 801bae4:	b162      	cbz	r2, 801bb00 <MoblePalCryptoDecryptApp+0x100>
 801bae6:	2201      	movs	r2, #1
 801bae8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 801baec:	9a07      	ldr	r2, [sp, #28]
 801baee:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 801baf2:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 801baf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801baf8:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 801bafc:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 801bb00:	4b6b      	ldr	r3, [pc, #428]	; (801bcb0 <MoblePalCryptoDecryptApp+0x2b0>)
 801bb02:	7b21      	ldrb	r1, [r4, #12]
 801bb04:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801bb08:	f003 0201 	and.w	r2, r3, #1
 801bb0c:	4291      	cmp	r1, r2
 801bb0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bb10:	f04f 0203 	mov.w	r2, #3
 801bb14:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801bb18:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
 801bb1c:	bf18      	it	ne
 801bb1e:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 801bb22:	f7ff fb67 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801bb26:	2202      	movs	r2, #2
 801bb28:	4659      	mov	r1, fp
 801bb2a:	f10d 003d 	add.w	r0, sp, #61	; 0x3d
 801bb2e:	f7ff fb61 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801bb32:	2202      	movs	r2, #2
 801bb34:	4641      	mov	r1, r8
 801bb36:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
 801bb3a:	f7ff fb5b 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801bb3e:	4619      	mov	r1, r3
 801bb40:	2204      	movs	r2, #4
 801bb42:	f10d 0041 	add.w	r0, sp, #65	; 0x41
 801bb46:	f7ff fb55 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801bb4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb4c:	9305      	str	r3, [sp, #20]
 801bb4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb50:	9824      	ldr	r0, [sp, #144]	; 0x90
 801bb52:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801bb56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bb58:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801bb5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb5e:	9300      	str	r3, [sp, #0]
 801bb60:	aa0e      	add	r2, sp, #56	; 0x38
 801bb62:	230d      	movs	r3, #13
 801bb64:	a912      	add	r1, sp, #72	; 0x48
 801bb66:	f7fd fef1 	bl	801994c <MoblePalCryptoAesCcmDecrypt>
 801bb6a:	2801      	cmp	r0, #1
 801bb6c:	f10a 0a01 	add.w	sl, sl, #1
 801bb70:	f107 0701 	add.w	r7, r7, #1
 801bb74:	d8a0      	bhi.n	801bab8 <MoblePalCryptoDecryptApp+0xb8>
 801bb76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bb78:	9906      	ldr	r1, [sp, #24]
 801bb7a:	4b4d      	ldr	r3, [pc, #308]	; (801bcb0 <MoblePalCryptoDecryptApp+0x2b0>)
 801bb7c:	4422      	add	r2, r4
 801bb7e:	b1f9      	cbz	r1, 801bbc0 <MoblePalCryptoDecryptApp+0x1c0>
 801bb80:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 801bb84:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801bb88:	212c      	movs	r1, #44	; 0x2c
 801bb8a:	fb01 3302 	mla	r3, r1, r2, r3
 801bb8e:	f8b3 35ba 	ldrh.w	r3, [r3, #1466]	; 0x5ba
 801bb92:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 801bb96:	4630      	mov	r0, r6
 801bb98:	b017      	add	sp, #92	; 0x5c
 801bb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb9e:	783b      	ldrb	r3, [r7, #0]
 801bba0:	4943      	ldr	r1, [pc, #268]	; (801bcb0 <MoblePalCryptoDecryptApp+0x2b0>)
 801bba2:	fb02 1303 	mla	r3, r2, r3, r1
 801bba6:	f893 25b8 	ldrb.w	r2, [r3, #1464]	; 0x5b8
 801bbaa:	2a00      	cmp	r2, #0
 801bbac:	d0a8      	beq.n	801bb00 <MoblePalCryptoDecryptApp+0x100>
 801bbae:	2201      	movs	r2, #1
 801bbb0:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 801bbb4:	9a07      	ldr	r2, [sp, #28]
 801bbb6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 801bbba:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 801bbbe:	e79a      	b.n	801baf6 <MoblePalCryptoDecryptApp+0xf6>
 801bbc0:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 801bbc4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801bbc8:	212c      	movs	r1, #44	; 0x2c
 801bbca:	fb01 3302 	mla	r3, r1, r2, r3
 801bbce:	f8b3 35ba 	ldrh.w	r3, [r3, #1466]	; 0x5ba
 801bbd2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 801bbd6:	2600      	movs	r6, #0
 801bbd8:	e7dd      	b.n	801bb96 <MoblePalCryptoDecryptApp+0x196>
 801bbda:	4b35      	ldr	r3, [pc, #212]	; (801bcb0 <MoblePalCryptoDecryptApp+0x2b0>)
 801bbdc:	f893 161e 	ldrb.w	r1, [r3, #1566]	; 0x61e
 801bbe0:	b129      	cbz	r1, 801bbee <MoblePalCryptoDecryptApp+0x1ee>
 801bbe2:	2102      	movs	r1, #2
 801bbe4:	01d2      	lsls	r2, r2, #7
 801bbe6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
 801bbea:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 801bbee:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801bbf2:	7b21      	ldrb	r1, [r4, #12]
 801bbf4:	f003 0201 	and.w	r2, r3, #1
 801bbf8:	4291      	cmp	r1, r2
 801bbfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bbfc:	f04f 0203 	mov.w	r2, #3
 801bc00:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801bc04:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
 801bc08:	bf18      	it	ne
 801bc0a:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 801bc0e:	f7ff faf1 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801bc12:	2202      	movs	r2, #2
 801bc14:	4659      	mov	r1, fp
 801bc16:	f10d 003d 	add.w	r0, sp, #61	; 0x3d
 801bc1a:	f7ff faeb 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801bc1e:	4641      	mov	r1, r8
 801bc20:	2202      	movs	r2, #2
 801bc22:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
 801bc26:	f7ff fae5 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801bc2a:	4619      	mov	r1, r3
 801bc2c:	2204      	movs	r2, #4
 801bc2e:	f10d 0041 	add.w	r0, sp, #65	; 0x41
 801bc32:	f7ff fadf 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801bc36:	f408 4840 	and.w	r8, r8, #49152	; 0xc000
 801bc3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bc3c:	491d      	ldr	r1, [pc, #116]	; (801bcb4 <MoblePalCryptoDecryptApp+0x2b4>)
 801bc3e:	9824      	ldr	r0, [sp, #144]	; 0x90
 801bc40:	9112      	str	r1, [sp, #72]	; 0x48
 801bc42:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 801bc46:	eba5 0509 	sub.w	r5, r5, r9
 801bc4a:	bf18      	it	ne
 801bc4c:	2700      	movne	r7, #0
 801bc4e:	eb03 0405 	add.w	r4, r3, r5
 801bc52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bc54:	9503      	str	r5, [sp, #12]
 801bc56:	bf14      	ite	ne
 801bc58:	463e      	movne	r6, r7
 801bc5a:	2610      	moveq	r6, #16
 801bc5c:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801bc60:	e9cd 7604 	strd	r7, r6, [sp, #16]
 801bc64:	9400      	str	r4, [sp, #0]
 801bc66:	230d      	movs	r3, #13
 801bc68:	aa0e      	add	r2, sp, #56	; 0x38
 801bc6a:	f7fd fe6f 	bl	801994c <MoblePalCryptoAesCcmDecrypt>
 801bc6e:	2801      	cmp	r0, #1
 801bc70:	d9b1      	bls.n	801bbd6 <MoblePalCryptoDecryptApp+0x1d6>
 801bc72:	a912      	add	r1, sp, #72	; 0x48
 801bc74:	4658      	mov	r0, fp
 801bc76:	f7f1 ff04 	bl	800da82 <ApplicationGetConfigServerDeviceKey>
 801bc7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bc7c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bc7e:	9824      	ldr	r0, [sp, #144]	; 0x90
 801bc80:	9503      	str	r5, [sp, #12]
 801bc82:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801bc86:	e9cd 7604 	strd	r7, r6, [sp, #16]
 801bc8a:	9400      	str	r4, [sp, #0]
 801bc8c:	230d      	movs	r3, #13
 801bc8e:	aa0e      	add	r2, sp, #56	; 0x38
 801bc90:	f7fd fe5c 	bl	801994c <MoblePalCryptoAesCcmDecrypt>
 801bc94:	2801      	cmp	r0, #1
 801bc96:	d99e      	bls.n	801bbd6 <MoblePalCryptoDecryptApp+0x1d6>
 801bc98:	e713      	b.n	801bac2 <MoblePalCryptoDecryptApp+0xc2>
 801bc9a:	bf00      	nop
 801bc9c:	0803368f 	.word	0x0803368f
 801bca0:	080316dc 	.word	0x080316dc
 801bca4:	08033563 	.word	0x08033563
 801bca8:	080336a0 	.word	0x080336a0
 801bcac:	080336ae 	.word	0x080336ae
 801bcb0:	20001410 	.word	0x20001410
 801bcb4:	20001a30 	.word	0x20001a30

0801bcb8 <MobleOutputStreamPutLittleEndian>:
 801bcb8:	1883      	adds	r3, r0, r2
 801bcba:	4298      	cmp	r0, r3
 801bcbc:	d101      	bne.n	801bcc2 <MobleOutputStreamPutLittleEndian+0xa>
 801bcbe:	4610      	mov	r0, r2
 801bcc0:	4770      	bx	lr
 801bcc2:	f800 1b01 	strb.w	r1, [r0], #1
 801bcc6:	0a09      	lsrs	r1, r1, #8
 801bcc8:	e7f7      	b.n	801bcba <MobleOutputStreamPutLittleEndian+0x2>
	...

0801bccc <MobleApplicationProcessPacket>:
 801bccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bcd0:	9f08      	ldr	r7, [sp, #32]
 801bcd2:	460c      	mov	r4, r1
 801bcd4:	4698      	mov	r8, r3
 801bcd6:	4691      	mov	r9, r2
 801bcd8:	b932      	cbnz	r2, 801bce8 <MobleApplicationProcessPacket+0x1c>
 801bcda:	4b26      	ldr	r3, [pc, #152]	; (801bd74 <MobleApplicationProcessPacket+0xa8>)
 801bcdc:	4a26      	ldr	r2, [pc, #152]	; (801bd78 <MobleApplicationProcessPacket+0xac>)
 801bcde:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 801bce2:	4826      	ldr	r0, [pc, #152]	; (801bd7c <MobleApplicationProcessPacket+0xb0>)
 801bce4:	f00c feda 	bl	8028a9c <__assert_func>
 801bce8:	b923      	cbnz	r3, 801bcf4 <MobleApplicationProcessPacket+0x28>
 801bcea:	4b25      	ldr	r3, [pc, #148]	; (801bd80 <MobleApplicationProcessPacket+0xb4>)
 801bcec:	4a22      	ldr	r2, [pc, #136]	; (801bd78 <MobleApplicationProcessPacket+0xac>)
 801bcee:	f240 11c5 	movw	r1, #453	; 0x1c5
 801bcf2:	e7f6      	b.n	801bce2 <MobleApplicationProcessPacket+0x16>
 801bcf4:	b921      	cbnz	r1, 801bd00 <MobleApplicationProcessPacket+0x34>
 801bcf6:	4b23      	ldr	r3, [pc, #140]	; (801bd84 <MobleApplicationProcessPacket+0xb8>)
 801bcf8:	4a1f      	ldr	r2, [pc, #124]	; (801bd78 <MobleApplicationProcessPacket+0xac>)
 801bcfa:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 801bcfe:	e7f0      	b.n	801bce2 <MobleApplicationProcessPacket+0x16>
 801bd00:	1e7b      	subs	r3, r7, #1
 801bd02:	2b9b      	cmp	r3, #155	; 0x9b
 801bd04:	d834      	bhi.n	801bd70 <MobleApplicationProcessPacket+0xa4>
 801bd06:	4d20      	ldr	r5, [pc, #128]	; (801bd88 <MobleApplicationProcessPacket+0xbc>)
 801bd08:	f8d5 6954 	ldr.w	r6, [r5, #2388]	; 0x954
 801bd0c:	b116      	cbz	r6, 801bd14 <MobleApplicationProcessPacket+0x48>
 801bd0e:	2002      	movs	r0, #2
 801bd10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bd14:	f107 0020 	add.w	r0, r7, #32
 801bd18:	f7ff f8ac 	bl	801ae74 <MobleMemAlloc>
 801bd1c:	f8c5 0954 	str.w	r0, [r5, #2388]	; 0x954
 801bd20:	2800      	cmp	r0, #0
 801bd22:	d0f4      	beq.n	801bd0e <MobleApplicationProcessPacket+0x42>
 801bd24:	220c      	movs	r2, #12
 801bd26:	18a1      	adds	r1, r4, r2
 801bd28:	f00c ff30 	bl	8028b8c <memmove>
 801bd2c:	f8d5 5954 	ldr.w	r5, [r5, #2388]	; 0x954
 801bd30:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801bd34:	732b      	strb	r3, [r5, #12]
 801bd36:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 801bd3a:	81eb      	strh	r3, [r5, #14]
 801bd3c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801bd40:	742b      	strb	r3, [r5, #16]
 801bd42:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 801bd46:	826b      	strh	r3, [r5, #18]
 801bd48:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801bd4c:	752b      	strb	r3, [r5, #20]
 801bd4e:	f899 3001 	ldrb.w	r3, [r9, #1]
 801bd52:	3b00      	subs	r3, #0
 801bd54:	bf18      	it	ne
 801bd56:	2301      	movne	r3, #1
 801bd58:	756b      	strb	r3, [r5, #21]
 801bd5a:	463a      	mov	r2, r7
 801bd5c:	4641      	mov	r1, r8
 801bd5e:	f105 0020 	add.w	r0, r5, #32
 801bd62:	f00c ff13 	bl	8028b8c <memmove>
 801bd66:	61ef      	str	r7, [r5, #28]
 801bd68:	7e23      	ldrb	r3, [r4, #24]
 801bd6a:	75ab      	strb	r3, [r5, #22]
 801bd6c:	4630      	mov	r0, r6
 801bd6e:	e7cf      	b.n	801bd10 <MobleApplicationProcessPacket+0x44>
 801bd70:	2003      	movs	r0, #3
 801bd72:	e7cd      	b.n	801bd10 <MobleApplicationProcessPacket+0x44>
 801bd74:	0803371f 	.word	0x0803371f
 801bd78:	080316f5 	.word	0x080316f5
 801bd7c:	08033730 	.word	0x08033730
 801bd80:	08033775 	.word	0x08033775
 801bd84:	080335d5 	.word	0x080335d5
 801bd88:	20001410 	.word	0x20001410

0801bd8c <MobleApplicationPassPacketsToSIGModels>:
 801bd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd90:	7d4c      	ldrb	r4, [r1, #21]
 801bd92:	b089      	sub	sp, #36	; 0x24
 801bd94:	4605      	mov	r5, r0
 801bd96:	468b      	mov	fp, r1
 801bd98:	2c00      	cmp	r4, #0
 801bd9a:	f000 80cd 	beq.w	801bf38 <MobleApplicationPassPacketsToSIGModels+0x1ac>
 801bd9e:	6803      	ldr	r3, [r0, #0]
 801bda0:	4f7c      	ldr	r7, [pc, #496]	; (801bf94 <MobleApplicationPassPacketsToSIGModels+0x208>)
 801bda2:	7f1b      	ldrb	r3, [r3, #28]
 801bda4:	9302      	str	r3, [sp, #8]
 801bda6:	89cb      	ldrh	r3, [r1, #14]
 801bda8:	9303      	str	r3, [sp, #12]
 801bdaa:	7b0b      	ldrb	r3, [r1, #12]
 801bdac:	9301      	str	r3, [sp, #4]
 801bdae:	2300      	movs	r3, #0
 801bdb0:	9300      	str	r3, [sp, #0]
 801bdb2:	9b01      	ldr	r3, [sp, #4]
 801bdb4:	33a6      	adds	r3, #166	; 0xa6
 801bdb6:	9305      	str	r3, [sp, #20]
 801bdb8:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 801bdbc:	8838      	ldrh	r0, [r7, #0]
 801bdbe:	f89d 3000 	ldrb.w	r3, [sp]
 801bdc2:	4290      	cmp	r0, r2
 801bdc4:	d149      	bne.n	801be5a <MobleApplicationPassPacketsToSIGModels+0xce>
 801bdc6:	463c      	mov	r4, r7
 801bdc8:	f04f 0900 	mov.w	r9, #0
 801bdcc:	9a05      	ldr	r2, [sp, #20]
 801bdce:	5ca2      	ldrb	r2, [r4, r2]
 801bdd0:	bb2a      	cbnz	r2, 801be1e <MobleApplicationPassPacketsToSIGModels+0x92>
 801bdd2:	f109 090e 	add.w	r9, r9, #14
 801bdd6:	f1b9 0f9a 	cmp.w	r9, #154	; 0x9a
 801bdda:	f104 0438 	add.w	r4, r4, #56	; 0x38
 801bdde:	d1f5      	bne.n	801bdcc <MobleApplicationPassPacketsToSIGModels+0x40>
 801bde0:	2002      	movs	r0, #2
 801bde2:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 801bde6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801bdea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801bdee:	d106      	bne.n	801bdfe <MobleApplicationPassPacketsToSIGModels+0x72>
 801bdf0:	9b02      	ldr	r3, [sp, #8]
 801bdf2:	2b01      	cmp	r3, #1
 801bdf4:	d903      	bls.n	801bdfe <MobleApplicationPassPacketsToSIGModels+0x72>
 801bdf6:	9a00      	ldr	r2, [sp, #0]
 801bdf8:	3b01      	subs	r3, #1
 801bdfa:	4293      	cmp	r3, r2
 801bdfc:	d101      	bne.n	801be02 <MobleApplicationPassPacketsToSIGModels+0x76>
 801bdfe:	2802      	cmp	r0, #2
 801be00:	d10a      	bne.n	801be18 <MobleApplicationPassPacketsToSIGModels+0x8c>
 801be02:	9b00      	ldr	r3, [sp, #0]
 801be04:	9a02      	ldr	r2, [sp, #8]
 801be06:	3301      	adds	r3, #1
 801be08:	9300      	str	r3, [sp, #0]
 801be0a:	f89d 3000 	ldrb.w	r3, [sp]
 801be0e:	429a      	cmp	r2, r3
 801be10:	f507 7739 	add.w	r7, r7, #740	; 0x2e4
 801be14:	d8d0      	bhi.n	801bdb8 <MobleApplicationPassPacketsToSIGModels+0x2c>
 801be16:	2002      	movs	r0, #2
 801be18:	b009      	add	sp, #36	; 0x24
 801be1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be1e:	9901      	ldr	r1, [sp, #4]
 801be20:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 801be24:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801be28:	9903      	ldr	r1, [sp, #12]
 801be2a:	428a      	cmp	r2, r1
 801be2c:	d1d1      	bne.n	801bdd2 <MobleApplicationPassPacketsToSIGModels+0x46>
 801be2e:	f894 209a 	ldrb.w	r2, [r4, #154]	; 0x9a
 801be32:	2a01      	cmp	r2, #1
 801be34:	d1cd      	bne.n	801bdd2 <MobleApplicationPassPacketsToSIGModels+0x46>
 801be36:	f8df 8168 	ldr.w	r8, [pc, #360]	; 801bfa0 <MobleApplicationPassPacketsToSIGModels+0x214>
 801be3a:	f108 0a0c 	add.w	sl, r8, #12
 801be3e:	f858 2b04 	ldr.w	r2, [r8], #4
 801be42:	9304      	str	r3, [sp, #16]
 801be44:	4616      	mov	r6, r2
 801be46:	4659      	mov	r1, fp
 801be48:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801be4a:	4628      	mov	r0, r5
 801be4c:	47b0      	blx	r6
 801be4e:	2801      	cmp	r0, #1
 801be50:	d9c7      	bls.n	801bde2 <MobleApplicationPassPacketsToSIGModels+0x56>
 801be52:	45c2      	cmp	sl, r8
 801be54:	9b04      	ldr	r3, [sp, #16]
 801be56:	d1f2      	bne.n	801be3e <MobleApplicationPassPacketsToSIGModels+0xb2>
 801be58:	e7bb      	b.n	801bdd2 <MobleApplicationPassPacketsToSIGModels+0x46>
 801be5a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 801be5e:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 801be62:	d1bd      	bne.n	801bde0 <MobleApplicationPassPacketsToSIGModels+0x54>
 801be64:	2200      	movs	r2, #0
 801be66:	463c      	mov	r4, r7
 801be68:	9204      	str	r2, [sp, #16]
 801be6a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801be6c:	b93a      	cbnz	r2, 801be7e <MobleApplicationPassPacketsToSIGModels+0xf2>
 801be6e:	9a04      	ldr	r2, [sp, #16]
 801be70:	320e      	adds	r2, #14
 801be72:	2a9a      	cmp	r2, #154	; 0x9a
 801be74:	9204      	str	r2, [sp, #16]
 801be76:	f104 0438 	add.w	r4, r4, #56	; 0x38
 801be7a:	d1f6      	bne.n	801be6a <MobleApplicationPassPacketsToSIGModels+0xde>
 801be7c:	e7b0      	b.n	801bde0 <MobleApplicationPassPacketsToSIGModels+0x54>
 801be7e:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 801be82:	f64f 71fb 	movw	r1, #65531	; 0xfffb
 801be86:	428a      	cmp	r2, r1
 801be88:	d920      	bls.n	801becc <MobleApplicationPassPacketsToSIGModels+0x140>
 801be8a:	9a05      	ldr	r2, [sp, #20]
 801be8c:	5ca2      	ldrb	r2, [r4, r2]
 801be8e:	2a00      	cmp	r2, #0
 801be90:	d0ed      	beq.n	801be6e <MobleApplicationPassPacketsToSIGModels+0xe2>
 801be92:	9901      	ldr	r1, [sp, #4]
 801be94:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 801be98:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801be9c:	9903      	ldr	r1, [sp, #12]
 801be9e:	428a      	cmp	r2, r1
 801bea0:	d1e5      	bne.n	801be6e <MobleApplicationPassPacketsToSIGModels+0xe2>
 801bea2:	f894 209a 	ldrb.w	r2, [r4, #154]	; 0x9a
 801bea6:	2a01      	cmp	r2, #1
 801bea8:	d1e1      	bne.n	801be6e <MobleApplicationPassPacketsToSIGModels+0xe2>
 801beaa:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801bfa0 <MobleApplicationPassPacketsToSIGModels+0x214>
 801beae:	f108 090c 	add.w	r9, r8, #12
 801beb2:	f858 ab04 	ldr.w	sl, [r8], #4
 801beb6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801beb8:	9306      	str	r3, [sp, #24]
 801beba:	4659      	mov	r1, fp
 801bebc:	4628      	mov	r0, r5
 801bebe:	47d0      	blx	sl
 801bec0:	2801      	cmp	r0, #1
 801bec2:	d98e      	bls.n	801bde2 <MobleApplicationPassPacketsToSIGModels+0x56>
 801bec4:	45c1      	cmp	r9, r8
 801bec6:	9b06      	ldr	r3, [sp, #24]
 801bec8:	d1f3      	bne.n	801beb2 <MobleApplicationPassPacketsToSIGModels+0x126>
 801beca:	e7d0      	b.n	801be6e <MobleApplicationPassPacketsToSIGModels+0xe2>
 801becc:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 801bed0:	f104 0a80 	add.w	sl, r4, #128	; 0x80
 801bed4:	f04f 0800 	mov.w	r8, #0
 801bed8:	9206      	str	r2, [sp, #24]
 801beda:	f83a 2b02 	ldrh.w	r2, [sl], #2
 801bede:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 801bee2:	f108 0801 	add.w	r8, r8, #1
 801bee6:	4290      	cmp	r0, r2
 801bee8:	fa5f f888 	uxtb.w	r8, r8
 801beec:	d003      	beq.n	801bef6 <MobleApplicationPassPacketsToSIGModels+0x16a>
 801beee:	f1b8 0f0a 	cmp.w	r8, #10
 801bef2:	d1f2      	bne.n	801beda <MobleApplicationPassPacketsToSIGModels+0x14e>
 801bef4:	e7bb      	b.n	801be6e <MobleApplicationPassPacketsToSIGModels+0xe2>
 801bef6:	9a05      	ldr	r2, [sp, #20]
 801bef8:	5ca2      	ldrb	r2, [r4, r2]
 801befa:	2a00      	cmp	r2, #0
 801befc:	d0f7      	beq.n	801beee <MobleApplicationPassPacketsToSIGModels+0x162>
 801befe:	9901      	ldr	r1, [sp, #4]
 801bf00:	9a06      	ldr	r2, [sp, #24]
 801bf02:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801bf06:	9903      	ldr	r1, [sp, #12]
 801bf08:	428a      	cmp	r2, r1
 801bf0a:	d1f0      	bne.n	801beee <MobleApplicationPassPacketsToSIGModels+0x162>
 801bf0c:	f894 209a 	ldrb.w	r2, [r4, #154]	; 0x9a
 801bf10:	2a01      	cmp	r2, #1
 801bf12:	d1ec      	bne.n	801beee <MobleApplicationPassPacketsToSIGModels+0x162>
 801bf14:	f8df 9088 	ldr.w	r9, [pc, #136]	; 801bfa0 <MobleApplicationPassPacketsToSIGModels+0x214>
 801bf18:	f859 2b04 	ldr.w	r2, [r9], #4
 801bf1c:	9307      	str	r3, [sp, #28]
 801bf1e:	4616      	mov	r6, r2
 801bf20:	4659      	mov	r1, fp
 801bf22:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801bf24:	4628      	mov	r0, r5
 801bf26:	47b0      	blx	r6
 801bf28:	2801      	cmp	r0, #1
 801bf2a:	f67f af5a 	bls.w	801bde2 <MobleApplicationPassPacketsToSIGModels+0x56>
 801bf2e:	4b1a      	ldr	r3, [pc, #104]	; (801bf98 <MobleApplicationPassPacketsToSIGModels+0x20c>)
 801bf30:	4599      	cmp	r9, r3
 801bf32:	9b07      	ldr	r3, [sp, #28]
 801bf34:	d1f0      	bne.n	801bf18 <MobleApplicationPassPacketsToSIGModels+0x18c>
 801bf36:	e7da      	b.n	801beee <MobleApplicationPassPacketsToSIGModels+0x162>
 801bf38:	f8df 9064 	ldr.w	r9, [pc, #100]	; 801bfa0 <MobleApplicationPassPacketsToSIGModels+0x214>
 801bf3c:	4e17      	ldr	r6, [pc, #92]	; (801bf9c <MobleApplicationPassPacketsToSIGModels+0x210>)
 801bf3e:	f04f 0a38 	mov.w	sl, #56	; 0x38
 801bf42:	f859 8b04 	ldr.w	r8, [r9], #4
 801bf46:	b2e3      	uxtb	r3, r4
 801bf48:	b944      	cbnz	r4, 801bf5c <MobleApplicationPassPacketsToSIGModels+0x1d0>
 801bf4a:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 801bf4e:	4623      	mov	r3, r4
 801bf50:	4659      	mov	r1, fp
 801bf52:	4628      	mov	r0, r5
 801bf54:	47c0      	blx	r8
 801bf56:	2801      	cmp	r0, #1
 801bf58:	d818      	bhi.n	801bf8c <MobleApplicationPassPacketsToSIGModels+0x200>
 801bf5a:	e75d      	b.n	801be18 <MobleApplicationPassPacketsToSIGModels+0x8c>
 801bf5c:	2b01      	cmp	r3, #1
 801bf5e:	d103      	bne.n	801bf68 <MobleApplicationPassPacketsToSIGModels+0x1dc>
 801bf60:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
 801bf64:	2300      	movs	r3, #0
 801bf66:	e7f3      	b.n	801bf50 <MobleApplicationPassPacketsToSIGModels+0x1c4>
 801bf68:	2700      	movs	r7, #0
 801bf6a:	b2fa      	uxtb	r2, r7
 801bf6c:	fb0a 6202 	mla	r2, sl, r2, r6
 801bf70:	2300      	movs	r3, #0
 801bf72:	f8d2 2124 	ldr.w	r2, [r2, #292]	; 0x124
 801bf76:	4659      	mov	r1, fp
 801bf78:	4628      	mov	r0, r5
 801bf7a:	47c0      	blx	r8
 801bf7c:	2802      	cmp	r0, #2
 801bf7e:	d1ea      	bne.n	801bf56 <MobleApplicationPassPacketsToSIGModels+0x1ca>
 801bf80:	f896 238c 	ldrb.w	r2, [r6, #908]	; 0x38c
 801bf84:	3701      	adds	r7, #1
 801bf86:	b2fb      	uxtb	r3, r7
 801bf88:	429a      	cmp	r2, r3
 801bf8a:	d8ee      	bhi.n	801bf6a <MobleApplicationPassPacketsToSIGModels+0x1de>
 801bf8c:	3401      	adds	r4, #1
 801bf8e:	2c03      	cmp	r4, #3
 801bf90:	d1d7      	bne.n	801bf42 <MobleApplicationPassPacketsToSIGModels+0x1b6>
 801bf92:	e740      	b.n	801be16 <MobleApplicationPassPacketsToSIGModels+0x8a>
 801bf94:	200003c4 	.word	0x200003c4
 801bf98:	08031720 	.word	0x08031720
 801bf9c:	20000318 	.word	0x20000318
 801bfa0:	08031714 	.word	0x08031714

0801bfa4 <MobleApplicationPassPacketsToVENDORModelsNew>:
 801bfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfa8:	6803      	ldr	r3, [r0, #0]
 801bfaa:	f891 900c 	ldrb.w	r9, [r1, #12]
 801bfae:	7f1b      	ldrb	r3, [r3, #28]
 801bfb0:	4f56      	ldr	r7, [pc, #344]	; (801c10c <MobleApplicationPassPacketsToVENDORModelsNew+0x168>)
 801bfb2:	b087      	sub	sp, #28
 801bfb4:	4605      	mov	r5, r0
 801bfb6:	9300      	str	r3, [sp, #0]
 801bfb8:	89cb      	ldrh	r3, [r1, #14]
 801bfba:	9301      	str	r3, [sp, #4]
 801bfbc:	f109 03a6 	add.w	r3, r9, #166	; 0xa6
 801bfc0:	468a      	mov	sl, r1
 801bfc2:	2600      	movs	r6, #0
 801bfc4:	9302      	str	r3, [sp, #8]
 801bfc6:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 801bfca:	8838      	ldrh	r0, [r7, #0]
 801bfcc:	4290      	cmp	r0, r2
 801bfce:	b2f3      	uxtb	r3, r6
 801bfd0:	d13d      	bne.n	801c04e <MobleApplicationPassPacketsToVENDORModelsNew+0xaa>
 801bfd2:	463c      	mov	r4, r7
 801bfd4:	f04f 0801 	mov.w	r8, #1
 801bfd8:	9a02      	ldr	r2, [sp, #8]
 801bfda:	5ca2      	ldrb	r2, [r4, r2]
 801bfdc:	b19a      	cbz	r2, 801c006 <MobleApplicationPassPacketsToVENDORModelsNew+0x62>
 801bfde:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 801bfe2:	9901      	ldr	r1, [sp, #4]
 801bfe4:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 801bfe8:	428a      	cmp	r2, r1
 801bfea:	d10c      	bne.n	801c006 <MobleApplicationPassPacketsToVENDORModelsNew+0x62>
 801bfec:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 801bff0:	2a01      	cmp	r2, #1
 801bff2:	d108      	bne.n	801c006 <MobleApplicationPassPacketsToVENDORModelsNew+0x62>
 801bff4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801bff6:	9303      	str	r3, [sp, #12]
 801bff8:	4651      	mov	r1, sl
 801bffa:	4628      	mov	r0, r5
 801bffc:	f7ff f85d 	bl	801b0ba <MobleModelBluemeshNewPacket_ExtCall>
 801c000:	2801      	cmp	r0, #1
 801c002:	9b03      	ldr	r3, [sp, #12]
 801c004:	d909      	bls.n	801c01a <MobleApplicationPassPacketsToVENDORModelsNew+0x76>
 801c006:	f108 0801 	add.w	r8, r8, #1
 801c00a:	fa5f f888 	uxtb.w	r8, r8
 801c00e:	f1b8 0f0c 	cmp.w	r8, #12
 801c012:	f104 0438 	add.w	r4, r4, #56	; 0x38
 801c016:	d1df      	bne.n	801bfd8 <MobleApplicationPassPacketsToVENDORModelsNew+0x34>
 801c018:	2002      	movs	r0, #2
 801c01a:	f9ba 300a 	ldrsh.w	r3, [sl, #10]
 801c01e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801c022:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801c026:	d105      	bne.n	801c034 <MobleApplicationPassPacketsToVENDORModelsNew+0x90>
 801c028:	9b00      	ldr	r3, [sp, #0]
 801c02a:	2b01      	cmp	r3, #1
 801c02c:	d902      	bls.n	801c034 <MobleApplicationPassPacketsToVENDORModelsNew+0x90>
 801c02e:	3b01      	subs	r3, #1
 801c030:	42b3      	cmp	r3, r6
 801c032:	d101      	bne.n	801c038 <MobleApplicationPassPacketsToVENDORModelsNew+0x94>
 801c034:	2802      	cmp	r0, #2
 801c036:	d107      	bne.n	801c048 <MobleApplicationPassPacketsToVENDORModelsNew+0xa4>
 801c038:	9a00      	ldr	r2, [sp, #0]
 801c03a:	3601      	adds	r6, #1
 801c03c:	b2f3      	uxtb	r3, r6
 801c03e:	429a      	cmp	r2, r3
 801c040:	f507 7739 	add.w	r7, r7, #740	; 0x2e4
 801c044:	d8bf      	bhi.n	801bfc6 <MobleApplicationPassPacketsToVENDORModelsNew+0x22>
 801c046:	2002      	movs	r0, #2
 801c048:	b007      	add	sp, #28
 801c04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c04e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 801c052:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 801c056:	d1df      	bne.n	801c018 <MobleApplicationPassPacketsToVENDORModelsNew+0x74>
 801c058:	463c      	mov	r4, r7
 801c05a:	f04f 0b00 	mov.w	fp, #0
 801c05e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801c060:	b93a      	cbnz	r2, 801c072 <MobleApplicationPassPacketsToVENDORModelsNew+0xce>
 801c062:	f10b 0b0e 	add.w	fp, fp, #14
 801c066:	f1bb 0f9a 	cmp.w	fp, #154	; 0x9a
 801c06a:	f104 0438 	add.w	r4, r4, #56	; 0x38
 801c06e:	d1f6      	bne.n	801c05e <MobleApplicationPassPacketsToVENDORModelsNew+0xba>
 801c070:	e7d2      	b.n	801c018 <MobleApplicationPassPacketsToVENDORModelsNew+0x74>
 801c072:	f8ba 000a 	ldrh.w	r0, [sl, #10]
 801c076:	f64f 71fb 	movw	r1, #65531	; 0xfffb
 801c07a:	4288      	cmp	r0, r1
 801c07c:	d917      	bls.n	801c0ae <MobleApplicationPassPacketsToVENDORModelsNew+0x10a>
 801c07e:	9902      	ldr	r1, [sp, #8]
 801c080:	5c60      	ldrb	r0, [r4, r1]
 801c082:	2800      	cmp	r0, #0
 801c084:	d0ed      	beq.n	801c062 <MobleApplicationPassPacketsToVENDORModelsNew+0xbe>
 801c086:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 801c08a:	9901      	ldr	r1, [sp, #4]
 801c08c:	f830 0019 	ldrh.w	r0, [r0, r9, lsl #1]
 801c090:	4288      	cmp	r0, r1
 801c092:	d1e6      	bne.n	801c062 <MobleApplicationPassPacketsToVENDORModelsNew+0xbe>
 801c094:	f894 0099 	ldrb.w	r0, [r4, #153]	; 0x99
 801c098:	2801      	cmp	r0, #1
 801c09a:	d1e2      	bne.n	801c062 <MobleApplicationPassPacketsToVENDORModelsNew+0xbe>
 801c09c:	4651      	mov	r1, sl
 801c09e:	4628      	mov	r0, r5
 801c0a0:	9303      	str	r3, [sp, #12]
 801c0a2:	f7ff f80a 	bl	801b0ba <MobleModelBluemeshNewPacket_ExtCall>
 801c0a6:	2801      	cmp	r0, #1
 801c0a8:	9b03      	ldr	r3, [sp, #12]
 801c0aa:	d8da      	bhi.n	801c062 <MobleApplicationPassPacketsToVENDORModelsNew+0xbe>
 801c0ac:	e7b5      	b.n	801c01a <MobleApplicationPassPacketsToVENDORModelsNew+0x76>
 801c0ae:	f104 0280 	add.w	r2, r4, #128	; 0x80
 801c0b2:	9203      	str	r2, [sp, #12]
 801c0b4:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 801c0b8:	f04f 0801 	mov.w	r8, #1
 801c0bc:	9204      	str	r2, [sp, #16]
 801c0be:	9903      	ldr	r1, [sp, #12]
 801c0c0:	f8ba 000a 	ldrh.w	r0, [sl, #10]
 801c0c4:	f831 2b02 	ldrh.w	r2, [r1], #2
 801c0c8:	9103      	str	r1, [sp, #12]
 801c0ca:	4290      	cmp	r0, r2
 801c0cc:	d115      	bne.n	801c0fa <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 801c0ce:	9a02      	ldr	r2, [sp, #8]
 801c0d0:	5ca2      	ldrb	r2, [r4, r2]
 801c0d2:	b192      	cbz	r2, 801c0fa <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 801c0d4:	9a04      	ldr	r2, [sp, #16]
 801c0d6:	9901      	ldr	r1, [sp, #4]
 801c0d8:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 801c0dc:	428a      	cmp	r2, r1
 801c0de:	d10c      	bne.n	801c0fa <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 801c0e0:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 801c0e4:	2a01      	cmp	r2, #1
 801c0e6:	d108      	bne.n	801c0fa <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 801c0e8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801c0ea:	9305      	str	r3, [sp, #20]
 801c0ec:	4651      	mov	r1, sl
 801c0ee:	4628      	mov	r0, r5
 801c0f0:	f7fe ffe3 	bl	801b0ba <MobleModelBluemeshNewPacket_ExtCall>
 801c0f4:	2801      	cmp	r0, #1
 801c0f6:	9b05      	ldr	r3, [sp, #20]
 801c0f8:	d98f      	bls.n	801c01a <MobleApplicationPassPacketsToVENDORModelsNew+0x76>
 801c0fa:	f108 0801 	add.w	r8, r8, #1
 801c0fe:	fa5f f888 	uxtb.w	r8, r8
 801c102:	f1b8 0f0b 	cmp.w	r8, #11
 801c106:	d1da      	bne.n	801c0be <MobleApplicationPassPacketsToVENDORModelsNew+0x11a>
 801c108:	e7ab      	b.n	801c062 <MobleApplicationPassPacketsToVENDORModelsNew+0xbe>
 801c10a:	bf00      	nop
 801c10c:	200003c4 	.word	0x200003c4

0801c110 <MobleApplicationProcess>:
 801c110:	b570      	push	{r4, r5, r6, lr}
 801c112:	4d0d      	ldr	r5, [pc, #52]	; (801c148 <MobleApplicationProcess+0x38>)
 801c114:	f8d5 1954 	ldr.w	r1, [r5, #2388]	; 0x954
 801c118:	4606      	mov	r6, r0
 801c11a:	b199      	cbz	r1, 801c144 <MobleApplicationProcess+0x34>
 801c11c:	f7ff fe36 	bl	801bd8c <MobleApplicationPassPacketsToSIGModels>
 801c120:	2801      	cmp	r0, #1
 801c122:	4604      	mov	r4, r0
 801c124:	d905      	bls.n	801c132 <MobleApplicationProcess+0x22>
 801c126:	f8d5 1954 	ldr.w	r1, [r5, #2388]	; 0x954
 801c12a:	4630      	mov	r0, r6
 801c12c:	f7ff ff3a 	bl	801bfa4 <MobleApplicationPassPacketsToVENDORModelsNew>
 801c130:	4604      	mov	r4, r0
 801c132:	f8d5 0954 	ldr.w	r0, [r5, #2388]	; 0x954
 801c136:	f7fe ff27 	bl	801af88 <MobleMemFree>
 801c13a:	2300      	movs	r3, #0
 801c13c:	f8c5 3954 	str.w	r3, [r5, #2388]	; 0x954
 801c140:	4620      	mov	r0, r4
 801c142:	bd70      	pop	{r4, r5, r6, pc}
 801c144:	2401      	movs	r4, #1
 801c146:	e7fb      	b.n	801c140 <MobleApplicationProcess+0x30>
 801c148:	20001410 	.word	0x20001410

0801c14c <MobleApplicationGetSigModelList>:
 801c14c:	b538      	push	{r3, r4, r5, lr}
 801c14e:	460c      	mov	r4, r1
 801c150:	b981      	cbnz	r1, 801c174 <MobleApplicationGetSigModelList+0x28>
 801c152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801c156:	f840 3b04 	str.w	r3, [r0], #4
 801c15a:	2502      	movs	r5, #2
 801c15c:	4621      	mov	r1, r4
 801c15e:	f7f7 f90d 	bl	801337c <ApplicationGetSigModelList>
 801c162:	4428      	add	r0, r5
 801c164:	b240      	sxtb	r0, r0
 801c166:	1e83      	subs	r3, r0, #2
 801c168:	2b0a      	cmp	r3, #10
 801c16a:	d905      	bls.n	801c178 <MobleApplicationGetSigModelList+0x2c>
 801c16c:	b95c      	cbnz	r4, 801c186 <MobleApplicationGetSigModelList+0x3a>
 801c16e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c172:	e007      	b.n	801c184 <MobleApplicationGetSigModelList+0x38>
 801c174:	2500      	movs	r5, #0
 801c176:	e7f1      	b.n	801c15c <MobleApplicationGetSigModelList+0x10>
 801c178:	280a      	cmp	r0, #10
 801c17a:	dd03      	ble.n	801c184 <MobleApplicationGetSigModelList+0x38>
 801c17c:	2c00      	cmp	r4, #0
 801c17e:	bf18      	it	ne
 801c180:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801c184:	bd38      	pop	{r3, r4, r5, pc}
 801c186:	280b      	cmp	r0, #11
 801c188:	bfa8      	it	ge
 801c18a:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
 801c18e:	e7f9      	b.n	801c184 <MobleApplicationGetSigModelList+0x38>

0801c190 <MobleApplicationGetVendorModelList>:
 801c190:	b508      	push	{r3, lr}
 801c192:	f7f7 f925 	bl	80133e0 <ApplicationGetVendorModelList>
 801c196:	b240      	sxtb	r0, r0
 801c198:	2802      	cmp	r0, #2
 801c19a:	bfa8      	it	ge
 801c19c:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
 801c1a0:	bd08      	pop	{r3, pc}

0801c1a2 <MobleApplicationModelSupported>:
 801c1a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c1a4:	f030 0302 	bics.w	r3, r0, #2
 801c1a8:	bf06      	itte	eq
 801c1aa:	fab1 f481 	clzeq	r4, r1
 801c1ae:	0964      	lsreq	r4, r4, #5
 801c1b0:	2400      	movne	r4, #0
 801c1b2:	4605      	mov	r5, r0
 801c1b4:	9101      	str	r1, [sp, #4]
 801c1b6:	f7f7 f97b 	bl	80134b0 <ApplicationChkVendorModelActive>
 801c1ba:	9901      	ldr	r1, [sp, #4]
 801c1bc:	2800      	cmp	r0, #0
 801c1be:	b2a8      	uxth	r0, r5
 801c1c0:	bf18      	it	ne
 801c1c2:	2401      	movne	r4, #1
 801c1c4:	f7f7 f938 	bl	8013438 <ApplicationChkSigModelActive>
 801c1c8:	2800      	cmp	r0, #0
 801c1ca:	bf0c      	ite	eq
 801c1cc:	4620      	moveq	r0, r4
 801c1ce:	2001      	movne	r0, #1
 801c1d0:	b003      	add	sp, #12
 801c1d2:	bd30      	pop	{r4, r5, pc}

0801c1d4 <MobleApplicationUpdateSigModelList>:
 801c1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1d6:	4c1c      	ldr	r4, [pc, #112]	; (801c248 <MobleApplicationUpdateSigModelList+0x74>)
 801c1d8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801c1dc:	bb03      	cbnz	r3, 801c220 <MobleApplicationUpdateSigModelList+0x4c>
 801c1de:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
 801c1e2:	8801      	ldrh	r1, [r0, #0]
 801c1e4:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
 801c1e8:	1e95      	subs	r5, r2, #2
 801c1ea:	8841      	ldrh	r1, [r0, #2]
 801c1ec:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
 801c1f0:	b2ed      	uxtb	r5, r5
 801c1f2:	3004      	adds	r0, #4
 801c1f4:	4915      	ldr	r1, [pc, #84]	; (801c24c <MobleApplicationUpdateSigModelList+0x78>)
 801c1f6:	f44f 7639 	mov.w	r6, #740	; 0x2e4
 801c1fa:	fb06 1103 	mla	r1, r6, r3, r1
 801c1fe:	f04f 0c01 	mov.w	ip, #1
 801c202:	2600      	movs	r6, #0
 801c204:	b2f7      	uxtb	r7, r6
 801c206:	42bd      	cmp	r5, r7
 801c208:	d90e      	bls.n	801c228 <MobleApplicationUpdateSigModelList+0x54>
 801c20a:	f891 7099 	ldrb.w	r7, [r1, #153]	; 0x99
 801c20e:	b927      	cbnz	r7, 801c21a <MobleApplicationUpdateSigModelList+0x46>
 801c210:	f830 7b02 	ldrh.w	r7, [r0], #2
 801c214:	678f      	str	r7, [r1, #120]	; 0x78
 801c216:	f881 c09a 	strb.w	ip, [r1, #154]	; 0x9a
 801c21a:	3601      	adds	r6, #1
 801c21c:	3138      	adds	r1, #56	; 0x38
 801c21e:	e7f1      	b.n	801c204 <MobleApplicationUpdateSigModelList+0x30>
 801c220:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801c224:	42ab      	cmp	r3, r5
 801c226:	d306      	bcc.n	801c236 <MobleApplicationUpdateSigModelList+0x62>
 801c228:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 801c22c:	fb01 4303 	mla	r3, r1, r3, r4
 801c230:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
 801c234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c236:	f44f 7539 	mov.w	r5, #740	; 0x2e4
 801c23a:	fb05 4503 	mla	r5, r5, r3, r4
 801c23e:	4419      	add	r1, r3
 801c240:	f8a5 10ac 	strh.w	r1, [r5, #172]	; 0xac
 801c244:	4615      	mov	r5, r2
 801c246:	e7d5      	b.n	801c1f4 <MobleApplicationUpdateSigModelList+0x20>
 801c248:	20000318 	.word	0x20000318
 801c24c:	200003c4 	.word	0x200003c4

0801c250 <MobleApplicationUpdateVendorModelList>:
 801c250:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c252:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c256:	b9b3      	cbnz	r3, 801c286 <MobleApplicationUpdateVendorModelList+0x36>
 801c258:	3902      	subs	r1, #2
 801c25a:	4d16      	ldr	r5, [pc, #88]	; (801c2b4 <MobleApplicationUpdateVendorModelList+0x64>)
 801c25c:	b2c9      	uxtb	r1, r1
 801c25e:	f8a5 40ac 	strh.w	r4, [r5, #172]	; 0xac
 801c262:	4c15      	ldr	r4, [pc, #84]	; (801c2b8 <MobleApplicationUpdateVendorModelList+0x68>)
 801c264:	f44f 7539 	mov.w	r5, #740	; 0x2e4
 801c268:	fb05 4403 	mla	r4, r5, r3, r4
 801c26c:	2701      	movs	r7, #1
 801c26e:	2500      	movs	r5, #0
 801c270:	b2ee      	uxtb	r6, r5
 801c272:	42b1      	cmp	r1, r6
 801c274:	d812      	bhi.n	801c29c <MobleApplicationUpdateVendorModelList+0x4c>
 801c276:	490f      	ldr	r1, [pc, #60]	; (801c2b4 <MobleApplicationUpdateVendorModelList+0x64>)
 801c278:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 801c27c:	fb00 1303 	mla	r3, r0, r3, r1
 801c280:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d
 801c284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c286:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801c28a:	42ab      	cmp	r3, r5
 801c28c:	d2e9      	bcs.n	801c262 <MobleApplicationUpdateVendorModelList+0x12>
 801c28e:	4d09      	ldr	r5, [pc, #36]	; (801c2b4 <MobleApplicationUpdateVendorModelList+0x64>)
 801c290:	f44f 7639 	mov.w	r6, #740	; 0x2e4
 801c294:	fb06 5503 	mla	r5, r6, r3, r5
 801c298:	441c      	add	r4, r3
 801c29a:	e7e0      	b.n	801c25e <MobleApplicationUpdateVendorModelList+0xe>
 801c29c:	f894 609a 	ldrb.w	r6, [r4, #154]	; 0x9a
 801c2a0:	b926      	cbnz	r6, 801c2ac <MobleApplicationUpdateVendorModelList+0x5c>
 801c2a2:	f850 6b04 	ldr.w	r6, [r0], #4
 801c2a6:	67a6      	str	r6, [r4, #120]	; 0x78
 801c2a8:	f884 7099 	strb.w	r7, [r4, #153]	; 0x99
 801c2ac:	3501      	adds	r5, #1
 801c2ae:	3438      	adds	r4, #56	; 0x38
 801c2b0:	e7de      	b.n	801c270 <MobleApplicationUpdateVendorModelList+0x20>
 801c2b2:	bf00      	nop
 801c2b4:	20000318 	.word	0x20000318
 801c2b8:	200003c4 	.word	0x200003c4

0801c2bc <MobleTransportIsBusy>:
 801c2bc:	b508      	push	{r3, lr}
 801c2be:	b930      	cbnz	r0, 801c2ce <MobleTransportIsBusy+0x12>
 801c2c0:	4b05      	ldr	r3, [pc, #20]	; (801c2d8 <MobleTransportIsBusy+0x1c>)
 801c2c2:	4a06      	ldr	r2, [pc, #24]	; (801c2dc <MobleTransportIsBusy+0x20>)
 801c2c4:	4806      	ldr	r0, [pc, #24]	; (801c2e0 <MobleTransportIsBusy+0x24>)
 801c2c6:	f240 4152 	movw	r1, #1106	; 0x452
 801c2ca:	f00c fbe7 	bl	8028a9c <__assert_func>
 801c2ce:	6880      	ldr	r0, [r0, #8]
 801c2d0:	3800      	subs	r0, #0
 801c2d2:	bf18      	it	ne
 801c2d4:	2001      	movne	r0, #1
 801c2d6:	bd08      	pop	{r3, pc}
 801c2d8:	08033440 	.word	0x08033440
 801c2dc:	08031720 	.word	0x08031720
 801c2e0:	08033780 	.word	0x08033780

0801c2e4 <MobleTransSarInit>:
 801c2e4:	b510      	push	{r4, lr}
 801c2e6:	4c1c      	ldr	r4, [pc, #112]	; (801c358 <MobleTransSarInit+0x74>)
 801c2e8:	f8d4 12e0 	ldr.w	r1, [r4, #736]	; 0x2e0
 801c2ec:	b319      	cbz	r1, 801c336 <MobleTransSarInit+0x52>
 801c2ee:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 801c2f2:	b943      	cbnz	r3, 801c306 <MobleTransSarInit+0x22>
 801c2f4:	f894 02dc 	ldrb.w	r0, [r4, #732]	; 0x2dc
 801c2f8:	232c      	movs	r3, #44	; 0x2c
 801c2fa:	4358      	muls	r0, r3
 801c2fc:	f7fe fdba 	bl	801ae74 <MobleMemAlloc>
 801c300:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
 801c304:	b330      	cbz	r0, 801c354 <MobleTransSarInit+0x70>
 801c306:	f8d4 3300 	ldr.w	r3, [r4, #768]	; 0x300
 801c30a:	b933      	cbnz	r3, 801c31a <MobleTransSarInit+0x36>
 801c30c:	f8b4 094c 	ldrh.w	r0, [r4, #2380]	; 0x94c
 801c310:	f7fe fdb0 	bl	801ae74 <MobleMemAlloc>
 801c314:	f8c4 0300 	str.w	r0, [r4, #768]	; 0x300
 801c318:	b1e0      	cbz	r0, 801c354 <MobleTransSarInit+0x70>
 801c31a:	f8d4 332c 	ldr.w	r3, [r4, #812]	; 0x32c
 801c31e:	b933      	cbnz	r3, 801c32e <MobleTransSarInit+0x4a>
 801c320:	f8b4 094c 	ldrh.w	r0, [r4, #2380]	; 0x94c
 801c324:	f7fe fda6 	bl	801ae74 <MobleMemAlloc>
 801c328:	f8c4 032c 	str.w	r0, [r4, #812]	; 0x32c
 801c32c:	b190      	cbz	r0, 801c354 <MobleTransSarInit+0x70>
 801c32e:	2000      	movs	r0, #0
 801c330:	f8c4 0958 	str.w	r0, [r4, #2392]	; 0x958
 801c334:	e00f      	b.n	801c356 <MobleTransSarInit+0x72>
 801c336:	2260      	movs	r2, #96	; 0x60
 801c338:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
 801c33c:	f00c fc40 	bl	8028bc0 <memset>
 801c340:	f894 02dc 	ldrb.w	r0, [r4, #732]	; 0x2dc
 801c344:	232c      	movs	r3, #44	; 0x2c
 801c346:	4358      	muls	r0, r3
 801c348:	f7fe fd94 	bl	801ae74 <MobleMemAlloc>
 801c34c:	f8c4 02e0 	str.w	r0, [r4, #736]	; 0x2e0
 801c350:	2800      	cmp	r0, #0
 801c352:	d1cc      	bne.n	801c2ee <MobleTransSarInit+0xa>
 801c354:	2002      	movs	r0, #2
 801c356:	bd10      	pop	{r4, pc}
 801c358:	20001410 	.word	0x20001410

0801c35c <MobleTransportParseHdr>:
 801c35c:	b530      	push	{r4, r5, lr}
 801c35e:	6803      	ldr	r3, [r0, #0]
 801c360:	7889      	ldrb	r1, [r1, #2]
 801c362:	ba1b      	rev	r3, r3
 801c364:	0fdc      	lsrs	r4, r3, #31
 801c366:	bb01      	cbnz	r1, 801c3aa <MobleTransportParseHdr+0x4e>
 801c368:	0f99      	lsrs	r1, r3, #30
 801c36a:	b93c      	cbnz	r4, 801c37c <MobleTransportParseHdr+0x20>
 801c36c:	7014      	strb	r4, [r2, #0]
 801c36e:	7054      	strb	r4, [r2, #1]
 801c370:	7091      	strb	r1, [r2, #2]
 801c372:	7803      	ldrb	r3, [r0, #0]
 801c374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c378:	70d3      	strb	r3, [r2, #3]
 801c37a:	bd30      	pop	{r4, r5, pc}
 801c37c:	2401      	movs	r4, #1
 801c37e:	4021      	ands	r1, r4
 801c380:	7014      	strb	r4, [r2, #0]
 801c382:	7054      	strb	r4, [r2, #1]
 801c384:	7091      	strb	r1, [r2, #2]
 801c386:	7801      	ldrb	r1, [r0, #0]
 801c388:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801c38c:	70d1      	strb	r1, [r2, #3]
 801c38e:	f3c3 51c0 	ubfx	r1, r3, #23, #1
 801c392:	7111      	strb	r1, [r2, #4]
 801c394:	f3c3 218c 	ubfx	r1, r3, #10, #13
 801c398:	f8a2 1005 	strh.w	r1, [r2, #5]
 801c39c:	f3c3 1144 	ubfx	r1, r3, #5, #5
 801c3a0:	f003 031f 	and.w	r3, r3, #31
 801c3a4:	71d1      	strb	r1, [r2, #7]
 801c3a6:	7213      	strb	r3, [r2, #8]
 801c3a8:	e7e7      	b.n	801c37a <MobleTransportParseHdr+0x1e>
 801c3aa:	7801      	ldrb	r1, [r0, #0]
 801c3ac:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 801c3b0:	b974      	cbnz	r4, 801c3d0 <MobleTransportParseHdr+0x74>
 801c3b2:	b94d      	cbnz	r5, 801c3c8 <MobleTransportParseHdr+0x6c>
 801c3b4:	f3c3 51c0 	ubfx	r1, r3, #23, #1
 801c3b8:	2002      	movs	r0, #2
 801c3ba:	f3c3 238c 	ubfx	r3, r3, #10, #13
 801c3be:	7010      	strb	r0, [r2, #0]
 801c3c0:	7055      	strb	r5, [r2, #1]
 801c3c2:	70d1      	strb	r1, [r2, #3]
 801c3c4:	8093      	strh	r3, [r2, #4]
 801c3c6:	e7d8      	b.n	801c37a <MobleTransportParseHdr+0x1e>
 801c3c8:	2303      	movs	r3, #3
 801c3ca:	7013      	strb	r3, [r2, #0]
 801c3cc:	7055      	strb	r5, [r2, #1]
 801c3ce:	e7d4      	b.n	801c37a <MobleTransportParseHdr+0x1e>
 801c3d0:	2401      	movs	r4, #1
 801c3d2:	7014      	strb	r4, [r2, #0]
 801c3d4:	7054      	strb	r4, [r2, #1]
 801c3d6:	f3c3 7480 	ubfx	r4, r3, #30, #1
 801c3da:	7094      	strb	r4, [r2, #2]
 801c3dc:	7800      	ldrb	r0, [r0, #0]
 801c3de:	7255      	strb	r5, [r2, #9]
 801c3e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801c3e4:	70d0      	strb	r0, [r2, #3]
 801c3e6:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 801c3ea:	7110      	strb	r0, [r2, #4]
 801c3ec:	e7d2      	b.n	801c394 <MobleTransportParseHdr+0x38>
	...

0801c3f0 <MobleTransportRenderHdr>:
 801c3f0:	b538      	push	{r3, r4, r5, lr}
 801c3f2:	7803      	ldrb	r3, [r0, #0]
 801c3f4:	2b04      	cmp	r3, #4
 801c3f6:	d906      	bls.n	801c406 <MobleTransportRenderHdr+0x16>
 801c3f8:	4b37      	ldr	r3, [pc, #220]	; (801c4d8 <MobleTransportRenderHdr+0xe8>)
 801c3fa:	4a38      	ldr	r2, [pc, #224]	; (801c4dc <MobleTransportRenderHdr+0xec>)
 801c3fc:	4838      	ldr	r0, [pc, #224]	; (801c4e0 <MobleTransportRenderHdr+0xf0>)
 801c3fe:	f240 1121 	movw	r1, #289	; 0x121
 801c402:	f00c fb4b 	bl	8028a9c <__assert_func>
 801c406:	3b01      	subs	r3, #1
 801c408:	2b03      	cmp	r3, #3
 801c40a:	d803      	bhi.n	801c414 <MobleTransportRenderHdr+0x24>
 801c40c:	e8df f003 	tbb	[pc, r3]
 801c410:	46443411 	.word	0x46443411
 801c414:	7883      	ldrb	r3, [r0, #2]
 801c416:	b153      	cbz	r3, 801c42e <MobleTransportRenderHdr+0x3e>
 801c418:	78c2      	ldrb	r2, [r0, #3]
 801c41a:	7840      	ldrb	r0, [r0, #1]
 801c41c:	079b      	lsls	r3, r3, #30
 801c41e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801c422:	0692      	lsls	r2, r2, #26
 801c424:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
 801c428:	0e1b      	lsrs	r3, r3, #24
 801c42a:	700b      	strb	r3, [r1, #0]
 801c42c:	e021      	b.n	801c472 <MobleTransportRenderHdr+0x82>
 801c42e:	461a      	mov	r2, r3
 801c430:	e7f3      	b.n	801c41a <MobleTransportRenderHdr+0x2a>
 801c432:	7883      	ldrb	r3, [r0, #2]
 801c434:	b1f3      	cbz	r3, 801c474 <MobleTransportRenderHdr+0x84>
 801c436:	78c2      	ldrb	r2, [r0, #3]
 801c438:	7904      	ldrb	r4, [r0, #4]
 801c43a:	079b      	lsls	r3, r3, #30
 801c43c:	0692      	lsls	r2, r2, #26
 801c43e:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 801c442:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
 801c446:	f8b0 2005 	ldrh.w	r2, [r0, #5]
 801c44a:	04d2      	lsls	r2, r2, #19
 801c44c:	ea43 2352 	orr.w	r3, r3, r2, lsr #9
 801c450:	79c2      	ldrb	r2, [r0, #7]
 801c452:	06d2      	lsls	r2, r2, #27
 801c454:	ea43 5392 	orr.w	r3, r3, r2, lsr #22
 801c458:	7a02      	ldrb	r2, [r0, #8]
 801c45a:	f002 021f 	and.w	r2, r2, #31
 801c45e:	4313      	orrs	r3, r2
 801c460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801c464:	0e1a      	lsrs	r2, r3, #24
 801c466:	700a      	strb	r2, [r1, #0]
 801c468:	0c1a      	lsrs	r2, r3, #16
 801c46a:	704a      	strb	r2, [r1, #1]
 801c46c:	0a1a      	lsrs	r2, r3, #8
 801c46e:	708a      	strb	r2, [r1, #2]
 801c470:	70cb      	strb	r3, [r1, #3]
 801c472:	bd38      	pop	{r3, r4, r5, pc}
 801c474:	461a      	mov	r2, r3
 801c476:	e7df      	b.n	801c438 <MobleTransportRenderHdr+0x48>
 801c478:	78c2      	ldrb	r2, [r0, #3]
 801c47a:	7843      	ldrb	r3, [r0, #1]
 801c47c:	05d2      	lsls	r2, r2, #23
 801c47e:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 801c482:	8883      	ldrh	r3, [r0, #4]
 801c484:	04db      	lsls	r3, r3, #19
 801c486:	ea42 2353 	orr.w	r3, r2, r3, lsr #9
 801c48a:	0e12      	lsrs	r2, r2, #24
 801c48c:	700a      	strb	r2, [r1, #0]
 801c48e:	0c1a      	lsrs	r2, r3, #16
 801c490:	0a1b      	lsrs	r3, r3, #8
 801c492:	704a      	strb	r2, [r1, #1]
 801c494:	708b      	strb	r3, [r1, #2]
 801c496:	e7ec      	b.n	801c472 <MobleTransportRenderHdr+0x82>
 801c498:	7843      	ldrb	r3, [r0, #1]
 801c49a:	e7c6      	b.n	801c42a <MobleTransportRenderHdr+0x3a>
 801c49c:	78c4      	ldrb	r4, [r0, #3]
 801c49e:	7885      	ldrb	r5, [r0, #2]
 801c4a0:	7842      	ldrb	r2, [r0, #1]
 801c4a2:	7900      	ldrb	r0, [r0, #4]
 801c4a4:	f004 033f 	and.w	r3, r4, #63	; 0x3f
 801c4a8:	01db      	lsls	r3, r3, #7
 801c4aa:	ea43 0355 	orr.w	r3, r3, r5, lsr #1
 801c4ae:	029b      	lsls	r3, r3, #10
 801c4b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c4b4:	f000 0207 	and.w	r2, r0, #7
 801c4b8:	0092      	lsls	r2, r2, #2
 801c4ba:	ea42 1294 	orr.w	r2, r2, r4, lsr #6
 801c4be:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801c4c2:	0e1a      	lsrs	r2, r3, #24
 801c4c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 801c4c8:	700a      	strb	r2, [r1, #0]
 801c4ca:	0c1a      	lsrs	r2, r3, #16
 801c4cc:	0a1b      	lsrs	r3, r3, #8
 801c4ce:	704a      	strb	r2, [r1, #1]
 801c4d0:	708b      	strb	r3, [r1, #2]
 801c4d2:	70c8      	strb	r0, [r1, #3]
 801c4d4:	e7cd      	b.n	801c472 <MobleTransportRenderHdr+0x82>
 801c4d6:	bf00      	nop
 801c4d8:	080337ce 	.word	0x080337ce
 801c4dc:	08031735 	.word	0x08031735
 801c4e0:	080338d0 	.word	0x080338d0

0801c4e4 <MobleNetworkReplayCacheClear>:
 801c4e4:	b570      	push	{r4, r5, r6, lr}
 801c4e6:	b928      	cbnz	r0, 801c4f4 <MobleNetworkReplayCacheClear+0x10>
 801c4e8:	4b14      	ldr	r3, [pc, #80]	; (801c53c <MobleNetworkReplayCacheClear+0x58>)
 801c4ea:	4a15      	ldr	r2, [pc, #84]	; (801c540 <MobleNetworkReplayCacheClear+0x5c>)
 801c4ec:	4815      	ldr	r0, [pc, #84]	; (801c544 <MobleNetworkReplayCacheClear+0x60>)
 801c4ee:	2122      	movs	r1, #34	; 0x22
 801c4f0:	f00c fad4 	bl	8028a9c <__assert_func>
 801c4f4:	23a0      	movs	r3, #160	; 0xa0
 801c4f6:	f001 0101 	and.w	r1, r1, #1
 801c4fa:	fb03 0101 	mla	r1, r3, r1, r0
 801c4fe:	2300      	movs	r3, #0
 801c500:	75cb      	strb	r3, [r1, #23]
 801c502:	77cb      	strb	r3, [r1, #31]
 801c504:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
 801c508:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
 801c50c:	f881 3037 	strb.w	r3, [r1, #55]	; 0x37
 801c510:	f890 61d0 	ldrb.w	r6, [r0, #464]	; 0x1d0
 801c514:	2505      	movs	r5, #5
 801c516:	461c      	mov	r4, r3
 801c518:	18f2      	adds	r2, r6, r3
 801c51a:	fbb2 f1f5 	udiv	r1, r2, r5
 801c51e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801c522:	1a52      	subs	r2, r2, r1
 801c524:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 801c528:	3301      	adds	r3, #1
 801c52a:	2b05      	cmp	r3, #5
 801c52c:	f8a2 4180 	strh.w	r4, [r2, #384]	; 0x180
 801c530:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
 801c534:	f882 418d 	strb.w	r4, [r2, #397]	; 0x18d
 801c538:	d1ee      	bne.n	801c518 <MobleNetworkReplayCacheClear+0x34>
 801c53a:	bd70      	pop	{r4, r5, r6, pc}
 801c53c:	08033440 	.word	0x08033440
 801c540:	0803174d 	.word	0x0803174d
 801c544:	0803391e 	.word	0x0803391e

0801c548 <MobleNetworkReplayCacheClearAll>:
 801c548:	b510      	push	{r4, lr}
 801c54a:	2100      	movs	r1, #0
 801c54c:	4604      	mov	r4, r0
 801c54e:	f7ff ffc9 	bl	801c4e4 <MobleNetworkReplayCacheClear>
 801c552:	4620      	mov	r0, r4
 801c554:	2101      	movs	r1, #1
 801c556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c55a:	f7ff bfc3 	b.w	801c4e4 <MobleNetworkReplayCacheClear>

0801c55e <Test_UpperTester_Set07>:
 801c55e:	b508      	push	{r3, lr}
 801c560:	f7ff fff2 	bl	801c548 <MobleNetworkReplayCacheClearAll>
 801c564:	f7ff febe 	bl	801c2e4 <MobleTransSarInit>
 801c568:	2000      	movs	r0, #0
 801c56a:	bd08      	pop	{r3, pc}

0801c56c <BnrgmTransControlProcessHeartbeat>:
 801c56c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c570:	2b03      	cmp	r3, #3
 801c572:	b087      	sub	sp, #28
 801c574:	4605      	mov	r5, r0
 801c576:	d004      	beq.n	801c582 <BnrgmTransControlProcessHeartbeat+0x16>
 801c578:	2402      	movs	r4, #2
 801c57a:	4620      	mov	r0, r4
 801c57c:	b007      	add	sp, #28
 801c57e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c582:	4610      	mov	r0, r2
 801c584:	78cb      	ldrb	r3, [r1, #3]
 801c586:	890e      	ldrh	r6, [r1, #8]
 801c588:	894f      	ldrh	r7, [r1, #10]
 801c58a:	f810 8b01 	ldrb.w	r8, [r0], #1
 801c58e:	9303      	str	r3, [sp, #12]
 801c590:	aa05      	add	r2, sp, #20
 801c592:	2102      	movs	r1, #2
 801c594:	f7fe fe04 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 801c598:	4a10      	ldr	r2, [pc, #64]	; (801c5dc <BnrgmTransControlProcessHeartbeat+0x70>)
 801c59a:	f89d 9014 	ldrb.w	r9, [sp, #20]
 801c59e:	f8d2 495c 	ldr.w	r4, [r2, #2396]	; 0x95c
 801c5a2:	f008 087f 	and.w	r8, r8, #127	; 0x7f
 801c5a6:	2c00      	cmp	r4, #0
 801c5a8:	d0e6      	beq.n	801c578 <BnrgmTransControlProcessHeartbeat+0xc>
 801c5aa:	fa1f f989 	uxth.w	r9, r9
 801c5ae:	9b03      	ldr	r3, [sp, #12]
 801c5b0:	f8cd 9000 	str.w	r9, [sp]
 801c5b4:	4642      	mov	r2, r8
 801c5b6:	4639      	mov	r1, r7
 801c5b8:	4630      	mov	r0, r6
 801c5ba:	47a0      	blx	r4
 801c5bc:	4604      	mov	r4, r0
 801c5be:	2800      	cmp	r0, #0
 801c5c0:	d1da      	bne.n	801c578 <BnrgmTransControlProcessHeartbeat+0xc>
 801c5c2:	f8d5 51f0 	ldr.w	r5, [r5, #496]	; 0x1f0
 801c5c6:	2d00      	cmp	r5, #0
 801c5c8:	d0d7      	beq.n	801c57a <BnrgmTransControlProcessHeartbeat+0xe>
 801c5ca:	9b03      	ldr	r3, [sp, #12]
 801c5cc:	f8cd 9000 	str.w	r9, [sp]
 801c5d0:	4642      	mov	r2, r8
 801c5d2:	4639      	mov	r1, r7
 801c5d4:	4630      	mov	r0, r6
 801c5d6:	47a8      	blx	r5
 801c5d8:	e7cf      	b.n	801c57a <BnrgmTransControlProcessHeartbeat+0xe>
 801c5da:	bf00      	nop
 801c5dc:	20001410 	.word	0x20001410

0801c5e0 <MobleAddressAllocatePeerEntry>:
 801c5e0:	b510      	push	{r4, lr}
 801c5e2:	b140      	cbz	r0, 801c5f6 <MobleAddressAllocatePeerEntry+0x16>
 801c5e4:	b181      	cbz	r1, 801c608 <MobleAddressAllocatePeerEntry+0x28>
 801c5e6:	2300      	movs	r3, #0
 801c5e8:	79c4      	ldrb	r4, [r0, #7]
 801c5ea:	b92c      	cbnz	r4, 801c5f8 <MobleAddressAllocatePeerEntry+0x18>
 801c5ec:	f240 137f 	movw	r3, #383	; 0x17f
 801c5f0:	8082      	strh	r2, [r0, #4]
 801c5f2:	6004      	str	r4, [r0, #0]
 801c5f4:	80c3      	strh	r3, [r0, #6]
 801c5f6:	bd10      	pop	{r4, pc}
 801c5f8:	3301      	adds	r3, #1
 801c5fa:	b2dc      	uxtb	r4, r3
 801c5fc:	42a1      	cmp	r1, r4
 801c5fe:	f100 0008 	add.w	r0, r0, #8
 801c602:	d8f1      	bhi.n	801c5e8 <MobleAddressAllocatePeerEntry+0x8>
 801c604:	2000      	movs	r0, #0
 801c606:	e7f6      	b.n	801c5f6 <MobleAddressAllocatePeerEntry+0x16>
 801c608:	4608      	mov	r0, r1
 801c60a:	e7f4      	b.n	801c5f6 <MobleAddressAllocatePeerEntry+0x16>

0801c60c <MobleAddressFindPeerEntry>:
 801c60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c60e:	b908      	cbnz	r0, 801c614 <MobleAddressFindPeerEntry+0x8>
 801c610:	2000      	movs	r0, #0
 801c612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c614:	2900      	cmp	r1, #0
 801c616:	d0fb      	beq.n	801c610 <MobleAddressFindPeerEntry+0x4>
 801c618:	4604      	mov	r4, r0
 801c61a:	460b      	mov	r3, r1
 801c61c:	2500      	movs	r5, #0
 801c61e:	79e6      	ldrb	r6, [r4, #7]
 801c620:	b2ef      	uxtb	r7, r5
 801c622:	b13e      	cbz	r6, 801c634 <MobleAddressFindPeerEntry+0x28>
 801c624:	79a6      	ldrb	r6, [r4, #6]
 801c626:	b10e      	cbz	r6, 801c62c <MobleAddressFindPeerEntry+0x20>
 801c628:	3e01      	subs	r6, #1
 801c62a:	71a6      	strb	r6, [r4, #6]
 801c62c:	88a6      	ldrh	r6, [r4, #4]
 801c62e:	4296      	cmp	r6, r2
 801c630:	bf08      	it	eq
 801c632:	463b      	moveq	r3, r7
 801c634:	3501      	adds	r5, #1
 801c636:	b2ee      	uxtb	r6, r5
 801c638:	42b1      	cmp	r1, r6
 801c63a:	f104 0408 	add.w	r4, r4, #8
 801c63e:	d8ee      	bhi.n	801c61e <MobleAddressFindPeerEntry+0x12>
 801c640:	4299      	cmp	r1, r3
 801c642:	d0e5      	beq.n	801c610 <MobleAddressFindPeerEntry+0x4>
 801c644:	b21b      	sxth	r3, r3
 801c646:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 801c64a:	e7e2      	b.n	801c612 <MobleAddressFindPeerEntry+0x6>

0801c64c <MobleAddressIsNew>:
 801c64c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c64e:	461d      	mov	r5, r3
 801c650:	4b0f      	ldr	r3, [pc, #60]	; (801c690 <MobleAddressIsNew+0x44>)
 801c652:	685b      	ldr	r3, [r3, #4]
 801c654:	6a1b      	ldr	r3, [r3, #32]
 801c656:	e9cd 2100 	strd	r2, r1, [sp]
 801c65a:	4606      	mov	r6, r0
 801c65c:	4798      	blx	r3
 801c65e:	4604      	mov	r4, r0
 801c660:	b9a0      	cbnz	r0, 801c68c <MobleAddressIsNew+0x40>
 801c662:	e9dd 2100 	ldrd	r2, r1, [sp]
 801c666:	4630      	mov	r0, r6
 801c668:	f7ff ffd0 	bl	801c60c <MobleAddressFindPeerEntry>
 801c66c:	b938      	cbnz	r0, 801c67e <MobleAddressIsNew+0x32>
 801c66e:	4630      	mov	r0, r6
 801c670:	f7ff ffb6 	bl	801c5e0 <MobleAddressAllocatePeerEntry>
 801c674:	b930      	cbnz	r0, 801c684 <MobleAddressIsNew+0x38>
 801c676:	2401      	movs	r4, #1
 801c678:	4620      	mov	r0, r4
 801c67a:	b002      	add	sp, #8
 801c67c:	bd70      	pop	{r4, r5, r6, pc}
 801c67e:	6803      	ldr	r3, [r0, #0]
 801c680:	429d      	cmp	r5, r3
 801c682:	d9f8      	bls.n	801c676 <MobleAddressIsNew+0x2a>
 801c684:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 801c688:	6005      	str	r5, [r0, #0]
 801c68a:	e7f5      	b.n	801c678 <MobleAddressIsNew+0x2c>
 801c68c:	2400      	movs	r4, #0
 801c68e:	e7f3      	b.n	801c678 <MobleAddressIsNew+0x2c>
 801c690:	20000318 	.word	0x20000318

0801c694 <MobleConfigCrc32>:
 801c694:	b530      	push	{r4, r5, lr}
 801c696:	4d0b      	ldr	r5, [pc, #44]	; (801c6c4 <MobleConfigCrc32+0x30>)
 801c698:	4401      	add	r1, r0
 801c69a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c69e:	4281      	cmp	r1, r0
 801c6a0:	d101      	bne.n	801c6a6 <MobleConfigCrc32+0x12>
 801c6a2:	43d8      	mvns	r0, r3
 801c6a4:	bd30      	pop	{r4, r5, pc}
 801c6a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c6aa:	4053      	eors	r3, r2
 801c6ac:	2210      	movs	r2, #16
 801c6ae:	f343 0400 	sbfx	r4, r3, #0, #1
 801c6b2:	3a01      	subs	r2, #1
 801c6b4:	402c      	ands	r4, r5
 801c6b6:	b292      	uxth	r2, r2
 801c6b8:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
 801c6bc:	2a00      	cmp	r2, #0
 801c6be:	d1f6      	bne.n	801c6ae <MobleConfigCrc32+0x1a>
 801c6c0:	e7ed      	b.n	801c69e <MobleConfigCrc32+0xa>
 801c6c2:	bf00      	nop
 801c6c4:	edb88320 	.word	0xedb88320

0801c6c8 <MobleConfigSave>:
 801c6c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c6ca:	4d37      	ldr	r5, [pc, #220]	; (801c7a8 <MobleConfigSave+0xe0>)
 801c6cc:	f8b5 379c 	ldrh.w	r3, [r5, #1948]	; 0x79c
 801c6d0:	2000      	movs	r0, #0
 801c6d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c6d6:	f88d 0006 	strb.w	r0, [sp, #6]
 801c6da:	f88d 0007 	strb.w	r0, [sp, #7]
 801c6de:	d10d      	bne.n	801c6fc <MobleConfigSave+0x34>
 801c6e0:	4b32      	ldr	r3, [pc, #200]	; (801c7ac <MobleConfigSave+0xe4>)
 801c6e2:	6818      	ldr	r0, [r3, #0]
 801c6e4:	4b32      	ldr	r3, [pc, #200]	; (801c7b0 <MobleConfigSave+0xe8>)
 801c6e6:	781b      	ldrb	r3, [r3, #0]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d13a      	bne.n	801c762 <MobleConfigSave+0x9a>
 801c6ec:	f10d 0306 	add.w	r3, sp, #6
 801c6f0:	f640 623c 	movw	r2, #3644	; 0xe3c
 801c6f4:	f5a5 61d4 	sub.w	r1, r5, #1696	; 0x6a0
 801c6f8:	f7ea fe5a 	bl	80073b0 <PalNvmCompare>
 801c6fc:	f8b5 379c 	ldrh.w	r3, [r5, #1948]	; 0x79c
 801c700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c704:	4604      	mov	r4, r0
 801c706:	d10d      	bne.n	801c724 <MobleConfigSave+0x5c>
 801c708:	4b28      	ldr	r3, [pc, #160]	; (801c7ac <MobleConfigSave+0xe4>)
 801c70a:	492a      	ldr	r1, [pc, #168]	; (801c7b4 <MobleConfigSave+0xec>)
 801c70c:	6818      	ldr	r0, [r3, #0]
 801c70e:	4b28      	ldr	r3, [pc, #160]	; (801c7b0 <MobleConfigSave+0xe8>)
 801c710:	781b      	ldrb	r3, [r3, #0]
 801c712:	bb7b      	cbnz	r3, 801c774 <MobleConfigSave+0xac>
 801c714:	f10d 0307 	add.w	r3, sp, #7
 801c718:	2208      	movs	r2, #8
 801c71a:	f500 6064 	add.w	r0, r0, #3648	; 0xe40
 801c71e:	f7ea fe47 	bl	80073b0 <PalNvmCompare>
 801c722:	4604      	mov	r4, r0
 801c724:	2c01      	cmp	r4, #1
 801c726:	d839      	bhi.n	801c79c <MobleConfigSave+0xd4>
 801c728:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801c72c:	2a02      	cmp	r2, #2
 801c72e:	d003      	beq.n	801c738 <MobleConfigSave+0x70>
 801c730:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c734:	2b02      	cmp	r3, #2
 801c736:	d123      	bne.n	801c780 <MobleConfigSave+0xb8>
 801c738:	491f      	ldr	r1, [pc, #124]	; (801c7b8 <MobleConfigSave+0xf0>)
 801c73a:	780b      	ldrb	r3, [r1, #0]
 801c73c:	f043 0301 	orr.w	r3, r3, #1
 801c740:	700b      	strb	r3, [r1, #0]
 801c742:	f8b5 379c 	ldrh.w	r3, [r5, #1948]	; 0x79c
 801c746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c74a:	d119      	bne.n	801c780 <MobleConfigSave+0xb8>
 801c74c:	2301      	movs	r3, #1
 801c74e:	f88d 3006 	strb.w	r3, [sp, #6]
 801c752:	f88d 3007 	strb.w	r3, [sp, #7]
 801c756:	4a18      	ldr	r2, [pc, #96]	; (801c7b8 <MobleConfigSave+0xf0>)
 801c758:	7813      	ldrb	r3, [r2, #0]
 801c75a:	f043 0302 	orr.w	r3, r3, #2
 801c75e:	7013      	strb	r3, [r2, #0]
 801c760:	e014      	b.n	801c78c <MobleConfigSave+0xc4>
 801c762:	f10d 0306 	add.w	r3, sp, #6
 801c766:	f640 623c 	movw	r2, #3644	; 0xe3c
 801c76a:	f5a5 61d4 	sub.w	r1, r5, #1696	; 0x6a0
 801c76e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 801c772:	e7c1      	b.n	801c6f8 <MobleConfigSave+0x30>
 801c774:	f10d 0307 	add.w	r3, sp, #7
 801c778:	2208      	movs	r2, #8
 801c77a:	f500 50f2 	add.w	r0, r0, #7744	; 0x1e40
 801c77e:	e7ce      	b.n	801c71e <MobleConfigSave+0x56>
 801c780:	2a01      	cmp	r2, #1
 801c782:	d0e8      	beq.n	801c756 <MobleConfigSave+0x8e>
 801c784:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c788:	2b01      	cmp	r3, #1
 801c78a:	d0e4      	beq.n	801c756 <MobleConfigSave+0x8e>
 801c78c:	480b      	ldr	r0, [pc, #44]	; (801c7bc <MobleConfigSave+0xf4>)
 801c78e:	f640 614c 	movw	r1, #3660	; 0xe4c
 801c792:	f7fb fd03 	bl	801819c <MoblePalBluetoothNvmSave>
 801c796:	4620      	mov	r0, r4
 801c798:	b003      	add	sp, #12
 801c79a:	bd30      	pop	{r4, r5, pc}
 801c79c:	2300      	movs	r3, #0
 801c79e:	f885 379d 	strb.w	r3, [r5, #1949]	; 0x79d
 801c7a2:	f885 37a8 	strb.w	r3, [r5, #1960]	; 0x7a8
 801c7a6:	e7f1      	b.n	801c78c <MobleConfigSave+0xc4>
 801c7a8:	20002410 	.word	0x20002410
 801c7ac:	20004448 	.word	0x20004448
 801c7b0:	20004438 	.word	0x20004438
 801c7b4:	20002bb0 	.word	0x20002bb0
 801c7b8:	20004437 	.word	0x20004437
 801c7bc:	20001d70 	.word	0x20001d70

0801c7c0 <MobleConfigLoad>:
 801c7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7c2:	4c50      	ldr	r4, [pc, #320]	; (801c904 <MobleConfigLoad+0x144>)
 801c7c4:	f894 379c 	ldrb.w	r3, [r4, #1948]	; 0x79c
 801c7c8:	2b01      	cmp	r3, #1
 801c7ca:	b085      	sub	sp, #20
 801c7cc:	d107      	bne.n	801c7de <MobleConfigLoad+0x1e>
 801c7ce:	2300      	movs	r3, #0
 801c7d0:	f884 379d 	strb.w	r3, [r4, #1949]	; 0x79d
 801c7d4:	2300      	movs	r3, #0
 801c7d6:	f884 37a8 	strb.w	r3, [r4, #1960]	; 0x7a8
 801c7da:	b005      	add	sp, #20
 801c7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7de:	4d4a      	ldr	r5, [pc, #296]	; (801c908 <MobleConfigLoad+0x148>)
 801c7e0:	4e4a      	ldr	r6, [pc, #296]	; (801c90c <MobleConfigLoad+0x14c>)
 801c7e2:	6828      	ldr	r0, [r5, #0]
 801c7e4:	2208      	movs	r2, #8
 801c7e6:	2300      	movs	r3, #0
 801c7e8:	eb0d 0102 	add.w	r1, sp, r2
 801c7ec:	f7ea fdae 	bl	800734c <PalNvmRead>
 801c7f0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c7f4:	ea01 0302 	and.w	r3, r1, r2
 801c7f8:	1c58      	adds	r0, r3, #1
 801c7fa:	4243      	negs	r3, r0
 801c7fc:	4143      	adcs	r3, r0
 801c7fe:	7033      	strb	r3, [r6, #0]
 801c800:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801c804:	bf08      	it	eq
 801c806:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
 801c80a:	f04f 0301 	mov.w	r3, #1
 801c80e:	f884 379d 	strb.w	r3, [r4, #1949]	; 0x79d
 801c812:	d03b      	beq.n	801c88c <MobleConfigLoad+0xcc>
 801c814:	6828      	ldr	r0, [r5, #0]
 801c816:	2300      	movs	r3, #0
 801c818:	f640 623c 	movw	r2, #3644	; 0xe3c
 801c81c:	f5a4 61d4 	sub.w	r1, r4, #1696	; 0x6a0
 801c820:	f7ea fd94 	bl	800734c <PalNvmRead>
 801c824:	2801      	cmp	r0, #1
 801c826:	d93a      	bls.n	801c89e <MobleConfigLoad+0xde>
 801c828:	2300      	movs	r3, #0
 801c82a:	f884 379d 	strb.w	r3, [r4, #1949]	; 0x79d
 801c82e:	f894 379d 	ldrb.w	r3, [r4, #1949]	; 0x79d
 801c832:	2b01      	cmp	r3, #1
 801c834:	d1ce      	bne.n	801c7d4 <MobleConfigLoad+0x14>
 801c836:	f884 37a8 	strb.w	r3, [r4, #1960]	; 0x7a8
 801c83a:	7833      	ldrb	r3, [r6, #0]
 801c83c:	6828      	ldr	r0, [r5, #0]
 801c83e:	4f34      	ldr	r7, [pc, #208]	; (801c910 <MobleConfigLoad+0x150>)
 801c840:	2b00      	cmp	r3, #0
 801c842:	d153      	bne.n	801c8ec <MobleConfigLoad+0x12c>
 801c844:	2208      	movs	r2, #8
 801c846:	4639      	mov	r1, r7
 801c848:	f500 6064 	add.w	r0, r0, #3648	; 0xe40
 801c84c:	f7ea fd7e 	bl	800734c <PalNvmRead>
 801c850:	2801      	cmp	r0, #1
 801c852:	d8bf      	bhi.n	801c7d4 <MobleConfigLoad+0x14>
 801c854:	482e      	ldr	r0, [pc, #184]	; (801c910 <MobleConfigLoad+0x150>)
 801c856:	2104      	movs	r1, #4
 801c858:	f7ff ff1c 	bl	801c694 <MobleConfigCrc32>
 801c85c:	f8d4 37a4 	ldr.w	r3, [r4, #1956]	; 0x7a4
 801c860:	4298      	cmp	r0, r3
 801c862:	d0ba      	beq.n	801c7da <MobleConfigLoad+0x1a>
 801c864:	7833      	ldrb	r3, [r6, #0]
 801c866:	6828      	ldr	r0, [r5, #0]
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d145      	bne.n	801c8f8 <MobleConfigLoad+0x138>
 801c86c:	4928      	ldr	r1, [pc, #160]	; (801c910 <MobleConfigLoad+0x150>)
 801c86e:	2301      	movs	r3, #1
 801c870:	2208      	movs	r2, #8
 801c872:	f500 6064 	add.w	r0, r0, #3648	; 0xe40
 801c876:	f7ea fd69 	bl	800734c <PalNvmRead>
 801c87a:	2104      	movs	r1, #4
 801c87c:	4638      	mov	r0, r7
 801c87e:	f7ff ff09 	bl	801c694 <MobleConfigCrc32>
 801c882:	f8d4 37a4 	ldr.w	r3, [r4, #1956]	; 0x7a4
 801c886:	4298      	cmp	r0, r3
 801c888:	d1a4      	bne.n	801c7d4 <MobleConfigLoad+0x14>
 801c88a:	e7a6      	b.n	801c7da <MobleConfigLoad+0x1a>
 801c88c:	6828      	ldr	r0, [r5, #0]
 801c88e:	2300      	movs	r3, #0
 801c890:	f640 623c 	movw	r2, #3644	; 0xe3c
 801c894:	f5a4 61d4 	sub.w	r1, r4, #1696	; 0x6a0
 801c898:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 801c89c:	e7c0      	b.n	801c820 <MobleConfigLoad+0x60>
 801c89e:	f894 379d 	ldrb.w	r3, [r4, #1949]	; 0x79d
 801c8a2:	9301      	str	r3, [sp, #4]
 801c8a4:	2b01      	cmp	r3, #1
 801c8a6:	d1c2      	bne.n	801c82e <MobleConfigLoad+0x6e>
 801c8a8:	481a      	ldr	r0, [pc, #104]	; (801c914 <MobleConfigLoad+0x154>)
 801c8aa:	f640 6138 	movw	r1, #3640	; 0xe38
 801c8ae:	f7ff fef1 	bl	801c694 <MobleConfigCrc32>
 801c8b2:	f8d4 2798 	ldr.w	r2, [r4, #1944]	; 0x798
 801c8b6:	4290      	cmp	r0, r2
 801c8b8:	d0b9      	beq.n	801c82e <MobleConfigLoad+0x6e>
 801c8ba:	7832      	ldrb	r2, [r6, #0]
 801c8bc:	6828      	ldr	r0, [r5, #0]
 801c8be:	9b01      	ldr	r3, [sp, #4]
 801c8c0:	b972      	cbnz	r2, 801c8e0 <MobleConfigLoad+0x120>
 801c8c2:	4914      	ldr	r1, [pc, #80]	; (801c914 <MobleConfigLoad+0x154>)
 801c8c4:	f640 623c 	movw	r2, #3644	; 0xe3c
 801c8c8:	f7ea fd40 	bl	800734c <PalNvmRead>
 801c8cc:	4811      	ldr	r0, [pc, #68]	; (801c914 <MobleConfigLoad+0x154>)
 801c8ce:	f640 6138 	movw	r1, #3640	; 0xe38
 801c8d2:	f7ff fedf 	bl	801c694 <MobleConfigCrc32>
 801c8d6:	f8d4 3798 	ldr.w	r3, [r4, #1944]	; 0x798
 801c8da:	4298      	cmp	r0, r3
 801c8dc:	d1a4      	bne.n	801c828 <MobleConfigLoad+0x68>
 801c8de:	e7a6      	b.n	801c82e <MobleConfigLoad+0x6e>
 801c8e0:	490c      	ldr	r1, [pc, #48]	; (801c914 <MobleConfigLoad+0x154>)
 801c8e2:	f640 623c 	movw	r2, #3644	; 0xe3c
 801c8e6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 801c8ea:	e7ed      	b.n	801c8c8 <MobleConfigLoad+0x108>
 801c8ec:	2300      	movs	r3, #0
 801c8ee:	2208      	movs	r2, #8
 801c8f0:	4639      	mov	r1, r7
 801c8f2:	f500 50f2 	add.w	r0, r0, #7744	; 0x1e40
 801c8f6:	e7a9      	b.n	801c84c <MobleConfigLoad+0x8c>
 801c8f8:	2301      	movs	r3, #1
 801c8fa:	2208      	movs	r2, #8
 801c8fc:	4639      	mov	r1, r7
 801c8fe:	f500 50f2 	add.w	r0, r0, #7744	; 0x1e40
 801c902:	e7b8      	b.n	801c876 <MobleConfigLoad+0xb6>
 801c904:	20002410 	.word	0x20002410
 801c908:	20004448 	.word	0x20004448
 801c90c:	20004438 	.word	0x20004438
 801c910:	20002bb0 	.word	0x20002bb0
 801c914:	20001d70 	.word	0x20001d70

0801c918 <MobleConfigNetworkEncode>:
 801c918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c91a:	4c4c      	ldr	r4, [pc, #304]	; (801ca4c <MobleConfigNetworkEncode+0x134>)
 801c91c:	f7fb fb98 	bl	8018050 <MoblePalBluetoothRandom>
 801c920:	f884 0960 	strb.w	r0, [r4, #2400]	; 0x960
 801c924:	2800      	cmp	r0, #0
 801c926:	d0f9      	beq.n	801c91c <MobleConfigNetworkEncode+0x4>
 801c928:	f894 3961 	ldrb.w	r3, [r4, #2401]	; 0x961
 801c92c:	f8b4 2962 	ldrh.w	r2, [r4, #2402]	; 0x962
 801c930:	4043      	eors	r3, r0
 801c932:	f884 3961 	strb.w	r3, [r4, #2401]	; 0x961
 801c936:	ea40 2300 	orr.w	r3, r0, r0, lsl #8
 801c93a:	4053      	eors	r3, r2
 801c93c:	f8a4 3962 	strh.w	r3, [r4, #2402]	; 0x962
 801c940:	4c43      	ldr	r4, [pc, #268]	; (801ca50 <MobleConfigNetworkEncode+0x138>)
 801c942:	f894 1772 	ldrb.w	r1, [r4, #1906]	; 0x772
 801c946:	f204 558a 	addw	r5, r4, #1418	; 0x58a
 801c94a:	2600      	movs	r6, #0
 801c94c:	f5a4 62d4 	sub.w	r2, r4, #1696	; 0x6a0
 801c950:	b2f3      	uxtb	r3, r6
 801c952:	4299      	cmp	r1, r3
 801c954:	d82c      	bhi.n	801c9b0 <MobleConfigNetworkEncode+0x98>
 801c956:	f894 5773 	ldrb.w	r5, [r4, #1907]	; 0x773
 801c95a:	f602 569e 	addw	r6, r2, #3486	; 0xd9e
 801c95e:	2700      	movs	r7, #0
 801c960:	b2fb      	uxtb	r3, r7
 801c962:	429d      	cmp	r5, r3
 801c964:	d840      	bhi.n	801c9e8 <MobleConfigNetworkEncode+0xd0>
 801c966:	f602 6614 	addw	r6, r2, #3604	; 0xe14
 801c96a:	2310      	movs	r3, #16
 801c96c:	7837      	ldrb	r7, [r6, #0]
 801c96e:	3b01      	subs	r3, #1
 801c970:	4047      	eors	r7, r0
 801c972:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801c976:	f806 7b01 	strb.w	r7, [r6], #1
 801c97a:	d1f7      	bne.n	801c96c <MobleConfigNetworkEncode+0x54>
 801c97c:	4045      	eors	r5, r0
 801c97e:	4041      	eors	r1, r0
 801c980:	f884 5773 	strb.w	r5, [r4, #1907]	; 0x773
 801c984:	f894 c785 	ldrb.w	ip, [r4, #1925]	; 0x785
 801c988:	4d32      	ldr	r5, [pc, #200]	; (801ca54 <MobleConfigNetworkEncode+0x13c>)
 801c98a:	f884 1772 	strb.w	r1, [r4, #1906]	; 0x772
 801c98e:	f502 6241 	add.w	r2, r2, #3088	; 0xc10
 801c992:	b2d9      	uxtb	r1, r3
 801c994:	4561      	cmp	r1, ip
 801c996:	d343      	bcc.n	801ca20 <MobleConfigNetworkEncode+0x108>
 801c998:	ea80 000c 	eor.w	r0, r0, ip
 801c99c:	f884 0785 	strb.w	r0, [r4, #1925]	; 0x785
 801c9a0:	f640 6138 	movw	r1, #3640	; 0xe38
 801c9a4:	482b      	ldr	r0, [pc, #172]	; (801ca54 <MobleConfigNetworkEncode+0x13c>)
 801c9a6:	f7ff fe75 	bl	801c694 <MobleConfigCrc32>
 801c9aa:	f8c4 0798 	str.w	r0, [r4, #1944]	; 0x798
 801c9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c9b0:	f1a5 0710 	sub.w	r7, r5, #16
 801c9b4:	2310      	movs	r3, #16
 801c9b6:	f897 c000 	ldrb.w	ip, [r7]
 801c9ba:	3b01      	subs	r3, #1
 801c9bc:	ea80 0c0c 	eor.w	ip, r0, ip
 801c9c0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801c9c4:	f807 cb01 	strb.w	ip, [r7], #1
 801c9c8:	d1f5      	bne.n	801c9b6 <MobleConfigNetworkEncode+0x9e>
 801c9ca:	462f      	mov	r7, r5
 801c9cc:	2310      	movs	r3, #16
 801c9ce:	f897 c000 	ldrb.w	ip, [r7]
 801c9d2:	3b01      	subs	r3, #1
 801c9d4:	ea80 0c0c 	eor.w	ip, r0, ip
 801c9d8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801c9dc:	f807 cb01 	strb.w	ip, [r7], #1
 801c9e0:	d1f5      	bne.n	801c9ce <MobleConfigNetworkEncode+0xb6>
 801c9e2:	3601      	adds	r6, #1
 801c9e4:	357c      	adds	r5, #124	; 0x7c
 801c9e6:	e7b3      	b.n	801c950 <MobleConfigNetworkEncode+0x38>
 801c9e8:	f1a6 0c10 	sub.w	ip, r6, #16
 801c9ec:	2310      	movs	r3, #16
 801c9ee:	f89c e000 	ldrb.w	lr, [ip]
 801c9f2:	3b01      	subs	r3, #1
 801c9f4:	ea80 0e0e 	eor.w	lr, r0, lr
 801c9f8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801c9fc:	f80c eb01 	strb.w	lr, [ip], #1
 801ca00:	d1f5      	bne.n	801c9ee <MobleConfigNetworkEncode+0xd6>
 801ca02:	46b4      	mov	ip, r6
 801ca04:	2310      	movs	r3, #16
 801ca06:	f89c e000 	ldrb.w	lr, [ip]
 801ca0a:	3b01      	subs	r3, #1
 801ca0c:	ea80 0e0e 	eor.w	lr, r0, lr
 801ca10:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801ca14:	f80c eb01 	strb.w	lr, [ip], #1
 801ca18:	d1f5      	bne.n	801ca06 <MobleConfigNetworkEncode+0xee>
 801ca1a:	3701      	adds	r7, #1
 801ca1c:	362c      	adds	r6, #44	; 0x2c
 801ca1e:	e79f      	b.n	801c960 <MobleConfigNetworkEncode+0x48>
 801ca20:	7811      	ldrb	r1, [r2, #0]
 801ca22:	4041      	eors	r1, r0
 801ca24:	f802 1b01 	strb.w	r1, [r2], #1
 801ca28:	7911      	ldrb	r1, [r2, #4]
 801ca2a:	4041      	eors	r1, r0
 801ca2c:	7111      	strb	r1, [r2, #4]
 801ca2e:	2600      	movs	r6, #0
 801ca30:	4629      	mov	r1, r5
 801ca32:	688f      	ldr	r7, [r1, #8]
 801ca34:	360e      	adds	r6, #14
 801ca36:	4047      	eors	r7, r0
 801ca38:	2e9a      	cmp	r6, #154	; 0x9a
 801ca3a:	608f      	str	r7, [r1, #8]
 801ca3c:	f101 0138 	add.w	r1, r1, #56	; 0x38
 801ca40:	d1f7      	bne.n	801ca32 <MobleConfigNetworkEncode+0x11a>
 801ca42:	3301      	adds	r3, #1
 801ca44:	f505 751a 	add.w	r5, r5, #616	; 0x268
 801ca48:	e7a3      	b.n	801c992 <MobleConfigNetworkEncode+0x7a>
 801ca4a:	bf00      	nop
 801ca4c:	20001410 	.word	0x20001410
 801ca50:	20002410 	.word	0x20002410
 801ca54:	20001d70 	.word	0x20001d70

0801ca58 <MobleConfigNetworkDecode>:
 801ca58:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca5a:	4b46      	ldr	r3, [pc, #280]	; (801cb74 <MobleConfigNetworkDecode+0x11c>)
 801ca5c:	f893 1960 	ldrb.w	r1, [r3, #2400]	; 0x960
 801ca60:	f893 2961 	ldrb.w	r2, [r3, #2401]	; 0x961
 801ca64:	f8b3 0962 	ldrh.w	r0, [r3, #2402]	; 0x962
 801ca68:	404a      	eors	r2, r1
 801ca6a:	f883 2961 	strb.w	r2, [r3, #2401]	; 0x961
 801ca6e:	ea41 2201 	orr.w	r2, r1, r1, lsl #8
 801ca72:	4042      	eors	r2, r0
 801ca74:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 801ca78:	f8a3 2962 	strh.w	r2, [r3, #2402]	; 0x962
 801ca7c:	f890 5772 	ldrb.w	r5, [r0, #1906]	; 0x772
 801ca80:	f890 4773 	ldrb.w	r4, [r0, #1907]	; 0x773
 801ca84:	404d      	eors	r5, r1
 801ca86:	404c      	eors	r4, r1
 801ca88:	f503 6216 	add.w	r2, r3, #2400	; 0x960
 801ca8c:	f880 5772 	strb.w	r5, [r0, #1906]	; 0x772
 801ca90:	f880 4773 	strb.w	r4, [r0, #1907]	; 0x773
 801ca94:	f602 462a 	addw	r6, r2, #3114	; 0xc2a
 801ca98:	2700      	movs	r7, #0
 801ca9a:	b2fb      	uxtb	r3, r7
 801ca9c:	429d      	cmp	r5, r3
 801ca9e:	d81c      	bhi.n	801cada <MobleConfigNetworkDecode+0x82>
 801caa0:	f602 559e 	addw	r5, r2, #3486	; 0xd9e
 801caa4:	2600      	movs	r6, #0
 801caa6:	b2f3      	uxtb	r3, r6
 801caa8:	429c      	cmp	r4, r3
 801caaa:	d832      	bhi.n	801cb12 <MobleConfigNetworkDecode+0xba>
 801caac:	f602 6414 	addw	r4, r2, #3604	; 0xe14
 801cab0:	2310      	movs	r3, #16
 801cab2:	7825      	ldrb	r5, [r4, #0]
 801cab4:	3b01      	subs	r3, #1
 801cab6:	404d      	eors	r5, r1
 801cab8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801cabc:	f804 5b01 	strb.w	r5, [r4], #1
 801cac0:	d1f7      	bne.n	801cab2 <MobleConfigNetworkDecode+0x5a>
 801cac2:	f890 4785 	ldrb.w	r4, [r0, #1925]	; 0x785
 801cac6:	4d2c      	ldr	r5, [pc, #176]	; (801cb78 <MobleConfigNetworkDecode+0x120>)
 801cac8:	404c      	eors	r4, r1
 801caca:	f880 4785 	strb.w	r4, [r0, #1925]	; 0x785
 801cace:	f502 6241 	add.w	r2, r2, #3088	; 0xc10
 801cad2:	b2d8      	uxtb	r0, r3
 801cad4:	4284      	cmp	r4, r0
 801cad6:	d838      	bhi.n	801cb4a <MobleConfigNetworkDecode+0xf2>
 801cad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cada:	f1a6 0c10 	sub.w	ip, r6, #16
 801cade:	2310      	movs	r3, #16
 801cae0:	f89c e000 	ldrb.w	lr, [ip]
 801cae4:	3b01      	subs	r3, #1
 801cae6:	ea81 0e0e 	eor.w	lr, r1, lr
 801caea:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801caee:	f80c eb01 	strb.w	lr, [ip], #1
 801caf2:	d1f5      	bne.n	801cae0 <MobleConfigNetworkDecode+0x88>
 801caf4:	46b4      	mov	ip, r6
 801caf6:	2310      	movs	r3, #16
 801caf8:	f89c e000 	ldrb.w	lr, [ip]
 801cafc:	3b01      	subs	r3, #1
 801cafe:	ea81 0e0e 	eor.w	lr, r1, lr
 801cb02:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801cb06:	f80c eb01 	strb.w	lr, [ip], #1
 801cb0a:	d1f5      	bne.n	801caf8 <MobleConfigNetworkDecode+0xa0>
 801cb0c:	3701      	adds	r7, #1
 801cb0e:	367c      	adds	r6, #124	; 0x7c
 801cb10:	e7c3      	b.n	801ca9a <MobleConfigNetworkDecode+0x42>
 801cb12:	f1a5 0710 	sub.w	r7, r5, #16
 801cb16:	2310      	movs	r3, #16
 801cb18:	f897 c000 	ldrb.w	ip, [r7]
 801cb1c:	3b01      	subs	r3, #1
 801cb1e:	ea81 0c0c 	eor.w	ip, r1, ip
 801cb22:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801cb26:	f807 cb01 	strb.w	ip, [r7], #1
 801cb2a:	d1f5      	bne.n	801cb18 <MobleConfigNetworkDecode+0xc0>
 801cb2c:	462f      	mov	r7, r5
 801cb2e:	2310      	movs	r3, #16
 801cb30:	f897 c000 	ldrb.w	ip, [r7]
 801cb34:	3b01      	subs	r3, #1
 801cb36:	ea81 0c0c 	eor.w	ip, r1, ip
 801cb3a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801cb3e:	f807 cb01 	strb.w	ip, [r7], #1
 801cb42:	d1f5      	bne.n	801cb30 <MobleConfigNetworkDecode+0xd8>
 801cb44:	3601      	adds	r6, #1
 801cb46:	352c      	adds	r5, #44	; 0x2c
 801cb48:	e7ad      	b.n	801caa6 <MobleConfigNetworkDecode+0x4e>
 801cb4a:	7810      	ldrb	r0, [r2, #0]
 801cb4c:	4048      	eors	r0, r1
 801cb4e:	f802 0b01 	strb.w	r0, [r2], #1
 801cb52:	7910      	ldrb	r0, [r2, #4]
 801cb54:	4048      	eors	r0, r1
 801cb56:	7110      	strb	r0, [r2, #4]
 801cb58:	2600      	movs	r6, #0
 801cb5a:	4628      	mov	r0, r5
 801cb5c:	6887      	ldr	r7, [r0, #8]
 801cb5e:	360e      	adds	r6, #14
 801cb60:	404f      	eors	r7, r1
 801cb62:	2e9a      	cmp	r6, #154	; 0x9a
 801cb64:	6087      	str	r7, [r0, #8]
 801cb66:	f100 0038 	add.w	r0, r0, #56	; 0x38
 801cb6a:	d1f7      	bne.n	801cb5c <MobleConfigNetworkDecode+0x104>
 801cb6c:	3301      	adds	r3, #1
 801cb6e:	f505 751a 	add.w	r5, r5, #616	; 0x268
 801cb72:	e7ae      	b.n	801cad2 <MobleConfigNetworkDecode+0x7a>
 801cb74:	20001410 	.word	0x20001410
 801cb78:	20001d70 	.word	0x20001d70

0801cb7c <MobleConfigSavedSeqEncode>:
 801cb7c:	b510      	push	{r4, lr}
 801cb7e:	4c05      	ldr	r4, [pc, #20]	; (801cb94 <MobleConfigSavedSeqEncode+0x18>)
 801cb80:	2104      	movs	r1, #4
 801cb82:	f504 50bd 	add.w	r0, r4, #6048	; 0x17a0
 801cb86:	f7ff fd85 	bl	801c694 <MobleConfigCrc32>
 801cb8a:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 801cb8e:	f8c4 07a4 	str.w	r0, [r4, #1956]	; 0x7a4
 801cb92:	bd10      	pop	{r4, pc}
 801cb94:	20001410 	.word	0x20001410

0801cb98 <MobleConfigNetworkLoad>:
 801cb98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb9c:	4604      	mov	r4, r0
 801cb9e:	2800      	cmp	r0, #0
 801cba0:	d07d      	beq.n	801cc9e <MobleConfigNetworkLoad+0x106>
 801cba2:	4e41      	ldr	r6, [pc, #260]	; (801cca8 <MobleConfigNetworkLoad+0x110>)
 801cba4:	2500      	movs	r5, #0
 801cba6:	f506 5780 	add.w	r7, r6, #4096	; 0x1000
 801cbaa:	7005      	strb	r5, [r0, #0]
 801cbac:	8045      	strh	r5, [r0, #2]
 801cbae:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801cbb2:	f44f 720d 	mov.w	r2, #564	; 0x234
 801cbb6:	6a00      	ldr	r0, [r0, #32]
 801cbb8:	4629      	mov	r1, r5
 801cbba:	f00c f801 	bl	8028bc0 <memset>
 801cbbe:	f8b7 379c 	ldrh.w	r3, [r7, #1948]	; 0x79c
 801cbc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cbc6:	d16c      	bne.n	801cca2 <MobleConfigNetworkLoad+0x10a>
 801cbc8:	f7ff ff46 	bl	801ca58 <MobleConfigNetworkDecode>
 801cbcc:	f8b6 3962 	ldrh.w	r3, [r6, #2402]	; 0x962
 801cbd0:	8063      	strh	r3, [r4, #2]
 801cbd2:	f896 3961 	ldrb.w	r3, [r6, #2401]	; 0x961
 801cbd6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801cbda:	f8d6 3964 	ldr.w	r3, [r6, #2404]	; 0x964
 801cbde:	6063      	str	r3, [r4, #4]
 801cbe0:	f897 3785 	ldrb.w	r3, [r7, #1925]	; 0x785
 801cbe4:	7723      	strb	r3, [r4, #28]
 801cbe6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801cbea:	f207 517a 	addw	r1, r7, #1402	; 0x57a
 801cbee:	6a20      	ldr	r0, [r4, #32]
 801cbf0:	f00b ffcc 	bl	8028b8c <memmove>
 801cbf4:	6a20      	ldr	r0, [r4, #32]
 801cbf6:	2284      	movs	r2, #132	; 0x84
 801cbf8:	f207 61ee 	addw	r1, r7, #1774	; 0x6ee
 801cbfc:	f500 70ba 	add.w	r0, r0, #372	; 0x174
 801cc00:	f00b ffc4 	bl	8028b8c <memmove>
 801cc04:	6a20      	ldr	r0, [r4, #32]
 801cc06:	2210      	movs	r2, #16
 801cc08:	f207 7174 	addw	r1, r7, #1908	; 0x774
 801cc0c:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
 801cc10:	f00b ffbc 	bl	8028b8c <memmove>
 801cc14:	6a23      	ldr	r3, [r4, #32]
 801cc16:	f897 2772 	ldrb.w	r2, [r7, #1906]	; 0x772
 801cc1a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 801cc1e:	f897 2773 	ldrb.w	r2, [r7, #1907]	; 0x773
 801cc22:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
 801cc26:	f897 2784 	ldrb.w	r2, [r7, #1924]	; 0x784
 801cc2a:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
 801cc2e:	f506 6816 	add.w	r8, r6, #2400	; 0x960
 801cc32:	f44f 791a 	mov.w	r9, #616	; 0x268
 801cc36:	f241 5a70 	movw	sl, #5488	; 0x1570
 801cc3a:	f241 5b75 	movw	fp, #5493	; 0x1575
 801cc3e:	7f23      	ldrb	r3, [r4, #28]
 801cc40:	b2ef      	uxtb	r7, r5
 801cc42:	42bb      	cmp	r3, r7
 801cc44:	d80e      	bhi.n	801cc64 <MobleConfigNetworkLoad+0xcc>
 801cc46:	2210      	movs	r2, #16
 801cc48:	f608 6126 	addw	r1, r8, #3622	; 0xe26
 801cc4c:	f104 000c 	add.w	r0, r4, #12
 801cc50:	f00b ff9c 	bl	8028b8c <memmove>
 801cc54:	f7ff fe60 	bl	801c918 <MobleConfigNetworkEncode>
 801cc58:	2301      	movs	r3, #1
 801cc5a:	8023      	strh	r3, [r4, #0]
 801cc5c:	2000      	movs	r0, #0
 801cc5e:	b003      	add	sp, #12
 801cc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc64:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801cc68:	fb09 8107 	mla	r1, r9, r7, r8
 801cc6c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801cc6e:	9301      	str	r3, [sp, #4]
 801cc70:	f44f 721a 	mov.w	r2, #616	; 0x268
 801cc74:	3108      	adds	r1, #8
 801cc76:	3078      	adds	r0, #120	; 0x78
 801cc78:	f00b ff88 	bl	8028b8c <memmove>
 801cc7c:	9b01      	ldr	r3, [sp, #4]
 801cc7e:	19f2      	adds	r2, r6, r7
 801cc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc82:	f812 100a 	ldrb.w	r1, [r2, sl]
 801cc86:	f883 12e0 	strb.w	r1, [r3, #736]	; 0x2e0
 801cc8a:	f812 200b 	ldrb.w	r2, [r2, fp]
 801cc8e:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
 801cc92:	f8b6 2962 	ldrh.w	r2, [r6, #2402]	; 0x962
 801cc96:	4417      	add	r7, r2
 801cc98:	801f      	strh	r7, [r3, #0]
 801cc9a:	3501      	adds	r5, #1
 801cc9c:	e7cf      	b.n	801cc3e <MobleConfigNetworkLoad+0xa6>
 801cc9e:	2003      	movs	r0, #3
 801cca0:	e7dd      	b.n	801cc5e <MobleConfigNetworkLoad+0xc6>
 801cca2:	4628      	mov	r0, r5
 801cca4:	e7db      	b.n	801cc5e <MobleConfigNetworkLoad+0xc6>
 801cca6:	bf00      	nop
 801cca8:	20001410 	.word	0x20001410

0801ccac <MobleConfigSaveSeq>:
 801ccac:	b508      	push	{r3, lr}
 801ccae:	b160      	cbz	r0, 801ccca <MobleConfigSaveSeq+0x1e>
 801ccb0:	4b07      	ldr	r3, [pc, #28]	; (801ccd0 <MobleConfigSaveSeq+0x24>)
 801ccb2:	6882      	ldr	r2, [r0, #8]
 801ccb4:	f8c3 27a0 	str.w	r2, [r3, #1952]	; 0x7a0
 801ccb8:	2201      	movs	r2, #1
 801ccba:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
 801ccbe:	f7ff ff5d 	bl	801cb7c <MobleConfigSavedSeqEncode>
 801ccc2:	f7ff fd01 	bl	801c6c8 <MobleConfigSave>
 801ccc6:	2000      	movs	r0, #0
 801ccc8:	bd08      	pop	{r3, pc}
 801ccca:	2003      	movs	r0, #3
 801cccc:	e7fc      	b.n	801ccc8 <MobleConfigSaveSeq+0x1c>
 801ccce:	bf00      	nop
 801ccd0:	20002410 	.word	0x20002410

0801ccd4 <MobleNetworkSaveSeqNum>:
 801ccd4:	b508      	push	{r3, lr}
 801ccd6:	b928      	cbnz	r0, 801cce4 <MobleNetworkSaveSeqNum+0x10>
 801ccd8:	4b0f      	ldr	r3, [pc, #60]	; (801cd18 <MobleNetworkSaveSeqNum+0x44>)
 801ccda:	4a10      	ldr	r2, [pc, #64]	; (801cd1c <MobleNetworkSaveSeqNum+0x48>)
 801ccdc:	2157      	movs	r1, #87	; 0x57
 801ccde:	4810      	ldr	r0, [pc, #64]	; (801cd20 <MobleNetworkSaveSeqNum+0x4c>)
 801cce0:	f00b fedc 	bl	8028a9c <__assert_func>
 801cce4:	6802      	ldr	r2, [r0, #0]
 801cce6:	b91a      	cbnz	r2, 801ccf0 <MobleNetworkSaveSeqNum+0x1c>
 801cce8:	4b0e      	ldr	r3, [pc, #56]	; (801cd24 <MobleNetworkSaveSeqNum+0x50>)
 801ccea:	4a0c      	ldr	r2, [pc, #48]	; (801cd1c <MobleNetworkSaveSeqNum+0x48>)
 801ccec:	2158      	movs	r1, #88	; 0x58
 801ccee:	e7f6      	b.n	801ccde <MobleNetworkSaveSeqNum+0xa>
 801ccf0:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 801ccf4:	6891      	ldr	r1, [r2, #8]
 801ccf6:	4299      	cmp	r1, r3
 801ccf8:	d80b      	bhi.n	801cd12 <MobleNetworkSaveSeqNum+0x3e>
 801ccfa:	f503 53f6 	add.w	r3, r3, #7872	; 0x1ec0
 801ccfe:	330c      	adds	r3, #12
 801cd00:	6093      	str	r3, [r2, #8]
 801cd02:	4610      	mov	r0, r2
 801cd04:	f7ff ffd2 	bl	801ccac <MobleConfigSaveSeq>
 801cd08:	2801      	cmp	r0, #1
 801cd0a:	bf8c      	ite	hi
 801cd0c:	2002      	movhi	r0, #2
 801cd0e:	2000      	movls	r0, #0
 801cd10:	bd08      	pop	{r3, pc}
 801cd12:	2001      	movs	r0, #1
 801cd14:	e7fc      	b.n	801cd10 <MobleNetworkSaveSeqNum+0x3c>
 801cd16:	bf00      	nop
 801cd18:	08033aa9 	.word	0x08033aa9
 801cd1c:	0803176a 	.word	0x0803176a
 801cd20:	0803391e 	.word	0x0803391e
 801cd24:	08033964 	.word	0x08033964

0801cd28 <MobleConfigLoadSeq>:
 801cd28:	4602      	mov	r2, r0
 801cd2a:	b1b0      	cbz	r0, 801cd5a <MobleConfigLoadSeq+0x32>
 801cd2c:	7800      	ldrb	r0, [r0, #0]
 801cd2e:	b908      	cbnz	r0, 801cd34 <MobleConfigLoadSeq+0xc>
 801cd30:	6090      	str	r0, [r2, #8]
 801cd32:	4770      	bx	lr
 801cd34:	490a      	ldr	r1, [pc, #40]	; (801cd60 <MobleConfigLoadSeq+0x38>)
 801cd36:	f8b1 379c 	ldrh.w	r3, [r1, #1948]	; 0x79c
 801cd3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cd3e:	d10a      	bne.n	801cd56 <MobleConfigLoadSeq+0x2e>
 801cd40:	f891 37a8 	ldrb.w	r3, [r1, #1960]	; 0x7a8
 801cd44:	2b01      	cmp	r3, #1
 801cd46:	f04f 0000 	mov.w	r0, #0
 801cd4a:	d103      	bne.n	801cd54 <MobleConfigLoadSeq+0x2c>
 801cd4c:	f8d1 17a0 	ldr.w	r1, [r1, #1952]	; 0x7a0
 801cd50:	6091      	str	r1, [r2, #8]
 801cd52:	4770      	bx	lr
 801cd54:	6090      	str	r0, [r2, #8]
 801cd56:	2002      	movs	r0, #2
 801cd58:	4770      	bx	lr
 801cd5a:	2003      	movs	r0, #3
 801cd5c:	4770      	bx	lr
 801cd5e:	bf00      	nop
 801cd60:	20002410 	.word	0x20002410

0801cd64 <MobleNetworkLayerInit>:
 801cd64:	b538      	push	{r3, r4, r5, lr}
 801cd66:	4604      	mov	r4, r0
 801cd68:	2500      	movs	r5, #0
 801cd6a:	f880 5160 	strb.w	r5, [r0, #352]	; 0x160
 801cd6e:	f7ff fbeb 	bl	801c548 <MobleNetworkReplayCacheClearAll>
 801cd72:	6820      	ldr	r0, [r4, #0]
 801cd74:	f7ff ffd8 	bl	801cd28 <MobleConfigLoadSeq>
 801cd78:	2801      	cmp	r0, #1
 801cd7a:	bf9c      	itt	ls
 801cd7c:	6823      	ldrls	r3, [r4, #0]
 801cd7e:	689d      	ldrls	r5, [r3, #8]
 801cd80:	f8c4 515c 	str.w	r5, [r4, #348]	; 0x15c
 801cd84:	2000      	movs	r0, #0
 801cd86:	bd38      	pop	{r3, r4, r5, pc}

0801cd88 <MobleTransportInit>:
 801cd88:	b510      	push	{r4, lr}
 801cd8a:	4604      	mov	r4, r0
 801cd8c:	b928      	cbnz	r0, 801cd9a <MobleTransportInit+0x12>
 801cd8e:	4b0a      	ldr	r3, [pc, #40]	; (801cdb8 <MobleTransportInit+0x30>)
 801cd90:	4a0a      	ldr	r2, [pc, #40]	; (801cdbc <MobleTransportInit+0x34>)
 801cd92:	480b      	ldr	r0, [pc, #44]	; (801cdc0 <MobleTransportInit+0x38>)
 801cd94:	21d4      	movs	r1, #212	; 0xd4
 801cd96:	f00b fe81 	bl	8028a9c <__assert_func>
 801cd9a:	f7ff faa3 	bl	801c2e4 <MobleTransSarInit>
 801cd9e:	2300      	movs	r3, #0
 801cda0:	e9c4 3302 	strd	r3, r3, [r4, #8]
 801cda4:	7123      	strb	r3, [r4, #4]
 801cda6:	4620      	mov	r0, r4
 801cda8:	f7ff ffdc 	bl	801cd64 <MobleNetworkLayerInit>
 801cdac:	2801      	cmp	r0, #1
 801cdae:	bf8c      	ite	hi
 801cdb0:	2003      	movhi	r0, #3
 801cdb2:	2000      	movls	r0, #0
 801cdb4:	bd10      	pop	{r4, pc}
 801cdb6:	bf00      	nop
 801cdb8:	08033440 	.word	0x08033440
 801cdbc:	08031781 	.word	0x08031781
 801cdc0:	08033780 	.word	0x08033780

0801cdc4 <MobleApplicationInit>:
 801cdc4:	b508      	push	{r3, lr}
 801cdc6:	4b05      	ldr	r3, [pc, #20]	; (801cddc <MobleApplicationInit+0x18>)
 801cdc8:	2200      	movs	r2, #0
 801cdca:	f8c3 2954 	str.w	r2, [r3, #2388]	; 0x954
 801cdce:	f7ff ffdb 	bl	801cd88 <MobleTransportInit>
 801cdd2:	2801      	cmp	r0, #1
 801cdd4:	bf8c      	ite	hi
 801cdd6:	2003      	movhi	r0, #3
 801cdd8:	2000      	movls	r0, #0
 801cdda:	bd08      	pop	{r3, pc}
 801cddc:	20001410 	.word	0x20001410

0801cde0 <MobleConfigInit>:
 801cde0:	4b13      	ldr	r3, [pc, #76]	; (801ce30 <MobleConfigInit+0x50>)
 801cde2:	4a14      	ldr	r2, [pc, #80]	; (801ce34 <MobleConfigInit+0x54>)
 801cde4:	b510      	push	{r4, lr}
 801cde6:	f503 7139 	add.w	r1, r3, #740	; 0x2e4
 801cdea:	4c13      	ldr	r4, [pc, #76]	; (801ce38 <MobleConfigInit+0x58>)
 801cdec:	f8c2 16dc 	str.w	r1, [r2, #1756]	; 0x6dc
 801cdf0:	f503 61b9 	add.w	r1, r3, #1480	; 0x5c8
 801cdf4:	f8c2 46d4 	str.w	r4, [r2, #1748]	; 0x6d4
 801cdf8:	f8c2 36d8 	str.w	r3, [r2, #1752]	; 0x6d8
 801cdfc:	f8c2 16e0 	str.w	r1, [r2, #1760]	; 0x6e0
 801ce00:	f604 34dc 	addw	r4, r4, #3036	; 0xbdc
 801ce04:	f603 01ac 	addw	r1, r3, #2220	; 0x8ac
 801ce08:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 801ce0c:	f8c2 36e8 	str.w	r3, [r2, #1768]	; 0x6e8
 801ce10:	f8c2 16e4 	str.w	r1, [r2, #1764]	; 0x6e4
 801ce14:	2300      	movs	r3, #0
 801ce16:	f884 379c 	strb.w	r3, [r4, #1948]	; 0x79c
 801ce1a:	f7ea fa8f 	bl	800733c <PalNvmIsWriteProtected>
 801ce1e:	2801      	cmp	r0, #1
 801ce20:	d103      	bne.n	801ce2a <MobleConfigInit+0x4a>
 801ce22:	f884 079c 	strb.w	r0, [r4, #1948]	; 0x79c
 801ce26:	2000      	movs	r0, #0
 801ce28:	bd10      	pop	{r4, pc}
 801ce2a:	f7ff fcc9 	bl	801c7c0 <MobleConfigLoad>
 801ce2e:	e7fa      	b.n	801ce26 <MobleConfigInit+0x46>
 801ce30:	200003c4 	.word	0x200003c4
 801ce34:	20002508 	.word	0x20002508
 801ce38:	20001834 	.word	0x20001834

0801ce3c <MobleConfigCheck>:
 801ce3c:	b128      	cbz	r0, 801ce4a <MobleConfigCheck+0xe>
 801ce3e:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801ce42:	2800      	cmp	r0, #0
 801ce44:	bfd4      	ite	le
 801ce46:	2000      	movle	r0, #0
 801ce48:	2001      	movgt	r0, #1
 801ce4a:	4770      	bx	lr

0801ce4c <MobleConfigNetworkSave>:
 801ce4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce50:	4604      	mov	r4, r0
 801ce52:	b920      	cbnz	r0, 801ce5e <MobleConfigNetworkSave+0x12>
 801ce54:	f04f 0803 	mov.w	r8, #3
 801ce58:	4640      	mov	r0, r8
 801ce5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce5e:	2300      	movs	r3, #0
 801ce60:	7043      	strb	r3, [r0, #1]
 801ce62:	f7ff ffeb 	bl	801ce3c <MobleConfigCheck>
 801ce66:	2800      	cmp	r0, #0
 801ce68:	d0f4      	beq.n	801ce54 <MobleConfigNetworkSave+0x8>
 801ce6a:	4f39      	ldr	r7, [pc, #228]	; (801cf50 <MobleConfigNetworkSave+0x104>)
 801ce6c:	f507 5580 	add.w	r5, r7, #4096	; 0x1000
 801ce70:	f895 879c 	ldrb.w	r8, [r5, #1948]	; 0x79c
 801ce74:	f1b8 0f00 	cmp.w	r8, #0
 801ce78:	d167      	bne.n	801cf4a <MobleConfigNetworkSave+0xfe>
 801ce7a:	8863      	ldrh	r3, [r4, #2]
 801ce7c:	f8a7 3962 	strh.w	r3, [r7, #2402]	; 0x962
 801ce80:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801ce84:	6a21      	ldr	r1, [r4, #32]
 801ce86:	f887 3961 	strb.w	r3, [r7, #2401]	; 0x961
 801ce8a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801ce8e:	6863      	ldr	r3, [r4, #4]
 801ce90:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801ce94:	f205 507a 	addw	r0, r5, #1402	; 0x57a
 801ce98:	f00b fe78 	bl	8028b8c <memmove>
 801ce9c:	6a21      	ldr	r1, [r4, #32]
 801ce9e:	2284      	movs	r2, #132	; 0x84
 801cea0:	f501 71ba 	add.w	r1, r1, #372	; 0x174
 801cea4:	f205 60ee 	addw	r0, r5, #1774	; 0x6ee
 801cea8:	f00b fe70 	bl	8028b8c <memmove>
 801ceac:	6a21      	ldr	r1, [r4, #32]
 801ceae:	2210      	movs	r2, #16
 801ceb0:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
 801ceb4:	f205 7074 	addw	r0, r5, #1908	; 0x774
 801ceb8:	f00b fe68 	bl	8028b8c <memmove>
 801cebc:	6a23      	ldr	r3, [r4, #32]
 801cebe:	f893 21f8 	ldrb.w	r2, [r3, #504]	; 0x1f8
 801cec2:	f885 2772 	strb.w	r2, [r5, #1906]	; 0x772
 801cec6:	f893 21f9 	ldrb.w	r2, [r3, #505]	; 0x1f9
 801ceca:	f885 2773 	strb.w	r2, [r5, #1907]	; 0x773
 801cece:	f893 31fa 	ldrb.w	r3, [r3, #506]	; 0x1fa
 801ced2:	f885 3784 	strb.w	r3, [r5, #1924]	; 0x784
 801ced6:	7f23      	ldrb	r3, [r4, #28]
 801ced8:	f885 3785 	strb.w	r3, [r5, #1925]	; 0x785
 801cedc:	46c1      	mov	r9, r8
 801cede:	f507 6a16 	add.w	sl, r7, #2400	; 0x960
 801cee2:	f895 2785 	ldrb.w	r2, [r5, #1925]	; 0x785
 801cee6:	fa5f f689 	uxtb.w	r6, r9
 801ceea:	42b2      	cmp	r2, r6
 801ceec:	d810      	bhi.n	801cf10 <MobleConfigNetworkSave+0xc4>
 801ceee:	2210      	movs	r2, #16
 801cef0:	f104 010c 	add.w	r1, r4, #12
 801cef4:	f60a 6026 	addw	r0, sl, #3622	; 0xe26
 801cef8:	f00b fe48 	bl	8028b8c <memmove>
 801cefc:	2301      	movs	r3, #1
 801cefe:	f885 379d 	strb.w	r3, [r5, #1949]	; 0x79d
 801cf02:	f7ff fd09 	bl	801c918 <MobleConfigNetworkEncode>
 801cf06:	f7ff fe39 	bl	801cb7c <MobleConfigSavedSeqEncode>
 801cf0a:	f7ff fbdd 	bl	801c6c8 <MobleConfigSave>
 801cf0e:	e7a3      	b.n	801ce58 <MobleConfigNetworkSave+0xc>
 801cf10:	eb04 0b86 	add.w	fp, r4, r6, lsl #2
 801cf14:	f44f 731a 	mov.w	r3, #616	; 0x268
 801cf18:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
 801cf1c:	fb03 a006 	mla	r0, r3, r6, sl
 801cf20:	461a      	mov	r2, r3
 801cf22:	3178      	adds	r1, #120	; 0x78
 801cf24:	3008      	adds	r0, #8
 801cf26:	f00b fe31 	bl	8028b8c <memmove>
 801cf2a:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 801cf2e:	443e      	add	r6, r7
 801cf30:	f241 5370 	movw	r3, #5488	; 0x1570
 801cf34:	f892 12e0 	ldrb.w	r1, [r2, #736]	; 0x2e0
 801cf38:	54f1      	strb	r1, [r6, r3]
 801cf3a:	f241 5375 	movw	r3, #5493	; 0x1575
 801cf3e:	f892 22e1 	ldrb.w	r2, [r2, #737]	; 0x2e1
 801cf42:	54f2      	strb	r2, [r6, r3]
 801cf44:	f109 0901 	add.w	r9, r9, #1
 801cf48:	e7cb      	b.n	801cee2 <MobleConfigNetworkSave+0x96>
 801cf4a:	4698      	mov	r8, r3
 801cf4c:	e784      	b.n	801ce58 <MobleConfigNetworkSave+0xc>
 801cf4e:	bf00      	nop
 801cf50:	20001410 	.word	0x20001410

0801cf54 <MobleGattGetAttCount>:
 801cf54:	b510      	push	{r4, lr}
 801cf56:	4602      	mov	r2, r0
 801cf58:	7884      	ldrb	r4, [r0, #2]
 801cf5a:	2300      	movs	r3, #0
 801cf5c:	2001      	movs	r0, #1
 801cf5e:	b2d9      	uxtb	r1, r3
 801cf60:	428c      	cmp	r4, r1
 801cf62:	d800      	bhi.n	801cf66 <MobleGattGetAttCount+0x12>
 801cf64:	bd10      	pop	{r4, pc}
 801cf66:	6851      	ldr	r1, [r2, #4]
 801cf68:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 801cf6c:	3301      	adds	r3, #1
 801cf6e:	7889      	ldrb	r1, [r1, #2]
 801cf70:	0709      	lsls	r1, r1, #28
 801cf72:	bf54      	ite	pl
 801cf74:	3002      	addpl	r0, #2
 801cf76:	3003      	addmi	r0, #3
 801cf78:	e7f1      	b.n	801cf5e <MobleGattGetAttCount+0xa>
	...

0801cf7c <MobleGattSetup>:
 801cf7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801cf7e:	4604      	mov	r4, r0
 801cf80:	2800      	cmp	r0, #0
 801cf82:	d06f      	beq.n	801d064 <MobleGattSetup+0xe8>
 801cf84:	6803      	ldr	r3, [r0, #0]
 801cf86:	f8d0 5164 	ldr.w	r5, [r0, #356]	; 0x164
 801cf8a:	781e      	ldrb	r6, [r3, #0]
 801cf8c:	882b      	ldrh	r3, [r5, #0]
 801cf8e:	bb66      	cbnz	r6, 801cfea <MobleGattSetup+0x6e>
 801cf90:	f641 0228 	movw	r2, #6184	; 0x1828
 801cf94:	4293      	cmp	r3, r2
 801cf96:	d01d      	beq.n	801cfd4 <MobleGattSetup+0x58>
 801cf98:	4b33      	ldr	r3, [pc, #204]	; (801d068 <MobleGattSetup+0xec>)
 801cf9a:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
 801cf9e:	f8d4 5164 	ldr.w	r5, [r4, #356]	; 0x164
 801cfa2:	4628      	mov	r0, r5
 801cfa4:	f7ff ffd6 	bl	801cf54 <MobleGattGetAttCount>
 801cfa8:	462b      	mov	r3, r5
 801cfaa:	b2c2      	uxtb	r2, r0
 801cfac:	f833 1b08 	ldrh.w	r1, [r3], #8
 801cfb0:	2001      	movs	r0, #1
 801cfb2:	f7fa ff73 	bl	8017e9c <MoblePalBluetoothGattAddService>
 801cfb6:	2801      	cmp	r0, #1
 801cfb8:	d815      	bhi.n	801cfe6 <MobleGattSetup+0x6a>
 801cfba:	686b      	ldr	r3, [r5, #4]
 801cfbc:	bb83      	cbnz	r3, 801d020 <MobleGattSetup+0xa4>
 801cfbe:	2000      	movs	r0, #0
 801cfc0:	e011      	b.n	801cfe6 <MobleGattSetup+0x6a>
 801cfc2:	686b      	ldr	r3, [r5, #4]
 801cfc4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801cfc8:	3601      	adds	r6, #1
 801cfca:	68d9      	ldr	r1, [r3, #12]
 801cfcc:	f7fa ffd7 	bl	8017f7e <MoblePalBluetoothGattDelCharacteristic>
 801cfd0:	2801      	cmp	r0, #1
 801cfd2:	d808      	bhi.n	801cfe6 <MobleGattSetup+0x6a>
 801cfd4:	78ab      	ldrb	r3, [r5, #2]
 801cfd6:	68a8      	ldr	r0, [r5, #8]
 801cfd8:	b2f2      	uxtb	r2, r6
 801cfda:	4293      	cmp	r3, r2
 801cfdc:	d8f1      	bhi.n	801cfc2 <MobleGattSetup+0x46>
 801cfde:	f7fa ff7f 	bl	8017ee0 <MoblePalBluetoothGattDelService>
 801cfe2:	2801      	cmp	r0, #1
 801cfe4:	d9d8      	bls.n	801cf98 <MobleGattSetup+0x1c>
 801cfe6:	b004      	add	sp, #16
 801cfe8:	bd70      	pop	{r4, r5, r6, pc}
 801cfea:	f641 0227 	movw	r2, #6183	; 0x1827
 801cfee:	4293      	cmp	r3, r2
 801cff0:	d014      	beq.n	801d01c <MobleGattSetup+0xa0>
 801cff2:	4b1e      	ldr	r3, [pc, #120]	; (801d06c <MobleGattSetup+0xf0>)
 801cff4:	e7d1      	b.n	801cf9a <MobleGattSetup+0x1e>
 801cff6:	686b      	ldr	r3, [r5, #4]
 801cff8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801cffc:	3601      	adds	r6, #1
 801cffe:	68d9      	ldr	r1, [r3, #12]
 801d000:	f7fa ffbd 	bl	8017f7e <MoblePalBluetoothGattDelCharacteristic>
 801d004:	2801      	cmp	r0, #1
 801d006:	d8ee      	bhi.n	801cfe6 <MobleGattSetup+0x6a>
 801d008:	78ab      	ldrb	r3, [r5, #2]
 801d00a:	68a8      	ldr	r0, [r5, #8]
 801d00c:	b2f2      	uxtb	r2, r6
 801d00e:	4293      	cmp	r3, r2
 801d010:	d8f1      	bhi.n	801cff6 <MobleGattSetup+0x7a>
 801d012:	f7fa ff65 	bl	8017ee0 <MoblePalBluetoothGattDelService>
 801d016:	2801      	cmp	r0, #1
 801d018:	d9eb      	bls.n	801cff2 <MobleGattSetup+0x76>
 801d01a:	e7e4      	b.n	801cfe6 <MobleGattSetup+0x6a>
 801d01c:	2600      	movs	r6, #0
 801d01e:	e7f3      	b.n	801d008 <MobleGattSetup+0x8c>
 801d020:	78ab      	ldrb	r3, [r5, #2]
 801d022:	2b00      	cmp	r3, #0
 801d024:	d0cb      	beq.n	801cfbe <MobleGattSetup+0x42>
 801d026:	2600      	movs	r6, #0
 801d028:	6869      	ldr	r1, [r5, #4]
 801d02a:	b2f4      	uxtb	r4, r6
 801d02c:	0120      	lsls	r0, r4, #4
 801d02e:	eb01 1404 	add.w	r4, r1, r4, lsl #4
 801d032:	5a09      	ldrh	r1, [r1, r0]
 801d034:	7963      	ldrb	r3, [r4, #5]
 801d036:	7922      	ldrb	r2, [r4, #4]
 801d038:	f104 000c 	add.w	r0, r4, #12
 801d03c:	9002      	str	r0, [sp, #8]
 801d03e:	78e0      	ldrb	r0, [r4, #3]
 801d040:	9001      	str	r0, [sp, #4]
 801d042:	78a0      	ldrb	r0, [r4, #2]
 801d044:	9000      	str	r0, [sp, #0]
 801d046:	68a8      	ldr	r0, [r5, #8]
 801d048:	f7fa ff52 	bl	8017ef0 <MoblePalBluetoothGattAddCharacteristic>
 801d04c:	2801      	cmp	r0, #1
 801d04e:	d8ca      	bhi.n	801cfe6 <MobleGattSetup+0x6a>
 801d050:	68a3      	ldr	r3, [r4, #8]
 801d052:	b10b      	cbz	r3, 801d058 <MobleGattSetup+0xdc>
 801d054:	89a0      	ldrh	r0, [r4, #12]
 801d056:	4798      	blx	r3
 801d058:	78aa      	ldrb	r2, [r5, #2]
 801d05a:	3601      	adds	r6, #1
 801d05c:	b2f3      	uxtb	r3, r6
 801d05e:	429a      	cmp	r2, r3
 801d060:	d8e2      	bhi.n	801d028 <MobleGattSetup+0xac>
 801d062:	e7ac      	b.n	801cfbe <MobleGattSetup+0x42>
 801d064:	2003      	movs	r0, #3
 801d066:	e7be      	b.n	801cfe6 <MobleGattSetup+0x6a>
 801d068:	20000014 	.word	0x20000014
 801d06c:	20000020 	.word	0x20000020

0801d070 <MobleStackGattSetup>:
 801d070:	4801      	ldr	r0, [pc, #4]	; (801d078 <MobleStackGattSetup+0x8>)
 801d072:	f7ff bf83 	b.w	801cf7c <MobleGattSetup>
 801d076:	bf00      	nop
 801d078:	20001a90 	.word	0x20001a90

0801d07c <BLEMesh_GetAddress>:
 801d07c:	4b06      	ldr	r3, [pc, #24]	; (801d098 <BLEMesh_GetAddress+0x1c>)
 801d07e:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 801d082:	b138      	cbz	r0, 801d094 <BLEMesh_GetAddress+0x18>
 801d084:	f893 26b4 	ldrb.w	r2, [r3, #1716]	; 0x6b4
 801d088:	2a01      	cmp	r2, #1
 801d08a:	d102      	bne.n	801d092 <BLEMesh_GetAddress+0x16>
 801d08c:	f8b3 06b6 	ldrh.w	r0, [r3, #1718]	; 0x6b6
 801d090:	4770      	bx	lr
 801d092:	2000      	movs	r0, #0
 801d094:	4770      	bx	lr
 801d096:	bf00      	nop
 801d098:	20002508 	.word	0x20002508

0801d09c <BLEMesh_GetPublishAddress>:
 801d09c:	2804      	cmp	r0, #4
 801d09e:	b570      	push	{r4, r5, r6, lr}
 801d0a0:	d81b      	bhi.n	801d0da <BLEMesh_GetPublishAddress+0x3e>
 801d0a2:	4a0f      	ldr	r2, [pc, #60]	; (801d0e0 <BLEMesh_GetPublishAddress+0x44>)
 801d0a4:	f8d2 36f0 	ldr.w	r3, [r2, #1776]	; 0x6f0
 801d0a8:	b1bb      	cbz	r3, 801d0da <BLEMesh_GetPublishAddress+0x3e>
 801d0aa:	f892 36b4 	ldrb.w	r3, [r2, #1716]	; 0x6b4
 801d0ae:	2b01      	cmp	r3, #1
 801d0b0:	d113      	bne.n	801d0da <BLEMesh_GetPublishAddress+0x3e>
 801d0b2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	f8d2 26d8 	ldr.w	r2, [r2, #1752]	; 0x6d8
 801d0bc:	2538      	movs	r5, #56	; 0x38
 801d0be:	f102 0478 	add.w	r4, r2, #120	; 0x78
 801d0c2:	fb05 f003 	mul.w	r0, r5, r3
 801d0c6:	5826      	ldr	r6, [r4, r0]
 801d0c8:	428e      	cmp	r6, r1
 801d0ca:	d103      	bne.n	801d0d4 <BLEMesh_GetPublishAddress+0x38>
 801d0cc:	4402      	add	r2, r0
 801d0ce:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
 801d0d2:	bd70      	pop	{r4, r5, r6, pc}
 801d0d4:	3301      	adds	r3, #1
 801d0d6:	2b0b      	cmp	r3, #11
 801d0d8:	d1f3      	bne.n	801d0c2 <BLEMesh_GetPublishAddress+0x26>
 801d0da:	2000      	movs	r0, #0
 801d0dc:	e7f9      	b.n	801d0d2 <BLEMesh_GetPublishAddress+0x36>
 801d0de:	bf00      	nop
 801d0e0:	20002508 	.word	0x20002508

0801d0e4 <BLEMesh_GetTotalModelsCount>:
 801d0e4:	200b      	movs	r0, #11
 801d0e6:	4770      	bx	lr

0801d0e8 <BLEMesh_GetNumberOfElements>:
 801d0e8:	2005      	movs	r0, #5
 801d0ea:	4770      	bx	lr

0801d0ec <BLEMesh_GetAppKeysCount>:
 801d0ec:	2003      	movs	r0, #3
 801d0ee:	4770      	bx	lr

0801d0f0 <BLEMesh_GetNetKeysCount>:
 801d0f0:	2003      	movs	r0, #3
 801d0f2:	4770      	bx	lr

0801d0f4 <BLEMesh_GetSubscriptionCount>:
 801d0f4:	200a      	movs	r0, #10
 801d0f6:	4770      	bx	lr

0801d0f8 <BLEMesh_GetTTL>:
 801d0f8:	4b03      	ldr	r3, [pc, #12]	; (801d108 <BLEMesh_GetTTL+0x10>)
 801d0fa:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 801d0fe:	b110      	cbz	r0, 801d106 <BLEMesh_GetTTL+0xe>
 801d100:	4b02      	ldr	r3, [pc, #8]	; (801d10c <BLEMesh_GetTTL+0x14>)
 801d102:	f893 00b5 	ldrb.w	r0, [r3, #181]	; 0xb5
 801d106:	4770      	bx	lr
 801d108:	20002508 	.word	0x20002508
 801d10c:	20000318 	.word	0x20000318

0801d110 <BLEMesh_GetNetworkTransmitCount>:
 801d110:	4b04      	ldr	r3, [pc, #16]	; (801d124 <BLEMesh_GetNetworkTransmitCount+0x14>)
 801d112:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 801d116:	b120      	cbz	r0, 801d122 <BLEMesh_GetNetworkTransmitCount+0x12>
 801d118:	4b03      	ldr	r3, [pc, #12]	; (801d128 <BLEMesh_GetNetworkTransmitCount+0x18>)
 801d11a:	f893 00b6 	ldrb.w	r0, [r3, #182]	; 0xb6
 801d11e:	3001      	adds	r0, #1
 801d120:	b2c0      	uxtb	r0, r0
 801d122:	4770      	bx	lr
 801d124:	20002508 	.word	0x20002508
 801d128:	20000318 	.word	0x20000318

0801d12c <BLEMesh_GetRelayRetransmitCount>:
 801d12c:	4b04      	ldr	r3, [pc, #16]	; (801d140 <BLEMesh_GetRelayRetransmitCount+0x14>)
 801d12e:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 801d132:	b120      	cbz	r0, 801d13e <BLEMesh_GetRelayRetransmitCount+0x12>
 801d134:	4b03      	ldr	r3, [pc, #12]	; (801d144 <BLEMesh_GetRelayRetransmitCount+0x18>)
 801d136:	f893 00b8 	ldrb.w	r0, [r3, #184]	; 0xb8
 801d13a:	3001      	adds	r0, #1
 801d13c:	b2c0      	uxtb	r0, r0
 801d13e:	4770      	bx	lr
 801d140:	20002508 	.word	0x20002508
 801d144:	20000318 	.word	0x20000318

0801d148 <BLEMesh_SetAttentionTimerCallback>:
 801d148:	4b04      	ldr	r3, [pc, #16]	; (801d15c <BLEMesh_SetAttentionTimerCallback+0x14>)
 801d14a:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 801d14e:	b11b      	cbz	r3, 801d158 <BLEMesh_SetAttentionTimerCallback+0x10>
 801d150:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
 801d154:	2000      	movs	r0, #0
 801d156:	4770      	bx	lr
 801d158:	2002      	movs	r0, #2
 801d15a:	4770      	bx	lr
 801d15c:	20002508 	.word	0x20002508

0801d160 <BLEMesh_SetUnprovisionedDevBeaconInterval>:
 801d160:	1e42      	subs	r2, r0, #1
 801d162:	2a62      	cmp	r2, #98	; 0x62
 801d164:	b508      	push	{r3, lr}
 801d166:	4603      	mov	r3, r0
 801d168:	d801      	bhi.n	801d16e <BLEMesh_SetUnprovisionedDevBeaconInterval+0xe>
 801d16a:	2002      	movs	r0, #2
 801d16c:	bd08      	pop	{r3, pc}
 801d16e:	490b      	ldr	r1, [pc, #44]	; (801d19c <BLEMesh_SetUnprovisionedDevBeaconInterval+0x3c>)
 801d170:	f8d1 26f0 	ldr.w	r2, [r1, #1776]	; 0x6f0
 801d174:	2a00      	cmp	r2, #0
 801d176:	d0f8      	beq.n	801d16a <BLEMesh_SetUnprovisionedDevBeaconInterval+0xa>
 801d178:	f891 16b4 	ldrb.w	r1, [r1, #1716]	; 0x6b4
 801d17c:	2901      	cmp	r1, #1
 801d17e:	d0f4      	beq.n	801d16a <BLEMesh_SetUnprovisionedDevBeaconInterval+0xa>
 801d180:	f8d2 01d8 	ldr.w	r0, [r2, #472]	; 0x1d8
 801d184:	b92b      	cbnz	r3, 801d192 <BLEMesh_SetUnprovisionedDevBeaconInterval+0x32>
 801d186:	f7fd fd19 	bl	801abbc <BnrgmTransmitDisableRegularlyGeneratedBeacon>
 801d18a:	2801      	cmp	r0, #1
 801d18c:	d8ed      	bhi.n	801d16a <BLEMesh_SetUnprovisionedDevBeaconInterval+0xa>
 801d18e:	2000      	movs	r0, #0
 801d190:	e7ec      	b.n	801d16c <BLEMesh_SetUnprovisionedDevBeaconInterval+0xc>
 801d192:	f8a2 31dc 	strh.w	r3, [r2, #476]	; 0x1dc
 801d196:	f7fd fd23 	bl	801abe0 <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801d19a:	e7f6      	b.n	801d18a <BLEMesh_SetUnprovisionedDevBeaconInterval+0x2a>
 801d19c:	20002508 	.word	0x20002508

0801d1a0 <BnrgmCustomBeaconGenerator>:
 801d1a0:	b507      	push	{r0, r1, r2, lr}
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	291e      	cmp	r1, #30
 801d1a6:	9301      	str	r3, [sp, #4]
 801d1a8:	dc06      	bgt.n	801d1b8 <BnrgmCustomBeaconGenerator+0x18>
 801d1aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d1ae:	9301      	str	r3, [sp, #4]
 801d1b0:	9801      	ldr	r0, [sp, #4]
 801d1b2:	b003      	add	sp, #12
 801d1b4:	f85d fb04 	ldr.w	pc, [sp], #4
 801d1b8:	a901      	add	r1, sp, #4
 801d1ba:	f7e9 fa79 	bl	80066b0 <BLEMesh_CustomBeaconGeneratorCallback>
 801d1be:	9b01      	ldr	r3, [sp, #4]
 801d1c0:	2b1f      	cmp	r3, #31
 801d1c2:	d8f2      	bhi.n	801d1aa <BnrgmCustomBeaconGenerator+0xa>
 801d1c4:	e7f4      	b.n	801d1b0 <BnrgmCustomBeaconGenerator+0x10>

0801d1c6 <BLEMesh_CustomBeaconReceivedCallback>:
 801d1c6:	4770      	bx	lr

0801d1c8 <BLEMesh_TrsptIsBusyState>:
 801d1c8:	4b02      	ldr	r3, [pc, #8]	; (801d1d4 <BLEMesh_TrsptIsBusyState+0xc>)
 801d1ca:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 801d1ce:	f7ff b875 	b.w	801c2bc <MobleTransportIsBusy>
 801d1d2:	bf00      	nop
 801d1d4:	20002508 	.word	0x20002508

0801d1d8 <BnrgmLibraryFnOnFriendshipEstablished>:
 801d1d8:	b513      	push	{r0, r1, r4, lr}
 801d1da:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 801d1de:	9400      	str	r4, [sp, #0]
 801d1e0:	2464      	movs	r4, #100	; 0x64
 801d1e2:	fbb2 f2f4 	udiv	r2, r2, r4
 801d1e6:	f7e9 f961 	bl	80064ac <BLEMesh_FnFriendshipEstablishedCallback>
 801d1ea:	b002      	add	sp, #8
 801d1ec:	bd10      	pop	{r4, pc}

0801d1ee <BLEMesh_PvnrDataInputCallback>:
 801d1ee:	2000      	movs	r0, #0
 801d1f0:	4770      	bx	lr
	...

0801d1f4 <MobleStackCreateStartFastAdvTimer>:
 801d1f4:	b510      	push	{r4, lr}
 801d1f6:	4c13      	ldr	r4, [pc, #76]	; (801d244 <MobleStackCreateStartFastAdvTimer+0x50>)
 801d1f8:	4913      	ldr	r1, [pc, #76]	; (801d248 <MobleStackCreateStartFastAdvTimer+0x54>)
 801d1fa:	f504 62d0 	add.w	r2, r4, #1664	; 0x680
 801d1fe:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
 801d202:	f7fa fc87 	bl	8017b14 <MoblePalTimerCreate>
 801d206:	2801      	cmp	r0, #1
 801d208:	4602      	mov	r2, r0
 801d20a:	d909      	bls.n	801d220 <MobleStackCreateStartFastAdvTimer+0x2c>
 801d20c:	f8d4 07f8 	ldr.w	r0, [r4, #2040]	; 0x7f8
 801d210:	b108      	cbz	r0, 801d216 <MobleStackCreateStartFastAdvTimer+0x22>
 801d212:	f7fa fd31 	bl	8017c78 <MoblePalTimerDestroy>
 801d216:	2300      	movs	r3, #0
 801d218:	f8c4 37f8 	str.w	r3, [r4, #2040]	; 0x7f8
 801d21c:	4610      	mov	r0, r2
 801d21e:	bd10      	pop	{r4, pc}
 801d220:	f8d4 07f8 	ldr.w	r0, [r4, #2040]	; 0x7f8
 801d224:	f64e 2160 	movw	r1, #60000	; 0xea60
 801d228:	f7fa fcde 	bl	8017be8 <MoblePalTimerStartOnce>
 801d22c:	2801      	cmp	r0, #1
 801d22e:	4602      	mov	r2, r0
 801d230:	d8f4      	bhi.n	801d21c <MobleStackCreateStartFastAdvTimer+0x28>
 801d232:	23c8      	movs	r3, #200	; 0xc8
 801d234:	f8d4 0860 	ldr.w	r0, [r4, #2144]	; 0x860
 801d238:	f8a4 3864 	strh.w	r3, [r4, #2148]	; 0x864
 801d23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d240:	f7fd bcce 	b.w	801abe0 <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801d244:	20001410 	.word	0x20001410
 801d248:	0801ac1d 	.word	0x0801ac1d

0801d24c <MobleStackResetSeq>:
 801d24c:	4a04      	ldr	r2, [pc, #16]	; (801d260 <MobleStackResetSeq+0x14>)
 801d24e:	f8d2 0680 	ldr.w	r0, [r2, #1664]	; 0x680
 801d252:	2300      	movs	r3, #0
 801d254:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
 801d258:	6083      	str	r3, [r0, #8]
 801d25a:	f7ff bd27 	b.w	801ccac <MobleConfigSaveSeq>
 801d25e:	bf00      	nop
 801d260:	20001410 	.word	0x20001410

0801d264 <BnrgmStackSetDummyProxyModeState>:
 801d264:	b510      	push	{r4, lr}
 801d266:	f890 32ad 	ldrb.w	r3, [r0, #685]	; 0x2ad
 801d26a:	428b      	cmp	r3, r1
 801d26c:	4604      	mov	r4, r0
 801d26e:	d101      	bne.n	801d274 <BnrgmStackSetDummyProxyModeState+0x10>
 801d270:	2002      	movs	r0, #2
 801d272:	bd10      	pop	{r4, pc}
 801d274:	2901      	cmp	r1, #1
 801d276:	f880 12ad 	strb.w	r1, [r0, #685]	; 0x2ad
 801d27a:	d10f      	bne.n	801d29c <BnrgmStackSetDummyProxyModeState+0x38>
 801d27c:	4a0b      	ldr	r2, [pc, #44]	; (801d2ac <BnrgmStackSetDummyProxyModeState+0x48>)
 801d27e:	490c      	ldr	r1, [pc, #48]	; (801d2b0 <BnrgmStackSetDummyProxyModeState+0x4c>)
 801d280:	f502 702c 	add.w	r0, r2, #688	; 0x2b0
 801d284:	f7fa fc46 	bl	8017b14 <MoblePalTimerCreate>
 801d288:	2801      	cmp	r0, #1
 801d28a:	d8f1      	bhi.n	801d270 <BnrgmStackSetDummyProxyModeState+0xc>
 801d28c:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
 801d290:	f64e 2160 	movw	r1, #60000	; 0xea60
 801d294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d298:	f7fa bca6 	b.w	8017be8 <MoblePalTimerStartOnce>
 801d29c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 801d2a0:	b113      	cbz	r3, 801d2a8 <BnrgmStackSetDummyProxyModeState+0x44>
 801d2a2:	2000      	movs	r0, #0
 801d2a4:	7018      	strb	r0, [r3, #0]
 801d2a6:	e7e4      	b.n	801d272 <BnrgmStackSetDummyProxyModeState+0xe>
 801d2a8:	2003      	movs	r0, #3
 801d2aa:	e7e2      	b.n	801d272 <BnrgmStackSetDummyProxyModeState+0xe>
 801d2ac:	20001a90 	.word	0x20001a90
 801d2b0:	0801f819 	.word	0x0801f819

0801d2b4 <BnrgmStackConsumeSeqNo>:
 801d2b4:	4807      	ldr	r0, [pc, #28]	; (801d2d4 <BnrgmStackConsumeSeqNo+0x20>)
 801d2b6:	b510      	push	{r4, lr}
 801d2b8:	f8d0 47dc 	ldr.w	r4, [r0, #2012]	; 0x7dc
 801d2bc:	1c63      	adds	r3, r4, #1
 801d2be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801d2c2:	f8c0 37dc 	str.w	r3, [r0, #2012]	; 0x7dc
 801d2c6:	f500 60d0 	add.w	r0, r0, #1664	; 0x680
 801d2ca:	f7ff fd03 	bl	801ccd4 <MobleNetworkSaveSeqNum>
 801d2ce:	4620      	mov	r0, r4
 801d2d0:	bd10      	pop	{r4, pc}
 801d2d2:	bf00      	nop
 801d2d4:	20001410 	.word	0x20001410

0801d2d8 <BLEMesh_NeighborTableInit>:
 801d2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2da:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 801d2de:	f1bc 0f18 	cmp.w	ip, #24
 801d2e2:	f89d 4014 	ldrb.w	r4, [sp, #20]
 801d2e6:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801d2ea:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801d2ee:	f89d 5020 	ldrb.w	r5, [sp, #32]
 801d2f2:	d81a      	bhi.n	801d32a <BLEMesh_NeighborTableInit+0x52>
 801d2f4:	b1d8      	cbz	r0, 801d32e <BLEMesh_NeighborTableInit+0x56>
 801d2f6:	b1d2      	cbz	r2, 801d32e <BLEMesh_NeighborTableInit+0x56>
 801d2f8:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
 801d2fc:	d317      	bcc.n	801d32e <BLEMesh_NeighborTableInit+0x56>
 801d2fe:	b1b4      	cbz	r4, 801d32e <BLEMesh_NeighborTableInit+0x56>
 801d300:	2f01      	cmp	r7, #1
 801d302:	d814      	bhi.n	801d32e <BLEMesh_NeighborTableInit+0x56>
 801d304:	2e01      	cmp	r6, #1
 801d306:	d812      	bhi.n	801d32e <BLEMesh_NeighborTableInit+0x56>
 801d308:	2d02      	cmp	r5, #2
 801d30a:	d810      	bhi.n	801d32e <BLEMesh_NeighborTableInit+0x56>
 801d30c:	f880 3158 	strb.w	r3, [r0, #344]	; 0x158
 801d310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d314:	435c      	muls	r4, r3
 801d316:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
 801d31a:	f8c0 4154 	str.w	r4, [r0, #340]	; 0x154
 801d31e:	f880 7159 	strb.w	r7, [r0, #345]	; 0x159
 801d322:	f880 615a 	strb.w	r6, [r0, #346]	; 0x15a
 801d326:	f880 515b 	strb.w	r5, [r0, #347]	; 0x15b
 801d32a:	2000      	movs	r0, #0
 801d32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d32e:	2003      	movs	r0, #3
 801d330:	e7fc      	b.n	801d32c <BLEMesh_NeighborTableInit+0x54>

0801d332 <BLEMesh_UpdateNeighbors>:
 801d332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d336:	b08b      	sub	sp, #44	; 0x2c
 801d338:	4699      	mov	r9, r3
 801d33a:	f99d 3054 	ldrsb.w	r3, [sp, #84]	; 0x54
 801d33e:	9304      	str	r3, [sp, #16]
 801d340:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801d344:	9306      	str	r3, [sp, #24]
 801d346:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
 801d34a:	f8d0 7150 	ldr.w	r7, [r0, #336]	; 0x150
 801d34e:	9308      	str	r3, [sp, #32]
 801d350:	4606      	mov	r6, r0
 801d352:	460c      	mov	r4, r1
 801d354:	4692      	mov	sl, r2
 801d356:	f7ea fd91 	bl	8007e7c <HAL_GetTick>
 801d35a:	9005      	str	r0, [sp, #20]
 801d35c:	b177      	cbz	r7, 801d37c <BLEMesh_UpdateNeighbors+0x4a>
 801d35e:	9b08      	ldr	r3, [sp, #32]
 801d360:	b163      	cbz	r3, 801d37c <BLEMesh_UpdateNeighbors+0x4a>
 801d362:	f1ba 0f00 	cmp.w	sl, #0
 801d366:	d009      	beq.n	801d37c <BLEMesh_UpdateNeighbors+0x4a>
 801d368:	2c03      	cmp	r4, #3
 801d36a:	d807      	bhi.n	801d37c <BLEMesh_UpdateNeighbors+0x4a>
 801d36c:	e8df f004 	tbb	[pc, r4]
 801d370:	0f0c0902 	.word	0x0f0c0902
 801d374:	f896 3159 	ldrb.w	r3, [r6, #345]	; 0x159
 801d378:	2b01      	cmp	r3, #1
 801d37a:	d023      	beq.n	801d3c4 <BLEMesh_UpdateNeighbors+0x92>
 801d37c:	b00b      	add	sp, #44	; 0x2c
 801d37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d382:	f896 315a 	ldrb.w	r3, [r6, #346]	; 0x15a
 801d386:	e7f7      	b.n	801d378 <BLEMesh_UpdateNeighbors+0x46>
 801d388:	f896 315b 	ldrb.w	r3, [r6, #347]	; 0x15b
 801d38c:	e7f4      	b.n	801d378 <BLEMesh_UpdateNeighbors+0x46>
 801d38e:	f896 315b 	ldrb.w	r3, [r6, #347]	; 0x15b
 801d392:	2b02      	cmp	r3, #2
 801d394:	e7f1      	b.n	801d37a <BLEMesh_UpdateNeighbors+0x48>
 801d396:	9b03      	ldr	r3, [sp, #12]
 801d398:	bb23      	cbnz	r3, 801d3e4 <BLEMesh_UpdateNeighbors+0xb2>
 801d39a:	eb07 1345 	add.w	r3, r7, r5, lsl #5
 801d39e:	7f9a      	ldrb	r2, [r3, #30]
 801d3a0:	9203      	str	r2, [sp, #12]
 801d3a2:	2a01      	cmp	r2, #1
 801d3a4:	d11c      	bne.n	801d3e0 <BLEMesh_UpdateNeighbors+0xae>
 801d3a6:	9905      	ldr	r1, [sp, #20]
 801d3a8:	699a      	ldr	r2, [r3, #24]
 801d3aa:	1a8a      	subs	r2, r1, r2
 801d3ac:	f8d6 1154 	ldr.w	r1, [r6, #340]	; 0x154
 801d3b0:	428a      	cmp	r2, r1
 801d3b2:	f240 8084 	bls.w	801d4be <BLEMesh_UpdateNeighbors+0x18c>
 801d3b6:	f04f 0200 	mov.w	r2, #0
 801d3ba:	2c00      	cmp	r4, #0
 801d3bc:	779a      	strb	r2, [r3, #30]
 801d3be:	da18      	bge.n	801d3f2 <BLEMesh_UpdateNeighbors+0xc0>
 801d3c0:	b26c      	sxtb	r4, r5
 801d3c2:	e016      	b.n	801d3f2 <BLEMesh_UpdateNeighbors+0xc0>
 801d3c4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d3c8:	9307      	str	r3, [sp, #28]
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	f04f 0b00 	mov.w	fp, #0
 801d3d0:	9b06      	ldr	r3, [sp, #24]
 801d3d2:	bfd8      	it	le
 801d3d4:	2300      	movle	r3, #0
 801d3d6:	9309      	str	r3, [sp, #36]	; 0x24
 801d3d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801d3dc:	465d      	mov	r5, fp
 801d3de:	e7dc      	b.n	801d39a <BLEMesh_UpdateNeighbors+0x68>
 801d3e0:	2300      	movs	r3, #0
 801d3e2:	9303      	str	r3, [sp, #12]
 801d3e4:	2c00      	cmp	r4, #0
 801d3e6:	da04      	bge.n	801d3f2 <BLEMesh_UpdateNeighbors+0xc0>
 801d3e8:	eb07 1345 	add.w	r3, r7, r5, lsl #5
 801d3ec:	7f9b      	ldrb	r3, [r3, #30]
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	d0e6      	beq.n	801d3c0 <BLEMesh_UpdateNeighbors+0x8e>
 801d3f2:	f1bb 0f00 	cmp.w	fp, #0
 801d3f6:	d12e      	bne.n	801d456 <BLEMesh_UpdateNeighbors+0x124>
 801d3f8:	eb07 1845 	add.w	r8, r7, r5, lsl #5
 801d3fc:	f898 301e 	ldrb.w	r3, [r8, #30]
 801d400:	2b01      	cmp	r3, #1
 801d402:	d128      	bne.n	801d456 <BLEMesh_UpdateNeighbors+0x124>
 801d404:	2206      	movs	r2, #6
 801d406:	4641      	mov	r1, r8
 801d408:	4650      	mov	r0, sl
 801d40a:	f00b fba1 	bl	8028b50 <memcmp>
 801d40e:	bb10      	cbnz	r0, 801d456 <BLEMesh_UpdateNeighbors+0x124>
 801d410:	9b05      	ldr	r3, [sp, #20]
 801d412:	f8c8 3018 	str.w	r3, [r8, #24]
 801d416:	9b04      	ldr	r3, [sp, #16]
 801d418:	f888 301c 	strb.w	r3, [r8, #28]
 801d41c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d41e:	f888 901d 	strb.w	r9, [r8, #29]
 801d422:	f108 0b06 	add.w	fp, r8, #6
 801d426:	2b00      	cmp	r3, #0
 801d428:	d04c      	beq.n	801d4c4 <BLEMesh_UpdateNeighbors+0x192>
 801d42a:	4619      	mov	r1, r3
 801d42c:	465a      	mov	r2, fp
 801d42e:	3110      	adds	r1, #16
 801d430:	f853 0b04 	ldr.w	r0, [r3], #4
 801d434:	f842 0b04 	str.w	r0, [r2], #4
 801d438:	428b      	cmp	r3, r1
 801d43a:	d1f9      	bne.n	801d430 <BLEMesh_UpdateNeighbors+0xfe>
 801d43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d43e:	f8a8 3016 	strh.w	r3, [r8, #22]
 801d442:	9b04      	ldr	r3, [sp, #16]
 801d444:	9300      	str	r3, [sp, #0]
 801d446:	465a      	mov	r2, fp
 801d448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d44a:	4649      	mov	r1, r9
 801d44c:	4640      	mov	r0, r8
 801d44e:	f7e9 f8fb 	bl	8006648 <BLEMesh_NeighborRefreshedCallback>
 801d452:	f04f 0b01 	mov.w	fp, #1
 801d456:	9b08      	ldr	r3, [sp, #32]
 801d458:	3501      	adds	r5, #1
 801d45a:	b2ad      	uxth	r5, r5
 801d45c:	42ab      	cmp	r3, r5
 801d45e:	d89a      	bhi.n	801d396 <BLEMesh_UpdateNeighbors+0x64>
 801d460:	f1bb 0f00 	cmp.w	fp, #0
 801d464:	d18a      	bne.n	801d37c <BLEMesh_UpdateNeighbors+0x4a>
 801d466:	2c00      	cmp	r4, #0
 801d468:	db88      	blt.n	801d37c <BLEMesh_UpdateNeighbors+0x4a>
 801d46a:	eb07 1444 	add.w	r4, r7, r4, lsl #5
 801d46e:	2301      	movs	r3, #1
 801d470:	77a3      	strb	r3, [r4, #30]
 801d472:	9b05      	ldr	r3, [sp, #20]
 801d474:	61a3      	str	r3, [r4, #24]
 801d476:	2206      	movs	r2, #6
 801d478:	4651      	mov	r1, sl
 801d47a:	4620      	mov	r0, r4
 801d47c:	f00b fb86 	bl	8028b8c <memmove>
 801d480:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d482:	f884 901d 	strb.w	r9, [r4, #29]
 801d486:	1da2      	adds	r2, r4, #6
 801d488:	b143      	cbz	r3, 801d49c <BLEMesh_UpdateNeighbors+0x16a>
 801d48a:	4611      	mov	r1, r2
 801d48c:	f103 0010 	add.w	r0, r3, #16
 801d490:	f853 6b04 	ldr.w	r6, [r3], #4
 801d494:	f841 6b04 	str.w	r6, [r1], #4
 801d498:	4283      	cmp	r3, r0
 801d49a:	d1f9      	bne.n	801d490 <BLEMesh_UpdateNeighbors+0x15e>
 801d49c:	9b07      	ldr	r3, [sp, #28]
 801d49e:	9904      	ldr	r1, [sp, #16]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	bfc2      	ittt	gt
 801d4a4:	eb07 1545 	addgt.w	r5, r7, r5, lsl #5
 801d4a8:	9b06      	ldrgt	r3, [sp, #24]
 801d4aa:	82eb      	strhgt	r3, [r5, #22]
 801d4ac:	9b04      	ldr	r3, [sp, #16]
 801d4ae:	7723      	strb	r3, [r4, #28]
 801d4b0:	4620      	mov	r0, r4
 801d4b2:	8ae3      	ldrh	r3, [r4, #22]
 801d4b4:	9100      	str	r1, [sp, #0]
 801d4b6:	4649      	mov	r1, r9
 801d4b8:	f7e9 f892 	bl	80065e0 <BLEMesh_NeighborAppearedCallback>
 801d4bc:	e75e      	b.n	801d37c <BLEMesh_UpdateNeighbors+0x4a>
 801d4be:	2300      	movs	r3, #0
 801d4c0:	9303      	str	r3, [sp, #12]
 801d4c2:	e796      	b.n	801d3f2 <BLEMesh_UpdateNeighbors+0xc0>
 801d4c4:	9914      	ldr	r1, [sp, #80]	; 0x50
 801d4c6:	2210      	movs	r2, #16
 801d4c8:	4658      	mov	r0, fp
 801d4ca:	f00b fb79 	bl	8028bc0 <memset>
 801d4ce:	e7b5      	b.n	801d43c <BLEMesh_UpdateNeighbors+0x10a>

0801d4d0 <MobleSetGet>:
 801d4d0:	b510      	push	{r4, lr}
 801d4d2:	b928      	cbnz	r0, 801d4e0 <MobleSetGet+0x10>
 801d4d4:	4b10      	ldr	r3, [pc, #64]	; (801d518 <MobleSetGet+0x48>)
 801d4d6:	4a11      	ldr	r2, [pc, #68]	; (801d51c <MobleSetGet+0x4c>)
 801d4d8:	21be      	movs	r1, #190	; 0xbe
 801d4da:	4811      	ldr	r0, [pc, #68]	; (801d520 <MobleSetGet+0x50>)
 801d4dc:	f00b fade 	bl	8028a9c <__assert_func>
 801d4e0:	b91a      	cbnz	r2, 801d4ea <MobleSetGet+0x1a>
 801d4e2:	4b10      	ldr	r3, [pc, #64]	; (801d524 <MobleSetGet+0x54>)
 801d4e4:	4a0d      	ldr	r2, [pc, #52]	; (801d51c <MobleSetGet+0x4c>)
 801d4e6:	21bf      	movs	r1, #191	; 0xbf
 801d4e8:	e7f7      	b.n	801d4da <MobleSetGet+0xa>
 801d4ea:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 801d4ee:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	da0d      	bge.n	801d512 <MobleSetGet+0x42>
 801d4f6:	f810 3011 	ldrb.w	r3, [r0, r1, lsl #1]
 801d4fa:	7861      	ldrb	r1, [r4, #1]
 801d4fc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801d500:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801d504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801d508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801d50c:	8013      	strh	r3, [r2, #0]
 801d50e:	2000      	movs	r0, #0
 801d510:	bd10      	pop	{r4, pc}
 801d512:	2002      	movs	r0, #2
 801d514:	e7fc      	b.n	801d510 <MobleSetGet+0x40>
 801d516:	bf00      	nop
 801d518:	08033973 	.word	0x08033973
 801d51c:	08031794 	.word	0x08031794
 801d520:	08033977 	.word	0x08033977
 801d524:	080334e0 	.word	0x080334e0

0801d528 <BLEMesh_GetLibraryVersion>:
 801d528:	4800      	ldr	r0, [pc, #0]	; (801d52c <BLEMesh_GetLibraryVersion+0x4>)
 801d52a:	4770      	bx	lr
 801d52c:	080339b0 	.word	0x080339b0

0801d530 <BLEMesh_GetLibrarySubVersion>:
 801d530:	4800      	ldr	r0, [pc, #0]	; (801d534 <BLEMesh_GetLibrarySubVersion+0x4>)
 801d532:	4770      	bx	lr
 801d534:	080339ba 	.word	0x080339ba

0801d538 <BLEMesh_BleHardwareInitCallBack>:
 801d538:	b118      	cbz	r0, 801d542 <BLEMesh_BleHardwareInitCallBack+0xa>
 801d53a:	4b03      	ldr	r3, [pc, #12]	; (801d548 <BLEMesh_BleHardwareInitCallBack+0x10>)
 801d53c:	6058      	str	r0, [r3, #4]
 801d53e:	2000      	movs	r0, #0
 801d540:	4770      	bx	lr
 801d542:	2003      	movs	r0, #3
 801d544:	4770      	bx	lr
 801d546:	bf00      	nop
 801d548:	20000318 	.word	0x20000318

0801d54c <BLEMesh_BleConfigModelInitCallBack>:
 801d54c:	b120      	cbz	r0, 801d558 <BLEMesh_BleConfigModelInitCallBack+0xc>
 801d54e:	4b03      	ldr	r3, [pc, #12]	; (801d55c <BLEMesh_BleConfigModelInitCallBack+0x10>)
 801d550:	f8c3 06f8 	str.w	r0, [r3, #1784]	; 0x6f8
 801d554:	2000      	movs	r0, #0
 801d556:	4770      	bx	lr
 801d558:	2003      	movs	r0, #3
 801d55a:	4770      	bx	lr
 801d55c:	20002508 	.word	0x20002508

0801d560 <MobleBeaconSetGeneric>:
 801d560:	b570      	push	{r4, r5, r6, lr}
 801d562:	460c      	mov	r4, r1
 801d564:	4611      	mov	r1, r2
 801d566:	9a04      	ldr	r2, [sp, #16]
 801d568:	b188      	cbz	r0, 801d58e <MobleBeaconSetGeneric+0x2e>
 801d56a:	b183      	cbz	r3, 801d58e <MobleBeaconSetGeneric+0x2e>
 801d56c:	b17c      	cbz	r4, 801d58e <MobleBeaconSetGeneric+0x2e>
 801d56e:	6826      	ldr	r6, [r4, #0]
 801d570:	1cd5      	adds	r5, r2, #3
 801d572:	42b5      	cmp	r5, r6
 801d574:	d80b      	bhi.n	801d58e <MobleBeaconSetGeneric+0x2e>
 801d576:	6025      	str	r5, [r4, #0]
 801d578:	1c94      	adds	r4, r2, #2
 801d57a:	7004      	strb	r4, [r0, #0]
 801d57c:	242b      	movs	r4, #43	; 0x2b
 801d57e:	7081      	strb	r1, [r0, #2]
 801d580:	7044      	strb	r4, [r0, #1]
 801d582:	4619      	mov	r1, r3
 801d584:	3003      	adds	r0, #3
 801d586:	f00b faf3 	bl	8028b70 <memcpy>
 801d58a:	2000      	movs	r0, #0
 801d58c:	bd70      	pop	{r4, r5, r6, pc}
 801d58e:	2003      	movs	r0, #3
 801d590:	e7fc      	b.n	801d58c <MobleBeaconSetGeneric+0x2c>

0801d592 <MobleBeaconSetUnprovisioned>:
 801d592:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d596:	b089      	sub	sp, #36	; 0x24
 801d598:	4614      	mov	r4, r2
 801d59a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d59c:	2212      	movs	r2, #18
 801d59e:	4605      	mov	r5, r0
 801d5a0:	460e      	mov	r6, r1
 801d5a2:	a803      	add	r0, sp, #12
 801d5a4:	2100      	movs	r1, #0
 801d5a6:	4698      	mov	r8, r3
 801d5a8:	9102      	str	r1, [sp, #8]
 801d5aa:	f00b fb09 	bl	8028bc0 <memset>
 801d5ae:	2f00      	cmp	r7, #0
 801d5b0:	bf0c      	ite	eq
 801d5b2:	f04f 0912 	moveq.w	r9, #18
 801d5b6:	f04f 0916 	movne.w	r9, #22
 801d5ba:	4622      	mov	r2, r4
 801d5bc:	ab02      	add	r3, sp, #8
 801d5be:	f104 0c10 	add.w	ip, r4, #16
 801d5c2:	6810      	ldr	r0, [r2, #0]
 801d5c4:	6851      	ldr	r1, [r2, #4]
 801d5c6:	461c      	mov	r4, r3
 801d5c8:	c403      	stmia	r4!, {r0, r1}
 801d5ca:	3208      	adds	r2, #8
 801d5cc:	4562      	cmp	r2, ip
 801d5ce:	4623      	mov	r3, r4
 801d5d0:	d1f7      	bne.n	801d5c2 <MobleBeaconSetUnprovisioned+0x30>
 801d5d2:	2202      	movs	r2, #2
 801d5d4:	4641      	mov	r1, r8
 801d5d6:	a806      	add	r0, sp, #24
 801d5d8:	f7fd fe0c 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801d5dc:	b12f      	cbz	r7, 801d5ea <MobleBeaconSetUnprovisioned+0x58>
 801d5de:	6839      	ldr	r1, [r7, #0]
 801d5e0:	2204      	movs	r2, #4
 801d5e2:	f10d 001a 	add.w	r0, sp, #26
 801d5e6:	f7fd fe05 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801d5ea:	f8cd 9000 	str.w	r9, [sp]
 801d5ee:	ab02      	add	r3, sp, #8
 801d5f0:	2200      	movs	r2, #0
 801d5f2:	4631      	mov	r1, r6
 801d5f4:	4628      	mov	r0, r5
 801d5f6:	f7ff ffb3 	bl	801d560 <MobleBeaconSetGeneric>
 801d5fa:	b009      	add	sp, #36	; 0x24
 801d5fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801d600 <MobleBeaconSetSecure>:
 801d600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d604:	b08d      	sub	sp, #52	; 0x34
 801d606:	460e      	mov	r6, r1
 801d608:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 801d60c:	4617      	mov	r7, r2
 801d60e:	461c      	mov	r4, r3
 801d610:	4605      	mov	r5, r0
 801d612:	2800      	cmp	r0, #0
 801d614:	d03d      	beq.n	801d692 <MobleBeaconSetSecure+0x92>
 801d616:	2900      	cmp	r1, #0
 801d618:	d03b      	beq.n	801d692 <MobleBeaconSetSecure+0x92>
 801d61a:	b3d3      	cbz	r3, 801d692 <MobleBeaconSetSecure+0x92>
 801d61c:	f04f 0800 	mov.w	r8, #0
 801d620:	2211      	movs	r2, #17
 801d622:	4641      	mov	r1, r8
 801d624:	a807      	add	r0, sp, #28
 801d626:	f00b facb 	bl	8028bc0 <memset>
 801d62a:	6823      	ldr	r3, [r4, #0]
 801d62c:	6822      	ldr	r2, [r4, #0]
 801d62e:	f8cd 3019 	str.w	r3, [sp, #25]
 801d632:	f8cd 2009 	str.w	r2, [sp, #9]
 801d636:	6863      	ldr	r3, [r4, #4]
 801d638:	f8cd 8010 	str.w	r8, [sp, #16]
 801d63c:	2204      	movs	r2, #4
 801d63e:	4649      	mov	r1, r9
 801d640:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 801d644:	f8cd 301d 	str.w	r3, [sp, #29]
 801d648:	f8cd 300d 	str.w	r3, [sp, #13]
 801d64c:	f88d 8014 	strb.w	r8, [sp, #20]
 801d650:	f88d 7018 	strb.w	r7, [sp, #24]
 801d654:	f88d 7008 	strb.w	r7, [sp, #8]
 801d658:	f7fd fdcc 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801d65c:	2204      	movs	r2, #4
 801d65e:	4649      	mov	r1, r9
 801d660:	f10d 0011 	add.w	r0, sp, #17
 801d664:	f7fd fdc6 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801d668:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801d66c:	220d      	movs	r2, #13
 801d66e:	a902      	add	r1, sp, #8
 801d670:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 801d674:	f7fc faec 	bl	8019c50 <MoblePalCryptoAuthenticateSecureNetworkBeacon>
 801d678:	2801      	cmp	r0, #1
 801d67a:	d807      	bhi.n	801d68c <MobleBeaconSetSecure+0x8c>
 801d67c:	2315      	movs	r3, #21
 801d67e:	9300      	str	r3, [sp, #0]
 801d680:	2201      	movs	r2, #1
 801d682:	ab06      	add	r3, sp, #24
 801d684:	4631      	mov	r1, r6
 801d686:	4628      	mov	r0, r5
 801d688:	f7ff ff6a 	bl	801d560 <MobleBeaconSetGeneric>
 801d68c:	b00d      	add	sp, #52	; 0x34
 801d68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d692:	2003      	movs	r0, #3
 801d694:	e7fa      	b.n	801d68c <MobleBeaconSetSecure+0x8c>

0801d696 <MobleGattBeaconSetSectionGeneric>:
 801d696:	b570      	push	{r4, r5, r6, lr}
 801d698:	4614      	mov	r4, r2
 801d69a:	e9dd 6204 	ldrd	r6, r2, [sp, #16]
 801d69e:	b180      	cbz	r0, 801d6c2 <MobleGattBeaconSetSectionGeneric+0x2c>
 801d6a0:	b17e      	cbz	r6, 801d6c2 <MobleGattBeaconSetSectionGeneric+0x2c>
 801d6a2:	b174      	cbz	r4, 801d6c2 <MobleGattBeaconSetSectionGeneric+0x2c>
 801d6a4:	1c95      	adds	r5, r2, #2
 801d6a6:	428d      	cmp	r5, r1
 801d6a8:	d80b      	bhi.n	801d6c2 <MobleGattBeaconSetSectionGeneric+0x2c>
 801d6aa:	1c51      	adds	r1, r2, #1
 801d6ac:	7001      	strb	r1, [r0, #0]
 801d6ae:	7043      	strb	r3, [r0, #1]
 801d6b0:	4631      	mov	r1, r6
 801d6b2:	3002      	adds	r0, #2
 801d6b4:	f00b fa5c 	bl	8028b70 <memcpy>
 801d6b8:	6823      	ldr	r3, [r4, #0]
 801d6ba:	442b      	add	r3, r5
 801d6bc:	6023      	str	r3, [r4, #0]
 801d6be:	2000      	movs	r0, #0
 801d6c0:	bd70      	pop	{r4, r5, r6, pc}
 801d6c2:	2003      	movs	r0, #3
 801d6c4:	e7fc      	b.n	801d6c0 <MobleGattBeaconSetSectionGeneric+0x2a>
	...

0801d6c8 <MobleStackGattBeaconGenerator>:
 801d6c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d6cc:	2902      	cmp	r1, #2
 801d6ce:	b097      	sub	sp, #92	; 0x5c
 801d6d0:	4606      	mov	r6, r0
 801d6d2:	460d      	mov	r5, r1
 801d6d4:	f340 80e3 	ble.w	801d89e <MobleStackGattBeaconGenerator+0x1d6>
 801d6d8:	f7fa fc5a 	bl	8017f90 <MoblePalBluetoothGetConnectionState>
 801d6dc:	2802      	cmp	r0, #2
 801d6de:	f040 80e1 	bne.w	801d8a4 <MobleStackGattBeaconGenerator+0x1dc>
 801d6e2:	4f71      	ldr	r7, [pc, #452]	; (801d8a8 <MobleStackGattBeaconGenerator+0x1e0>)
 801d6e4:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 801d6e8:	781b      	ldrb	r3, [r3, #0]
 801d6ea:	b9c3      	cbnz	r3, 801d71e <MobleStackGattBeaconGenerator+0x56>
 801d6ec:	f897 3855 	ldrb.w	r3, [r7, #2133]	; 0x855
 801d6f0:	b18b      	cbz	r3, 801d716 <MobleStackGattBeaconGenerator+0x4e>
 801d6f2:	2306      	movs	r3, #6
 801d6f4:	f88d 300b 	strb.w	r3, [sp, #11]
 801d6f8:	f10d 020b 	add.w	r2, sp, #11
 801d6fc:	2301      	movs	r3, #1
 801d6fe:	9200      	str	r2, [sp, #0]
 801d700:	2400      	movs	r4, #0
 801d702:	9301      	str	r3, [sp, #4]
 801d704:	aa04      	add	r2, sp, #16
 801d706:	4629      	mov	r1, r5
 801d708:	4630      	mov	r0, r6
 801d70a:	9404      	str	r4, [sp, #16]
 801d70c:	f7ff ffc3 	bl	801d696 <MobleGattBeaconSetSectionGeneric>
 801d710:	2801      	cmp	r0, #1
 801d712:	d90e      	bls.n	801d732 <MobleStackGattBeaconGenerator+0x6a>
 801d714:	9b04      	ldr	r3, [sp, #16]
 801d716:	4618      	mov	r0, r3
 801d718:	b017      	add	sp, #92	; 0x5c
 801d71a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d71e:	2b01      	cmp	r3, #1
 801d720:	d1e7      	bne.n	801d6f2 <MobleStackGattBeaconGenerator+0x2a>
 801d722:	4b62      	ldr	r3, [pc, #392]	; (801d8ac <MobleStackGattBeaconGenerator+0x1e4>)
 801d724:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801d728:	2b01      	cmp	r3, #1
 801d72a:	d0e2      	beq.n	801d6f2 <MobleStackGattBeaconGenerator+0x2a>
 801d72c:	f897 392d 	ldrb.w	r3, [r7, #2349]	; 0x92d
 801d730:	e7de      	b.n	801d6f0 <MobleStackGattBeaconGenerator+0x28>
 801d732:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 801d736:	781b      	ldrb	r3, [r3, #0]
 801d738:	2b00      	cmp	r3, #0
 801d73a:	d075      	beq.n	801d828 <MobleStackGattBeaconGenerator+0x160>
 801d73c:	2328      	movs	r3, #40	; 0x28
 801d73e:	f88d 300c 	strb.w	r3, [sp, #12]
 801d742:	2318      	movs	r3, #24
 801d744:	9804      	ldr	r0, [sp, #16]
 801d746:	f88d 300d 	strb.w	r3, [sp, #13]
 801d74a:	2302      	movs	r3, #2
 801d74c:	9301      	str	r3, [sp, #4]
 801d74e:	ab03      	add	r3, sp, #12
 801d750:	9300      	str	r3, [sp, #0]
 801d752:	1a29      	subs	r1, r5, r0
 801d754:	2303      	movs	r3, #3
 801d756:	aa04      	add	r2, sp, #16
 801d758:	4430      	add	r0, r6
 801d75a:	f7ff ff9c 	bl	801d696 <MobleGattBeaconSetSectionGeneric>
 801d75e:	2801      	cmp	r0, #1
 801d760:	d8d8      	bhi.n	801d714 <MobleStackGattBeaconGenerator+0x4c>
 801d762:	4b52      	ldr	r3, [pc, #328]	; (801d8ac <MobleStackGattBeaconGenerator+0x1e4>)
 801d764:	f893 80bb 	ldrb.w	r8, [r3, #187]	; 0xbb
 801d768:	9411      	str	r4, [sp, #68]	; 0x44
 801d76a:	f1b8 0f01 	cmp.w	r8, #1
 801d76e:	d147      	bne.n	801d800 <MobleStackGattBeaconGenerator+0x138>
 801d770:	220f      	movs	r2, #15
 801d772:	4621      	mov	r1, r4
 801d774:	a812      	add	r0, sp, #72	; 0x48
 801d776:	f00b fa23 	bl	8028bc0 <memset>
 801d77a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801d77e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 801d782:	f7fb fc99 	bl	80190b8 <MoblePalCryptoGetNodeIdntyToBeAdvt>
 801d786:	4601      	mov	r1, r0
 801d788:	a809      	add	r0, sp, #36	; 0x24
 801d78a:	f7fc f8a1 	bl	80198d0 <MoblePalCryptoIdentityKey>
 801d78e:	2801      	cmp	r0, #1
 801d790:	f200 8088 	bhi.w	801d8a4 <MobleStackGattBeaconGenerator+0x1dc>
 801d794:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801d798:	f88d 8046 	strb.w	r8, [sp, #70]	; 0x46
 801d79c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 801d7a0:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 801d7a4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801d7a8:	f10d 093a 	add.w	r9, sp, #58	; 0x3a
 801d7ac:	f10d 084f 	add.w	r8, sp, #79	; 0x4f
 801d7b0:	2408      	movs	r4, #8
 801d7b2:	f7fa fc4d 	bl	8018050 <MoblePalBluetoothRandom>
 801d7b6:	3c01      	subs	r4, #1
 801d7b8:	f809 0b01 	strb.w	r0, [r9], #1
 801d7bc:	f808 0b01 	strb.w	r0, [r8], #1
 801d7c0:	d1f7      	bne.n	801d7b2 <MobleStackGattBeaconGenerator+0xea>
 801d7c2:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 801d7c6:	2202      	movs	r2, #2
 801d7c8:	8859      	ldrh	r1, [r3, #2]
 801d7ca:	f10d 0042 	add.w	r0, sp, #66	; 0x42
 801d7ce:	f7fd fd11 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801d7d2:	a90d      	add	r1, sp, #52	; 0x34
 801d7d4:	a809      	add	r0, sp, #36	; 0x24
 801d7d6:	aa05      	add	r2, sp, #20
 801d7d8:	f7fb f802 	bl	80187e0 <BAES_EcbEncrypt>
 801d7dc:	ab07      	add	r3, sp, #28
 801d7de:	cb03      	ldmia	r3!, {r0, r1}
 801d7e0:	f8cd 0047 	str.w	r0, [sp, #71]	; 0x47
 801d7e4:	9804      	ldr	r0, [sp, #16]
 801d7e6:	f8cd 104b 	str.w	r1, [sp, #75]	; 0x4b
 801d7ea:	2313      	movs	r3, #19
 801d7ec:	9301      	str	r3, [sp, #4]
 801d7ee:	ab11      	add	r3, sp, #68	; 0x44
 801d7f0:	9300      	str	r3, [sp, #0]
 801d7f2:	1a29      	subs	r1, r5, r0
 801d7f4:	2316      	movs	r3, #22
 801d7f6:	aa04      	add	r2, sp, #16
 801d7f8:	4430      	add	r0, r6
 801d7fa:	f7ff ff4c 	bl	801d696 <MobleGattBeaconSetSectionGeneric>
 801d7fe:	e789      	b.n	801d714 <MobleStackGattBeaconGenerator+0x4c>
 801d800:	9412      	str	r4, [sp, #72]	; 0x48
 801d802:	f8cd 404b 	str.w	r4, [sp, #75]	; 0x4b
 801d806:	f7fb fc81 	bl	801910c <MoblePalCryptoGetNetworkIdToBeAdvt>
 801d80a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801d80e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801d812:	f88d 4046 	strb.w	r4, [sp, #70]	; 0x46
 801d816:	6803      	ldr	r3, [r0, #0]
 801d818:	f8cd 3047 	str.w	r3, [sp, #71]	; 0x47
 801d81c:	6843      	ldr	r3, [r0, #4]
 801d81e:	f8cd 304b 	str.w	r3, [sp, #75]	; 0x4b
 801d822:	9804      	ldr	r0, [sp, #16]
 801d824:	230b      	movs	r3, #11
 801d826:	e7e1      	b.n	801d7ec <MobleStackGattBeaconGenerator+0x124>
 801d828:	4a21      	ldr	r2, [pc, #132]	; (801d8b0 <MobleStackGattBeaconGenerator+0x1e8>)
 801d82a:	f892 4725 	ldrb.w	r4, [r2, #1829]	; 0x725
 801d82e:	2c00      	cmp	r4, #0
 801d830:	f47f af71 	bne.w	801d716 <MobleStackGattBeaconGenerator+0x4e>
 801d834:	2327      	movs	r3, #39	; 0x27
 801d836:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801d83a:	2318      	movs	r3, #24
 801d83c:	9804      	ldr	r0, [sp, #16]
 801d83e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 801d842:	2302      	movs	r3, #2
 801d844:	9301      	str	r3, [sp, #4]
 801d846:	ab09      	add	r3, sp, #36	; 0x24
 801d848:	9300      	str	r3, [sp, #0]
 801d84a:	1a29      	subs	r1, r5, r0
 801d84c:	2303      	movs	r3, #3
 801d84e:	aa04      	add	r2, sp, #16
 801d850:	4430      	add	r0, r6
 801d852:	f7ff ff20 	bl	801d696 <MobleGattBeaconSetSectionGeneric>
 801d856:	2801      	cmp	r0, #1
 801d858:	f63f af5c 	bhi.w	801d714 <MobleStackGattBeaconGenerator+0x4c>
 801d85c:	4621      	mov	r1, r4
 801d85e:	2210      	movs	r2, #16
 801d860:	a812      	add	r0, sp, #72	; 0x48
 801d862:	9411      	str	r4, [sp, #68]	; 0x44
 801d864:	f00b f9ac 	bl	8028bc0 <memset>
 801d868:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d86c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801d870:	4b0e      	ldr	r3, [pc, #56]	; (801d8ac <MobleStackGattBeaconGenerator+0x1e4>)
 801d872:	685b      	ldr	r3, [r3, #4]
 801d874:	a80d      	add	r0, sp, #52	; 0x34
 801d876:	695b      	ldr	r3, [r3, #20]
 801d878:	4798      	blx	r3
 801d87a:	f10d 0446 	add.w	r4, sp, #70	; 0x46
 801d87e:	ab0d      	add	r3, sp, #52	; 0x34
 801d880:	af11      	add	r7, sp, #68	; 0x44
 801d882:	461a      	mov	r2, r3
 801d884:	ca03      	ldmia	r2!, {r0, r1}
 801d886:	42ba      	cmp	r2, r7
 801d888:	6020      	str	r0, [r4, #0]
 801d88a:	6061      	str	r1, [r4, #4]
 801d88c:	4613      	mov	r3, r2
 801d88e:	f104 0408 	add.w	r4, r4, #8
 801d892:	d1f6      	bne.n	801d882 <MobleStackGattBeaconGenerator+0x1ba>
 801d894:	2314      	movs	r3, #20
 801d896:	e9cd 7300 	strd	r7, r3, [sp]
 801d89a:	9804      	ldr	r0, [sp, #16]
 801d89c:	e7a9      	b.n	801d7f2 <MobleStackGattBeaconGenerator+0x12a>
 801d89e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d8a2:	e738      	b.n	801d716 <MobleStackGattBeaconGenerator+0x4e>
 801d8a4:	2300      	movs	r3, #0
 801d8a6:	e736      	b.n	801d716 <MobleStackGattBeaconGenerator+0x4e>
 801d8a8:	20001410 	.word	0x20001410
 801d8ac:	20000318 	.word	0x20000318
 801d8b0:	20002508 	.word	0x20002508

0801d8b4 <BnrgmProxyProtocol_DeInit>:
 801d8b4:	4a05      	ldr	r2, [pc, #20]	; (801d8cc <BnrgmProxyProtocol_DeInit+0x18>)
 801d8b6:	2300      	movs	r3, #0
 801d8b8:	7213      	strb	r3, [r2, #8]
 801d8ba:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 801d8be:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 801d8c2:	b102      	cbz	r2, 801d8c6 <BnrgmProxyProtocol_DeInit+0x12>
 801d8c4:	7013      	strb	r3, [r2, #0]
 801d8c6:	2000      	movs	r0, #0
 801d8c8:	4770      	bx	lr
 801d8ca:	bf00      	nop
 801d8cc:	20000318 	.word	0x20000318

0801d8d0 <BnrgmProxyProtocol_Init>:
 801d8d0:	b510      	push	{r4, lr}
 801d8d2:	4908      	ldr	r1, [pc, #32]	; (801d8f4 <BnrgmProxyProtocol_Init+0x24>)
 801d8d4:	7a0b      	ldrb	r3, [r1, #8]
 801d8d6:	b10b      	cbz	r3, 801d8dc <BnrgmProxyProtocol_Init+0xc>
 801d8d8:	f7ff ffec 	bl	801d8b4 <BnrgmProxyProtocol_DeInit>
 801d8dc:	4a06      	ldr	r2, [pc, #24]	; (801d8f8 <BnrgmProxyProtocol_Init+0x28>)
 801d8de:	2400      	movs	r4, #0
 801d8e0:	f881 408e 	strb.w	r4, [r1, #142]	; 0x8e
 801d8e4:	f102 0088 	add.w	r0, r2, #136	; 0x88
 801d8e8:	4904      	ldr	r1, [pc, #16]	; (801d8fc <BnrgmProxyProtocol_Init+0x2c>)
 801d8ea:	f7fa f913 	bl	8017b14 <MoblePalTimerCreate>
 801d8ee:	4620      	mov	r0, r4
 801d8f0:	bd10      	pop	{r4, pc}
 801d8f2:	bf00      	nop
 801d8f4:	20000318 	.word	0x20000318
 801d8f8:	20000320 	.word	0x20000320
 801d8fc:	0801f815 	.word	0x0801f815

0801d900 <BnrgmProxyProtocol_Notify>:
 801d900:	b507      	push	{r0, r1, r2, lr}
 801d902:	2301      	movs	r3, #1
 801d904:	9300      	str	r3, [sp, #0]
 801d906:	4602      	mov	r2, r0
 801d908:	b2cb      	uxtb	r3, r1
 801d90a:	4805      	ldr	r0, [pc, #20]	; (801d920 <BnrgmProxyProtocol_Notify+0x20>)
 801d90c:	4905      	ldr	r1, [pc, #20]	; (801d924 <BnrgmProxyProtocol_Notify+0x24>)
 801d90e:	f8b0 0340 	ldrh.w	r0, [r0, #832]	; 0x340
 801d912:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
 801d916:	f7fd faf1 	bl	801aefc <MoblePalBluetoothGattSendNotification>
 801d91a:	b003      	add	sp, #12
 801d91c:	f85d fb04 	ldr.w	pc, [sp], #4
 801d920:	20001410 	.word	0x20001410
 801d924:	20000318 	.word	0x20000318

0801d928 <BnrgmProxyProtocol_ResetSar>:
 801d928:	b508      	push	{r3, lr}
 801d92a:	4b05      	ldr	r3, [pc, #20]	; (801d940 <BnrgmProxyProtocol_ResetSar+0x18>)
 801d92c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 801d930:	2200      	movs	r2, #0
 801d932:	721a      	strb	r2, [r3, #8]
 801d934:	b108      	cbz	r0, 801d93a <BnrgmProxyProtocol_ResetSar+0x12>
 801d936:	f7fa f97f 	bl	8017c38 <MoblePalTimerStop>
 801d93a:	2000      	movs	r0, #0
 801d93c:	bd08      	pop	{r3, pc}
 801d93e:	bf00      	nop
 801d940:	20000318 	.word	0x20000318

0801d944 <BnrgmProxyProtocol_AddFragment>:
 801d944:	b570      	push	{r4, r5, r6, lr}
 801d946:	4d0a      	ldr	r5, [pc, #40]	; (801d970 <BnrgmProxyProtocol_AddFragment+0x2c>)
 801d948:	7a2b      	ldrb	r3, [r5, #8]
 801d94a:	185a      	adds	r2, r3, r1
 801d94c:	2a80      	cmp	r2, #128	; 0x80
 801d94e:	460c      	mov	r4, r1
 801d950:	dd03      	ble.n	801d95a <BnrgmProxyProtocol_AddFragment+0x16>
 801d952:	f7ff ffe9 	bl	801d928 <BnrgmProxyProtocol_ResetSar>
 801d956:	7a28      	ldrb	r0, [r5, #8]
 801d958:	bd70      	pop	{r4, r5, r6, pc}
 801d95a:	f105 060a 	add.w	r6, r5, #10
 801d95e:	460a      	mov	r2, r1
 801d960:	4601      	mov	r1, r0
 801d962:	18f0      	adds	r0, r6, r3
 801d964:	f00b f912 	bl	8028b8c <memmove>
 801d968:	7a2a      	ldrb	r2, [r5, #8]
 801d96a:	4414      	add	r4, r2
 801d96c:	722c      	strb	r4, [r5, #8]
 801d96e:	e7f2      	b.n	801d956 <BnrgmProxyProtocol_AddFragment+0x12>
 801d970:	20000318 	.word	0x20000318

0801d974 <BnrgmProxyConfig_ResetFilter>:
 801d974:	4b07      	ldr	r3, [pc, #28]	; (801d994 <BnrgmProxyConfig_ResetFilter+0x20>)
 801d976:	2000      	movs	r0, #0
 801d978:	f883 09ec 	strb.w	r0, [r3, #2540]	; 0x9ec
 801d97c:	f883 09ee 	strb.w	r0, [r3, #2542]	; 0x9ee
 801d980:	f883 09f2 	strb.w	r0, [r3, #2546]	; 0x9f2
 801d984:	f883 09f6 	strb.w	r0, [r3, #2550]	; 0x9f6
 801d988:	f883 09fa 	strb.w	r0, [r3, #2554]	; 0x9fa
 801d98c:	f883 09fe 	strb.w	r0, [r3, #2558]	; 0x9fe
 801d990:	4770      	bx	lr
 801d992:	bf00      	nop
 801d994:	20002508 	.word	0x20002508

0801d998 <BnrgmProxyConfig_AddProxyClient_Filter>:
 801d998:	b570      	push	{r4, r5, r6, lr}
 801d99a:	4602      	mov	r2, r0
 801d99c:	b1f8      	cbz	r0, 801d9de <BnrgmProxyConfig_AddProxyClient_Filter+0x46>
 801d99e:	4b12      	ldr	r3, [pc, #72]	; (801d9e8 <BnrgmProxyConfig_AddProxyClient_Filter+0x50>)
 801d9a0:	f893 09ec 	ldrb.w	r0, [r3, #2540]	; 0x9ec
 801d9a4:	b9e8      	cbnz	r0, 801d9e2 <BnrgmProxyConfig_AddProxyClient_Filter+0x4a>
 801d9a6:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 801d9aa:	4601      	mov	r1, r0
 801d9ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801d9b0:	78a6      	ldrb	r6, [r4, #2]
 801d9b2:	2e01      	cmp	r6, #1
 801d9b4:	d103      	bne.n	801d9be <BnrgmProxyConfig_AddProxyClient_Filter+0x26>
 801d9b6:	88a6      	ldrh	r6, [r4, #4]
 801d9b8:	4296      	cmp	r6, r2
 801d9ba:	d101      	bne.n	801d9c0 <BnrgmProxyConfig_AddProxyClient_Filter+0x28>
 801d9bc:	bd70      	pop	{r4, r5, r6, pc}
 801d9be:	b24d      	sxtb	r5, r1
 801d9c0:	3101      	adds	r1, #1
 801d9c2:	2905      	cmp	r1, #5
 801d9c4:	f104 0404 	add.w	r4, r4, #4
 801d9c8:	d1f2      	bne.n	801d9b0 <BnrgmProxyConfig_AddProxyClient_Filter+0x18>
 801d9ca:	1c69      	adds	r1, r5, #1
 801d9cc:	d0f6      	beq.n	801d9bc <BnrgmProxyConfig_AddProxyClient_Filter+0x24>
 801d9ce:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801d9d2:	2101      	movs	r1, #1
 801d9d4:	f883 19ee 	strb.w	r1, [r3, #2542]	; 0x9ee
 801d9d8:	f8a3 29f0 	strh.w	r2, [r3, #2544]	; 0x9f0
 801d9dc:	e7ee      	b.n	801d9bc <BnrgmProxyConfig_AddProxyClient_Filter+0x24>
 801d9de:	2002      	movs	r0, #2
 801d9e0:	e7ec      	b.n	801d9bc <BnrgmProxyConfig_AddProxyClient_Filter+0x24>
 801d9e2:	2001      	movs	r0, #1
 801d9e4:	e7ea      	b.n	801d9bc <BnrgmProxyConfig_AddProxyClient_Filter+0x24>
 801d9e6:	bf00      	nop
 801d9e8:	20002508 	.word	0x20002508

0801d9ec <BnrgmProxyConfig_CheckProxyFilter>:
 801d9ec:	b510      	push	{r4, lr}
 801d9ee:	4b0d      	ldr	r3, [pc, #52]	; (801da24 <BnrgmProxyConfig_CheckProxyFilter+0x38>)
 801d9f0:	4601      	mov	r1, r0
 801d9f2:	2200      	movs	r2, #0
 801d9f4:	7898      	ldrb	r0, [r3, #2]
 801d9f6:	2801      	cmp	r0, #1
 801d9f8:	d102      	bne.n	801da00 <BnrgmProxyConfig_CheckProxyFilter+0x14>
 801d9fa:	889c      	ldrh	r4, [r3, #4]
 801d9fc:	428c      	cmp	r4, r1
 801d9fe:	d005      	beq.n	801da0c <BnrgmProxyConfig_CheckProxyFilter+0x20>
 801da00:	3201      	adds	r2, #1
 801da02:	2a05      	cmp	r2, #5
 801da04:	f103 0304 	add.w	r3, r3, #4
 801da08:	d1f4      	bne.n	801d9f4 <BnrgmProxyConfig_CheckProxyFilter+0x8>
 801da0a:	2000      	movs	r0, #0
 801da0c:	4b06      	ldr	r3, [pc, #24]	; (801da28 <BnrgmProxyConfig_CheckProxyFilter+0x3c>)
 801da0e:	f893 39ec 	ldrb.w	r3, [r3, #2540]	; 0x9ec
 801da12:	b12b      	cbz	r3, 801da20 <BnrgmProxyConfig_CheckProxyFilter+0x34>
 801da14:	2b01      	cmp	r3, #1
 801da16:	bf06      	itte	eq
 801da18:	f1c0 0001 	rsbeq	r0, r0, #1
 801da1c:	b2c0      	uxtbeq	r0, r0
 801da1e:	2000      	movne	r0, #0
 801da20:	bd10      	pop	{r4, pc}
 801da22:	bf00      	nop
 801da24:	20002ef4 	.word	0x20002ef4
 801da28:	20002508 	.word	0x20002508

0801da2c <BnrgmProxyProtocol_SendData>:
 801da2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da30:	461d      	mov	r5, r3
 801da32:	4b21      	ldr	r3, [pc, #132]	; (801dab8 <BnrgmProxyProtocol_SendData+0x8c>)
 801da34:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 801da38:	4604      	mov	r4, r0
 801da3a:	b087      	sub	sp, #28
 801da3c:	4608      	mov	r0, r1
 801da3e:	4617      	mov	r7, r2
 801da40:	b3c3      	cbz	r3, 801dab4 <BnrgmProxyProtocol_SendData+0x88>
 801da42:	f014 043f 	ands.w	r4, r4, #63	; 0x3f
 801da46:	d132      	bne.n	801daae <BnrgmProxyProtocol_SendData+0x82>
 801da48:	f7ff ffd0 	bl	801d9ec <BnrgmProxyConfig_CheckProxyFilter>
 801da4c:	b390      	cbz	r0, 801dab4 <BnrgmProxyProtocol_SendData+0x88>
 801da4e:	4620      	mov	r0, r4
 801da50:	463e      	mov	r6, r7
 801da52:	f064 087f 	orn	r8, r4, #127	; 0x7f
 801da56:	f044 0940 	orr.w	r9, r4, #64	; 0x40
 801da5a:	f064 0a3f 	orn	sl, r4, #63	; 0x3f
 801da5e:	e01a      	b.n	801da96 <BnrgmProxyProtocol_SendData+0x6a>
 801da60:	2d13      	cmp	r5, #19
 801da62:	46ab      	mov	fp, r5
 801da64:	bf28      	it	cs
 801da66:	f04f 0b13 	movcs.w	fp, #19
 801da6a:	2d13      	cmp	r5, #19
 801da6c:	d818      	bhi.n	801daa0 <BnrgmProxyProtocol_SendData+0x74>
 801da6e:	42b7      	cmp	r7, r6
 801da70:	bf0c      	ite	eq
 801da72:	f88d 4004 	strbeq.w	r4, [sp, #4]
 801da76:	f88d a004 	strbne.w	sl, [sp, #4]
 801da7a:	4631      	mov	r1, r6
 801da7c:	465a      	mov	r2, fp
 801da7e:	f10d 0005 	add.w	r0, sp, #5
 801da82:	f00b f875 	bl	8028b70 <memcpy>
 801da86:	f10b 0101 	add.w	r1, fp, #1
 801da8a:	a801      	add	r0, sp, #4
 801da8c:	f7ff ff38 	bl	801d900 <BnrgmProxyProtocol_Notify>
 801da90:	445e      	add	r6, fp
 801da92:	eba5 050b 	sub.w	r5, r5, fp
 801da96:	2d00      	cmp	r5, #0
 801da98:	d1e2      	bne.n	801da60 <BnrgmProxyProtocol_SendData+0x34>
 801da9a:	b007      	add	sp, #28
 801da9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daa0:	42b7      	cmp	r7, r6
 801daa2:	bf14      	ite	ne
 801daa4:	4643      	movne	r3, r8
 801daa6:	464b      	moveq	r3, r9
 801daa8:	f88d 3004 	strb.w	r3, [sp, #4]
 801daac:	e7e5      	b.n	801da7a <BnrgmProxyProtocol_SendData+0x4e>
 801daae:	4616      	mov	r6, r2
 801dab0:	2000      	movs	r0, #0
 801dab2:	e7ce      	b.n	801da52 <BnrgmProxyProtocol_SendData+0x26>
 801dab4:	2001      	movs	r0, #1
 801dab6:	e7f0      	b.n	801da9a <BnrgmProxyProtocol_SendData+0x6e>
 801dab8:	20000318 	.word	0x20000318

0801dabc <BnrgmStackSendBeaconOverGatt>:
 801dabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dac0:	2500      	movs	r5, #0
 801dac2:	b08e      	sub	sp, #56	; 0x38
 801dac4:	221b      	movs	r2, #27
 801dac6:	4629      	mov	r1, r5
 801dac8:	a807      	add	r0, sp, #28
 801daca:	9506      	str	r5, [sp, #24]
 801dacc:	f00b f878 	bl	8028bc0 <memset>
 801dad0:	231f      	movs	r3, #31
 801dad2:	9305      	str	r3, [sp, #20]
 801dad4:	4b26      	ldr	r3, [pc, #152]	; (801db70 <BnrgmStackSendBeaconOverGatt+0xb4>)
 801dad6:	4e27      	ldr	r6, [pc, #156]	; (801db74 <BnrgmStackSendBeaconOverGatt+0xb8>)
 801dad8:	f8d3 17e4 	ldr.w	r1, [r3, #2020]	; 0x7e4
 801dadc:	f893 265c 	ldrb.w	r2, [r3, #1628]	; 0x65c
 801dae0:	8808      	ldrh	r0, [r1, #0]
 801dae2:	f893 761c 	ldrb.w	r7, [r3, #1564]	; 0x61c
 801dae6:	f896 4a02 	ldrb.w	r4, [r6, #2562]	; 0xa02
 801daea:	42aa      	cmp	r2, r5
 801daec:	f641 0128 	movw	r1, #6184	; 0x1828
 801daf0:	bf14      	ite	ne
 801daf2:	2202      	movne	r2, #2
 801daf4:	462a      	moveq	r2, r5
 801daf6:	4288      	cmp	r0, r1
 801daf8:	d138      	bne.n	801db6c <BnrgmStackSendBeaconOverGatt+0xb0>
 801dafa:	491f      	ldr	r1, [pc, #124]	; (801db78 <BnrgmStackSendBeaconOverGatt+0xbc>)
 801dafc:	f8d3 8658 	ldr.w	r8, [r3, #1624]	; 0x658
 801db00:	4421      	add	r1, r4
 801db02:	f891 10c0 	ldrb.w	r1, [r1, #192]	; 0xc0
 801db06:	2902      	cmp	r1, #2
 801db08:	bf08      	it	eq
 801db0a:	f042 0201 	orreq.w	r2, r2, #1
 801db0e:	9203      	str	r2, [sp, #12]
 801db10:	4621      	mov	r1, r4
 801db12:	d123      	bne.n	801db5c <BnrgmStackSendBeaconOverGatt+0xa0>
 801db14:	2001      	movs	r0, #1
 801db16:	f7fb fc41 	bl	801939c <MoblePalCryptoGetNetworkSecurityKeys>
 801db1a:	2301      	movs	r3, #1
 801db1c:	e9cd 8300 	strd	r8, r3, [sp]
 801db20:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801db24:	9a03      	ldr	r2, [sp, #12]
 801db26:	a905      	add	r1, sp, #20
 801db28:	a806      	add	r0, sp, #24
 801db2a:	f7ff fd69 	bl	801d600 <MobleBeaconSetSecure>
 801db2e:	4605      	mov	r5, r0
 801db30:	42bc      	cmp	r4, r7
 801db32:	bf3a      	itte	cc
 801db34:	3401      	addcc	r4, #1
 801db36:	b2e4      	uxtbcc	r4, r4
 801db38:	2400      	movcs	r4, #0
 801db3a:	2d01      	cmp	r5, #1
 801db3c:	f886 4a02 	strb.w	r4, [r6, #2562]	; 0xa02
 801db40:	d808      	bhi.n	801db54 <BnrgmStackSendBeaconOverGatt+0x98>
 801db42:	9b05      	ldr	r3, [sp, #20]
 801db44:	3b02      	subs	r3, #2
 801db46:	b2db      	uxtb	r3, r3
 801db48:	f10d 021a 	add.w	r2, sp, #26
 801db4c:	2100      	movs	r1, #0
 801db4e:	2001      	movs	r0, #1
 801db50:	f7ff ff6c 	bl	801da2c <BnrgmProxyProtocol_SendData>
 801db54:	4628      	mov	r0, r5
 801db56:	b00e      	add	sp, #56	; 0x38
 801db58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db5c:	4628      	mov	r0, r5
 801db5e:	f7fb fc1d 	bl	801939c <MoblePalCryptoGetNetworkSecurityKeys>
 801db62:	e9cd 8500 	strd	r8, r5, [sp]
 801db66:	f100 0328 	add.w	r3, r0, #40	; 0x28
 801db6a:	e7db      	b.n	801db24 <BnrgmStackSendBeaconOverGatt+0x68>
 801db6c:	2502      	movs	r5, #2
 801db6e:	e7df      	b.n	801db30 <BnrgmStackSendBeaconOverGatt+0x74>
 801db70:	20001410 	.word	0x20001410
 801db74:	20002508 	.word	0x20002508
 801db78:	20000318 	.word	0x20000318

0801db7c <BnrgmProxyConfig_SendFilterStatus>:
 801db7c:	b510      	push	{r4, lr}
 801db7e:	2300      	movs	r3, #0
 801db80:	4a27      	ldr	r2, [pc, #156]	; (801dc20 <BnrgmProxyConfig_SendFilterStatus+0xa4>)
 801db82:	b096      	sub	sp, #88	; 0x58
 801db84:	4619      	mov	r1, r3
 801db86:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 801db8a:	3301      	adds	r3, #1
 801db8c:	7880      	ldrb	r0, [r0, #2]
 801db8e:	2801      	cmp	r0, #1
 801db90:	bf04      	itt	eq
 801db92:	3101      	addeq	r1, #1
 801db94:	b289      	uxtheq	r1, r1
 801db96:	2b05      	cmp	r3, #5
 801db98:	d1f5      	bne.n	801db86 <BnrgmProxyConfig_SendFilterStatus+0xa>
 801db9a:	2303      	movs	r3, #3
 801db9c:	f88d 300c 	strb.w	r3, [sp, #12]
 801dba0:	4b20      	ldr	r3, [pc, #128]	; (801dc24 <BnrgmProxyConfig_SendFilterStatus+0xa8>)
 801dba2:	2202      	movs	r2, #2
 801dba4:	f893 39ec 	ldrb.w	r3, [r3, #2540]	; 0x9ec
 801dba8:	f88d 300d 	strb.w	r3, [sp, #13]
 801dbac:	f10d 000e 	add.w	r0, sp, #14
 801dbb0:	f7fd fb20 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801dbb4:	2228      	movs	r2, #40	; 0x28
 801dbb6:	2100      	movs	r1, #0
 801dbb8:	a80c      	add	r0, sp, #48	; 0x30
 801dbba:	f00b f801 	bl	8028bc0 <memset>
 801dbbe:	2301      	movs	r3, #1
 801dbc0:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 801dbc4:	f7ff fa5a 	bl	801d07c <BLEMesh_GetAddress>
 801dbc8:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 801dbcc:	f7ff fb72 	bl	801d2b4 <BnrgmStackConsumeSeqNo>
 801dbd0:	2380      	movs	r3, #128	; 0x80
 801dbd2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 801dbd6:	4b14      	ldr	r3, [pc, #80]	; (801dc28 <BnrgmProxyConfig_SendFilterStatus+0xac>)
 801dbd8:	9010      	str	r0, [sp, #64]	; 0x40
 801dbda:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 801dbde:	1e9a      	subs	r2, r3, #2
 801dbe0:	4253      	negs	r3, r2
 801dbe2:	4153      	adcs	r3, r2
 801dbe4:	2400      	movs	r4, #0
 801dbe6:	9300      	str	r3, [sp, #0]
 801dbe8:	aa03      	add	r2, sp, #12
 801dbea:	2304      	movs	r3, #4
 801dbec:	a904      	add	r1, sp, #16
 801dbee:	a80c      	add	r0, sp, #48	; 0x30
 801dbf0:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
 801dbf4:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
 801dbf8:	f7fd fb06 	bl	801b208 <MoblePalCryptoEncryptNetwork>
 801dbfc:	2801      	cmp	r0, #1
 801dbfe:	d80b      	bhi.n	801dc18 <BnrgmProxyConfig_SendFilterStatus+0x9c>
 801dc00:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 801dc04:	42a3      	cmp	r3, r4
 801dc06:	bf14      	ite	ne
 801dc08:	2308      	movne	r3, #8
 801dc0a:	2304      	moveq	r3, #4
 801dc0c:	330d      	adds	r3, #13
 801dc0e:	aa04      	add	r2, sp, #16
 801dc10:	4621      	mov	r1, r4
 801dc12:	2002      	movs	r0, #2
 801dc14:	f7ff ff0a 	bl	801da2c <BnrgmProxyProtocol_SendData>
 801dc18:	2000      	movs	r0, #0
 801dc1a:	b016      	add	sp, #88	; 0x58
 801dc1c:	bd10      	pop	{r4, pc}
 801dc1e:	bf00      	nop
 801dc20:	20002ef4 	.word	0x20002ef4
 801dc24:	20002508 	.word	0x20002508
 801dc28:	20000318 	.word	0x20000318

0801dc2c <BnrgmProxyConfig_ProcessData>:
 801dc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc30:	b098      	sub	sp, #96	; 0x60
 801dc32:	4604      	mov	r4, r0
 801dc34:	460d      	mov	r5, r1
 801dc36:	224c      	movs	r2, #76	; 0x4c
 801dc38:	2100      	movs	r1, #0
 801dc3a:	a805      	add	r0, sp, #20
 801dc3c:	f00a ffc0 	bl	8028bc0 <memset>
 801dc40:	b934      	cbnz	r4, 801dc50 <BnrgmProxyConfig_ProcessData+0x24>
 801dc42:	4b62      	ldr	r3, [pc, #392]	; (801ddcc <BnrgmProxyConfig_ProcessData+0x1a0>)
 801dc44:	4a62      	ldr	r2, [pc, #392]	; (801ddd0 <BnrgmProxyConfig_ProcessData+0x1a4>)
 801dc46:	4863      	ldr	r0, [pc, #396]	; (801ddd4 <BnrgmProxyConfig_ProcessData+0x1a8>)
 801dc48:	f240 1147 	movw	r1, #327	; 0x147
 801dc4c:	f00a ff26 	bl	8028a9c <__assert_func>
 801dc50:	f1a5 030e 	sub.w	r3, r5, #14
 801dc54:	2b0f      	cmp	r3, #15
 801dc56:	d903      	bls.n	801dc60 <BnrgmProxyConfig_ProcessData+0x34>
 801dc58:	2003      	movs	r0, #3
 801dc5a:	b018      	add	sp, #96	; 0x60
 801dc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc60:	2380      	movs	r3, #128	; 0x80
 801dc62:	a908      	add	r1, sp, #32
 801dc64:	4620      	mov	r0, r4
 801dc66:	9406      	str	r4, [sp, #24]
 801dc68:	f88d 501c 	strb.w	r5, [sp, #28]
 801dc6c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 801dc70:	f7fb ffce 	bl	8019c10 <MoblePalCryptoParseNetHdr>
 801dc74:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 801dc78:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
 801dc7c:	f7fc fb1e 	bl	801a2bc <BnrgmPalCryptoMatchNid>
 801dc80:	b108      	cbz	r0, 801dc86 <BnrgmProxyConfig_ProcessData+0x5a>
 801dc82:	2002      	movs	r0, #2
 801dc84:	e7e9      	b.n	801dc5a <BnrgmProxyConfig_ProcessData+0x2e>
 801dc86:	a901      	add	r1, sp, #4
 801dc88:	a805      	add	r0, sp, #20
 801dc8a:	f7fd fd47 	bl	801b71c <BnrgmPalCryptoDecryptNetwork>
 801dc8e:	2801      	cmp	r0, #1
 801dc90:	d8f7      	bhi.n	801dc82 <BnrgmProxyConfig_ProcessData+0x56>
 801dc92:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	d0f3      	beq.n	801dc82 <BnrgmProxyConfig_ProcessData+0x56>
 801dc9a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801dc9e:	2b00      	cmp	r3, #0
 801dca0:	d1ef      	bne.n	801dc82 <BnrgmProxyConfig_ProcessData+0x56>
 801dca2:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dca6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801dcaa:	2a00      	cmp	r2, #0
 801dcac:	dde9      	ble.n	801dc82 <BnrgmProxyConfig_ProcessData+0x56>
 801dcae:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801dcb2:	2a00      	cmp	r2, #0
 801dcb4:	d1e5      	bne.n	801dc82 <BnrgmProxyConfig_ProcessData+0x56>
 801dcb6:	4e48      	ldr	r6, [pc, #288]	; (801ddd8 <BnrgmProxyConfig_ProcessData+0x1ac>)
 801dcb8:	f8a6 36f6 	strh.w	r3, [r6, #1782]	; 0x6f6
 801dcbc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801dcc0:	3b12      	subs	r3, #18
 801dcc2:	b2dc      	uxtb	r4, r3
 801dcc4:	2201      	movs	r2, #1
 801dcc6:	2c0f      	cmp	r4, #15
 801dcc8:	f886 26f4 	strb.w	r2, [r6, #1780]	; 0x6f4
 801dccc:	d8c4      	bhi.n	801dc58 <BnrgmProxyConfig_ProcessData+0x2c>
 801dcce:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801dcd2:	2802      	cmp	r0, #2
 801dcd4:	d8d5      	bhi.n	801dc82 <BnrgmProxyConfig_ProcessData+0x56>
 801dcd6:	2c00      	cmp	r4, #0
 801dcd8:	d0d3      	beq.n	801dc82 <BnrgmProxyConfig_ProcessData+0x56>
 801dcda:	4290      	cmp	r0, r2
 801dcdc:	d00a      	beq.n	801dcf4 <BnrgmProxyConfig_ProcessData+0xc8>
 801dcde:	2802      	cmp	r0, #2
 801dce0:	d043      	beq.n	801dd6a <BnrgmProxyConfig_ProcessData+0x13e>
 801dce2:	f7ff fe47 	bl	801d974 <BnrgmProxyConfig_ResetFilter>
 801dce6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801dcea:	f886 39ec 	strb.w	r3, [r6, #2540]	; 0x9ec
 801dcee:	f7ff ff45 	bl	801db7c <BnrgmProxyConfig_SendFilterStatus>
 801dcf2:	e7b2      	b.n	801dc5a <BnrgmProxyConfig_ProcessData+0x2e>
 801dcf4:	2c01      	cmp	r4, #1
 801dcf6:	d0c4      	beq.n	801dc82 <BnrgmProxyConfig_ProcessData+0x56>
 801dcf8:	f014 0501 	ands.w	r5, r4, #1
 801dcfc:	d1c1      	bne.n	801dc82 <BnrgmProxyConfig_ProcessData+0x56>
 801dcfe:	0864      	lsrs	r4, r4, #1
 801dd00:	f10d 0705 	add.w	r7, sp, #5
 801dd04:	466a      	mov	r2, sp
 801dd06:	2102      	movs	r1, #2
 801dd08:	4638      	mov	r0, r7
 801dd0a:	f7fd fa49 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 801dd0e:	f8bd c000 	ldrh.w	ip, [sp]
 801dd12:	f1bc 0f00 	cmp.w	ip, #0
 801dd16:	d0ea      	beq.n	801dcee <BnrgmProxyConfig_ProcessData+0xc2>
 801dd18:	2200      	movs	r2, #0
 801dd1a:	4830      	ldr	r0, [pc, #192]	; (801dddc <BnrgmProxyConfig_ProcessData+0x1b0>)
 801dd1c:	4611      	mov	r1, r2
 801dd1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dd22:	f890 8002 	ldrb.w	r8, [r0, #2]
 801dd26:	f1b8 0f01 	cmp.w	r8, #1
 801dd2a:	fa4f fe81 	sxtb.w	lr, r1
 801dd2e:	d11a      	bne.n	801dd66 <BnrgmProxyConfig_ProcessData+0x13a>
 801dd30:	f8b0 e004 	ldrh.w	lr, [r0, #4]
 801dd34:	45e6      	cmp	lr, ip
 801dd36:	bf08      	it	eq
 801dd38:	2201      	moveq	r2, #1
 801dd3a:	3101      	adds	r1, #1
 801dd3c:	2905      	cmp	r1, #5
 801dd3e:	f100 0004 	add.w	r0, r0, #4
 801dd42:	d1ee      	bne.n	801dd22 <BnrgmProxyConfig_ProcessData+0xf6>
 801dd44:	1c59      	adds	r1, r3, #1
 801dd46:	d0d2      	beq.n	801dcee <BnrgmProxyConfig_ProcessData+0xc2>
 801dd48:	b932      	cbnz	r2, 801dd58 <BnrgmProxyConfig_ProcessData+0x12c>
 801dd4a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801dd4e:	2201      	movs	r2, #1
 801dd50:	f883 29ee 	strb.w	r2, [r3, #2542]	; 0x9ee
 801dd54:	f8a3 c9f0 	strh.w	ip, [r3, #2544]	; 0x9f0
 801dd58:	3501      	adds	r5, #1
 801dd5a:	b2eb      	uxtb	r3, r5
 801dd5c:	42a3      	cmp	r3, r4
 801dd5e:	f107 0702 	add.w	r7, r7, #2
 801dd62:	d3cf      	bcc.n	801dd04 <BnrgmProxyConfig_ProcessData+0xd8>
 801dd64:	e7c3      	b.n	801dcee <BnrgmProxyConfig_ProcessData+0xc2>
 801dd66:	4673      	mov	r3, lr
 801dd68:	e7e7      	b.n	801dd3a <BnrgmProxyConfig_ProcessData+0x10e>
 801dd6a:	2c01      	cmp	r4, #1
 801dd6c:	f43f af75 	beq.w	801dc5a <BnrgmProxyConfig_ProcessData+0x2e>
 801dd70:	f014 0501 	ands.w	r5, r4, #1
 801dd74:	f47f af71 	bne.w	801dc5a <BnrgmProxyConfig_ProcessData+0x2e>
 801dd78:	0864      	lsrs	r4, r4, #1
 801dd7a:	f10d 0605 	add.w	r6, sp, #5
 801dd7e:	462f      	mov	r7, r5
 801dd80:	466a      	mov	r2, sp
 801dd82:	2102      	movs	r1, #2
 801dd84:	4630      	mov	r0, r6
 801dd86:	f7fd fa0b 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 801dd8a:	2300      	movs	r3, #0
 801dd8c:	f8bd 0000 	ldrh.w	r0, [sp]
 801dd90:	4a12      	ldr	r2, [pc, #72]	; (801dddc <BnrgmProxyConfig_ProcessData+0x1b0>)
 801dd92:	4619      	mov	r1, r3
 801dd94:	f892 c002 	ldrb.w	ip, [r2, #2]
 801dd98:	f1bc 0f01 	cmp.w	ip, #1
 801dd9c:	d112      	bne.n	801ddc4 <BnrgmProxyConfig_ProcessData+0x198>
 801dd9e:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 801dda2:	4584      	cmp	ip, r0
 801dda4:	d100      	bne.n	801dda8 <BnrgmProxyConfig_ProcessData+0x17c>
 801dda6:	7097      	strb	r7, [r2, #2]
 801dda8:	3101      	adds	r1, #1
 801ddaa:	2905      	cmp	r1, #5
 801ddac:	f102 0204 	add.w	r2, r2, #4
 801ddb0:	d1f0      	bne.n	801dd94 <BnrgmProxyConfig_ProcessData+0x168>
 801ddb2:	2b05      	cmp	r3, #5
 801ddb4:	d09b      	beq.n	801dcee <BnrgmProxyConfig_ProcessData+0xc2>
 801ddb6:	3501      	adds	r5, #1
 801ddb8:	b2eb      	uxtb	r3, r5
 801ddba:	42a3      	cmp	r3, r4
 801ddbc:	f106 0602 	add.w	r6, r6, #2
 801ddc0:	d3de      	bcc.n	801dd80 <BnrgmProxyConfig_ProcessData+0x154>
 801ddc2:	e794      	b.n	801dcee <BnrgmProxyConfig_ProcessData+0xc2>
 801ddc4:	3301      	adds	r3, #1
 801ddc6:	b2db      	uxtb	r3, r3
 801ddc8:	e7ee      	b.n	801dda8 <BnrgmProxyConfig_ProcessData+0x17c>
 801ddca:	bf00      	nop
 801ddcc:	080334e0 	.word	0x080334e0
 801ddd0:	080317a0 	.word	0x080317a0
 801ddd4:	080339c5 	.word	0x080339c5
 801ddd8:	20002508 	.word	0x20002508
 801dddc:	20002ef4 	.word	0x20002ef4

0801dde0 <BnrgmFrndMgmtSubscriptionListAdd>:
 801dde0:	4a07      	ldr	r2, [pc, #28]	; (801de00 <BnrgmFrndMgmtSubscriptionListAdd+0x20>)
 801dde2:	4603      	mov	r3, r0
 801dde4:	f892 00bf 	ldrb.w	r0, [r2, #191]	; 0xbf
 801dde8:	2802      	cmp	r0, #2
 801ddea:	d007      	beq.n	801ddfc <BnrgmFrndMgmtSubscriptionListAdd+0x1c>
 801ddec:	4a05      	ldr	r2, [pc, #20]	; (801de04 <BnrgmFrndMgmtSubscriptionListAdd+0x24>)
 801ddee:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 801ddf2:	2101      	movs	r1, #1
 801ddf4:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
 801ddf8:	8313      	strh	r3, [r2, #24]
 801ddfa:	2000      	movs	r0, #0
 801ddfc:	4770      	bx	lr
 801ddfe:	bf00      	nop
 801de00:	20000318 	.word	0x20000318
 801de04:	20002508 	.word	0x20002508

0801de08 <MobleConfigModel_SubscriptionOverwrite>:
 801de08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de0a:	4605      	mov	r5, r0
 801de0c:	b930      	cbnz	r0, 801de1c <MobleConfigModel_SubscriptionOverwrite+0x14>
 801de0e:	4b2d      	ldr	r3, [pc, #180]	; (801dec4 <MobleConfigModel_SubscriptionOverwrite+0xbc>)
 801de10:	4a2d      	ldr	r2, [pc, #180]	; (801dec8 <MobleConfigModel_SubscriptionOverwrite+0xc0>)
 801de12:	482e      	ldr	r0, [pc, #184]	; (801decc <MobleConfigModel_SubscriptionOverwrite+0xc4>)
 801de14:	f240 61be 	movw	r1, #1726	; 0x6be
 801de18:	f00a fe40 	bl	8028a9c <__assert_func>
 801de1c:	6804      	ldr	r4, [r0, #0]
 801de1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801de20:	f894 c01c 	ldrb.w	ip, [r4, #28]
 801de24:	8806      	ldrh	r6, [r0, #0]
 801de26:	4296      	cmp	r6, r2
 801de28:	d101      	bne.n	801de2e <MobleConfigModel_SubscriptionOverwrite+0x26>
 801de2a:	2902      	cmp	r1, #2
 801de2c:	d029      	beq.n	801de82 <MobleConfigModel_SubscriptionOverwrite+0x7a>
 801de2e:	2600      	movs	r6, #0
 801de30:	3424      	adds	r4, #36	; 0x24
 801de32:	4630      	mov	r0, r6
 801de34:	b2f7      	uxtb	r7, r6
 801de36:	45bc      	cmp	ip, r7
 801de38:	d931      	bls.n	801de9e <MobleConfigModel_SubscriptionOverwrite+0x96>
 801de3a:	f854 7b04 	ldr.w	r7, [r4], #4
 801de3e:	f8b7 e000 	ldrh.w	lr, [r7]
 801de42:	4596      	cmp	lr, r2
 801de44:	f106 0601 	add.w	r6, r6, #1
 801de48:	f04f 0001 	mov.w	r0, #1
 801de4c:	d1f2      	bne.n	801de34 <MobleConfigModel_SubscriptionOverwrite+0x2c>
 801de4e:	2000      	movs	r0, #0
 801de50:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801de54:	2438      	movs	r4, #56	; 0x38
 801de56:	fb04 f600 	mul.w	r6, r4, r0
 801de5a:	5996      	ldr	r6, [r2, r6]
 801de5c:	428e      	cmp	r6, r1
 801de5e:	d12c      	bne.n	801deba <MobleConfigModel_SubscriptionOverwrite+0xb2>
 801de60:	f403 4140 	and.w	r1, r3, #49152	; 0xc000
 801de64:	2200      	movs	r2, #0
 801de66:	460c      	mov	r4, r1
 801de68:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 801de6c:	d002      	beq.n	801de74 <MobleConfigModel_SubscriptionOverwrite+0x6c>
 801de6e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 801de72:	d11d      	bne.n	801deb0 <MobleConfigModel_SubscriptionOverwrite+0xa8>
 801de74:	211c      	movs	r1, #28
 801de76:	fb01 2200 	mla	r2, r1, r0, r2
 801de7a:	3240      	adds	r2, #64	; 0x40
 801de7c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801de80:	e006      	b.n	801de90 <MobleConfigModel_SubscriptionOverwrite+0x88>
 801de82:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 801de86:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801de8a:	d109      	bne.n	801dea0 <MobleConfigModel_SubscriptionOverwrite+0x98>
 801de8c:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 801de90:	4618      	mov	r0, r3
 801de92:	f7ff ffa5 	bl	801dde0 <BnrgmFrndMgmtSubscriptionListAdd>
 801de96:	6828      	ldr	r0, [r5, #0]
 801de98:	f7fe ffd8 	bl	801ce4c <MobleConfigNetworkSave>
 801de9c:	2000      	movs	r0, #0
 801de9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dea0:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 801dea4:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 801dea8:	d1f5      	bne.n	801de96 <MobleConfigModel_SubscriptionOverwrite+0x8e>
 801deaa:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
 801deae:	e7ef      	b.n	801de90 <MobleConfigModel_SubscriptionOverwrite+0x88>
 801deb0:	3201      	adds	r2, #1
 801deb2:	2a0a      	cmp	r2, #10
 801deb4:	d1d8      	bne.n	801de68 <MobleConfigModel_SubscriptionOverwrite+0x60>
 801deb6:	2001      	movs	r0, #1
 801deb8:	e7f1      	b.n	801de9e <MobleConfigModel_SubscriptionOverwrite+0x96>
 801deba:	3001      	adds	r0, #1
 801debc:	280b      	cmp	r0, #11
 801debe:	d1ca      	bne.n	801de56 <MobleConfigModel_SubscriptionOverwrite+0x4e>
 801dec0:	2002      	movs	r0, #2
 801dec2:	e7ec      	b.n	801de9e <MobleConfigModel_SubscriptionOverwrite+0x96>
 801dec4:	08033a09 	.word	0x08033a09
 801dec8:	080317bd 	.word	0x080317bd
 801decc:	0803349b 	.word	0x0803349b

0801ded0 <MobleConfigModel_SubscriptionAdd>:
 801ded0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ded2:	4605      	mov	r5, r0
 801ded4:	b930      	cbnz	r0, 801dee4 <MobleConfigModel_SubscriptionAdd+0x14>
 801ded6:	4b41      	ldr	r3, [pc, #260]	; (801dfdc <MobleConfigModel_SubscriptionAdd+0x10c>)
 801ded8:	4a41      	ldr	r2, [pc, #260]	; (801dfe0 <MobleConfigModel_SubscriptionAdd+0x110>)
 801deda:	4842      	ldr	r0, [pc, #264]	; (801dfe4 <MobleConfigModel_SubscriptionAdd+0x114>)
 801dedc:	f240 519f 	movw	r1, #1439	; 0x59f
 801dee0:	f00a fddc 	bl	8028a9c <__assert_func>
 801dee4:	6800      	ldr	r0, [r0, #0]
 801dee6:	6a47      	ldr	r7, [r0, #36]	; 0x24
 801dee8:	f890 c01c 	ldrb.w	ip, [r0, #28]
 801deec:	883c      	ldrh	r4, [r7, #0]
 801deee:	4294      	cmp	r4, r2
 801def0:	d02e      	beq.n	801df50 <MobleConfigModel_SubscriptionAdd+0x80>
 801def2:	2600      	movs	r6, #0
 801def4:	3024      	adds	r0, #36	; 0x24
 801def6:	4634      	mov	r4, r6
 801def8:	b2f7      	uxtb	r7, r6
 801defa:	45bc      	cmp	ip, r7
 801defc:	d94c      	bls.n	801df98 <MobleConfigModel_SubscriptionAdd+0xc8>
 801defe:	f850 7b04 	ldr.w	r7, [r0], #4
 801df02:	f8b7 e000 	ldrh.w	lr, [r7]
 801df06:	4596      	cmp	lr, r2
 801df08:	f106 0601 	add.w	r6, r6, #1
 801df0c:	f04f 0401 	mov.w	r4, #1
 801df10:	d1f2      	bne.n	801def8 <MobleConfigModel_SubscriptionAdd+0x28>
 801df12:	2400      	movs	r4, #0
 801df14:	2238      	movs	r2, #56	; 0x38
 801df16:	f107 0c78 	add.w	ip, r7, #120	; 0x78
 801df1a:	fb02 f004 	mul.w	r0, r2, r4
 801df1e:	f85c 6000 	ldr.w	r6, [ip, r0]
 801df22:	428e      	cmp	r6, r1
 801df24:	d154      	bne.n	801dfd0 <MobleConfigModel_SubscriptionAdd+0x100>
 801df26:	f100 0180 	add.w	r1, r0, #128	; 0x80
 801df2a:	f403 4640 	and.w	r6, r3, #49152	; 0xc000
 801df2e:	4439      	add	r1, r7
 801df30:	2200      	movs	r2, #0
 801df32:	46b4      	mov	ip, r6
 801df34:	f831 0b02 	ldrh.w	r0, [r1], #2
 801df38:	2800      	cmp	r0, #0
 801df3a:	d142      	bne.n	801dfc2 <MobleConfigModel_SubscriptionAdd+0xf2>
 801df3c:	f5b6 4f40 	cmp.w	r6, #49152	; 0xc000
 801df40:	d13c      	bne.n	801dfbc <MobleConfigModel_SubscriptionAdd+0xec>
 801df42:	211c      	movs	r1, #28
 801df44:	fb01 2204 	mla	r2, r1, r4, r2
 801df48:	3240      	adds	r2, #64	; 0x40
 801df4a:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801df4e:	e00b      	b.n	801df68 <MobleConfigModel_SubscriptionAdd+0x98>
 801df50:	2902      	cmp	r1, #2
 801df52:	d1ce      	bne.n	801def2 <MobleConfigModel_SubscriptionAdd+0x22>
 801df54:	f8b7 6066 	ldrh.w	r6, [r7, #102]	; 0x66
 801df58:	b976      	cbnz	r6, 801df78 <MobleConfigModel_SubscriptionAdd+0xa8>
 801df5a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 801df5e:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 801df62:	d109      	bne.n	801df78 <MobleConfigModel_SubscriptionAdd+0xa8>
 801df64:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801df68:	4618      	mov	r0, r3
 801df6a:	f7ff ff39 	bl	801dde0 <BnrgmFrndMgmtSubscriptionListAdd>
 801df6e:	6828      	ldr	r0, [r5, #0]
 801df70:	f7fe ff6c 	bl	801ce4c <MobleConfigNetworkSave>
 801df74:	2400      	movs	r4, #0
 801df76:	e00f      	b.n	801df98 <MobleConfigModel_SubscriptionAdd+0xc8>
 801df78:	f8b7 4068 	ldrh.w	r4, [r7, #104]	; 0x68
 801df7c:	b974      	cbnz	r4, 801df9c <MobleConfigModel_SubscriptionAdd+0xcc>
 801df7e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 801df82:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801df86:	d109      	bne.n	801df9c <MobleConfigModel_SubscriptionAdd+0xcc>
 801df88:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801df8c:	4618      	mov	r0, r3
 801df8e:	f7ff ff27 	bl	801dde0 <BnrgmFrndMgmtSubscriptionListAdd>
 801df92:	6828      	ldr	r0, [r5, #0]
 801df94:	f7fe ff5a 	bl	801ce4c <MobleConfigNetworkSave>
 801df98:	4620      	mov	r0, r4
 801df9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df9c:	429e      	cmp	r6, r3
 801df9e:	d104      	bne.n	801dfaa <MobleConfigModel_SubscriptionAdd+0xda>
 801dfa0:	f406 4640 	and.w	r6, r6, #49152	; 0xc000
 801dfa4:	f5b6 4f40 	cmp.w	r6, #49152	; 0xc000
 801dfa8:	d0e4      	beq.n	801df74 <MobleConfigModel_SubscriptionAdd+0xa4>
 801dfaa:	429c      	cmp	r4, r3
 801dfac:	d10e      	bne.n	801dfcc <MobleConfigModel_SubscriptionAdd+0xfc>
 801dfae:	f404 4440 	and.w	r4, r4, #49152	; 0xc000
 801dfb2:	f5b4 4400 	subs.w	r4, r4, #32768	; 0x8000
 801dfb6:	bf18      	it	ne
 801dfb8:	2401      	movne	r4, #1
 801dfba:	e7ed      	b.n	801df98 <MobleConfigModel_SubscriptionAdd+0xc8>
 801dfbc:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
 801dfc0:	d0bf      	beq.n	801df42 <MobleConfigModel_SubscriptionAdd+0x72>
 801dfc2:	4298      	cmp	r0, r3
 801dfc4:	d0d6      	beq.n	801df74 <MobleConfigModel_SubscriptionAdd+0xa4>
 801dfc6:	3201      	adds	r2, #1
 801dfc8:	2a0a      	cmp	r2, #10
 801dfca:	d1b3      	bne.n	801df34 <MobleConfigModel_SubscriptionAdd+0x64>
 801dfcc:	2401      	movs	r4, #1
 801dfce:	e7e3      	b.n	801df98 <MobleConfigModel_SubscriptionAdd+0xc8>
 801dfd0:	3401      	adds	r4, #1
 801dfd2:	2c0b      	cmp	r4, #11
 801dfd4:	d1a1      	bne.n	801df1a <MobleConfigModel_SubscriptionAdd+0x4a>
 801dfd6:	2402      	movs	r4, #2
 801dfd8:	e7de      	b.n	801df98 <MobleConfigModel_SubscriptionAdd+0xc8>
 801dfda:	bf00      	nop
 801dfdc:	08033a09 	.word	0x08033a09
 801dfe0:	080317e4 	.word	0x080317e4
 801dfe4:	0803349b 	.word	0x0803349b

0801dfe8 <BnrgmFrndMgmtSubscriptionListRemove>:
 801dfe8:	4b08      	ldr	r3, [pc, #32]	; (801e00c <BnrgmFrndMgmtSubscriptionListRemove+0x24>)
 801dfea:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 801dfee:	2b01      	cmp	r3, #1
 801dff0:	bf04      	itt	eq
 801dff2:	4a07      	ldreq	r2, [pc, #28]	; (801e010 <BnrgmFrndMgmtSubscriptionListRemove+0x28>)
 801dff4:	f8d2 2a04 	ldreq.w	r2, [r2, #2564]	; 0xa04
 801dff8:	f04f 0302 	mov.w	r3, #2
 801dffc:	bf03      	ittte	eq
 801dffe:	8310      	strheq	r0, [r2, #24]
 801e000:	f882 306a 	strbeq.w	r3, [r2, #106]	; 0x6a
 801e004:	2000      	moveq	r0, #0
 801e006:	4618      	movne	r0, r3
 801e008:	4770      	bx	lr
 801e00a:	bf00      	nop
 801e00c:	20000318 	.word	0x20000318
 801e010:	20002508 	.word	0x20002508

0801e014 <MobleConfigModel_SubscriptionDelete>:
 801e014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e016:	4605      	mov	r5, r0
 801e018:	b930      	cbnz	r0, 801e028 <MobleConfigModel_SubscriptionDelete+0x14>
 801e01a:	4b39      	ldr	r3, [pc, #228]	; (801e100 <MobleConfigModel_SubscriptionDelete+0xec>)
 801e01c:	4a39      	ldr	r2, [pc, #228]	; (801e104 <MobleConfigModel_SubscriptionDelete+0xf0>)
 801e01e:	483a      	ldr	r0, [pc, #232]	; (801e108 <MobleConfigModel_SubscriptionDelete+0xf4>)
 801e020:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 801e024:	f00a fd3a 	bl	8028a9c <__assert_func>
 801e028:	6800      	ldr	r0, [r0, #0]
 801e02a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e02c:	f890 c01c 	ldrb.w	ip, [r0, #28]
 801e030:	8834      	ldrh	r4, [r6, #0]
 801e032:	4294      	cmp	r4, r2
 801e034:	d139      	bne.n	801e0aa <MobleConfigModel_SubscriptionDelete+0x96>
 801e036:	2902      	cmp	r1, #2
 801e038:	d137      	bne.n	801e0aa <MobleConfigModel_SubscriptionDelete+0x96>
 801e03a:	f8b6 4066 	ldrh.w	r4, [r6, #102]	; 0x66
 801e03e:	429c      	cmp	r4, r3
 801e040:	d110      	bne.n	801e064 <MobleConfigModel_SubscriptionDelete+0x50>
 801e042:	f404 4240 	and.w	r2, r4, #49152	; 0xc000
 801e046:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 801e04a:	d10b      	bne.n	801e064 <MobleConfigModel_SubscriptionDelete+0x50>
 801e04c:	2700      	movs	r7, #0
 801e04e:	4620      	mov	r0, r4
 801e050:	f8a6 7066 	strh.w	r7, [r6, #102]	; 0x66
 801e054:	f7ff ffc8 	bl	801dfe8 <BnrgmFrndMgmtSubscriptionListRemove>
 801e058:	6828      	ldr	r0, [r5, #0]
 801e05a:	f7fe fef7 	bl	801ce4c <MobleConfigNetworkSave>
 801e05e:	463c      	mov	r4, r7
 801e060:	4620      	mov	r0, r4
 801e062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e064:	f8b6 0068 	ldrh.w	r0, [r6, #104]	; 0x68
 801e068:	4298      	cmp	r0, r3
 801e06a:	d10e      	bne.n	801e08a <MobleConfigModel_SubscriptionDelete+0x76>
 801e06c:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 801e070:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801e074:	d109      	bne.n	801e08a <MobleConfigModel_SubscriptionDelete+0x76>
 801e076:	2400      	movs	r4, #0
 801e078:	f8a6 4068 	strh.w	r4, [r6, #104]	; 0x68
 801e07c:	4618      	mov	r0, r3
 801e07e:	f7ff ffb3 	bl	801dfe8 <BnrgmFrndMgmtSubscriptionListRemove>
 801e082:	6828      	ldr	r0, [r5, #0]
 801e084:	f7fe fee2 	bl	801ce4c <MobleConfigNetworkSave>
 801e088:	e7ea      	b.n	801e060 <MobleConfigModel_SubscriptionDelete+0x4c>
 801e08a:	2c00      	cmp	r4, #0
 801e08c:	d0e8      	beq.n	801e060 <MobleConfigModel_SubscriptionDelete+0x4c>
 801e08e:	1e04      	subs	r4, r0, #0
 801e090:	bf18      	it	ne
 801e092:	2401      	movne	r4, #1
 801e094:	e7e4      	b.n	801e060 <MobleConfigModel_SubscriptionDelete+0x4c>
 801e096:	3201      	adds	r2, #1
 801e098:	2a0a      	cmp	r2, #10
 801e09a:	d124      	bne.n	801e0e6 <MobleConfigModel_SubscriptionDelete+0xd2>
 801e09c:	3c00      	subs	r4, #0
 801e09e:	e7f7      	b.n	801e090 <MobleConfigModel_SubscriptionDelete+0x7c>
 801e0a0:	3601      	adds	r6, #1
 801e0a2:	2e0b      	cmp	r6, #11
 801e0a4:	d115      	bne.n	801e0d2 <MobleConfigModel_SubscriptionDelete+0xbe>
 801e0a6:	2402      	movs	r4, #2
 801e0a8:	e7da      	b.n	801e060 <MobleConfigModel_SubscriptionDelete+0x4c>
 801e0aa:	2600      	movs	r6, #0
 801e0ac:	3024      	adds	r0, #36	; 0x24
 801e0ae:	4634      	mov	r4, r6
 801e0b0:	b2f7      	uxtb	r7, r6
 801e0b2:	45bc      	cmp	ip, r7
 801e0b4:	d9d4      	bls.n	801e060 <MobleConfigModel_SubscriptionDelete+0x4c>
 801e0b6:	f850 7b04 	ldr.w	r7, [r0], #4
 801e0ba:	f8b7 e000 	ldrh.w	lr, [r7]
 801e0be:	4596      	cmp	lr, r2
 801e0c0:	f106 0601 	add.w	r6, r6, #1
 801e0c4:	f04f 0401 	mov.w	r4, #1
 801e0c8:	d1f2      	bne.n	801e0b0 <MobleConfigModel_SubscriptionDelete+0x9c>
 801e0ca:	2600      	movs	r6, #0
 801e0cc:	2238      	movs	r2, #56	; 0x38
 801e0ce:	f107 0c78 	add.w	ip, r7, #120	; 0x78
 801e0d2:	fb02 f006 	mul.w	r0, r2, r6
 801e0d6:	f85c 4000 	ldr.w	r4, [ip, r0]
 801e0da:	428c      	cmp	r4, r1
 801e0dc:	d1e0      	bne.n	801e0a0 <MobleConfigModel_SubscriptionDelete+0x8c>
 801e0de:	f100 0180 	add.w	r1, r0, #128	; 0x80
 801e0e2:	4439      	add	r1, r7
 801e0e4:	2200      	movs	r2, #0
 801e0e6:	f831 4b02 	ldrh.w	r4, [r1], #2
 801e0ea:	429c      	cmp	r4, r3
 801e0ec:	d1d3      	bne.n	801e096 <MobleConfigModel_SubscriptionDelete+0x82>
 801e0ee:	211c      	movs	r1, #28
 801e0f0:	fb01 2206 	mla	r2, r1, r6, r2
 801e0f4:	3240      	adds	r2, #64	; 0x40
 801e0f6:	2400      	movs	r4, #0
 801e0f8:	f827 4012 	strh.w	r4, [r7, r2, lsl #1]
 801e0fc:	e7be      	b.n	801e07c <MobleConfigModel_SubscriptionDelete+0x68>
 801e0fe:	bf00      	nop
 801e100:	08033a09 	.word	0x08033a09
 801e104:	08031805 	.word	0x08031805
 801e108:	0803349b 	.word	0x0803349b

0801e10c <BnrgmFrndFnBreakFriendship>:
 801e10c:	b570      	push	{r4, r5, r6, lr}
 801e10e:	460c      	mov	r4, r1
 801e110:	2500      	movs	r5, #0
 801e112:	f44f 764d 	mov.w	r6, #820	; 0x334
 801e116:	78a3      	ldrb	r3, [r4, #2]
 801e118:	b2ea      	uxtb	r2, r5
 801e11a:	4293      	cmp	r3, r2
 801e11c:	d801      	bhi.n	801e122 <BnrgmFrndFnBreakFriendship+0x16>
 801e11e:	2000      	movs	r0, #0
 801e120:	bd70      	pop	{r4, r5, r6, pc}
 801e122:	fb06 4302 	mla	r3, r6, r2, r4
 801e126:	6998      	ldr	r0, [r3, #24]
 801e128:	b108      	cbz	r0, 801e12e <BnrgmFrndFnBreakFriendship+0x22>
 801e12a:	f7f9 fda5 	bl	8017c78 <MoblePalTimerDestroy>
 801e12e:	fb06 4002 	mla	r0, r6, r2, r4
 801e132:	2100      	movs	r1, #0
 801e134:	f44f 724d 	mov.w	r2, #820	; 0x334
 801e138:	3004      	adds	r0, #4
 801e13a:	f00a fd41 	bl	8028bc0 <memset>
 801e13e:	3501      	adds	r5, #1
 801e140:	e7e9      	b.n	801e116 <BnrgmFrndFnBreakFriendship+0xa>

0801e142 <BnrgmFrndFnGetLpnOffset>:
 801e142:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e144:	4603      	mov	r3, r0
 801e146:	7886      	ldrb	r6, [r0, #2]
 801e148:	2200      	movs	r2, #0
 801e14a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e14e:	b2d4      	uxtb	r4, r2
 801e150:	42a6      	cmp	r6, r4
 801e152:	d800      	bhi.n	801e156 <BnrgmFrndFnGetLpnOffset+0x14>
 801e154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e156:	891d      	ldrh	r5, [r3, #8]
 801e158:	b14d      	cbz	r5, 801e16e <BnrgmFrndFnGetLpnOffset+0x2c>
 801e15a:	f893 c333 	ldrb.w	ip, [r3, #819]	; 0x333
 801e15e:	2400      	movs	r4, #0
 801e160:	b2e7      	uxtb	r7, r4
 801e162:	45bc      	cmp	ip, r7
 801e164:	d903      	bls.n	801e16e <BnrgmFrndFnGetLpnOffset+0x2c>
 801e166:	192f      	adds	r7, r5, r4
 801e168:	42b9      	cmp	r1, r7
 801e16a:	d104      	bne.n	801e176 <BnrgmFrndFnGetLpnOffset+0x34>
 801e16c:	b250      	sxtb	r0, r2
 801e16e:	3201      	adds	r2, #1
 801e170:	f503 734d 	add.w	r3, r3, #820	; 0x334
 801e174:	e7eb      	b.n	801e14e <BnrgmFrndFnGetLpnOffset+0xc>
 801e176:	3401      	adds	r4, #1
 801e178:	e7f2      	b.n	801e160 <BnrgmFrndFnGetLpnOffset+0x1e>

0801e17a <BnrgmFrndFnGetLpnPollTimeout>:
 801e17a:	b510      	push	{r4, lr}
 801e17c:	4604      	mov	r4, r0
 801e17e:	f7ff ffe0 	bl	801e142 <BnrgmFrndFnGetLpnOffset>
 801e182:	1c43      	adds	r3, r0, #1
 801e184:	d00c      	beq.n	801e1a0 <BnrgmFrndFnGetLpnPollTimeout+0x26>
 801e186:	f44f 734d 	mov.w	r3, #820	; 0x334
 801e18a:	fb03 4000 	mla	r0, r3, r0, r4
 801e18e:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 801e192:	2b02      	cmp	r3, #2
 801e194:	d904      	bls.n	801e1a0 <BnrgmFrndFnGetLpnPollTimeout+0x26>
 801e196:	6900      	ldr	r0, [r0, #16]
 801e198:	2364      	movs	r3, #100	; 0x64
 801e19a:	fbb0 f0f3 	udiv	r0, r0, r3
 801e19e:	bd10      	pop	{r4, pc}
 801e1a0:	2000      	movs	r0, #0
 801e1a2:	e7fc      	b.n	801e19e <BnrgmFrndFnGetLpnPollTimeout+0x24>

0801e1a4 <BnrgmFrndMgmtGetLpnPollTimeout>:
 801e1a4:	4b02      	ldr	r3, [pc, #8]	; (801e1b0 <BnrgmFrndMgmtGetLpnPollTimeout+0xc>)
 801e1a6:	4601      	mov	r1, r0
 801e1a8:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
 801e1ac:	f7ff bfe5 	b.w	801e17a <BnrgmFrndFnGetLpnPollTimeout>
 801e1b0:	20002508 	.word	0x20002508

0801e1b4 <BnrgmFrndFnInsertFriendUpdate>:
 801e1b4:	b570      	push	{r4, r5, r6, lr}
 801e1b6:	4a1a      	ldr	r2, [pc, #104]	; (801e220 <BnrgmFrndFnInsertFriendUpdate+0x6c>)
 801e1b8:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 801e1bc:	4c19      	ldr	r4, [pc, #100]	; (801e224 <BnrgmFrndFnInsertFriendUpdate+0x70>)
 801e1be:	440a      	add	r2, r1
 801e1c0:	4603      	mov	r3, r0
 801e1c2:	f892 20c0 	ldrb.w	r2, [r2, #192]	; 0xc0
 801e1c6:	f890 032c 	ldrb.w	r0, [r0, #812]	; 0x32c
 801e1ca:	1e91      	subs	r1, r2, #2
 801e1cc:	424a      	negs	r2, r1
 801e1ce:	414a      	adcs	r2, r1
 801e1d0:	f894 165c 	ldrb.w	r1, [r4, #1628]	; 0x65c
 801e1d4:	2901      	cmp	r1, #1
 801e1d6:	bf08      	it	eq
 801e1d8:	f042 0202 	orreq.w	r2, r2, #2
 801e1dc:	2810      	cmp	r0, #16
 801e1de:	d81d      	bhi.n	801e21c <BnrgmFrndFnInsertFriendUpdate+0x68>
 801e1e0:	f893 132d 	ldrb.w	r1, [r3, #813]	; 0x32d
 801e1e4:	4408      	add	r0, r1
 801e1e6:	f000 000f 	and.w	r0, r0, #15
 801e1ea:	252c      	movs	r5, #44	; 0x2c
 801e1ec:	fb05 3100 	mla	r1, r5, r0, r3
 801e1f0:	2601      	movs	r6, #1
 801e1f2:	f881 6096 	strb.w	r6, [r1, #150]	; 0x96
 801e1f6:	4608      	mov	r0, r1
 801e1f8:	2605      	movs	r6, #5
 801e1fa:	f881 2085 	strb.w	r2, [r1, #133]	; 0x85
 801e1fe:	f881 6095 	strb.w	r6, [r1, #149]	; 0x95
 801e202:	2204      	movs	r2, #4
 801e204:	f8d4 1658 	ldr.w	r1, [r4, #1624]	; 0x658
 801e208:	3086      	adds	r0, #134	; 0x86
 801e20a:	f7fc fff3 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801e20e:	f893 232c 	ldrb.w	r2, [r3, #812]	; 0x32c
 801e212:	3201      	adds	r2, #1
 801e214:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 801e218:	2000      	movs	r0, #0
 801e21a:	bd70      	pop	{r4, r5, r6, pc}
 801e21c:	2002      	movs	r0, #2
 801e21e:	e7fc      	b.n	801e21a <BnrgmFrndFnInsertFriendUpdate+0x66>
 801e220:	20000318 	.word	0x20000318
 801e224:	20001410 	.word	0x20001410

0801e228 <BnrgmFrndFnGetLpnStatus>:
 801e228:	b510      	push	{r4, lr}
 801e22a:	4604      	mov	r4, r0
 801e22c:	f7ff ff89 	bl	801e142 <BnrgmFrndFnGetLpnOffset>
 801e230:	1c43      	adds	r3, r0, #1
 801e232:	d00b      	beq.n	801e24c <BnrgmFrndFnGetLpnStatus+0x24>
 801e234:	f44f 734d 	mov.w	r3, #820	; 0x334
 801e238:	fb03 4400 	mla	r4, r3, r0, r4
 801e23c:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
 801e240:	3801      	subs	r0, #1
 801e242:	2801      	cmp	r0, #1
 801e244:	bf8c      	ite	hi
 801e246:	2000      	movhi	r0, #0
 801e248:	2001      	movls	r0, #1
 801e24a:	bd10      	pop	{r4, pc}
 801e24c:	2002      	movs	r0, #2
 801e24e:	e7fc      	b.n	801e24a <BnrgmFrndFnGetLpnStatus+0x22>

0801e250 <BnrgmFrndMgmtGetFriendshipStatus>:
 801e250:	4b02      	ldr	r3, [pc, #8]	; (801e25c <BnrgmFrndMgmtGetFriendshipStatus+0xc>)
 801e252:	4601      	mov	r1, r0
 801e254:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
 801e258:	f7ff bfe6 	b.w	801e228 <BnrgmFrndFnGetLpnStatus>
 801e25c:	20002508 	.word	0x20002508

0801e260 <BnrgmFrndFnGetSubscrStatus>:
 801e260:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e262:	f44f 7c4d 	mov.w	ip, #820	; 0x334
 801e266:	2700      	movs	r7, #0
 801e268:	7884      	ldrb	r4, [r0, #2]
 801e26a:	b2fe      	uxtb	r6, r7
 801e26c:	42b4      	cmp	r4, r6
 801e26e:	d801      	bhi.n	801e274 <BnrgmFrndFnGetSubscrStatus+0x14>
 801e270:	2000      	movs	r0, #0
 801e272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e274:	fb0c 0506 	mla	r5, ip, r6, r0
 801e278:	351e      	adds	r5, #30
 801e27a:	2406      	movs	r4, #6
 801e27c:	f835 eb02 	ldrh.w	lr, [r5], #2
 801e280:	458e      	cmp	lr, r1
 801e282:	d106      	bne.n	801e292 <BnrgmFrndFnGetSubscrStatus+0x32>
 801e284:	7814      	ldrb	r4, [r2, #0]
 801e286:	551e      	strb	r6, [r3, r4]
 801e288:	7814      	ldrb	r4, [r2, #0]
 801e28a:	3401      	adds	r4, #1
 801e28c:	7014      	strb	r4, [r2, #0]
 801e28e:	3701      	adds	r7, #1
 801e290:	e7ea      	b.n	801e268 <BnrgmFrndFnGetSubscrStatus+0x8>
 801e292:	3c01      	subs	r4, #1
 801e294:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 801e298:	d1f0      	bne.n	801e27c <BnrgmFrndFnGetSubscrStatus+0x1c>
 801e29a:	e7f8      	b.n	801e28e <BnrgmFrndFnGetSubscrStatus+0x2e>

0801e29c <BnrgmFrndMgmtGetSubscrStatus>:
 801e29c:	4613      	mov	r3, r2
 801e29e:	460a      	mov	r2, r1
 801e2a0:	4601      	mov	r1, r0
 801e2a2:	4802      	ldr	r0, [pc, #8]	; (801e2ac <BnrgmFrndMgmtGetSubscrStatus+0x10>)
 801e2a4:	f8d0 0a04 	ldr.w	r0, [r0, #2564]	; 0xa04
 801e2a8:	f7ff bfda 	b.w	801e260 <BnrgmFrndFnGetSubscrStatus>
 801e2ac:	20002508 	.word	0x20002508

0801e2b0 <BnrgmFrndFnQueLpnPkt>:
 801e2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2b4:	4617      	mov	r7, r2
 801e2b6:	b087      	sub	sp, #28
 801e2b8:	4a97      	ldr	r2, [pc, #604]	; (801e518 <BnrgmFrndFnQueLpnPkt+0x268>)
 801e2ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e2bc:	f8b2 294c 	ldrh.w	r2, [r2, #2380]	; 0x94c
 801e2c0:	9301      	str	r3, [sp, #4]
 801e2c2:	428a      	cmp	r2, r1
 801e2c4:	f04f 0300 	mov.w	r3, #0
 801e2c8:	4605      	mov	r5, r0
 801e2ca:	f88d 300b 	strb.w	r3, [sp, #11]
 801e2ce:	f0c0 8121 	bcc.w	801e514 <BnrgmFrndFnQueLpnPkt+0x264>
 801e2d2:	7bfa      	ldrb	r2, [r7, #15]
 801e2d4:	2a01      	cmp	r2, #1
 801e2d6:	f240 811d 	bls.w	801e514 <BnrgmFrndFnQueLpnPkt+0x264>
 801e2da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e2de:	8af9      	ldrh	r1, [r7, #22]
 801e2e0:	429a      	cmp	r2, r3
 801e2e2:	dd18      	ble.n	801e316 <BnrgmFrndFnQueLpnPkt+0x66>
 801e2e4:	f7ff ff2d 	bl	801e142 <BnrgmFrndFnGetLpnOffset>
 801e2e8:	2301      	movs	r3, #1
 801e2ea:	f88d 000c 	strb.w	r0, [sp, #12]
 801e2ee:	f88d 300b 	strb.w	r3, [sp, #11]
 801e2f2:	f04f 0800 	mov.w	r8, #0
 801e2f6:	4644      	mov	r4, r8
 801e2f8:	46c4      	mov	ip, r8
 801e2fa:	4646      	mov	r6, r8
 801e2fc:	2201      	movs	r2, #1
 801e2fe:	f44f 794d 	mov.w	r9, #820	; 0x334
 801e302:	f89d 100b 	ldrb.w	r1, [sp, #11]
 801e306:	fa5f f388 	uxtb.w	r3, r8
 801e30a:	4299      	cmp	r1, r3
 801e30c:	d82d      	bhi.n	801e36a <BnrgmFrndFnQueLpnPkt+0xba>
 801e30e:	2000      	movs	r0, #0
 801e310:	b007      	add	sp, #28
 801e312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e31a:	4291      	cmp	r1, r2
 801e31c:	d11f      	bne.n	801e35e <BnrgmFrndFnQueLpnPkt+0xae>
 801e31e:	7884      	ldrb	r4, [r0, #2]
 801e320:	4619      	mov	r1, r3
 801e322:	461a      	mov	r2, r3
 801e324:	f100 0608 	add.w	r6, r0, #8
 801e328:	f44f 7c4d 	mov.w	ip, #820	; 0x334
 801e32c:	b2d8      	uxtb	r0, r3
 801e32e:	4284      	cmp	r4, r0
 801e330:	d804      	bhi.n	801e33c <BnrgmFrndFnQueLpnPkt+0x8c>
 801e332:	2900      	cmp	r1, #0
 801e334:	d0dd      	beq.n	801e2f2 <BnrgmFrndFnQueLpnPkt+0x42>
 801e336:	f88d 200b 	strb.w	r2, [sp, #11]
 801e33a:	e7da      	b.n	801e2f2 <BnrgmFrndFnQueLpnPkt+0x42>
 801e33c:	fb0c fe03 	mul.w	lr, ip, r3
 801e340:	f836 e00e 	ldrh.w	lr, [r6, lr]
 801e344:	f1be 0f00 	cmp.w	lr, #0
 801e348:	d007      	beq.n	801e35a <BnrgmFrndFnQueLpnPkt+0xaa>
 801e34a:	f102 0118 	add.w	r1, r2, #24
 801e34e:	4469      	add	r1, sp
 801e350:	3201      	adds	r2, #1
 801e352:	f801 0c0c 	strb.w	r0, [r1, #-12]
 801e356:	b2d2      	uxtb	r2, r2
 801e358:	2101      	movs	r1, #1
 801e35a:	3301      	adds	r3, #1
 801e35c:	e7e6      	b.n	801e32c <BnrgmFrndFnQueLpnPkt+0x7c>
 801e35e:	ab03      	add	r3, sp, #12
 801e360:	f10d 020b 	add.w	r2, sp, #11
 801e364:	f7ff ff7c 	bl	801e260 <BnrgmFrndFnGetSubscrStatus>
 801e368:	e7c3      	b.n	801e2f2 <BnrgmFrndFnQueLpnPkt+0x42>
 801e36a:	3318      	adds	r3, #24
 801e36c:	446b      	add	r3, sp
 801e36e:	8ab8      	ldrh	r0, [r7, #20]
 801e370:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801e374:	fb09 5103 	mla	r1, r9, r3, r5
 801e378:	f8b1 e008 	ldrh.w	lr, [r1, #8]
 801e37c:	4570      	cmp	r0, lr
 801e37e:	d304      	bcc.n	801e38a <BnrgmFrndFnQueLpnPkt+0xda>
 801e380:	f891 1333 	ldrb.w	r1, [r1, #819]	; 0x333
 801e384:	4471      	add	r1, lr
 801e386:	4288      	cmp	r0, r1
 801e388:	db6a      	blt.n	801e460 <BnrgmFrndFnQueLpnPkt+0x1b0>
 801e38a:	9901      	ldr	r1, [sp, #4]
 801e38c:	7809      	ldrb	r1, [r1, #0]
 801e38e:	2902      	cmp	r1, #2
 801e390:	d164      	bne.n	801e45c <BnrgmFrndFnQueLpnPkt+0x1ac>
 801e392:	9a01      	ldr	r2, [sp, #4]
 801e394:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 801e398:	fb09 5e03 	mla	lr, r9, r3, r5
 801e39c:	2000      	movs	r0, #0
 801e39e:	f8be 2080 	ldrh.w	r2, [lr, #128]	; 0x80
 801e3a2:	455a      	cmp	r2, fp
 801e3a4:	fa5f fa80 	uxtb.w	sl, r0
 801e3a8:	d105      	bne.n	801e3b6 <BnrgmFrndFnQueLpnPkt+0x106>
 801e3aa:	f8de 1074 	ldr.w	r1, [lr, #116]	; 0x74
 801e3ae:	693a      	ldr	r2, [r7, #16]
 801e3b0:	4291      	cmp	r1, r2
 801e3b2:	f0c0 80ac 	bcc.w	801e50e <BnrgmFrndFnQueLpnPkt+0x25e>
 801e3b6:	3001      	adds	r0, #1
 801e3b8:	2810      	cmp	r0, #16
 801e3ba:	f10e 0e2c 	add.w	lr, lr, #44	; 0x2c
 801e3be:	d1ee      	bne.n	801e39e <BnrgmFrndFnQueLpnPkt+0xee>
 801e3c0:	fb09 f203 	mul.w	r2, r9, r3
 801e3c4:	18a8      	adds	r0, r5, r2
 801e3c6:	f890 e330 	ldrb.w	lr, [r0, #816]	; 0x330
 801e3ca:	f890 1331 	ldrb.w	r1, [r0, #817]	; 0x331
 801e3ce:	f1be 0f0f 	cmp.w	lr, #15
 801e3d2:	d848      	bhi.n	801e466 <BnrgmFrndFnQueLpnPkt+0x1b6>
 801e3d4:	4471      	add	r1, lr
 801e3d6:	f10e 0201 	add.w	r2, lr, #1
 801e3da:	f001 060f 	and.w	r6, r1, #15
 801e3de:	f880 2330 	strb.w	r2, [r0, #816]	; 0x330
 801e3e2:	212c      	movs	r1, #44	; 0x2c
 801e3e4:	fb09 f003 	mul.w	r0, r9, r3
 801e3e8:	fb01 0206 	mla	r2, r1, r6, r0
 801e3ec:	442a      	add	r2, r5
 801e3ee:	fb06 0001 	mla	r0, r6, r1, r0
 801e3f2:	f04f 0c00 	mov.w	ip, #0
 801e3f6:	f882 c09a 	strb.w	ip, [r2, #154]	; 0x9a
 801e3fa:	f100 0c70 	add.w	ip, r0, #112	; 0x70
 801e3fe:	68fa      	ldr	r2, [r7, #12]
 801e400:	f845 200c 	str.w	r2, [r5, ip]
 801e404:	eb05 010c 	add.w	r1, r5, ip
 801e408:	693a      	ldr	r2, [r7, #16]
 801e40a:	604a      	str	r2, [r1, #4]
 801e40c:	697a      	ldr	r2, [r7, #20]
 801e40e:	608a      	str	r2, [r1, #8]
 801e410:	9901      	ldr	r1, [sp, #4]
 801e412:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 801e416:	eb02 0a05 	add.w	sl, r2, r5
 801e41a:	f101 0c0c 	add.w	ip, r1, #12
 801e41e:	f851 eb04 	ldr.w	lr, [r1], #4
 801e422:	f84a eb04 	str.w	lr, [sl], #4
 801e426:	4561      	cmp	r1, ip
 801e428:	d1f9      	bne.n	801e41e <BnrgmFrndFnQueLpnPkt+0x16e>
 801e42a:	222c      	movs	r2, #44	; 0x2c
 801e42c:	fb09 f303 	mul.w	r3, r9, r3
 801e430:	fb02 3306 	mla	r3, r2, r6, r3
 801e434:	7809      	ldrb	r1, [r1, #0]
 801e436:	f88a 1000 	strb.w	r1, [sl]
 801e43a:	442b      	add	r3, r5
 801e43c:	3089      	adds	r0, #137	; 0x89
 801e43e:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
 801e442:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e444:	3a01      	subs	r2, #1
 801e446:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 801e44a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e44c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801e450:	4428      	add	r0, r5
 801e452:	f00a fb8d 	bl	8028b70 <memcpy>
 801e456:	f04f 0c01 	mov.w	ip, #1
 801e45a:	e056      	b.n	801e50a <BnrgmFrndFnQueLpnPkt+0x25a>
 801e45c:	2a00      	cmp	r2, #0
 801e45e:	d1af      	bne.n	801e3c0 <BnrgmFrndFnQueLpnPkt+0x110>
 801e460:	f108 0801 	add.w	r8, r8, #1
 801e464:	e74d      	b.n	801e302 <BnrgmFrndFnQueLpnPkt+0x52>
 801e466:	f104 0a10 	add.w	sl, r4, #16
 801e46a:	fa5f fa8a 	uxtb.w	sl, sl
 801e46e:	1b09      	subs	r1, r1, r4
 801e470:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 801e474:	1860      	adds	r0, r4, r1
 801e476:	f000 000f 	and.w	r0, r0, #15
 801e47a:	fb0b 2e00 	mla	lr, fp, r0, r2
 801e47e:	44ae      	add	lr, r5
 801e480:	f89e e09a 	ldrb.w	lr, [lr, #154]	; 0x9a
 801e484:	f1be 0f00 	cmp.w	lr, #0
 801e488:	d137      	bne.n	801e4fa <BnrgmFrndFnQueLpnPkt+0x24a>
 801e48a:	4676      	mov	r6, lr
 801e48c:	300f      	adds	r0, #15
 801e48e:	f102 0c70 	add.w	ip, r2, #112	; 0x70
 801e492:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 801e496:	b2f2      	uxtb	r2, r6
 801e498:	4294      	cmp	r4, r2
 801e49a:	d80c      	bhi.n	801e4b6 <BnrgmFrndFnQueLpnPkt+0x206>
 801e49c:	fb09 5203 	mla	r2, r9, r3, r5
 801e4a0:	f892 6331 	ldrb.w	r6, [r2, #817]	; 0x331
 801e4a4:	3601      	adds	r6, #1
 801e4a6:	f006 060f 	and.w	r6, r6, #15
 801e4aa:	f882 6331 	strb.w	r6, [r2, #817]	; 0x331
 801e4ae:	360f      	adds	r6, #15
 801e4b0:	f006 060f 	and.w	r6, r6, #15
 801e4b4:	e795      	b.n	801e3e2 <BnrgmFrndFnQueLpnPkt+0x132>
 801e4b6:	1c41      	adds	r1, r0, #1
 801e4b8:	424a      	negs	r2, r1
 801e4ba:	f002 020f 	and.w	r2, r2, #15
 801e4be:	f001 010f 	and.w	r1, r1, #15
 801e4c2:	bf58      	it	pl
 801e4c4:	4251      	negpl	r1, r2
 801e4c6:	f1d0 0a00 	rsbs	sl, r0, #0
 801e4ca:	f00a 0a0f 	and.w	sl, sl, #15
 801e4ce:	f000 020f 	and.w	r2, r0, #15
 801e4d2:	bf58      	it	pl
 801e4d4:	f1ca 0200 	rsbpl	r2, sl, #0
 801e4d8:	fb0e c202 	mla	r2, lr, r2, ip
 801e4dc:	fb0e c101 	mla	r1, lr, r1, ip
 801e4e0:	442a      	add	r2, r5
 801e4e2:	4429      	add	r1, r5
 801e4e4:	f102 0a2c 	add.w	sl, r2, #44	; 0x2c
 801e4e8:	f852 bb04 	ldr.w	fp, [r2], #4
 801e4ec:	f841 bb04 	str.w	fp, [r1], #4
 801e4f0:	4552      	cmp	r2, sl
 801e4f2:	d1f9      	bne.n	801e4e8 <BnrgmFrndFnQueLpnPkt+0x238>
 801e4f4:	3601      	adds	r6, #1
 801e4f6:	3801      	subs	r0, #1
 801e4f8:	e7cd      	b.n	801e496 <BnrgmFrndFnQueLpnPkt+0x1e6>
 801e4fa:	3401      	adds	r4, #1
 801e4fc:	b2e4      	uxtb	r4, r4
 801e4fe:	4554      	cmp	r4, sl
 801e500:	d1b8      	bne.n	801e474 <BnrgmFrndFnQueLpnPkt+0x1c4>
 801e502:	f1bc 0f00 	cmp.w	ip, #0
 801e506:	f47f af6c 	bne.w	801e3e2 <BnrgmFrndFnQueLpnPkt+0x132>
 801e50a:	2201      	movs	r2, #1
 801e50c:	e7a8      	b.n	801e460 <BnrgmFrndFnQueLpnPkt+0x1b0>
 801e50e:	4656      	mov	r6, sl
 801e510:	2200      	movs	r2, #0
 801e512:	e7a5      	b.n	801e460 <BnrgmFrndFnQueLpnPkt+0x1b0>
 801e514:	2002      	movs	r0, #2
 801e516:	e6fb      	b.n	801e310 <BnrgmFrndFnQueLpnPkt+0x60>
 801e518:	20001410 	.word	0x20001410

0801e51c <BnrgmFrndMgmtQueLpnPkt>:
 801e51c:	b513      	push	{r0, r1, r4, lr}
 801e51e:	9c04      	ldr	r4, [sp, #16]
 801e520:	e9cd 3400 	strd	r3, r4, [sp]
 801e524:	4613      	mov	r3, r2
 801e526:	460a      	mov	r2, r1
 801e528:	4601      	mov	r1, r0
 801e52a:	4803      	ldr	r0, [pc, #12]	; (801e538 <BnrgmFrndMgmtQueLpnPkt+0x1c>)
 801e52c:	f8d0 0a04 	ldr.w	r0, [r0, #2564]	; 0xa04
 801e530:	f7ff febe 	bl	801e2b0 <BnrgmFrndFnQueLpnPkt>
 801e534:	b002      	add	sp, #8
 801e536:	bd10      	pop	{r4, pc}
 801e538:	20002508 	.word	0x20002508

0801e53c <BnrgmFrndFnProcessFrndClearConf>:
 801e53c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e53e:	4614      	mov	r4, r2
 801e540:	461d      	mov	r5, r3
 801e542:	b930      	cbnz	r0, 801e552 <BnrgmFrndFnProcessFrndClearConf+0x16>
 801e544:	4b1a      	ldr	r3, [pc, #104]	; (801e5b0 <BnrgmFrndFnProcessFrndClearConf+0x74>)
 801e546:	4a1b      	ldr	r2, [pc, #108]	; (801e5b4 <BnrgmFrndFnProcessFrndClearConf+0x78>)
 801e548:	481b      	ldr	r0, [pc, #108]	; (801e5b8 <BnrgmFrndFnProcessFrndClearConf+0x7c>)
 801e54a:	f44f 7167 	mov.w	r1, #924	; 0x39c
 801e54e:	f00a faa5 	bl	8028a9c <__assert_func>
 801e552:	b35b      	cbz	r3, 801e5ac <BnrgmFrndFnProcessFrndClearConf+0x70>
 801e554:	9b06      	ldr	r3, [sp, #24]
 801e556:	2b03      	cmp	r3, #3
 801e558:	d928      	bls.n	801e5ac <BnrgmFrndFnProcessFrndClearConf+0x70>
 801e55a:	aa01      	add	r2, sp, #4
 801e55c:	2102      	movs	r1, #2
 801e55e:	4628      	mov	r0, r5
 801e560:	f7fc fe1e 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 801e564:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801e568:	1868      	adds	r0, r5, r1
 801e56a:	f7fc fe19 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 801e56e:	4631      	mov	r1, r6
 801e570:	4620      	mov	r0, r4
 801e572:	f7ff fde6 	bl	801e142 <BnrgmFrndFnGetLpnOffset>
 801e576:	1c43      	adds	r3, r0, #1
 801e578:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801e57c:	4602      	mov	r2, r0
 801e57e:	d015      	beq.n	801e5ac <BnrgmFrndFnProcessFrndClearConf+0x70>
 801e580:	f44f 734d 	mov.w	r3, #820	; 0x334
 801e584:	fb03 4300 	mla	r3, r3, r0, r4
 801e588:	8959      	ldrh	r1, [r3, #10]
 801e58a:	42a9      	cmp	r1, r5
 801e58c:	d10c      	bne.n	801e5a8 <BnrgmFrndFnProcessFrndClearConf+0x6c>
 801e58e:	6998      	ldr	r0, [r3, #24]
 801e590:	b108      	cbz	r0, 801e596 <BnrgmFrndFnProcessFrndClearConf+0x5a>
 801e592:	f7f9 fb71 	bl	8017c78 <MoblePalTimerDestroy>
 801e596:	f44f 704d 	mov.w	r0, #820	; 0x334
 801e59a:	fb00 4402 	mla	r4, r0, r2, r4
 801e59e:	2000      	movs	r0, #0
 801e5a0:	61a0      	str	r0, [r4, #24]
 801e5a2:	82a0      	strh	r0, [r4, #20]
 801e5a4:	b002      	add	sp, #8
 801e5a6:	bd70      	pop	{r4, r5, r6, pc}
 801e5a8:	2000      	movs	r0, #0
 801e5aa:	e7fb      	b.n	801e5a4 <BnrgmFrndFnProcessFrndClearConf+0x68>
 801e5ac:	2002      	movs	r0, #2
 801e5ae:	e7f9      	b.n	801e5a4 <BnrgmFrndFnProcessFrndClearConf+0x68>
 801e5b0:	08033440 	.word	0x08033440
 801e5b4:	08031829 	.word	0x08031829
 801e5b8:	08033a13 	.word	0x08033a13

0801e5bc <BnrgmFrndFnInit>:
 801e5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5be:	7813      	ldrb	r3, [r2, #0]
 801e5c0:	4616      	mov	r6, r2
 801e5c2:	1e5a      	subs	r2, r3, #1
 801e5c4:	2a09      	cmp	r2, #9
 801e5c6:	b08b      	sub	sp, #44	; 0x2c
 801e5c8:	4604      	mov	r4, r0
 801e5ca:	d831      	bhi.n	801e630 <BnrgmFrndFnInit+0x74>
 801e5cc:	f1c3 030a 	rsb	r3, r3, #10
 801e5d0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801e5d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e5d8:	f242 050c 	movw	r5, #8204	; 0x200c
 801e5dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801e5e0:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 801e5e4:	b29d      	uxth	r5, r3
 801e5e6:	428d      	cmp	r5, r1
 801e5e8:	d822      	bhi.n	801e630 <BnrgmFrndFnInit+0x74>
 801e5ea:	2700      	movs	r7, #0
 801e5ec:	462a      	mov	r2, r5
 801e5ee:	2100      	movs	r1, #0
 801e5f0:	4620      	mov	r0, r4
 801e5f2:	3701      	adds	r7, #1
 801e5f4:	f00a fae4 	bl	8028bc0 <memset>
 801e5f8:	b2bb      	uxth	r3, r7
 801e5fa:	429d      	cmp	r5, r3
 801e5fc:	d8f6      	bhi.n	801e5ec <BnrgmFrndFnInit+0x30>
 801e5fe:	7835      	ldrb	r5, [r6, #0]
 801e600:	b1b5      	cbz	r5, 801e630 <BnrgmFrndFnInit+0x74>
 801e602:	70a5      	strb	r5, [r4, #2]
 801e604:	2228      	movs	r2, #40	; 0x28
 801e606:	2100      	movs	r1, #0
 801e608:	4668      	mov	r0, sp
 801e60a:	f00a fad9 	bl	8028bc0 <memset>
 801e60e:	342a      	adds	r4, #42	; 0x2a
 801e610:	466a      	mov	r2, sp
 801e612:	2300      	movs	r3, #0
 801e614:	3301      	adds	r3, #1
 801e616:	b2d9      	uxtb	r1, r3
 801e618:	428d      	cmp	r5, r1
 801e61a:	f842 4b04 	str.w	r4, [r2], #4
 801e61e:	f504 744d 	add.w	r4, r4, #820	; 0x334
 801e622:	d8f7      	bhi.n	801e614 <BnrgmFrndFnInit+0x58>
 801e624:	4669      	mov	r1, sp
 801e626:	4628      	mov	r0, r5
 801e628:	f7fb fea6 	bl	801a378 <BnrgmPalCryptoInitFriendshipKeysP>
 801e62c:	b00b      	add	sp, #44	; 0x2c
 801e62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e630:	2002      	movs	r0, #2
 801e632:	e7fb      	b.n	801e62c <BnrgmFrndFnInit+0x70>

0801e634 <BnrgmFrndMgmtFnInit>:
 801e634:	4b03      	ldr	r3, [pc, #12]	; (801e644 <BnrgmFrndMgmtFnInit+0x10>)
 801e636:	4602      	mov	r2, r0
 801e638:	f8b3 1a08 	ldrh.w	r1, [r3, #2568]	; 0xa08
 801e63c:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
 801e640:	f7ff bfbc 	b.w	801e5bc <BnrgmFrndFnInit>
 801e644:	20002508 	.word	0x20002508

0801e648 <BnrgmFrndFnUpdateKeys>:
 801e648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e64a:	788f      	ldrb	r7, [r1, #2]
 801e64c:	460b      	mov	r3, r1
 801e64e:	2400      	movs	r4, #0
 801e650:	b2e5      	uxtb	r5, r4
 801e652:	42af      	cmp	r7, r5
 801e654:	d801      	bhi.n	801e65a <BnrgmFrndFnUpdateKeys+0x12>
 801e656:	2000      	movs	r0, #0
 801e658:	e014      	b.n	801e684 <BnrgmFrndFnUpdateKeys+0x3c>
 801e65a:	891e      	ldrh	r6, [r3, #8]
 801e65c:	b1a6      	cbz	r6, 801e688 <BnrgmFrndFnUpdateKeys+0x40>
 801e65e:	f893 c06c 	ldrb.w	ip, [r3, #108]	; 0x6c
 801e662:	4594      	cmp	ip, r2
 801e664:	d110      	bne.n	801e688 <BnrgmFrndFnUpdateKeys+0x40>
 801e666:	f44f 734d 	mov.w	r3, #820	; 0x334
 801e66a:	6802      	ldr	r2, [r0, #0]
 801e66c:	fb03 1404 	mla	r4, r3, r4, r1
 801e670:	2101      	movs	r1, #1
 801e672:	8963      	ldrh	r3, [r4, #10]
 801e674:	8852      	ldrh	r2, [r2, #2]
 801e676:	9101      	str	r1, [sp, #4]
 801e678:	89a1      	ldrh	r1, [r4, #12]
 801e67a:	9100      	str	r1, [sp, #0]
 801e67c:	4628      	mov	r0, r5
 801e67e:	4631      	mov	r1, r6
 801e680:	f7fb fea2 	bl	801a3c8 <BnrgmPalCryptoSetFriendshipKeys>
 801e684:	b003      	add	sp, #12
 801e686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e688:	3401      	adds	r4, #1
 801e68a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 801e68e:	e7df      	b.n	801e650 <BnrgmFrndFnUpdateKeys+0x8>

0801e690 <BnrgmFrndFnSwitchKeys>:
 801e690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e692:	4604      	mov	r4, r0
 801e694:	460e      	mov	r6, r1
 801e696:	2500      	movs	r5, #0
 801e698:	f44f 774d 	mov.w	r7, #820	; 0x334
 801e69c:	78a3      	ldrb	r3, [r4, #2]
 801e69e:	b2e8      	uxtb	r0, r5
 801e6a0:	4283      	cmp	r3, r0
 801e6a2:	d801      	bhi.n	801e6a8 <BnrgmFrndFnSwitchKeys+0x18>
 801e6a4:	2000      	movs	r0, #0
 801e6a6:	e00d      	b.n	801e6c4 <BnrgmFrndFnSwitchKeys+0x34>
 801e6a8:	fb07 4300 	mla	r3, r7, r0, r4
 801e6ac:	891a      	ldrh	r2, [r3, #8]
 801e6ae:	b90a      	cbnz	r2, 801e6b4 <BnrgmFrndFnSwitchKeys+0x24>
 801e6b0:	3501      	adds	r5, #1
 801e6b2:	e7f3      	b.n	801e69c <BnrgmFrndFnSwitchKeys+0xc>
 801e6b4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801e6b8:	42b3      	cmp	r3, r6
 801e6ba:	d1f9      	bne.n	801e6b0 <BnrgmFrndFnSwitchKeys+0x20>
 801e6bc:	f7fb fee0 	bl	801a480 <BnrgmPalCryptoSwitchFriendshipKeys>
 801e6c0:	2800      	cmp	r0, #0
 801e6c2:	d0f5      	beq.n	801e6b0 <BnrgmFrndFnSwitchKeys+0x20>
 801e6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e6c6 <BnrgmFrndFnSendSecurityUpdate>:
 801e6c6:	b570      	push	{r4, r5, r6, lr}
 801e6c8:	4604      	mov	r4, r0
 801e6ca:	2500      	movs	r5, #0
 801e6cc:	f44f 764d 	mov.w	r6, #820	; 0x334
 801e6d0:	78a2      	ldrb	r2, [r4, #2]
 801e6d2:	b2eb      	uxtb	r3, r5
 801e6d4:	429a      	cmp	r2, r3
 801e6d6:	d800      	bhi.n	801e6da <BnrgmFrndFnSendSecurityUpdate+0x14>
 801e6d8:	bd70      	pop	{r4, r5, r6, pc}
 801e6da:	4373      	muls	r3, r6
 801e6dc:	18e2      	adds	r2, r4, r3
 801e6de:	8912      	ldrh	r2, [r2, #8]
 801e6e0:	b11a      	cbz	r2, 801e6ea <BnrgmFrndFnSendSecurityUpdate+0x24>
 801e6e2:	3304      	adds	r3, #4
 801e6e4:	18e0      	adds	r0, r4, r3
 801e6e6:	f7ff fd65 	bl	801e1b4 <BnrgmFrndFnInsertFriendUpdate>
 801e6ea:	3501      	adds	r5, #1
 801e6ec:	e7f0      	b.n	801e6d0 <BnrgmFrndFnSendSecurityUpdate+0xa>
	...

0801e6f0 <BnrgmFrndMgmtSendSecurityUpdate>:
 801e6f0:	4b05      	ldr	r3, [pc, #20]	; (801e708 <BnrgmFrndMgmtSendSecurityUpdate+0x18>)
 801e6f2:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 801e6f6:	2b01      	cmp	r3, #1
 801e6f8:	d104      	bne.n	801e704 <BnrgmFrndMgmtSendSecurityUpdate+0x14>
 801e6fa:	4b04      	ldr	r3, [pc, #16]	; (801e70c <BnrgmFrndMgmtSendSecurityUpdate+0x1c>)
 801e6fc:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
 801e700:	f7ff bfe1 	b.w	801e6c6 <BnrgmFrndFnSendSecurityUpdate>
 801e704:	4770      	bx	lr
 801e706:	bf00      	nop
 801e708:	20000318 	.word	0x20000318
 801e70c:	20002508 	.word	0x20002508

0801e710 <MobleStackSetIvIndex>:
 801e710:	b538      	push	{r3, r4, r5, lr}
 801e712:	4d0b      	ldr	r5, [pc, #44]	; (801e740 <MobleStackSetIvIndex+0x30>)
 801e714:	4604      	mov	r4, r0
 801e716:	f7fb fa6d 	bl	8019bf4 <MoblePalCryptoSetIvIndex>
 801e71a:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
 801e71e:	605c      	str	r4, [r3, #4]
 801e720:	4b08      	ldr	r3, [pc, #32]	; (801e744 <MobleStackSetIvIndex+0x34>)
 801e722:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801e726:	2b01      	cmp	r3, #1
 801e728:	d101      	bne.n	801e72e <MobleStackSetIvIndex+0x1e>
 801e72a:	f7ff f9c7 	bl	801dabc <BnrgmStackSendBeaconOverGatt>
 801e72e:	f7ff ffdf 	bl	801e6f0 <BnrgmFrndMgmtSendSecurityUpdate>
 801e732:	f8d5 0680 	ldr.w	r0, [r5, #1664]	; 0x680
 801e736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e73a:	f7fe bb87 	b.w	801ce4c <MobleConfigNetworkSave>
 801e73e:	bf00      	nop
 801e740:	20001410 	.word	0x20001410
 801e744:	20000318 	.word	0x20000318

0801e748 <MobleStackForcedSetIvIndex>:
 801e748:	b510      	push	{r4, lr}
 801e74a:	4c07      	ldr	r4, [pc, #28]	; (801e768 <MobleStackForcedSetIvIndex+0x20>)
 801e74c:	f7ff ffe0 	bl	801e710 <MobleStackSetIvIndex>
 801e750:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 801e754:	f7fd fef8 	bl	801c548 <MobleNetworkReplayCacheClearAll>
 801e758:	f7fe fd78 	bl	801d24c <MobleStackResetSeq>
 801e75c:	4b03      	ldr	r3, [pc, #12]	; (801e76c <MobleStackForcedSetIvIndex+0x24>)
 801e75e:	f8c4 3924 	str.w	r3, [r4, #2340]	; 0x924
 801e762:	2000      	movs	r0, #0
 801e764:	bd10      	pop	{r4, pc}
 801e766:	bf00      	nop
 801e768:	20001410 	.word	0x20001410
 801e76c:	1ee62800 	.word	0x1ee62800

0801e770 <MobleStackIvUpdateSwitchToProgress>:
 801e770:	b513      	push	{r0, r1, r4, lr}
 801e772:	4c0d      	ldr	r4, [pc, #52]	; (801e7a8 <MobleStackIvUpdateSwitchToProgress+0x38>)
 801e774:	f894 065c 	ldrb.w	r0, [r4, #1628]	; 0x65c
 801e778:	2801      	cmp	r0, #1
 801e77a:	d012      	beq.n	801e7a2 <MobleStackIvUpdateSwitchToProgress+0x32>
 801e77c:	f8d4 1658 	ldr.w	r1, [r4, #1624]	; 0x658
 801e780:	3101      	adds	r1, #1
 801e782:	2301      	movs	r3, #1
 801e784:	4608      	mov	r0, r1
 801e786:	f884 365c 	strb.w	r3, [r4, #1628]	; 0x65c
 801e78a:	9101      	str	r1, [sp, #4]
 801e78c:	f7ff ffc0 	bl	801e710 <MobleStackSetIvIndex>
 801e790:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 801e794:	9901      	ldr	r1, [sp, #4]
 801e796:	f7fd fea5 	bl	801c4e4 <MobleNetworkReplayCacheClear>
 801e79a:	4b04      	ldr	r3, [pc, #16]	; (801e7ac <MobleStackIvUpdateSwitchToProgress+0x3c>)
 801e79c:	f8c4 3924 	str.w	r3, [r4, #2340]	; 0x924
 801e7a0:	2000      	movs	r0, #0
 801e7a2:	b002      	add	sp, #8
 801e7a4:	bd10      	pop	{r4, pc}
 801e7a6:	bf00      	nop
 801e7a8:	20001410 	.word	0x20001410
 801e7ac:	1ee62800 	.word	0x1ee62800

0801e7b0 <MobleStackIvUpdateSwitchToNormal>:
 801e7b0:	b510      	push	{r4, lr}
 801e7b2:	4c0c      	ldr	r4, [pc, #48]	; (801e7e4 <MobleStackIvUpdateSwitchToNormal+0x34>)
 801e7b4:	f894 365c 	ldrb.w	r3, [r4, #1628]	; 0x65c
 801e7b8:	b193      	cbz	r3, 801e7e0 <MobleStackIvUpdateSwitchToNormal+0x30>
 801e7ba:	2300      	movs	r3, #0
 801e7bc:	f884 365c 	strb.w	r3, [r4, #1628]	; 0x65c
 801e7c0:	f7fe fd44 	bl	801d24c <MobleStackResetSeq>
 801e7c4:	4b08      	ldr	r3, [pc, #32]	; (801e7e8 <MobleStackIvUpdateSwitchToNormal+0x38>)
 801e7c6:	f8c4 3924 	str.w	r3, [r4, #2340]	; 0x924
 801e7ca:	4b08      	ldr	r3, [pc, #32]	; (801e7ec <MobleStackIvUpdateSwitchToNormal+0x3c>)
 801e7cc:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801e7d0:	2b01      	cmp	r3, #1
 801e7d2:	d101      	bne.n	801e7d8 <MobleStackIvUpdateSwitchToNormal+0x28>
 801e7d4:	f7ff f972 	bl	801dabc <BnrgmStackSendBeaconOverGatt>
 801e7d8:	f7ff ff8a 	bl	801e6f0 <BnrgmFrndMgmtSendSecurityUpdate>
 801e7dc:	2000      	movs	r0, #0
 801e7de:	bd10      	pop	{r4, pc}
 801e7e0:	2001      	movs	r0, #1
 801e7e2:	e7fc      	b.n	801e7de <MobleStackIvUpdateSwitchToNormal+0x2e>
 801e7e4:	20001410 	.word	0x20001410
 801e7e8:	1ee62800 	.word	0x1ee62800
 801e7ec:	20000318 	.word	0x20000318

0801e7f0 <MobleStackIvUpdateTestSignal>:
 801e7f0:	4b03      	ldr	r3, [pc, #12]	; (801e800 <MobleStackIvUpdateTestSignal+0x10>)
 801e7f2:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 801e7f6:	b90b      	cbnz	r3, 801e7fc <MobleStackIvUpdateTestSignal+0xc>
 801e7f8:	f7ff bfba 	b.w	801e770 <MobleStackIvUpdateSwitchToProgress>
 801e7fc:	f7ff bfd8 	b.w	801e7b0 <MobleStackIvUpdateSwitchToNormal>
 801e800:	20001410 	.word	0x20001410

0801e804 <Test_UpperTester_Set04>:
 801e804:	f7ff bff4 	b.w	801e7f0 <MobleStackIvUpdateTestSignal>

0801e808 <MobleStackProcessIvFromBeacon>:
 801e808:	b538      	push	{r3, r4, r5, lr}
 801e80a:	4c2a      	ldr	r4, [pc, #168]	; (801e8b4 <MobleStackProcessIvFromBeacon+0xac>)
 801e80c:	4615      	mov	r5, r2
 801e80e:	f894 265c 	ldrb.w	r2, [r4, #1628]	; 0x65c
 801e812:	4603      	mov	r3, r0
 801e814:	f8d4 0658 	ldr.w	r0, [r4, #1624]	; 0x658
 801e818:	bb8a      	cbnz	r2, 801e87e <MobleStackProcessIvFromBeacon+0x76>
 801e81a:	f100 022a 	add.w	r2, r0, #42	; 0x2a
 801e81e:	428a      	cmp	r2, r1
 801e820:	d32b      	bcc.n	801e87a <MobleStackProcessIvFromBeacon+0x72>
 801e822:	f013 0302 	ands.w	r3, r3, #2
 801e826:	d023      	beq.n	801e870 <MobleStackProcessIvFromBeacon+0x68>
 801e828:	1c43      	adds	r3, r0, #1
 801e82a:	428b      	cmp	r3, r1
 801e82c:	d204      	bcs.n	801e838 <MobleStackProcessIvFromBeacon+0x30>
 801e82e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e832:	4608      	mov	r0, r1
 801e834:	f7ff bf88 	b.w	801e748 <MobleStackForcedSetIvIndex>
 801e838:	d114      	bne.n	801e864 <MobleStackProcessIvFromBeacon+0x5c>
 801e83a:	f7fa fccb 	bl	80191d4 <MoblePalCrypto_isPrimarySubnet>
 801e83e:	b168      	cbz	r0, 801e85c <MobleStackProcessIvFromBeacon+0x54>
 801e840:	227c      	movs	r2, #124	; 0x7c
 801e842:	fb02 4505 	mla	r5, r2, r5, r4
 801e846:	f8d4 1924 	ldr.w	r1, [r4, #2340]	; 0x924
 801e84a:	4a1b      	ldr	r2, [pc, #108]	; (801e8b8 <MobleStackProcessIvFromBeacon+0xb0>)
 801e84c:	f8b5 3448 	ldrh.w	r3, [r5, #1096]	; 0x448
 801e850:	4291      	cmp	r1, r2
 801e852:	d302      	bcc.n	801e85a <MobleStackProcessIvFromBeacon+0x52>
 801e854:	f894 292c 	ldrb.w	r2, [r4, #2348]	; 0x92c
 801e858:	b17a      	cbz	r2, 801e87a <MobleStackProcessIvFromBeacon+0x72>
 801e85a:	bb43      	cbnz	r3, 801e8ae <MobleStackProcessIvFromBeacon+0xa6>
 801e85c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e860:	f7ff bf86 	b.w	801e770 <MobleStackIvUpdateSwitchToProgress>
 801e864:	4288      	cmp	r0, r1
 801e866:	bf14      	ite	ne
 801e868:	2302      	movne	r3, #2
 801e86a:	2301      	moveq	r3, #1
 801e86c:	4618      	mov	r0, r3
 801e86e:	bd38      	pop	{r3, r4, r5, pc}
 801e870:	1e42      	subs	r2, r0, #1
 801e872:	428a      	cmp	r2, r1
 801e874:	d0fa      	beq.n	801e86c <MobleStackProcessIvFromBeacon+0x64>
 801e876:	4288      	cmp	r0, r1
 801e878:	d3d9      	bcc.n	801e82e <MobleStackProcessIvFromBeacon+0x26>
 801e87a:	2301      	movs	r3, #1
 801e87c:	e7f6      	b.n	801e86c <MobleStackProcessIvFromBeacon+0x64>
 801e87e:	079b      	lsls	r3, r3, #30
 801e880:	d4fb      	bmi.n	801e87a <MobleStackProcessIvFromBeacon+0x72>
 801e882:	4288      	cmp	r0, r1
 801e884:	d1f9      	bne.n	801e87a <MobleStackProcessIvFromBeacon+0x72>
 801e886:	f8d4 2924 	ldr.w	r2, [r4, #2340]	; 0x924
 801e88a:	4b0b      	ldr	r3, [pc, #44]	; (801e8b8 <MobleStackProcessIvFromBeacon+0xb0>)
 801e88c:	429a      	cmp	r2, r3
 801e88e:	d303      	bcc.n	801e898 <MobleStackProcessIvFromBeacon+0x90>
 801e890:	f894 392c 	ldrb.w	r3, [r4, #2348]	; 0x92c
 801e894:	2b00      	cmp	r3, #0
 801e896:	d0f0      	beq.n	801e87a <MobleStackProcessIvFromBeacon+0x72>
 801e898:	f8d4 3688 	ldr.w	r3, [r4, #1672]	; 0x688
 801e89c:	b11b      	cbz	r3, 801e8a6 <MobleStackProcessIvFromBeacon+0x9e>
 801e89e:	4b07      	ldr	r3, [pc, #28]	; (801e8bc <MobleStackProcessIvFromBeacon+0xb4>)
 801e8a0:	f8c4 3924 	str.w	r3, [r4, #2340]	; 0x924
 801e8a4:	e7e9      	b.n	801e87a <MobleStackProcessIvFromBeacon+0x72>
 801e8a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e8aa:	f7ff bf81 	b.w	801e7b0 <MobleStackIvUpdateSwitchToNormal>
 801e8ae:	2302      	movs	r3, #2
 801e8b0:	e7dc      	b.n	801e86c <MobleStackProcessIvFromBeacon+0x64>
 801e8b2:	bf00      	nop
 801e8b4:	20001410 	.word	0x20001410
 801e8b8:	0a4cb800 	.word	0x0a4cb800
 801e8bc:	0a4cb801 	.word	0x0a4cb801

0801e8c0 <MobleStackProcessIvUpdate>:
 801e8c0:	b510      	push	{r4, lr}
 801e8c2:	f7e9 fadb 	bl	8007e7c <HAL_GetTick>
 801e8c6:	4b19      	ldr	r3, [pc, #100]	; (801e92c <MobleStackProcessIvUpdate+0x6c>)
 801e8c8:	f8d3 2928 	ldr.w	r2, [r3, #2344]	; 0x928
 801e8cc:	f241 3187 	movw	r1, #4999	; 0x1387
 801e8d0:	1a84      	subs	r4, r0, r2
 801e8d2:	428c      	cmp	r4, r1
 801e8d4:	d925      	bls.n	801e922 <MobleStackProcessIvUpdate+0x62>
 801e8d6:	f8d3 1924 	ldr.w	r1, [r3, #2340]	; 0x924
 801e8da:	f8c3 0928 	str.w	r0, [r3, #2344]	; 0x928
 801e8de:	42a1      	cmp	r1, r4
 801e8e0:	d916      	bls.n	801e910 <MobleStackProcessIvUpdate+0x50>
 801e8e2:	4411      	add	r1, r2
 801e8e4:	1a09      	subs	r1, r1, r0
 801e8e6:	f8c3 1924 	str.w	r1, [r3, #2340]	; 0x924
 801e8ea:	f893 265c 	ldrb.w	r2, [r3, #1628]	; 0x65c
 801e8ee:	f8d3 17dc 	ldr.w	r1, [r3, #2012]	; 0x7dc
 801e8f2:	2a01      	cmp	r2, #1
 801e8f4:	d112      	bne.n	801e91c <MobleStackProcessIvUpdate+0x5c>
 801e8f6:	f8d3 0924 	ldr.w	r0, [r3, #2340]	; 0x924
 801e8fa:	490d      	ldr	r1, [pc, #52]	; (801e930 <MobleStackProcessIvUpdate+0x70>)
 801e8fc:	4288      	cmp	r0, r1
 801e8fe:	d210      	bcs.n	801e922 <MobleStackProcessIvUpdate+0x62>
 801e900:	f8d3 3688 	ldr.w	r3, [r3, #1672]	; 0x688
 801e904:	b96b      	cbnz	r3, 801e922 <MobleStackProcessIvUpdate+0x62>
 801e906:	b96a      	cbnz	r2, 801e924 <MobleStackProcessIvUpdate+0x64>
 801e908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e90c:	f7ff bf30 	b.w	801e770 <MobleStackIvUpdateSwitchToProgress>
 801e910:	2900      	cmp	r1, #0
 801e912:	d0ea      	beq.n	801e8ea <MobleStackProcessIvUpdate+0x2a>
 801e914:	2200      	movs	r2, #0
 801e916:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
 801e91a:	e7e6      	b.n	801e8ea <MobleStackProcessIvUpdate+0x2a>
 801e91c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801e920:	d2e9      	bcs.n	801e8f6 <MobleStackProcessIvUpdate+0x36>
 801e922:	bd10      	pop	{r4, pc}
 801e924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e928:	f7ff bf42 	b.w	801e7b0 <MobleStackIvUpdateSwitchToNormal>
 801e92c:	20001410 	.word	0x20001410
 801e930:	0a4cb800 	.word	0x0a4cb800

0801e934 <BnrgmFrndMgmtUpdateKeys>:
 801e934:	b508      	push	{r3, lr}
 801e936:	4b0c      	ldr	r3, [pc, #48]	; (801e968 <BnrgmFrndMgmtUpdateKeys+0x34>)
 801e938:	460a      	mov	r2, r1
 801e93a:	f893 10be 	ldrb.w	r1, [r3, #190]	; 0xbe
 801e93e:	2901      	cmp	r1, #1
 801e940:	d105      	bne.n	801e94e <BnrgmFrndMgmtUpdateKeys+0x1a>
 801e942:	4b0a      	ldr	r3, [pc, #40]	; (801e96c <BnrgmFrndMgmtUpdateKeys+0x38>)
 801e944:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	; 0xa04
 801e948:	f7ff fe7e 	bl	801e648 <BnrgmFrndFnUpdateKeys>
 801e94c:	bd08      	pop	{r3, pc}
 801e94e:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 801e952:	2b02      	cmp	r3, #2
 801e954:	d005      	beq.n	801e962 <BnrgmFrndMgmtUpdateKeys+0x2e>
 801e956:	4b05      	ldr	r3, [pc, #20]	; (801e96c <BnrgmFrndMgmtUpdateKeys+0x38>)
 801e958:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	; 0xa04
 801e95c:	f7f4 fe2d 	bl	80135ba <BnrgmFrndLpnUpdateKeys>
 801e960:	e7f4      	b.n	801e94c <BnrgmFrndMgmtUpdateKeys+0x18>
 801e962:	2001      	movs	r0, #1
 801e964:	e7f2      	b.n	801e94c <BnrgmFrndMgmtUpdateKeys+0x18>
 801e966:	bf00      	nop
 801e968:	20000318 	.word	0x20000318
 801e96c:	20002508 	.word	0x20002508

0801e970 <BnrgmFrndMgmtSwitchKeys>:
 801e970:	b508      	push	{r3, lr}
 801e972:	4b0c      	ldr	r3, [pc, #48]	; (801e9a4 <BnrgmFrndMgmtSwitchKeys+0x34>)
 801e974:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 801e978:	2a01      	cmp	r2, #1
 801e97a:	4601      	mov	r1, r0
 801e97c:	d105      	bne.n	801e98a <BnrgmFrndMgmtSwitchKeys+0x1a>
 801e97e:	4b0a      	ldr	r3, [pc, #40]	; (801e9a8 <BnrgmFrndMgmtSwitchKeys+0x38>)
 801e980:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
 801e984:	f7ff fe84 	bl	801e690 <BnrgmFrndFnSwitchKeys>
 801e988:	bd08      	pop	{r3, pc}
 801e98a:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 801e98e:	2b02      	cmp	r3, #2
 801e990:	d005      	beq.n	801e99e <BnrgmFrndMgmtSwitchKeys+0x2e>
 801e992:	4b05      	ldr	r3, [pc, #20]	; (801e9a8 <BnrgmFrndMgmtSwitchKeys+0x38>)
 801e994:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
 801e998:	f7f4 fdf9 	bl	801358e <BnrgmFrndLpnSwitchKeys>
 801e99c:	e7f4      	b.n	801e988 <BnrgmFrndMgmtSwitchKeys+0x18>
 801e99e:	2001      	movs	r0, #1
 801e9a0:	e7f2      	b.n	801e988 <BnrgmFrndMgmtSwitchKeys+0x18>
 801e9a2:	bf00      	nop
 801e9a4:	20000318 	.word	0x20000318
 801e9a8:	20002508 	.word	0x20002508

0801e9ac <MobleProvisionCheckFCS>:
 801e9ac:	b530      	push	{r4, r5, lr}
 801e9ae:	b1a0      	cbz	r0, 801e9da <MobleProvisionCheckFCS+0x2e>
 801e9b0:	4c0b      	ldr	r4, [pc, #44]	; (801e9e0 <MobleProvisionCheckFCS+0x34>)
 801e9b2:	440a      	add	r2, r1
 801e9b4:	23ff      	movs	r3, #255	; 0xff
 801e9b6:	4291      	cmp	r1, r2
 801e9b8:	d108      	bne.n	801e9cc <MobleProvisionCheckFCS+0x20>
 801e9ba:	4058      	eors	r0, r3
 801e9bc:	4420      	add	r0, r4
 801e9be:	f890 0403 	ldrb.w	r0, [r0, #1027]	; 0x403
 801e9c2:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
 801e9c6:	4258      	negs	r0, r3
 801e9c8:	4158      	adcs	r0, r3
 801e9ca:	bd30      	pop	{r4, r5, pc}
 801e9cc:	f811 5b01 	ldrb.w	r5, [r1], #1
 801e9d0:	406b      	eors	r3, r5
 801e9d2:	4423      	add	r3, r4
 801e9d4:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 801e9d8:	e7ed      	b.n	801e9b6 <MobleProvisionCheckFCS+0xa>
 801e9da:	2001      	movs	r0, #1
 801e9dc:	e7f5      	b.n	801e9ca <MobleProvisionCheckFCS+0x1e>
 801e9de:	bf00      	nop
 801e9e0:	08031464 	.word	0x08031464

0801e9e4 <MobleSARJoin>:
 801e9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9e8:	9f06      	ldr	r7, [sp, #24]
 801e9ea:	461e      	mov	r6, r3
 801e9ec:	4604      	mov	r4, r0
 801e9ee:	2800      	cmp	r0, #0
 801e9f0:	d069      	beq.n	801eac6 <MobleSARJoin+0xe2>
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	d067      	beq.n	801eac6 <MobleSARJoin+0xe2>
 801e9f6:	2f00      	cmp	r7, #0
 801e9f8:	d065      	beq.n	801eac6 <MobleSARJoin+0xe2>
 801e9fa:	780b      	ldrb	r3, [r1, #0]
 801e9fc:	f013 0003 	ands.w	r0, r3, #3
 801ea00:	d139      	bne.n	801ea76 <MobleSARJoin+0x92>
 801ea02:	2a04      	cmp	r2, #4
 801ea04:	dc02      	bgt.n	801ea0c <MobleSARJoin+0x28>
 801ea06:	2002      	movs	r0, #2
 801ea08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea0c:	788b      	ldrb	r3, [r1, #2]
 801ea0e:	8123      	strh	r3, [r4, #8]
 801ea10:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 801ea14:	ba5b      	rev16	r3, r3
 801ea16:	b298      	uxth	r0, r3
 801ea18:	2880      	cmp	r0, #128	; 0x80
 801ea1a:	8123      	strh	r3, [r4, #8]
 801ea1c:	d8f3      	bhi.n	801ea06 <MobleSARJoin+0x22>
 801ea1e:	78cb      	ldrb	r3, [r1, #3]
 801ea20:	71a3      	strb	r3, [r4, #6]
 801ea22:	f811 3b04 	ldrb.w	r3, [r1], #4
 801ea26:	80a2      	strh	r2, [r4, #4]
 801ea28:	089b      	lsrs	r3, r3, #2
 801ea2a:	3301      	adds	r3, #1
 801ea2c:	7023      	strb	r3, [r4, #0]
 801ea2e:	2301      	movs	r3, #1
 801ea30:	8063      	strh	r3, [r4, #2]
 801ea32:	3a04      	subs	r2, #4
 801ea34:	f104 000a 	add.w	r0, r4, #10
 801ea38:	f00a f8a8 	bl	8028b8c <memmove>
 801ea3c:	7821      	ldrb	r1, [r4, #0]
 801ea3e:	8862      	ldrh	r2, [r4, #2]
 801ea40:	2301      	movs	r3, #1
 801ea42:	408b      	lsls	r3, r1
 801ea44:	3b01      	subs	r3, #1
 801ea46:	429a      	cmp	r2, r3
 801ea48:	d11b      	bne.n	801ea82 <MobleSARJoin+0x9e>
 801ea4a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801ea4e:	79a0      	ldrb	r0, [r4, #6]
 801ea50:	2b01      	cmp	r3, #1
 801ea52:	d135      	bne.n	801eac0 <MobleSARJoin+0xdc>
 801ea54:	7a22      	ldrb	r2, [r4, #8]
 801ea56:	f104 010a 	add.w	r1, r4, #10
 801ea5a:	f7ff ffa7 	bl	801e9ac <MobleProvisionCheckFCS>
 801ea5e:	2800      	cmp	r0, #0
 801ea60:	d0d1      	beq.n	801ea06 <MobleSARJoin+0x22>
 801ea62:	8922      	ldrh	r2, [r4, #8]
 801ea64:	f104 010a 	add.w	r1, r4, #10
 801ea68:	4630      	mov	r0, r6
 801ea6a:	f00a f88f 	bl	8028b8c <memmove>
 801ea6e:	8923      	ldrh	r3, [r4, #8]
 801ea70:	603b      	str	r3, [r7, #0]
 801ea72:	2000      	movs	r0, #0
 801ea74:	e7c8      	b.n	801ea08 <MobleSARJoin+0x24>
 801ea76:	2802      	cmp	r0, #2
 801ea78:	d1c5      	bne.n	801ea06 <MobleSARJoin+0x22>
 801ea7a:	2a01      	cmp	r2, #1
 801ea7c:	ddc3      	ble.n	801ea06 <MobleSARJoin+0x22>
 801ea7e:	88a5      	ldrh	r5, [r4, #4]
 801ea80:	b90d      	cbnz	r5, 801ea86 <MobleSARJoin+0xa2>
 801ea82:	2001      	movs	r0, #1
 801ea84:	e7c0      	b.n	801ea08 <MobleSARJoin+0x24>
 801ea86:	7820      	ldrb	r0, [r4, #0]
 801ea88:	ebb0 0f93 	cmp.w	r0, r3, lsr #2
 801ea8c:	ea4f 0893 	mov.w	r8, r3, lsr #2
 801ea90:	d3b9      	bcc.n	801ea06 <MobleSARJoin+0x22>
 801ea92:	f1b8 0f00 	cmp.w	r8, #0
 801ea96:	d0b6      	beq.n	801ea06 <MobleSARJoin+0x22>
 801ea98:	1e6b      	subs	r3, r5, #1
 801ea9a:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 801ea9e:	3d04      	subs	r5, #4
 801eaa0:	fb0c 5503 	mla	r5, ip, r3, r5
 801eaa4:	f104 000a 	add.w	r0, r4, #10
 801eaa8:	3a01      	subs	r2, #1
 801eaaa:	3101      	adds	r1, #1
 801eaac:	4428      	add	r0, r5
 801eaae:	f00a f86d 	bl	8028b8c <memmove>
 801eab2:	8862      	ldrh	r2, [r4, #2]
 801eab4:	2301      	movs	r3, #1
 801eab6:	fa03 f308 	lsl.w	r3, r3, r8
 801eaba:	4313      	orrs	r3, r2
 801eabc:	8063      	strh	r3, [r4, #2]
 801eabe:	e7bd      	b.n	801ea3c <MobleSARJoin+0x58>
 801eac0:	2800      	cmp	r0, #0
 801eac2:	d0ce      	beq.n	801ea62 <MobleSARJoin+0x7e>
 801eac4:	e79f      	b.n	801ea06 <MobleSARJoin+0x22>
 801eac6:	2003      	movs	r0, #3
 801eac8:	e79e      	b.n	801ea08 <MobleSARJoin+0x24>
	...

0801eacc <MobleProvisionCalculateFCS>:
 801eacc:	b510      	push	{r4, lr}
 801eace:	4a07      	ldr	r2, [pc, #28]	; (801eaec <MobleProvisionCalculateFCS+0x20>)
 801ead0:	4401      	add	r1, r0
 801ead2:	23ff      	movs	r3, #255	; 0xff
 801ead4:	4288      	cmp	r0, r1
 801ead6:	d102      	bne.n	801eade <MobleProvisionCalculateFCS+0x12>
 801ead8:	43d8      	mvns	r0, r3
 801eada:	b2c0      	uxtb	r0, r0
 801eadc:	bd10      	pop	{r4, pc}
 801eade:	f810 4b01 	ldrb.w	r4, [r0], #1
 801eae2:	4063      	eors	r3, r4
 801eae4:	4413      	add	r3, r2
 801eae6:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 801eaea:	e7f3      	b.n	801ead4 <MobleProvisionCalculateFCS+0x8>
 801eaec:	08031464 	.word	0x08031464

0801eaf0 <MobleSARSplit>:
 801eaf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaf4:	297f      	cmp	r1, #127	; 0x7f
 801eaf6:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
 801eafa:	4680      	mov	r8, r0
 801eafc:	460e      	mov	r6, r1
 801eafe:	4617      	mov	r7, r2
 801eb00:	461c      	mov	r4, r3
 801eb02:	dd03      	ble.n	801eb0c <MobleSARSplit+0x1c>
 801eb04:	2003      	movs	r0, #3
 801eb06:	b003      	add	sp, #12
 801eb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb0c:	2900      	cmp	r1, #0
 801eb0e:	d0f9      	beq.n	801eb04 <MobleSARSplit+0x14>
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	d0f7      	beq.n	801eb04 <MobleSARSplit+0x14>
 801eb14:	fa1f fa82 	uxth.w	sl, r2
 801eb18:	1d35      	adds	r5, r6, #4
 801eb1a:	f8a3 a004 	strh.w	sl, [r3, #4]
 801eb1e:	42aa      	cmp	r2, r5
 801eb20:	f04f 0300 	mov.w	r3, #0
 801eb24:	f3c1 2e07 	ubfx	lr, r1, #8, #8
 801eb28:	8123      	strh	r3, [r4, #8]
 801eb2a:	b2c9      	uxtb	r1, r1
 801eb2c:	db19      	blt.n	801eb62 <MobleSARSplit+0x72>
 801eb2e:	2201      	movs	r2, #1
 801eb30:	4594      	cmp	ip, r2
 801eb32:	7022      	strb	r2, [r4, #0]
 801eb34:	72a3      	strb	r3, [r4, #10]
 801eb36:	f884 e00b 	strb.w	lr, [r4, #11]
 801eb3a:	7321      	strb	r1, [r4, #12]
 801eb3c:	d10f      	bne.n	801eb5e <MobleSARSplit+0x6e>
 801eb3e:	f7ff ffc5 	bl	801eacc <MobleProvisionCalculateFCS>
 801eb42:	2e7c      	cmp	r6, #124	; 0x7c
 801eb44:	7360      	strb	r0, [r4, #13]
 801eb46:	dcdd      	bgt.n	801eb04 <MobleSARSplit+0x14>
 801eb48:	4632      	mov	r2, r6
 801eb4a:	4641      	mov	r1, r8
 801eb4c:	f104 000e 	add.w	r0, r4, #14
 801eb50:	f00a f81c 	bl	8028b8c <memmove>
 801eb54:	2301      	movs	r3, #1
 801eb56:	8125      	strh	r5, [r4, #8]
 801eb58:	8063      	strh	r3, [r4, #2]
 801eb5a:	2000      	movs	r0, #0
 801eb5c:	e7d3      	b.n	801eb06 <MobleSARSplit+0x16>
 801eb5e:	4618      	mov	r0, r3
 801eb60:	e7ef      	b.n	801eb42 <MobleSARSplit+0x52>
 801eb62:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
 801eb66:	1cb2      	adds	r2, r6, #2
 801eb68:	fb92 f2f9 	sdiv	r2, r2, r9
 801eb6c:	b2d2      	uxtb	r2, r2
 801eb6e:	1c55      	adds	r5, r2, #1
 801eb70:	f1bc 0f01 	cmp.w	ip, #1
 801eb74:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801eb78:	7025      	strb	r5, [r4, #0]
 801eb7a:	72a2      	strb	r2, [r4, #10]
 801eb7c:	f884 e00b 	strb.w	lr, [r4, #11]
 801eb80:	7321      	strb	r1, [r4, #12]
 801eb82:	d140      	bne.n	801ec06 <MobleSARSplit+0x116>
 801eb84:	f7ff ffa2 	bl	801eacc <MobleProvisionCalculateFCS>
 801eb88:	2f80      	cmp	r7, #128	; 0x80
 801eb8a:	7360      	strb	r0, [r4, #13]
 801eb8c:	dcba      	bgt.n	801eb04 <MobleSARSplit+0x14>
 801eb8e:	f1a7 0b04 	sub.w	fp, r7, #4
 801eb92:	465a      	mov	r2, fp
 801eb94:	4641      	mov	r1, r8
 801eb96:	f104 000e 	add.w	r0, r4, #14
 801eb9a:	f009 fff7 	bl	8028b8c <memmove>
 801eb9e:	2501      	movs	r5, #1
 801eba0:	f104 030a 	add.w	r3, r4, #10
 801eba4:	f8a4 a008 	strh.w	sl, [r4, #8]
 801eba8:	8065      	strh	r5, [r4, #2]
 801ebaa:	9301      	str	r3, [sp, #4]
 801ebac:	7821      	ldrb	r1, [r4, #0]
 801ebae:	428d      	cmp	r5, r1
 801ebb0:	d2d3      	bcs.n	801eb5a <MobleSARSplit+0x6a>
 801ebb2:	fb05 f007 	mul.w	r0, r5, r7
 801ebb6:	eb04 0c00 	add.w	ip, r4, r0
 801ebba:	00aa      	lsls	r2, r5, #2
 801ebbc:	f042 0202 	orr.w	r2, r2, #2
 801ebc0:	f88c 200a 	strb.w	r2, [ip, #10]
 801ebc4:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 801ebc8:	2301      	movs	r3, #1
 801ebca:	fa03 f205 	lsl.w	r2, r3, r5
 801ebce:	3901      	subs	r1, #1
 801ebd0:	ea42 020c 	orr.w	r2, r2, ip
 801ebd4:	428d      	cmp	r5, r1
 801ebd6:	8062      	strh	r2, [r4, #2]
 801ebd8:	d117      	bne.n	801ec0a <MobleSARSplit+0x11a>
 801ebda:	eba6 020b 	sub.w	r2, r6, fp
 801ebde:	18d1      	adds	r1, r2, r3
 801ebe0:	4401      	add	r1, r0
 801ebe2:	2980      	cmp	r1, #128	; 0x80
 801ebe4:	d88e      	bhi.n	801eb04 <MobleSARSplit+0x14>
 801ebe6:	4418      	add	r0, r3
 801ebe8:	9b01      	ldr	r3, [sp, #4]
 801ebea:	eb08 010b 	add.w	r1, r8, fp
 801ebee:	4418      	add	r0, r3
 801ebf0:	f009 ffcc 	bl	8028b8c <memmove>
 801ebf4:	8922      	ldrh	r2, [r4, #8]
 801ebf6:	3201      	adds	r2, #1
 801ebf8:	4432      	add	r2, r6
 801ebfa:	eba2 020b 	sub.w	r2, r2, fp
 801ebfe:	3501      	adds	r5, #1
 801ec00:	8122      	strh	r2, [r4, #8]
 801ec02:	b2ed      	uxtb	r5, r5
 801ec04:	e7d2      	b.n	801ebac <MobleSARSplit+0xbc>
 801ec06:	4618      	mov	r0, r3
 801ec08:	e7be      	b.n	801eb88 <MobleSARSplit+0x98>
 801ec0a:	3001      	adds	r0, #1
 801ec0c:	eb00 0209 	add.w	r2, r0, r9
 801ec10:	2a80      	cmp	r2, #128	; 0x80
 801ec12:	f73f af77 	bgt.w	801eb04 <MobleSARSplit+0x14>
 801ec16:	9b01      	ldr	r3, [sp, #4]
 801ec18:	464a      	mov	r2, r9
 801ec1a:	eb08 010b 	add.w	r1, r8, fp
 801ec1e:	4418      	add	r0, r3
 801ec20:	f009 ffb4 	bl	8028b8c <memmove>
 801ec24:	8922      	ldrh	r2, [r4, #8]
 801ec26:	44cb      	add	fp, r9
 801ec28:	4452      	add	r2, sl
 801ec2a:	e7e8      	b.n	801ebfe <MobleSARSplit+0x10e>

0801ec2c <MobleProvisionUpdateRole>:
 801ec2c:	6803      	ldr	r3, [r0, #0]
 801ec2e:	781b      	ldrb	r3, [r3, #0]
 801ec30:	2b01      	cmp	r3, #1
 801ec32:	d106      	bne.n	801ec42 <MobleProvisionUpdateRole+0x16>
 801ec34:	f890 31f8 	ldrb.w	r3, [r0, #504]	; 0x1f8
 801ec38:	b113      	cbz	r3, 801ec40 <MobleProvisionUpdateRole+0x14>
 801ec3a:	2302      	movs	r3, #2
 801ec3c:	f880 31f8 	strb.w	r3, [r0, #504]	; 0x1f8
 801ec40:	4770      	bx	lr
 801ec42:	2301      	movs	r3, #1
 801ec44:	e7fa      	b.n	801ec3c <MobleProvisionUpdateRole+0x10>
	...

0801ec48 <MobleProvisionProvisionerInit>:
 801ec48:	b510      	push	{r4, lr}
 801ec4a:	b928      	cbnz	r0, 801ec58 <MobleProvisionProvisionerInit+0x10>
 801ec4c:	4b10      	ldr	r3, [pc, #64]	; (801ec90 <MobleProvisionProvisionerInit+0x48>)
 801ec4e:	4a11      	ldr	r2, [pc, #68]	; (801ec94 <MobleProvisionProvisionerInit+0x4c>)
 801ec50:	4811      	ldr	r0, [pc, #68]	; (801ec98 <MobleProvisionProvisionerInit+0x50>)
 801ec52:	212e      	movs	r1, #46	; 0x2e
 801ec54:	f009 ff22 	bl	8028a9c <__assert_func>
 801ec58:	f890 41f8 	ldrb.w	r4, [r0, #504]	; 0x1f8
 801ec5c:	2c01      	cmp	r4, #1
 801ec5e:	d014      	beq.n	801ec8a <MobleProvisionProvisionerInit+0x42>
 801ec60:	e9c0 23a0 	strd	r2, r3, [r0, #640]	; 0x280
 801ec64:	9b02      	ldr	r3, [sp, #8]
 801ec66:	f8c0 3288 	str.w	r3, [r0, #648]	; 0x288
 801ec6a:	9b03      	ldr	r3, [sp, #12]
 801ec6c:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
 801ec70:	9b04      	ldr	r3, [sp, #16]
 801ec72:	f8c0 3290 	str.w	r3, [r0, #656]	; 0x290
 801ec76:	2400      	movs	r4, #0
 801ec78:	2301      	movs	r3, #1
 801ec7a:	f880 41f8 	strb.w	r4, [r0, #504]	; 0x1f8
 801ec7e:	f880 1294 	strb.w	r1, [r0, #660]	; 0x294
 801ec82:	f8a0 3296 	strh.w	r3, [r0, #662]	; 0x296
 801ec86:	4620      	mov	r0, r4
 801ec88:	bd10      	pop	{r4, pc}
 801ec8a:	2002      	movs	r0, #2
 801ec8c:	e7fc      	b.n	801ec88 <MobleProvisionProvisionerInit+0x40>
 801ec8e:	bf00      	nop
 801ec90:	08033aa1 	.word	0x08033aa1
 801ec94:	08031967 	.word	0x08031967
 801ec98:	08033ab1 	.word	0x08033ab1

0801ec9c <MobleLibraryInitProvisioner>:
 801ec9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ec9e:	9c07      	ldr	r4, [sp, #28]
 801eca0:	9402      	str	r4, [sp, #8]
 801eca2:	9c06      	ldr	r4, [sp, #24]
 801eca4:	e9cd 3400 	strd	r3, r4, [sp]
 801eca8:	4613      	mov	r3, r2
 801ecaa:	460a      	mov	r2, r1
 801ecac:	4601      	mov	r1, r0
 801ecae:	4803      	ldr	r0, [pc, #12]	; (801ecbc <MobleLibraryInitProvisioner+0x20>)
 801ecb0:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	; 0x6f0
 801ecb4:	f7ff ffc8 	bl	801ec48 <MobleProvisionProvisionerInit>
 801ecb8:	b004      	add	sp, #16
 801ecba:	bd10      	pop	{r4, pc}
 801ecbc:	20002508 	.word	0x20002508

0801ecc0 <BLEMesh_InitProvisionedNode>:
 801ecc0:	b507      	push	{r0, r1, r2, lr}
 801ecc2:	4b07      	ldr	r3, [pc, #28]	; (801ece0 <BLEMesh_InitProvisionedNode+0x20>)
 801ecc4:	4907      	ldr	r1, [pc, #28]	; (801ece4 <BLEMesh_InitProvisionedNode+0x24>)
 801ecc6:	681a      	ldr	r2, [r3, #0]
 801ecc8:	4b07      	ldr	r3, [pc, #28]	; (801ece8 <BLEMesh_InitProvisionedNode+0x28>)
 801ecca:	9301      	str	r3, [sp, #4]
 801eccc:	4b07      	ldr	r3, [pc, #28]	; (801ecec <BLEMesh_InitProvisionedNode+0x2c>)
 801ecce:	9300      	str	r3, [sp, #0]
 801ecd0:	6a13      	ldr	r3, [r2, #32]
 801ecd2:	6992      	ldr	r2, [r2, #24]
 801ecd4:	2005      	movs	r0, #5
 801ecd6:	f7ff ffe1 	bl	801ec9c <MobleLibraryInitProvisioner>
 801ecda:	b003      	add	sp, #12
 801ecdc:	f85d fb04 	ldr.w	pc, [sp], #4
 801ece0:	20000318 	.word	0x20000318
 801ece4:	08017869 	.word	0x08017869
 801ece8:	08017859 	.word	0x08017859
 801ecec:	08017875 	.word	0x08017875

0801ecf0 <MobleProvisionUnprovisionedInitEx>:
 801ecf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecf4:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 801ecf8:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801ecfc:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 801ed00:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801ed04:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
 801ed08:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 801ed0c:	e9dd ca0a 	ldrd	ip, sl, [sp, #40]	; 0x28
 801ed10:	4604      	mov	r4, r0
 801ed12:	b928      	cbnz	r0, 801ed20 <MobleProvisionUnprovisionedInitEx+0x30>
 801ed14:	4b30      	ldr	r3, [pc, #192]	; (801edd8 <MobleProvisionUnprovisionedInitEx+0xe8>)
 801ed16:	4a31      	ldr	r2, [pc, #196]	; (801eddc <MobleProvisionUnprovisionedInitEx+0xec>)
 801ed18:	4831      	ldr	r0, [pc, #196]	; (801ede0 <MobleProvisionUnprovisionedInitEx+0xf0>)
 801ed1a:	215f      	movs	r1, #95	; 0x5f
 801ed1c:	f009 febe 	bl	8028a9c <__assert_func>
 801ed20:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801ed24:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
 801ed28:	f880 31fe 	strb.w	r3, [r0, #510]	; 0x1fe
 801ed2c:	f880 2200 	strb.w	r2, [r0, #512]	; 0x200
 801ed30:	b1a3      	cbz	r3, 801ed5c <MobleProvisionUnprovisionedInitEx+0x6c>
 801ed32:	f1bc 0f00 	cmp.w	ip, #0
 801ed36:	d102      	bne.n	801ed3e <MobleProvisionUnprovisionedInitEx+0x4e>
 801ed38:	2003      	movs	r0, #3
 801ed3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed3e:	f1ba 0f00 	cmp.w	sl, #0
 801ed42:	d0f9      	beq.n	801ed38 <MobleProvisionUnprovisionedInitEx+0x48>
 801ed44:	2240      	movs	r2, #64	; 0x40
 801ed46:	4661      	mov	r1, ip
 801ed48:	f500 7002 	add.w	r0, r0, #520	; 0x208
 801ed4c:	f009 ff1e 	bl	8028b8c <memmove>
 801ed50:	2220      	movs	r2, #32
 801ed52:	4651      	mov	r1, sl
 801ed54:	f504 7012 	add.w	r0, r4, #584	; 0x248
 801ed58:	f009 ff18 	bl	8028b8c <memmove>
 801ed5c:	b35f      	cbz	r7, 801edb6 <MobleProvisionUnprovisionedInitEx+0xc6>
 801ed5e:	f1bb 0f00 	cmp.w	fp, #0
 801ed62:	d028      	beq.n	801edb6 <MobleProvisionUnprovisionedInitEx+0xc6>
 801ed64:	2f08      	cmp	r7, #8
 801ed66:	d8e7      	bhi.n	801ed38 <MobleProvisionUnprovisionedInitEx+0x48>
 801ed68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed6a:	f884 7206 	strb.w	r7, [r4, #518]	; 0x206
 801ed6e:	f8a4 b202 	strh.w	fp, [r4, #514]	; 0x202
 801ed72:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
 801ed76:	b325      	cbz	r5, 801edc2 <MobleProvisionUnprovisionedInitEx+0xd2>
 801ed78:	2d10      	cmp	r5, #16
 801ed7a:	d8dd      	bhi.n	801ed38 <MobleProvisionUnprovisionedInitEx+0x48>
 801ed7c:	f1b9 0f00 	cmp.w	r9, #0
 801ed80:	d0da      	beq.n	801ed38 <MobleProvisionUnprovisionedInitEx+0x48>
 801ed82:	2301      	movs	r3, #1
 801ed84:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
 801ed88:	f884 527e 	strb.w	r5, [r4, #638]	; 0x27e
 801ed8c:	462a      	mov	r2, r5
 801ed8e:	4649      	mov	r1, r9
 801ed90:	f204 207f 	addw	r0, r4, #639	; 0x27f
 801ed94:	f009 fefa 	bl	8028b8c <memmove>
 801ed98:	b1b6      	cbz	r6, 801edc8 <MobleProvisionUnprovisionedInitEx+0xd8>
 801ed9a:	f1b8 0f00 	cmp.w	r8, #0
 801ed9e:	d013      	beq.n	801edc8 <MobleProvisionUnprovisionedInitEx+0xd8>
 801eda0:	2e08      	cmp	r6, #8
 801eda2:	d8c9      	bhi.n	801ed38 <MobleProvisionUnprovisionedInitEx+0x48>
 801eda4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eda6:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
 801edaa:	f8a4 8204 	strh.w	r8, [r4, #516]	; 0x204
 801edae:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 801edb2:	2000      	movs	r0, #0
 801edb4:	e7c1      	b.n	801ed3a <MobleProvisionUnprovisionedInitEx+0x4a>
 801edb6:	2300      	movs	r3, #0
 801edb8:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 801edbc:	f8a4 3202 	strh.w	r3, [r4, #514]	; 0x202
 801edc0:	e7d7      	b.n	801ed72 <MobleProvisionUnprovisionedInitEx+0x82>
 801edc2:	f884 527e 	strb.w	r5, [r4, #638]	; 0x27e
 801edc6:	e7e7      	b.n	801ed98 <MobleProvisionUnprovisionedInitEx+0xa8>
 801edc8:	2000      	movs	r0, #0
 801edca:	f884 0207 	strb.w	r0, [r4, #519]	; 0x207
 801edce:	f8a4 0204 	strh.w	r0, [r4, #516]	; 0x204
 801edd2:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
 801edd6:	e7b0      	b.n	801ed3a <MobleProvisionUnprovisionedInitEx+0x4a>
 801edd8:	08033aa1 	.word	0x08033aa1
 801eddc:	08031985 	.word	0x08031985
 801ede0:	08033ab1 	.word	0x08033ab1

0801ede4 <MobleLibraryInitUnprovisioned>:
 801ede4:	b510      	push	{r4, lr}
 801ede6:	b08c      	sub	sp, #48	; 0x30
 801ede8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801edea:	940a      	str	r4, [sp, #40]	; 0x28
 801edec:	f89d 4058 	ldrb.w	r4, [sp, #88]	; 0x58
 801edf0:	9409      	str	r4, [sp, #36]	; 0x24
 801edf2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801edf4:	9408      	str	r4, [sp, #32]
 801edf6:	f8bd 4050 	ldrh.w	r4, [sp, #80]	; 0x50
 801edfa:	9407      	str	r4, [sp, #28]
 801edfc:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801ee00:	9406      	str	r4, [sp, #24]
 801ee02:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ee04:	9405      	str	r4, [sp, #20]
 801ee06:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 801ee0a:	9404      	str	r4, [sp, #16]
 801ee0c:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801ee10:	9403      	str	r4, [sp, #12]
 801ee12:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801ee16:	9402      	str	r4, [sp, #8]
 801ee18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ee1a:	e9cd 3400 	strd	r3, r4, [sp]
 801ee1e:	4613      	mov	r3, r2
 801ee20:	460a      	mov	r2, r1
 801ee22:	4601      	mov	r1, r0
 801ee24:	4803      	ldr	r0, [pc, #12]	; (801ee34 <MobleLibraryInitUnprovisioned+0x50>)
 801ee26:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	; 0x6f0
 801ee2a:	f7ff ff61 	bl	801ecf0 <MobleProvisionUnprovisionedInitEx>
 801ee2e:	b00c      	add	sp, #48	; 0x30
 801ee30:	bd10      	pop	{r4, pc}
 801ee32:	bf00      	nop
 801ee34:	20002508 	.word	0x20002508

0801ee38 <BLEMesh_InitUnprovisionedNode>:
 801ee38:	b500      	push	{lr}
 801ee3a:	4b10      	ldr	r3, [pc, #64]	; (801ee7c <BLEMesh_InitUnprovisionedNode+0x44>)
 801ee3c:	4810      	ldr	r0, [pc, #64]	; (801ee80 <BLEMesh_InitUnprovisionedNode+0x48>)
 801ee3e:	681b      	ldr	r3, [r3, #0]
 801ee40:	b08b      	sub	sp, #44	; 0x2c
 801ee42:	6919      	ldr	r1, [r3, #16]
 801ee44:	781a      	ldrb	r2, [r3, #0]
 801ee46:	9109      	str	r1, [sp, #36]	; 0x24
 801ee48:	7b59      	ldrb	r1, [r3, #13]
 801ee4a:	9108      	str	r1, [sp, #32]
 801ee4c:	6a19      	ldr	r1, [r3, #32]
 801ee4e:	9107      	str	r1, [sp, #28]
 801ee50:	7f59      	ldrb	r1, [r3, #29]
 801ee52:	9106      	str	r1, [sp, #24]
 801ee54:	7f19      	ldrb	r1, [r3, #28]
 801ee56:	9105      	str	r1, [sp, #20]
 801ee58:	6999      	ldr	r1, [r3, #24]
 801ee5a:	9104      	str	r1, [sp, #16]
 801ee5c:	7d59      	ldrb	r1, [r3, #21]
 801ee5e:	9103      	str	r1, [sp, #12]
 801ee60:	7d19      	ldrb	r1, [r3, #20]
 801ee62:	9102      	str	r1, [sp, #8]
 801ee64:	7b19      	ldrb	r1, [r3, #12]
 801ee66:	9101      	str	r1, [sp, #4]
 801ee68:	6899      	ldr	r1, [r3, #8]
 801ee6a:	9100      	str	r1, [sp, #0]
 801ee6c:	685b      	ldr	r3, [r3, #4]
 801ee6e:	2100      	movs	r1, #0
 801ee70:	f7ff ffb8 	bl	801ede4 <MobleLibraryInitUnprovisioned>
 801ee74:	b00b      	add	sp, #44	; 0x2c
 801ee76:	f85d fb04 	ldr.w	pc, [sp], #4
 801ee7a:	bf00      	nop
 801ee7c:	20000318 	.word	0x20000318
 801ee80:	08017881 	.word	0x08017881

0801ee84 <MobleConfigNetworkInvalidate>:
 801ee84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ee88:	4606      	mov	r6, r0
 801ee8a:	2800      	cmp	r0, #0
 801ee8c:	d048      	beq.n	801ef20 <MobleConfigNetworkInvalidate+0x9c>
 801ee8e:	4f25      	ldr	r7, [pc, #148]	; (801ef24 <MobleConfigNetworkInvalidate+0xa0>)
 801ee90:	f507 5580 	add.w	r5, r7, #4096	; 0x1000
 801ee94:	f895 479c 	ldrb.w	r4, [r5, #1948]	; 0x79c
 801ee98:	bbd4      	cbnz	r4, 801ef10 <MobleConfigNetworkInvalidate+0x8c>
 801ee9a:	2301      	movs	r3, #1
 801ee9c:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801eea0:	4621      	mov	r1, r4
 801eea2:	f205 507a 	addw	r0, r5, #1402	; 0x57a
 801eea6:	f885 379d 	strb.w	r3, [r5, #1949]	; 0x79d
 801eeaa:	f8a7 4962 	strh.w	r4, [r7, #2402]	; 0x962
 801eeae:	f009 fe87 	bl	8028bc0 <memset>
 801eeb2:	2284      	movs	r2, #132	; 0x84
 801eeb4:	4621      	mov	r1, r4
 801eeb6:	f205 60ee 	addw	r0, r5, #1774	; 0x6ee
 801eeba:	f009 fe81 	bl	8028bc0 <memset>
 801eebe:	2210      	movs	r2, #16
 801eec0:	4621      	mov	r1, r4
 801eec2:	f205 7074 	addw	r0, r5, #1908	; 0x774
 801eec6:	f009 fe7b 	bl	8028bc0 <memset>
 801eeca:	f505 69ae 	add.w	r9, r5, #1392	; 0x570
 801eece:	f8a5 4772 	strh.w	r4, [r5, #1906]	; 0x772
 801eed2:	f8a5 4784 	strh.w	r4, [r5, #1924]	; 0x784
 801eed6:	46a0      	mov	r8, r4
 801eed8:	f607 1768 	addw	r7, r7, #2408	; 0x968
 801eedc:	f809 8b01 	strb.w	r8, [r9], #1
 801eee0:	1938      	adds	r0, r7, r4
 801eee2:	f889 8004 	strb.w	r8, [r9, #4]
 801eee6:	f44f 721a 	mov.w	r2, #616	; 0x268
 801eeea:	2100      	movs	r1, #0
 801eeec:	f009 fe68 	bl	8028bc0 <memset>
 801eef0:	f504 741a 	add.w	r4, r4, #616	; 0x268
 801eef4:	f640 4308 	movw	r3, #3080	; 0xc08
 801eef8:	429c      	cmp	r4, r3
 801eefa:	d1ef      	bne.n	801eedc <MobleConfigNetworkInvalidate+0x58>
 801eefc:	f885 87a8 	strb.w	r8, [r5, #1960]	; 0x7a8
 801ef00:	f7fd fd0a 	bl	801c918 <MobleConfigNetworkEncode>
 801ef04:	f7fd fe3a 	bl	801cb7c <MobleConfigSavedSeqEncode>
 801ef08:	f7fd fbde 	bl	801c6c8 <MobleConfigSave>
 801ef0c:	f885 879d 	strb.w	r8, [r5, #1949]	; 0x79d
 801ef10:	f7ff ff92 	bl	801ee38 <BLEMesh_InitUnprovisionedNode>
 801ef14:	2300      	movs	r3, #0
 801ef16:	7033      	strb	r3, [r6, #0]
 801ef18:	8073      	strh	r3, [r6, #2]
 801ef1a:	4618      	mov	r0, r3
 801ef1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef20:	2003      	movs	r0, #3
 801ef22:	e7fb      	b.n	801ef1c <MobleConfigNetworkInvalidate+0x98>
 801ef24:	20001410 	.word	0x20001410

0801ef28 <MobleProvisionGetRole>:
 801ef28:	b508      	push	{r3, lr}
 801ef2a:	b928      	cbnz	r0, 801ef38 <MobleProvisionGetRole+0x10>
 801ef2c:	4b04      	ldr	r3, [pc, #16]	; (801ef40 <MobleProvisionGetRole+0x18>)
 801ef2e:	4a05      	ldr	r2, [pc, #20]	; (801ef44 <MobleProvisionGetRole+0x1c>)
 801ef30:	4805      	ldr	r0, [pc, #20]	; (801ef48 <MobleProvisionGetRole+0x20>)
 801ef32:	21b2      	movs	r1, #178	; 0xb2
 801ef34:	f009 fdb2 	bl	8028a9c <__assert_func>
 801ef38:	f890 01f8 	ldrb.w	r0, [r0, #504]	; 0x1f8
 801ef3c:	bd08      	pop	{r3, pc}
 801ef3e:	bf00      	nop
 801ef40:	08033aa9 	.word	0x08033aa9
 801ef44:	080319a7 	.word	0x080319a7
 801ef48:	08033ab1 	.word	0x08033ab1

0801ef4c <BLEMesh_IsUnprovisioned>:
 801ef4c:	b508      	push	{r3, lr}
 801ef4e:	4b04      	ldr	r3, [pc, #16]	; (801ef60 <BLEMesh_IsUnprovisioned+0x14>)
 801ef50:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 801ef54:	f7ff ffe8 	bl	801ef28 <MobleProvisionGetRole>
 801ef58:	1e43      	subs	r3, r0, #1
 801ef5a:	4258      	negs	r0, r3
 801ef5c:	4158      	adcs	r0, r3
 801ef5e:	bd08      	pop	{r3, pc}
 801ef60:	20002508 	.word	0x20002508

0801ef64 <MoblePalBluetoothReset>:
 801ef64:	b570      	push	{r4, r5, r6, lr}
 801ef66:	b088      	sub	sp, #32
 801ef68:	f7f6 fb4e 	bl	8015608 <hci_reset>
 801ef6c:	2515      	movs	r5, #21
 801ef6e:	4604      	mov	r4, r0
 801ef70:	b1bc      	cbz	r4, 801efa2 <MoblePalBluetoothReset+0x3e>
 801ef72:	3d01      	subs	r5, #1
 801ef74:	d103      	bne.n	801ef7e <MoblePalBluetoothReset+0x1a>
 801ef76:	462c      	mov	r4, r5
 801ef78:	4620      	mov	r0, r4
 801ef7a:	b008      	add	sp, #32
 801ef7c:	bd70      	pop	{r4, r5, r6, pc}
 801ef7e:	f7f6 fb43 	bl	8015608 <hci_reset>
 801ef82:	4604      	mov	r4, r0
 801ef84:	e7f4      	b.n	801ef70 <MoblePalBluetoothReset+0xc>
 801ef86:	2b01      	cmp	r3, #1
 801ef88:	d11a      	bne.n	801efc0 <MoblePalBluetoothReset+0x5c>
 801ef8a:	f505 7257 	add.w	r2, r5, #860	; 0x35c
 801ef8e:	2106      	movs	r1, #6
 801ef90:	202e      	movs	r0, #46	; 0x2e
 801ef92:	e011      	b.n	801efb8 <MoblePalBluetoothReset+0x54>
 801ef94:	4798      	blx	r3
 801ef96:	2801      	cmp	r0, #1
 801ef98:	d959      	bls.n	801f04e <MoblePalBluetoothReset+0xea>
 801ef9a:	e7ed      	b.n	801ef78 <MoblePalBluetoothReset+0x14>
 801ef9c:	4b31      	ldr	r3, [pc, #196]	; (801f064 <MoblePalBluetoothReset+0x100>)
 801ef9e:	7018      	strb	r0, [r3, #0]
 801efa0:	e7ea      	b.n	801ef78 <MoblePalBluetoothReset+0x14>
 801efa2:	4d31      	ldr	r5, [pc, #196]	; (801f068 <MoblePalBluetoothReset+0x104>)
 801efa4:	f7fc f828 	bl	801aff8 <MoblePalBluetoothFreeAllNotifications>
 801efa8:	f895 3363 	ldrb.w	r3, [r5, #867]	; 0x363
 801efac:	2b03      	cmp	r3, #3
 801efae:	d1ea      	bne.n	801ef86 <MoblePalBluetoothReset+0x22>
 801efb0:	f505 7257 	add.w	r2, r5, #860	; 0x35c
 801efb4:	2106      	movs	r1, #6
 801efb6:	4620      	mov	r0, r4
 801efb8:	f7f6 f961 	bl	801527e <aci_hal_write_config_data>
 801efbc:	2800      	cmp	r0, #0
 801efbe:	d1db      	bne.n	801ef78 <MoblePalBluetoothReset+0x14>
 801efc0:	4b2a      	ldr	r3, [pc, #168]	; (801f06c <MoblePalBluetoothReset+0x108>)
 801efc2:	685b      	ldr	r3, [r3, #4]
 801efc4:	685b      	ldr	r3, [r3, #4]
 801efc6:	4798      	blx	r3
 801efc8:	2800      	cmp	r0, #0
 801efca:	d1d5      	bne.n	801ef78 <MoblePalBluetoothReset+0x14>
 801efcc:	f7f5 fcd6 	bl	801497c <aci_gatt_init>
 801efd0:	4601      	mov	r1, r0
 801efd2:	2800      	cmp	r0, #0
 801efd4:	d1d0      	bne.n	801ef78 <MoblePalBluetoothReset+0x14>
 801efd6:	f10d 0312 	add.w	r3, sp, #18
 801efda:	9301      	str	r3, [sp, #4]
 801efdc:	f10d 0316 	add.w	r3, sp, #22
 801efe0:	9300      	str	r3, [sp, #0]
 801efe2:	f8ad 0012 	strh.w	r0, [sp, #18]
 801efe6:	f895 2364 	ldrb.w	r2, [r5, #868]	; 0x364
 801efea:	ab05      	add	r3, sp, #20
 801efec:	200b      	movs	r0, #11
 801efee:	f7f5 fab2 	bl	8014556 <aci_gap_init>
 801eff2:	4606      	mov	r6, r0
 801eff4:	2800      	cmp	r0, #0
 801eff6:	d1bf      	bne.n	801ef78 <MoblePalBluetoothReset+0x14>
 801eff8:	f895 3364 	ldrb.w	r3, [r5, #868]	; 0x364
 801effc:	b193      	cbz	r3, 801f024 <MoblePalBluetoothReset+0xc0>
 801effe:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
 801f002:	f895 2364 	ldrb.w	r2, [r5, #868]	; 0x364
 801f006:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f00a:	3302      	adds	r3, #2
 801f00c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f010:	2300      	movs	r3, #0
 801f012:	e9cd 2600 	strd	r2, r6, [sp]
 801f016:	4618      	mov	r0, r3
 801f018:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801f01c:	f7f6 f86c 	bl	80150f8 <aci_gatt_update_char_value_ext>
 801f020:	2893      	cmp	r0, #147	; 0x93
 801f022:	d0ec      	beq.n	801effe <MoblePalBluetoothReset+0x9a>
 801f024:	f895 3363 	ldrb.w	r3, [r5, #867]	; 0x363
 801f028:	2b01      	cmp	r3, #1
 801f02a:	d10c      	bne.n	801f046 <MoblePalBluetoothReset+0xe2>
 801f02c:	aa06      	add	r2, sp, #24
 801f02e:	f10d 011f 	add.w	r1, sp, #31
 801f032:	202e      	movs	r0, #46	; 0x2e
 801f034:	f7f6 f9a8 	bl	8015388 <aci_hal_read_config_data>
 801f038:	4b0d      	ldr	r3, [pc, #52]	; (801f070 <MoblePalBluetoothReset+0x10c>)
 801f03a:	9806      	ldr	r0, [sp, #24]
 801f03c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801f040:	f8c5 035c 	str.w	r0, [r5, #860]	; 0x35c
 801f044:	809a      	strh	r2, [r3, #4]
 801f046:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 801f04a:	2b00      	cmp	r3, #0
 801f04c:	d1a2      	bne.n	801ef94 <MoblePalBluetoothReset+0x30>
 801f04e:	2300      	movs	r3, #0
 801f050:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
 801f054:	f7ff ff7a 	bl	801ef4c <BLEMesh_IsUnprovisioned>
 801f058:	2801      	cmp	r0, #1
 801f05a:	4604      	mov	r4, r0
 801f05c:	d09e      	beq.n	801ef9c <MoblePalBluetoothReset+0x38>
 801f05e:	2401      	movs	r4, #1
 801f060:	e78a      	b.n	801ef78 <MoblePalBluetoothReset+0x14>
 801f062:	bf00      	nop
 801f064:	20004437 	.word	0x20004437
 801f068:	20001410 	.word	0x20001410
 801f06c:	20000318 	.word	0x20000318
 801f070:	2000176c 	.word	0x2000176c

0801f074 <MobleProvisionGenerateAuthValue>:
 801f074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f076:	4605      	mov	r5, r0
 801f078:	b928      	cbnz	r0, 801f086 <MobleProvisionGenerateAuthValue+0x12>
 801f07a:	4b1e      	ldr	r3, [pc, #120]	; (801f0f4 <MobleProvisionGenerateAuthValue+0x80>)
 801f07c:	4a1e      	ldr	r2, [pc, #120]	; (801f0f8 <MobleProvisionGenerateAuthValue+0x84>)
 801f07e:	481f      	ldr	r0, [pc, #124]	; (801f0fc <MobleProvisionGenerateAuthValue+0x88>)
 801f080:	21ba      	movs	r1, #186	; 0xba
 801f082:	f009 fd0b 	bl	8028a9c <__assert_func>
 801f086:	4b1e      	ldr	r3, [pc, #120]	; (801f100 <MobleProvisionGenerateAuthValue+0x8c>)
 801f088:	f8d3 46f0 	ldr.w	r4, [r3, #1776]	; 0x6f0
 801f08c:	2210      	movs	r2, #16
 801f08e:	2100      	movs	r1, #0
 801f090:	f009 fd96 	bl	8028bc0 <memset>
 801f094:	f894 31fb 	ldrb.w	r3, [r4, #507]	; 0x1fb
 801f098:	2b02      	cmp	r3, #2
 801f09a:	d008      	beq.n	801f0ae <MobleProvisionGenerateAuthValue+0x3a>
 801f09c:	2b03      	cmp	r3, #3
 801f09e:	d014      	beq.n	801f0ca <MobleProvisionGenerateAuthValue+0x56>
 801f0a0:	2b01      	cmp	r3, #1
 801f0a2:	d125      	bne.n	801f0f0 <MobleProvisionGenerateAuthValue+0x7c>
 801f0a4:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
 801f0a8:	f504 711a 	add.w	r1, r4, #616	; 0x268
 801f0ac:	e007      	b.n	801f0be <MobleProvisionGenerateAuthValue+0x4a>
 801f0ae:	f894 31fc 	ldrb.w	r3, [r4, #508]	; 0x1fc
 801f0b2:	f504 711a 	add.w	r1, r4, #616	; 0x268
 801f0b6:	2b04      	cmp	r3, #4
 801f0b8:	d10d      	bne.n	801f0d6 <MobleProvisionGenerateAuthValue+0x62>
 801f0ba:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
 801f0be:	4628      	mov	r0, r5
 801f0c0:	b003      	add	sp, #12
 801f0c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f0c6:	f009 bd61 	b.w	8028b8c <memmove>
 801f0ca:	f894 31fc 	ldrb.w	r3, [r4, #508]	; 0x1fc
 801f0ce:	f504 711a 	add.w	r1, r4, #616	; 0x268
 801f0d2:	2b03      	cmp	r3, #3
 801f0d4:	e7f0      	b.n	801f0b8 <MobleProvisionGenerateAuthValue+0x44>
 801f0d6:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 801f0da:	6849      	ldr	r1, [r1, #4]
 801f0dc:	466b      	mov	r3, sp
 801f0de:	c303      	stmia	r3!, {r0, r1}
 801f0e0:	2210      	movs	r2, #16
 801f0e2:	4601      	mov	r1, r0
 801f0e4:	4628      	mov	r0, r5
 801f0e6:	b003      	add	sp, #12
 801f0e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f0ec:	f7fc b882 	b.w	801b1f4 <MobleOutputStreamPutBigEndian>
 801f0f0:	b003      	add	sp, #12
 801f0f2:	bd30      	pop	{r4, r5, pc}
 801f0f4:	08033af9 	.word	0x08033af9
 801f0f8:	080319bd 	.word	0x080319bd
 801f0fc:	08033ab1 	.word	0x08033ab1
 801f100:	20002508 	.word	0x20002508

0801f104 <MobleProvisionBearerGatt_DeleteTimer>:
 801f104:	6802      	ldr	r2, [r0, #0]
 801f106:	b122      	cbz	r2, 801f112 <MobleProvisionBearerGatt_DeleteTimer+0xe>
 801f108:	2300      	movs	r3, #0
 801f10a:	7013      	strb	r3, [r2, #0]
 801f10c:	6003      	str	r3, [r0, #0]
 801f10e:	4618      	mov	r0, r3
 801f110:	4770      	bx	lr
 801f112:	2001      	movs	r0, #1
 801f114:	4770      	bx	lr
	...

0801f118 <MobleProvision_UnprovisionedNode_Init>:
 801f118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f11a:	4d2d      	ldr	r5, [pc, #180]	; (801f1d0 <MobleProvision_UnprovisionedNode_Init+0xb8>)
 801f11c:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	; 0x6f0
 801f120:	f7ff ff02 	bl	801ef28 <MobleProvisionGetRole>
 801f124:	2801      	cmp	r0, #1
 801f126:	4607      	mov	r7, r0
 801f128:	d150      	bne.n	801f1cc <MobleProvision_UnprovisionedNode_Init+0xb4>
 801f12a:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
 801f12e:	f7fb fea1 	bl	801ae74 <MobleMemAlloc>
 801f132:	4606      	mov	r6, r0
 801f134:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
 801f138:	b908      	cbnz	r0, 801f13e <MobleProvision_UnprovisionedNode_Init+0x26>
 801f13a:	2002      	movs	r0, #2
 801f13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f13e:	2400      	movs	r4, #0
 801f140:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
 801f144:	f7e8 fe9a 	bl	8007e7c <HAL_GetTick>
 801f148:	4b22      	ldr	r3, [pc, #136]	; (801f1d4 <MobleProvision_UnprovisionedNode_Init+0xbc>)
 801f14a:	f8c6 01a4 	str.w	r0, [r6, #420]	; 0x1a4
 801f14e:	f8d5 6a0c 	ldr.w	r6, [r5, #2572]	; 0xa0c
 801f152:	685b      	ldr	r3, [r3, #4]
 801f154:	f8c6 404a 	str.w	r4, [r6, #74]	; 0x4a
 801f158:	f8c6 4046 	str.w	r4, [r6, #70]	; 0x46
 801f15c:	f8c6 404d 	str.w	r4, [r6, #77]	; 0x4d
 801f160:	69db      	ldr	r3, [r3, #28]
 801f162:	4798      	blx	r3
 801f164:	f886 0046 	strb.w	r0, [r6, #70]	; 0x46
 801f168:	f8d5 0a0c 	ldr.w	r0, [r5, #2572]	; 0xa0c
 801f16c:	f890 2046 	ldrb.w	r2, [r0, #70]	; 0x46
 801f170:	2a05      	cmp	r2, #5
 801f172:	d8e2      	bhi.n	801f13a <MobleProvision_UnprovisionedNode_Init+0x22>
 801f174:	f8d5 16f0 	ldr.w	r1, [r5, #1776]	; 0x6f0
 801f178:	f880 4047 	strb.w	r4, [r0, #71]	; 0x47
 801f17c:	f880 7048 	strb.w	r7, [r0, #72]	; 0x48
 801f180:	f891 21fe 	ldrb.w	r2, [r1, #510]	; 0x1fe
 801f184:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 801f188:	f891 21ff 	ldrb.w	r2, [r1, #511]	; 0x1ff
 801f18c:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
 801f190:	f891 2206 	ldrb.w	r2, [r1, #518]	; 0x206
 801f194:	f880 204b 	strb.w	r2, [r0, #75]	; 0x4b
 801f198:	f8b1 1202 	ldrh.w	r1, [r1, #514]	; 0x202
 801f19c:	2202      	movs	r2, #2
 801f19e:	304c      	adds	r0, #76	; 0x4c
 801f1a0:	f7fc f828 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801f1a4:	f8d5 36f0 	ldr.w	r3, [r5, #1776]	; 0x6f0
 801f1a8:	f8d5 0a0c 	ldr.w	r0, [r5, #2572]	; 0xa0c
 801f1ac:	f893 2207 	ldrb.w	r2, [r3, #519]	; 0x207
 801f1b0:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
 801f1b4:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 801f1b8:	2202      	movs	r2, #2
 801f1ba:	304f      	adds	r0, #79	; 0x4f
 801f1bc:	f7fc f81a 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801f1c0:	f8d5 3a0c 	ldr.w	r3, [r5, #2572]	; 0xa0c
 801f1c4:	4620      	mov	r0, r4
 801f1c6:	f8a3 41a8 	strh.w	r4, [r3, #424]	; 0x1a8
 801f1ca:	e7b7      	b.n	801f13c <MobleProvision_UnprovisionedNode_Init+0x24>
 801f1cc:	2003      	movs	r0, #3
 801f1ce:	e7b5      	b.n	801f13c <MobleProvision_UnprovisionedNode_Init+0x24>
 801f1d0:	20002508 	.word	0x20002508
 801f1d4:	20000318 	.word	0x20000318

0801f1d8 <MobleProvision_UnprovisionedNode_GetNextOperation>:
 801f1d8:	4b0e      	ldr	r3, [pc, #56]	; (801f214 <MobleProvision_UnprovisionedNode_GetNextOperation+0x3c>)
 801f1da:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	; 0xa0c
 801f1de:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 801f1e2:	2807      	cmp	r0, #7
 801f1e4:	d805      	bhi.n	801f1f2 <MobleProvision_UnprovisionedNode_GetNextOperation+0x1a>
 801f1e6:	e8df f000 	tbb	[pc, r0]
 801f1ea:	0d06      	.short	0x0d06
 801f1ec:	06061306 	.word	0x06061306
 801f1f0:	1304      	.short	0x1304
 801f1f2:	2000      	movs	r0, #0
 801f1f4:	4770      	bx	lr
 801f1f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	bf14      	ite	ne
 801f1fe:	2002      	movne	r0, #2
 801f200:	2001      	moveq	r0, #1
 801f202:	4770      	bx	lr
 801f204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f208:	2b02      	cmp	r3, #2
 801f20a:	bf28      	it	cs
 801f20c:	2002      	movcs	r0, #2
 801f20e:	4770      	bx	lr
 801f210:	2002      	movs	r0, #2
 801f212:	4770      	bx	lr
 801f214:	20002508 	.word	0x20002508

0801f218 <BnrgmProvision_UnprovisionedGetState>:
 801f218:	4b04      	ldr	r3, [pc, #16]	; (801f22c <BnrgmProvision_UnprovisionedGetState+0x14>)
 801f21a:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	; 0xa0c
 801f21e:	b113      	cbz	r3, 801f226 <BnrgmProvision_UnprovisionedGetState+0xe>
 801f220:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 801f224:	4770      	bx	lr
 801f226:	2007      	movs	r0, #7
 801f228:	4770      	bx	lr
 801f22a:	bf00      	nop
 801f22c:	20002508 	.word	0x20002508

0801f230 <BnrgmTransmitFsm>:
 801f230:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f232:	4605      	mov	r5, r0
 801f234:	f7e8 fe22 	bl	8007e7c <HAL_GetTick>
 801f238:	4c90      	ldr	r4, [pc, #576]	; (801f47c <BnrgmTransmitFsm+0x24c>)
 801f23a:	4606      	mov	r6, r0
 801f23c:	f7f8 fea8 	bl	8017f90 <MoblePalBluetoothGetConnectionState>
 801f240:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
 801f244:	2b08      	cmp	r3, #8
 801f246:	d82e      	bhi.n	801f2a6 <BnrgmTransmitFsm+0x76>
 801f248:	e8df f013 	tbh	[pc, r3, lsl #1]
 801f24c:	00570009 	.word	0x00570009
 801f250:	007e0074 	.word	0x007e0074
 801f254:	00f900ba 	.word	0x00f900ba
 801f258:	002d0105 	.word	0x002d0105
 801f25c:	007c      	.short	0x007c
 801f25e:	bb7d      	cbnz	r5, 801f2c0 <BnrgmTransmitFsm+0x90>
 801f260:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
 801f264:	b30b      	cbz	r3, 801f2aa <BnrgmTransmitFsm+0x7a>
 801f266:	f7e8 fe09 	bl	8007e7c <HAL_GetTick>
 801f26a:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
 801f26e:	b933      	cbnz	r3, 801f27e <BnrgmTransmitFsm+0x4e>
 801f270:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801f274:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
 801f278:	1a80      	subs	r0, r0, r2
 801f27a:	4283      	cmp	r3, r0
 801f27c:	d815      	bhi.n	801f2aa <BnrgmTransmitFsm+0x7a>
 801f27e:	f7fb fb49 	bl	801a914 <BnrgmTransmitQueuePrepNextItem>
 801f282:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
 801f286:	4318      	orrs	r0, r3
 801f288:	b2c0      	uxtb	r0, r0
 801f28a:	b970      	cbnz	r0, 801f2aa <BnrgmTransmitFsm+0x7a>
 801f28c:	2301      	movs	r3, #1
 801f28e:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
 801f292:	4c7b      	ldr	r4, [pc, #492]	; (801f480 <BnrgmTransmitFsm+0x250>)
 801f294:	f894 3a10 	ldrb.w	r3, [r4, #2576]	; 0xa10
 801f298:	b92b      	cbnz	r3, 801f2a6 <BnrgmTransmitFsm+0x76>
 801f29a:	200f      	movs	r0, #15
 801f29c:	f7f6 f960 	bl	8015560 <aci_hal_set_radio_activity_mask>
 801f2a0:	2301      	movs	r3, #1
 801f2a2:	f884 3a10 	strb.w	r3, [r4, #2576]	; 0xa10
 801f2a6:	b002      	add	sp, #8
 801f2a8:	bd70      	pop	{r4, r5, r6, pc}
 801f2aa:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
 801f2ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801f2b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801f2b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f2ba:	d1ea      	bne.n	801f292 <BnrgmTransmitFsm+0x62>
 801f2bc:	2303      	movs	r3, #3
 801f2be:	e7e6      	b.n	801f28e <BnrgmTransmitFsm+0x5e>
 801f2c0:	2d05      	cmp	r5, #5
 801f2c2:	d110      	bne.n	801f2e6 <BnrgmTransmitFsm+0xb6>
 801f2c4:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 801f2c8:	f8b4 016c 	ldrh.w	r0, [r4, #364]	; 0x16c
 801f2cc:	f8a4 1186 	strh.w	r1, [r4, #390]	; 0x186
 801f2d0:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
 801f2d4:	f7fb fd5a 	bl	801ad8c <BnrgmTransmitStartScan>
 801f2d8:	f7e8 fdd0 	bl	8007e7c <HAL_GetTick>
 801f2dc:	f884 517a 	strb.w	r5, [r4, #378]	; 0x17a
 801f2e0:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
 801f2e4:	e7d5      	b.n	801f292 <BnrgmTransmitFsm+0x62>
 801f2e6:	2d01      	cmp	r5, #1
 801f2e8:	d1d3      	bne.n	801f292 <BnrgmTransmitFsm+0x62>
 801f2ea:	f7fb faa3 	bl	801a834 <BnrgmTransmitQueueInit>
 801f2ee:	2300      	movs	r3, #0
 801f2f0:	f8a4 3168 	strh.w	r3, [r4, #360]	; 0x168
 801f2f4:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
 801f2f8:	e7cb      	b.n	801f292 <BnrgmTransmitFsm+0x62>
 801f2fa:	b9a5      	cbnz	r5, 801f326 <BnrgmTransmitFsm+0xf6>
 801f2fc:	f7f9 f88a 	bl	8018414 <MoblePalBluetoothModeStopScan>
 801f300:	9501      	str	r5, [sp, #4]
 801f302:	9b01      	ldr	r3, [sp, #4]
 801f304:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 801f308:	d306      	bcc.n	801f318 <BnrgmTransmitFsm+0xe8>
 801f30a:	f7fb fd2d 	bl	801ad68 <BnrgmTransmitStartAdv>
 801f30e:	b9c8      	cbnz	r0, 801f344 <BnrgmTransmitFsm+0x114>
 801f310:	2302      	movs	r3, #2
 801f312:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
 801f316:	e7c6      	b.n	801f2a6 <BnrgmTransmitFsm+0x76>
 801f318:	9b01      	ldr	r3, [sp, #4]
 801f31a:	3301      	adds	r3, #1
 801f31c:	9301      	str	r3, [sp, #4]
 801f31e:	9b01      	ldr	r3, [sp, #4]
 801f320:	3301      	adds	r3, #1
 801f322:	9301      	str	r3, [sp, #4]
 801f324:	e7ed      	b.n	801f302 <BnrgmTransmitFsm+0xd2>
 801f326:	2d03      	cmp	r5, #3
 801f328:	d1bd      	bne.n	801f2a6 <BnrgmTransmitFsm+0x76>
 801f32a:	b002      	add	sp, #8
 801f32c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f330:	f7f9 b870 	b.w	8018414 <MoblePalBluetoothModeStopScan>
 801f334:	2d02      	cmp	r5, #2
 801f336:	d1b6      	bne.n	801f2a6 <BnrgmTransmitFsm+0x76>
 801f338:	f7f8 ffd8 	bl	80182ec <MoblePalBluetoothModeStopAdv>
 801f33c:	f8c4 6180 	str.w	r6, [r4, #384]	; 0x180
 801f340:	f7fb fb3a 	bl	801a9b8 <BnrgmTransmitQueueAlign>
 801f344:	2300      	movs	r3, #0
 801f346:	e7e4      	b.n	801f312 <BnrgmTransmitFsm+0xe2>
 801f348:	2d00      	cmp	r5, #0
 801f34a:	d1ac      	bne.n	801f2a6 <BnrgmTransmitFsm+0x76>
 801f34c:	2802      	cmp	r0, #2
 801f34e:	d124      	bne.n	801f39a <BnrgmTransmitFsm+0x16a>
 801f350:	f7ff ff62 	bl	801f218 <BnrgmProvision_UnprovisionedGetState>
 801f354:	2807      	cmp	r0, #7
 801f356:	4b4a      	ldr	r3, [pc, #296]	; (801f480 <BnrgmTransmitFsm+0x250>)
 801f358:	d109      	bne.n	801f36e <BnrgmTransmitFsm+0x13e>
 801f35a:	f893 2725 	ldrb.w	r2, [r3, #1829]	; 0x725
 801f35e:	2a02      	cmp	r2, #2
 801f360:	d005      	beq.n	801f36e <BnrgmTransmitFsm+0x13e>
 801f362:	f8d3 26f0 	ldr.w	r2, [r3, #1776]	; 0x6f0
 801f366:	f892 21f8 	ldrb.w	r2, [r2, #504]	; 0x1f8
 801f36a:	2a01      	cmp	r2, #1
 801f36c:	d00f      	beq.n	801f38e <BnrgmTransmitFsm+0x15e>
 801f36e:	f04f 1214 	mov.w	r2, #1310740	; 0x140014
 801f372:	f8c4 2184 	str.w	r2, [r4, #388]	; 0x184
 801f376:	2201      	movs	r2, #1
 801f378:	f883 2a11 	strb.w	r2, [r3, #2577]	; 0xa11
 801f37c:	f8b4 1186 	ldrh.w	r1, [r4, #390]	; 0x186
 801f380:	f8b4 0184 	ldrh.w	r0, [r4, #388]	; 0x184
 801f384:	f7fb fd02 	bl	801ad8c <BnrgmTransmitStartScan>
 801f388:	b9c0      	cbnz	r0, 801f3bc <BnrgmTransmitFsm+0x18c>
 801f38a:	2304      	movs	r3, #4
 801f38c:	e7c1      	b.n	801f312 <BnrgmTransmitFsm+0xe2>
 801f38e:	4a3d      	ldr	r2, [pc, #244]	; (801f484 <BnrgmTransmitFsm+0x254>)
 801f390:	f8c4 2184 	str.w	r2, [r4, #388]	; 0x184
 801f394:	f883 5a11 	strb.w	r5, [r3, #2577]	; 0xa11
 801f398:	e7f0      	b.n	801f37c <BnrgmTransmitFsm+0x14c>
 801f39a:	b948      	cbnz	r0, 801f3b0 <BnrgmTransmitFsm+0x180>
 801f39c:	4b3a      	ldr	r3, [pc, #232]	; (801f488 <BnrgmTransmitFsm+0x258>)
 801f39e:	f8d3 2350 	ldr.w	r2, [r3, #848]	; 0x350
 801f3a2:	f24a 0327 	movw	r3, #40999	; 0xa027
 801f3a6:	429a      	cmp	r2, r3
 801f3a8:	d904      	bls.n	801f3b4 <BnrgmTransmitFsm+0x184>
 801f3aa:	f04f 1314 	mov.w	r3, #1310740	; 0x140014
 801f3ae:	e002      	b.n	801f3b6 <BnrgmTransmitFsm+0x186>
 801f3b0:	2801      	cmp	r0, #1
 801f3b2:	d0fa      	beq.n	801f3aa <BnrgmTransmitFsm+0x17a>
 801f3b4:	2300      	movs	r3, #0
 801f3b6:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
 801f3ba:	e7df      	b.n	801f37c <BnrgmTransmitFsm+0x14c>
 801f3bc:	2308      	movs	r3, #8
 801f3be:	e7a8      	b.n	801f312 <BnrgmTransmitFsm+0xe2>
 801f3c0:	b9dd      	cbnz	r5, 801f3fa <BnrgmTransmitFsm+0x1ca>
 801f3c2:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	f43f af6d 	beq.w	801f2a6 <BnrgmTransmitFsm+0x76>
 801f3cc:	f7e8 fd56 	bl	8007e7c <HAL_GetTick>
 801f3d0:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
 801f3d4:	b93b      	cbnz	r3, 801f3e6 <BnrgmTransmitFsm+0x1b6>
 801f3d6:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801f3da:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
 801f3de:	1a80      	subs	r0, r0, r2
 801f3e0:	4283      	cmp	r3, r0
 801f3e2:	f63f af60 	bhi.w	801f2a6 <BnrgmTransmitFsm+0x76>
 801f3e6:	f7fb fa95 	bl	801a914 <BnrgmTransmitQueuePrepNextItem>
 801f3ea:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
 801f3ee:	4318      	orrs	r0, r3
 801f3f0:	b2c0      	uxtb	r0, r0
 801f3f2:	2800      	cmp	r0, #0
 801f3f4:	d1a6      	bne.n	801f344 <BnrgmTransmitFsm+0x114>
 801f3f6:	2301      	movs	r3, #1
 801f3f8:	e78b      	b.n	801f312 <BnrgmTransmitFsm+0xe2>
 801f3fa:	2d04      	cmp	r5, #4
 801f3fc:	d119      	bne.n	801f432 <BnrgmTransmitFsm+0x202>
 801f3fe:	2801      	cmp	r0, #1
 801f400:	f47f af51 	bne.w	801f2a6 <BnrgmTransmitFsm+0x76>
 801f404:	4b20      	ldr	r3, [pc, #128]	; (801f488 <BnrgmTransmitFsm+0x258>)
 801f406:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f40a:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 801f40e:	fbb3 f3f2 	udiv	r3, r3, r2
 801f412:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
 801f416:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
 801f41a:	320c      	adds	r2, #12
 801f41c:	b29b      	uxth	r3, r3
 801f41e:	429a      	cmp	r2, r3
 801f420:	f4bf af41 	bcs.w	801f2a6 <BnrgmTransmitFsm+0x76>
 801f424:	f7e8 fd2a 	bl	8007e7c <HAL_GetTick>
 801f428:	3003      	adds	r0, #3
 801f42a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 801f42e:	2306      	movs	r3, #6
 801f430:	e76f      	b.n	801f312 <BnrgmTransmitFsm+0xe2>
 801f432:	2d03      	cmp	r5, #3
 801f434:	f47f af37 	bne.w	801f2a6 <BnrgmTransmitFsm+0x76>
 801f438:	f7f8 ffec 	bl	8018414 <MoblePalBluetoothModeStopScan>
 801f43c:	e782      	b.n	801f344 <BnrgmTransmitFsm+0x114>
 801f43e:	2d06      	cmp	r5, #6
 801f440:	d0fa      	beq.n	801f438 <BnrgmTransmitFsm+0x208>
 801f442:	f7e8 fd1b 	bl	8007e7c <HAL_GetTick>
 801f446:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
 801f44a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 801f44e:	4298      	cmp	r0, r3
 801f450:	f4bf af78 	bcs.w	801f344 <BnrgmTransmitFsm+0x114>
 801f454:	e727      	b.n	801f2a6 <BnrgmTransmitFsm+0x76>
 801f456:	f7e8 fd11 	bl	8007e7c <HAL_GetTick>
 801f45a:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801f45e:	4298      	cmp	r0, r3
 801f460:	f4ff af21 	bcc.w	801f2a6 <BnrgmTransmitFsm+0x76>
 801f464:	2000      	movs	r0, #0
 801f466:	f7f6 f87b 	bl	8015560 <aci_hal_set_radio_activity_mask>
 801f46a:	4b05      	ldr	r3, [pc, #20]	; (801f480 <BnrgmTransmitFsm+0x250>)
 801f46c:	2500      	movs	r5, #0
 801f46e:	f883 5a10 	strb.w	r5, [r3, #2576]	; 0xa10
 801f472:	f7f8 ffcf 	bl	8018414 <MoblePalBluetoothModeStopScan>
 801f476:	f884 517a 	strb.w	r5, [r4, #378]	; 0x17a
 801f47a:	e714      	b.n	801f2a6 <BnrgmTransmitFsm+0x76>
 801f47c:	20003f58 	.word	0x20003f58
 801f480:	20002508 	.word	0x20002508
 801f484:	28000014 	.word	0x28000014
 801f488:	20001410 	.word	0x20001410

0801f48c <MobleTransmitInit>:
 801f48c:	b538      	push	{r3, r4, r5, lr}
 801f48e:	4c0c      	ldr	r4, [pc, #48]	; (801f4c0 <MobleTransmitInit+0x34>)
 801f490:	4b0c      	ldr	r3, [pc, #48]	; (801f4c4 <MobleTransmitInit+0x38>)
 801f492:	f8a4 0a12 	strh.w	r0, [r4, #2578]	; 0xa12
 801f496:	2809      	cmp	r0, #9
 801f498:	bf86      	itte	hi
 801f49a:	380a      	subhi	r0, #10
 801f49c:	b280      	uxthhi	r0, r0
 801f49e:	2000      	movls	r0, #0
 801f4a0:	f8a3 0178 	strh.w	r0, [r3, #376]	; 0x178
 801f4a4:	2500      	movs	r5, #0
 801f4a6:	2001      	movs	r0, #1
 801f4a8:	f884 5a10 	strb.w	r5, [r4, #2576]	; 0xa10
 801f4ac:	f7ff fec0 	bl	801f230 <BnrgmTransmitFsm>
 801f4b0:	4b05      	ldr	r3, [pc, #20]	; (801f4c8 <MobleTransmitInit+0x3c>)
 801f4b2:	4a06      	ldr	r2, [pc, #24]	; (801f4cc <MobleTransmitInit+0x40>)
 801f4b4:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 801f4b8:	f884 5a11 	strb.w	r5, [r4, #2577]	; 0xa11
 801f4bc:	bd38      	pop	{r3, r4, r5, pc}
 801f4be:	bf00      	nop
 801f4c0:	20002508 	.word	0x20002508
 801f4c4:	20003f58 	.word	0x20003f58
 801f4c8:	20001410 	.word	0x20001410
 801f4cc:	0801f521 	.word	0x0801f521

0801f4d0 <MobleTransmitSuspendAll>:
 801f4d0:	b508      	push	{r3, lr}
 801f4d2:	4b06      	ldr	r3, [pc, #24]	; (801f4ec <MobleTransmitSuspendAll+0x1c>)
 801f4d4:	f240 1201 	movw	r2, #257	; 0x101
 801f4d8:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
 801f4dc:	2002      	movs	r0, #2
 801f4de:	f7ff fea7 	bl	801f230 <BnrgmTransmitFsm>
 801f4e2:	2003      	movs	r0, #3
 801f4e4:	f7ff fea4 	bl	801f230 <BnrgmTransmitFsm>
 801f4e8:	2000      	movs	r0, #0
 801f4ea:	bd08      	pop	{r3, pc}
 801f4ec:	20003f58 	.word	0x20003f58

0801f4f0 <MobleTransmitResumeAll>:
 801f4f0:	b510      	push	{r4, lr}
 801f4f2:	4b04      	ldr	r3, [pc, #16]	; (801f504 <MobleTransmitResumeAll+0x14>)
 801f4f4:	2400      	movs	r4, #0
 801f4f6:	f8a3 4168 	strh.w	r4, [r3, #360]	; 0x168
 801f4fa:	2003      	movs	r0, #3
 801f4fc:	f7ff fe98 	bl	801f230 <BnrgmTransmitFsm>
 801f500:	4620      	mov	r0, r4
 801f502:	bd10      	pop	{r4, pc}
 801f504:	20003f58 	.word	0x20003f58

0801f508 <BnrgmTransmitSetAutoScanState>:
 801f508:	4b04      	ldr	r3, [pc, #16]	; (801f51c <BnrgmTransmitSetAutoScanState+0x14>)
 801f50a:	2801      	cmp	r0, #1
 801f50c:	f883 016a 	strb.w	r0, [r3, #362]	; 0x16a
 801f510:	d002      	beq.n	801f518 <BnrgmTransmitSetAutoScanState+0x10>
 801f512:	2003      	movs	r0, #3
 801f514:	f7ff be8c 	b.w	801f230 <BnrgmTransmitFsm>
 801f518:	4770      	bx	lr
 801f51a:	bf00      	nop
 801f51c:	20003f58 	.word	0x20003f58

0801f520 <BnrgmTransmitRadioActivityEndCallback>:
 801f520:	b570      	push	{r4, r5, r6, lr}
 801f522:	4c13      	ldr	r4, [pc, #76]	; (801f570 <BnrgmTransmitRadioActivityEndCallback+0x50>)
 801f524:	2902      	cmp	r1, #2
 801f526:	bf08      	it	eq
 801f528:	f8c4 217c 	streq.w	r2, [r4, #380]	; 0x17c
 801f52c:	2801      	cmp	r0, #1
 801f52e:	460d      	mov	r5, r1
 801f530:	d004      	beq.n	801f53c <BnrgmTransmitRadioActivityEndCallback+0x1c>
 801f532:	2802      	cmp	r0, #2
 801f534:	d014      	beq.n	801f560 <BnrgmTransmitRadioActivityEndCallback+0x40>
 801f536:	f884 517b 	strb.w	r5, [r4, #379]	; 0x17b
 801f53a:	bd70      	pop	{r4, r5, r6, pc}
 801f53c:	f894 617a 	ldrb.w	r6, [r4, #378]	; 0x17a
 801f540:	2e02      	cmp	r6, #2
 801f542:	d1f8      	bne.n	801f536 <BnrgmTransmitRadioActivityEndCallback+0x16>
 801f544:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 801f548:	f7fb f9cc 	bl	801a8e4 <BnrgmTransmitQueDecreasePktCount>
 801f54c:	4630      	mov	r0, r6
 801f54e:	f7ff fe6f 	bl	801f230 <BnrgmTransmitFsm>
 801f552:	2000      	movs	r0, #0
 801f554:	f7ff fe6c 	bl	801f230 <BnrgmTransmitFsm>
 801f558:	2000      	movs	r0, #0
 801f55a:	f7ff fe69 	bl	801f230 <BnrgmTransmitFsm>
 801f55e:	e7ea      	b.n	801f536 <BnrgmTransmitRadioActivityEndCallback+0x16>
 801f560:	f894 317b 	ldrb.w	r3, [r4, #379]	; 0x17b
 801f564:	2b02      	cmp	r3, #2
 801f566:	d1e6      	bne.n	801f536 <BnrgmTransmitRadioActivityEndCallback+0x16>
 801f568:	2901      	cmp	r1, #1
 801f56a:	d0e4      	beq.n	801f536 <BnrgmTransmitRadioActivityEndCallback+0x16>
 801f56c:	2004      	movs	r0, #4
 801f56e:	e7f4      	b.n	801f55a <BnrgmTransmitRadioActivityEndCallback+0x3a>
 801f570:	20003f58 	.word	0x20003f58

0801f574 <BnrgmTransmitProcess>:
 801f574:	2000      	movs	r0, #0
 801f576:	f7ff be5b 	b.w	801f230 <BnrgmTransmitFsm>

0801f57a <BLEMesh_StopAdvScan>:
 801f57a:	b508      	push	{r3, lr}
 801f57c:	2002      	movs	r0, #2
 801f57e:	f7ff fe57 	bl	801f230 <BnrgmTransmitFsm>
 801f582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f586:	2003      	movs	r0, #3
 801f588:	f7ff be52 	b.w	801f230 <BnrgmTransmitFsm>

0801f58c <MoblePalBluetoothGracefulReset>:
 801f58c:	b510      	push	{r4, lr}
 801f58e:	4c16      	ldr	r4, [pc, #88]	; (801f5e8 <MoblePalBluetoothGracefulReset+0x5c>)
 801f590:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 801f594:	f013 0f3c 	tst.w	r3, #60	; 0x3c
 801f598:	d010      	beq.n	801f5bc <MoblePalBluetoothGracefulReset+0x30>
 801f59a:	2301      	movs	r3, #1
 801f59c:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
 801f5a0:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378
 801f5a4:	f7e8 fc6a 	bl	8007e7c <HAL_GetTick>
 801f5a8:	f8d4 3350 	ldr.w	r3, [r4, #848]	; 0x350
 801f5ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f5b0:	fbb3 f3f2 	udiv	r3, r3, r2
 801f5b4:	4403      	add	r3, r0
 801f5b6:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
 801f5ba:	bd10      	pop	{r4, pc}
 801f5bc:	f7fb fd1c 	bl	801aff8 <MoblePalBluetoothFreeAllNotifications>
 801f5c0:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 801f5c4:	b103      	cbz	r3, 801f5c8 <MoblePalBluetoothGracefulReset+0x3c>
 801f5c6:	4798      	blx	r3
 801f5c8:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 801f5cc:	b10b      	cbz	r3, 801f5d2 <MoblePalBluetoothGracefulReset+0x46>
 801f5ce:	f7ff ffd4 	bl	801f57a <BLEMesh_StopAdvScan>
 801f5d2:	2300      	movs	r3, #0
 801f5d4:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 801f5d8:	f7ff fcb8 	bl	801ef4c <BLEMesh_IsUnprovisioned>
 801f5dc:	2801      	cmp	r0, #1
 801f5de:	bf04      	itt	eq
 801f5e0:	4b02      	ldreq	r3, [pc, #8]	; (801f5ec <MoblePalBluetoothGracefulReset+0x60>)
 801f5e2:	7018      	strbeq	r0, [r3, #0]
 801f5e4:	e7e9      	b.n	801f5ba <MoblePalBluetoothGracefulReset+0x2e>
 801f5e6:	bf00      	nop
 801f5e8:	20001410 	.word	0x20001410
 801f5ec:	20004437 	.word	0x20004437

0801f5f0 <HCI_Event_CB>:
 801f5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5f4:	7803      	ldrb	r3, [r0, #0]
 801f5f6:	2b04      	cmp	r3, #4
 801f5f8:	b08b      	sub	sp, #44	; 0x2c
 801f5fa:	4604      	mov	r4, r0
 801f5fc:	d161      	bne.n	801f6c2 <HCI_Event_CB+0xd2>
 801f5fe:	7843      	ldrb	r3, [r0, #1]
 801f600:	2b3e      	cmp	r3, #62	; 0x3e
 801f602:	d025      	beq.n	801f650 <HCI_Event_CB+0x60>
 801f604:	2bff      	cmp	r3, #255	; 0xff
 801f606:	f000 8099 	beq.w	801f73c <HCI_Event_CB+0x14c>
 801f60a:	2b05      	cmp	r3, #5
 801f60c:	d159      	bne.n	801f6c2 <HCI_Event_CB+0xd2>
 801f60e:	4c7d      	ldr	r4, [pc, #500]	; (801f804 <HCI_Event_CB+0x214>)
 801f610:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 801f614:	f023 030c 	bic.w	r3, r3, #12
 801f618:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 801f61c:	f7fb fcec 	bl	801aff8 <MoblePalBluetoothFreeAllNotifications>
 801f620:	4b79      	ldr	r3, [pc, #484]	; (801f808 <HCI_Event_CB+0x218>)
 801f622:	685b      	ldr	r3, [r3, #4]
 801f624:	68db      	ldr	r3, [r3, #12]
 801f626:	4798      	blx	r3
 801f628:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
 801f62c:	b113      	cbz	r3, 801f634 <HCI_Event_CB+0x44>
 801f62e:	f8d4 036c 	ldr.w	r0, [r4, #876]	; 0x36c
 801f632:	4798      	blx	r3
 801f634:	f894 3378 	ldrb.w	r3, [r4, #888]	; 0x378
 801f638:	2b01      	cmp	r3, #1
 801f63a:	d142      	bne.n	801f6c2 <HCI_Event_CB+0xd2>
 801f63c:	2300      	movs	r3, #0
 801f63e:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378
 801f642:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
 801f646:	b00b      	add	sp, #44	; 0x2c
 801f648:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f64c:	f7ff bf9e 	b.w	801f58c <MoblePalBluetoothGracefulReset>
 801f650:	78c3      	ldrb	r3, [r0, #3]
 801f652:	2b02      	cmp	r3, #2
 801f654:	d02a      	beq.n	801f6ac <HCI_Event_CB+0xbc>
 801f656:	2b03      	cmp	r3, #3
 801f658:	d05f      	beq.n	801f71a <HCI_Event_CB+0x12a>
 801f65a:	2b01      	cmp	r3, #1
 801f65c:	d131      	bne.n	801f6c2 <HCI_Event_CB+0xd2>
 801f65e:	f8b0 300f 	ldrh.w	r3, [r0, #15]
 801f662:	4d68      	ldr	r5, [pc, #416]	; (801f804 <HCI_Event_CB+0x214>)
 801f664:	f240 42e2 	movw	r2, #1250	; 0x4e2
 801f668:	4353      	muls	r3, r2
 801f66a:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
 801f66e:	4b66      	ldr	r3, [pc, #408]	; (801f808 <HCI_Event_CB+0x218>)
 801f670:	685b      	ldr	r3, [r3, #4]
 801f672:	689b      	ldr	r3, [r3, #8]
 801f674:	4798      	blx	r3
 801f676:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 801f67a:	79a1      	ldrb	r1, [r4, #6]
 801f67c:	7962      	ldrb	r2, [r4, #5]
 801f67e:	f023 0301 	bic.w	r3, r3, #1
 801f682:	f043 0304 	orr.w	r3, r3, #4
 801f686:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801f68a:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
 801f68e:	f8a5 2382 	strh.w	r2, [r5, #898]	; 0x382
 801f692:	f7e8 fbf3 	bl	8007e7c <HAL_GetTick>
 801f696:	f8d5 3358 	ldr.w	r3, [r5, #856]	; 0x358
 801f69a:	f8c5 0948 	str.w	r0, [r5, #2376]	; 0x948
 801f69e:	b183      	cbz	r3, 801f6c2 <HCI_Event_CB+0xd2>
 801f6a0:	f8d5 036c 	ldr.w	r0, [r5, #876]	; 0x36c
 801f6a4:	b00b      	add	sp, #44	; 0x2c
 801f6a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6aa:	4718      	bx	r3
 801f6ac:	f8df 9154 	ldr.w	r9, [pc, #340]	; 801f804 <HCI_Event_CB+0x214>
 801f6b0:	f8d9 3370 	ldr.w	r3, [r9, #880]	; 0x370
 801f6b4:	b12b      	cbz	r3, 801f6c2 <HCI_Event_CB+0xd2>
 801f6b6:	1dc7      	adds	r7, r0, #7
 801f6b8:	f04f 0800 	mov.w	r8, #0
 801f6bc:	7923      	ldrb	r3, [r4, #4]
 801f6be:	4543      	cmp	r3, r8
 801f6c0:	dc02      	bgt.n	801f6c8 <HCI_Event_CB+0xd8>
 801f6c2:	b00b      	add	sp, #44	; 0x2c
 801f6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6c8:	79bb      	ldrb	r3, [r7, #6]
 801f6ca:	1dbe      	adds	r6, r7, #6
 801f6cc:	4433      	add	r3, r6
 801f6ce:	f993 b001 	ldrsb.w	fp, [r3, #1]
 801f6d2:	2300      	movs	r3, #0
 801f6d4:	9303      	str	r3, [sp, #12]
 801f6d6:	9a03      	ldr	r2, [sp, #12]
 801f6d8:	79bb      	ldrb	r3, [r7, #6]
 801f6da:	4293      	cmp	r3, r2
 801f6dc:	d803      	bhi.n	801f6e6 <HCI_Event_CB+0xf6>
 801f6de:	f108 0801 	add.w	r8, r8, #1
 801f6e2:	370e      	adds	r7, #14
 801f6e4:	e7ea      	b.n	801f6bc <HCI_Event_CB+0xcc>
 801f6e6:	9b03      	ldr	r3, [sp, #12]
 801f6e8:	f103 0a01 	add.w	sl, r3, #1
 801f6ec:	eb06 020a 	add.w	r2, r6, sl
 801f6f0:	f816 300a 	ldrb.w	r3, [r6, sl]
 801f6f4:	2b00      	cmp	r3, #0
 801f6f6:	d0f2      	beq.n	801f6de <HCI_Event_CB+0xee>
 801f6f8:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801f6fc:	3301      	adds	r3, #1
 801f6fe:	e9cd b000 	strd	fp, r0, [sp]
 801f702:	b2db      	uxtb	r3, r3
 801f704:	e9d9 05db 	ldrd	r0, r5, [r9, #876]	; 0x36c
 801f708:	4639      	mov	r1, r7
 801f70a:	47a8      	blx	r5
 801f70c:	f816 300a 	ldrb.w	r3, [r6, sl]
 801f710:	9d03      	ldr	r5, [sp, #12]
 801f712:	3301      	adds	r3, #1
 801f714:	441d      	add	r5, r3
 801f716:	b2eb      	uxtb	r3, r5
 801f718:	e7dc      	b.n	801f6d4 <HCI_Event_CB+0xe4>
 801f71a:	4b3a      	ldr	r3, [pc, #232]	; (801f804 <HCI_Event_CB+0x214>)
 801f71c:	f8b0 2005 	ldrh.w	r2, [r0, #5]
 801f720:	f8b3 3382 	ldrh.w	r3, [r3, #898]	; 0x382
 801f724:	429a      	cmp	r2, r3
 801f726:	d1cc      	bne.n	801f6c2 <HCI_Event_CB+0xd2>
 801f728:	7903      	ldrb	r3, [r0, #4]
 801f72a:	2b00      	cmp	r3, #0
 801f72c:	d1c9      	bne.n	801f6c2 <HCI_Event_CB+0xd2>
 801f72e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 801f732:	b00b      	add	sp, #44	; 0x2c
 801f734:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f738:	f7f8 bba2 	b.w	8017e80 <MoblePalBluetoothSetConnectionInterval>
 801f73c:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 801f740:	f640 4214 	movw	r2, #3092	; 0xc14
 801f744:	4293      	cmp	r3, r2
 801f746:	d021      	beq.n	801f78c <HCI_Event_CB+0x19c>
 801f748:	d818      	bhi.n	801f77c <HCI_Event_CB+0x18c>
 801f74a:	2b04      	cmp	r3, #4
 801f74c:	d048      	beq.n	801f7e0 <HCI_Event_CB+0x1f0>
 801f74e:	f640 4201 	movw	r2, #3073	; 0xc01
 801f752:	4293      	cmp	r3, r2
 801f754:	d1b5      	bne.n	801f6c2 <HCI_Event_CB+0xd2>
 801f756:	482b      	ldr	r0, [pc, #172]	; (801f804 <HCI_Event_CB+0x214>)
 801f758:	f8d0 5348 	ldr.w	r5, [r0, #840]	; 0x348
 801f75c:	2d00      	cmp	r5, #0
 801f75e:	d0b0      	beq.n	801f6c2 <HCI_Event_CB+0xd2>
 801f760:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 801f764:	f8b4 1007 	ldrh.w	r1, [r4, #7]
 801f768:	f8d0 036c 	ldr.w	r0, [r0, #876]	; 0x36c
 801f76c:	b2db      	uxtb	r3, r3
 801f76e:	f104 020d 	add.w	r2, r4, #13
 801f772:	46ac      	mov	ip, r5
 801f774:	b00b      	add	sp, #44	; 0x2c
 801f776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f77a:	4760      	bx	ip
 801f77c:	f640 4216 	movw	r2, #3094	; 0xc16
 801f780:	4293      	cmp	r3, r2
 801f782:	d19e      	bne.n	801f6c2 <HCI_Event_CB+0xd2>
 801f784:	4b21      	ldr	r3, [pc, #132]	; (801f80c <HCI_Event_CB+0x21c>)
 801f786:	2201      	movs	r2, #1
 801f788:	729a      	strb	r2, [r3, #10]
 801f78a:	e79a      	b.n	801f6c2 <HCI_Event_CB+0xd2>
 801f78c:	4d1d      	ldr	r5, [pc, #116]	; (801f804 <HCI_Event_CB+0x214>)
 801f78e:	f8d5 7344 	ldr.w	r7, [r5, #836]	; 0x344
 801f792:	b1f7      	cbz	r7, 801f7d2 <HCI_Event_CB+0x1e2>
 801f794:	2314      	movs	r3, #20
 801f796:	f88d 3013 	strb.w	r3, [sp, #19]
 801f79a:	f8b0 3009 	ldrh.w	r3, [r0, #9]
 801f79e:	b1c3      	cbz	r3, 801f7d2 <HCI_Event_CB+0x1e2>
 801f7a0:	ae05      	add	r6, sp, #20
 801f7a2:	f8b0 1007 	ldrh.w	r1, [r0, #7]
 801f7a6:	f8d5 036c 	ldr.w	r0, [r5, #876]	; 0x36c
 801f7aa:	f10d 0313 	add.w	r3, sp, #19
 801f7ae:	4632      	mov	r2, r6
 801f7b0:	47b8      	blx	r7
 801f7b2:	2801      	cmp	r0, #1
 801f7b4:	d80d      	bhi.n	801f7d2 <HCI_Event_CB+0x1e2>
 801f7b6:	f8b4 1007 	ldrh.w	r1, [r4, #7]
 801f7ba:	9600      	str	r6, [sp, #0]
 801f7bc:	3901      	subs	r1, #1
 801f7be:	f89d 3013 	ldrb.w	r3, [sp, #19]
 801f7c2:	f8b5 0340 	ldrh.w	r0, [r5, #832]	; 0x340
 801f7c6:	2200      	movs	r2, #0
 801f7c8:	b289      	uxth	r1, r1
 801f7ca:	f7f5 fada 	bl	8014d82 <aci_gatt_update_char_value>
 801f7ce:	2893      	cmp	r0, #147	; 0x93
 801f7d0:	d0f1      	beq.n	801f7b6 <HCI_Event_CB+0x1c6>
 801f7d2:	f8b4 0005 	ldrh.w	r0, [r4, #5]
 801f7d6:	b00b      	add	sp, #44	; 0x2c
 801f7d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7dc:	f7f5 bc37 	b.w	801504e <aci_gatt_allow_read>
 801f7e0:	4b0b      	ldr	r3, [pc, #44]	; (801f810 <HCI_Event_CB+0x220>)
 801f7e2:	f8d0 2007 	ldr.w	r2, [r0, #7]
 801f7e6:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
 801f7ea:	4b06      	ldr	r3, [pc, #24]	; (801f804 <HCI_Event_CB+0x214>)
 801f7ec:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 801f7f0:	2b00      	cmp	r3, #0
 801f7f2:	f43f af66 	beq.w	801f6c2 <HCI_Event_CB+0xd2>
 801f7f6:	7981      	ldrb	r1, [r0, #6]
 801f7f8:	7940      	ldrb	r0, [r0, #5]
 801f7fa:	b00b      	add	sp, #44	; 0x2c
 801f7fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f800:	4718      	bx	r3
 801f802:	bf00      	nop
 801f804:	20001410 	.word	0x20001410
 801f808:	20000318 	.word	0x20000318
 801f80c:	20000008 	.word	0x20000008
 801f810:	20002508 	.word	0x20002508

0801f814 <BnrgmProxy_SarTimeoutCallback>:
 801f814:	f7ff beba 	b.w	801f58c <MoblePalBluetoothGracefulReset>

0801f818 <BnrgmStackDummyProxyModeTimerCallback>:
 801f818:	b508      	push	{r3, lr}
 801f81a:	2300      	movs	r3, #0
 801f81c:	f881 32ad 	strb.w	r3, [r1, #685]	; 0x2ad
 801f820:	f8d1 02b0 	ldr.w	r0, [r1, #688]	; 0x2b0
 801f824:	f7f8 fa28 	bl	8017c78 <MoblePalTimerDestroy>
 801f828:	4b06      	ldr	r3, [pc, #24]	; (801f844 <BnrgmStackDummyProxyModeTimerCallback+0x2c>)
 801f82a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801f82e:	2b02      	cmp	r3, #2
 801f830:	d107      	bne.n	801f842 <BnrgmStackDummyProxyModeTimerCallback+0x2a>
 801f832:	f7f8 fbad 	bl	8017f90 <MoblePalBluetoothGetConnectionState>
 801f836:	2802      	cmp	r0, #2
 801f838:	d003      	beq.n	801f842 <BnrgmStackDummyProxyModeTimerCallback+0x2a>
 801f83a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f83e:	f7ff bea5 	b.w	801f58c <MoblePalBluetoothGracefulReset>
 801f842:	bd08      	pop	{r3, pc}
 801f844:	20000318 	.word	0x20000318

0801f848 <MobleProvision_CreateCommand>:
 801f848:	b570      	push	{r4, r5, r6, lr}
 801f84a:	9e04      	ldr	r6, [sp, #16]
 801f84c:	1c54      	adds	r4, r2, #1
 801f84e:	42b4      	cmp	r4, r6
 801f850:	d806      	bhi.n	801f860 <MobleProvision_CreateCommand+0x18>
 801f852:	7018      	strb	r0, [r3, #0]
 801f854:	b112      	cbz	r2, 801f85c <MobleProvision_CreateCommand+0x14>
 801f856:	1c58      	adds	r0, r3, #1
 801f858:	f009 f998 	bl	8028b8c <memmove>
 801f85c:	b2e0      	uxtb	r0, r4
 801f85e:	bd70      	pop	{r4, r5, r6, pc}
 801f860:	2000      	movs	r0, #0
 801f862:	e7fc      	b.n	801f85e <MobleProvision_CreateCommand+0x16>

0801f864 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0>:
 801f864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f868:	4c93      	ldr	r4, [pc, #588]	; (801fab8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x254>)
 801f86a:	f8d4 56f0 	ldr.w	r5, [r4, #1776]	; 0x6f0
 801f86e:	b0c7      	sub	sp, #284	; 0x11c
 801f870:	4606      	mov	r6, r0
 801f872:	4628      	mov	r0, r5
 801f874:	4689      	mov	r9, r1
 801f876:	4690      	mov	r8, r2
 801f878:	f7ff fb56 	bl	801ef28 <MobleProvisionGetRole>
 801f87c:	4607      	mov	r7, r0
 801f87e:	2800      	cmp	r0, #0
 801f880:	f040 8212 	bne.w	801fca8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x444>
 801f884:	f8d4 ca18 	ldr.w	ip, [r4, #2584]	; 0xa18
 801f888:	f8c8 0000 	str.w	r0, [r8]
 801f88c:	f89c 3000 	ldrb.w	r3, [ip]
 801f890:	2b0a      	cmp	r3, #10
 801f892:	d821      	bhi.n	801f8d8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x74>
 801f894:	e8df f013 	tbh	[pc, r3, lsl #1]
 801f898:	0020000b 	.word	0x0020000b
 801f89c:	004c0026 	.word	0x004c0026
 801f8a0:	00200020 	.word	0x00200020
 801f8a4:	002000b1 	.word	0x002000b1
 801f8a8:	00200108 	.word	0x00200108
 801f8ac:	0114      	.short	0x0114
 801f8ae:	f895 3294 	ldrb.w	r3, [r5, #660]	; 0x294
 801f8b2:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
 801f8b6:	2201      	movs	r2, #1
 801f8b8:	4633      	mov	r3, r6
 801f8ba:	f8cd 9000 	str.w	r9, [sp]
 801f8be:	a936      	add	r1, sp, #216	; 0xd8
 801f8c0:	2000      	movs	r0, #0
 801f8c2:	f7ff ffc1 	bl	801f848 <MobleProvision_CreateCommand>
 801f8c6:	f8d4 26f0 	ldr.w	r2, [r4, #1776]	; 0x6f0
 801f8ca:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 801f8ce:	f892 2294 	ldrb.w	r2, [r2, #660]	; 0x294
 801f8d2:	f8c8 0000 	str.w	r0, [r8]
 801f8d6:	711a      	strb	r2, [r3, #4]
 801f8d8:	f8d8 3000 	ldr.w	r3, [r8]
 801f8dc:	2b00      	cmp	r3, #0
 801f8de:	bf08      	it	eq
 801f8e0:	2702      	moveq	r7, #2
 801f8e2:	e161      	b.n	801fba8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x344>
 801f8e4:	2300      	movs	r3, #0
 801f8e6:	9336      	str	r3, [sp, #216]	; 0xd8
 801f8e8:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
 801f8ec:	f895 31fa 	ldrb.w	r3, [r5, #506]	; 0x1fa
 801f8f0:	f88d 30d9 	strb.w	r3, [sp, #217]	; 0xd9
 801f8f4:	f895 31fb 	ldrb.w	r3, [r5, #507]	; 0x1fb
 801f8f8:	f88d 30da 	strb.w	r3, [sp, #218]	; 0xda
 801f8fc:	f895 31fc 	ldrb.w	r3, [r5, #508]	; 0x1fc
 801f900:	f88d 30db 	strb.w	r3, [sp, #219]	; 0xdb
 801f904:	f895 31fd 	ldrb.w	r3, [r5, #509]	; 0x1fd
 801f908:	9836      	ldr	r0, [sp, #216]	; 0xd8
 801f90a:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
 801f90e:	f8cc 0010 	str.w	r0, [ip, #16]
 801f912:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801f916:	f88c 3014 	strb.w	r3, [ip, #20]
 801f91a:	2205      	movs	r2, #5
 801f91c:	f8cd 9000 	str.w	r9, [sp]
 801f920:	4633      	mov	r3, r6
 801f922:	a936      	add	r1, sp, #216	; 0xd8
 801f924:	2002      	movs	r0, #2
 801f926:	f7ff ff8f 	bl	801f848 <MobleProvision_CreateCommand>
 801f92a:	f8c8 0000 	str.w	r0, [r8]
 801f92e:	e7d3      	b.n	801f8d8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x74>
 801f930:	2500      	movs	r5, #0
 801f932:	f8d4 aa18 	ldr.w	sl, [r4, #2584]	; 0xa18
 801f936:	f7f8 fb8b 	bl	8018050 <MoblePalBluetoothRandom>
 801f93a:	44aa      	add	sl, r5
 801f93c:	3501      	adds	r5, #1
 801f93e:	2d20      	cmp	r5, #32
 801f940:	f88a 0095 	strb.w	r0, [sl, #149]	; 0x95
 801f944:	d1f5      	bne.n	801f932 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xce>
 801f946:	f8d4 0a18 	ldr.w	r0, [r4, #2584]	; 0xa18
 801f94a:	4629      	mov	r1, r5
 801f94c:	3095      	adds	r0, #149	; 0x95
 801f94e:	f7fa f9c7 	bl	8019ce0 <MoblePalCryptoInitEcc>
 801f952:	2800      	cmp	r0, #0
 801f954:	f040 81a2 	bne.w	801fc9c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x438>
 801f958:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 801f95c:	2201      	movs	r2, #1
 801f95e:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
 801f962:	a826      	add	r0, sp, #152	; 0x98
 801f964:	f7f9 fac8 	bl	8018ef8 <MoblePalCryptoGetEccPublicKey.part.0>
 801f968:	2800      	cmp	r0, #0
 801f96a:	f040 8197 	bne.w	801fc9c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x438>
 801f96e:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 801f972:	f893 31fa 	ldrb.w	r3, [r3, #506]	; 0x1fa
 801f976:	bb43      	cbnz	r3, 801f9ca <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x166>
 801f978:	f8d4 ca18 	ldr.w	ip, [r4, #2584]	; 0xa18
 801f97c:	f10c 05b5 	add.w	r5, ip, #181	; 0xb5
 801f980:	f10d 0e98 	add.w	lr, sp, #152	; 0x98
 801f984:	ac36      	add	r4, sp, #216	; 0xd8
 801f986:	462b      	mov	r3, r5
 801f988:	4672      	mov	r2, lr
 801f98a:	ca03      	ldmia	r2!, {r0, r1}
 801f98c:	42a2      	cmp	r2, r4
 801f98e:	6028      	str	r0, [r5, #0]
 801f990:	6069      	str	r1, [r5, #4]
 801f992:	4696      	mov	lr, r2
 801f994:	f105 0508 	add.w	r5, r5, #8
 801f998:	d1f6      	bne.n	801f988 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x124>
 801f99a:	4625      	mov	r5, r4
 801f99c:	f10c 0ef5 	add.w	lr, ip, #245	; 0xf5
 801f9a0:	6818      	ldr	r0, [r3, #0]
 801f9a2:	6859      	ldr	r1, [r3, #4]
 801f9a4:	462a      	mov	r2, r5
 801f9a6:	c203      	stmia	r2!, {r0, r1}
 801f9a8:	3308      	adds	r3, #8
 801f9aa:	4573      	cmp	r3, lr
 801f9ac:	4615      	mov	r5, r2
 801f9ae:	d1f7      	bne.n	801f9a0 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x13c>
 801f9b0:	2240      	movs	r2, #64	; 0x40
 801f9b2:	4621      	mov	r1, r4
 801f9b4:	f10c 0015 	add.w	r0, ip, #21
 801f9b8:	f009 f8e8 	bl	8028b8c <memmove>
 801f9bc:	f8cd 9000 	str.w	r9, [sp]
 801f9c0:	4633      	mov	r3, r6
 801f9c2:	2240      	movs	r2, #64	; 0x40
 801f9c4:	4621      	mov	r1, r4
 801f9c6:	2003      	movs	r0, #3
 801f9c8:	e7ad      	b.n	801f926 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xc2>
 801f9ca:	f8d4 0a18 	ldr.w	r0, [r4, #2584]	; 0xa18
 801f9ce:	30f5      	adds	r0, #245	; 0xf5
 801f9d0:	f7fa f99a 	bl	8019d08 <MoblePalCryptoGetEccGenSecret>
 801f9d4:	b920      	cbnz	r0, 801f9e0 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x17c>
 801f9d6:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 801f9da:	220d      	movs	r2, #13
 801f9dc:	701a      	strb	r2, [r3, #0]
 801f9de:	e77b      	b.n	801f8d8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x74>
 801f9e0:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 801f9e4:	f100 0220 	add.w	r2, r0, #32
 801f9e8:	f203 1335 	addw	r3, r3, #309	; 0x135
 801f9ec:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 801f9f0:	f803 1b01 	strb.w	r1, [r3], #1
 801f9f4:	4282      	cmp	r2, r0
 801f9f6:	d1f9      	bne.n	801f9ec <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x188>
 801f9f8:	e7be      	b.n	801f978 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x114>
 801f9fa:	2300      	movs	r3, #0
 801f9fc:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 801fa00:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
 801fa04:	2291      	movs	r2, #145	; 0x91
 801fa06:	f20c 1365 	addw	r3, ip, #357	; 0x165
 801fa0a:	f10c 0104 	add.w	r1, ip, #4
 801fa0e:	a81b      	add	r0, sp, #108	; 0x6c
 801fa10:	f7f8 fdf8 	bl	8018604 <BAES_CmacCompute>
 801fa14:	2304      	movs	r3, #4
 801fa16:	f8d4 0a18 	ldr.w	r0, [r4, #2584]	; 0xa18
 801fa1a:	9302      	str	r3, [sp, #8]
 801fa1c:	4b27      	ldr	r3, [pc, #156]	; (801fabc <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x258>)
 801fa1e:	9301      	str	r3, [sp, #4]
 801fa20:	2310      	movs	r3, #16
 801fa22:	9300      	str	r3, [sp, #0]
 801fa24:	f200 1135 	addw	r1, r0, #309	; 0x135
 801fa28:	f200 1365 	addw	r3, r0, #357	; 0x165
 801fa2c:	2220      	movs	r2, #32
 801fa2e:	f200 1055 	addw	r0, r0, #341	; 0x155
 801fa32:	f7f8 feb5 	bl	80187a0 <MoblePalCryptoK1.part.0>
 801fa36:	2800      	cmp	r0, #0
 801fa38:	f040 8130 	bne.w	801fc9c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x438>
 801fa3c:	4605      	mov	r5, r0
 801fa3e:	f8d4 aa18 	ldr.w	sl, [r4, #2584]	; 0xa18
 801fa42:	f7f8 fb05 	bl	8018050 <MoblePalBluetoothRandom>
 801fa46:	44aa      	add	sl, r5
 801fa48:	3501      	adds	r5, #1
 801fa4a:	2d10      	cmp	r5, #16
 801fa4c:	f88a 0175 	strb.w	r0, [sl, #373]	; 0x175
 801fa50:	d1f5      	bne.n	801fa3e <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x1da>
 801fa52:	ad26      	add	r5, sp, #152	; 0x98
 801fa54:	2300      	movs	r3, #0
 801fa56:	4628      	mov	r0, r5
 801fa58:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
 801fa5c:	e9cd 3328 	strd	r3, r3, [sp, #160]	; 0xa0
 801fa60:	f7ff fb08 	bl	801f074 <MobleProvisionGenerateAuthValue>
 801fa64:	f8d4 ca18 	ldr.w	ip, [r4, #2584]	; 0xa18
 801fa68:	ac36      	add	r4, sp, #216	; 0xd8
 801fa6a:	f20c 1375 	addw	r3, ip, #373	; 0x175
 801fa6e:	f20c 1e85 	addw	lr, ip, #389	; 0x185
 801fa72:	6818      	ldr	r0, [r3, #0]
 801fa74:	6859      	ldr	r1, [r3, #4]
 801fa76:	4622      	mov	r2, r4
 801fa78:	c203      	stmia	r2!, {r0, r1}
 801fa7a:	3308      	adds	r3, #8
 801fa7c:	4573      	cmp	r3, lr
 801fa7e:	4614      	mov	r4, r2
 801fa80:	d1f7      	bne.n	801fa72 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x20e>
 801fa82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801fa86:	ac3a      	add	r4, sp, #232	; 0xe8
 801fa88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801fa8c:	ab1f      	add	r3, sp, #124	; 0x7c
 801fa8e:	2220      	movs	r2, #32
 801fa90:	a936      	add	r1, sp, #216	; 0xd8
 801fa92:	f20c 1055 	addw	r0, ip, #341	; 0x155
 801fa96:	f7f8 fdb5 	bl	8018604 <BAES_CmacCompute>
 801fa9a:	f8cd 9000 	str.w	r9, [sp]
 801fa9e:	4633      	mov	r3, r6
 801faa0:	2210      	movs	r2, #16
 801faa2:	a91f      	add	r1, sp, #124	; 0x7c
 801faa4:	2005      	movs	r0, #5
 801faa6:	e73e      	b.n	801f926 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xc2>
 801faa8:	f8cd 9000 	str.w	r9, [sp]
 801faac:	4633      	mov	r3, r6
 801faae:	2210      	movs	r2, #16
 801fab0:	f20c 1175 	addw	r1, ip, #373	; 0x175
 801fab4:	2006      	movs	r0, #6
 801fab6:	e736      	b.n	801f926 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xc2>
 801fab8:	20002508 	.word	0x20002508
 801fabc:	08033b0b 	.word	0x08033b0b
 801fac0:	2300      	movs	r3, #0
 801fac2:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 801fac6:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 801faca:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 801face:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 801fad2:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 801fad6:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 801fada:	f20c 1565 	addw	r5, ip, #357	; 0x165
 801fade:	aa36      	add	r2, sp, #216	; 0xd8
 801fae0:	f20c 1e75 	addw	lr, ip, #373	; 0x175
 801fae4:	6828      	ldr	r0, [r5, #0]
 801fae6:	6869      	ldr	r1, [r5, #4]
 801fae8:	4613      	mov	r3, r2
 801faea:	c303      	stmia	r3!, {r0, r1}
 801faec:	3508      	adds	r5, #8
 801faee:	4575      	cmp	r5, lr
 801faf0:	461a      	mov	r2, r3
 801faf2:	d1f7      	bne.n	801fae4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x280>
 801faf4:	aa3a      	add	r2, sp, #232	; 0xe8
 801faf6:	f20c 1e85 	addw	lr, ip, #389	; 0x185
 801fafa:	6828      	ldr	r0, [r5, #0]
 801fafc:	6869      	ldr	r1, [r5, #4]
 801fafe:	4613      	mov	r3, r2
 801fb00:	c303      	stmia	r3!, {r0, r1}
 801fb02:	3508      	adds	r5, #8
 801fb04:	4575      	cmp	r5, lr
 801fb06:	461a      	mov	r2, r3
 801fb08:	d1f7      	bne.n	801fafa <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x296>
 801fb0a:	aa3e      	add	r2, sp, #248	; 0xf8
 801fb0c:	f20c 1c95 	addw	ip, ip, #405	; 0x195
 801fb10:	6828      	ldr	r0, [r5, #0]
 801fb12:	6869      	ldr	r1, [r5, #4]
 801fb14:	4613      	mov	r3, r2
 801fb16:	c303      	stmia	r3!, {r0, r1}
 801fb18:	3508      	adds	r5, #8
 801fb1a:	4565      	cmp	r5, ip
 801fb1c:	461a      	mov	r2, r3
 801fb1e:	d1f7      	bne.n	801fb10 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x2ac>
 801fb20:	ab17      	add	r3, sp, #92	; 0x5c
 801fb22:	2230      	movs	r2, #48	; 0x30
 801fb24:	a936      	add	r1, sp, #216	; 0xd8
 801fb26:	a813      	add	r0, sp, #76	; 0x4c
 801fb28:	f7f8 fd6c 	bl	8018604 <BAES_CmacCompute>
 801fb2c:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	; 0xa18
 801fb30:	4b5e      	ldr	r3, [pc, #376]	; (801fcac <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x448>)
 801fb32:	9301      	str	r3, [sp, #4]
 801fb34:	f04f 0a04 	mov.w	sl, #4
 801fb38:	2510      	movs	r5, #16
 801fb3a:	f8cd a008 	str.w	sl, [sp, #8]
 801fb3e:	9500      	str	r5, [sp, #0]
 801fb40:	ab17      	add	r3, sp, #92	; 0x5c
 801fb42:	2220      	movs	r2, #32
 801fb44:	f201 1135 	addw	r1, r1, #309	; 0x135
 801fb48:	a80b      	add	r0, sp, #44	; 0x2c
 801fb4a:	f7f8 fe29 	bl	80187a0 <MoblePalCryptoK1.part.0>
 801fb4e:	2800      	cmp	r0, #0
 801fb50:	f040 80a4 	bne.w	801fc9c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x438>
 801fb54:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	; 0xa18
 801fb58:	4b55      	ldr	r3, [pc, #340]	; (801fcb0 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x44c>)
 801fb5a:	f8cd a008 	str.w	sl, [sp, #8]
 801fb5e:	e9cd 5300 	strd	r5, r3, [sp]
 801fb62:	2220      	movs	r2, #32
 801fb64:	ab17      	add	r3, sp, #92	; 0x5c
 801fb66:	f201 1135 	addw	r1, r1, #309	; 0x135
 801fb6a:	a80f      	add	r0, sp, #60	; 0x3c
 801fb6c:	f7f8 fe18 	bl	80187a0 <MoblePalCryptoK1.part.0>
 801fb70:	2800      	cmp	r0, #0
 801fb72:	f040 8093 	bne.w	801fc9c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x438>
 801fb76:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	; 0xa18
 801fb7a:	4b4e      	ldr	r3, [pc, #312]	; (801fcb4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x450>)
 801fb7c:	f8cd a008 	str.w	sl, [sp, #8]
 801fb80:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
 801fb84:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
 801fb88:	e9cd 5300 	strd	r5, r3, [sp]
 801fb8c:	2220      	movs	r2, #32
 801fb8e:	ab17      	add	r3, sp, #92	; 0x5c
 801fb90:	f201 1135 	addw	r1, r1, #309	; 0x135
 801fb94:	a81b      	add	r0, sp, #108	; 0x6c
 801fb96:	f7f8 fe03 	bl	80187a0 <MoblePalCryptoK1.part.0>
 801fb9a:	2801      	cmp	r0, #1
 801fb9c:	d908      	bls.n	801fbb0 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x34c>
 801fb9e:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	; 0xa0c
 801fba2:	2702      	movs	r7, #2
 801fba4:	f883 71a8 	strb.w	r7, [r3, #424]	; 0x1a8
 801fba8:	4638      	mov	r0, r7
 801fbaa:	b047      	add	sp, #284	; 0x11c
 801fbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbb0:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 801fbb4:	f8df b104 	ldr.w	fp, [pc, #260]	; 801fcbc <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x458>
 801fbb8:	f893 227c 	ldrb.w	r2, [r3, #636]	; 0x27c
 801fbbc:	f50b 61b3 	add.w	r1, fp, #1432	; 0x598
 801fbc0:	a81b      	add	r0, sp, #108	; 0x6c
 801fbc2:	f7fd fb14 	bl	801d1ee <BLEMesh_PvnrDataInputCallback>
 801fbc6:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 801fbca:	f20b 4a24 	addw	sl, fp, #1060	; 0x424
 801fbce:	f8a3 0296 	strh.w	r0, [r3, #662]	; 0x296
 801fbd2:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 801fbd6:	ad1f      	add	r5, sp, #124	; 0x7c
 801fbd8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801fbdc:	f10d 011a 	add.w	r1, sp, #26
 801fbe0:	a807      	add	r0, sp, #28
 801fbe2:	f7f9 fad5 	bl	8019190 <MoblePalCrypto_GetNetKeyIndexes>
 801fbe6:	4a34      	ldr	r2, [pc, #208]	; (801fcb8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x454>)
 801fbe8:	f89b 365c 	ldrb.w	r3, [fp, #1628]	; 0x65c
 801fbec:	f892 20c0 	ldrb.w	r2, [r2, #192]	; 0xc0
 801fbf0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801fbf4:	2b00      	cmp	r3, #0
 801fbf6:	bf18      	it	ne
 801fbf8:	2302      	movne	r3, #2
 801fbfa:	2a02      	cmp	r2, #2
 801fbfc:	bf08      	it	eq
 801fbfe:	f043 0301 	orreq.w	r3, r3, #1
 801fc02:	2202      	movs	r2, #2
 801fc04:	a823      	add	r0, sp, #140	; 0x8c
 801fc06:	f7fb faf5 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801fc0a:	4619      	mov	r1, r3
 801fc0c:	2201      	movs	r2, #1
 801fc0e:	f10d 008e 	add.w	r0, sp, #142	; 0x8e
 801fc12:	f7fb faef 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801fc16:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 801fc1a:	681b      	ldr	r3, [r3, #0]
 801fc1c:	2204      	movs	r2, #4
 801fc1e:	6859      	ldr	r1, [r3, #4]
 801fc20:	f10d 008f 	add.w	r0, sp, #143	; 0x8f
 801fc24:	f7fb fae6 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801fc28:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 801fc2c:	2202      	movs	r2, #2
 801fc2e:	f8b3 1296 	ldrh.w	r1, [r3, #662]	; 0x296
 801fc32:	f10d 0093 	add.w	r0, sp, #147	; 0x93
 801fc36:	2300      	movs	r3, #0
 801fc38:	f7fb fadc 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 801fc3c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801fc40:	2319      	movs	r3, #25
 801fc42:	e9cd 5302 	strd	r5, r3, [sp, #8]
 801fc46:	230d      	movs	r3, #13
 801fc48:	9301      	str	r3, [sp, #4]
 801fc4a:	f10d 033f 	add.w	r3, sp, #63	; 0x3f
 801fc4e:	9300      	str	r3, [sp, #0]
 801fc50:	2208      	movs	r2, #8
 801fc52:	ab0b      	add	r3, sp, #44	; 0x2c
 801fc54:	a909      	add	r1, sp, #36	; 0x24
 801fc56:	a826      	add	r0, sp, #152	; 0x98
 801fc58:	f7f9 fe62 	bl	8019920 <MoblePalCryptoAesCcmEncrypt>
 801fc5c:	4602      	mov	r2, r0
 801fc5e:	b9e8      	cbnz	r0, 801fc9c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x438>
 801fc60:	ab09      	add	r3, sp, #36	; 0x24
 801fc62:	cb03      	ldmia	r3!, {r0, r1}
 801fc64:	f1b9 0f21 	cmp.w	r9, #33	; 0x21
 801fc68:	f8cd 00b1 	str.w	r0, [sp, #177]	; 0xb1
 801fc6c:	f8cd 10b5 	str.w	r1, [sp, #181]	; 0xb5
 801fc70:	d911      	bls.n	801fc96 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x432>
 801fc72:	4633      	mov	r3, r6
 801fc74:	2207      	movs	r2, #7
 801fc76:	f803 2b01 	strb.w	r2, [r3], #1
 801fc7a:	ad2e      	add	r5, sp, #184	; 0xb8
 801fc7c:	aa26      	add	r2, sp, #152	; 0x98
 801fc7e:	4614      	mov	r4, r2
 801fc80:	cc03      	ldmia	r4!, {r0, r1}
 801fc82:	42ac      	cmp	r4, r5
 801fc84:	6018      	str	r0, [r3, #0]
 801fc86:	6059      	str	r1, [r3, #4]
 801fc88:	4622      	mov	r2, r4
 801fc8a:	f103 0308 	add.w	r3, r3, #8
 801fc8e:	d1f6      	bne.n	801fc7e <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x41a>
 801fc90:	7822      	ldrb	r2, [r4, #0]
 801fc92:	701a      	strb	r2, [r3, #0]
 801fc94:	2222      	movs	r2, #34	; 0x22
 801fc96:	f8c8 2000 	str.w	r2, [r8]
 801fc9a:	e61d      	b.n	801f8d8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x74>
 801fc9c:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 801fca0:	220d      	movs	r2, #13
 801fca2:	701a      	strb	r2, [r3, #0]
 801fca4:	2702      	movs	r7, #2
 801fca6:	e77f      	b.n	801fba8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x344>
 801fca8:	2703      	movs	r7, #3
 801fcaa:	e77d      	b.n	801fba8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x344>
 801fcac:	08033b10 	.word	0x08033b10
 801fcb0:	08033b15 	.word	0x08033b15
 801fcb4:	08033b1a 	.word	0x08033b1a
 801fcb8:	20000318 	.word	0x20000318
 801fcbc:	20001410 	.word	0x20001410

0801fcc0 <MobleProvision_UnprovisionedNode_GetOutputMessage>:
 801fcc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fcc2:	b095      	sub	sp, #84	; 0x54
 801fcc4:	2500      	movs	r5, #0
 801fcc6:	4f33      	ldr	r7, [pc, #204]	; (801fd94 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd4>)
 801fcc8:	9003      	str	r0, [sp, #12]
 801fcca:	460e      	mov	r6, r1
 801fccc:	4614      	mov	r4, r2
 801fcce:	4629      	mov	r1, r5
 801fcd0:	223c      	movs	r2, #60	; 0x3c
 801fcd2:	a805      	add	r0, sp, #20
 801fcd4:	9504      	str	r5, [sp, #16]
 801fcd6:	f008 ff73 	bl	8028bc0 <memset>
 801fcda:	f8d7 06f0 	ldr.w	r0, [r7, #1776]	; 0x6f0
 801fcde:	f7ff f923 	bl	801ef28 <MobleProvisionGetRole>
 801fce2:	2801      	cmp	r0, #1
 801fce4:	d154      	bne.n	801fd90 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801fce6:	2e00      	cmp	r6, #0
 801fce8:	d052      	beq.n	801fd90 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801fcea:	2c00      	cmp	r4, #0
 801fcec:	d050      	beq.n	801fd90 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801fcee:	9b03      	ldr	r3, [sp, #12]
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	d04d      	beq.n	801fd90 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801fcf4:	f8d7 1a0c 	ldr.w	r1, [r7, #2572]	; 0xa0c
 801fcf8:	6025      	str	r5, [r4, #0]
 801fcfa:	f891 21a8 	ldrb.w	r2, [r1, #424]	; 0x1a8
 801fcfe:	b15a      	cbz	r2, 801fd18 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x58>
 801fd00:	4602      	mov	r2, r0
 801fd02:	9600      	str	r6, [sp, #0]
 801fd04:	f501 71d4 	add.w	r1, r1, #424	; 0x1a8
 801fd08:	2009      	movs	r0, #9
 801fd0a:	f7ff fd9d 	bl	801f848 <MobleProvision_CreateCommand>
 801fd0e:	6020      	str	r0, [r4, #0]
 801fd10:	b1a8      	cbz	r0, 801fd3e <MobleProvision_UnprovisionedNode_GetOutputMessage+0x7e>
 801fd12:	2000      	movs	r0, #0
 801fd14:	b015      	add	sp, #84	; 0x54
 801fd16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fd18:	f891 2044 	ldrb.w	r2, [r1, #68]	; 0x44
 801fd1c:	2a05      	cmp	r2, #5
 801fd1e:	d80b      	bhi.n	801fd38 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x78>
 801fd20:	e8df f002 	tbb	[pc, r2]
 801fd24:	23280f03 	.word	0x23280f03
 801fd28:	342e      	.short	0x342e
 801fd2a:	9600      	str	r6, [sp, #0]
 801fd2c:	220b      	movs	r2, #11
 801fd2e:	3146      	adds	r1, #70	; 0x46
 801fd30:	2001      	movs	r0, #1
 801fd32:	f7ff fd89 	bl	801f848 <MobleProvision_CreateCommand>
 801fd36:	6020      	str	r0, [r4, #0]
 801fd38:	6823      	ldr	r3, [r4, #0]
 801fd3a:	2b00      	cmp	r3, #0
 801fd3c:	d1e9      	bne.n	801fd12 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x52>
 801fd3e:	2002      	movs	r0, #2
 801fd40:	e7e8      	b.n	801fd14 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x54>
 801fd42:	af04      	add	r7, sp, #16
 801fd44:	f501 72b1 	add.w	r2, r1, #354	; 0x162
 801fd48:	f501 75d1 	add.w	r5, r1, #418	; 0x1a2
 801fd4c:	46be      	mov	lr, r7
 801fd4e:	6810      	ldr	r0, [r2, #0]
 801fd50:	6851      	ldr	r1, [r2, #4]
 801fd52:	46bc      	mov	ip, r7
 801fd54:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801fd58:	3208      	adds	r2, #8
 801fd5a:	42aa      	cmp	r2, r5
 801fd5c:	4667      	mov	r7, ip
 801fd5e:	d1f6      	bne.n	801fd4e <MobleProvision_UnprovisionedNode_GetOutputMessage+0x8e>
 801fd60:	9600      	str	r6, [sp, #0]
 801fd62:	2240      	movs	r2, #64	; 0x40
 801fd64:	4671      	mov	r1, lr
 801fd66:	2003      	movs	r0, #3
 801fd68:	e7e3      	b.n	801fd32 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x72>
 801fd6a:	2204      	movs	r2, #4
 801fd6c:	701a      	strb	r2, [r3, #0]
 801fd6e:	2301      	movs	r3, #1
 801fd70:	6023      	str	r3, [r4, #0]
 801fd72:	e7e1      	b.n	801fd38 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x78>
 801fd74:	9600      	str	r6, [sp, #0]
 801fd76:	2210      	movs	r2, #16
 801fd78:	f501 7181 	add.w	r1, r1, #258	; 0x102
 801fd7c:	2005      	movs	r0, #5
 801fd7e:	e7d8      	b.n	801fd32 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x72>
 801fd80:	9600      	str	r6, [sp, #0]
 801fd82:	2210      	movs	r2, #16
 801fd84:	f501 7191 	add.w	r1, r1, #290	; 0x122
 801fd88:	2006      	movs	r0, #6
 801fd8a:	e7d2      	b.n	801fd32 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x72>
 801fd8c:	2208      	movs	r2, #8
 801fd8e:	e7ed      	b.n	801fd6c <MobleProvision_UnprovisionedNode_GetOutputMessage+0xac>
 801fd90:	2003      	movs	r0, #3
 801fd92:	e7bf      	b.n	801fd14 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x54>
 801fd94:	20002508 	.word	0x20002508

0801fd98 <MobleProvisionBearerGatt_Transmit>:
 801fd98:	b500      	push	{lr}
 801fd9a:	b0a3      	sub	sp, #140	; 0x8c
 801fd9c:	aa01      	add	r2, sp, #4
 801fd9e:	2180      	movs	r1, #128	; 0x80
 801fda0:	a802      	add	r0, sp, #8
 801fda2:	f7ff ff8d 	bl	801fcc0 <MobleProvision_UnprovisionedNode_GetOutputMessage>
 801fda6:	2801      	cmp	r0, #1
 801fda8:	d805      	bhi.n	801fdb6 <MobleProvisionBearerGatt_Transmit+0x1e>
 801fdaa:	9b01      	ldr	r3, [sp, #4]
 801fdac:	aa02      	add	r2, sp, #8
 801fdae:	2100      	movs	r1, #0
 801fdb0:	2003      	movs	r0, #3
 801fdb2:	f7fd fe3b 	bl	801da2c <BnrgmProxyProtocol_SendData>
 801fdb6:	b023      	add	sp, #140	; 0x8c
 801fdb8:	f85d fb04 	ldr.w	pc, [sp], #4

0801fdbc <MobleProvision_UnprovisionedNode_IsCompleted>:
 801fdbc:	4b04      	ldr	r3, [pc, #16]	; (801fdd0 <MobleProvision_UnprovisionedNode_IsCompleted+0x14>)
 801fdbe:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	; 0xa0c
 801fdc2:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 801fdc6:	1f83      	subs	r3, r0, #6
 801fdc8:	4258      	negs	r0, r3
 801fdca:	4158      	adcs	r0, r3
 801fdcc:	4770      	bx	lr
 801fdce:	bf00      	nop
 801fdd0:	20002508 	.word	0x20002508

0801fdd4 <MobleProvision_ProvisionerNode_Init>:
 801fdd4:	b570      	push	{r4, r5, r6, lr}
 801fdd6:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 801fdda:	f7fb f84b 	bl	801ae74 <MobleMemAlloc>
 801fdde:	4e0d      	ldr	r6, [pc, #52]	; (801fe14 <MobleProvision_ProvisionerNode_Init+0x40>)
 801fde0:	4605      	mov	r5, r0
 801fde2:	f8c6 0a18 	str.w	r0, [r6, #2584]	; 0xa18
 801fde6:	b180      	cbz	r0, 801fe0a <MobleProvision_ProvisionerNode_Init+0x36>
 801fde8:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	; 0x6f0
 801fdec:	f7ff f89c 	bl	801ef28 <MobleProvisionGetRole>
 801fdf0:	4604      	mov	r4, r0
 801fdf2:	b960      	cbnz	r0, 801fe0e <MobleProvision_ProvisionerNode_Init+0x3a>
 801fdf4:	7028      	strb	r0, [r5, #0]
 801fdf6:	f7e8 f841 	bl	8007e7c <HAL_GetTick>
 801fdfa:	f8d6 3a18 	ldr.w	r3, [r6, #2584]	; 0xa18
 801fdfe:	f8c5 01a8 	str.w	r0, [r5, #424]	; 0x1a8
 801fe02:	f883 41ac 	strb.w	r4, [r3, #428]	; 0x1ac
 801fe06:	4620      	mov	r0, r4
 801fe08:	bd70      	pop	{r4, r5, r6, pc}
 801fe0a:	2402      	movs	r4, #2
 801fe0c:	e7fb      	b.n	801fe06 <MobleProvision_ProvisionerNode_Init+0x32>
 801fe0e:	2403      	movs	r4, #3
 801fe10:	e7f9      	b.n	801fe06 <MobleProvision_ProvisionerNode_Init+0x32>
 801fe12:	bf00      	nop
 801fe14:	20002508 	.word	0x20002508

0801fe18 <MobleProvision_ProvisionerNode_DeInit>:
 801fe18:	b510      	push	{r4, lr}
 801fe1a:	4c0b      	ldr	r4, [pc, #44]	; (801fe48 <MobleProvision_ProvisionerNode_DeInit+0x30>)
 801fe1c:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 801fe20:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 801fe24:	2b01      	cmp	r3, #1
 801fe26:	d106      	bne.n	801fe36 <MobleProvision_ProvisionerNode_DeInit+0x1e>
 801fe28:	f7f9 ff84 	bl	8019d34 <MoblePalCryptoFreeEcc>
 801fe2c:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 801fe30:	2200      	movs	r2, #0
 801fe32:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
 801fe36:	f8d4 0a18 	ldr.w	r0, [r4, #2584]	; 0xa18
 801fe3a:	f7fb f8a5 	bl	801af88 <MobleMemFree>
 801fe3e:	2000      	movs	r0, #0
 801fe40:	f8c4 0a18 	str.w	r0, [r4, #2584]	; 0xa18
 801fe44:	bd10      	pop	{r4, pc}
 801fe46:	bf00      	nop
 801fe48:	20002508 	.word	0x20002508

0801fe4c <MobleProvision_ProvisionerNode_GetNextOperation>:
 801fe4c:	4b09      	ldr	r3, [pc, #36]	; (801fe74 <MobleProvision_ProvisionerNode_GetNextOperation+0x28>)
 801fe4e:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
 801fe52:	781b      	ldrb	r3, [r3, #0]
 801fe54:	2b0b      	cmp	r3, #11
 801fe56:	d809      	bhi.n	801fe6c <MobleProvision_ProvisionerNode_GetNextOperation+0x20>
 801fe58:	e8df f003 	tbb	[pc, r3]
 801fe5c:	0a0a060a 	.word	0x0a0a060a
 801fe60:	060a0806 	.word	0x060a0806
 801fe64:	060a060a 	.word	0x060a060a
 801fe68:	2001      	movs	r0, #1
 801fe6a:	4770      	bx	lr
 801fe6c:	2000      	movs	r0, #0
 801fe6e:	4770      	bx	lr
 801fe70:	2002      	movs	r0, #2
 801fe72:	4770      	bx	lr
 801fe74:	20002508 	.word	0x20002508

0801fe78 <MobleProvision_ProvisionerNode_StateForOOB>:
 801fe78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fe7a:	4e53      	ldr	r6, [pc, #332]	; (801ffc8 <MobleProvision_ProvisionerNode_StateForOOB+0x150>)
 801fe7c:	f8d6 1a18 	ldr.w	r1, [r6, #2584]	; 0xa18
 801fe80:	7808      	ldrb	r0, [r1, #0]
 801fe82:	1c43      	adds	r3, r0, #1
 801fe84:	700b      	strb	r3, [r1, #0]
 801fe86:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 801fe8a:	f893 21fb 	ldrb.w	r2, [r3, #507]	; 0x1fb
 801fe8e:	2a02      	cmp	r2, #2
 801fe90:	d01b      	beq.n	801feca <MobleProvision_ProvisionerNode_StateForOOB+0x52>
 801fe92:	2a03      	cmp	r2, #3
 801fe94:	d029      	beq.n	801feea <MobleProvision_ProvisionerNode_StateForOOB+0x72>
 801fe96:	2a01      	cmp	r2, #1
 801fe98:	d125      	bne.n	801fee6 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801fe9a:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 801fe9e:	f893 01fd 	ldrb.w	r0, [r3, #509]	; 0x1fd
 801fea2:	4790      	blx	r2
 801fea4:	4601      	mov	r1, r0
 801fea6:	2800      	cmp	r0, #0
 801fea8:	f000 8084 	beq.w	801ffb4 <MobleProvision_ProvisionerNode_StateForOOB+0x13c>
 801feac:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	; 0x6f0
 801feb0:	f890 21fd 	ldrb.w	r2, [r0, #509]	; 0x1fd
 801feb4:	2a00      	cmp	r2, #0
 801feb6:	d07d      	beq.n	801ffb4 <MobleProvision_ProvisionerNode_StateForOOB+0x13c>
 801feb8:	f500 701a 	add.w	r0, r0, #616	; 0x268
 801febc:	f008 fe66 	bl	8028b8c <memmove>
 801fec0:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 801fec4:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 801fec8:	e068      	b.n	801ff9c <MobleProvision_ProvisionerNode_StateForOOB+0x124>
 801feca:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 801fece:	b151      	cbz	r1, 801fee6 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801fed0:	f8d3 0284 	ldr.w	r0, [r3, #644]	; 0x284
 801fed4:	b138      	cbz	r0, 801fee6 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801fed6:	f893 01fc 	ldrb.w	r0, [r3, #508]	; 0x1fc
 801feda:	2803      	cmp	r0, #3
 801fedc:	d95e      	bls.n	801ff9c <MobleProvision_ProvisionerNode_StateForOOB+0x124>
 801fede:	2804      	cmp	r0, #4
 801fee0:	bf08      	it	eq
 801fee2:	f883 1278 	strbeq.w	r1, [r3, #632]	; 0x278
 801fee6:	b003      	add	sp, #12
 801fee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801feea:	7008      	strb	r0, [r1, #0]
 801feec:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
 801fef0:	2a00      	cmp	r2, #0
 801fef2:	d0f8      	beq.n	801fee6 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801fef4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801fef8:	2b02      	cmp	r3, #2
 801fefa:	d952      	bls.n	801ffa2 <MobleProvision_ProvisionerNode_StateForOOB+0x12a>
 801fefc:	2b03      	cmp	r3, #3
 801fefe:	d1f2      	bne.n	801fee6 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801ff00:	2400      	movs	r4, #0
 801ff02:	253e      	movs	r5, #62	; 0x3e
 801ff04:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 801ff08:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 801ff0c:	f893 1278 	ldrb.w	r1, [r3, #632]	; 0x278
 801ff10:	4291      	cmp	r1, r2
 801ff12:	d243      	bcs.n	801ff9c <MobleProvision_ProvisionerNode_StateForOOB+0x124>
 801ff14:	4668      	mov	r0, sp
 801ff16:	e9cd 4400 	strd	r4, r4, [sp]
 801ff1a:	f7f5 fce9 	bl	80158f0 <hci_le_rand>
 801ff1e:	466a      	mov	r2, sp
 801ff20:	2108      	movs	r1, #8
 801ff22:	f812 3b01 	ldrb.w	r3, [r2], #1
 801ff26:	fbb3 f0f5 	udiv	r0, r3, r5
 801ff2a:	fb05 3310 	mls	r3, r5, r0, r3
 801ff2e:	b2db      	uxtb	r3, r3
 801ff30:	2b0a      	cmp	r3, #10
 801ff32:	d83a      	bhi.n	801ffaa <MobleProvision_ProvisionerNode_StateForOOB+0x132>
 801ff34:	3330      	adds	r3, #48	; 0x30
 801ff36:	3901      	subs	r1, #1
 801ff38:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ff3c:	d1f1      	bne.n	801ff22 <MobleProvision_ProvisionerNode_StateForOOB+0xaa>
 801ff3e:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 801ff42:	f893 0278 	ldrb.w	r0, [r3, #632]	; 0x278
 801ff46:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 801ff4a:	1a12      	subs	r2, r2, r0
 801ff4c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 801ff50:	2a08      	cmp	r2, #8
 801ff52:	bfa8      	it	ge
 801ff54:	2208      	movge	r2, #8
 801ff56:	4418      	add	r0, r3
 801ff58:	4669      	mov	r1, sp
 801ff5a:	f008 fe17 	bl	8028b8c <memmove>
 801ff5e:	f8d6 26f0 	ldr.w	r2, [r6, #1776]	; 0x6f0
 801ff62:	f892 3278 	ldrb.w	r3, [r2, #632]	; 0x278
 801ff66:	3308      	adds	r3, #8
 801ff68:	f882 3278 	strb.w	r3, [r2, #632]	; 0x278
 801ff6c:	e7ca      	b.n	801ff04 <MobleProvision_ProvisionerNode_StateForOOB+0x8c>
 801ff6e:	f7f8 f86f 	bl	8018050 <MoblePalBluetoothRandom>
 801ff72:	fbb0 f3f7 	udiv	r3, r0, r7
 801ff76:	fb03 0017 	mls	r0, r3, r7, r0
 801ff7a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801ff7e:	b2c0      	uxtb	r0, r0
 801ff80:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 801ff84:	b284      	uxth	r4, r0
 801ff86:	3501      	adds	r5, #1
 801ff88:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 801ff8c:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 801ff90:	b2ea      	uxtb	r2, r5
 801ff92:	4291      	cmp	r1, r2
 801ff94:	d8eb      	bhi.n	801ff6e <MobleProvision_ProvisionerNode_StateForOOB+0xf6>
 801ff96:	f8a3 4268 	strh.w	r4, [r3, #616]	; 0x268
 801ff9a:	2202      	movs	r2, #2
 801ff9c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 801ffa0:	e7a1      	b.n	801fee6 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801ffa2:	2500      	movs	r5, #0
 801ffa4:	462c      	mov	r4, r5
 801ffa6:	270a      	movs	r7, #10
 801ffa8:	e7ee      	b.n	801ff88 <MobleProvision_ProvisionerNode_StateForOOB+0x110>
 801ffaa:	2b24      	cmp	r3, #36	; 0x24
 801ffac:	bf94      	ite	ls
 801ffae:	3357      	addls	r3, #87	; 0x57
 801ffb0:	331d      	addhi	r3, #29
 801ffb2:	e7c0      	b.n	801ff36 <MobleProvision_ProvisionerNode_StateForOOB+0xbe>
 801ffb4:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	; 0x6f0
 801ffb8:	2210      	movs	r2, #16
 801ffba:	2100      	movs	r1, #0
 801ffbc:	f500 701a 	add.w	r0, r0, #616	; 0x268
 801ffc0:	f008 fdfe 	bl	8028bc0 <memset>
 801ffc4:	e77c      	b.n	801fec0 <MobleProvision_ProvisionerNode_StateForOOB+0x48>
 801ffc6:	bf00      	nop
 801ffc8:	20002508 	.word	0x20002508

0801ffcc <MobleProvision_ProvisionerNode_CompleteOperation>:
 801ffcc:	b570      	push	{r4, r5, r6, lr}
 801ffce:	4c29      	ldr	r4, [pc, #164]	; (8020074 <MobleProvision_ProvisionerNode_CompleteOperation+0xa8>)
 801ffd0:	f8d4 2a18 	ldr.w	r2, [r4, #2584]	; 0xa18
 801ffd4:	7813      	ldrb	r3, [r2, #0]
 801ffd6:	f1a3 010c 	sub.w	r1, r3, #12
 801ffda:	2901      	cmp	r1, #1
 801ffdc:	b090      	sub	sp, #64	; 0x40
 801ffde:	d945      	bls.n	802006c <MobleProvision_ProvisionerNode_CompleteOperation+0xa0>
 801ffe0:	2b03      	cmp	r3, #3
 801ffe2:	d145      	bne.n	8020070 <MobleProvision_ProvisionerNode_CompleteOperation+0xa4>
 801ffe4:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 801ffe8:	f893 31fa 	ldrb.w	r3, [r3, #506]	; 0x1fa
 801ffec:	b123      	cbz	r3, 801fff8 <MobleProvision_ProvisionerNode_CompleteOperation+0x2c>
 801ffee:	2304      	movs	r3, #4
 801fff0:	7013      	strb	r3, [r2, #0]
 801fff2:	f7ff ff41 	bl	801fe78 <MobleProvision_ProvisionerNode_StateForOOB>
 801fff6:	2301      	movs	r3, #1
 801fff8:	f8d4 2a18 	ldr.w	r2, [r4, #2584]	; 0xa18
 801fffc:	7812      	ldrb	r2, [r2, #0]
 801fffe:	2a04      	cmp	r2, #4
 8020000:	d102      	bne.n	8020008 <MobleProvision_ProvisionerNode_CompleteOperation+0x3c>
 8020002:	bb73      	cbnz	r3, 8020062 <MobleProvision_ProvisionerNode_CompleteOperation+0x96>
 8020004:	f7ff ff38 	bl	801fe78 <MobleProvision_ProvisionerNode_StateForOOB>
 8020008:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 802000c:	781b      	ldrb	r3, [r3, #0]
 802000e:	2b02      	cmp	r3, #2
 8020010:	d127      	bne.n	8020062 <MobleProvision_ProvisionerNode_CompleteOperation+0x96>
 8020012:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 8020016:	f893 01fa 	ldrb.w	r0, [r3, #506]	; 0x1fa
 802001a:	b310      	cbz	r0, 8020062 <MobleProvision_ProvisionerNode_CompleteOperation+0x96>
 802001c:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 8020020:	4798      	blx	r3
 8020022:	f8d4 5a18 	ldr.w	r5, [r4, #2584]	; 0xa18
 8020026:	35f5      	adds	r5, #245	; 0xf5
 8020028:	4601      	mov	r1, r0
 802002a:	2240      	movs	r2, #64	; 0x40
 802002c:	4628      	mov	r0, r5
 802002e:	f008 fdad 	bl	8028b8c <memmove>
 8020032:	2100      	movs	r1, #0
 8020034:	223c      	movs	r2, #60	; 0x3c
 8020036:	a801      	add	r0, sp, #4
 8020038:	9100      	str	r1, [sp, #0]
 802003a:	f008 fdc1 	bl	8028bc0 <memset>
 802003e:	4669      	mov	r1, sp
 8020040:	4628      	mov	r0, r5
 8020042:	f7f9 fe83 	bl	8019d4c <MoblePalCrypto_PK_convert_le>
 8020046:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 802004a:	466a      	mov	r2, sp
 802004c:	3355      	adds	r3, #85	; 0x55
 802004e:	ae10      	add	r6, sp, #64	; 0x40
 8020050:	4615      	mov	r5, r2
 8020052:	cd03      	ldmia	r5!, {r0, r1}
 8020054:	42b5      	cmp	r5, r6
 8020056:	6018      	str	r0, [r3, #0]
 8020058:	6059      	str	r1, [r3, #4]
 802005a:	462a      	mov	r2, r5
 802005c:	f103 0308 	add.w	r3, r3, #8
 8020060:	d1f6      	bne.n	8020050 <MobleProvision_ProvisionerNode_CompleteOperation+0x84>
 8020062:	f8d4 2a18 	ldr.w	r2, [r4, #2584]	; 0xa18
 8020066:	7813      	ldrb	r3, [r2, #0]
 8020068:	3301      	adds	r3, #1
 802006a:	7013      	strb	r3, [r2, #0]
 802006c:	b010      	add	sp, #64	; 0x40
 802006e:	bd70      	pop	{r4, r5, r6, pc}
 8020070:	2300      	movs	r3, #0
 8020072:	e7c1      	b.n	801fff8 <MobleProvision_ProvisionerNode_CompleteOperation+0x2c>
 8020074:	20002508 	.word	0x20002508

08020078 <MobleProvision_ProvisionerNode_SetInputMessage>:
 8020078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802007c:	4680      	mov	r8, r0
 802007e:	b094      	sub	sp, #80	; 0x50
 8020080:	4617      	mov	r7, r2
 8020082:	460c      	mov	r4, r1
 8020084:	b199      	cbz	r1, 80200ae <MobleProvision_ProvisionerNode_SetInputMessage+0x36>
 8020086:	4e92      	ldr	r6, [pc, #584]	; (80202d0 <MobleProvision_ProvisionerNode_SetInputMessage+0x258>)
 8020088:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	; 0x6f0
 802008c:	f7fe ff4c 	bl	801ef28 <MobleProvisionGetRole>
 8020090:	4605      	mov	r5, r0
 8020092:	b960      	cbnz	r0, 80200ae <MobleProvision_ProvisionerNode_SetInputMessage+0x36>
 8020094:	f7e7 fef2 	bl	8007e7c <HAL_GetTick>
 8020098:	f8d6 9a18 	ldr.w	r9, [r6, #2584]	; 0xa18
 802009c:	f8d9 31a8 	ldr.w	r3, [r9, #424]	; 0x1a8
 80200a0:	1ac0      	subs	r0, r0, r3
 80200a2:	4b8c      	ldr	r3, [pc, #560]	; (80202d4 <MobleProvision_ProvisionerNode_SetInputMessage+0x25c>)
 80200a4:	4298      	cmp	r0, r3
 80200a6:	d904      	bls.n	80200b2 <MobleProvision_ProvisionerNode_SetInputMessage+0x3a>
 80200a8:	230d      	movs	r3, #13
 80200aa:	f889 3000 	strb.w	r3, [r9]
 80200ae:	2503      	movs	r5, #3
 80200b0:	e089      	b.n	80201c6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 80200b2:	f7e7 fee3 	bl	8007e7c <HAL_GetTick>
 80200b6:	f1b8 0f09 	cmp.w	r8, #9
 80200ba:	f8c9 01a8 	str.w	r0, [r9, #424]	; 0x1a8
 80200be:	d102      	bne.n	80200c6 <MobleProvision_ProvisionerNode_SetInputMessage+0x4e>
 80200c0:	2f01      	cmp	r7, #1
 80200c2:	f000 80f3 	beq.w	80202ac <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 80200c6:	f8d6 9a18 	ldr.w	r9, [r6, #2584]	; 0xa18
 80200ca:	f899 3000 	ldrb.w	r3, [r9]
 80200ce:	3b01      	subs	r3, #1
 80200d0:	2b0a      	cmp	r3, #10
 80200d2:	f200 80ef 	bhi.w	80202b4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 80200d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80200da:	000b      	.short	0x000b
 80200dc:	00ed00ed 	.word	0x00ed00ed
 80200e0:	009e007a 	.word	0x009e007a
 80200e4:	00a500ed 	.word	0x00a500ed
 80200e8:	00b100ed 	.word	0x00b100ed
 80200ec:	00ef00ed 	.word	0x00ef00ed
 80200f0:	f1b8 0f01 	cmp.w	r8, #1
 80200f4:	f040 80de 	bne.w	80202b4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 80200f8:	2f0b      	cmp	r7, #11
 80200fa:	f040 80db 	bne.w	80202b4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 80200fe:	f8d6 86f0 	ldr.w	r8, [r6, #1776]	; 0x6f0
 8020102:	7823      	ldrb	r3, [r4, #0]
 8020104:	f888 327c 	strb.w	r3, [r8, #636]	; 0x27c
 8020108:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 802010c:	ba5b      	rev16	r3, r3
 802010e:	f8a9 3002 	strh.w	r3, [r9, #2]
 8020112:	fa1f fa83 	uxth.w	sl, r3
 8020116:	78e3      	ldrb	r3, [r4, #3]
 8020118:	f888 31fe 	strb.w	r3, [r8, #510]	; 0x1fe
 802011c:	7923      	ldrb	r3, [r4, #4]
 802011e:	f888 31ff 	strb.w	r3, [r8, #511]	; 0x1ff
 8020122:	7963      	ldrb	r3, [r4, #5]
 8020124:	f888 3206 	strb.w	r3, [r8, #518]	; 0x206
 8020128:	88e3      	ldrh	r3, [r4, #6]
 802012a:	f8a8 3202 	strh.w	r3, [r8, #514]	; 0x202
 802012e:	7a23      	ldrb	r3, [r4, #8]
 8020130:	f888 3207 	strb.w	r3, [r8, #519]	; 0x207
 8020134:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 8020138:	f8a8 3204 	strh.w	r3, [r8, #516]	; 0x204
 802013c:	463a      	mov	r2, r7
 802013e:	4621      	mov	r1, r4
 8020140:	f109 0005 	add.w	r0, r9, #5
 8020144:	f008 fd22 	bl	8028b8c <memmove>
 8020148:	f01a 0f01 	tst.w	sl, #1
 802014c:	f000 80ae 	beq.w	80202ac <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 8020150:	f8d8 4290 	ldr.w	r4, [r8, #656]	; 0x290
 8020154:	2c00      	cmp	r4, #0
 8020156:	f000 80a9 	beq.w	80202ac <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 802015a:	f898 0207 	ldrb.w	r0, [r8, #519]	; 0x207
 802015e:	f8b8 3202 	ldrh.w	r3, [r8, #514]	; 0x202
 8020162:	f898 21ff 	ldrb.w	r2, [r8, #511]	; 0x1ff
 8020166:	f898 11fe 	ldrb.w	r1, [r8, #510]	; 0x1fe
 802016a:	9002      	str	r0, [sp, #8]
 802016c:	f898 0206 	ldrb.w	r0, [r8, #518]	; 0x206
 8020170:	9001      	str	r0, [sp, #4]
 8020172:	f8b8 0204 	ldrh.w	r0, [r8, #516]	; 0x204
 8020176:	9000      	str	r0, [sp, #0]
 8020178:	4857      	ldr	r0, [pc, #348]	; (80202d8 <MobleProvision_ProvisionerNode_SetInputMessage+0x260>)
 802017a:	47a0      	blx	r4
 802017c:	f896 3a1c 	ldrb.w	r3, [r6, #2588]	; 0xa1c
 8020180:	2b00      	cmp	r3, #0
 8020182:	f000 8093 	beq.w	80202ac <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 8020186:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 802018a:	f896 2a1d 	ldrb.w	r2, [r6, #2589]	; 0xa1d
 802018e:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
 8020192:	f896 2a1e 	ldrb.w	r2, [r6, #2590]	; 0xa1e
 8020196:	f896 1a1f 	ldrb.w	r1, [r6, #2591]	; 0xa1f
 802019a:	f883 11fc 	strb.w	r1, [r3, #508]	; 0x1fc
 802019e:	2a01      	cmp	r2, #1
 80201a0:	f896 1a20 	ldrb.w	r1, [r6, #2592]	; 0xa20
 80201a4:	f883 21fb 	strb.w	r2, [r3, #507]	; 0x1fb
 80201a8:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
 80201ac:	d10b      	bne.n	80201c6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 80201ae:	f7ff fe63 	bl	801fe78 <MobleProvision_ProvisionerNode_StateForOOB>
 80201b2:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 80201b6:	f893 31fa 	ldrb.w	r3, [r3, #506]	; 0x1fa
 80201ba:	b123      	cbz	r3, 80201c6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 80201bc:	f8d6 2a18 	ldr.w	r2, [r6, #2584]	; 0xa18
 80201c0:	7813      	ldrb	r3, [r2, #0]
 80201c2:	3b01      	subs	r3, #1
 80201c4:	7013      	strb	r3, [r2, #0]
 80201c6:	4628      	mov	r0, r5
 80201c8:	b014      	add	sp, #80	; 0x50
 80201ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80201ce:	f1b8 0f03 	cmp.w	r8, #3
 80201d2:	d16f      	bne.n	80202b4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 80201d4:	2f40      	cmp	r7, #64	; 0x40
 80201d6:	d16d      	bne.n	80202b4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 80201d8:	f109 08f5 	add.w	r8, r9, #245	; 0xf5
 80201dc:	463a      	mov	r2, r7
 80201de:	4621      	mov	r1, r4
 80201e0:	4640      	mov	r0, r8
 80201e2:	f008 fcd3 	bl	8028b8c <memmove>
 80201e6:	463a      	mov	r2, r7
 80201e8:	4621      	mov	r1, r4
 80201ea:	f109 0055 	add.w	r0, r9, #85	; 0x55
 80201ee:	f008 fccd 	bl	8028b8c <memmove>
 80201f2:	4640      	mov	r0, r8
 80201f4:	f7f9 fd88 	bl	8019d08 <MoblePalCryptoGetEccGenSecret>
 80201f8:	2800      	cmp	r0, #0
 80201fa:	d057      	beq.n	80202ac <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 80201fc:	f8d6 3a18 	ldr.w	r3, [r6, #2584]	; 0xa18
 8020200:	1e42      	subs	r2, r0, #1
 8020202:	f203 1335 	addw	r3, r3, #309	; 0x135
 8020206:	301f      	adds	r0, #31
 8020208:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 802020c:	f803 1b01 	strb.w	r1, [r3], #1
 8020210:	4282      	cmp	r2, r0
 8020212:	d1f9      	bne.n	8020208 <MobleProvision_ProvisionerNode_SetInputMessage+0x190>
 8020214:	e7d7      	b.n	80201c6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 8020216:	f1b8 0f04 	cmp.w	r8, #4
 802021a:	d14b      	bne.n	80202b4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 802021c:	2f00      	cmp	r7, #0
 802021e:	bf18      	it	ne
 8020220:	2502      	movne	r5, #2
 8020222:	e7d0      	b.n	80201c6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 8020224:	f1b8 0f05 	cmp.w	r8, #5
 8020228:	d144      	bne.n	80202b4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 802022a:	2f10      	cmp	r7, #16
 802022c:	d142      	bne.n	80202b4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 802022e:	463a      	mov	r2, r7
 8020230:	4621      	mov	r1, r4
 8020232:	f209 1095 	addw	r0, r9, #405	; 0x195
 8020236:	f008 fca9 	bl	8028b8c <memmove>
 802023a:	e7c4      	b.n	80201c6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 802023c:	f1b8 0f06 	cmp.w	r8, #6
 8020240:	d138      	bne.n	80202b4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 8020242:	2f10      	cmp	r7, #16
 8020244:	d136      	bne.n	80202b4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 8020246:	463a      	mov	r2, r7
 8020248:	4621      	mov	r1, r4
 802024a:	f209 1085 	addw	r0, r9, #389	; 0x185
 802024e:	af08      	add	r7, sp, #32
 8020250:	f008 fc9c 	bl	8028b8c <memmove>
 8020254:	2300      	movs	r3, #0
 8020256:	4638      	mov	r0, r7
 8020258:	e9cd 3308 	strd	r3, r3, [sp, #32]
 802025c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8020260:	f7fe ff08 	bl	801f074 <MobleProvisionGenerateAuthValue>
 8020264:	aa0c      	add	r2, sp, #48	; 0x30
 8020266:	f104 0c10 	add.w	ip, r4, #16
 802026a:	6820      	ldr	r0, [r4, #0]
 802026c:	6861      	ldr	r1, [r4, #4]
 802026e:	4613      	mov	r3, r2
 8020270:	c303      	stmia	r3!, {r0, r1}
 8020272:	3408      	adds	r4, #8
 8020274:	4564      	cmp	r4, ip
 8020276:	461a      	mov	r2, r3
 8020278:	d1f7      	bne.n	802026a <MobleProvision_ProvisionerNode_SetInputMessage+0x1f2>
 802027a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 802027e:	ac14      	add	r4, sp, #80	; 0x50
 8020280:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8020284:	f8d6 0a18 	ldr.w	r0, [r6, #2584]	; 0xa18
 8020288:	2220      	movs	r2, #32
 802028a:	a90c      	add	r1, sp, #48	; 0x30
 802028c:	f200 1055 	addw	r0, r0, #341	; 0x155
 8020290:	ab04      	add	r3, sp, #16
 8020292:	f7f8 f9b7 	bl	8018604 <BAES_CmacCompute>
 8020296:	f8d6 1a18 	ldr.w	r1, [r6, #2584]	; 0xa18
 802029a:	2210      	movs	r2, #16
 802029c:	f201 1195 	addw	r1, r1, #405	; 0x195
 80202a0:	eb0d 0002 	add.w	r0, sp, r2
 80202a4:	f008 fc54 	bl	8028b50 <memcmp>
 80202a8:	2800      	cmp	r0, #0
 80202aa:	d08c      	beq.n	80201c6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 80202ac:	f8d6 3a18 	ldr.w	r3, [r6, #2584]	; 0xa18
 80202b0:	220d      	movs	r2, #13
 80202b2:	701a      	strb	r2, [r3, #0]
 80202b4:	2502      	movs	r5, #2
 80202b6:	e786      	b.n	80201c6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 80202b8:	f1b8 0f08 	cmp.w	r8, #8
 80202bc:	d1fa      	bne.n	80202b4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 80202be:	2f00      	cmp	r7, #0
 80202c0:	d1f8      	bne.n	80202b4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 80202c2:	230c      	movs	r3, #12
 80202c4:	f889 3000 	strb.w	r3, [r9]
 80202c8:	f7e6 f8da 	bl	8006480 <BLEMesh_ProvisionCallback>
 80202cc:	463d      	mov	r5, r7
 80202ce:	e77a      	b.n	80201c6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 80202d0:	20002508 	.word	0x20002508
 80202d4:	0001d4c0 	.word	0x0001d4c0
 80202d8:	20002f24 	.word	0x20002f24

080202dc <MobleProvision_ProvisionerNode_GetOutputMessage>:
 80202dc:	b410      	push	{r4}
 80202de:	b129      	cbz	r1, 80202ec <MobleProvision_ProvisionerNode_GetOutputMessage+0x10>
 80202e0:	b122      	cbz	r2, 80202ec <MobleProvision_ProvisionerNode_GetOutputMessage+0x10>
 80202e2:	b118      	cbz	r0, 80202ec <MobleProvision_ProvisionerNode_GetOutputMessage+0x10>
 80202e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80202e8:	f7ff babc 	b.w	801f864 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0>
 80202ec:	2003      	movs	r0, #3
 80202ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80202f2:	4770      	bx	lr

080202f4 <MobleProvision_ProvisionerNode_IsCompleted>:
 80202f4:	4b04      	ldr	r3, [pc, #16]	; (8020308 <MobleProvision_ProvisionerNode_IsCompleted+0x14>)
 80202f6:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
 80202fa:	7818      	ldrb	r0, [r3, #0]
 80202fc:	f1a0 030c 	sub.w	r3, r0, #12
 8020300:	4258      	negs	r0, r3
 8020302:	4158      	adcs	r0, r3
 8020304:	4770      	bx	lr
 8020306:	bf00      	nop
 8020308:	20002508 	.word	0x20002508

0802030c <MobleProvision_GetNextOperation>:
 802030c:	b908      	cbnz	r0, 8020312 <MobleProvision_GetNextOperation+0x6>
 802030e:	f7ff bd9d 	b.w	801fe4c <MobleProvision_ProvisionerNode_GetNextOperation>
 8020312:	f7fe bf61 	b.w	801f1d8 <MobleProvision_UnprovisionedNode_GetNextOperation>

08020316 <MobleProvision_GetOutputMessage>:
 8020316:	b410      	push	{r4}
 8020318:	4604      	mov	r4, r0
 802031a:	4608      	mov	r0, r1
 802031c:	4611      	mov	r1, r2
 802031e:	461a      	mov	r2, r3
 8020320:	b91c      	cbnz	r4, 802032a <MobleProvision_GetOutputMessage+0x14>
 8020322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020326:	f7ff bfd9 	b.w	80202dc <MobleProvision_ProvisionerNode_GetOutputMessage>
 802032a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802032e:	f7ff bcc7 	b.w	801fcc0 <MobleProvision_UnprovisionedNode_GetOutputMessage>

08020332 <MobleProvision_IsCompleted>:
 8020332:	b908      	cbnz	r0, 8020338 <MobleProvision_IsCompleted+0x6>
 8020334:	f7ff bfde 	b.w	80202f4 <MobleProvision_ProvisionerNode_IsCompleted>
 8020338:	f7ff bd40 	b.w	801fdbc <MobleProvision_UnprovisionedNode_IsCompleted>

0802033c <MoblePBADVInit>:
 802033c:	4b0b      	ldr	r3, [pc, #44]	; (802036c <MoblePBADVInit+0x30>)
 802033e:	f203 62fc 	addw	r2, r3, #1788	; 0x6fc
 8020342:	6002      	str	r2, [r0, #0]
 8020344:	f893 26fc 	ldrb.w	r2, [r3, #1788]	; 0x6fc
 8020348:	b132      	cbz	r2, 8020358 <MoblePBADVInit+0x1c>
 802034a:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
 802034e:	3201      	adds	r2, #1
 8020350:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
 8020354:	2000      	movs	r0, #0
 8020356:	4770      	bx	lr
 8020358:	2101      	movs	r1, #1
 802035a:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
 802035e:	f883 16fc 	strb.w	r1, [r3, #1788]	; 0x6fc
 8020362:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
 8020366:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
 802036a:	e7f3      	b.n	8020354 <MoblePBADVInit+0x18>
 802036c:	20002508 	.word	0x20002508

08020370 <MoblePBADVStartProvisioning>:
 8020370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020374:	2a01      	cmp	r2, #1
 8020376:	9e08      	ldr	r6, [sp, #32]
 8020378:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802037c:	4604      	mov	r4, r0
 802037e:	460f      	mov	r7, r1
 8020380:	4615      	mov	r5, r2
 8020382:	4698      	mov	r8, r3
 8020384:	d145      	bne.n	8020412 <MoblePBADVStartProvisioning+0xa2>
 8020386:	7a03      	ldrb	r3, [r0, #8]
 8020388:	2b01      	cmp	r3, #1
 802038a:	d106      	bne.n	802039a <MoblePBADVStartProvisioning+0x2a>
 802038c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8020390:	2b01      	cmp	r3, #1
 8020392:	d102      	bne.n	802039a <MoblePBADVStartProvisioning+0x2a>
 8020394:	2002      	movs	r0, #2
 8020396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802039a:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
 802039e:	2b01      	cmp	r3, #1
 80203a0:	d032      	beq.n	8020408 <MoblePBADVStartProvisioning+0x98>
 80203a2:	4620      	mov	r0, r4
 80203a4:	f7f7 fe72 	bl	801808c <MoblePBADVGetNewLink>
 80203a8:	4604      	mov	r4, r0
 80203aa:	2800      	cmp	r0, #0
 80203ac:	d0f2      	beq.n	8020394 <MoblePBADVStartProvisioning+0x24>
 80203ae:	2d01      	cmp	r5, #1
 80203b0:	d145      	bne.n	802043e <MoblePBADVStartProvisioning+0xce>
 80203b2:	2300      	movs	r3, #0
 80203b4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80203b8:	2380      	movs	r3, #128	; 0x80
 80203ba:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 80203be:	463b      	mov	r3, r7
 80203c0:	f104 0208 	add.w	r2, r4, #8
 80203c4:	f107 0110 	add.w	r1, r7, #16
 80203c8:	f853 0b04 	ldr.w	r0, [r3], #4
 80203cc:	f842 0b04 	str.w	r0, [r2], #4
 80203d0:	428b      	cmp	r3, r1
 80203d2:	d1f9      	bne.n	80203c8 <MoblePBADVStartProvisioning+0x58>
 80203d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80203d6:	f8c4 8018 	str.w	r8, [r4, #24]
 80203da:	f884 5020 	strb.w	r5, [r4, #32]
 80203de:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 80203e2:	f1b9 0f00 	cmp.w	r9, #0
 80203e6:	d001      	beq.n	80203ec <MoblePBADVStartProvisioning+0x7c>
 80203e8:	f8c4 916c 	str.w	r9, [r4, #364]	; 0x16c
 80203ec:	b945      	cbnz	r5, 8020400 <MoblePBADVStartProvisioning+0x90>
 80203ee:	2301      	movs	r3, #1
 80203f0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 80203f4:	463a      	mov	r2, r7
 80203f6:	2310      	movs	r3, #16
 80203f8:	4629      	mov	r1, r5
 80203fa:	4620      	mov	r0, r4
 80203fc:	f7fa fc56 	bl	801acac <MoblePBADVSendControl.isra.0>
 8020400:	b32e      	cbz	r6, 802044e <MoblePBADVStartProvisioning+0xde>
 8020402:	6034      	str	r4, [r6, #0]
 8020404:	2000      	movs	r0, #0
 8020406:	e7c6      	b.n	8020396 <MoblePBADVStartProvisioning+0x26>
 8020408:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
 802040c:	2b01      	cmp	r3, #1
 802040e:	d1c8      	bne.n	80203a2 <MoblePBADVStartProvisioning+0x32>
 8020410:	e7c0      	b.n	8020394 <MoblePBADVStartProvisioning+0x24>
 8020412:	2a00      	cmp	r2, #0
 8020414:	d1c5      	bne.n	80203a2 <MoblePBADVStartProvisioning+0x32>
 8020416:	7a03      	ldrb	r3, [r0, #8]
 8020418:	2b01      	cmp	r3, #1
 802041a:	d103      	bne.n	8020424 <MoblePBADVStartProvisioning+0xb4>
 802041c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8020420:	2b00      	cmp	r3, #0
 8020422:	d0b7      	beq.n	8020394 <MoblePBADVStartProvisioning+0x24>
 8020424:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
 8020428:	2b01      	cmp	r3, #1
 802042a:	d103      	bne.n	8020434 <MoblePBADVStartProvisioning+0xc4>
 802042c:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
 8020430:	2b00      	cmp	r3, #0
 8020432:	d0af      	beq.n	8020394 <MoblePBADVStartProvisioning+0x24>
 8020434:	f7ff fcce 	bl	801fdd4 <MobleProvision_ProvisionerNode_Init>
 8020438:	2800      	cmp	r0, #0
 802043a:	d0b2      	beq.n	80203a2 <MoblePBADVStartProvisioning+0x32>
 802043c:	e7aa      	b.n	8020394 <MoblePBADVStartProvisioning+0x24>
 802043e:	2d00      	cmp	r5, #0
 8020440:	d1bd      	bne.n	80203be <MoblePBADVStartProvisioning+0x4e>
 8020442:	2380      	movs	r3, #128	; 0x80
 8020444:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8020448:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
 802044c:	e7b7      	b.n	80203be <MoblePBADVStartProvisioning+0x4e>
 802044e:	4630      	mov	r0, r6
 8020450:	e7a1      	b.n	8020396 <MoblePBADVStartProvisioning+0x26>
	...

08020454 <MobleStackStartPBADVUnprovisioned>:
 8020454:	b530      	push	{r4, r5, lr}
 8020456:	4d0d      	ldr	r5, [pc, #52]	; (802048c <MobleStackStartPBADVUnprovisioned+0x38>)
 8020458:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
 802045c:	781c      	ldrb	r4, [r3, #0]
 802045e:	b089      	sub	sp, #36	; 0x24
 8020460:	b98c      	cbnz	r4, 8020486 <MobleStackStartPBADVUnprovisioned+0x32>
 8020462:	4b0b      	ldr	r3, [pc, #44]	; (8020490 <MobleStackStartPBADVUnprovisioned+0x3c>)
 8020464:	685b      	ldr	r3, [r3, #4]
 8020466:	a804      	add	r0, sp, #16
 8020468:	695b      	ldr	r3, [r3, #20]
 802046a:	4798      	blx	r3
 802046c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8020470:	f8d5 091c 	ldr.w	r0, [r5, #2332]	; 0x91c
 8020474:	9400      	str	r4, [sp, #0]
 8020476:	2318      	movs	r3, #24
 8020478:	2201      	movs	r2, #1
 802047a:	a904      	add	r1, sp, #16
 802047c:	f7ff ff78 	bl	8020370 <MoblePBADVStartProvisioning>
 8020480:	4620      	mov	r0, r4
 8020482:	b009      	add	sp, #36	; 0x24
 8020484:	bd30      	pop	{r4, r5, pc}
 8020486:	2401      	movs	r4, #1
 8020488:	e7fa      	b.n	8020480 <MobleStackStartPBADVUnprovisioned+0x2c>
 802048a:	bf00      	nop
 802048c:	20001410 	.word	0x20001410
 8020490:	20000318 	.word	0x20000318

08020494 <MobleStackSetupBeacon>:
 8020494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020496:	4604      	mov	r4, r0
 8020498:	2800      	cmp	r0, #0
 802049a:	d044      	beq.n	8020526 <MobleStackSetupBeacon+0x92>
 802049c:	f890 31d4 	ldrb.w	r3, [r0, #468]	; 0x1d4
 80204a0:	2b01      	cmp	r3, #1
 80204a2:	d101      	bne.n	80204a8 <MobleStackSetupBeacon+0x14>
 80204a4:	f7ff ffd6 	bl	8020454 <MobleStackStartPBADVUnprovisioned>
 80204a8:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 80204ac:	2200      	movs	r2, #0
 80204ae:	9300      	str	r3, [sp, #0]
 80204b0:	481e      	ldr	r0, [pc, #120]	; (802052c <MobleStackSetupBeacon+0x98>)
 80204b2:	f504 73ee 	add.w	r3, r4, #476	; 0x1dc
 80204b6:	4611      	mov	r1, r2
 80204b8:	f7fa fbc6 	bl	801ac48 <MobleTransmitRegularlyGenerated>
 80204bc:	2801      	cmp	r0, #1
 80204be:	d830      	bhi.n	8020522 <MobleStackSetupBeacon+0x8e>
 80204c0:	6823      	ldr	r3, [r4, #0]
 80204c2:	4d1b      	ldr	r5, [pc, #108]	; (8020530 <MobleStackSetupBeacon+0x9c>)
 80204c4:	781b      	ldrb	r3, [r3, #0]
 80204c6:	f8d5 0858 	ldr.w	r0, [r5, #2136]	; 0x858
 80204ca:	2b01      	cmp	r3, #1
 80204cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80204d0:	bf18      	it	ne
 80204d2:	f44f 737a 	movne.w	r3, #1000	; 0x3e8
 80204d6:	f8a4 31dc 	strh.w	r3, [r4, #476]	; 0x1dc
 80204da:	f7fa fb81 	bl	801abe0 <BnrgmTransmitChangeRegularlyGeneratedInterval>
 80204de:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
 80204e2:	2201      	movs	r2, #1
 80204e4:	9300      	str	r3, [sp, #0]
 80204e6:	4813      	ldr	r0, [pc, #76]	; (8020534 <MobleStackSetupBeacon+0xa0>)
 80204e8:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 80204ec:	4611      	mov	r1, r2
 80204ee:	f7fa fbab 	bl	801ac48 <MobleTransmitRegularlyGenerated>
 80204f2:	2801      	cmp	r0, #1
 80204f4:	d815      	bhi.n	8020522 <MobleStackSetupBeacon+0x8e>
 80204f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80204fa:	f8a4 31e4 	strh.w	r3, [r4, #484]	; 0x1e4
 80204fe:	f8d5 0860 	ldr.w	r0, [r5, #2144]	; 0x860
 8020502:	f7fa fb6d 	bl	801abe0 <BnrgmTransmitChangeRegularlyGeneratedInterval>
 8020506:	f504 73f4 	add.w	r3, r4, #488	; 0x1e8
 802050a:	2200      	movs	r2, #0
 802050c:	9300      	str	r3, [sp, #0]
 802050e:	480a      	ldr	r0, [pc, #40]	; (8020538 <MobleStackSetupBeacon+0xa4>)
 8020510:	f504 73f6 	add.w	r3, r4, #492	; 0x1ec
 8020514:	4611      	mov	r1, r2
 8020516:	f7fa fb97 	bl	801ac48 <MobleTransmitRegularlyGenerated>
 802051a:	2802      	cmp	r0, #2
 802051c:	bf28      	it	cs
 802051e:	2002      	movcs	r0, #2
 8020520:	b2c0      	uxtb	r0, r0
 8020522:	b003      	add	sp, #12
 8020524:	bd30      	pop	{r4, r5, pc}
 8020526:	2002      	movs	r0, #2
 8020528:	e7fb      	b.n	8020522 <MobleStackSetupBeacon+0x8e>
 802052a:	bf00      	nop
 802052c:	0802104d 	.word	0x0802104d
 8020530:	20001410 	.word	0x20001410
 8020534:	0801d6c9 	.word	0x0801d6c9
 8020538:	0801d1a1 	.word	0x0801d1a1

0802053c <MobleStackFSM>:
 802053c:	b538      	push	{r3, r4, r5, lr}
 802053e:	4605      	mov	r5, r0
 8020540:	2800      	cmp	r0, #0
 8020542:	d05c      	beq.n	80205fe <MobleStackFSM+0xc2>
 8020544:	f890 416c 	ldrb.w	r4, [r0, #364]	; 0x16c
 8020548:	2c04      	cmp	r4, #4
 802054a:	d853      	bhi.n	80205f4 <MobleStackFSM+0xb8>
 802054c:	e8df f004 	tbb	[pc, r4]
 8020550:	522a1303 	.word	0x522a1303
 8020554:	45          	.byte	0x45
 8020555:	00          	.byte	0x00
 8020556:	2906      	cmp	r1, #6
 8020558:	d809      	bhi.n	802056e <MobleStackFSM+0x32>
 802055a:	e8df f001 	tbb	[pc, r1]
 802055e:	0849      	.short	0x0849
 8020560:	04044908 	.word	0x04044908
 8020564:	16          	.byte	0x16
 8020565:	00          	.byte	0x00
 8020566:	f7ff ff95 	bl	8020494 <MobleStackSetupBeacon>
 802056a:	2801      	cmp	r0, #1
 802056c:	d93d      	bls.n	80205ea <MobleStackFSM+0xae>
 802056e:	2303      	movs	r3, #3
 8020570:	f885 316c 	strb.w	r3, [r5, #364]	; 0x16c
 8020574:	e005      	b.n	8020582 <MobleStackFSM+0x46>
 8020576:	2905      	cmp	r1, #5
 8020578:	d805      	bhi.n	8020586 <MobleStackFSM+0x4a>
 802057a:	2903      	cmp	r1, #3
 802057c:	d80b      	bhi.n	8020596 <MobleStackFSM+0x5a>
 802057e:	2901      	cmp	r1, #1
 8020580:	d007      	beq.n	8020592 <MobleStackFSM+0x56>
 8020582:	2400      	movs	r4, #0
 8020584:	e034      	b.n	80205f0 <MobleStackFSM+0xb4>
 8020586:	2906      	cmp	r1, #6
 8020588:	d1fb      	bne.n	8020582 <MobleStackFSM+0x46>
 802058a:	f7fe ffa1 	bl	801f4d0 <MobleTransmitSuspendAll>
 802058e:	2304      	movs	r3, #4
 8020590:	e7ee      	b.n	8020570 <MobleStackFSM+0x34>
 8020592:	2302      	movs	r3, #2
 8020594:	e7ec      	b.n	8020570 <MobleStackFSM+0x34>
 8020596:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 802059a:	f7fa fabb 	bl	801ab14 <MobleTransmitOutOfTurn>
 802059e:	2801      	cmp	r0, #1
 80205a0:	d8e5      	bhi.n	802056e <MobleStackFSM+0x32>
 80205a2:	e7ee      	b.n	8020582 <MobleStackFSM+0x46>
 80205a4:	3901      	subs	r1, #1
 80205a6:	2905      	cmp	r1, #5
 80205a8:	d8e1      	bhi.n	802056e <MobleStackFSM+0x32>
 80205aa:	a301      	add	r3, pc, #4	; (adr r3, 80205b0 <MobleStackFSM+0x74>)
 80205ac:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80205b0:	08020583 	.word	0x08020583
 80205b4:	080205c9 	.word	0x080205c9
 80205b8:	08020583 	.word	0x08020583
 80205bc:	08020583 	.word	0x08020583
 80205c0:	08020583 	.word	0x08020583
 80205c4:	080205cd 	.word	0x080205cd
 80205c8:	2301      	movs	r3, #1
 80205ca:	e7d1      	b.n	8020570 <MobleStackFSM+0x34>
 80205cc:	4b0d      	ldr	r3, [pc, #52]	; (8020604 <MobleStackFSM+0xc8>)
 80205ce:	2116      	movs	r1, #22
 80205d0:	f8b3 0382 	ldrh.w	r0, [r3, #898]	; 0x382
 80205d4:	f7f4 f86c 	bl	80146b0 <aci_gap_terminate>
 80205d8:	e7d7      	b.n	802058a <MobleStackFSM+0x4e>
 80205da:	2907      	cmp	r1, #7
 80205dc:	d1d1      	bne.n	8020582 <MobleStackFSM+0x46>
 80205de:	4b0a      	ldr	r3, [pc, #40]	; (8020608 <MobleStackFSM+0xcc>)
 80205e0:	2400      	movs	r4, #0
 80205e2:	f883 4166 	strb.w	r4, [r3, #358]	; 0x166
 80205e6:	f7fe ff83 	bl	801f4f0 <MobleTransmitResumeAll>
 80205ea:	2301      	movs	r3, #1
 80205ec:	f885 316c 	strb.w	r3, [r5, #364]	; 0x16c
 80205f0:	4620      	mov	r0, r4
 80205f2:	bd38      	pop	{r3, r4, r5, pc}
 80205f4:	2303      	movs	r3, #3
 80205f6:	f880 316c 	strb.w	r3, [r0, #364]	; 0x16c
 80205fa:	2402      	movs	r4, #2
 80205fc:	e7f8      	b.n	80205f0 <MobleStackFSM+0xb4>
 80205fe:	2403      	movs	r4, #3
 8020600:	e7f6      	b.n	80205f0 <MobleStackFSM+0xb4>
 8020602:	bf00      	nop
 8020604:	20001410 	.word	0x20001410
 8020608:	20003f58 	.word	0x20003f58

0802060c <MobleStackTimerCallback>:
 802060c:	4801      	ldr	r0, [pc, #4]	; (8020614 <MobleStackTimerCallback+0x8>)
 802060e:	2100      	movs	r1, #0
 8020610:	f7ff bf94 	b.w	802053c <MobleStackFSM>
 8020614:	20001a90 	.word	0x20001a90

08020618 <MobleStackInit>:
 8020618:	b5f0      	push	{r4, r5, r6, r7, lr}
 802061a:	b085      	sub	sp, #20
 802061c:	4616      	mov	r6, r2
 802061e:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 8020622:	b911      	cbnz	r1, 802062a <MobleStackInit+0x12>
 8020624:	2003      	movs	r0, #3
 8020626:	b005      	add	sp, #20
 8020628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802062a:	4d45      	ldr	r5, [pc, #276]	; (8020740 <MobleStackInit+0x128>)
 802062c:	9303      	str	r3, [sp, #12]
 802062e:	f505 67d0 	add.w	r7, r5, #1664	; 0x680
 8020632:	07a3      	lsls	r3, r4, #30
 8020634:	600f      	str	r7, [r1, #0]
 8020636:	f8c5 0680 	str.w	r0, [r5, #1664]	; 0x680
 802063a:	d0f3      	beq.n	8020624 <MobleStackInit+0xc>
 802063c:	f004 0201 	and.w	r2, r4, #1
 8020640:	f3c4 0440 	ubfx	r4, r4, #1, #1
 8020644:	f885 2854 	strb.w	r2, [r5, #2132]	; 0x854
 8020648:	f885 4855 	strb.w	r4, [r5, #2133]	; 0x855
 802064c:	f7f7 fa52 	bl	8017af4 <MoblePalTimerInit>
 8020650:	2801      	cmp	r0, #1
 8020652:	9b03      	ldr	r3, [sp, #12]
 8020654:	d8e7      	bhi.n	8020626 <MobleStackInit+0xe>
 8020656:	4a3b      	ldr	r2, [pc, #236]	; (8020744 <MobleStackInit+0x12c>)
 8020658:	f8c5 2344 	str.w	r2, [r5, #836]	; 0x344
 802065c:	4a3a      	ldr	r2, [pc, #232]	; (8020748 <MobleStackInit+0x130>)
 802065e:	f8c5 2348 	str.w	r2, [r5, #840]	; 0x348
 8020662:	2200      	movs	r2, #0
 8020664:	f8c5 27e4 	str.w	r2, [r5, #2020]	; 0x7e4
 8020668:	4a38      	ldr	r2, [pc, #224]	; (802074c <MobleStackInit+0x134>)
 802066a:	9201      	str	r2, [sp, #4]
 802066c:	4a38      	ldr	r2, [pc, #224]	; (8020750 <MobleStackInit+0x138>)
 802066e:	9200      	str	r2, [sp, #0]
 8020670:	7831      	ldrb	r1, [r6, #0]
 8020672:	6872      	ldr	r2, [r6, #4]
 8020674:	4638      	mov	r0, r7
 8020676:	f7f7 fcc3 	bl	8018000 <MoblePalBluetoothInit>
 802067a:	2801      	cmp	r0, #1
 802067c:	d8d3      	bhi.n	8020626 <MobleStackInit+0xe>
 802067e:	f7f8 fc4f 	bl	8018f20 <MoblePalCryptoInit>
 8020682:	2801      	cmp	r0, #1
 8020684:	d8cf      	bhi.n	8020626 <MobleStackInit+0xe>
 8020686:	f895 3854 	ldrb.w	r3, [r5, #2132]	; 0x854
 802068a:	2b01      	cmp	r3, #1
 802068c:	d012      	beq.n	80206b4 <MobleStackInit+0x9c>
 802068e:	2301      	movs	r3, #1
 8020690:	f8d5 0680 	ldr.w	r0, [r5, #1664]	; 0x680
 8020694:	f885 3934 	strb.w	r3, [r5, #2356]	; 0x934
 8020698:	f7fc fa7e 	bl	801cb98 <MobleConfigNetworkLoad>
 802069c:	2801      	cmp	r0, #1
 802069e:	d810      	bhi.n	80206c2 <MobleStackInit+0xaa>
 80206a0:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
 80206a4:	4618      	mov	r0, r3
 80206a6:	f7fc fbc9 	bl	801ce3c <MobleConfigCheck>
 80206aa:	7018      	strb	r0, [r3, #0]
 80206ac:	b978      	cbnz	r0, 80206ce <MobleStackInit+0xb6>
 80206ae:	f885 0934 	strb.w	r0, [r5, #2356]	; 0x934
 80206b2:	e00c      	b.n	80206ce <MobleStackInit+0xb6>
 80206b4:	f605 101c 	addw	r0, r5, #2332	; 0x91c
 80206b8:	f7ff fe40 	bl	802033c <MoblePBADVInit>
 80206bc:	2801      	cmp	r0, #1
 80206be:	d9e6      	bls.n	802068e <MobleStackInit+0x76>
 80206c0:	e7b1      	b.n	8020626 <MobleStackInit+0xe>
 80206c2:	f8d5 2680 	ldr.w	r2, [r5, #1664]	; 0x680
 80206c6:	2300      	movs	r3, #0
 80206c8:	7013      	strb	r3, [r2, #0]
 80206ca:	f885 3934 	strb.w	r3, [r5, #2356]	; 0x934
 80206ce:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
 80206d2:	6858      	ldr	r0, [r3, #4]
 80206d4:	f7f9 fa8e 	bl	8019bf4 <MoblePalCryptoSetIvIndex>
 80206d8:	2801      	cmp	r0, #1
 80206da:	d8a4      	bhi.n	8020626 <MobleStackInit+0xe>
 80206dc:	f7fe fc42 	bl	801ef64 <MoblePalBluetoothReset>
 80206e0:	4a1c      	ldr	r2, [pc, #112]	; (8020754 <MobleStackInit+0x13c>)
 80206e2:	491d      	ldr	r1, [pc, #116]	; (8020758 <MobleStackInit+0x140>)
 80206e4:	f502 70ba 	add.w	r0, r2, #372	; 0x174
 80206e8:	f7f7 fa14 	bl	8017b14 <MoblePalTimerCreate>
 80206ec:	2801      	cmp	r0, #1
 80206ee:	d89a      	bhi.n	8020626 <MobleStackInit+0xe>
 80206f0:	4b1a      	ldr	r3, [pc, #104]	; (802075c <MobleStackInit+0x144>)
 80206f2:	4818      	ldr	r0, [pc, #96]	; (8020754 <MobleStackInit+0x13c>)
 80206f4:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
 80206f8:	f7fe fa98 	bl	801ec2c <MobleProvisionUpdateRole>
 80206fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80206fe:	8818      	ldrh	r0, [r3, #0]
 8020700:	f7fe fec4 	bl	801f48c <MobleTransmitInit>
 8020704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020708:	2400      	movs	r4, #0
 802070a:	f8c5 3858 	str.w	r3, [r5, #2136]	; 0x858
 802070e:	f8c5 3860 	str.w	r3, [r5, #2144]	; 0x860
 8020712:	4b13      	ldr	r3, [pc, #76]	; (8020760 <MobleStackInit+0x148>)
 8020714:	f8c5 3924 	str.w	r3, [r5, #2340]	; 0x924
 8020718:	f8a5 4850 	strh.w	r4, [r5, #2128]	; 0x850
 802071c:	f885 47ec 	strb.w	r4, [r5, #2028]	; 0x7ec
 8020720:	f7e7 fbac 	bl	8007e7c <HAL_GetTick>
 8020724:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
 8020728:	f8c5 0928 	str.w	r0, [r5, #2344]	; 0x928
 802072c:	781b      	ldrb	r3, [r3, #0]
 802072e:	4809      	ldr	r0, [pc, #36]	; (8020754 <MobleStackInit+0x13c>)
 8020730:	42a3      	cmp	r3, r4
 8020732:	bf0c      	ite	eq
 8020734:	2105      	moveq	r1, #5
 8020736:	2104      	movne	r1, #4
 8020738:	f7ff ff00 	bl	802053c <MobleStackFSM>
 802073c:	4620      	mov	r0, r4
 802073e:	e772      	b.n	8020626 <MobleStackInit+0xe>
 8020740:	20001410 	.word	0x20001410
 8020744:	08017961 	.word	0x08017961
 8020748:	08027d21 	.word	0x08027d21
 802074c:	08028157 	.word	0x08028157
 8020750:	0801d071 	.word	0x0801d071
 8020754:	20001a90 	.word	0x20001a90
 8020758:	0802060d 	.word	0x0802060d
 802075c:	08027b29 	.word	0x08027b29
 8020760:	1ee62800 	.word	0x1ee62800

08020764 <MobleStackSendData>:
 8020764:	b570      	push	{r4, r5, r6, lr}
 8020766:	4604      	mov	r4, r0
 8020768:	b08a      	sub	sp, #40	; 0x28
 802076a:	2800      	cmp	r0, #0
 802076c:	d03e      	beq.n	80207ec <MobleStackSendData+0x88>
 802076e:	7a05      	ldrb	r5, [r0, #8]
 8020770:	f1a5 030e 	sub.w	r3, r5, #14
 8020774:	2b0f      	cmp	r3, #15
 8020776:	d839      	bhi.n	80207ec <MobleStackSendData+0x88>
 8020778:	4b1e      	ldr	r3, [pc, #120]	; (80207f4 <MobleStackSendData+0x90>)
 802077a:	f893 27ec 	ldrb.w	r2, [r3, #2028]	; 0x7ec
 802077e:	2a04      	cmp	r2, #4
 8020780:	d036      	beq.n	80207f0 <MobleStackSendData+0x8c>
 8020782:	f8d3 3680 	ldr.w	r3, [r3, #1664]	; 0x680
 8020786:	781b      	ldrb	r3, [r3, #0]
 8020788:	2b01      	cmp	r3, #1
 802078a:	d128      	bne.n	80207de <MobleStackSendData+0x7a>
 802078c:	6846      	ldr	r6, [r0, #4]
 802078e:	1c6b      	adds	r3, r5, #1
 8020790:	f88d 3008 	strb.w	r3, [sp, #8]
 8020794:	462a      	mov	r2, r5
 8020796:	232a      	movs	r3, #42	; 0x2a
 8020798:	4631      	mov	r1, r6
 802079a:	f10d 000a 	add.w	r0, sp, #10
 802079e:	f88d 3009 	strb.w	r3, [sp, #9]
 80207a2:	f008 f9e5 	bl	8028b70 <memcpy>
 80207a6:	462b      	mov	r3, r5
 80207a8:	4632      	mov	r2, r6
 80207aa:	8ae1      	ldrh	r1, [r4, #22]
 80207ac:	2000      	movs	r0, #0
 80207ae:	f7fd f93d 	bl	801da2c <BnrgmProxyProtocol_SendData>
 80207b2:	4b11      	ldr	r3, [pc, #68]	; (80207f8 <MobleStackSendData+0x94>)
 80207b4:	f893 26f4 	ldrb.w	r2, [r3, #1780]	; 0x6f4
 80207b8:	b122      	cbz	r2, 80207c4 <MobleStackSendData+0x60>
 80207ba:	f8b3 26f6 	ldrh.w	r2, [r3, #1782]	; 0x6f6
 80207be:	8ae3      	ldrh	r3, [r4, #22]
 80207c0:	429a      	cmp	r2, r3
 80207c2:	d00c      	beq.n	80207de <MobleStackSendData+0x7a>
 80207c4:	2314      	movs	r3, #20
 80207c6:	7a22      	ldrb	r2, [r4, #8]
 80207c8:	9301      	str	r3, [sp, #4]
 80207ca:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80207ce:	9300      	str	r3, [sp, #0]
 80207d0:	3202      	adds	r2, #2
 80207d2:	8b60      	ldrh	r0, [r4, #26]
 80207d4:	2300      	movs	r3, #0
 80207d6:	b2d2      	uxtb	r2, r2
 80207d8:	a902      	add	r1, sp, #8
 80207da:	f7fa fa51 	bl	801ac80 <BnrgmTransmitSend>
 80207de:	4807      	ldr	r0, [pc, #28]	; (80207fc <MobleStackSendData+0x98>)
 80207e0:	2103      	movs	r1, #3
 80207e2:	f7ff feab 	bl	802053c <MobleStackFSM>
 80207e6:	2000      	movs	r0, #0
 80207e8:	b00a      	add	sp, #40	; 0x28
 80207ea:	bd70      	pop	{r4, r5, r6, pc}
 80207ec:	2003      	movs	r0, #3
 80207ee:	e7fb      	b.n	80207e8 <MobleStackSendData+0x84>
 80207f0:	2002      	movs	r0, #2
 80207f2:	e7f9      	b.n	80207e8 <MobleStackSendData+0x84>
 80207f4:	20001410 	.word	0x20001410
 80207f8:	20002508 	.word	0x20002508
 80207fc:	20001a90 	.word	0x20001a90

08020800 <MobleNetworkSendDataEx>:
 8020800:	b570      	push	{r4, r5, r6, lr}
 8020802:	460c      	mov	r4, r1
 8020804:	b08a      	sub	sp, #40	; 0x28
 8020806:	461d      	mov	r5, r3
 8020808:	b930      	cbnz	r0, 8020818 <MobleNetworkSendDataEx+0x18>
 802080a:	4b1c      	ldr	r3, [pc, #112]	; (802087c <MobleNetworkSendDataEx+0x7c>)
 802080c:	4a1c      	ldr	r2, [pc, #112]	; (8020880 <MobleNetworkSendDataEx+0x80>)
 802080e:	f240 118d 	movw	r1, #397	; 0x18d
 8020812:	481c      	ldr	r0, [pc, #112]	; (8020884 <MobleNetworkSendDataEx+0x84>)
 8020814:	f008 f942 	bl	8028a9c <__assert_func>
 8020818:	b922      	cbnz	r2, 8020824 <MobleNetworkSendDataEx+0x24>
 802081a:	4b1b      	ldr	r3, [pc, #108]	; (8020888 <MobleNetworkSendDataEx+0x88>)
 802081c:	4a18      	ldr	r2, [pc, #96]	; (8020880 <MobleNetworkSendDataEx+0x80>)
 802081e:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8020822:	e7f6      	b.n	8020812 <MobleNetworkSendDataEx+0x12>
 8020824:	f890 116c 	ldrb.w	r1, [r0, #364]	; 0x16c
 8020828:	2904      	cmp	r1, #4
 802082a:	d102      	bne.n	8020832 <MobleNetworkSendDataEx+0x32>
 802082c:	2002      	movs	r0, #2
 802082e:	b00a      	add	sp, #40	; 0x28
 8020830:	bd70      	pop	{r4, r5, r6, pc}
 8020832:	8b61      	ldrh	r1, [r4, #26]
 8020834:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8020838:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 802083c:	73a0      	strb	r0, [r4, #14]
 802083e:	8361      	strh	r1, [r4, #26]
 8020840:	4812      	ldr	r0, [pc, #72]	; (802088c <MobleNetworkSendDataEx+0x8c>)
 8020842:	7f21      	ldrb	r1, [r4, #28]
 8020844:	4408      	add	r0, r1
 8020846:	ae02      	add	r6, sp, #8
 8020848:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
 802084c:	1e81      	subs	r1, r0, #2
 802084e:	4248      	negs	r0, r1
 8020850:	4148      	adcs	r0, r1
 8020852:	9000      	str	r0, [sp, #0]
 8020854:	4631      	mov	r1, r6
 8020856:	4620      	mov	r0, r4
 8020858:	f7fa fcd6 	bl	801b208 <MoblePalCryptoEncryptNetwork>
 802085c:	2801      	cmp	r0, #1
 802085e:	d8e5      	bhi.n	802082c <MobleNetworkSendDataEx+0x2c>
 8020860:	7ba3      	ldrb	r3, [r4, #14]
 8020862:	6066      	str	r6, [r4, #4]
 8020864:	2b00      	cmp	r3, #0
 8020866:	bf14      	ite	ne
 8020868:	2208      	movne	r2, #8
 802086a:	2204      	moveq	r2, #4
 802086c:	3509      	adds	r5, #9
 802086e:	4415      	add	r5, r2
 8020870:	7225      	strb	r5, [r4, #8]
 8020872:	4620      	mov	r0, r4
 8020874:	f7ff ff76 	bl	8020764 <MobleStackSendData>
 8020878:	2000      	movs	r0, #0
 802087a:	e7d8      	b.n	802082e <MobleNetworkSendDataEx+0x2e>
 802087c:	08033440 	.word	0x08033440
 8020880:	080319dd 	.word	0x080319dd
 8020884:	0803391e 	.word	0x0803391e
 8020888:	0803368f 	.word	0x0803368f
 802088c:	20000318 	.word	0x20000318

08020890 <BnrgmFrndFnSendLpnMsg>:
 8020890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020892:	4614      	mov	r4, r2
 8020894:	b08b      	sub	sp, #44	; 0x2c
 8020896:	4605      	mov	r5, r0
 8020898:	460e      	mov	r6, r1
 802089a:	2228      	movs	r2, #40	; 0x28
 802089c:	2100      	movs	r1, #0
 802089e:	4668      	mov	r0, sp
 80208a0:	f008 f98e 	bl	8028bc0 <memset>
 80208a4:	f894 232d 	ldrb.w	r2, [r4, #813]	; 0x32d
 80208a8:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80208ac:	232c      	movs	r3, #44	; 0x2c
 80208ae:	fb03 4302 	mla	r3, r3, r2, r4
 80208b2:	f893 106e 	ldrb.w	r1, [r3, #110]	; 0x6e
 80208b6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80208b8:	f8b3 706e 	ldrh.w	r7, [r3, #110]	; 0x6e
 80208bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80208be:	9305      	str	r3, [sp, #20]
 80208c0:	2901      	cmp	r1, #1
 80208c2:	bf14      	ite	ne
 80208c4:	2330      	movne	r3, #48	; 0x30
 80208c6:	2338      	moveq	r3, #56	; 0x38
 80208c8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80208cc:	2301      	movs	r3, #1
 80208ce:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80208d2:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80208d6:	f88d 301c 	strb.w	r3, [sp, #28]
 80208da:	232c      	movs	r3, #44	; 0x2c
 80208dc:	fb03 4102 	mla	r1, r3, r2, r4
 80208e0:	460a      	mov	r2, r1
 80208e2:	f891 3095 	ldrb.w	r3, [r1, #149]	; 0x95
 80208e6:	9004      	str	r0, [sp, #16]
 80208e8:	3285      	adds	r2, #133	; 0x85
 80208ea:	4669      	mov	r1, sp
 80208ec:	4628      	mov	r0, r5
 80208ee:	f8ad 700e 	strh.w	r7, [sp, #14]
 80208f2:	f7ff ff85 	bl	8020800 <MobleNetworkSendDataEx>
 80208f6:	b00b      	add	sp, #44	; 0x2c
 80208f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080208fc <Test_UpperTester_Send01>:
 80208fc:	b530      	push	{r4, r5, lr}
 80208fe:	b08d      	sub	sp, #52	; 0x34
 8020900:	4604      	mov	r4, r0
 8020902:	460d      	mov	r5, r1
 8020904:	2228      	movs	r2, #40	; 0x28
 8020906:	2100      	movs	r1, #0
 8020908:	a802      	add	r0, sp, #8
 802090a:	f008 f959 	bl	8028bc0 <memset>
 802090e:	4b16      	ldr	r3, [pc, #88]	; (8020968 <Test_UpperTester_Send01+0x6c>)
 8020910:	6821      	ldr	r1, [r4, #0]
 8020912:	6818      	ldr	r0, [r3, #0]
 8020914:	889b      	ldrh	r3, [r3, #4]
 8020916:	f8ad 3004 	strh.w	r3, [sp, #4]
 802091a:	f8b5 3001 	ldrh.w	r3, [r5, #1]
 802091e:	9000      	str	r0, [sp, #0]
 8020920:	ba5b      	rev16	r3, r3
 8020922:	8849      	ldrh	r1, [r1, #2]
 8020924:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020928:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 802092c:	782a      	ldrb	r2, [r5, #0]
 802092e:	9306      	str	r3, [sp, #24]
 8020930:	2307      	movs	r3, #7
 8020932:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020936:	f88d 2017 	strb.w	r2, [sp, #23]
 802093a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 802093e:	466a      	mov	r2, sp
 8020940:	a902      	add	r1, sp, #8
 8020942:	2306      	movs	r3, #6
 8020944:	4620      	mov	r0, r4
 8020946:	f7ff ff5b 	bl	8020800 <MobleNetworkSendDataEx>
 802094a:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 802094e:	3301      	adds	r3, #1
 8020950:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8020954:	4605      	mov	r5, r0
 8020956:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
 802095a:	4620      	mov	r0, r4
 802095c:	f7fc f9ba 	bl	801ccd4 <MobleNetworkSaveSeqNum>
 8020960:	4628      	mov	r0, r5
 8020962:	b00d      	add	sp, #52	; 0x34
 8020964:	bd30      	pop	{r4, r5, pc}
 8020966:	bf00      	nop
 8020968:	08033b1f 	.word	0x08033b1f

0802096c <MobleModelGetOpcodeIdx>:
 802096c:	b530      	push	{r4, r5, lr}
 802096e:	2300      	movs	r3, #0
 8020970:	4293      	cmp	r3, r2
 8020972:	d102      	bne.n	802097a <MobleModelGetOpcodeIdx+0xe>
 8020974:	2400      	movs	r4, #0
 8020976:	4620      	mov	r0, r4
 8020978:	bd30      	pop	{r4, r5, pc}
 802097a:	460c      	mov	r4, r1
 802097c:	f851 5b10 	ldr.w	r5, [r1], #16
 8020980:	4285      	cmp	r5, r0
 8020982:	d0f8      	beq.n	8020976 <MobleModelGetOpcodeIdx+0xa>
 8020984:	3301      	adds	r3, #1
 8020986:	e7f3      	b.n	8020970 <MobleModelGetOpcodeIdx+0x4>

08020988 <MobleModelCheckOpcodeValid>:
 8020988:	b530      	push	{r4, r5, lr}
 802098a:	2400      	movs	r4, #0
 802098c:	429c      	cmp	r4, r3
 802098e:	d101      	bne.n	8020994 <MobleModelCheckOpcodeValid+0xc>
 8020990:	2000      	movs	r0, #0
 8020992:	bd30      	pop	{r4, r5, pc}
 8020994:	8815      	ldrh	r5, [r2, #0]
 8020996:	4285      	cmp	r5, r0
 8020998:	d102      	bne.n	80209a0 <MobleModelCheckOpcodeValid+0x18>
 802099a:	8855      	ldrh	r5, [r2, #2]
 802099c:	428d      	cmp	r5, r1
 802099e:	d002      	beq.n	80209a6 <MobleModelCheckOpcodeValid+0x1e>
 80209a0:	3401      	adds	r4, #1
 80209a2:	320c      	adds	r2, #12
 80209a4:	e7f2      	b.n	802098c <MobleModelCheckOpcodeValid+0x4>
 80209a6:	2001      	movs	r0, #1
 80209a8:	e7f3      	b.n	8020992 <MobleModelCheckOpcodeValid+0xa>

080209aa <MobleModelCheckOpcodeValidity>:
 80209aa:	b530      	push	{r4, r5, lr}
 80209ac:	2300      	movs	r3, #0
 80209ae:	3102      	adds	r1, #2
 80209b0:	240c      	movs	r4, #12
 80209b2:	4293      	cmp	r3, r2
 80209b4:	d101      	bne.n	80209ba <MobleModelCheckOpcodeValidity+0x10>
 80209b6:	2000      	movs	r0, #0
 80209b8:	bd30      	pop	{r4, r5, pc}
 80209ba:	fb04 f503 	mul.w	r5, r4, r3
 80209be:	5b4d      	ldrh	r5, [r1, r5]
 80209c0:	4285      	cmp	r5, r0
 80209c2:	d001      	beq.n	80209c8 <MobleModelCheckOpcodeValidity+0x1e>
 80209c4:	3301      	adds	r3, #1
 80209c6:	e7f4      	b.n	80209b2 <MobleModelCheckOpcodeValidity+0x8>
 80209c8:	2001      	movs	r0, #1
 80209ca:	e7f5      	b.n	80209b8 <MobleModelCheckOpcodeValidity+0xe>

080209cc <MobleModelCheckOpCodeReliable>:
 80209cc:	b538      	push	{r3, r4, r5, lr}
 80209ce:	2300      	movs	r3, #0
 80209d0:	4293      	cmp	r3, r2
 80209d2:	d105      	bne.n	80209e0 <MobleModelCheckOpCodeReliable+0x14>
 80209d4:	4b07      	ldr	r3, [pc, #28]	; (80209f4 <MobleModelCheckOpCodeReliable+0x28>)
 80209d6:	4a08      	ldr	r2, [pc, #32]	; (80209f8 <MobleModelCheckOpCodeReliable+0x2c>)
 80209d8:	4808      	ldr	r0, [pc, #32]	; (80209fc <MobleModelCheckOpCodeReliable+0x30>)
 80209da:	2168      	movs	r1, #104	; 0x68
 80209dc:	f008 f85e 	bl	8028a9c <__assert_func>
 80209e0:	460c      	mov	r4, r1
 80209e2:	310c      	adds	r1, #12
 80209e4:	8865      	ldrh	r5, [r4, #2]
 80209e6:	4285      	cmp	r5, r0
 80209e8:	d001      	beq.n	80209ee <MobleModelCheckOpCodeReliable+0x22>
 80209ea:	3301      	adds	r3, #1
 80209ec:	e7f0      	b.n	80209d0 <MobleModelCheckOpCodeReliable+0x4>
 80209ee:	7920      	ldrb	r0, [r4, #4]
 80209f0:	bd38      	pop	{r3, r4, r5, pc}
 80209f2:	bf00      	nop
 80209f4:	08033e73 	.word	0x08033e73
 80209f8:	080319f4 	.word	0x080319f4
 80209fc:	08033b26 	.word	0x08033b26

08020a00 <MobleModelGetMinParamLength>:
 8020a00:	b538      	push	{r3, r4, r5, lr}
 8020a02:	2300      	movs	r3, #0
 8020a04:	4293      	cmp	r3, r2
 8020a06:	d105      	bne.n	8020a14 <MobleModelGetMinParamLength+0x14>
 8020a08:	4b07      	ldr	r3, [pc, #28]	; (8020a28 <MobleModelGetMinParamLength+0x28>)
 8020a0a:	4a08      	ldr	r2, [pc, #32]	; (8020a2c <MobleModelGetMinParamLength+0x2c>)
 8020a0c:	4808      	ldr	r0, [pc, #32]	; (8020a30 <MobleModelGetMinParamLength+0x30>)
 8020a0e:	2184      	movs	r1, #132	; 0x84
 8020a10:	f008 f844 	bl	8028a9c <__assert_func>
 8020a14:	460c      	mov	r4, r1
 8020a16:	310c      	adds	r1, #12
 8020a18:	8865      	ldrh	r5, [r4, #2]
 8020a1a:	4285      	cmp	r5, r0
 8020a1c:	d001      	beq.n	8020a22 <MobleModelGetMinParamLength+0x22>
 8020a1e:	3301      	adds	r3, #1
 8020a20:	e7f0      	b.n	8020a04 <MobleModelGetMinParamLength+0x4>
 8020a22:	7960      	ldrb	r0, [r4, #5]
 8020a24:	bd38      	pop	{r3, r4, r5, pc}
 8020a26:	bf00      	nop
 8020a28:	08033e73 	.word	0x08033e73
 8020a2c:	08031a2b 	.word	0x08031a2b
 8020a30:	08033b26 	.word	0x08033b26

08020a34 <MobleModelGetMaxParamLength>:
 8020a34:	b538      	push	{r3, r4, r5, lr}
 8020a36:	2300      	movs	r3, #0
 8020a38:	4293      	cmp	r3, r2
 8020a3a:	d105      	bne.n	8020a48 <MobleModelGetMaxParamLength+0x14>
 8020a3c:	4b07      	ldr	r3, [pc, #28]	; (8020a5c <MobleModelGetMaxParamLength+0x28>)
 8020a3e:	4a08      	ldr	r2, [pc, #32]	; (8020a60 <MobleModelGetMaxParamLength+0x2c>)
 8020a40:	4808      	ldr	r0, [pc, #32]	; (8020a64 <MobleModelGetMaxParamLength+0x30>)
 8020a42:	2192      	movs	r1, #146	; 0x92
 8020a44:	f008 f82a 	bl	8028a9c <__assert_func>
 8020a48:	460c      	mov	r4, r1
 8020a4a:	310c      	adds	r1, #12
 8020a4c:	8865      	ldrh	r5, [r4, #2]
 8020a4e:	4285      	cmp	r5, r0
 8020a50:	d001      	beq.n	8020a56 <MobleModelGetMaxParamLength+0x22>
 8020a52:	3301      	adds	r3, #1
 8020a54:	e7f0      	b.n	8020a38 <MobleModelGetMaxParamLength+0x4>
 8020a56:	79a0      	ldrb	r0, [r4, #6]
 8020a58:	bd38      	pop	{r3, r4, r5, pc}
 8020a5a:	bf00      	nop
 8020a5c:	08033e73 	.word	0x08033e73
 8020a60:	08031a47 	.word	0x08031a47
 8020a64:	08033b26 	.word	0x08033b26

08020a68 <MobleModelGetResponseOpCode>:
 8020a68:	b538      	push	{r3, r4, r5, lr}
 8020a6a:	2300      	movs	r3, #0
 8020a6c:	4293      	cmp	r3, r2
 8020a6e:	d105      	bne.n	8020a7c <MobleModelGetResponseOpCode+0x14>
 8020a70:	4b07      	ldr	r3, [pc, #28]	; (8020a90 <MobleModelGetResponseOpCode+0x28>)
 8020a72:	4a08      	ldr	r2, [pc, #32]	; (8020a94 <MobleModelGetResponseOpCode+0x2c>)
 8020a74:	4808      	ldr	r0, [pc, #32]	; (8020a98 <MobleModelGetResponseOpCode+0x30>)
 8020a76:	21a0      	movs	r1, #160	; 0xa0
 8020a78:	f008 f810 	bl	8028a9c <__assert_func>
 8020a7c:	460c      	mov	r4, r1
 8020a7e:	310c      	adds	r1, #12
 8020a80:	8865      	ldrh	r5, [r4, #2]
 8020a82:	4285      	cmp	r5, r0
 8020a84:	d001      	beq.n	8020a8a <MobleModelGetResponseOpCode+0x22>
 8020a86:	3301      	adds	r3, #1
 8020a88:	e7f0      	b.n	8020a6c <MobleModelGetResponseOpCode+0x4>
 8020a8a:	8920      	ldrh	r0, [r4, #8]
 8020a8c:	bd38      	pop	{r3, r4, r5, pc}
 8020a8e:	bf00      	nop
 8020a90:	08033e73 	.word	0x08033e73
 8020a94:	08031a63 	.word	0x08031a63
 8020a98:	08033b26 	.word	0x08033b26

08020a9c <MobleModelGetMinResponseLength>:
 8020a9c:	b538      	push	{r3, r4, r5, lr}
 8020a9e:	2300      	movs	r3, #0
 8020aa0:	4293      	cmp	r3, r2
 8020aa2:	d105      	bne.n	8020ab0 <MobleModelGetMinResponseLength+0x14>
 8020aa4:	4b07      	ldr	r3, [pc, #28]	; (8020ac4 <MobleModelGetMinResponseLength+0x28>)
 8020aa6:	4a08      	ldr	r2, [pc, #32]	; (8020ac8 <MobleModelGetMinResponseLength+0x2c>)
 8020aa8:	4808      	ldr	r0, [pc, #32]	; (8020acc <MobleModelGetMinResponseLength+0x30>)
 8020aaa:	21af      	movs	r1, #175	; 0xaf
 8020aac:	f007 fff6 	bl	8028a9c <__assert_func>
 8020ab0:	460c      	mov	r4, r1
 8020ab2:	310c      	adds	r1, #12
 8020ab4:	8865      	ldrh	r5, [r4, #2]
 8020ab6:	4285      	cmp	r5, r0
 8020ab8:	d001      	beq.n	8020abe <MobleModelGetMinResponseLength+0x22>
 8020aba:	3301      	adds	r3, #1
 8020abc:	e7f0      	b.n	8020aa0 <MobleModelGetMinResponseLength+0x4>
 8020abe:	7aa0      	ldrb	r0, [r4, #10]
 8020ac0:	bd38      	pop	{r3, r4, r5, pc}
 8020ac2:	bf00      	nop
 8020ac4:	08033e73 	.word	0x08033e73
 8020ac8:	08031a7f 	.word	0x08031a7f
 8020acc:	08033b26 	.word	0x08033b26

08020ad0 <MobleModelGetMaxResponseLength>:
 8020ad0:	b538      	push	{r3, r4, r5, lr}
 8020ad2:	2300      	movs	r3, #0
 8020ad4:	4293      	cmp	r3, r2
 8020ad6:	d105      	bne.n	8020ae4 <MobleModelGetMaxResponseLength+0x14>
 8020ad8:	4b07      	ldr	r3, [pc, #28]	; (8020af8 <MobleModelGetMaxResponseLength+0x28>)
 8020ada:	4a08      	ldr	r2, [pc, #32]	; (8020afc <MobleModelGetMaxResponseLength+0x2c>)
 8020adc:	4808      	ldr	r0, [pc, #32]	; (8020b00 <MobleModelGetMaxResponseLength+0x30>)
 8020ade:	21bd      	movs	r1, #189	; 0xbd
 8020ae0:	f007 ffdc 	bl	8028a9c <__assert_func>
 8020ae4:	460c      	mov	r4, r1
 8020ae6:	310c      	adds	r1, #12
 8020ae8:	8865      	ldrh	r5, [r4, #2]
 8020aea:	4285      	cmp	r5, r0
 8020aec:	d001      	beq.n	8020af2 <MobleModelGetMaxResponseLength+0x22>
 8020aee:	3301      	adds	r3, #1
 8020af0:	e7f0      	b.n	8020ad4 <MobleModelGetMaxResponseLength+0x4>
 8020af2:	7ae0      	ldrb	r0, [r4, #11]
 8020af4:	bd38      	pop	{r3, r4, r5, pc}
 8020af6:	bf00      	nop
 8020af8:	08033e73 	.word	0x08033e73
 8020afc:	08031a9e 	.word	0x08031a9e
 8020b00:	08033b26 	.word	0x08033b26

08020b04 <MobleModelGetOpcodeValue>:
 8020b04:	b510      	push	{r4, lr}
 8020b06:	7803      	ldrb	r3, [r0, #0]
 8020b08:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
 8020b0c:	2cc0      	cmp	r4, #192	; 0xc0
 8020b0e:	d108      	bne.n	8020b22 <MobleModelGetOpcodeValue+0x1e>
 8020b10:	2902      	cmp	r1, #2
 8020b12:	d914      	bls.n	8020b3e <MobleModelGetOpcodeValue+0x3a>
 8020b14:	6800      	ldr	r0, [r0, #0]
 8020b16:	0a00      	lsrs	r0, r0, #8
 8020b18:	f7f6 fe55 	bl	80177c6 <htobe32>
 8020b1c:	6010      	str	r0, [r2, #0]
 8020b1e:	2003      	movs	r0, #3
 8020b20:	bd10      	pop	{r4, pc}
 8020b22:	061c      	lsls	r4, r3, #24
 8020b24:	d507      	bpl.n	8020b36 <MobleModelGetOpcodeValue+0x32>
 8020b26:	2901      	cmp	r1, #1
 8020b28:	d909      	bls.n	8020b3e <MobleModelGetOpcodeValue+0x3a>
 8020b2a:	8803      	ldrh	r3, [r0, #0]
 8020b2c:	ba5b      	rev16	r3, r3
 8020b2e:	b29b      	uxth	r3, r3
 8020b30:	6013      	str	r3, [r2, #0]
 8020b32:	2002      	movs	r0, #2
 8020b34:	e7f4      	b.n	8020b20 <MobleModelGetOpcodeValue+0x1c>
 8020b36:	b121      	cbz	r1, 8020b42 <MobleModelGetOpcodeValue+0x3e>
 8020b38:	6013      	str	r3, [r2, #0]
 8020b3a:	2001      	movs	r0, #1
 8020b3c:	e7f0      	b.n	8020b20 <MobleModelGetOpcodeValue+0x1c>
 8020b3e:	2000      	movs	r0, #0
 8020b40:	e7ee      	b.n	8020b20 <MobleModelGetOpcodeValue+0x1c>
 8020b42:	4608      	mov	r0, r1
 8020b44:	e7ec      	b.n	8020b20 <MobleModelGetOpcodeValue+0x1c>
	...

08020b48 <BnrgmHealthModelNewPacket>:
 8020b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020b4c:	6803      	ldr	r3, [r0, #0]
 8020b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020b50:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8020b54:	4681      	mov	r9, r0
 8020b56:	460f      	mov	r7, r1
 8020b58:	b923      	cbnz	r3, 8020b64 <BnrgmHealthModelNewPacket+0x1c>
 8020b5a:	2402      	movs	r4, #2
 8020b5c:	4620      	mov	r0, r4
 8020b5e:	b004      	add	sp, #16
 8020b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b64:	69cd      	ldr	r5, [r1, #28]
 8020b66:	f101 0a20 	add.w	sl, r1, #32
 8020b6a:	aa03      	add	r2, sp, #12
 8020b6c:	4629      	mov	r1, r5
 8020b6e:	4650      	mov	r0, sl
 8020b70:	f7ff ffc8 	bl	8020b04 <MobleModelGetOpcodeValue>
 8020b74:	4680      	mov	r8, r0
 8020b76:	2800      	cmp	r0, #0
 8020b78:	d0ef      	beq.n	8020b5a <BnrgmHealthModelNewPacket+0x12>
 8020b7a:	4913      	ldr	r1, [pc, #76]	; (8020bc8 <BnrgmHealthModelNewPacket+0x80>)
 8020b7c:	9803      	ldr	r0, [sp, #12]
 8020b7e:	220b      	movs	r2, #11
 8020b80:	f7ff fef4 	bl	802096c <MobleModelGetOpcodeIdx>
 8020b84:	4604      	mov	r4, r0
 8020b86:	2800      	cmp	r0, #0
 8020b88:	d0e7      	beq.n	8020b5a <BnrgmHealthModelNewPacket+0x12>
 8020b8a:	88c3      	ldrh	r3, [r0, #6]
 8020b8c:	eba5 0508 	sub.w	r5, r5, r8
 8020b90:	42ab      	cmp	r3, r5
 8020b92:	dce2      	bgt.n	8020b5a <BnrgmHealthModelNewPacket+0x12>
 8020b94:	8903      	ldrh	r3, [r0, #8]
 8020b96:	42ab      	cmp	r3, r5
 8020b98:	dbdf      	blt.n	8020b5a <BnrgmHealthModelNewPacket+0x12>
 8020b9a:	68c3      	ldr	r3, [r0, #12]
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	d0dc      	beq.n	8020b5a <BnrgmHealthModelNewPacket+0x12>
 8020ba0:	20a7      	movs	r0, #167	; 0xa7
 8020ba2:	f7fa f967 	bl	801ae74 <MobleMemAlloc>
 8020ba6:	4606      	mov	r6, r0
 8020ba8:	2800      	cmp	r0, #0
 8020baa:	d0d6      	beq.n	8020b5a <BnrgmHealthModelNewPacket+0x12>
 8020bac:	e9cd 5000 	strd	r5, r0, [sp]
 8020bb0:	4622      	mov	r2, r4
 8020bb2:	68e5      	ldr	r5, [r4, #12]
 8020bb4:	eb0a 0308 	add.w	r3, sl, r8
 8020bb8:	4639      	mov	r1, r7
 8020bba:	4648      	mov	r0, r9
 8020bbc:	47a8      	blx	r5
 8020bbe:	4604      	mov	r4, r0
 8020bc0:	4630      	mov	r0, r6
 8020bc2:	f7fa f9e1 	bl	801af88 <MobleMemFree>
 8020bc6:	e7c9      	b.n	8020b5c <BnrgmHealthModelNewPacket+0x14>
 8020bc8:	08031ac0 	.word	0x08031ac0

08020bcc <MobleConfigModelNewPacket>:
 8020bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020bd0:	69cd      	ldr	r5, [r1, #28]
 8020bd2:	f101 0920 	add.w	r9, r1, #32
 8020bd6:	4680      	mov	r8, r0
 8020bd8:	460f      	mov	r7, r1
 8020bda:	aa03      	add	r2, sp, #12
 8020bdc:	4629      	mov	r1, r5
 8020bde:	4648      	mov	r0, r9
 8020be0:	f7ff ff90 	bl	8020b04 <MobleModelGetOpcodeValue>
 8020be4:	4682      	mov	sl, r0
 8020be6:	b920      	cbnz	r0, 8020bf2 <MobleConfigModelNewPacket+0x26>
 8020be8:	2402      	movs	r4, #2
 8020bea:	4620      	mov	r0, r4
 8020bec:	b004      	add	sp, #16
 8020bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020bf2:	4917      	ldr	r1, [pc, #92]	; (8020c50 <MobleConfigModelNewPacket+0x84>)
 8020bf4:	9803      	ldr	r0, [sp, #12]
 8020bf6:	222f      	movs	r2, #47	; 0x2f
 8020bf8:	f7ff feb8 	bl	802096c <MobleModelGetOpcodeIdx>
 8020bfc:	4604      	mov	r4, r0
 8020bfe:	2800      	cmp	r0, #0
 8020c00:	d0f2      	beq.n	8020be8 <MobleConfigModelNewPacket+0x1c>
 8020c02:	88c3      	ldrh	r3, [r0, #6]
 8020c04:	eba5 050a 	sub.w	r5, r5, sl
 8020c08:	42ab      	cmp	r3, r5
 8020c0a:	dced      	bgt.n	8020be8 <MobleConfigModelNewPacket+0x1c>
 8020c0c:	8903      	ldrh	r3, [r0, #8]
 8020c0e:	42ab      	cmp	r3, r5
 8020c10:	dbea      	blt.n	8020be8 <MobleConfigModelNewPacket+0x1c>
 8020c12:	68c3      	ldr	r3, [r0, #12]
 8020c14:	b93b      	cbnz	r3, 8020c26 <MobleConfigModelNewPacket+0x5a>
 8020c16:	4a0f      	ldr	r2, [pc, #60]	; (8020c54 <MobleConfigModelNewPacket+0x88>)
 8020c18:	8811      	ldrh	r1, [r2, #0]
 8020c1a:	b2da      	uxtb	r2, r3
 8020c1c:	428a      	cmp	r2, r1
 8020c1e:	f103 0301 	add.w	r3, r3, #1
 8020c22:	d3fa      	bcc.n	8020c1a <MobleConfigModelNewPacket+0x4e>
 8020c24:	e7e0      	b.n	8020be8 <MobleConfigModelNewPacket+0x1c>
 8020c26:	20a7      	movs	r0, #167	; 0xa7
 8020c28:	f7fa f924 	bl	801ae74 <MobleMemAlloc>
 8020c2c:	4606      	mov	r6, r0
 8020c2e:	2800      	cmp	r0, #0
 8020c30:	d0da      	beq.n	8020be8 <MobleConfigModelNewPacket+0x1c>
 8020c32:	e9cd 5000 	strd	r5, r0, [sp]
 8020c36:	4622      	mov	r2, r4
 8020c38:	68e5      	ldr	r5, [r4, #12]
 8020c3a:	eb09 030a 	add.w	r3, r9, sl
 8020c3e:	4639      	mov	r1, r7
 8020c40:	4640      	mov	r0, r8
 8020c42:	47a8      	blx	r5
 8020c44:	4604      	mov	r4, r0
 8020c46:	4630      	mov	r0, r6
 8020c48:	f7fa f99e 	bl	801af88 <MobleMemFree>
 8020c4c:	e7cd      	b.n	8020bea <MobleConfigModelNewPacket+0x1e>
 8020c4e:	bf00      	nop
 8020c50:	08031b70 	.word	0x08031b70
 8020c54:	20000008 	.word	0x20000008

08020c58 <Moble_SIGModel_NewPacket>:
 8020c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c5c:	ed2d 8b02 	vpush	{d8}
 8020c60:	b089      	sub	sp, #36	; 0x24
 8020c62:	200c      	movs	r0, #12
 8020c64:	9305      	str	r3, [sp, #20]
 8020c66:	69cb      	ldr	r3, [r1, #28]
 8020c68:	9303      	str	r3, [sp, #12]
 8020c6a:	f101 0320 	add.w	r3, r1, #32
 8020c6e:	ee08 2a10 	vmov	s16, r2
 8020c72:	460d      	mov	r5, r1
 8020c74:	9304      	str	r3, [sp, #16]
 8020c76:	f7fa f8fd 	bl	801ae74 <MobleMemAlloc>
 8020c7a:	aa07      	add	r2, sp, #28
 8020c7c:	4604      	mov	r4, r0
 8020c7e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8020c82:	f7ff ff3f 	bl	8020b04 <MobleModelGetOpcodeValue>
 8020c86:	4607      	mov	r7, r0
 8020c88:	b930      	cbnz	r0, 8020c98 <Moble_SIGModel_NewPacket+0x40>
 8020c8a:	2502      	movs	r5, #2
 8020c8c:	4628      	mov	r0, r5
 8020c8e:	b009      	add	sp, #36	; 0x24
 8020c90:	ecbd 8b02 	vpop	{d8}
 8020c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c98:	4e2f      	ldr	r6, [pc, #188]	; (8020d58 <Moble_SIGModel_NewPacket+0x100>)
 8020c9a:	f8d6 3a28 	ldr.w	r3, [r6, #2600]	; 0xa28
 8020c9e:	f8c6 3a24 	str.w	r3, [r6, #2596]	; 0xa24
 8020ca2:	f04f 0800 	mov.w	r8, #0
 8020ca6:	f8d6 3a34 	ldr.w	r3, [r6, #2612]	; 0xa34
 8020caa:	4543      	cmp	r3, r8
 8020cac:	d804      	bhi.n	8020cb8 <Moble_SIGModel_NewPacket+0x60>
 8020cae:	2502      	movs	r5, #2
 8020cb0:	4620      	mov	r0, r4
 8020cb2:	f7fa f969 	bl	801af88 <MobleMemFree>
 8020cb6:	e7e9      	b.n	8020c8c <Moble_SIGModel_NewPacket+0x34>
 8020cb8:	4928      	ldr	r1, [pc, #160]	; (8020d5c <Moble_SIGModel_NewPacket+0x104>)
 8020cba:	f8d6 3a24 	ldr.w	r3, [r6, #2596]	; 0xa24
 8020cbe:	1d08      	adds	r0, r1, #4
 8020cc0:	681b      	ldr	r3, [r3, #0]
 8020cc2:	4798      	blx	r3
 8020cc4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8020cc8:	f8d6 aa30 	ldr.w	sl, [r6, #2608]	; 0xa30
 8020ccc:	f8b6 ba2c 	ldrh.w	fp, [r6, #2604]	; 0xa2c
 8020cd0:	ee18 0a10 	vmov	r0, s16
 8020cd4:	465b      	mov	r3, fp
 8020cd6:	4652      	mov	r2, sl
 8020cd8:	4649      	mov	r1, r9
 8020cda:	f7ff fe55 	bl	8020988 <MobleModelCheckOpcodeValid>
 8020cde:	2801      	cmp	r0, #1
 8020ce0:	d007      	beq.n	8020cf2 <Moble_SIGModel_NewPacket+0x9a>
 8020ce2:	f8d6 3a24 	ldr.w	r3, [r6, #2596]	; 0xa24
 8020ce6:	330c      	adds	r3, #12
 8020ce8:	f8c6 3a24 	str.w	r3, [r6, #2596]	; 0xa24
 8020cec:	f108 0801 	add.w	r8, r8, #1
 8020cf0:	e7d9      	b.n	8020ca6 <Moble_SIGModel_NewPacket+0x4e>
 8020cf2:	9b03      	ldr	r3, [sp, #12]
 8020cf4:	465a      	mov	r2, fp
 8020cf6:	4651      	mov	r1, sl
 8020cf8:	4648      	mov	r0, r9
 8020cfa:	eba3 0807 	sub.w	r8, r3, r7
 8020cfe:	f7ff fe7f 	bl	8020a00 <MobleModelGetMinParamLength>
 8020d02:	4540      	cmp	r0, r8
 8020d04:	d8c1      	bhi.n	8020c8a <Moble_SIGModel_NewPacket+0x32>
 8020d06:	465a      	mov	r2, fp
 8020d08:	4651      	mov	r1, sl
 8020d0a:	4648      	mov	r0, r9
 8020d0c:	f7ff fe92 	bl	8020a34 <MobleModelGetMaxParamLength>
 8020d10:	4540      	cmp	r0, r8
 8020d12:	d3ba      	bcc.n	8020c8a <Moble_SIGModel_NewPacket+0x32>
 8020d14:	9b04      	ldr	r3, [sp, #16]
 8020d16:	465a      	mov	r2, fp
 8020d18:	443b      	add	r3, r7
 8020d1a:	4651      	mov	r1, sl
 8020d1c:	4648      	mov	r0, r9
 8020d1e:	461f      	mov	r7, r3
 8020d20:	f7ff fe54 	bl	80209cc <MobleModelCheckOpCodeReliable>
 8020d24:	9b05      	ldr	r3, [sp, #20]
 8020d26:	7023      	strb	r3, [r4, #0]
 8020d28:	892b      	ldrh	r3, [r5, #8]
 8020d2a:	80a3      	strh	r3, [r4, #4]
 8020d2c:	896b      	ldrh	r3, [r5, #10]
 8020d2e:	80e3      	strh	r3, [r4, #6]
 8020d30:	78eb      	ldrb	r3, [r5, #3]
 8020d32:	7223      	strb	r3, [r4, #8]
 8020d34:	7b2b      	ldrb	r3, [r5, #12]
 8020d36:	72a3      	strb	r3, [r4, #10]
 8020d38:	7c2b      	ldrb	r3, [r5, #16]
 8020d3a:	72e3      	strb	r3, [r4, #11]
 8020d3c:	7dab      	ldrb	r3, [r5, #22]
 8020d3e:	7263      	strb	r3, [r4, #9]
 8020d40:	f8d6 3a24 	ldr.w	r3, [r6, #2596]	; 0xa24
 8020d44:	9000      	str	r0, [sp, #0]
 8020d46:	689d      	ldr	r5, [r3, #8]
 8020d48:	463a      	mov	r2, r7
 8020d4a:	4643      	mov	r3, r8
 8020d4c:	fa1f f189 	uxth.w	r1, r9
 8020d50:	4620      	mov	r0, r4
 8020d52:	47a8      	blx	r5
 8020d54:	4605      	mov	r5, r0
 8020d56:	e7ab      	b.n	8020cb0 <Moble_SIGModel_NewPacket+0x58>
 8020d58:	20002508 	.word	0x20002508
 8020d5c:	20002f34 	.word	0x20002f34

08020d60 <BnrgmConfigModelSetFeatures>:
 8020d60:	b570      	push	{r4, r5, r6, lr}
 8020d62:	4604      	mov	r4, r0
 8020d64:	f004 0309 	and.w	r3, r4, #9
 8020d68:	2b09      	cmp	r3, #9
 8020d6a:	4608      	mov	r0, r1
 8020d6c:	4616      	mov	r6, r2
 8020d6e:	d058      	beq.n	8020e22 <BnrgmConfigModelSetFeatures+0xc2>
 8020d70:	f004 030a 	and.w	r3, r4, #10
 8020d74:	2b0a      	cmp	r3, #10
 8020d76:	d054      	beq.n	8020e22 <BnrgmConfigModelSetFeatures+0xc2>
 8020d78:	f004 030c 	and.w	r3, r4, #12
 8020d7c:	2b0c      	cmp	r3, #12
 8020d7e:	d050      	beq.n	8020e22 <BnrgmConfigModelSetFeatures+0xc2>
 8020d80:	f014 0f01 	tst.w	r4, #1
 8020d84:	4d28      	ldr	r5, [pc, #160]	; (8020e28 <BnrgmConfigModelSetFeatures+0xc8>)
 8020d86:	d032      	beq.n	8020dee <BnrgmConfigModelSetFeatures+0x8e>
 8020d88:	f895 30bd 	ldrb.w	r3, [r5, #189]	; 0xbd
 8020d8c:	2b01      	cmp	r3, #1
 8020d8e:	d904      	bls.n	8020d9a <BnrgmConfigModelSetFeatures+0x3a>
 8020d90:	2301      	movs	r3, #1
 8020d92:	f885 30bd 	strb.w	r3, [r5, #189]	; 0xbd
 8020d96:	f885 30ba 	strb.w	r3, [r5, #186]	; 0xba
 8020d9a:	07a2      	lsls	r2, r4, #30
 8020d9c:	d52b      	bpl.n	8020df6 <BnrgmConfigModelSetFeatures+0x96>
 8020d9e:	f895 30bc 	ldrb.w	r3, [r5, #188]	; 0xbc
 8020da2:	2b01      	cmp	r3, #1
 8020da4:	d904      	bls.n	8020db0 <BnrgmConfigModelSetFeatures+0x50>
 8020da6:	2301      	movs	r3, #1
 8020da8:	f8a5 30ba 	strh.w	r3, [r5, #186]	; 0xba
 8020dac:	f885 30bc 	strb.w	r3, [r5, #188]	; 0xbc
 8020db0:	0763      	lsls	r3, r4, #29
 8020db2:	d526      	bpl.n	8020e02 <BnrgmConfigModelSetFeatures+0xa2>
 8020db4:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
 8020db8:	2b01      	cmp	r3, #1
 8020dba:	d906      	bls.n	8020dca <BnrgmConfigModelSetFeatures+0x6a>
 8020dbc:	2301      	movs	r3, #1
 8020dbe:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe
 8020dc2:	f885 30ba 	strb.w	r3, [r5, #186]	; 0xba
 8020dc6:	f7fd fc35 	bl	801e634 <BnrgmFrndMgmtFnInit>
 8020dca:	f014 0008 	ands.w	r0, r4, #8
 8020dce:	d01c      	beq.n	8020e0a <BnrgmConfigModelSetFeatures+0xaa>
 8020dd0:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
 8020dd4:	2b01      	cmp	r3, #1
 8020dd6:	f04f 0400 	mov.w	r4, #0
 8020dda:	d906      	bls.n	8020dea <BnrgmConfigModelSetFeatures+0x8a>
 8020ddc:	4630      	mov	r0, r6
 8020dde:	f885 40bf 	strb.w	r4, [r5, #191]	; 0xbf
 8020de2:	f885 40ba 	strb.w	r4, [r5, #186]	; 0xba
 8020de6:	f7f2 fbf3 	bl	80135d0 <BnrgmFrndMgmtLpnInit>
 8020dea:	4620      	mov	r0, r4
 8020dec:	e010      	b.n	8020e10 <BnrgmConfigModelSetFeatures+0xb0>
 8020dee:	2302      	movs	r3, #2
 8020df0:	f885 30bd 	strb.w	r3, [r5, #189]	; 0xbd
 8020df4:	e7d1      	b.n	8020d9a <BnrgmConfigModelSetFeatures+0x3a>
 8020df6:	2302      	movs	r3, #2
 8020df8:	f885 30bc 	strb.w	r3, [r5, #188]	; 0xbc
 8020dfc:	f885 30bb 	strb.w	r3, [r5, #187]	; 0xbb
 8020e00:	e7d6      	b.n	8020db0 <BnrgmConfigModelSetFeatures+0x50>
 8020e02:	2302      	movs	r3, #2
 8020e04:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe
 8020e08:	e7df      	b.n	8020dca <BnrgmConfigModelSetFeatures+0x6a>
 8020e0a:	2302      	movs	r3, #2
 8020e0c:	f885 30bf 	strb.w	r3, [r5, #191]	; 0xbf
 8020e10:	4b06      	ldr	r3, [pc, #24]	; (8020e2c <BnrgmConfigModelSetFeatures+0xcc>)
 8020e12:	8819      	ldrh	r1, [r3, #0]
 8020e14:	2300      	movs	r3, #0
 8020e16:	b2da      	uxtb	r2, r3
 8020e18:	428a      	cmp	r2, r1
 8020e1a:	f103 0301 	add.w	r3, r3, #1
 8020e1e:	d3fa      	bcc.n	8020e16 <BnrgmConfigModelSetFeatures+0xb6>
 8020e20:	bd70      	pop	{r4, r5, r6, pc}
 8020e22:	2003      	movs	r0, #3
 8020e24:	e7f4      	b.n	8020e10 <BnrgmConfigModelSetFeatures+0xb0>
 8020e26:	bf00      	nop
 8020e28:	20000318 	.word	0x20000318
 8020e2c:	20000008 	.word	0x20000008

08020e30 <MobleLibrarySetFeatures>:
 8020e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e32:	4b10      	ldr	r3, [pc, #64]	; (8020e74 <MobleLibrarySetFeatures+0x44>)
 8020e34:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8020e38:	b087      	sub	sp, #28
 8020e3a:	4606      	mov	r6, r0
 8020e3c:	b1c3      	cbz	r3, 8020e70 <MobleLibrarySetFeatures+0x40>
 8020e3e:	4d0e      	ldr	r5, [pc, #56]	; (8020e78 <MobleLibrarySetFeatures+0x48>)
 8020e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020e42:	ac01      	add	r4, sp, #4
 8020e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020e46:	682b      	ldr	r3, [r5, #0]
 8020e48:	6023      	str	r3, [r4, #0]
 8020e4a:	2701      	movs	r7, #1
 8020e4c:	0733      	lsls	r3, r6, #28
 8020e4e:	f88d 7000 	strb.w	r7, [sp]
 8020e52:	d509      	bpl.n	8020e68 <MobleLibrarySetFeatures+0x38>
 8020e54:	2000      	movs	r0, #0
 8020e56:	f7fe fb57 	bl	801f508 <BnrgmTransmitSetAutoScanState>
 8020e5a:	aa01      	add	r2, sp, #4
 8020e5c:	4669      	mov	r1, sp
 8020e5e:	4630      	mov	r0, r6
 8020e60:	f7ff ff7e 	bl	8020d60 <BnrgmConfigModelSetFeatures>
 8020e64:	b007      	add	sp, #28
 8020e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e68:	4b04      	ldr	r3, [pc, #16]	; (8020e7c <MobleLibrarySetFeatures+0x4c>)
 8020e6a:	f883 716a 	strb.w	r7, [r3, #362]	; 0x16a
 8020e6e:	e7f4      	b.n	8020e5a <MobleLibrarySetFeatures+0x2a>
 8020e70:	2002      	movs	r0, #2
 8020e72:	e7f7      	b.n	8020e64 <MobleLibrarySetFeatures+0x34>
 8020e74:	20002508 	.word	0x20002508
 8020e78:	08031ebc 	.word	0x08031ebc
 8020e7c:	20003f58 	.word	0x20003f58

08020e80 <Test_UpperTester_Set12>:
 8020e80:	7808      	ldrb	r0, [r1, #0]
 8020e82:	3830      	subs	r0, #48	; 0x30
 8020e84:	b280      	uxth	r0, r0
 8020e86:	f7ff bfd3 	b.w	8020e30 <MobleLibrarySetFeatures>
	...

08020e8c <MobleConfigModelInit>:
 8020e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e8e:	4d1d      	ldr	r5, [pc, #116]	; (8020f04 <MobleConfigModelInit+0x78>)
 8020e90:	4606      	mov	r6, r0
 8020e92:	4608      	mov	r0, r1
 8020e94:	4611      	mov	r1, r2
 8020e96:	461a      	mov	r2, r3
 8020e98:	2301      	movs	r3, #1
 8020e9a:	f885 30ba 	strb.w	r3, [r5, #186]	; 0xba
 8020e9e:	2308      	movs	r3, #8
 8020ea0:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
 8020ea4:	4b18      	ldr	r3, [pc, #96]	; (8020f08 <MobleConfigModelInit+0x7c>)
 8020ea6:	2400      	movs	r4, #0
 8020ea8:	881f      	ldrh	r7, [r3, #0]
 8020eaa:	46a6      	mov	lr, r4
 8020eac:	b2e3      	uxtb	r3, r4
 8020eae:	42bb      	cmp	r3, r7
 8020eb0:	f104 0c01 	add.w	ip, r4, #1
 8020eb4:	d321      	bcc.n	8020efa <MobleConfigModelInit+0x6e>
 8020eb6:	2302      	movs	r3, #2
 8020eb8:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
 8020ebc:	2301      	movs	r3, #1
 8020ebe:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
 8020ec2:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
 8020ec6:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8020eca:	f7ff ff49 	bl	8020d60 <BnrgmConfigModelSetFeatures>
 8020ece:	b968      	cbnz	r0, 8020eec <MobleConfigModelInit+0x60>
 8020ed0:	490e      	ldr	r1, [pc, #56]	; (8020f0c <MobleConfigModelInit+0x80>)
 8020ed2:	480f      	ldr	r0, [pc, #60]	; (8020f10 <MobleConfigModelInit+0x84>)
 8020ed4:	4632      	mov	r2, r6
 8020ed6:	f7f6 fe1d 	bl	8017b14 <MoblePalTimerCreate>
 8020eda:	4632      	mov	r2, r6
 8020edc:	490d      	ldr	r1, [pc, #52]	; (8020f14 <MobleConfigModelInit+0x88>)
 8020ede:	480e      	ldr	r0, [pc, #56]	; (8020f18 <MobleConfigModelInit+0x8c>)
 8020ee0:	f7f6 fe18 	bl	8017b14 <MoblePalTimerCreate>
 8020ee4:	4b0d      	ldr	r3, [pc, #52]	; (8020f1c <MobleConfigModelInit+0x90>)
 8020ee6:	4a0e      	ldr	r2, [pc, #56]	; (8020f20 <MobleConfigModelInit+0x94>)
 8020ee8:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
 8020eec:	4b0d      	ldr	r3, [pc, #52]	; (8020f24 <MobleConfigModelInit+0x98>)
 8020eee:	2200      	movs	r2, #0
 8020ef0:	f883 2a38 	strb.w	r2, [r3, #2616]	; 0xa38
 8020ef4:	f883 2a39 	strb.w	r2, [r3, #2617]	; 0xa39
 8020ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020efa:	442b      	add	r3, r5
 8020efc:	4664      	mov	r4, ip
 8020efe:	f883 e0c0 	strb.w	lr, [r3, #192]	; 0xc0
 8020f02:	e7d3      	b.n	8020eac <MobleConfigModelInit+0x20>
 8020f04:	20000318 	.word	0x20000318
 8020f08:	20000008 	.word	0x20000008
 8020f0c:	08025c91 	.word	0x08025c91
 8020f10:	200003f4 	.word	0x200003f4
 8020f14:	08017c51 	.word	0x08017c51
 8020f18:	20000404 	.word	0x20000404
 8020f1c:	20001410 	.word	0x20001410
 8020f20:	08017a15 	.word	0x08017a15
 8020f24:	20002508 	.word	0x20002508

08020f28 <MobleConfigModelReset>:
 8020f28:	b538      	push	{r3, r4, r5, lr}
 8020f2a:	4a1b      	ldr	r2, [pc, #108]	; (8020f98 <MobleConfigModelReset+0x70>)
 8020f2c:	f892 30b4 	ldrb.w	r3, [r2, #180]	; 0xb4
 8020f30:	2b01      	cmp	r3, #1
 8020f32:	d12f      	bne.n	8020f94 <MobleConfigModelReset+0x6c>
 8020f34:	f882 30ba 	strb.w	r3, [r2, #186]	; 0xba
 8020f38:	2308      	movs	r3, #8
 8020f3a:	f882 30b5 	strb.w	r3, [r2, #181]	; 0xb5
 8020f3e:	4b17      	ldr	r3, [pc, #92]	; (8020f9c <MobleConfigModelReset+0x74>)
 8020f40:	8818      	ldrh	r0, [r3, #0]
 8020f42:	2300      	movs	r3, #0
 8020f44:	461d      	mov	r5, r3
 8020f46:	b2d9      	uxtb	r1, r3
 8020f48:	4281      	cmp	r1, r0
 8020f4a:	f103 0401 	add.w	r4, r3, #1
 8020f4e:	d31c      	bcc.n	8020f8a <MobleConfigModelReset+0x62>
 8020f50:	2302      	movs	r3, #2
 8020f52:	2100      	movs	r1, #0
 8020f54:	f882 30b6 	strb.w	r3, [r2, #182]	; 0xb6
 8020f58:	2301      	movs	r3, #1
 8020f5a:	f882 30b8 	strb.w	r3, [r2, #184]	; 0xb8
 8020f5e:	e9c2 1134 	strd	r1, r1, [r2, #208]	; 0xd0
 8020f62:	f8d2 00dc 	ldr.w	r0, [r2, #220]	; 0xdc
 8020f66:	f882 10c8 	strb.w	r1, [r2, #200]	; 0xc8
 8020f6a:	f8a2 10ca 	strh.w	r1, [r2, #202]	; 0xca
 8020f6e:	f8a2 10d8 	strh.w	r1, [r2, #216]	; 0xd8
 8020f72:	f7f6 fe61 	bl	8017c38 <MoblePalTimerStop>
 8020f76:	e9c2 1138 	strd	r1, r1, [r2, #224]	; 0xe0
 8020f7a:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
 8020f7e:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
 8020f82:	f7f6 fe59 	bl	8017c38 <MoblePalTimerStop>
 8020f86:	4608      	mov	r0, r1
 8020f88:	bd38      	pop	{r3, r4, r5, pc}
 8020f8a:	4411      	add	r1, r2
 8020f8c:	4623      	mov	r3, r4
 8020f8e:	f881 50c0 	strb.w	r5, [r1, #192]	; 0xc0
 8020f92:	e7d8      	b.n	8020f46 <MobleConfigModelReset+0x1e>
 8020f94:	2001      	movs	r0, #1
 8020f96:	e7f7      	b.n	8020f88 <MobleConfigModelReset+0x60>
 8020f98:	20000318 	.word	0x20000318
 8020f9c:	20000008 	.word	0x20000008

08020fa0 <MobleStackConfigInvalidate>:
 8020fa0:	b538      	push	{r3, r4, r5, lr}
 8020fa2:	4d14      	ldr	r5, [pc, #80]	; (8020ff4 <MobleStackConfigInvalidate+0x54>)
 8020fa4:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
 8020fa8:	781b      	ldrb	r3, [r3, #0]
 8020faa:	b30b      	cbz	r3, 8020ff0 <MobleStackConfigInvalidate+0x50>
 8020fac:	f7ff ffbc 	bl	8020f28 <MobleConfigModelReset>
 8020fb0:	f8d5 0680 	ldr.w	r0, [r5, #1664]	; 0x680
 8020fb4:	f7fd ff66 	bl	801ee84 <MobleConfigNetworkInvalidate>
 8020fb8:	2801      	cmp	r0, #1
 8020fba:	4604      	mov	r4, r0
 8020fbc:	d816      	bhi.n	8020fec <MobleStackConfigInvalidate+0x4c>
 8020fbe:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
 8020fc2:	781b      	ldrb	r3, [r3, #0]
 8020fc4:	f885 3934 	strb.w	r3, [r5, #2356]	; 0x934
 8020fc8:	f7f8 f92e 	bl	8019228 <MoblePalCryptoForgetAllKeys>
 8020fcc:	2801      	cmp	r0, #1
 8020fce:	4604      	mov	r4, r0
 8020fd0:	d80c      	bhi.n	8020fec <MobleStackConfigInvalidate+0x4c>
 8020fd2:	f7f8 f9a3 	bl	801931c <MoblePalCryptoModelsDeInit>
 8020fd6:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
 8020fda:	f7fd fe27 	bl	801ec2c <MobleProvisionUpdateRole>
 8020fde:	f895 3854 	ldrb.w	r3, [r5, #2132]	; 0x854
 8020fe2:	2b01      	cmp	r3, #1
 8020fe4:	d102      	bne.n	8020fec <MobleStackConfigInvalidate+0x4c>
 8020fe6:	4a04      	ldr	r2, [pc, #16]	; (8020ff8 <MobleStackConfigInvalidate+0x58>)
 8020fe8:	f882 316a 	strb.w	r3, [r2, #362]	; 0x16a
 8020fec:	4620      	mov	r0, r4
 8020fee:	bd38      	pop	{r3, r4, r5, pc}
 8020ff0:	2401      	movs	r4, #1
 8020ff2:	e7fb      	b.n	8020fec <MobleStackConfigInvalidate+0x4c>
 8020ff4:	20001410 	.word	0x20001410
 8020ff8:	20003f58 	.word	0x20003f58

08020ffc <BLEMesh_Unprovision>:
 8020ffc:	4b07      	ldr	r3, [pc, #28]	; (802101c <BLEMesh_Unprovision+0x20>)
 8020ffe:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8021002:	b510      	push	{r4, lr}
 8021004:	b13b      	cbz	r3, 8021016 <BLEMesh_Unprovision+0x1a>
 8021006:	f7ff ffcb 	bl	8020fa0 <MobleStackConfigInvalidate>
 802100a:	4604      	mov	r4, r0
 802100c:	b908      	cbnz	r0, 8021012 <BLEMesh_Unprovision+0x16>
 802100e:	f7fe fabd 	bl	801f58c <MoblePalBluetoothGracefulReset>
 8021012:	4620      	mov	r0, r4
 8021014:	bd10      	pop	{r4, pc}
 8021016:	2402      	movs	r4, #2
 8021018:	e7fb      	b.n	8021012 <BLEMesh_Unprovision+0x16>
 802101a:	bf00      	nop
 802101c:	20002508 	.word	0x20002508

08021020 <MobleConfigModelCreate>:
 8021020:	4b04      	ldr	r3, [pc, #16]	; (8021034 <MobleConfigModelCreate+0x14>)
 8021022:	f893 00b4 	ldrb.w	r0, [r3, #180]	; 0xb4
 8021026:	b918      	cbnz	r0, 8021030 <MobleConfigModelCreate+0x10>
 8021028:	2201      	movs	r2, #1
 802102a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 802102e:	4770      	bx	lr
 8021030:	2002      	movs	r0, #2
 8021032:	4770      	bx	lr
 8021034:	20000318 	.word	0x20000318

08021038 <MobleConfigModelGetConfigBeacon>:
 8021038:	4b03      	ldr	r3, [pc, #12]	; (8021048 <MobleConfigModelGetConfigBeacon+0x10>)
 802103a:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
 802103e:	1e43      	subs	r3, r0, #1
 8021040:	4258      	negs	r0, r3
 8021042:	4158      	adcs	r0, r3
 8021044:	4770      	bx	lr
 8021046:	bf00      	nop
 8021048:	20000318 	.word	0x20000318

0802104c <MobleStackBeaconGenerator>:
 802104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802104e:	4e39      	ldr	r6, [pc, #228]	; (8021134 <MobleStackBeaconGenerator+0xe8>)
 8021050:	4c39      	ldr	r4, [pc, #228]	; (8021138 <MobleStackBeaconGenerator+0xec>)
 8021052:	460a      	mov	r2, r1
 8021054:	f894 361c 	ldrb.w	r3, [r4, #1564]	; 0x61c
 8021058:	f896 1a3a 	ldrb.w	r1, [r6, #2618]	; 0xa3a
 802105c:	428b      	cmp	r3, r1
 802105e:	bf8b      	itete	hi
 8021060:	1c4b      	addhi	r3, r1, #1
 8021062:	2300      	movls	r3, #0
 8021064:	b2db      	uxtbhi	r3, r3
 8021066:	4619      	movls	r1, r3
 8021068:	2a00      	cmp	r2, #0
 802106a:	b08d      	sub	sp, #52	; 0x34
 802106c:	4605      	mov	r5, r0
 802106e:	f886 3a3a 	strb.w	r3, [r6, #2618]	; 0xa3a
 8021072:	db2c      	blt.n	80210ce <MobleStackBeaconGenerator+0x82>
 8021074:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
 8021078:	781b      	ldrb	r3, [r3, #0]
 802107a:	2b01      	cmp	r3, #1
 802107c:	d133      	bne.n	80210e6 <MobleStackBeaconGenerator+0x9a>
 802107e:	f7ff ffdb 	bl	8021038 <MobleConfigModelGetConfigBeacon>
 8021082:	b910      	cbnz	r0, 802108a <MobleStackBeaconGenerator+0x3e>
 8021084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021088:	e021      	b.n	80210ce <MobleStackBeaconGenerator+0x82>
 802108a:	4b2c      	ldr	r3, [pc, #176]	; (802113c <MobleStackBeaconGenerator+0xf0>)
 802108c:	9208      	str	r2, [sp, #32]
 802108e:	440b      	add	r3, r1
 8021090:	f8d4 7658 	ldr.w	r7, [r4, #1624]	; 0x658
 8021094:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8021098:	1e9a      	subs	r2, r3, #2
 802109a:	4256      	negs	r6, r2
 802109c:	4156      	adcs	r6, r2
 802109e:	f894 265c 	ldrb.w	r2, [r4, #1628]	; 0x65c
 80210a2:	2a01      	cmp	r2, #1
 80210a4:	bf08      	it	eq
 80210a6:	f046 0602 	orreq.w	r6, r6, #2
 80210aa:	2b02      	cmp	r3, #2
 80210ac:	d112      	bne.n	80210d4 <MobleStackBeaconGenerator+0x88>
 80210ae:	2001      	movs	r0, #1
 80210b0:	f7f8 f974 	bl	801939c <MoblePalCryptoGetNetworkSecurityKeys>
 80210b4:	2301      	movs	r3, #1
 80210b6:	e9cd 7300 	strd	r7, r3, [sp]
 80210ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80210be:	4632      	mov	r2, r6
 80210c0:	a908      	add	r1, sp, #32
 80210c2:	4628      	mov	r0, r5
 80210c4:	f7fc fa9c 	bl	801d600 <MobleBeaconSetSecure>
 80210c8:	2801      	cmp	r0, #1
 80210ca:	d8db      	bhi.n	8021084 <MobleStackBeaconGenerator+0x38>
 80210cc:	9a08      	ldr	r2, [sp, #32]
 80210ce:	4610      	mov	r0, r2
 80210d0:	b00d      	add	sp, #52	; 0x34
 80210d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80210d4:	2000      	movs	r0, #0
 80210d6:	f7f8 f961 	bl	801939c <MoblePalCryptoGetNetworkSecurityKeys>
 80210da:	2300      	movs	r3, #0
 80210dc:	e9cd 7300 	strd	r7, r3, [sp]
 80210e0:	f100 0328 	add.w	r3, r0, #40	; 0x28
 80210e4:	e7eb      	b.n	80210be <MobleStackBeaconGenerator+0x72>
 80210e6:	f7f6 ff53 	bl	8017f90 <MoblePalBluetoothGetConnectionState>
 80210ea:	2802      	cmp	r0, #2
 80210ec:	d120      	bne.n	8021130 <MobleStackBeaconGenerator+0xe4>
 80210ee:	f894 3854 	ldrb.w	r3, [r4, #2132]	; 0x854
 80210f2:	b1eb      	cbz	r3, 8021130 <MobleStackBeaconGenerator+0xe4>
 80210f4:	f896 6725 	ldrb.w	r6, [r6, #1829]	; 0x725
 80210f8:	b9d6      	cbnz	r6, 8021130 <MobleStackBeaconGenerator+0xe4>
 80210fa:	9203      	str	r2, [sp, #12]
 80210fc:	2210      	movs	r2, #16
 80210fe:	4631      	mov	r1, r6
 8021100:	eb0d 0002 	add.w	r0, sp, r2
 8021104:	f007 fd5c 	bl	8028bc0 <memset>
 8021108:	a804      	add	r0, sp, #16
 802110a:	f7f6 ff61 	bl	8017fd0 <MoblePalBluetoothGetBluetoothAddress>
 802110e:	4b0b      	ldr	r3, [pc, #44]	; (802113c <MobleStackBeaconGenerator+0xf0>)
 8021110:	685b      	ldr	r3, [r3, #4]
 8021112:	a808      	add	r0, sp, #32
 8021114:	695b      	ldr	r3, [r3, #20]
 8021116:	4798      	blx	r3
 8021118:	f8b4 38fc 	ldrh.w	r3, [r4, #2300]	; 0x8fc
 802111c:	9600      	str	r6, [sp, #0]
 802111e:	aa08      	add	r2, sp, #32
 8021120:	a903      	add	r1, sp, #12
 8021122:	4628      	mov	r0, r5
 8021124:	f7fc fa35 	bl	801d592 <MobleBeaconSetUnprovisioned>
 8021128:	2801      	cmp	r0, #1
 802112a:	d8ab      	bhi.n	8021084 <MobleStackBeaconGenerator+0x38>
 802112c:	9a03      	ldr	r2, [sp, #12]
 802112e:	e7ce      	b.n	80210ce <MobleStackBeaconGenerator+0x82>
 8021130:	2200      	movs	r2, #0
 8021132:	e7cc      	b.n	80210ce <MobleStackBeaconGenerator+0x82>
 8021134:	20002508 	.word	0x20002508
 8021138:	20001410 	.word	0x20001410
 802113c:	20000318 	.word	0x20000318

08021140 <MobleConfigModelGetRelayEnableStatus>:
 8021140:	4b03      	ldr	r3, [pc, #12]	; (8021150 <MobleConfigModelGetRelayEnableStatus+0x10>)
 8021142:	f893 00bd 	ldrb.w	r0, [r3, #189]	; 0xbd
 8021146:	1e43      	subs	r3, r0, #1
 8021148:	4258      	negs	r0, r3
 802114a:	4158      	adcs	r0, r3
 802114c:	4770      	bx	lr
 802114e:	bf00      	nop
 8021150:	20000318 	.word	0x20000318

08021154 <MobleNetworkDecideRetransmission>:
 8021154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021156:	b085      	sub	sp, #20
 8021158:	2300      	movs	r3, #0
 802115a:	460c      	mov	r4, r1
 802115c:	f88d 3003 	strb.w	r3, [sp, #3]
 8021160:	b928      	cbnz	r0, 802116e <MobleNetworkDecideRetransmission+0x1a>
 8021162:	4b53      	ldr	r3, [pc, #332]	; (80212b0 <MobleNetworkDecideRetransmission+0x15c>)
 8021164:	4a53      	ldr	r2, [pc, #332]	; (80212b4 <MobleNetworkDecideRetransmission+0x160>)
 8021166:	217a      	movs	r1, #122	; 0x7a
 8021168:	4853      	ldr	r0, [pc, #332]	; (80212b8 <MobleNetworkDecideRetransmission+0x164>)
 802116a:	f007 fc97 	bl	8028a9c <__assert_func>
 802116e:	b919      	cbnz	r1, 8021178 <MobleNetworkDecideRetransmission+0x24>
 8021170:	4b52      	ldr	r3, [pc, #328]	; (80212bc <MobleNetworkDecideRetransmission+0x168>)
 8021172:	4a50      	ldr	r2, [pc, #320]	; (80212b4 <MobleNetworkDecideRetransmission+0x160>)
 8021174:	217b      	movs	r1, #123	; 0x7b
 8021176:	e7f7      	b.n	8021168 <MobleNetworkDecideRetransmission+0x14>
 8021178:	f9b1 2016 	ldrsh.w	r2, [r1, #22]
 802117c:	8acb      	ldrh	r3, [r1, #22]
 802117e:	2a00      	cmp	r2, #0
 8021180:	dd1f      	ble.n	80211c2 <MobleNetworkDecideRetransmission+0x6e>
 8021182:	6802      	ldr	r2, [r0, #0]
 8021184:	8851      	ldrh	r1, [r2, #2]
 8021186:	428b      	cmp	r3, r1
 8021188:	d308      	bcc.n	802119c <MobleNetworkDecideRetransmission+0x48>
 802118a:	7f12      	ldrb	r2, [r2, #28]
 802118c:	440a      	add	r2, r1
 802118e:	4293      	cmp	r3, r2
 8021190:	da04      	bge.n	802119c <MobleNetworkDecideRetransmission+0x48>
 8021192:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8021196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802119a:	e00f      	b.n	80211bc <MobleNetworkDecideRetransmission+0x68>
 802119c:	4a48      	ldr	r2, [pc, #288]	; (80212c0 <MobleNetworkDecideRetransmission+0x16c>)
 802119e:	f892 20be 	ldrb.w	r2, [r2, #190]	; 0xbe
 80211a2:	2a01      	cmp	r2, #1
 80211a4:	d10d      	bne.n	80211c2 <MobleNetworkDecideRetransmission+0x6e>
 80211a6:	4618      	mov	r0, r3
 80211a8:	f7fd f852 	bl	801e250 <BnrgmFrndMgmtGetFriendshipStatus>
 80211ac:	b948      	cbnz	r0, 80211c2 <MobleNetworkDecideRetransmission+0x6e>
 80211ae:	7be3      	ldrb	r3, [r4, #15]
 80211b0:	2b01      	cmp	r3, #1
 80211b2:	d92b      	bls.n	802120c <MobleNetworkDecideRetransmission+0xb8>
 80211b4:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80211b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80211bc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80211c0:	e024      	b.n	802120c <MobleNetworkDecideRetransmission+0xb8>
 80211c2:	7be3      	ldrb	r3, [r4, #15]
 80211c4:	4e3e      	ldr	r6, [pc, #248]	; (80212c0 <MobleNetworkDecideRetransmission+0x16c>)
 80211c6:	8ae5      	ldrh	r5, [r4, #22]
 80211c8:	f896 70be 	ldrb.w	r7, [r6, #190]	; 0xbe
 80211cc:	2b01      	cmp	r3, #1
 80211ce:	bf82      	ittt	hi
 80211d0:	f8b4 3040 	ldrhhi.w	r3, [r4, #64]	; 0x40
 80211d4:	f443 7380 	orrhi.w	r3, r3, #256	; 0x100
 80211d8:	f8a4 3040 	strhhi.w	r3, [r4, #64]	; 0x40
 80211dc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80211e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80211e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80211e8:	d156      	bne.n	8021298 <MobleNetworkDecideRetransmission+0x144>
 80211ea:	4628      	mov	r0, r5
 80211ec:	f7f9 faf4 	bl	801a7d8 <MoblePalCryptoIsSubscriptionExists>
 80211f0:	b978      	cbnz	r0, 8021212 <MobleNetworkDecideRetransmission+0xbe>
 80211f2:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80211f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80211fa:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80211fe:	2f01      	cmp	r7, #1
 8021200:	d01c      	beq.n	802123c <MobleNetworkDecideRetransmission+0xe8>
 8021202:	6873      	ldr	r3, [r6, #4]
 8021204:	6a1b      	ldr	r3, [r3, #32]
 8021206:	4798      	blx	r3
 8021208:	2800      	cmp	r0, #0
 802120a:	d1c2      	bne.n	8021192 <MobleNetworkDecideRetransmission+0x3e>
 802120c:	2000      	movs	r0, #0
 802120e:	b005      	add	sp, #20
 8021210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021212:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8021216:	429d      	cmp	r5, r3
 8021218:	d104      	bne.n	8021224 <MobleNetworkDecideRetransmission+0xd0>
 802121a:	f896 30bc 	ldrb.w	r3, [r6, #188]	; 0xbc
 802121e:	2b01      	cmp	r3, #1
 8021220:	d1ed      	bne.n	80211fe <MobleNetworkDecideRetransmission+0xaa>
 8021222:	e7e6      	b.n	80211f2 <MobleNetworkDecideRetransmission+0x9e>
 8021224:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8021228:	429d      	cmp	r5, r3
 802122a:	d119      	bne.n	8021260 <MobleNetworkDecideRetransmission+0x10c>
 802122c:	2f01      	cmp	r7, #1
 802122e:	d1e8      	bne.n	8021202 <MobleNetworkDecideRetransmission+0xae>
 8021230:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8021234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021238:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 802123c:	aa01      	add	r2, sp, #4
 802123e:	f10d 0103 	add.w	r1, sp, #3
 8021242:	4628      	mov	r0, r5
 8021244:	f7fd f82a 	bl	801e29c <BnrgmFrndMgmtGetSubscrStatus>
 8021248:	f89d 3003 	ldrb.w	r3, [sp, #3]
 802124c:	2b00      	cmp	r3, #0
 802124e:	d0d8      	beq.n	8021202 <MobleNetworkDecideRetransmission+0xae>
 8021250:	7be3      	ldrb	r3, [r4, #15]
 8021252:	2b01      	cmp	r3, #1
 8021254:	d9d5      	bls.n	8021202 <MobleNetworkDecideRetransmission+0xae>
 8021256:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 802125a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802125e:	e011      	b.n	8021284 <MobleNetworkDecideRetransmission+0x130>
 8021260:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8021264:	429d      	cmp	r5, r3
 8021266:	d103      	bne.n	8021270 <MobleNetworkDecideRetransmission+0x11c>
 8021268:	f7ff ff6a 	bl	8021140 <MobleConfigModelGetRelayEnableStatus>
 802126c:	2801      	cmp	r0, #1
 802126e:	e7d7      	b.n	8021220 <MobleNetworkDecideRetransmission+0xcc>
 8021270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021274:	429d      	cmp	r5, r3
 8021276:	d10b      	bne.n	8021290 <MobleNetworkDecideRetransmission+0x13c>
 8021278:	2f01      	cmp	r7, #1
 802127a:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 802127e:	d004      	beq.n	802128a <MobleNetworkDecideRetransmission+0x136>
 8021280:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021284:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8021288:	e7bb      	b.n	8021202 <MobleNetworkDecideRetransmission+0xae>
 802128a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 802128e:	e7d3      	b.n	8021238 <MobleNetworkDecideRetransmission+0xe4>
 8021290:	f8b6 30e2 	ldrh.w	r3, [r6, #226]	; 0xe2
 8021294:	42ab      	cmp	r3, r5
 8021296:	e7c3      	b.n	8021220 <MobleNetworkDecideRetransmission+0xcc>
 8021298:	f405 4340 	and.w	r3, r5, #49152	; 0xc000
 802129c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80212a0:	d1ad      	bne.n	80211fe <MobleNetworkDecideRetransmission+0xaa>
 80212a2:	4628      	mov	r0, r5
 80212a4:	f7f9 fa98 	bl	801a7d8 <MoblePalCryptoIsSubscriptionExists>
 80212a8:	2800      	cmp	r0, #0
 80212aa:	d0a2      	beq.n	80211f2 <MobleNetworkDecideRetransmission+0x9e>
 80212ac:	e7a7      	b.n	80211fe <MobleNetworkDecideRetransmission+0xaa>
 80212ae:	bf00      	nop
 80212b0:	08033440 	.word	0x08033440
 80212b4:	08031ed0 	.word	0x08031ed0
 80212b8:	0803391e 	.word	0x0803391e
 80212bc:	080335d5 	.word	0x080335d5
 80212c0:	20000318 	.word	0x20000318

080212c4 <MobleConfigModelSetNodeIdentity>:
 80212c4:	2802      	cmp	r0, #2
 80212c6:	bf9d      	ittte	ls
 80212c8:	4b02      	ldrls	r3, [pc, #8]	; (80212d4 <MobleConfigModelSetNodeIdentity+0x10>)
 80212ca:	f883 00bb 	strbls.w	r0, [r3, #187]	; 0xbb
 80212ce:	2000      	movls	r0, #0
 80212d0:	2003      	movhi	r0, #3
 80212d2:	4770      	bx	lr
 80212d4:	20000318 	.word	0x20000318

080212d8 <BnrgmStackSetNodeIdentityState>:
 80212d8:	b510      	push	{r4, lr}
 80212da:	4604      	mov	r4, r0
 80212dc:	b910      	cbnz	r0, 80212e4 <BnrgmStackSetNodeIdentityState+0xc>
 80212de:	2102      	movs	r1, #2
 80212e0:	4608      	mov	r0, r1
 80212e2:	bd10      	pop	{r4, pc}
 80212e4:	4b17      	ldr	r3, [pc, #92]	; (8021344 <BnrgmStackSetNodeIdentityState+0x6c>)
 80212e6:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 80212ea:	428b      	cmp	r3, r1
 80212ec:	d103      	bne.n	80212f6 <BnrgmStackSetNodeIdentityState+0x1e>
 80212ee:	2b01      	cmp	r3, #1
 80212f0:	d021      	beq.n	8021336 <BnrgmStackSetNodeIdentityState+0x5e>
 80212f2:	2100      	movs	r1, #0
 80212f4:	e7f4      	b.n	80212e0 <BnrgmStackSetNodeIdentityState+0x8>
 80212f6:	4608      	mov	r0, r1
 80212f8:	f7ff ffe4 	bl	80212c4 <MobleConfigModelSetNodeIdentity>
 80212fc:	2901      	cmp	r1, #1
 80212fe:	d10f      	bne.n	8021320 <BnrgmStackSetNodeIdentityState+0x48>
 8021300:	4911      	ldr	r1, [pc, #68]	; (8021348 <BnrgmStackSetNodeIdentityState+0x70>)
 8021302:	4622      	mov	r2, r4
 8021304:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 8021308:	f7f6 fc04 	bl	8017b14 <MoblePalTimerCreate>
 802130c:	2801      	cmp	r0, #1
 802130e:	d8e6      	bhi.n	80212de <BnrgmStackSetNodeIdentityState+0x6>
 8021310:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
 8021314:	f64e 2160 	movw	r1, #60000	; 0xea60
 8021318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802131c:	f7f6 bc64 	b.w	8017be8 <MoblePalTimerStartOnce>
 8021320:	2900      	cmp	r1, #0
 8021322:	d1e6      	bne.n	80212f2 <BnrgmStackSetNodeIdentityState+0x1a>
 8021324:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
 8021328:	f7f6 fc86 	bl	8017c38 <MoblePalTimerStop>
 802132c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021330:	b133      	cbz	r3, 8021340 <BnrgmStackSetNodeIdentityState+0x68>
 8021332:	7019      	strb	r1, [r3, #0]
 8021334:	e7d4      	b.n	80212e0 <BnrgmStackSetNodeIdentityState+0x8>
 8021336:	f8d0 017c 	ldr.w	r0, [r0, #380]	; 0x17c
 802133a:	f7f6 fc7d 	bl	8017c38 <MoblePalTimerStop>
 802133e:	e7e5      	b.n	802130c <BnrgmStackSetNodeIdentityState+0x34>
 8021340:	2103      	movs	r1, #3
 8021342:	e7cd      	b.n	80212e0 <BnrgmStackSetNodeIdentityState+0x8>
 8021344:	20000318 	.word	0x20000318
 8021348:	08017d4d 	.word	0x08017d4d

0802134c <MobleStackConfigValidate>:
 802134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802134e:	4b32      	ldr	r3, [pc, #200]	; (8021418 <MobleStackConfigValidate+0xcc>)
 8021350:	4c32      	ldr	r4, [pc, #200]	; (802141c <MobleStackConfigValidate+0xd0>)
 8021352:	2600      	movs	r6, #0
 8021354:	f883 6166 	strb.w	r6, [r3, #358]	; 0x166
 8021358:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
 802135c:	2201      	movs	r2, #1
 802135e:	6858      	ldr	r0, [r3, #4]
 8021360:	701a      	strb	r2, [r3, #0]
 8021362:	f7f8 fc47 	bl	8019bf4 <MoblePalCryptoSetIvIndex>
 8021366:	2801      	cmp	r0, #1
 8021368:	4605      	mov	r5, r0
 802136a:	d853      	bhi.n	8021414 <MobleStackConfigValidate+0xc8>
 802136c:	4f2c      	ldr	r7, [pc, #176]	; (8021420 <MobleStackConfigValidate+0xd4>)
 802136e:	4b2d      	ldr	r3, [pc, #180]	; (8021424 <MobleStackConfigValidate+0xd8>)
 8021370:	f8d4 5680 	ldr.w	r5, [r4, #1664]	; 0x680
 8021374:	f8c4 3924 	str.w	r3, [r4, #2340]	; 0x924
 8021378:	687b      	ldr	r3, [r7, #4]
 802137a:	f8c4 67dc 	str.w	r6, [r4, #2012]	; 0x7dc
 802137e:	69db      	ldr	r3, [r3, #28]
 8021380:	60ae      	str	r6, [r5, #8]
 8021382:	4798      	blx	r3
 8021384:	7728      	strb	r0, [r5, #28]
 8021386:	f8d4 0680 	ldr.w	r0, [r4, #1664]	; 0x680
 802138a:	f7fb fd5f 	bl	801ce4c <MobleConfigNetworkSave>
 802138e:	2801      	cmp	r0, #1
 8021390:	4605      	mov	r5, r0
 8021392:	d83f      	bhi.n	8021414 <MobleStackConfigValidate+0xc8>
 8021394:	f8d4 0680 	ldr.w	r0, [r4, #1664]	; 0x680
 8021398:	f7fb fc88 	bl	801ccac <MobleConfigSaveSeq>
 802139c:	2801      	cmp	r0, #1
 802139e:	4605      	mov	r5, r0
 80213a0:	d838      	bhi.n	8021414 <MobleStackConfigValidate+0xc8>
 80213a2:	f242 7310 	movw	r3, #10000	; 0x2710
 80213a6:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
 80213aa:	f8a4 385c 	strh.w	r3, [r4, #2140]	; 0x85c
 80213ae:	f7f9 fc17 	bl	801abe0 <BnrgmTransmitChangeRegularlyGeneratedInterval>
 80213b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80213b6:	f8d4 0860 	ldr.w	r0, [r4, #2144]	; 0x860
 80213ba:	f8a4 3864 	strh.w	r3, [r4, #2148]	; 0x864
 80213be:	f7f9 fc0f 	bl	801abe0 <BnrgmTransmitChangeRegularlyGeneratedInterval>
 80213c2:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
 80213c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80213ca:	2b01      	cmp	r3, #1
 80213cc:	d109      	bne.n	80213e2 <MobleStackConfigValidate+0x96>
 80213ce:	f7e5 f857 	bl	8006480 <BLEMesh_ProvisionCallback>
 80213d2:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
 80213d6:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 80213da:	f883 6039 	strb.w	r6, [r3, #57]	; 0x39
 80213de:	f7fb fcf1 	bl	801cdc4 <MobleApplicationInit>
 80213e2:	4811      	ldr	r0, [pc, #68]	; (8021428 <MobleStackConfigValidate+0xdc>)
 80213e4:	2101      	movs	r1, #1
 80213e6:	f7fd fc21 	bl	801ec2c <MobleProvisionUpdateRole>
 80213ea:	f7ff ff75 	bl	80212d8 <BnrgmStackSetNodeIdentityState>
 80213ee:	f7f6 fdcf 	bl	8017f90 <MoblePalBluetoothGetConnectionState>
 80213f2:	2802      	cmp	r0, #2
 80213f4:	d00e      	beq.n	8021414 <MobleStackConfigValidate+0xc8>
 80213f6:	480c      	ldr	r0, [pc, #48]	; (8021428 <MobleStackConfigValidate+0xdc>)
 80213f8:	2101      	movs	r1, #1
 80213fa:	f7fb ff33 	bl	801d264 <BnrgmStackSetDummyProxyModeState>
 80213fe:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8021402:	2b02      	cmp	r3, #2
 8021404:	d006      	beq.n	8021414 <MobleStackConfigValidate+0xc8>
 8021406:	f894 3854 	ldrb.w	r3, [r4, #2132]	; 0x854
 802140a:	2b01      	cmp	r3, #1
 802140c:	d102      	bne.n	8021414 <MobleStackConfigValidate+0xc8>
 802140e:	2000      	movs	r0, #0
 8021410:	f7fe f87a 	bl	801f508 <BnrgmTransmitSetAutoScanState>
 8021414:	4628      	mov	r0, r5
 8021416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021418:	20003f58 	.word	0x20003f58
 802141c:	20001410 	.word	0x20001410
 8021420:	20000318 	.word	0x20000318
 8021424:	1ee62800 	.word	0x1ee62800
 8021428:	20001a90 	.word	0x20001a90

0802142c <MobleProvision_UnprovisionedNode_CompleteOperation>:
 802142c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021430:	4c94      	ldr	r4, [pc, #592]	; (8021684 <MobleProvision_UnprovisionedNode_CompleteOperation+0x258>)
 8021432:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	; 0xa0c
 8021436:	f893 21a8 	ldrb.w	r2, [r3, #424]	; 0x1a8
 802143a:	b122      	cbz	r2, 8021446 <MobleProvision_UnprovisionedNode_CompleteOperation+0x1a>
 802143c:	2207      	movs	r2, #7
 802143e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021442:	2200      	movs	r2, #0
 8021444:	e01e      	b.n	8021484 <MobleProvision_UnprovisionedNode_CompleteOperation+0x58>
 8021446:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 802144a:	2a07      	cmp	r2, #7
 802144c:	f200 80f2 	bhi.w	8021634 <MobleProvision_UnprovisionedNode_CompleteOperation+0x208>
 8021450:	a101      	add	r1, pc, #4	; (adr r1, 8021458 <MobleProvision_UnprovisionedNode_CompleteOperation+0x2c>)
 8021452:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8021456:	bf00      	nop
 8021458:	08021479 	.word	0x08021479
 802145c:	0802148b 	.word	0x0802148b
 8021460:	0802163b 	.word	0x0802163b
 8021464:	0802162f 	.word	0x0802162f
 8021468:	08021649 	.word	0x08021649
 802146c:	08021655 	.word	0x08021655
 8021470:	08021635 	.word	0x08021635
 8021474:	08021443 	.word	0x08021443
 8021478:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 802147c:	2201      	movs	r2, #1
 802147e:	2900      	cmp	r1, #0
 8021480:	f040 80d6 	bne.w	8021630 <MobleProvision_UnprovisionedNode_CompleteOperation+0x204>
 8021484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8021488:	e0d4      	b.n	8021634 <MobleProvision_UnprovisionedNode_CompleteOperation+0x208>
 802148a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802148e:	2a01      	cmp	r2, #1
 8021490:	d857      	bhi.n	8021542 <MobleProvision_UnprovisionedNode_CompleteOperation+0x116>
 8021492:	3201      	adds	r2, #1
 8021494:	b2d2      	uxtb	r2, r2
 8021496:	2a02      	cmp	r2, #2
 8021498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802149c:	f040 80ca 	bne.w	8021634 <MobleProvision_UnprovisionedNode_CompleteOperation+0x208>
 80214a0:	f8d4 16f0 	ldr.w	r1, [r4, #1776]	; 0x6f0
 80214a4:	f891 11fa 	ldrb.w	r1, [r1, #506]	; 0x1fa
 80214a8:	2900      	cmp	r1, #0
 80214aa:	f000 80c3 	beq.w	8021634 <MobleProvision_UnprovisionedNode_CompleteOperation+0x208>
 80214ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80214b2:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 80214b6:	f893 21fb 	ldrb.w	r2, [r3, #507]	; 0x1fb
 80214ba:	2a02      	cmp	r2, #2
 80214bc:	d166      	bne.n	802158c <MobleProvision_UnprovisionedNode_CompleteOperation+0x160>
 80214be:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
 80214c2:	2a00      	cmp	r2, #0
 80214c4:	d062      	beq.n	802158c <MobleProvision_UnprovisionedNode_CompleteOperation+0x160>
 80214c6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80214ca:	2b03      	cmp	r3, #3
 80214cc:	d93b      	bls.n	8021546 <MobleProvision_UnprovisionedNode_CompleteOperation+0x11a>
 80214ce:	2b04      	cmp	r3, #4
 80214d0:	d151      	bne.n	8021576 <MobleProvision_UnprovisionedNode_CompleteOperation+0x14a>
 80214d2:	2500      	movs	r5, #0
 80214d4:	263e      	movs	r6, #62	; 0x3e
 80214d6:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 80214da:	f893 2278 	ldrb.w	r2, [r3, #632]	; 0x278
 80214de:	f893 31fd 	ldrb.w	r3, [r3, #509]	; 0x1fd
 80214e2:	429a      	cmp	r2, r3
 80214e4:	d247      	bcs.n	8021576 <MobleProvision_UnprovisionedNode_CompleteOperation+0x14a>
 80214e6:	4668      	mov	r0, sp
 80214e8:	e9cd 5500 	strd	r5, r5, [sp]
 80214ec:	f7f4 fa00 	bl	80158f0 <hci_le_rand>
 80214f0:	466a      	mov	r2, sp
 80214f2:	2108      	movs	r1, #8
 80214f4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80214f8:	fbb3 f0f6 	udiv	r0, r3, r6
 80214fc:	fb06 3310 	mls	r3, r6, r0, r3
 8021500:	b2db      	uxtb	r3, r3
 8021502:	2b0a      	cmp	r3, #10
 8021504:	f200 808e 	bhi.w	8021624 <MobleProvision_UnprovisionedNode_CompleteOperation+0x1f8>
 8021508:	3330      	adds	r3, #48	; 0x30
 802150a:	3901      	subs	r1, #1
 802150c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021510:	d1f0      	bne.n	80214f4 <MobleProvision_UnprovisionedNode_CompleteOperation+0xc8>
 8021512:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 8021516:	f893 0278 	ldrb.w	r0, [r3, #632]	; 0x278
 802151a:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 802151e:	1a12      	subs	r2, r2, r0
 8021520:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8021524:	2a08      	cmp	r2, #8
 8021526:	bfa8      	it	ge
 8021528:	2208      	movge	r2, #8
 802152a:	4418      	add	r0, r3
 802152c:	4669      	mov	r1, sp
 802152e:	f007 fb2d 	bl	8028b8c <memmove>
 8021532:	f8d4 26f0 	ldr.w	r2, [r4, #1776]	; 0x6f0
 8021536:	f892 3278 	ldrb.w	r3, [r2, #632]	; 0x278
 802153a:	3308      	adds	r3, #8
 802153c:	f882 3278 	strb.w	r3, [r2, #632]	; 0x278
 8021540:	e7c9      	b.n	80214d6 <MobleProvision_UnprovisionedNode_CompleteOperation+0xaa>
 8021542:	2202      	movs	r2, #2
 8021544:	e7b3      	b.n	80214ae <MobleProvision_UnprovisionedNode_CompleteOperation+0x82>
 8021546:	2200      	movs	r2, #0
 8021548:	2300      	movs	r3, #0
 802154a:	e9cd 2300 	strd	r2, r3, [sp]
 802154e:	2700      	movs	r7, #0
 8021550:	250a      	movs	r5, #10
 8021552:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 8021556:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 802155a:	b2fa      	uxtb	r2, r7
 802155c:	4291      	cmp	r1, r2
 802155e:	d849      	bhi.n	80215f4 <MobleProvision_UnprovisionedNode_CompleteOperation+0x1c8>
 8021560:	2200      	movs	r2, #0
 8021562:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 8021566:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
 802156a:	466a      	mov	r2, sp
 802156c:	ca03      	ldmia	r2!, {r0, r1}
 802156e:	f8c3 0268 	str.w	r0, [r3, #616]	; 0x268
 8021572:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
 8021576:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	; 0x6f0
 802157a:	f890 11fd 	ldrb.w	r1, [r0, #509]	; 0x1fd
 802157e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8021582:	f880 1278 	strb.w	r1, [r0, #632]	; 0x278
 8021586:	f500 701a 	add.w	r0, r0, #616	; 0x268
 802158a:	4798      	blx	r3
 802158c:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 8021590:	f893 21fb 	ldrb.w	r2, [r3, #507]	; 0x1fb
 8021594:	2a03      	cmp	r2, #3
 8021596:	d11a      	bne.n	80215ce <MobleProvision_UnprovisionedNode_CompleteOperation+0x1a2>
 8021598:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
 802159c:	b1ba      	cbz	r2, 80215ce <MobleProvision_UnprovisionedNode_CompleteOperation+0x1a2>
 802159e:	f893 01fd 	ldrb.w	r0, [r3, #509]	; 0x1fd
 80215a2:	4790      	blx	r2
 80215a4:	4601      	mov	r1, r0
 80215a6:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	; 0x6f0
 80215aa:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80215ae:	2a03      	cmp	r2, #3
 80215b0:	bf14      	ite	ne
 80215b2:	f890 21fd 	ldrbne.w	r2, [r0, #509]	; 0x1fd
 80215b6:	2202      	moveq	r2, #2
 80215b8:	f880 2278 	strb.w	r2, [r0, #632]	; 0x278
 80215bc:	f500 701a 	add.w	r0, r0, #616	; 0x268
 80215c0:	f007 fae4 	bl	8028b8c <memmove>
 80215c4:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	; 0xa0c
 80215c8:	2203      	movs	r2, #3
 80215ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80215ce:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	; 0x6f0
 80215d2:	f890 31fb 	ldrb.w	r3, [r0, #507]	; 0x1fb
 80215d6:	2b01      	cmp	r3, #1
 80215d8:	d12c      	bne.n	8021634 <MobleProvision_UnprovisionedNode_CompleteOperation+0x208>
 80215da:	f890 227e 	ldrb.w	r2, [r0, #638]	; 0x27e
 80215de:	f880 2278 	strb.w	r2, [r0, #632]	; 0x278
 80215e2:	f200 217f 	addw	r1, r0, #639	; 0x27f
 80215e6:	f500 701a 	add.w	r0, r0, #616	; 0x268
 80215ea:	b002      	add	sp, #8
 80215ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80215f0:	f007 bacc 	b.w	8028b8c <memmove>
 80215f4:	9e00      	ldr	r6, [sp, #0]
 80215f6:	9b01      	ldr	r3, [sp, #4]
 80215f8:	fba6 8605 	umull	r8, r6, r6, r5
 80215fc:	fb05 6603 	mla	r6, r5, r3, r6
 8021600:	f7f6 fd26 	bl	8018050 <MoblePalBluetoothRandom>
 8021604:	fbb0 f3f5 	udiv	r3, r0, r5
 8021608:	fb03 0015 	mls	r0, r3, r5, r0
 802160c:	b2c0      	uxtb	r0, r0
 802160e:	1e43      	subs	r3, r0, #1
 8021610:	2b08      	cmp	r3, #8
 8021612:	d8f5      	bhi.n	8021600 <MobleProvision_UnprovisionedNode_CompleteOperation+0x1d4>
 8021614:	eb10 0008 	adds.w	r0, r0, r8
 8021618:	f146 0600 	adc.w	r6, r6, #0
 802161c:	e9cd 0600 	strd	r0, r6, [sp]
 8021620:	3701      	adds	r7, #1
 8021622:	e796      	b.n	8021552 <MobleProvision_UnprovisionedNode_CompleteOperation+0x126>
 8021624:	2b24      	cmp	r3, #36	; 0x24
 8021626:	bf94      	ite	ls
 8021628:	3357      	addls	r3, #87	; 0x57
 802162a:	331d      	addhi	r3, #29
 802162c:	e76d      	b.n	802150a <MobleProvision_UnprovisionedNode_CompleteOperation+0xde>
 802162e:	2202      	movs	r2, #2
 8021630:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8021634:	b002      	add	sp, #8
 8021636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802163a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802163e:	b90a      	cbnz	r2, 8021644 <MobleProvision_UnprovisionedNode_CompleteOperation+0x218>
 8021640:	2201      	movs	r2, #1
 8021642:	e71f      	b.n	8021484 <MobleProvision_UnprovisionedNode_CompleteOperation+0x58>
 8021644:	2204      	movs	r2, #4
 8021646:	e7f3      	b.n	8021630 <MobleProvision_UnprovisionedNode_CompleteOperation+0x204>
 8021648:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802164c:	2a00      	cmp	r2, #0
 802164e:	d0f7      	beq.n	8021640 <MobleProvision_UnprovisionedNode_CompleteOperation+0x214>
 8021650:	2205      	movs	r2, #5
 8021652:	e7ed      	b.n	8021630 <MobleProvision_UnprovisionedNode_CompleteOperation+0x204>
 8021654:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8021658:	2a00      	cmp	r2, #0
 802165a:	d0f1      	beq.n	8021640 <MobleProvision_UnprovisionedNode_CompleteOperation+0x214>
 802165c:	2206      	movs	r2, #6
 802165e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8021662:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 8021666:	681b      	ldr	r3, [r3, #0]
 8021668:	2201      	movs	r2, #1
 802166a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 802166e:	f7ff fe6d 	bl	802134c <MobleStackConfigValidate>
 8021672:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	; 0x6f0
 8021676:	2104      	movs	r1, #4
 8021678:	b002      	add	sp, #8
 802167a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802167e:	f7fe bf5d 	b.w	802053c <MobleStackFSM>
 8021682:	bf00      	nop
 8021684:	20002508 	.word	0x20002508

08021688 <MobleProvision_CompleteOperation>:
 8021688:	b908      	cbnz	r0, 802168e <MobleProvision_CompleteOperation+0x6>
 802168a:	f7fe bc9f 	b.w	801ffcc <MobleProvision_ProvisionerNode_CompleteOperation>
 802168e:	f7ff becd 	b.w	802142c <MobleProvision_UnprovisionedNode_CompleteOperation>

08021692 <Test_UpperTester_Set11>:
 8021692:	b510      	push	{r4, lr}
 8021694:	780b      	ldrb	r3, [r1, #0]
 8021696:	3b30      	subs	r3, #48	; 0x30
 8021698:	2b01      	cmp	r3, #1
 802169a:	4604      	mov	r4, r0
 802169c:	d80d      	bhi.n	80216ba <Test_UpperTester_Set11+0x28>
 802169e:	2101      	movs	r1, #1
 80216a0:	2000      	movs	r0, #0
 80216a2:	f7f7 fcc5 	bl	8019030 <MoblePalCryptoSetNodeIdntyState>
 80216a6:	2101      	movs	r1, #1
 80216a8:	4608      	mov	r0, r1
 80216aa:	f7f7 fcc1 	bl	8019030 <MoblePalCryptoSetNodeIdntyState>
 80216ae:	2101      	movs	r1, #1
 80216b0:	4620      	mov	r0, r4
 80216b2:	f7ff fe11 	bl	80212d8 <BnrgmStackSetNodeIdentityState>
 80216b6:	2000      	movs	r0, #0
 80216b8:	bd10      	pop	{r4, pc}
 80216ba:	2003      	movs	r0, #3
 80216bc:	e7fc      	b.n	80216b8 <Test_UpperTester_Set11+0x26>
	...

080216c0 <ModelConfigUpdateKRState>:
 80216c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216c2:	4e25      	ldr	r6, [pc, #148]	; (8021758 <ModelConfigUpdateKRState+0x98>)
 80216c4:	4b25      	ldr	r3, [pc, #148]	; (802175c <ModelConfigUpdateKRState+0x9c>)
 80216c6:	440e      	add	r6, r1
 80216c8:	227c      	movs	r2, #124	; 0x7c
 80216ca:	fb02 3301 	mla	r3, r2, r1, r3
 80216ce:	f896 40c0 	ldrb.w	r4, [r6, #192]	; 0xc0
 80216d2:	4605      	mov	r5, r0
 80216d4:	460f      	mov	r7, r1
 80216d6:	f8b3 0448 	ldrh.w	r0, [r3, #1096]	; 0x448
 80216da:	b99c      	cbnz	r4, 8021704 <ModelConfigUpdateKRState+0x44>
 80216dc:	f7f7 fc5a 	bl	8018f94 <MoblePalCryptoHasNewNetworkKey>
 80216e0:	2801      	cmp	r0, #1
 80216e2:	d108      	bne.n	80216f6 <ModelConfigUpdateKRState+0x36>
 80216e4:	b3b5      	cbz	r5, 8021754 <ModelConfigUpdateKRState+0x94>
 80216e6:	1e6b      	subs	r3, r5, #1
 80216e8:	2b01      	cmp	r3, #1
 80216ea:	d831      	bhi.n	8021750 <ModelConfigUpdateKRState+0x90>
 80216ec:	f886 50c0 	strb.w	r5, [r6, #192]	; 0xc0
 80216f0:	f7fc fffe 	bl	801e6f0 <BnrgmFrndMgmtSendSecurityUpdate>
 80216f4:	e004      	b.n	8021700 <ModelConfigUpdateKRState+0x40>
 80216f6:	3d01      	subs	r5, #1
 80216f8:	2d01      	cmp	r5, #1
 80216fa:	bf8c      	ite	hi
 80216fc:	2401      	movhi	r4, #1
 80216fe:	2402      	movls	r4, #2
 8021700:	4620      	mov	r0, r4
 8021702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021704:	2c01      	cmp	r4, #1
 8021706:	d110      	bne.n	802172a <ModelConfigUpdateKRState+0x6a>
 8021708:	b325      	cbz	r5, 8021754 <ModelConfigUpdateKRState+0x94>
 802170a:	2d03      	cmp	r5, #3
 802170c:	f886 50c0 	strb.w	r5, [r6, #192]	; 0xc0
 8021710:	d107      	bne.n	8021722 <ModelConfigUpdateKRState+0x62>
 8021712:	f7f9 f805 	bl	801a720 <MoblePalCryptoSwitchKeys>
 8021716:	4638      	mov	r0, r7
 8021718:	f7fd f92a 	bl	801e970 <BnrgmFrndMgmtSwitchKeys>
 802171c:	2300      	movs	r3, #0
 802171e:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
 8021722:	f7fc ffe5 	bl	801e6f0 <BnrgmFrndMgmtSendSecurityUpdate>
 8021726:	2400      	movs	r4, #0
 8021728:	e7ea      	b.n	8021700 <ModelConfigUpdateKRState+0x40>
 802172a:	2c02      	cmp	r4, #2
 802172c:	d1fb      	bne.n	8021726 <ModelConfigUpdateKRState+0x66>
 802172e:	2d03      	cmp	r5, #3
 8021730:	d10a      	bne.n	8021748 <ModelConfigUpdateKRState+0x88>
 8021732:	f886 50c0 	strb.w	r5, [r6, #192]	; 0xc0
 8021736:	f7f8 fff3 	bl	801a720 <MoblePalCryptoSwitchKeys>
 802173a:	2400      	movs	r4, #0
 802173c:	4638      	mov	r0, r7
 802173e:	f7fd f917 	bl	801e970 <BnrgmFrndMgmtSwitchKeys>
 8021742:	f886 40c0 	strb.w	r4, [r6, #192]	; 0xc0
 8021746:	e7d3      	b.n	80216f0 <ModelConfigUpdateKRState+0x30>
 8021748:	2d02      	cmp	r5, #2
 802174a:	bf08      	it	eq
 802174c:	2401      	moveq	r4, #1
 802174e:	e7d7      	b.n	8021700 <ModelConfigUpdateKRState+0x40>
 8021750:	4604      	mov	r4, r0
 8021752:	e7d5      	b.n	8021700 <ModelConfigUpdateKRState+0x40>
 8021754:	2402      	movs	r4, #2
 8021756:	e7d3      	b.n	8021700 <ModelConfigUpdateKRState+0x40>
 8021758:	20000318 	.word	0x20000318
 802175c:	20001410 	.word	0x20001410

08021760 <MobleStackProcessBeacon>:
 8021760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021764:	ed2d 8b02 	vpush	{d8}
 8021768:	b08f      	sub	sp, #60	; 0x3c
 802176a:	ee08 2a10 	vmov	s16, r2
 802176e:	9304      	str	r3, [sp, #16]
 8021770:	f1a1 0313 	sub.w	r3, r1, #19
 8021774:	2b04      	cmp	r3, #4
 8021776:	4607      	mov	r7, r0
 8021778:	f200 80e6 	bhi.w	8021948 <MobleStackProcessBeacon+0x1e8>
 802177c:	7805      	ldrb	r5, [r0, #0]
 802177e:	b955      	cbnz	r5, 8021796 <MobleStackProcessBeacon+0x36>
 8021780:	9b04      	ldr	r3, [sp, #16]
 8021782:	9301      	str	r3, [sp, #4]
 8021784:	3701      	adds	r7, #1
 8021786:	9502      	str	r5, [sp, #8]
 8021788:	9700      	str	r7, [sp, #0]
 802178a:	462b      	mov	r3, r5
 802178c:	4629      	mov	r1, r5
 802178e:	4870      	ldr	r0, [pc, #448]	; (8021950 <MobleStackProcessBeacon+0x1f0>)
 8021790:	f7fb fdcf 	bl	801d332 <BLEMesh_UpdateNeighbors>
 8021794:	e026      	b.n	80217e4 <MobleStackProcessBeacon+0x84>
 8021796:	2d01      	cmp	r5, #1
 8021798:	f040 80d8 	bne.w	802194c <MobleStackProcessBeacon+0x1ec>
 802179c:	2916      	cmp	r1, #22
 802179e:	f040 80d5 	bne.w	802194c <MobleStackProcessBeacon+0x1ec>
 80217a2:	f100 0a02 	add.w	sl, r0, #2
 80217a6:	2108      	movs	r1, #8
 80217a8:	4650      	mov	r0, sl
 80217aa:	f7f7 fe29 	bl	8019400 <MoblePalCryptoGetSecurityKeys_Beacon>
 80217ae:	4604      	mov	r4, r0
 80217b0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 80217b2:	f7f8 ff81 	bl	801a6b8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80217b6:	f1b0 0800 	subs.w	r8, r0, #0
 80217ba:	db13      	blt.n	80217e4 <MobleStackProcessBeacon+0x84>
 80217bc:	4b65      	ldr	r3, [pc, #404]	; (8021954 <MobleStackProcessBeacon+0x1f4>)
 80217be:	4443      	add	r3, r8
 80217c0:	fa5f f988 	uxtb.w	r9, r8
 80217c4:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
 80217c8:	2e01      	cmp	r6, #1
 80217ca:	d011      	beq.n	80217f0 <MobleStackProcessBeacon+0x90>
 80217cc:	2e02      	cmp	r6, #2
 80217ce:	d030      	beq.n	8021832 <MobleStackProcessBeacon+0xd2>
 80217d0:	2e00      	cmp	r6, #0
 80217d2:	d167      	bne.n	80218a4 <MobleStackProcessBeacon+0x144>
 80217d4:	2208      	movs	r2, #8
 80217d6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80217da:	4650      	mov	r0, sl
 80217dc:	f007 f9b8 	bl	8028b50 <memcmp>
 80217e0:	2800      	cmp	r0, #0
 80217e2:	d041      	beq.n	8021868 <MobleStackProcessBeacon+0x108>
 80217e4:	4628      	mov	r0, r5
 80217e6:	b00f      	add	sp, #60	; 0x3c
 80217e8:	ecbd 8b02 	vpop	{d8}
 80217ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217f0:	4b59      	ldr	r3, [pc, #356]	; (8021958 <MobleStackProcessBeacon+0x1f8>)
 80217f2:	227c      	movs	r2, #124	; 0x7c
 80217f4:	fb02 3208 	mla	r2, r2, r8, r3
 80217f8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80217fc:	f892 2445 	ldrb.w	r2, [r2, #1093]	; 0x445
 8021800:	2a01      	cmp	r2, #1
 8021802:	bf0c      	ite	eq
 8021804:	464c      	moveq	r4, r9
 8021806:	2400      	movne	r4, #0
 8021808:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 802180c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8021810:	f10b 0128 	add.w	r1, fp, #40	; 0x28
 8021814:	2208      	movs	r2, #8
 8021816:	4419      	add	r1, r3
 8021818:	4650      	mov	r0, sl
 802181a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802181e:	f007 f997 	bl	8028b50 <memcmp>
 8021822:	2800      	cmp	r0, #0
 8021824:	d053      	beq.n	80218ce <MobleStackProcessBeacon+0x16e>
 8021826:	4b4d      	ldr	r3, [pc, #308]	; (802195c <MobleStackProcessBeacon+0x1fc>)
 8021828:	f10b 0130 	add.w	r1, fp, #48	; 0x30
 802182c:	2208      	movs	r2, #8
 802182e:	4419      	add	r1, r3
 8021830:	e7d3      	b.n	80217da <MobleStackProcessBeacon+0x7a>
 8021832:	4c49      	ldr	r4, [pc, #292]	; (8021958 <MobleStackProcessBeacon+0x1f8>)
 8021834:	237c      	movs	r3, #124	; 0x7c
 8021836:	fb03 4308 	mla	r3, r3, r8, r4
 802183a:	f204 4424 	addw	r4, r4, #1060	; 0x424
 802183e:	f893 2446 	ldrb.w	r2, [r3, #1094]	; 0x446
 8021842:	9305      	str	r3, [sp, #20]
 8021844:	2a01      	cmp	r2, #1
 8021846:	bf0c      	ite	eq
 8021848:	464e      	moveq	r6, r9
 802184a:	2600      	movne	r6, #0
 802184c:	ebc6 1646 	rsb	r6, r6, r6, lsl #5
 8021850:	00b6      	lsls	r6, r6, #2
 8021852:	f106 0130 	add.w	r1, r6, #48	; 0x30
 8021856:	2208      	movs	r2, #8
 8021858:	4421      	add	r1, r4
 802185a:	4650      	mov	r0, sl
 802185c:	f007 f978 	bl	8028b50 <memcmp>
 8021860:	9b05      	ldr	r3, [sp, #20]
 8021862:	bb08      	cbnz	r0, 80218a8 <MobleStackProcessBeacon+0x148>
 8021864:	4434      	add	r4, r6
 8021866:	462e      	mov	r6, r5
 8021868:	2300      	movs	r3, #0
 802186a:	787d      	ldrb	r5, [r7, #1]
 802186c:	930c      	str	r3, [sp, #48]	; 0x30
 802186e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8021872:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8021876:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 802187a:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 802187e:	b346      	cbz	r6, 80218d2 <MobleStackProcessBeacon+0x172>
 8021880:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021882:	f8cd 3029 	str.w	r3, [sp, #41]	; 0x29
 8021886:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021888:	f8cd 302d 	str.w	r3, [sp, #45]	; 0x2d
 802188c:	f8d7 300a 	ldr.w	r3, [r7, #10]
 8021890:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
 8021894:	220d      	movs	r2, #13
 8021896:	4633      	mov	r3, r6
 8021898:	a90a      	add	r1, sp, #40	; 0x28
 802189a:	a808      	add	r0, sp, #32
 802189c:	f7f8 f9d8 	bl	8019c50 <MoblePalCryptoAuthenticateSecureNetworkBeacon>
 80218a0:	2801      	cmp	r0, #1
 80218a2:	d91b      	bls.n	80218dc <MobleStackProcessBeacon+0x17c>
 80218a4:	2502      	movs	r5, #2
 80218a6:	e79d      	b.n	80217e4 <MobleStackProcessBeacon+0x84>
 80218a8:	f893 3445 	ldrb.w	r3, [r3, #1093]	; 0x445
 80218ac:	2b01      	cmp	r3, #1
 80218ae:	bf0c      	ite	eq
 80218b0:	464e      	moveq	r6, r9
 80218b2:	2600      	movne	r6, #0
 80218b4:	ebc6 1646 	rsb	r6, r6, r6, lsl #5
 80218b8:	00b6      	lsls	r6, r6, #2
 80218ba:	f106 0128 	add.w	r1, r6, #40	; 0x28
 80218be:	2208      	movs	r2, #8
 80218c0:	4421      	add	r1, r4
 80218c2:	4650      	mov	r0, sl
 80218c4:	f007 f944 	bl	8028b50 <memcmp>
 80218c8:	2800      	cmp	r0, #0
 80218ca:	d18b      	bne.n	80217e4 <MobleStackProcessBeacon+0x84>
 80218cc:	4434      	add	r4, r6
 80218ce:	4606      	mov	r6, r0
 80218d0:	e7ca      	b.n	8021868 <MobleStackProcessBeacon+0x108>
 80218d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80218d4:	f8cd 3029 	str.w	r3, [sp, #41]	; 0x29
 80218d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80218da:	e7d5      	b.n	8021888 <MobleStackProcessBeacon+0x128>
 80218dc:	2208      	movs	r2, #8
 80218de:	f107 010e 	add.w	r1, r7, #14
 80218e2:	a808      	add	r0, sp, #32
 80218e4:	f007 f934 	bl	8028b50 <memcmp>
 80218e8:	2800      	cmp	r0, #0
 80218ea:	d1db      	bne.n	80218a4 <MobleStackProcessBeacon+0x144>
 80218ec:	9007      	str	r0, [sp, #28]
 80218ee:	aa07      	add	r2, sp, #28
 80218f0:	2104      	movs	r1, #4
 80218f2:	f107 000a 	add.w	r0, r7, #10
 80218f6:	f7f9 fc53 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 80218fa:	9907      	ldr	r1, [sp, #28]
 80218fc:	464a      	mov	r2, r9
 80218fe:	4628      	mov	r0, r5
 8021900:	f7fc ff82 	bl	801e808 <MobleStackProcessIvFromBeacon>
 8021904:	2801      	cmp	r0, #1
 8021906:	d8cd      	bhi.n	80218a4 <MobleStackProcessBeacon+0x144>
 8021908:	2e01      	cmp	r6, #1
 802190a:	d107      	bne.n	802191c <MobleStackProcessBeacon+0x1bc>
 802190c:	4b11      	ldr	r3, [pc, #68]	; (8021954 <MobleStackProcessBeacon+0x1f4>)
 802190e:	4498      	add	r8, r3
 8021910:	f898 30c0 	ldrb.w	r3, [r8, #192]	; 0xc0
 8021914:	2b01      	cmp	r3, #1
 8021916:	d00b      	beq.n	8021930 <MobleStackProcessBeacon+0x1d0>
 8021918:	2b02      	cmp	r3, #2
 802191a:	d010      	beq.n	802193e <MobleStackProcessBeacon+0x1de>
 802191c:	9b04      	ldr	r3, [sp, #16]
 802191e:	2500      	movs	r5, #0
 8021920:	e9cd 5300 	strd	r5, r3, [sp]
 8021924:	2301      	movs	r3, #1
 8021926:	ee18 2a10 	vmov	r2, s16
 802192a:	9502      	str	r5, [sp, #8]
 802192c:	4619      	mov	r1, r3
 802192e:	e72e      	b.n	802178e <MobleStackProcessBeacon+0x2e>
 8021930:	07ea      	lsls	r2, r5, #31
 8021932:	4649      	mov	r1, r9
 8021934:	d506      	bpl.n	8021944 <MobleStackProcessBeacon+0x1e4>
 8021936:	2002      	movs	r0, #2
 8021938:	f7ff fec2 	bl	80216c0 <ModelConfigUpdateKRState>
 802193c:	e7ee      	b.n	802191c <MobleStackProcessBeacon+0x1bc>
 802193e:	07eb      	lsls	r3, r5, #31
 8021940:	d4ec      	bmi.n	802191c <MobleStackProcessBeacon+0x1bc>
 8021942:	4649      	mov	r1, r9
 8021944:	2003      	movs	r0, #3
 8021946:	e7f7      	b.n	8021938 <MobleStackProcessBeacon+0x1d8>
 8021948:	2503      	movs	r5, #3
 802194a:	e74b      	b.n	80217e4 <MobleStackProcessBeacon+0x84>
 802194c:	2500      	movs	r5, #0
 802194e:	e749      	b.n	80217e4 <MobleStackProcessBeacon+0x84>
 8021950:	20001a90 	.word	0x20001a90
 8021954:	20000318 	.word	0x20000318
 8021958:	20001410 	.word	0x20001410
 802195c:	20001834 	.word	0x20001834

08021960 <MobleConfigModelAppBind>:
 8021960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021964:	b930      	cbnz	r0, 8021974 <MobleConfigModelAppBind+0x14>
 8021966:	4b2e      	ldr	r3, [pc, #184]	; (8021a20 <MobleConfigModelAppBind+0xc0>)
 8021968:	4a2e      	ldr	r2, [pc, #184]	; (8021a24 <MobleConfigModelAppBind+0xc4>)
 802196a:	482f      	ldr	r0, [pc, #188]	; (8021a28 <MobleConfigModelAppBind+0xc8>)
 802196c:	f641 211c 	movw	r1, #6684	; 0x1a1c
 8021970:	f007 f894 	bl	8028a9c <__assert_func>
 8021974:	6805      	ldr	r5, [r0, #0]
 8021976:	2000      	movs	r0, #0
 8021978:	f105 0624 	add.w	r6, r5, #36	; 0x24
 802197c:	3538      	adds	r5, #56	; 0x38
 802197e:	f856 4b04 	ldr.w	r4, [r6], #4
 8021982:	8827      	ldrh	r7, [r4, #0]
 8021984:	428f      	cmp	r7, r1
 8021986:	d146      	bne.n	8021a16 <MobleConfigModelAppBind+0xb6>
 8021988:	4928      	ldr	r1, [pc, #160]	; (8021a2c <MobleConfigModelAppBind+0xcc>)
 802198a:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8021a30 <MobleConfigModelAppBind+0xd0>
 802198e:	890f      	ldrh	r7, [r1, #8]
 8021990:	2500      	movs	r5, #0
 8021992:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 8021996:	b2e9      	uxtb	r1, r5
 8021998:	42b9      	cmp	r1, r7
 802199a:	d235      	bcs.n	8021a08 <MobleConfigModelAppBind+0xa8>
 802199c:	fb0e c601 	mla	r6, lr, r1, ip
 80219a0:	f896 85b8 	ldrb.w	r8, [r6, #1464]	; 0x5b8
 80219a4:	f1b8 0f01 	cmp.w	r8, #1
 80219a8:	d132      	bne.n	8021a10 <MobleConfigModelAppBind+0xb0>
 80219aa:	f8b6 65ba 	ldrh.w	r6, [r6, #1466]	; 0x5ba
 80219ae:	429e      	cmp	r6, r3
 80219b0:	d12e      	bne.n	8021a10 <MobleConfigModelAppBind+0xb0>
 80219b2:	eb04 0c01 	add.w	ip, r4, r1
 80219b6:	4626      	mov	r6, r4
 80219b8:	2500      	movs	r5, #0
 80219ba:	f101 0ea0 	add.w	lr, r1, #160	; 0xa0
 80219be:	f89c 70a6 	ldrb.w	r7, [ip, #166]	; 0xa6
 80219c2:	b98f      	cbnz	r7, 80219e8 <MobleConfigModelAppBind+0x88>
 80219c4:	6fb0      	ldr	r0, [r6, #120]	; 0x78
 80219c6:	4282      	cmp	r2, r0
 80219c8:	d120      	bne.n	8021a0c <MobleConfigModelAppBind+0xac>
 80219ca:	2238      	movs	r2, #56	; 0x38
 80219cc:	fb02 4205 	mla	r2, r2, r5, r4
 80219d0:	440a      	add	r2, r1
 80219d2:	2001      	movs	r0, #1
 80219d4:	f882 00a6 	strb.w	r0, [r2, #166]	; 0xa6
 80219d8:	221c      	movs	r2, #28
 80219da:	fb02 1105 	mla	r1, r2, r5, r1
 80219de:	3150      	adds	r1, #80	; 0x50
 80219e0:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80219e4:	2000      	movs	r0, #0
 80219e6:	e00f      	b.n	8021a08 <MobleConfigModelAppBind+0xa8>
 80219e8:	2f01      	cmp	r7, #1
 80219ea:	d10f      	bne.n	8021a0c <MobleConfigModelAppBind+0xac>
 80219ec:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 80219ee:	42ba      	cmp	r2, r7
 80219f0:	d103      	bne.n	80219fa <MobleConfigModelAppBind+0x9a>
 80219f2:	f83c 700e 	ldrh.w	r7, [ip, lr]
 80219f6:	429f      	cmp	r7, r3
 80219f8:	d0f4      	beq.n	80219e4 <MobleConfigModelAppBind+0x84>
 80219fa:	3501      	adds	r5, #1
 80219fc:	2d0b      	cmp	r5, #11
 80219fe:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8021a02:	f106 0638 	add.w	r6, r6, #56	; 0x38
 8021a06:	d1da      	bne.n	80219be <MobleConfigModelAppBind+0x5e>
 8021a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a0c:	2002      	movs	r0, #2
 8021a0e:	e7f4      	b.n	80219fa <MobleConfigModelAppBind+0x9a>
 8021a10:	3501      	adds	r5, #1
 8021a12:	2003      	movs	r0, #3
 8021a14:	e7bf      	b.n	8021996 <MobleConfigModelAppBind+0x36>
 8021a16:	42ae      	cmp	r6, r5
 8021a18:	f04f 0003 	mov.w	r0, #3
 8021a1c:	d1af      	bne.n	802197e <MobleConfigModelAppBind+0x1e>
 8021a1e:	e7f3      	b.n	8021a08 <MobleConfigModelAppBind+0xa8>
 8021a20:	08033a09 	.word	0x08033a09
 8021a24:	08031ef1 	.word	0x08031ef1
 8021a28:	0803349b 	.word	0x0803349b
 8021a2c:	20000008 	.word	0x20000008
 8021a30:	20001410 	.word	0x20001410

08021a34 <MobleConfigModelAppUnBind>:
 8021a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a38:	b930      	cbnz	r0, 8021a48 <MobleConfigModelAppUnBind+0x14>
 8021a3a:	4b30      	ldr	r3, [pc, #192]	; (8021afc <MobleConfigModelAppUnBind+0xc8>)
 8021a3c:	4a30      	ldr	r2, [pc, #192]	; (8021b00 <MobleConfigModelAppUnBind+0xcc>)
 8021a3e:	4831      	ldr	r0, [pc, #196]	; (8021b04 <MobleConfigModelAppUnBind+0xd0>)
 8021a40:	f641 215b 	movw	r1, #6747	; 0x1a5b
 8021a44:	f007 f82a 	bl	8028a9c <__assert_func>
 8021a48:	6805      	ldr	r5, [r0, #0]
 8021a4a:	2000      	movs	r0, #0
 8021a4c:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8021a50:	3538      	adds	r5, #56	; 0x38
 8021a52:	f856 4b04 	ldr.w	r4, [r6], #4
 8021a56:	8827      	ldrh	r7, [r4, #0]
 8021a58:	428f      	cmp	r7, r1
 8021a5a:	d149      	bne.n	8021af0 <MobleConfigModelAppUnBind+0xbc>
 8021a5c:	492a      	ldr	r1, [pc, #168]	; (8021b08 <MobleConfigModelAppUnBind+0xd4>)
 8021a5e:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8021b0c <MobleConfigModelAppUnBind+0xd8>
 8021a62:	890f      	ldrh	r7, [r1, #8]
 8021a64:	2500      	movs	r5, #0
 8021a66:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 8021a6a:	b2e9      	uxtb	r1, r5
 8021a6c:	42b9      	cmp	r1, r7
 8021a6e:	d225      	bcs.n	8021abc <MobleConfigModelAppUnBind+0x88>
 8021a70:	fb0e c601 	mla	r6, lr, r1, ip
 8021a74:	f896 85b8 	ldrb.w	r8, [r6, #1464]	; 0x5b8
 8021a78:	f1b8 0f01 	cmp.w	r8, #1
 8021a7c:	d135      	bne.n	8021aea <MobleConfigModelAppUnBind+0xb6>
 8021a7e:	f8b6 65ba 	ldrh.w	r6, [r6, #1466]	; 0x5ba
 8021a82:	429e      	cmp	r6, r3
 8021a84:	d131      	bne.n	8021aea <MobleConfigModelAppUnBind+0xb6>
 8021a86:	eb04 0c01 	add.w	ip, r4, r1
 8021a8a:	4626      	mov	r6, r4
 8021a8c:	2500      	movs	r5, #0
 8021a8e:	f101 08a0 	add.w	r8, r1, #160	; 0xa0
 8021a92:	f89c e0a6 	ldrb.w	lr, [ip, #166]	; 0xa6
 8021a96:	f1be 0f01 	cmp.w	lr, #1
 8021a9a:	d111      	bne.n	8021ac0 <MobleConfigModelAppUnBind+0x8c>
 8021a9c:	6fb0      	ldr	r0, [r6, #120]	; 0x78
 8021a9e:	4282      	cmp	r2, r0
 8021aa0:	d11a      	bne.n	8021ad8 <MobleConfigModelAppUnBind+0xa4>
 8021aa2:	2338      	movs	r3, #56	; 0x38
 8021aa4:	fb03 4305 	mla	r3, r3, r5, r4
 8021aa8:	440b      	add	r3, r1
 8021aaa:	2000      	movs	r0, #0
 8021aac:	f883 00a6 	strb.w	r0, [r3, #166]	; 0xa6
 8021ab0:	231c      	movs	r3, #28
 8021ab2:	fb03 1105 	mla	r1, r3, r5, r1
 8021ab6:	3150      	adds	r1, #80	; 0x50
 8021ab8:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
 8021abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021ac0:	f1be 0f00 	cmp.w	lr, #0
 8021ac4:	d108      	bne.n	8021ad8 <MobleConfigModelAppUnBind+0xa4>
 8021ac6:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 8021ac8:	42ba      	cmp	r2, r7
 8021aca:	d106      	bne.n	8021ada <MobleConfigModelAppUnBind+0xa6>
 8021acc:	f83c 7008 	ldrh.w	r7, [ip, r8]
 8021ad0:	429f      	cmp	r7, r3
 8021ad2:	d102      	bne.n	8021ada <MobleConfigModelAppUnBind+0xa6>
 8021ad4:	4670      	mov	r0, lr
 8021ad6:	e7f1      	b.n	8021abc <MobleConfigModelAppUnBind+0x88>
 8021ad8:	2002      	movs	r0, #2
 8021ada:	3501      	adds	r5, #1
 8021adc:	2d0b      	cmp	r5, #11
 8021ade:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8021ae2:	f106 0638 	add.w	r6, r6, #56	; 0x38
 8021ae6:	d1d4      	bne.n	8021a92 <MobleConfigModelAppUnBind+0x5e>
 8021ae8:	e7e8      	b.n	8021abc <MobleConfigModelAppUnBind+0x88>
 8021aea:	3501      	adds	r5, #1
 8021aec:	2003      	movs	r0, #3
 8021aee:	e7bc      	b.n	8021a6a <MobleConfigModelAppUnBind+0x36>
 8021af0:	42ae      	cmp	r6, r5
 8021af2:	f04f 0003 	mov.w	r0, #3
 8021af6:	d1ac      	bne.n	8021a52 <MobleConfigModelAppUnBind+0x1e>
 8021af8:	e7e0      	b.n	8021abc <MobleConfigModelAppUnBind+0x88>
 8021afa:	bf00      	nop
 8021afc:	08033a09 	.word	0x08033a09
 8021b00:	08031f09 	.word	0x08031f09
 8021b04:	0803349b 	.word	0x0803349b
 8021b08:	20000008 	.word	0x20000008
 8021b0c:	20001410 	.word	0x20001410

08021b10 <MobleConfigHealthModelAppBind>:
 8021b10:	b538      	push	{r3, r4, r5, lr}
 8021b12:	b930      	cbnz	r0, 8021b22 <MobleConfigHealthModelAppBind+0x12>
 8021b14:	4b16      	ldr	r3, [pc, #88]	; (8021b70 <MobleConfigHealthModelAppBind+0x60>)
 8021b16:	4a17      	ldr	r2, [pc, #92]	; (8021b74 <MobleConfigHealthModelAppBind+0x64>)
 8021b18:	4817      	ldr	r0, [pc, #92]	; (8021b78 <MobleConfigHealthModelAppBind+0x68>)
 8021b1a:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8021b1e:	f006 ffbd 	bl	8028a9c <__assert_func>
 8021b22:	6800      	ldr	r0, [r0, #0]
 8021b24:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8021b26:	8820      	ldrh	r0, [r4, #0]
 8021b28:	4288      	cmp	r0, r1
 8021b2a:	d11b      	bne.n	8021b64 <MobleConfigHealthModelAppBind+0x54>
 8021b2c:	4913      	ldr	r1, [pc, #76]	; (8021b7c <MobleConfigHealthModelAppBind+0x6c>)
 8021b2e:	8908      	ldrh	r0, [r1, #8]
 8021b30:	b190      	cbz	r0, 8021b58 <MobleConfigHealthModelAppBind+0x48>
 8021b32:	4913      	ldr	r1, [pc, #76]	; (8021b80 <MobleConfigHealthModelAppBind+0x70>)
 8021b34:	f891 55b8 	ldrb.w	r5, [r1, #1464]	; 0x5b8
 8021b38:	2d01      	cmp	r5, #1
 8021b3a:	d115      	bne.n	8021b68 <MobleConfigHealthModelAppBind+0x58>
 8021b3c:	f8b1 15ba 	ldrh.w	r1, [r1, #1466]	; 0x5ba
 8021b40:	4299      	cmp	r1, r3
 8021b42:	d111      	bne.n	8021b68 <MobleConfigHealthModelAppBind+0x58>
 8021b44:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8021b48:	b938      	cbnz	r0, 8021b5a <MobleConfigHealthModelAppBind+0x4a>
 8021b4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8021b4c:	4293      	cmp	r3, r2
 8021b4e:	d10d      	bne.n	8021b6c <MobleConfigHealthModelAppBind+0x5c>
 8021b50:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
 8021b54:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8021b58:	bd38      	pop	{r3, r4, r5, pc}
 8021b5a:	2801      	cmp	r0, #1
 8021b5c:	bf14      	ite	ne
 8021b5e:	2002      	movne	r0, #2
 8021b60:	2000      	moveq	r0, #0
 8021b62:	e7f9      	b.n	8021b58 <MobleConfigHealthModelAppBind+0x48>
 8021b64:	2003      	movs	r0, #3
 8021b66:	e7f7      	b.n	8021b58 <MobleConfigHealthModelAppBind+0x48>
 8021b68:	2000      	movs	r0, #0
 8021b6a:	e7f5      	b.n	8021b58 <MobleConfigHealthModelAppBind+0x48>
 8021b6c:	2002      	movs	r0, #2
 8021b6e:	e7f3      	b.n	8021b58 <MobleConfigHealthModelAppBind+0x48>
 8021b70:	08033a09 	.word	0x08033a09
 8021b74:	08031f23 	.word	0x08031f23
 8021b78:	0803349b 	.word	0x0803349b
 8021b7c:	20000008 	.word	0x20000008
 8021b80:	20001410 	.word	0x20001410

08021b84 <MobleConfigHealthModelAppUnBind>:
 8021b84:	b510      	push	{r4, lr}
 8021b86:	b930      	cbnz	r0, 8021b96 <MobleConfigHealthModelAppUnBind+0x12>
 8021b88:	4b17      	ldr	r3, [pc, #92]	; (8021be8 <MobleConfigHealthModelAppUnBind+0x64>)
 8021b8a:	4a18      	ldr	r2, [pc, #96]	; (8021bec <MobleConfigHealthModelAppUnBind+0x68>)
 8021b8c:	4818      	ldr	r0, [pc, #96]	; (8021bf0 <MobleConfigHealthModelAppUnBind+0x6c>)
 8021b8e:	f641 21cd 	movw	r1, #6861	; 0x1acd
 8021b92:	f006 ff83 	bl	8028a9c <__assert_func>
 8021b96:	6800      	ldr	r0, [r0, #0]
 8021b98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8021b9a:	8820      	ldrh	r0, [r4, #0]
 8021b9c:	4288      	cmp	r0, r1
 8021b9e:	d11c      	bne.n	8021bda <MobleConfigHealthModelAppUnBind+0x56>
 8021ba0:	4914      	ldr	r1, [pc, #80]	; (8021bf4 <MobleConfigHealthModelAppUnBind+0x70>)
 8021ba2:	8908      	ldrh	r0, [r1, #8]
 8021ba4:	b1a0      	cbz	r0, 8021bd0 <MobleConfigHealthModelAppUnBind+0x4c>
 8021ba6:	4914      	ldr	r1, [pc, #80]	; (8021bf8 <MobleConfigHealthModelAppUnBind+0x74>)
 8021ba8:	f891 05b8 	ldrb.w	r0, [r1, #1464]	; 0x5b8
 8021bac:	2801      	cmp	r0, #1
 8021bae:	d116      	bne.n	8021bde <MobleConfigHealthModelAppUnBind+0x5a>
 8021bb0:	f8b1 15ba 	ldrh.w	r1, [r1, #1466]	; 0x5ba
 8021bb4:	4299      	cmp	r1, r3
 8021bb6:	d112      	bne.n	8021bde <MobleConfigHealthModelAppUnBind+0x5a>
 8021bb8:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8021bbc:	2801      	cmp	r0, #1
 8021bbe:	d108      	bne.n	8021bd2 <MobleConfigHealthModelAppUnBind+0x4e>
 8021bc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8021bc2:	4293      	cmp	r3, r2
 8021bc4:	d10d      	bne.n	8021be2 <MobleConfigHealthModelAppUnBind+0x5e>
 8021bc6:	2000      	movs	r0, #0
 8021bc8:	f884 006c 	strb.w	r0, [r4, #108]	; 0x6c
 8021bcc:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 8021bd0:	bd10      	pop	{r4, pc}
 8021bd2:	2800      	cmp	r0, #0
 8021bd4:	bf18      	it	ne
 8021bd6:	2002      	movne	r0, #2
 8021bd8:	e7fa      	b.n	8021bd0 <MobleConfigHealthModelAppUnBind+0x4c>
 8021bda:	2003      	movs	r0, #3
 8021bdc:	e7f8      	b.n	8021bd0 <MobleConfigHealthModelAppUnBind+0x4c>
 8021bde:	2000      	movs	r0, #0
 8021be0:	e7f6      	b.n	8021bd0 <MobleConfigHealthModelAppUnBind+0x4c>
 8021be2:	2002      	movs	r0, #2
 8021be4:	e7f4      	b.n	8021bd0 <MobleConfigHealthModelAppUnBind+0x4c>
 8021be6:	bf00      	nop
 8021be8:	08033a09 	.word	0x08033a09
 8021bec:	08031f41 	.word	0x08031f41
 8021bf0:	0803349b 	.word	0x0803349b
 8021bf4:	20000008 	.word	0x20000008
 8021bf8:	20001410 	.word	0x20001410

08021bfc <MobleConfigModel_KR_UseNewKeyDec>:
 8021bfc:	4b04      	ldr	r3, [pc, #16]	; (8021c10 <MobleConfigModel_KR_UseNewKeyDec+0x14>)
 8021bfe:	4418      	add	r0, r3
 8021c00:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
 8021c04:	3801      	subs	r0, #1
 8021c06:	2801      	cmp	r0, #1
 8021c08:	bf8c      	ite	hi
 8021c0a:	2000      	movhi	r0, #0
 8021c0c:	2001      	movls	r0, #1
 8021c0e:	4770      	bx	lr
 8021c10:	20000318 	.word	0x20000318

08021c14 <BnrgmFrndMgmtTranspSegRecvd>:
 8021c14:	b508      	push	{r3, lr}
 8021c16:	4b06      	ldr	r3, [pc, #24]	; (8021c30 <BnrgmFrndMgmtTranspSegRecvd+0x1c>)
 8021c18:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8021c1c:	2b02      	cmp	r3, #2
 8021c1e:	d005      	beq.n	8021c2c <BnrgmFrndMgmtTranspSegRecvd+0x18>
 8021c20:	4b04      	ldr	r3, [pc, #16]	; (8021c34 <BnrgmFrndMgmtTranspSegRecvd+0x20>)
 8021c22:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	; 0xa04
 8021c26:	f7f1 fcbd 	bl	80135a4 <BnrgmFrndLpnTranspSegRecvd>
 8021c2a:	bd08      	pop	{r3, pc}
 8021c2c:	2001      	movs	r0, #1
 8021c2e:	e7fc      	b.n	8021c2a <BnrgmFrndMgmtTranspSegRecvd+0x16>
 8021c30:	20000318 	.word	0x20000318
 8021c34:	20002508 	.word	0x20002508

08021c38 <BnrgmFrndMgmtProcessNewPacket>:
 8021c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021c3a:	f890 52b4 	ldrb.w	r5, [r0, #692]	; 0x2b4
 8021c3e:	9c06      	ldr	r4, [sp, #24]
 8021c40:	b915      	cbnz	r5, 8021c48 <BnrgmFrndMgmtProcessNewPacket+0x10>
 8021c42:	2501      	movs	r5, #1
 8021c44:	f880 52b4 	strb.w	r5, [r0, #692]	; 0x2b4
 8021c48:	f8b1 5040 	ldrh.w	r5, [r1, #64]	; 0x40
 8021c4c:	06ad      	lsls	r5, r5, #26
 8021c4e:	d50a      	bpl.n	8021c66 <BnrgmFrndMgmtProcessNewPacket+0x2e>
 8021c50:	2a09      	cmp	r2, #9
 8021c52:	d80c      	bhi.n	8021c6e <BnrgmFrndMgmtProcessNewPacket+0x36>
 8021c54:	1e55      	subs	r5, r2, #1
 8021c56:	2d01      	cmp	r5, #1
 8021c58:	d902      	bls.n	8021c60 <BnrgmFrndMgmtProcessNewPacket+0x28>
 8021c5a:	1fd5      	subs	r5, r2, #7
 8021c5c:	2d02      	cmp	r5, #2
 8021c5e:	d86d      	bhi.n	8021d3c <BnrgmFrndMgmtProcessNewPacket+0x104>
 8021c60:	7bcd      	ldrb	r5, [r1, #15]
 8021c62:	2d00      	cmp	r5, #0
 8021c64:	d16a      	bne.n	8021d3c <BnrgmFrndMgmtProcessNewPacket+0x104>
 8021c66:	2a01      	cmp	r2, #1
 8021c68:	d004      	beq.n	8021c74 <BnrgmFrndMgmtProcessNewPacket+0x3c>
 8021c6a:	2a03      	cmp	r2, #3
 8021c6c:	d002      	beq.n	8021c74 <BnrgmFrndMgmtProcessNewPacket+0x3c>
 8021c6e:	1f55      	subs	r5, r2, #5
 8021c70:	2d03      	cmp	r5, #3
 8021c72:	d838      	bhi.n	8021ce6 <BnrgmFrndMgmtProcessNewPacket+0xae>
 8021c74:	4d32      	ldr	r5, [pc, #200]	; (8021d40 <BnrgmFrndMgmtProcessNewPacket+0x108>)
 8021c76:	f895 50be 	ldrb.w	r5, [r5, #190]	; 0xbe
 8021c7a:	2d01      	cmp	r5, #1
 8021c7c:	d15c      	bne.n	8021d38 <BnrgmFrndMgmtProcessNewPacket+0x100>
 8021c7e:	3a01      	subs	r2, #1
 8021c80:	2a07      	cmp	r2, #7
 8021c82:	d85b      	bhi.n	8021d3c <BnrgmFrndMgmtProcessNewPacket+0x104>
 8021c84:	e8df f002 	tbb	[pc, r2]
 8021c88:	5a0c5a04 	.word	0x5a0c5a04
 8021c8c:	28211a13 	.word	0x28211a13
 8021c90:	4a2c      	ldr	r2, [pc, #176]	; (8021d44 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021c92:	9400      	str	r4, [sp, #0]
 8021c94:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021c98:	f004 faba 	bl	8026210 <BnrgmFrndFnProcessFrndPoll>
 8021c9c:	b003      	add	sp, #12
 8021c9e:	bd30      	pop	{r4, r5, pc}
 8021ca0:	4a28      	ldr	r2, [pc, #160]	; (8021d44 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021ca2:	9400      	str	r4, [sp, #0]
 8021ca4:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021ca8:	f004 faec 	bl	8026284 <BnrgmFrndFnProcessFrndRequest>
 8021cac:	e7f6      	b.n	8021c9c <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021cae:	4a25      	ldr	r2, [pc, #148]	; (8021d44 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021cb0:	9400      	str	r4, [sp, #0]
 8021cb2:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021cb6:	f004 fc37 	bl	8026528 <BnrgmFrndFnProcessFrndClear>
 8021cba:	e7ef      	b.n	8021c9c <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021cbc:	4a21      	ldr	r2, [pc, #132]	; (8021d44 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021cbe:	9400      	str	r4, [sp, #0]
 8021cc0:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021cc4:	f7fc fc3a 	bl	801e53c <BnrgmFrndFnProcessFrndClearConf>
 8021cc8:	e7e8      	b.n	8021c9c <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021cca:	4a1e      	ldr	r2, [pc, #120]	; (8021d44 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021ccc:	9400      	str	r4, [sp, #0]
 8021cce:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021cd2:	f004 fd19 	bl	8026708 <BnrgmFrndFnProcessFrndSubscrListAdd>
 8021cd6:	e7e1      	b.n	8021c9c <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021cd8:	4a1a      	ldr	r2, [pc, #104]	; (8021d44 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021cda:	9400      	str	r4, [sp, #0]
 8021cdc:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021ce0:	f004 fca4 	bl	802662c <BnrgmFrndFnProcessFrndSubscrListRem>
 8021ce4:	e7da      	b.n	8021c9c <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021ce6:	4d16      	ldr	r5, [pc, #88]	; (8021d40 <BnrgmFrndMgmtProcessNewPacket+0x108>)
 8021ce8:	f895 50bf 	ldrb.w	r5, [r5, #191]	; 0xbf
 8021cec:	2d02      	cmp	r5, #2
 8021cee:	d023      	beq.n	8021d38 <BnrgmFrndMgmtProcessNewPacket+0x100>
 8021cf0:	2a04      	cmp	r2, #4
 8021cf2:	d00a      	beq.n	8021d0a <BnrgmFrndMgmtProcessNewPacket+0xd2>
 8021cf4:	2a09      	cmp	r2, #9
 8021cf6:	d00f      	beq.n	8021d18 <BnrgmFrndMgmtProcessNewPacket+0xe0>
 8021cf8:	2a02      	cmp	r2, #2
 8021cfa:	d114      	bne.n	8021d26 <BnrgmFrndMgmtProcessNewPacket+0xee>
 8021cfc:	4a11      	ldr	r2, [pc, #68]	; (8021d44 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021cfe:	9400      	str	r4, [sp, #0]
 8021d00:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021d04:	f7f1 fc22 	bl	801354c <BnrgmFrndLpnProcessFrndUpdate>
 8021d08:	e7c8      	b.n	8021c9c <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021d0a:	4a0e      	ldr	r2, [pc, #56]	; (8021d44 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021d0c:	9400      	str	r4, [sp, #0]
 8021d0e:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021d12:	f7f1 fc10 	bl	8013536 <BnrgmFrndLpnProcessFrndOffer>
 8021d16:	e7c1      	b.n	8021c9c <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021d18:	4a0a      	ldr	r2, [pc, #40]	; (8021d44 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021d1a:	9400      	str	r4, [sp, #0]
 8021d1c:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021d20:	f7f1 fc2a 	bl	8013578 <BnrgmFrndLpnProcessFrndSubscrListConf>
 8021d24:	e7ba      	b.n	8021c9c <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021d26:	2a0a      	cmp	r2, #10
 8021d28:	d908      	bls.n	8021d3c <BnrgmFrndMgmtProcessNewPacket+0x104>
 8021d2a:	4a06      	ldr	r2, [pc, #24]	; (8021d44 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021d2c:	9400      	str	r4, [sp, #0]
 8021d2e:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021d32:	f7f1 fc16 	bl	8013562 <BnrgmFrndLpnProcessFrndRfu>
 8021d36:	e7b1      	b.n	8021c9c <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021d38:	2005      	movs	r0, #5
 8021d3a:	e7af      	b.n	8021c9c <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021d3c:	2002      	movs	r0, #2
 8021d3e:	e7ad      	b.n	8021c9c <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021d40:	20000318 	.word	0x20000318
 8021d44:	20002508 	.word	0x20002508

08021d48 <MobleTransControl_ProcessUnSegCtrlReq>:
 8021d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d4c:	4615      	mov	r5, r2
 8021d4e:	460e      	mov	r6, r1
 8021d50:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
 8021d54:	4607      	mov	r7, r0
 8021d56:	b928      	cbnz	r0, 8021d64 <MobleTransControl_ProcessUnSegCtrlReq+0x1c>
 8021d58:	4b1c      	ldr	r3, [pc, #112]	; (8021dcc <MobleTransControl_ProcessUnSegCtrlReq+0x84>)
 8021d5a:	4a1d      	ldr	r2, [pc, #116]	; (8021dd0 <MobleTransControl_ProcessUnSegCtrlReq+0x88>)
 8021d5c:	481d      	ldr	r0, [pc, #116]	; (8021dd4 <MobleTransControl_ProcessUnSegCtrlReq+0x8c>)
 8021d5e:	215f      	movs	r1, #95	; 0x5f
 8021d60:	f006 fe9c 	bl	8028a9c <__assert_func>
 8021d64:	781c      	ldrb	r4, [r3, #0]
 8021d66:	f895 8000 	ldrb.w	r8, [r5]
 8021d6a:	f004 0e7f 	and.w	lr, r4, #127	; 0x7f
 8021d6e:	f36e 0806 	bfi	r8, lr, #0, #7
 8021d72:	f885 8000 	strb.w	r8, [r5]
 8021d76:	781b      	ldrb	r3, [r3, #0]
 8021d78:	fa5f f888 	uxtb.w	r8, r8
 8021d7c:	09db      	lsrs	r3, r3, #7
 8021d7e:	f363 18c7 	bfi	r8, r3, #7, #1
 8021d82:	f885 8000 	strb.w	r8, [r5]
 8021d86:	f8b1 5040 	ldrh.w	r5, [r1, #64]	; 0x40
 8021d8a:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 8021d8e:	4674      	mov	r4, lr
 8021d90:	d019      	beq.n	8021dc6 <MobleTransControl_ProcessUnSegCtrlReq+0x7e>
 8021d92:	2c09      	cmp	r4, #9
 8021d94:	d808      	bhi.n	8021da8 <MobleTransControl_ProcessUnSegCtrlReq+0x60>
 8021d96:	b17c      	cbz	r4, 8021db8 <MobleTransControl_ProcessUnSegCtrlReq+0x70>
 8021d98:	4613      	mov	r3, r2
 8021d9a:	f8cd c018 	str.w	ip, [sp, #24]
 8021d9e:	4672      	mov	r2, lr
 8021da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021da4:	f7ff bf48 	b.w	8021c38 <BnrgmFrndMgmtProcessNewPacket>
 8021da8:	2c0a      	cmp	r4, #10
 8021daa:	d105      	bne.n	8021db8 <MobleTransControl_ProcessUnSegCtrlReq+0x70>
 8021dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021db0:	4663      	mov	r3, ip
 8021db2:	310c      	adds	r1, #12
 8021db4:	f7fa bbda 	b.w	801c56c <BnrgmTransControlProcessHeartbeat>
 8021db8:	4613      	mov	r3, r2
 8021dba:	f8cd c018 	str.w	ip, [sp, #24]
 8021dbe:	4672      	mov	r2, lr
 8021dc0:	4631      	mov	r1, r6
 8021dc2:	4638      	mov	r0, r7
 8021dc4:	e7ec      	b.n	8021da0 <MobleTransControl_ProcessUnSegCtrlReq+0x58>
 8021dc6:	4628      	mov	r0, r5
 8021dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021dcc:	08033440 	.word	0x08033440
 8021dd0:	08031fa5 	.word	0x08031fa5
 8021dd4:	08033b73 	.word	0x08033b73

08021dd8 <MobleTransportProcessData>:
 8021dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ddc:	460d      	mov	r5, r1
 8021dde:	b093      	sub	sp, #76	; 0x4c
 8021de0:	4691      	mov	r9, r2
 8021de2:	461e      	mov	r6, r3
 8021de4:	4607      	mov	r7, r0
 8021de6:	b930      	cbnz	r0, 8021df6 <MobleTransportProcessData+0x1e>
 8021de8:	4b98      	ldr	r3, [pc, #608]	; (802204c <MobleTransportProcessData+0x274>)
 8021dea:	4a99      	ldr	r2, [pc, #612]	; (8022050 <MobleTransportProcessData+0x278>)
 8021dec:	f240 1189 	movw	r1, #393	; 0x189
 8021df0:	4898      	ldr	r0, [pc, #608]	; (8022054 <MobleTransportProcessData+0x27c>)
 8021df2:	f006 fe53 	bl	8028a9c <__assert_func>
 8021df6:	b922      	cbnz	r2, 8021e02 <MobleTransportProcessData+0x2a>
 8021df8:	4b97      	ldr	r3, [pc, #604]	; (8022058 <MobleTransportProcessData+0x280>)
 8021dfa:	4a95      	ldr	r2, [pc, #596]	; (8022050 <MobleTransportProcessData+0x278>)
 8021dfc:	f240 118b 	movw	r1, #395	; 0x18b
 8021e00:	e7f6      	b.n	8021df0 <MobleTransportProcessData+0x18>
 8021e02:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8021e06:	f1bb 0f0f 	cmp.w	fp, #15
 8021e0a:	f200 811d 	bhi.w	8022048 <MobleTransportProcessData+0x270>
 8021e0e:	4648      	mov	r0, r9
 8021e10:	aa0e      	add	r2, sp, #56	; 0x38
 8021e12:	310c      	adds	r1, #12
 8021e14:	f7fa faa2 	bl	801c35c <MobleTransportParseHdr>
 8021e18:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8021e1c:	0698      	lsls	r0, r3, #26
 8021e1e:	d506      	bpl.n	8021e2e <MobleTransportProcessData+0x56>
 8021e20:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8021e24:	2b03      	cmp	r3, #3
 8021e26:	d016      	beq.n	8021e56 <MobleTransportProcessData+0x7e>
 8021e28:	d924      	bls.n	8021e74 <MobleTransportProcessData+0x9c>
 8021e2a:	2b04      	cmp	r3, #4
 8021e2c:	d01c      	beq.n	8021e68 <MobleTransportProcessData+0x90>
 8021e2e:	7b28      	ldrb	r0, [r5, #12]
 8021e30:	8aaa      	ldrh	r2, [r5, #20]
 8021e32:	23a0      	movs	r3, #160	; 0xa0
 8021e34:	fb03 7000 	mla	r0, r3, r0, r7
 8021e38:	2114      	movs	r1, #20
 8021e3a:	692b      	ldr	r3, [r5, #16]
 8021e3c:	3010      	adds	r0, #16
 8021e3e:	f7fa fc05 	bl	801c64c <MobleAddressIsNew>
 8021e42:	4604      	mov	r4, r0
 8021e44:	b1d0      	cbz	r0, 8021e7c <MobleTransportProcessData+0xa4>
 8021e46:	2801      	cmp	r0, #1
 8021e48:	bf14      	ite	ne
 8021e4a:	2402      	movne	r4, #2
 8021e4c:	2400      	moveq	r4, #0
 8021e4e:	4620      	mov	r0, r4
 8021e50:	b013      	add	sp, #76	; 0x4c
 8021e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e56:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8021e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021e5e:	2b0a      	cmp	r3, #10
 8021e60:	d102      	bne.n	8021e68 <MobleTransportProcessData+0x90>
 8021e62:	4638      	mov	r0, r7
 8021e64:	f7ff fed6 	bl	8021c14 <BnrgmFrndMgmtTranspSegRecvd>
 8021e68:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8021e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021e70:	2b0a      	cmp	r3, #10
 8021e72:	d1dc      	bne.n	8021e2e <MobleTransportProcessData+0x56>
 8021e74:	4638      	mov	r0, r7
 8021e76:	f7ff fecd 	bl	8021c14 <BnrgmFrndMgmtTranspSegRecvd>
 8021e7a:	e7d8      	b.n	8021e2e <MobleTransportProcessData+0x56>
 8021e7c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 8021e80:	f1ba 0f04 	cmp.w	sl, #4
 8021e84:	d866      	bhi.n	8021f54 <MobleTransportProcessData+0x17c>
 8021e86:	e8df f00a 	tbb	[pc, sl]
 8021e8a:	cf03      	.short	0xcf03
 8021e8c:	a78c      	.short	0xa78c
 8021e8e:	ca          	.byte	0xca
 8021e8f:	00          	.byte	0x00
 8021e90:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8021e94:	0559      	lsls	r1, r3, #21
 8021e96:	d506      	bpl.n	8021ea6 <MobleTransportProcessData+0xce>
 8021e98:	9600      	str	r6, [sp, #0]
 8021e9a:	464b      	mov	r3, r9
 8021e9c:	aa0e      	add	r2, sp, #56	; 0x38
 8021e9e:	4629      	mov	r1, r5
 8021ea0:	4638      	mov	r0, r7
 8021ea2:	f7fc fb3b 	bl	801e51c <BnrgmFrndMgmtQueLpnPkt>
 8021ea6:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8021eaa:	059a      	lsls	r2, r3, #22
 8021eac:	d5cf      	bpl.n	8021e4e <MobleTransportProcessData+0x76>
 8021eae:	4b6b      	ldr	r3, [pc, #428]	; (802205c <MobleTransportProcessData+0x284>)
 8021eb0:	f8b3 094e 	ldrh.w	r0, [r3, #2382]	; 0x94e
 8021eb4:	f7f8 ffde 	bl	801ae74 <MobleMemAlloc>
 8021eb8:	4680      	mov	r8, r0
 8021eba:	2800      	cmp	r0, #0
 8021ebc:	d04a      	beq.n	8021f54 <MobleTransportProcessData+0x17c>
 8021ebe:	f109 0301 	add.w	r3, r9, #1
 8021ec2:	9308      	str	r3, [sp, #32]
 8021ec4:	683b      	ldr	r3, [r7, #0]
 8021ec6:	7f1b      	ldrb	r3, [r3, #28]
 8021ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8021eca:	8aab      	ldrh	r3, [r5, #20]
 8021ecc:	930a      	str	r3, [sp, #40]	; 0x28
 8021ece:	4654      	mov	r4, sl
 8021ed0:	f04f 0900 	mov.w	r9, #0
 8021ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ed6:	fa5f f389 	uxtb.w	r3, r9
 8021eda:	429a      	cmp	r2, r3
 8021edc:	d805      	bhi.n	8021eea <MobleTransportProcessData+0x112>
 8021ede:	2c01      	cmp	r4, #1
 8021ee0:	d92e      	bls.n	8021f40 <MobleTransportProcessData+0x168>
 8021ee2:	4640      	mov	r0, r8
 8021ee4:	f7f9 f850 	bl	801af88 <MobleMemFree>
 8021ee8:	e7b1      	b.n	8021e4e <MobleTransportProcessData+0x76>
 8021eea:	fa1f f389 	uxth.w	r3, r9
 8021eee:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
 8021ef2:	8aaa      	ldrh	r2, [r5, #20]
 8021ef4:	930b      	str	r3, [sp, #44]	; 0x2c
 8021ef6:	f7ff fe81 	bl	8021bfc <MobleConfigModel_KR_UseNewKeyDec>
 8021efa:	2300      	movs	r3, #0
 8021efc:	e9cd 5306 	strd	r5, r3, [sp, #24]
 8021f00:	9b08      	ldr	r3, [sp, #32]
 8021f02:	9302      	str	r3, [sp, #8]
 8021f04:	fa12 f289 	uxtah	r2, r2, r9
 8021f08:	8aeb      	ldrh	r3, [r5, #22]
 8021f0a:	f89d 403a 	ldrb.w	r4, [sp, #58]	; 0x3a
 8021f0e:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
 8021f12:	f8cd b00c 	str.w	fp, [sp, #12]
 8021f16:	b292      	uxth	r2, r2
 8021f18:	e9cd 2300 	strd	r2, r3, [sp]
 8021f1c:	2200      	movs	r2, #0
 8021f1e:	e9cd 8004 	strd	r8, r0, [sp, #16]
 8021f22:	1aa0      	subs	r0, r4, r2
 8021f24:	692b      	ldr	r3, [r5, #16]
 8021f26:	bf18      	it	ne
 8021f28:	2001      	movne	r0, #1
 8021f2a:	f7f9 fd69 	bl	801ba00 <MoblePalCryptoDecryptApp>
 8021f2e:	f109 0901 	add.w	r9, r9, #1
 8021f32:	4604      	mov	r4, r0
 8021f34:	2800      	cmp	r0, #0
 8021f36:	d1cd      	bne.n	8021ed4 <MobleTransportProcessData+0xfc>
 8021f38:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 8021f3c:	4413      	add	r3, r2
 8021f3e:	82ab      	strh	r3, [r5, #20]
 8021f40:	1f71      	subs	r1, r6, #5
 8021f42:	aa0d      	add	r2, sp, #52	; 0x34
 8021f44:	4640      	mov	r0, r8
 8021f46:	f7fe fddd 	bl	8020b04 <MobleModelGetOpcodeValue>
 8021f4a:	4604      	mov	r4, r0
 8021f4c:	b920      	cbnz	r0, 8021f58 <MobleTransportProcessData+0x180>
 8021f4e:	4640      	mov	r0, r8
 8021f50:	f7f9 f81a 	bl	801af88 <MobleMemFree>
 8021f54:	2402      	movs	r4, #2
 8021f56:	e77a      	b.n	8021e4e <MobleTransportProcessData+0x76>
 8021f58:	2801      	cmp	r0, #1
 8021f5a:	d116      	bne.n	8021f8a <MobleTransportProcessData+0x1b2>
 8021f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021f5e:	2b03      	cmp	r3, #3
 8021f60:	d803      	bhi.n	8021f6a <MobleTransportProcessData+0x192>
 8021f62:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8021f66:	2b01      	cmp	r3, #1
 8021f68:	d0f1      	beq.n	8021f4e <MobleTransportProcessData+0x176>
 8021f6a:	9100      	str	r1, [sp, #0]
 8021f6c:	4643      	mov	r3, r8
 8021f6e:	f10d 0239 	add.w	r2, sp, #57	; 0x39
 8021f72:	4629      	mov	r1, r5
 8021f74:	4638      	mov	r0, r7
 8021f76:	f7f9 fea9 	bl	801bccc <MobleApplicationProcessPacket>
 8021f7a:	4604      	mov	r4, r0
 8021f7c:	2c01      	cmp	r4, #1
 8021f7e:	4640      	mov	r0, r8
 8021f80:	d8b0      	bhi.n	8021ee4 <MobleTransportProcessData+0x10c>
 8021f82:	f7f9 f801 	bl	801af88 <MobleMemFree>
 8021f86:	4654      	mov	r4, sl
 8021f88:	e761      	b.n	8021e4e <MobleTransportProcessData+0x76>
 8021f8a:	2802      	cmp	r0, #2
 8021f8c:	d1ed      	bne.n	8021f6a <MobleTransportProcessData+0x192>
 8021f8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021f90:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 8021f94:	2a4e      	cmp	r2, #78	; 0x4e
 8021f96:	d8e8      	bhi.n	8021f6a <MobleTransportProcessData+0x192>
 8021f98:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8021f9c:	2b01      	cmp	r3, #1
 8021f9e:	d1e4      	bne.n	8021f6a <MobleTransportProcessData+0x192>
 8021fa0:	e79f      	b.n	8021ee2 <MobleTransportProcessData+0x10a>
 8021fa2:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8021fa6:	055b      	lsls	r3, r3, #21
 8021fa8:	d506      	bpl.n	8021fb8 <MobleTransportProcessData+0x1e0>
 8021faa:	9600      	str	r6, [sp, #0]
 8021fac:	464b      	mov	r3, r9
 8021fae:	aa0e      	add	r2, sp, #56	; 0x38
 8021fb0:	4629      	mov	r1, r5
 8021fb2:	4638      	mov	r0, r7
 8021fb4:	f7fc fab2 	bl	801e51c <BnrgmFrndMgmtQueLpnPkt>
 8021fb8:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8021fbc:	0598      	lsls	r0, r3, #22
 8021fbe:	f57f af46 	bpl.w	8021e4e <MobleTransportProcessData+0x76>
 8021fc2:	2e07      	cmp	r6, #7
 8021fc4:	d1c6      	bne.n	8021f54 <MobleTransportProcessData+0x17c>
 8021fc6:	f109 0303 	add.w	r3, r9, #3
 8021fca:	f10d 0239 	add.w	r2, sp, #57	; 0x39
 8021fce:	4629      	mov	r1, r5
 8021fd0:	4638      	mov	r0, r7
 8021fd2:	f000 fbcf 	bl	8022774 <MobleTransSarProcessAck>
 8021fd6:	e73a      	b.n	8021e4e <MobleTransportProcessData+0x76>
 8021fd8:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8021fdc:	0559      	lsls	r1, r3, #21
 8021fde:	d50c      	bpl.n	8021ffa <MobleTransportProcessData+0x222>
 8021fe0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8021fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021fe8:	2b0a      	cmp	r3, #10
 8021fea:	d106      	bne.n	8021ffa <MobleTransportProcessData+0x222>
 8021fec:	9600      	str	r6, [sp, #0]
 8021fee:	464b      	mov	r3, r9
 8021ff0:	aa0e      	add	r2, sp, #56	; 0x38
 8021ff2:	4629      	mov	r1, r5
 8021ff4:	4638      	mov	r0, r7
 8021ff6:	f7fc fa91 	bl	801e51c <BnrgmFrndMgmtQueLpnPkt>
 8021ffa:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8021ffe:	059a      	lsls	r2, r3, #22
 8022000:	f57f af25 	bpl.w	8021e4e <MobleTransportProcessData+0x76>
 8022004:	f109 0301 	add.w	r3, r9, #1
 8022008:	9300      	str	r3, [sp, #0]
 802200a:	f8cd b004 	str.w	fp, [sp, #4]
 802200e:	464b      	mov	r3, r9
 8022010:	f10d 0239 	add.w	r2, sp, #57	; 0x39
 8022014:	4629      	mov	r1, r5
 8022016:	4638      	mov	r0, r7
 8022018:	f7ff fe96 	bl	8021d48 <MobleTransControl_ProcessUnSegCtrlReq>
 802201c:	e717      	b.n	8021e4e <MobleTransportProcessData+0x76>
 802201e:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8022022:	059b      	lsls	r3, r3, #22
 8022024:	f57f af13 	bpl.w	8021e4e <MobleTransportProcessData+0x76>
 8022028:	2e04      	cmp	r6, #4
 802202a:	d993      	bls.n	8021f54 <MobleTransportProcessData+0x17c>
 802202c:	f995 3018 	ldrsb.w	r3, [r5, #24]
 8022030:	9301      	str	r3, [sp, #4]
 8022032:	3e04      	subs	r6, #4
 8022034:	9600      	str	r6, [sp, #0]
 8022036:	f109 0304 	add.w	r3, r9, #4
 802203a:	f10d 0239 	add.w	r2, sp, #57	; 0x39
 802203e:	4629      	mov	r1, r5
 8022040:	4638      	mov	r0, r7
 8022042:	f004 fd85 	bl	8026b50 <MobleTransSarProcessSeg>
 8022046:	e702      	b.n	8021e4e <MobleTransportProcessData+0x76>
 8022048:	2403      	movs	r4, #3
 802204a:	e700      	b.n	8021e4e <MobleTransportProcessData+0x76>
 802204c:	08033440 	.word	0x08033440
 8022050:	08031fcb 	.word	0x08031fcb
 8022054:	080338d0 	.word	0x080338d0
 8022058:	0803368f 	.word	0x0803368f
 802205c:	20001410 	.word	0x20001410

08022060 <MobleNetworkProcessData>:
 8022060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022064:	b0a9      	sub	sp, #164	; 0xa4
 8022066:	4604      	mov	r4, r0
 8022068:	460f      	mov	r7, r1
 802206a:	4615      	mov	r5, r2
 802206c:	2100      	movs	r1, #0
 802206e:	224c      	movs	r2, #76	; 0x4c
 8022070:	a815      	add	r0, sp, #84	; 0x54
 8022072:	f89d 80c8 	ldrb.w	r8, [sp, #200]	; 0xc8
 8022076:	461e      	mov	r6, r3
 8022078:	f006 fda2 	bl	8028bc0 <memset>
 802207c:	2228      	movs	r2, #40	; 0x28
 802207e:	2100      	movs	r1, #0
 8022080:	a80b      	add	r0, sp, #44	; 0x2c
 8022082:	f006 fd9d 	bl	8028bc0 <memset>
 8022086:	b934      	cbnz	r4, 8022096 <MobleNetworkProcessData+0x36>
 8022088:	4bac      	ldr	r3, [pc, #688]	; (802233c <MobleNetworkProcessData+0x2dc>)
 802208a:	4aad      	ldr	r2, [pc, #692]	; (8022340 <MobleNetworkProcessData+0x2e0>)
 802208c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8022090:	48ac      	ldr	r0, [pc, #688]	; (8022344 <MobleNetworkProcessData+0x2e4>)
 8022092:	f006 fd03 	bl	8028a9c <__assert_func>
 8022096:	b925      	cbnz	r5, 80220a2 <MobleNetworkProcessData+0x42>
 8022098:	4bab      	ldr	r3, [pc, #684]	; (8022348 <MobleNetworkProcessData+0x2e8>)
 802209a:	4aa9      	ldr	r2, [pc, #676]	; (8022340 <MobleNetworkProcessData+0x2e0>)
 802209c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80220a0:	e7f6      	b.n	8022090 <MobleNetworkProcessData+0x30>
 80220a2:	f1a6 030e 	sub.w	r3, r6, #14
 80220a6:	2b0f      	cmp	r3, #15
 80220a8:	d904      	bls.n	80220b4 <MobleNetworkProcessData+0x54>
 80220aa:	2502      	movs	r5, #2
 80220ac:	4628      	mov	r0, r5
 80220ae:	b029      	add	sp, #164	; 0xa4
 80220b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220b4:	f99d 30cc 	ldrsb.w	r3, [sp, #204]	; 0xcc
 80220b8:	f88d 605c 	strb.w	r6, [sp, #92]	; 0x5c
 80220bc:	e9cd 7515 	strd	r7, r5, [sp, #84]	; 0x54
 80220c0:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80220c4:	f1b8 0f00 	cmp.w	r8, #0
 80220c8:	d002      	beq.n	80220d0 <MobleNetworkProcessData+0x70>
 80220ca:	2340      	movs	r3, #64	; 0x40
 80220cc:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
 80220d0:	ae18      	add	r6, sp, #96	; 0x60
 80220d2:	4628      	mov	r0, r5
 80220d4:	4631      	mov	r1, r6
 80220d6:	f7f7 fd9b 	bl	8019c10 <MoblePalCryptoParseNetHdr>
 80220da:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
 80220de:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
 80220e2:	f7f8 f8eb 	bl	801a2bc <BnrgmPalCryptoMatchNid>
 80220e6:	4605      	mov	r5, r0
 80220e8:	2800      	cmp	r0, #0
 80220ea:	d1de      	bne.n	80220aa <MobleNetworkProcessData+0x4a>
 80220ec:	f89d b05c 	ldrb.w	fp, [sp, #92]	; 0x5c
 80220f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80220f2:	f894 91d1 	ldrb.w	r9, [r4, #465]	; 0x1d1
 80220f6:	f1ab 0b04 	sub.w	fp, fp, #4
 80220fa:	448b      	add	fp, r1
 80220fc:	4607      	mov	r7, r0
 80220fe:	f04f 0a05 	mov.w	sl, #5
 8022102:	b2fb      	uxtb	r3, r7
 8022104:	4599      	cmp	r9, r3
 8022106:	d877      	bhi.n	80221f8 <MobleNetworkProcessData+0x198>
 8022108:	a907      	add	r1, sp, #28
 802210a:	a815      	add	r0, sp, #84	; 0x54
 802210c:	f7f9 fb06 	bl	801b71c <BnrgmPalCryptoDecryptNetwork>
 8022110:	2801      	cmp	r0, #1
 8022112:	d8ca      	bhi.n	80220aa <MobleNetworkProcessData+0x4a>
 8022114:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
 8022118:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 802211c:	2b00      	cmp	r3, #0
 802211e:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 8022122:	bf14      	ite	ne
 8022124:	f04f 0908 	movne.w	r9, #8
 8022128:	f04f 0904 	moveq.w	r9, #4
 802212c:	2b00      	cmp	r3, #0
 802212e:	ddbc      	ble.n	80220aa <MobleNetworkProcessData+0x4a>
 8022130:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8022134:	2b00      	cmp	r3, #0
 8022136:	d0b8      	beq.n	80220aa <MobleNetworkProcessData+0x4a>
 8022138:	6823      	ldr	r3, [r4, #0]
 802213a:	7f1f      	ldrb	r7, [r3, #28]
 802213c:	2200      	movs	r2, #0
 802213e:	b2d1      	uxtb	r1, r2
 8022140:	428f      	cmp	r7, r1
 8022142:	d86f      	bhi.n	8022224 <MobleNetworkProcessData+0x1c4>
 8022144:	f89d 705c 	ldrb.w	r7, [sp, #92]	; 0x5c
 8022148:	f1b8 0f00 	cmp.w	r8, #0
 802214c:	d007      	beq.n	802215e <MobleNetworkProcessData+0xfe>
 802214e:	4b7f      	ldr	r3, [pc, #508]	; (802234c <MobleNetworkProcessData+0x2ec>)
 8022150:	2201      	movs	r2, #1
 8022152:	f883 26f4 	strb.w	r2, [r3, #1780]	; 0x6f4
 8022156:	f8a3 06f6 	strh.w	r0, [r3, #1782]	; 0x6f6
 802215a:	f7fb fc1d 	bl	801d998 <BnrgmProxyConfig_AddProxyClient_Filter>
 802215e:	f1a7 0309 	sub.w	r3, r7, #9
 8022162:	eba3 0309 	sub.w	r3, r3, r9
 8022166:	a915      	add	r1, sp, #84	; 0x54
 8022168:	4620      	mov	r0, r4
 802216a:	9305      	str	r3, [sp, #20]
 802216c:	f7fe fff2 	bl	8021154 <MobleNetworkDecideRetransmission>
 8022170:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 8022174:	9b05      	ldr	r3, [sp, #20]
 8022176:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 802217a:	b12a      	cbz	r2, 8022188 <MobleNetworkProcessData+0x128>
 802217c:	aa07      	add	r2, sp, #28
 802217e:	a915      	add	r1, sp, #84	; 0x54
 8022180:	4620      	mov	r0, r4
 8022182:	f7ff fe29 	bl	8021dd8 <MobleTransportProcessData>
 8022186:	9b05      	ldr	r3, [sp, #20]
 8022188:	f894 21d1 	ldrb.w	r2, [r4, #465]	; 0x1d1
 802218c:	f8bd e068 	ldrh.w	lr, [sp, #104]	; 0x68
 8022190:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 8022194:	f89d 7060 	ldrb.w	r7, [sp, #96]	; 0x60
 8022198:	f894 a1d0 	ldrb.w	sl, [r4, #464]	; 0x1d0
 802219c:	f04f 0900 	mov.w	r9, #0
 80221a0:	2105      	movs	r1, #5
 80221a2:	fa5f f089 	uxtb.w	r0, r9
 80221a6:	4282      	cmp	r2, r0
 80221a8:	d843      	bhi.n	8022232 <MobleNetworkProcessData+0x1d2>
 80221aa:	4452      	add	r2, sl
 80221ac:	fbb2 f0f1 	udiv	r0, r2, r1
 80221b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80221b4:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
 80221b8:	1a12      	subs	r2, r2, r0
 80221ba:	9816      	ldr	r0, [sp, #88]	; 0x58
 80221bc:	4440      	add	r0, r8
 80221be:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80221c2:	f850 0c04 	ldr.w	r0, [r0, #-4]
 80221c6:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
 80221ca:	f882 818c 	strb.w	r8, [r2, #396]	; 0x18c
 80221ce:	f8a2 e180 	strh.w	lr, [r2, #384]	; 0x180
 80221d2:	f8c2 c184 	str.w	ip, [r2, #388]	; 0x184
 80221d6:	f882 718d 	strb.w	r7, [r2, #397]	; 0x18d
 80221da:	f894 21d1 	ldrb.w	r2, [r4, #465]	; 0x1d1
 80221de:	2a04      	cmp	r2, #4
 80221e0:	d940      	bls.n	8022264 <MobleNetworkProcessData+0x204>
 80221e2:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
 80221e6:	3201      	adds	r2, #1
 80221e8:	fbb2 f1f1 	udiv	r1, r2, r1
 80221ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80221f0:	1a52      	subs	r2, r2, r1
 80221f2:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
 80221f6:	e038      	b.n	802226a <MobleNetworkProcessData+0x20a>
 80221f8:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
 80221fc:	4438      	add	r0, r7
 80221fe:	fbb0 f3fa 	udiv	r3, r0, sl
 8022202:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8022206:	1ac0      	subs	r0, r0, r3
 8022208:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 802220c:	2204      	movs	r2, #4
 802220e:	4659      	mov	r1, fp
 8022210:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8022214:	f006 fc9c 	bl	8028b50 <memcmp>
 8022218:	3701      	adds	r7, #1
 802221a:	2800      	cmp	r0, #0
 802221c:	f47f af71 	bne.w	8022102 <MobleNetworkProcessData+0xa2>
 8022220:	2501      	movs	r5, #1
 8022222:	e743      	b.n	80220ac <MobleNetworkProcessData+0x4c>
 8022224:	8859      	ldrh	r1, [r3, #2]
 8022226:	4411      	add	r1, r2
 8022228:	4288      	cmp	r0, r1
 802222a:	f102 0201 	add.w	r2, r2, #1
 802222e:	d186      	bne.n	802213e <MobleNetworkProcessData+0xde>
 8022230:	e7f6      	b.n	8022220 <MobleNetworkProcessData+0x1c0>
 8022232:	eb09 080a 	add.w	r8, r9, sl
 8022236:	fbb8 f0f1 	udiv	r0, r8, r1
 802223a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 802223e:	eba8 0800 	sub.w	r8, r8, r0
 8022242:	eb04 1808 	add.w	r8, r4, r8, lsl #4
 8022246:	f8b8 0180 	ldrh.w	r0, [r8, #384]	; 0x180
 802224a:	4570      	cmp	r0, lr
 802224c:	d107      	bne.n	802225e <MobleNetworkProcessData+0x1fe>
 802224e:	f8d8 0184 	ldr.w	r0, [r8, #388]	; 0x184
 8022252:	4560      	cmp	r0, ip
 8022254:	d103      	bne.n	802225e <MobleNetworkProcessData+0x1fe>
 8022256:	f898 018d 	ldrb.w	r0, [r8, #397]	; 0x18d
 802225a:	42b8      	cmp	r0, r7
 802225c:	d0e0      	beq.n	8022220 <MobleNetworkProcessData+0x1c0>
 802225e:	f109 0901 	add.w	r9, r9, #1
 8022262:	e79e      	b.n	80221a2 <MobleNetworkProcessData+0x142>
 8022264:	3201      	adds	r2, #1
 8022266:	f884 21d1 	strb.w	r2, [r4, #465]	; 0x1d1
 802226a:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 802226e:	05fa      	lsls	r2, r7, #23
 8022270:	d52d      	bpl.n	80222ce <MobleNetworkProcessData+0x26e>
 8022272:	06b8      	lsls	r0, r7, #26
 8022274:	f89d 8063 	ldrb.w	r8, [sp, #99]	; 0x63
 8022278:	d541      	bpl.n	80222fe <MobleNetworkProcessData+0x29e>
 802227a:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 8022350 <MobleNetworkProcessData+0x2f0>
 802227e:	f89e 20be 	ldrb.w	r2, [lr, #190]	; 0xbe
 8022282:	2a01      	cmp	r2, #1
 8022284:	d123      	bne.n	80222ce <MobleNetworkProcessData+0x26e>
 8022286:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 802228a:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 802228e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8022292:	f89d 2096 	ldrb.w	r2, [sp, #150]	; 0x96
 8022296:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 802229a:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 802229e:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 80222a2:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 80222a6:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
 80222aa:	f027 0720 	bic.w	r7, r7, #32
 80222ae:	f89e 20b8 	ldrb.w	r2, [lr, #184]	; 0xb8
 80222b2:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
 80222b6:	3201      	adds	r2, #1
 80222b8:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
 80222bc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80222c0:	aa07      	add	r2, sp, #28
 80222c2:	a90b      	add	r1, sp, #44	; 0x2c
 80222c4:	4620      	mov	r0, r4
 80222c6:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
 80222ca:	f7fe fa99 	bl	8020800 <MobleNetworkSendDataEx>
 80222ce:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
 80222d2:	f99d 606c 	ldrsb.w	r6, [sp, #108]	; 0x6c
 80222d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80222d8:	2b00      	cmp	r3, #0
 80222da:	bf08      	it	eq
 80222dc:	f8bd 0068 	ldrheq.w	r0, [sp, #104]	; 0x68
 80222e0:	f04f 0300 	mov.w	r3, #0
 80222e4:	bf18      	it	ne
 80222e6:	4618      	movne	r0, r3
 80222e8:	e9cd 6001 	strd	r6, r0, [sp, #4]
 80222ec:	9300      	str	r3, [sp, #0]
 80222ee:	bf0c      	ite	eq
 80222f0:	2102      	moveq	r1, #2
 80222f2:	2103      	movne	r1, #3
 80222f4:	2301      	movs	r3, #1
 80222f6:	4620      	mov	r0, r4
 80222f8:	f7fb f81b 	bl	801d332 <BLEMesh_UpdateNeighbors>
 80222fc:	e6d6      	b.n	80220ac <MobleNetworkProcessData+0x4c>
 80222fe:	9305      	str	r3, [sp, #20]
 8022300:	f7fe ff1e 	bl	8021140 <MobleConfigModelGetRelayEnableStatus>
 8022304:	9b05      	ldr	r3, [sp, #20]
 8022306:	b908      	cbnz	r0, 802230c <MobleNetworkProcessData+0x2ac>
 8022308:	067a      	lsls	r2, r7, #25
 802230a:	d5e0      	bpl.n	80222ce <MobleNetworkProcessData+0x26e>
 802230c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8022310:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8022314:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8022318:	f89d 2096 	ldrb.w	r2, [sp, #150]	; 0x96
 802231c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 8022320:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8022324:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 8022328:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 802232c:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
 8022330:	4a07      	ldr	r2, [pc, #28]	; (8022350 <MobleNetworkProcessData+0x2f0>)
 8022332:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
 8022336:	f892 20b8 	ldrb.w	r2, [r2, #184]	; 0xb8
 802233a:	e7bc      	b.n	80222b6 <MobleNetworkProcessData+0x256>
 802233c:	08033440 	.word	0x08033440
 8022340:	08031fe5 	.word	0x08031fe5
 8022344:	0803391e 	.word	0x0803391e
 8022348:	080334e0 	.word	0x080334e0
 802234c:	20002508 	.word	0x20002508
 8022350:	20000318 	.word	0x20000318

08022354 <MobleStackProcessData>:
 8022354:	b513      	push	{r0, r1, r4, lr}
 8022356:	f99d 4010 	ldrsb.w	r4, [sp, #16]
 802235a:	e9cd 3400 	strd	r3, r4, [sp]
 802235e:	4613      	mov	r3, r2
 8022360:	460a      	mov	r2, r1
 8022362:	4601      	mov	r1, r0
 8022364:	4802      	ldr	r0, [pc, #8]	; (8022370 <MobleStackProcessData+0x1c>)
 8022366:	f7ff fe7b 	bl	8022060 <MobleNetworkProcessData>
 802236a:	b002      	add	sp, #8
 802236c:	bd10      	pop	{r4, pc}
 802236e:	bf00      	nop
 8022370:	20001a90 	.word	0x20001a90

08022374 <MobleNetworkSendData>:
 8022374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022378:	460d      	mov	r5, r1
 802237a:	b098      	sub	sp, #96	; 0x60
 802237c:	4606      	mov	r6, r0
 802237e:	4617      	mov	r7, r2
 8022380:	2100      	movs	r1, #0
 8022382:	224c      	movs	r2, #76	; 0x4c
 8022384:	a805      	add	r0, sp, #20
 8022386:	4698      	mov	r8, r3
 8022388:	f006 fc1a 	bl	8028bc0 <memset>
 802238c:	8aab      	ldrh	r3, [r5, #20]
 802238e:	2400      	movs	r4, #0
 8022390:	f88d 4007 	strb.w	r4, [sp, #7]
 8022394:	2b00      	cmp	r3, #0
 8022396:	d04d      	beq.n	8022434 <MobleNetworkSendData+0xc0>
 8022398:	8aeb      	ldrh	r3, [r5, #22]
 802239a:	2b00      	cmp	r3, #0
 802239c:	d04a      	beq.n	8022434 <MobleNetworkSendData+0xc0>
 802239e:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
 80223a2:	612b      	str	r3, [r5, #16]
 80223a4:	3301      	adds	r3, #1
 80223a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80223aa:	f8c6 315c 	str.w	r3, [r6, #348]	; 0x15c
 80223ae:	4630      	mov	r0, r6
 80223b0:	f7fa fc90 	bl	801ccd4 <MobleNetworkSaveSeqNum>
 80223b4:	4b28      	ldr	r3, [pc, #160]	; (8022458 <MobleNetworkSendData+0xe4>)
 80223b6:	8ae8      	ldrh	r0, [r5, #22]
 80223b8:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 80223bc:	2b01      	cmp	r3, #1
 80223be:	bf08      	it	eq
 80223c0:	8b6c      	ldrheq	r4, [r5, #26]
 80223c2:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 80223c6:	bf04      	itt	eq
 80223c8:	f084 0410 	eoreq.w	r4, r4, #16
 80223cc:	f3c4 1400 	ubfxeq	r4, r4, #4, #1
 80223d0:	2b00      	cmp	r3, #0
 80223d2:	dd33      	ble.n	802243c <MobleNetworkSendData+0xc8>
 80223d4:	b124      	cbz	r4, 80223e0 <MobleNetworkSendData+0x6c>
 80223d6:	f7fb ff3b 	bl	801e250 <BnrgmFrndMgmtGetFriendshipStatus>
 80223da:	fab0 f480 	clz	r4, r0
 80223de:	0964      	lsrs	r4, r4, #5
 80223e0:	4643      	mov	r3, r8
 80223e2:	463a      	mov	r2, r7
 80223e4:	4629      	mov	r1, r5
 80223e6:	4630      	mov	r0, r6
 80223e8:	f7fe fa0a 	bl	8020800 <MobleNetworkSendDataEx>
 80223ec:	b314      	cbz	r4, 8022434 <MobleNetworkSendData+0xc0>
 80223ee:	2300      	movs	r3, #0
 80223f0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80223f4:	f88d 301c 	strb.w	r3, [sp, #28]
 80223f8:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
 80223fc:	8b6b      	ldrh	r3, [r5, #26]
 80223fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8022402:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8022406:	7beb      	ldrb	r3, [r5, #15]
 8022408:	3301      	adds	r3, #1
 802240a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 802240e:	692b      	ldr	r3, [r5, #16]
 8022410:	9309      	str	r3, [sp, #36]	; 0x24
 8022412:	696b      	ldr	r3, [r5, #20]
 8022414:	930a      	str	r3, [sp, #40]	; 0x28
 8022416:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 802241a:	2281      	movs	r2, #129	; 0x81
 802241c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8022420:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8022424:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 8022428:	463a      	mov	r2, r7
 802242a:	4643      	mov	r3, r8
 802242c:	a905      	add	r1, sp, #20
 802242e:	4630      	mov	r0, r6
 8022430:	f7ff fcd2 	bl	8021dd8 <MobleTransportProcessData>
 8022434:	2000      	movs	r0, #0
 8022436:	b018      	add	sp, #96	; 0x60
 8022438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802243c:	2c00      	cmp	r4, #0
 802243e:	d0cf      	beq.n	80223e0 <MobleNetworkSendData+0x6c>
 8022440:	aa02      	add	r2, sp, #8
 8022442:	f10d 0107 	add.w	r1, sp, #7
 8022446:	f7fb ff29 	bl	801e29c <BnrgmFrndMgmtGetSubscrStatus>
 802244a:	f89d 4007 	ldrb.w	r4, [sp, #7]
 802244e:	3c00      	subs	r4, #0
 8022450:	bf18      	it	ne
 8022452:	2401      	movne	r4, #1
 8022454:	e7c4      	b.n	80223e0 <MobleNetworkSendData+0x6c>
 8022456:	bf00      	nop
 8022458:	20000318 	.word	0x20000318

0802245c <MobleTransSarSendEx>:
 802245c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022460:	b093      	sub	sp, #76	; 0x4c
 8022462:	4606      	mov	r6, r0
 8022464:	9308      	str	r3, [sp, #32]
 8022466:	8bc8      	ldrh	r0, [r1, #30]
 8022468:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 802246c:	9206      	str	r2, [sp, #24]
 802246e:	9304      	str	r3, [sp, #16]
 8022470:	f7f8 f922 	bl	801a6b8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8022474:	f8b1 901a 	ldrh.w	r9, [r1, #26]
 8022478:	4bb5      	ldr	r3, [pc, #724]	; (8022750 <MobleTransSarSendEx+0x2f4>)
 802247a:	f89d 507c 	ldrb.w	r5, [sp, #124]	; 0x7c
 802247e:	f019 0f04 	tst.w	r9, #4
 8022482:	4602      	mov	r2, r0
 8022484:	f8b3 094c 	ldrh.w	r0, [r3, #2380]	; 0x94c
 8022488:	bf14      	ite	ne
 802248a:	f04f 0a08 	movne.w	sl, #8
 802248e:	f04f 0a04 	moveq.w	sl, #4
 8022492:	460c      	mov	r4, r1
 8022494:	991c      	ldr	r1, [sp, #112]	; 0x70
 8022496:	eba0 030a 	sub.w	r3, r0, sl
 802249a:	428b      	cmp	r3, r1
 802249c:	f3c9 0b80 	ubfx	fp, r9, #2, #1
 80224a0:	d206      	bcs.n	80224b0 <MobleTransSarSendEx+0x54>
 80224a2:	4bac      	ldr	r3, [pc, #688]	; (8022754 <MobleTransSarSendEx+0x2f8>)
 80224a4:	4aac      	ldr	r2, [pc, #688]	; (8022758 <MobleTransSarSendEx+0x2fc>)
 80224a6:	f240 614d 	movw	r1, #1613	; 0x64d
 80224aa:	48ac      	ldr	r0, [pc, #688]	; (802275c <MobleTransSarSendEx+0x300>)
 80224ac:	f006 faf6 	bl	8028a9c <__assert_func>
 80224b0:	9205      	str	r2, [sp, #20]
 80224b2:	f7f8 fcdf 	bl	801ae74 <MobleMemAlloc>
 80224b6:	9a05      	ldr	r2, [sp, #20]
 80224b8:	4607      	mov	r7, r0
 80224ba:	b920      	cbnz	r0, 80224c6 <MobleTransSarSendEx+0x6a>
 80224bc:	2502      	movs	r5, #2
 80224be:	4628      	mov	r0, r5
 80224c0:	b013      	add	sp, #76	; 0x4c
 80224c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224c6:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
 80224ca:	b96d      	cbnz	r5, 80224e8 <MobleTransSarSendEx+0x8c>
 80224cc:	9804      	ldr	r0, [sp, #16]
 80224ce:	f423 51ff 	bic.w	r1, r3, #8160	; 0x1fe0
 80224d2:	f021 011f 	bic.w	r1, r1, #31
 80224d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80224da:	4401      	add	r1, r0
 80224dc:	4298      	cmp	r0, r3
 80224de:	bf8c      	ite	hi
 80224e0:	f44f 5300 	movhi.w	r3, #8192	; 0x2000
 80224e4:	2300      	movls	r3, #0
 80224e6:	1acb      	subs	r3, r1, r3
 80224e8:	6831      	ldr	r1, [r6, #0]
 80224ea:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8022770 <MobleTransSarSendEx+0x314>
 80224ee:	310c      	adds	r1, #12
 80224f0:	fa58 f282 	uxtab	r2, r8, r2
 80224f4:	9103      	str	r1, [sp, #12]
 80224f6:	f892 20c0 	ldrb.w	r2, [r2, #192]	; 0xc0
 80224fa:	1e91      	subs	r1, r2, #2
 80224fc:	424a      	negs	r2, r1
 80224fe:	414a      	adcs	r2, r1
 8022500:	9202      	str	r2, [sp, #8]
 8022502:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8022504:	9201      	str	r2, [sp, #4]
 8022506:	9a08      	ldr	r2, [sp, #32]
 8022508:	9200      	str	r2, [sp, #0]
 802250a:	4621      	mov	r1, r4
 802250c:	465a      	mov	r2, fp
 802250e:	4638      	mov	r0, r7
 8022510:	f7f9 f9a2 	bl	801b858 <MoblePalCryptoEncryptApp>
 8022514:	2801      	cmp	r0, #1
 8022516:	d906      	bls.n	8022526 <MobleTransSarSendEx+0xca>
 8022518:	9004      	str	r0, [sp, #16]
 802251a:	4638      	mov	r0, r7
 802251c:	f7f8 fd34 	bl	801af88 <MobleMemFree>
 8022520:	9b04      	ldr	r3, [sp, #16]
 8022522:	461d      	mov	r5, r3
 8022524:	e7cb      	b.n	80224be <MobleTransSarSendEx+0x62>
 8022526:	f3c9 03c0 	ubfx	r3, r9, #3, #1
 802252a:	f019 0f08 	tst.w	r9, #8
 802252e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8022530:	9307      	str	r3, [sp, #28]
 8022532:	f241 0201 	movw	r2, #4097	; 0x1001
 8022536:	bf14      	ite	ne
 8022538:	230b      	movne	r3, #11
 802253a:	230f      	moveq	r3, #15
 802253c:	ea19 0f02 	tst.w	r9, r2
 8022540:	eb0a 0901 	add.w	r9, sl, r1
 8022544:	eba3 0a0a 	sub.w	sl, r3, sl
 8022548:	bf0c      	ite	eq
 802254a:	2201      	moveq	r2, #1
 802254c:	2200      	movne	r2, #0
 802254e:	458a      	cmp	sl, r1
 8022550:	d334      	bcc.n	80225bc <MobleTransSarSendEx+0x160>
 8022552:	2300      	movs	r3, #0
 8022554:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8022558:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802255c:	a90e      	add	r1, sp, #56	; 0x38
 802255e:	9b06      	ldr	r3, [sp, #24]
 8022560:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8022564:	a80a      	add	r0, sp, #40	; 0x28
 8022566:	f109 0501 	add.w	r5, r9, #1
 802256a:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
 802256e:	f7f9 ff3f 	bl	801c3f0 <MobleTransportRenderHdr>
 8022572:	2d10      	cmp	r5, #16
 8022574:	d820      	bhi.n	80225b8 <MobleTransSarSendEx+0x15c>
 8022576:	464a      	mov	r2, r9
 8022578:	4639      	mov	r1, r7
 802257a:	f10d 0039 	add.w	r0, sp, #57	; 0x39
 802257e:	f006 fb05 	bl	8028b8c <memmove>
 8022582:	f898 20b6 	ldrb.w	r2, [r8, #182]	; 0xb6
 8022586:	f898 30b5 	ldrb.w	r3, [r8, #181]	; 0xb5
 802258a:	73e3      	strb	r3, [r4, #15]
 802258c:	3201      	adds	r2, #1
 802258e:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8022592:	8be0      	ldrh	r0, [r4, #30]
 8022594:	f7f8 f890 	bl	801a6b8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8022598:	7720      	strb	r0, [r4, #28]
 802259a:	8c20      	ldrh	r0, [r4, #32]
 802259c:	f7f8 f8a6 	bl	801a6ec <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 80225a0:	4621      	mov	r1, r4
 80225a2:	7760      	strb	r0, [r4, #29]
 80225a4:	462b      	mov	r3, r5
 80225a6:	aa0e      	add	r2, sp, #56	; 0x38
 80225a8:	4630      	mov	r0, r6
 80225aa:	f7ff fee3 	bl	8022374 <MobleNetworkSendData>
 80225ae:	4605      	mov	r5, r0
 80225b0:	4638      	mov	r0, r7
 80225b2:	f7f8 fce9 	bl	801af88 <MobleMemFree>
 80225b6:	e782      	b.n	80224be <MobleTransSarSendEx+0x62>
 80225b8:	2502      	movs	r5, #2
 80225ba:	e7f9      	b.n	80225b0 <MobleTransSarSendEx+0x154>
 80225bc:	b13d      	cbz	r5, 80225ce <MobleTransSarSendEx+0x172>
 80225be:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
 80225c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80225c6:	9304      	str	r3, [sp, #16]
 80225c8:	68b3      	ldr	r3, [r6, #8]
 80225ca:	3301      	adds	r3, #1
 80225cc:	60b3      	str	r3, [r6, #8]
 80225ce:	2301      	movs	r3, #1
 80225d0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80225d4:	9b06      	ldr	r3, [sp, #24]
 80225d6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80225da:	9b04      	ldr	r3, [sp, #16]
 80225dc:	f8ad 302d 	strh.w	r3, [sp, #45]	; 0x2d
 80225e0:	9b07      	ldr	r3, [sp, #28]
 80225e2:	f88d b02c 	strb.w	fp, [sp, #44]	; 0x2c
 80225e6:	f04f 0800 	mov.w	r8, #0
 80225ea:	4543      	cmp	r3, r8
 80225ec:	bf14      	ite	ne
 80225ee:	f04f 0a08 	movne.w	sl, #8
 80225f2:	f04f 0a0c 	moveq.w	sl, #12
 80225f6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80225fa:	4453      	add	r3, sl
 80225fc:	fbb3 f3fa 	udiv	r3, r3, sl
 8022600:	3b01      	subs	r3, #1
 8022602:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8022606:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
 802260a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 802260e:	46cb      	mov	fp, r9
 8022610:	f8cd 8014 	str.w	r8, [sp, #20]
 8022614:	9b05      	ldr	r3, [sp, #20]
 8022616:	454b      	cmp	r3, r9
 8022618:	d354      	bcc.n	80226c4 <MobleTransSarSendEx+0x268>
 802261a:	4638      	mov	r0, r7
 802261c:	f7f8 fcb4 	bl	801af88 <MobleMemFree>
 8022620:	2d00      	cmp	r5, #0
 8022622:	f43f af4c 	beq.w	80224be <MobleTransSarSendEx+0x62>
 8022626:	4f4a      	ldr	r7, [pc, #296]	; (8022750 <MobleTransSarSendEx+0x2f4>)
 8022628:	f897 32e8 	ldrb.w	r3, [r7, #744]	; 0x2e8
 802262c:	b12b      	cbz	r3, 802263a <MobleTransSarSendEx+0x1de>
 802262e:	f897 3314 	ldrb.w	r3, [r7, #788]	; 0x314
 8022632:	2b00      	cmp	r3, #0
 8022634:	f47f af42 	bne.w	80224bc <MobleTransSarSendEx+0x60>
 8022638:	2301      	movs	r3, #1
 802263a:	f04f 082c 	mov.w	r8, #44	; 0x2c
 802263e:	fb08 f803 	mul.w	r8, r8, r3
 8022642:	4447      	add	r7, r8
 8022644:	2201      	movs	r2, #1
 8022646:	f887 22e8 	strb.w	r2, [r7, #744]	; 0x2e8
 802264a:	4a45      	ldr	r2, [pc, #276]	; (8022760 <MobleTransSarSendEx+0x304>)
 802264c:	9908      	ldr	r1, [sp, #32]
 802264e:	f882 3a3b 	strb.w	r3, [r2, #2619]	; 0xa3b
 8022652:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 8022656:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8022658:	f006 fa8a 	bl	8028b70 <memcpy>
 802265c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802265e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8022662:	8b63      	ldrh	r3, [r4, #26]
 8022664:	f8a7 32ea 	strh.w	r3, [r7, #746]	; 0x2ea
 8022668:	9b06      	ldr	r3, [sp, #24]
 802266a:	f887 32ec 	strb.w	r3, [r7, #748]	; 0x2ec
 802266e:	8c23      	ldrh	r3, [r4, #32]
 8022670:	f8a7 32ee 	strh.w	r3, [r7, #750]	; 0x2ee
 8022674:	8be3      	ldrh	r3, [r4, #30]
 8022676:	f8a7 32f0 	strh.w	r3, [r7, #752]	; 0x2f0
 802267a:	8aa3      	ldrh	r3, [r4, #20]
 802267c:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 8022680:	8ae3      	ldrh	r3, [r4, #22]
 8022682:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
 8022686:	4837      	ldr	r0, [pc, #220]	; (8022764 <MobleTransSarSendEx+0x308>)
 8022688:	9b04      	ldr	r3, [sp, #16]
 802268a:	f8a7 32f6 	strh.w	r3, [r7, #758]	; 0x2f6
 802268e:	2500      	movs	r5, #0
 8022690:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8022694:	4934      	ldr	r1, [pc, #208]	; (8022768 <MobleTransSarSendEx+0x30c>)
 8022696:	f8a7 32f8 	strh.w	r3, [r7, #760]	; 0x2f8
 802269a:	f108 0208 	add.w	r2, r8, #8
 802269e:	f108 0828 	add.w	r8, r8, #40	; 0x28
 80226a2:	4402      	add	r2, r0
 80226a4:	f8c7 52fc 	str.w	r5, [r7, #764]	; 0x2fc
 80226a8:	f8c7 6310 	str.w	r6, [r7, #784]	; 0x310
 80226ac:	f887 530c 	strb.w	r5, [r7, #780]	; 0x30c
 80226b0:	4440      	add	r0, r8
 80226b2:	f7f5 fa2f 	bl	8017b14 <MoblePalTimerCreate>
 80226b6:	f8d7 0308 	ldr.w	r0, [r7, #776]	; 0x308
 80226ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80226be:	f7f5 fa62 	bl	8017b86 <MoblePalTimerStart>
 80226c2:	e6fc      	b.n	80224be <MobleTransSarSendEx+0x62>
 80226c4:	b92d      	cbnz	r5, 80226d2 <MobleTransSarSendEx+0x276>
 80226c6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80226c8:	2301      	movs	r3, #1
 80226ca:	fa03 f308 	lsl.w	r3, r3, r8
 80226ce:	4213      	tst	r3, r2
 80226d0:	d135      	bne.n	802273e <MobleTransSarSendEx+0x2e2>
 80226d2:	a90e      	add	r1, sp, #56	; 0x38
 80226d4:	a80a      	add	r0, sp, #40	; 0x28
 80226d6:	f88d 802f 	strb.w	r8, [sp, #47]	; 0x2f
 80226da:	f7f9 fe89 	bl	801c3f0 <MobleTransportRenderHdr>
 80226de:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80226e2:	4543      	cmp	r3, r8
 80226e4:	d108      	bne.n	80226f8 <MobleTransSarSendEx+0x29c>
 80226e6:	f1bb 0f0c 	cmp.w	fp, #12
 80226ea:	465a      	mov	r2, fp
 80226ec:	dd09      	ble.n	8022702 <MobleTransSarSendEx+0x2a6>
 80226ee:	4b1f      	ldr	r3, [pc, #124]	; (802276c <MobleTransSarSendEx+0x310>)
 80226f0:	4a19      	ldr	r2, [pc, #100]	; (8022758 <MobleTransSarSendEx+0x2fc>)
 80226f2:	f240 61d4 	movw	r1, #1748	; 0x6d4
 80226f6:	e6d8      	b.n	80224aa <MobleTransSarSendEx+0x4e>
 80226f8:	9b07      	ldr	r3, [sp, #28]
 80226fa:	2b00      	cmp	r3, #0
 80226fc:	bf14      	ite	ne
 80226fe:	2208      	movne	r2, #8
 8022700:	220c      	moveq	r2, #12
 8022702:	9b05      	ldr	r3, [sp, #20]
 8022704:	9209      	str	r2, [sp, #36]	; 0x24
 8022706:	18f9      	adds	r1, r7, r3
 8022708:	a80f      	add	r0, sp, #60	; 0x3c
 802270a:	f006 fa31 	bl	8028b70 <memcpy>
 802270e:	4a18      	ldr	r2, [pc, #96]	; (8022770 <MobleTransSarSendEx+0x314>)
 8022710:	8be0      	ldrh	r0, [r4, #30]
 8022712:	f892 30b5 	ldrb.w	r3, [r2, #181]	; 0xb5
 8022716:	73e3      	strb	r3, [r4, #15]
 8022718:	f892 30b6 	ldrb.w	r3, [r2, #182]	; 0xb6
 802271c:	3301      	adds	r3, #1
 802271e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8022722:	f7f7 ffc9 	bl	801a6b8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8022726:	7720      	strb	r0, [r4, #28]
 8022728:	8c20      	ldrh	r0, [r4, #32]
 802272a:	f7f7 ffdf 	bl	801a6ec <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 802272e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022730:	7760      	strb	r0, [r4, #29]
 8022732:	1d13      	adds	r3, r2, #4
 8022734:	4621      	mov	r1, r4
 8022736:	aa0e      	add	r2, sp, #56	; 0x38
 8022738:	4630      	mov	r0, r6
 802273a:	f7ff fe1b 	bl	8022374 <MobleNetworkSendData>
 802273e:	9b05      	ldr	r3, [sp, #20]
 8022740:	4453      	add	r3, sl
 8022742:	f108 0801 	add.w	r8, r8, #1
 8022746:	9305      	str	r3, [sp, #20]
 8022748:	ebab 0b0a 	sub.w	fp, fp, sl
 802274c:	e762      	b.n	8022614 <MobleTransSarSendEx+0x1b8>
 802274e:	bf00      	nop
 8022750:	20001410 	.word	0x20001410
 8022754:	08033bc3 	.word	0x08033bc3
 8022758:	08031ffd 	.word	0x08031ffd
 802275c:	080338d0 	.word	0x080338d0
 8022760:	20002508 	.word	0x20002508
 8022764:	200016f0 	.word	0x200016f0
 8022768:	080228b5 	.word	0x080228b5
 802276c:	08033bfd 	.word	0x08033bfd
 8022770:	20000318 	.word	0x20000318

08022774 <MobleTransSarProcessAck>:
 8022774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022778:	460d      	mov	r5, r1
 802277a:	b090      	sub	sp, #64	; 0x40
 802277c:	4617      	mov	r7, r2
 802277e:	4698      	mov	r8, r3
 8022780:	4606      	mov	r6, r0
 8022782:	b930      	cbnz	r0, 8022792 <MobleTransSarProcessAck+0x1e>
 8022784:	4b45      	ldr	r3, [pc, #276]	; (802289c <MobleTransSarProcessAck+0x128>)
 8022786:	4a46      	ldr	r2, [pc, #280]	; (80228a0 <MobleTransSarProcessAck+0x12c>)
 8022788:	4846      	ldr	r0, [pc, #280]	; (80228a4 <MobleTransSarProcessAck+0x130>)
 802278a:	f240 51d7 	movw	r1, #1495	; 0x5d7
 802278e:	f006 f985 	bl	8028a9c <__assert_func>
 8022792:	4c45      	ldr	r4, [pc, #276]	; (80228a8 <MobleTransSarProcessAck+0x134>)
 8022794:	2228      	movs	r2, #40	; 0x28
 8022796:	2100      	movs	r1, #0
 8022798:	a806      	add	r0, sp, #24
 802279a:	f006 fa11 	bl	8028bc0 <memset>
 802279e:	f894 32e8 	ldrb.w	r3, [r4, #744]	; 0x2e8
 80227a2:	b153      	cbz	r3, 80227ba <MobleTransSarProcessAck+0x46>
 80227a4:	f8b4 22f6 	ldrh.w	r2, [r4, #758]	; 0x2f6
 80227a8:	f8b7 3003 	ldrh.w	r3, [r7, #3]
 80227ac:	429a      	cmp	r2, r3
 80227ae:	d104      	bne.n	80227ba <MobleTransSarProcessAck+0x46>
 80227b0:	f8b4 22f4 	ldrh.w	r2, [r4, #756]	; 0x2f4
 80227b4:	8aeb      	ldrh	r3, [r5, #22]
 80227b6:	429a      	cmp	r2, r3
 80227b8:	d02b      	beq.n	8022812 <MobleTransSarProcessAck+0x9e>
 80227ba:	f894 3314 	ldrb.w	r3, [r4, #788]	; 0x314
 80227be:	b323      	cbz	r3, 802280a <MobleTransSarProcessAck+0x96>
 80227c0:	f8b4 2322 	ldrh.w	r2, [r4, #802]	; 0x322
 80227c4:	f8b7 3003 	ldrh.w	r3, [r7, #3]
 80227c8:	429a      	cmp	r2, r3
 80227ca:	d11e      	bne.n	802280a <MobleTransSarProcessAck+0x96>
 80227cc:	f8b4 2320 	ldrh.w	r2, [r4, #800]	; 0x320
 80227d0:	8aeb      	ldrh	r3, [r5, #22]
 80227d2:	429a      	cmp	r2, r3
 80227d4:	d119      	bne.n	802280a <MobleTransSarProcessAck+0x96>
 80227d6:	2501      	movs	r5, #1
 80227d8:	222c      	movs	r2, #44	; 0x2c
 80227da:	4355      	muls	r5, r2
 80227dc:	f8d8 0000 	ldr.w	r0, [r8]
 80227e0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80228b0 <MobleTransSarProcessAck+0x13c>
 80227e4:	442c      	add	r4, r5
 80227e6:	f7f4 ffee 	bl	80177c6 <htobe32>
 80227ea:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 80227ee:	4303      	orrs	r3, r0
 80227f0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80227f4:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
 80227f8:	4440      	add	r0, r8
 80227fa:	b963      	cbnz	r3, 8022816 <MobleTransSarProcessAck+0xa2>
 80227fc:	f884 32e8 	strb.w	r3, [r4, #744]	; 0x2e8
 8022800:	f7f5 fa42 	bl	8017c88 <MobleTransEraseTimer>
 8022804:	68b3      	ldr	r3, [r6, #8]
 8022806:	3b01      	subs	r3, #1
 8022808:	60b3      	str	r3, [r6, #8]
 802280a:	2000      	movs	r0, #0
 802280c:	b010      	add	sp, #64	; 0x40
 802280e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022812:	2500      	movs	r5, #0
 8022814:	e7e0      	b.n	80227d8 <MobleTransSarProcessAck+0x64>
 8022816:	f8b4 12f8 	ldrh.w	r1, [r4, #760]	; 0x2f8
 802281a:	1c4f      	adds	r7, r1, #1
 802281c:	2101      	movs	r1, #1
 802281e:	40b9      	lsls	r1, r7
 8022820:	3901      	subs	r1, #1
 8022822:	428b      	cmp	r3, r1
 8022824:	d101      	bne.n	802282a <MobleTransSarProcessAck+0xb6>
 8022826:	2300      	movs	r3, #0
 8022828:	e7e8      	b.n	80227fc <MobleTransSarProcessAck+0x88>
 802282a:	3508      	adds	r5, #8
 802282c:	9005      	str	r0, [sp, #20]
 802282e:	f7f5 fa2b 	bl	8017c88 <MobleTransEraseTimer>
 8022832:	eb08 0205 	add.w	r2, r8, r5
 8022836:	491d      	ldr	r1, [pc, #116]	; (80228ac <MobleTransSarProcessAck+0x138>)
 8022838:	9805      	ldr	r0, [sp, #20]
 802283a:	f7f5 f96b 	bl	8017b14 <MoblePalTimerCreate>
 802283e:	f8d4 0308 	ldr.w	r0, [r4, #776]	; 0x308
 8022842:	f241 3188 	movw	r1, #5000	; 0x1388
 8022846:	f7f5 f99e 	bl	8017b86 <MoblePalTimerStart>
 802284a:	f8b4 32ea 	ldrh.w	r3, [r4, #746]	; 0x2ea
 802284e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8022852:	f8b4 32ee 	ldrh.w	r3, [r4, #750]	; 0x2ee
 8022856:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 802285a:	f8b4 32f0 	ldrh.w	r3, [r4, #752]	; 0x2f0
 802285e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8022862:	f8b4 32f4 	ldrh.w	r3, [r4, #756]	; 0x2f4
 8022866:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 802286a:	f8b4 32f2 	ldrh.w	r3, [r4, #754]	; 0x2f2
 802286e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8022872:	2300      	movs	r3, #0
 8022874:	9303      	str	r3, [sp, #12]
 8022876:	f8b4 32f6 	ldrh.w	r3, [r4, #758]	; 0x2f6
 802287a:	9302      	str	r3, [sp, #8]
 802287c:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 8022880:	9301      	str	r3, [sp, #4]
 8022882:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
 8022886:	9300      	str	r3, [sp, #0]
 8022888:	f8d4 3300 	ldr.w	r3, [r4, #768]	; 0x300
 802288c:	f894 22ec 	ldrb.w	r2, [r4, #748]	; 0x2ec
 8022890:	a906      	add	r1, sp, #24
 8022892:	4630      	mov	r0, r6
 8022894:	f7ff fde2 	bl	802245c <MobleTransSarSendEx>
 8022898:	e7b7      	b.n	802280a <MobleTransSarProcessAck+0x96>
 802289a:	bf00      	nop
 802289c:	08033440 	.word	0x08033440
 80228a0:	08032011 	.word	0x08032011
 80228a4:	080338d0 	.word	0x080338d0
 80228a8:	20001410 	.word	0x20001410
 80228ac:	080228b5 	.word	0x080228b5
 80228b0:	200016f0 	.word	0x200016f0

080228b4 <MobleTransSarOnRetransmit>:
 80228b4:	b510      	push	{r4, lr}
 80228b6:	460c      	mov	r4, r1
 80228b8:	b08e      	sub	sp, #56	; 0x38
 80228ba:	2228      	movs	r2, #40	; 0x28
 80228bc:	2100      	movs	r1, #0
 80228be:	a804      	add	r0, sp, #16
 80228c0:	f006 f97e 	bl	8028bc0 <memset>
 80228c4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80228c8:	2b03      	cmp	r3, #3
 80228ca:	d90b      	bls.n	80228e4 <MobleTransSarOnRetransmit+0x30>
 80228cc:	f104 0020 	add.w	r0, r4, #32
 80228d0:	f7f5 f9da 	bl	8017c88 <MobleTransEraseTimer>
 80228d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80228d6:	6893      	ldr	r3, [r2, #8]
 80228d8:	3b01      	subs	r3, #1
 80228da:	6093      	str	r3, [r2, #8]
 80228dc:	2300      	movs	r3, #0
 80228de:	7023      	strb	r3, [r4, #0]
 80228e0:	b00e      	add	sp, #56	; 0x38
 80228e2:	bd10      	pop	{r4, pc}
 80228e4:	3301      	adds	r3, #1
 80228e6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80228ea:	8863      	ldrh	r3, [r4, #2]
 80228ec:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80228f0:	88e3      	ldrh	r3, [r4, #6]
 80228f2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 80228f6:	8923      	ldrh	r3, [r4, #8]
 80228f8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80228fc:	89a3      	ldrh	r3, [r4, #12]
 80228fe:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8022902:	8963      	ldrh	r3, [r4, #10]
 8022904:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8022908:	2300      	movs	r3, #0
 802290a:	9303      	str	r3, [sp, #12]
 802290c:	89e3      	ldrh	r3, [r4, #14]
 802290e:	9302      	str	r3, [sp, #8]
 8022910:	6963      	ldr	r3, [r4, #20]
 8022912:	9301      	str	r3, [sp, #4]
 8022914:	69e3      	ldr	r3, [r4, #28]
 8022916:	9300      	str	r3, [sp, #0]
 8022918:	7922      	ldrb	r2, [r4, #4]
 802291a:	69a3      	ldr	r3, [r4, #24]
 802291c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802291e:	a904      	add	r1, sp, #16
 8022920:	f7ff fd9c 	bl	802245c <MobleTransSarSendEx>
 8022924:	e7dc      	b.n	80228e0 <MobleTransSarOnRetransmit+0x2c>
	...

08022928 <MobleTransSarSend>:
 8022928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802292a:	b930      	cbnz	r0, 802293a <MobleTransSarSend+0x12>
 802292c:	4b09      	ldr	r3, [pc, #36]	; (8022954 <MobleTransSarSend+0x2c>)
 802292e:	4a0a      	ldr	r2, [pc, #40]	; (8022958 <MobleTransSarSend+0x30>)
 8022930:	480a      	ldr	r0, [pc, #40]	; (802295c <MobleTransSarSend+0x34>)
 8022932:	f240 7143 	movw	r1, #1859	; 0x743
 8022936:	f006 f8b1 	bl	8028a9c <__assert_func>
 802293a:	2400      	movs	r4, #0
 802293c:	f04f 0c01 	mov.w	ip, #1
 8022940:	e9cd 4c02 	strd	r4, ip, [sp, #8]
 8022944:	9401      	str	r4, [sp, #4]
 8022946:	9c06      	ldr	r4, [sp, #24]
 8022948:	9400      	str	r4, [sp, #0]
 802294a:	f7ff fd87 	bl	802245c <MobleTransSarSendEx>
 802294e:	b004      	add	sp, #16
 8022950:	bd10      	pop	{r4, pc}
 8022952:	bf00      	nop
 8022954:	08033440 	.word	0x08033440
 8022958:	08032029 	.word	0x08032029
 802295c:	080338d0 	.word	0x080338d0

08022960 <MobleTransportSendData>:
 8022960:	b570      	push	{r4, r5, r6, lr}
 8022962:	9d04      	ldr	r5, [sp, #16]
 8022964:	b930      	cbnz	r0, 8022974 <MobleTransportSendData+0x14>
 8022966:	4b09      	ldr	r3, [pc, #36]	; (802298c <MobleTransportSendData+0x2c>)
 8022968:	4a09      	ldr	r2, [pc, #36]	; (8022990 <MobleTransportSendData+0x30>)
 802296a:	f44f 711a 	mov.w	r1, #616	; 0x268
 802296e:	4809      	ldr	r0, [pc, #36]	; (8022994 <MobleTransportSendData+0x34>)
 8022970:	f006 f894 	bl	8028a9c <__assert_func>
 8022974:	b923      	cbnz	r3, 8022980 <MobleTransportSendData+0x20>
 8022976:	4b08      	ldr	r3, [pc, #32]	; (8022998 <MobleTransportSendData+0x38>)
 8022978:	4a05      	ldr	r2, [pc, #20]	; (8022990 <MobleTransportSendData+0x30>)
 802297a:	f240 2169 	movw	r1, #617	; 0x269
 802297e:	e7f6      	b.n	802296e <MobleTransportSendData+0xe>
 8022980:	9504      	str	r5, [sp, #16]
 8022982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022986:	f7ff bfcf 	b.w	8022928 <MobleTransSarSend>
 802298a:	bf00      	nop
 802298c:	08033440 	.word	0x08033440
 8022990:	0803203b 	.word	0x0803203b
 8022994:	08033780 	.word	0x08033780
 8022998:	08033c45 	.word	0x08033c45

0802299c <MobleApplicationSendPacket>:
 802299c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80229a0:	4607      	mov	r7, r0
 80229a2:	f103 0020 	add.w	r0, r3, #32
 80229a6:	460e      	mov	r6, r1
 80229a8:	461c      	mov	r4, r3
 80229aa:	4690      	mov	r8, r2
 80229ac:	f7f8 fa62 	bl	801ae74 <MobleMemAlloc>
 80229b0:	8ab3      	ldrh	r3, [r6, #20]
 80229b2:	f896 901d 	ldrb.w	r9, [r6, #29]
 80229b6:	f896 a01c 	ldrb.w	sl, [r6, #28]
 80229ba:	8103      	strh	r3, [r0, #8]
 80229bc:	8af3      	ldrh	r3, [r6, #22]
 80229be:	f880 900c 	strb.w	r9, [r0, #12]
 80229c2:	8143      	strh	r3, [r0, #10]
 80229c4:	8c33      	ldrh	r3, [r6, #32]
 80229c6:	f880 a010 	strb.w	sl, [r0, #16]
 80229ca:	81c3      	strh	r3, [r0, #14]
 80229cc:	8bf3      	ldrh	r3, [r6, #30]
 80229ce:	8243      	strh	r3, [r0, #18]
 80229d0:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
 80229d4:	7503      	strb	r3, [r0, #20]
 80229d6:	8b73      	ldrh	r3, [r6, #26]
 80229d8:	43db      	mvns	r3, r3
 80229da:	f003 0301 	and.w	r3, r3, #1
 80229de:	7543      	strb	r3, [r0, #21]
 80229e0:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
 80229e4:	7583      	strb	r3, [r0, #22]
 80229e6:	4605      	mov	r5, r0
 80229e8:	4622      	mov	r2, r4
 80229ea:	4641      	mov	r1, r8
 80229ec:	3020      	adds	r0, #32
 80229ee:	f006 f8cd 	bl	8028b8c <memmove>
 80229f2:	61ec      	str	r4, [r5, #28]
 80229f4:	b92f      	cbnz	r7, 8022a02 <MobleApplicationSendPacket+0x66>
 80229f6:	4b2b      	ldr	r3, [pc, #172]	; (8022aa4 <MobleApplicationSendPacket+0x108>)
 80229f8:	4a2b      	ldr	r2, [pc, #172]	; (8022aa8 <MobleApplicationSendPacket+0x10c>)
 80229fa:	482c      	ldr	r0, [pc, #176]	; (8022aac <MobleApplicationSendPacket+0x110>)
 80229fc:	21a6      	movs	r1, #166	; 0xa6
 80229fe:	f006 f84d 	bl	8028a9c <__assert_func>
 8022a02:	1e63      	subs	r3, r4, #1
 8022a04:	2b9b      	cmp	r3, #155	; 0x9b
 8022a06:	d84b      	bhi.n	8022aa0 <MobleApplicationSendPacket+0x104>
 8022a08:	4b29      	ldr	r3, [pc, #164]	; (8022ab0 <MobleApplicationSendPacket+0x114>)
 8022a0a:	449a      	add	sl, r3
 8022a0c:	4649      	mov	r1, r9
 8022a0e:	f89a a0c0 	ldrb.w	sl, [sl, #192]	; 0xc0
 8022a12:	f1aa 0302 	sub.w	r3, sl, #2
 8022a16:	4258      	negs	r0, r3
 8022a18:	4158      	adcs	r0, r3
 8022a1a:	f7f6 fcd7 	bl	80193cc <MoblePalCryptoGetApplicationSecurityKeys>
 8022a1e:	f1ba 0f02 	cmp.w	sl, #2
 8022a22:	bf14      	ite	ne
 8022a24:	f890 2024 	ldrbne.w	r2, [r0, #36]	; 0x24
 8022a28:	f890 2025 	ldrbeq.w	r2, [r0, #37]	; 0x25
 8022a2c:	9400      	str	r4, [sp, #0]
 8022a2e:	4643      	mov	r3, r8
 8022a30:	4631      	mov	r1, r6
 8022a32:	4638      	mov	r0, r7
 8022a34:	f7ff ff94 	bl	8022960 <MobleTransportSendData>
 8022a38:	2801      	cmp	r0, #1
 8022a3a:	4604      	mov	r4, r0
 8022a3c:	d80f      	bhi.n	8022a5e <MobleApplicationSendPacket+0xc2>
 8022a3e:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 8022a42:	8af1      	ldrh	r1, [r6, #22]
 8022a44:	2b00      	cmp	r3, #0
 8022a46:	dd25      	ble.n	8022a94 <MobleApplicationSendPacket+0xf8>
 8022a48:	683b      	ldr	r3, [r7, #0]
 8022a4a:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 8022a4e:	7f18      	ldrb	r0, [r3, #28]
 8022a50:	2300      	movs	r3, #0
 8022a52:	b2da      	uxtb	r2, r3
 8022a54:	4282      	cmp	r2, r0
 8022a56:	d306      	bcc.n	8022a66 <MobleApplicationSendPacket+0xca>
 8022a58:	4628      	mov	r0, r5
 8022a5a:	f7f8 fa95 	bl	801af88 <MobleMemFree>
 8022a5e:	4620      	mov	r0, r4
 8022a60:	b002      	add	sp, #8
 8022a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022a66:	eb0c 0203 	add.w	r2, ip, r3
 8022a6a:	b292      	uxth	r2, r2
 8022a6c:	4291      	cmp	r1, r2
 8022a6e:	d10f      	bne.n	8022a90 <MobleApplicationSendPacket+0xf4>
 8022a70:	8ab3      	ldrh	r3, [r6, #20]
 8022a72:	428b      	cmp	r3, r1
 8022a74:	d0f0      	beq.n	8022a58 <MobleApplicationSendPacket+0xbc>
 8022a76:	4629      	mov	r1, r5
 8022a78:	4638      	mov	r0, r7
 8022a7a:	f7f9 f987 	bl	801bd8c <MobleApplicationPassPacketsToSIGModels>
 8022a7e:	2801      	cmp	r0, #1
 8022a80:	4604      	mov	r4, r0
 8022a82:	d9e9      	bls.n	8022a58 <MobleApplicationSendPacket+0xbc>
 8022a84:	4629      	mov	r1, r5
 8022a86:	4638      	mov	r0, r7
 8022a88:	f7f9 fa8c 	bl	801bfa4 <MobleApplicationPassPacketsToVENDORModelsNew>
 8022a8c:	4604      	mov	r4, r0
 8022a8e:	e7e3      	b.n	8022a58 <MobleApplicationSendPacket+0xbc>
 8022a90:	3301      	adds	r3, #1
 8022a92:	e7de      	b.n	8022a52 <MobleApplicationSendPacket+0xb6>
 8022a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8022a98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8022a9c:	d1dc      	bne.n	8022a58 <MobleApplicationSendPacket+0xbc>
 8022a9e:	e7ea      	b.n	8022a76 <MobleApplicationSendPacket+0xda>
 8022aa0:	2403      	movs	r4, #3
 8022aa2:	e7dc      	b.n	8022a5e <MobleApplicationSendPacket+0xc2>
 8022aa4:	08033440 	.word	0x08033440
 8022aa8:	08032052 	.word	0x08032052
 8022aac:	08033730 	.word	0x08033730
 8022ab0:	20000318 	.word	0x20000318

08022ab4 <MobleModelSendPacket>:
 8022ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022ab6:	b08b      	sub	sp, #44	; 0x2c
 8022ab8:	4606      	mov	r6, r0
 8022aba:	460f      	mov	r7, r1
 8022abc:	4615      	mov	r5, r2
 8022abe:	461c      	mov	r4, r3
 8022ac0:	2228      	movs	r2, #40	; 0x28
 8022ac2:	2100      	movs	r1, #0
 8022ac4:	4668      	mov	r0, sp
 8022ac6:	f006 f87b 	bl	8028bc0 <memset>
 8022aca:	b934      	cbnz	r4, 8022ada <MobleModelSendPacket+0x26>
 8022acc:	4b25      	ldr	r3, [pc, #148]	; (8022b64 <MobleModelSendPacket+0xb0>)
 8022ace:	4a26      	ldr	r2, [pc, #152]	; (8022b68 <MobleModelSendPacket+0xb4>)
 8022ad0:	4826      	ldr	r0, [pc, #152]	; (8022b6c <MobleModelSendPacket+0xb8>)
 8022ad2:	f44f 718b 	mov.w	r1, #278	; 0x116
 8022ad6:	f005 ffe1 	bl	8028a9c <__assert_func>
 8022ada:	4b25      	ldr	r3, [pc, #148]	; (8022b70 <MobleModelSendPacket+0xbc>)
 8022adc:	f8d4 c0a3 	ldr.w	ip, [r4, #163]	; 0xa3
 8022ae0:	f8b3 3950 	ldrh.w	r3, [r3, #2384]	; 0x950
 8022ae4:	459c      	cmp	ip, r3
 8022ae6:	d83a      	bhi.n	8022b5e <MobleModelSendPacket+0xaa>
 8022ae8:	6822      	ldr	r2, [r4, #0]
 8022aea:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8022aee:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
 8022af2:	28c0      	cmp	r0, #192	; 0xc0
 8022af4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8022af8:	b2d2      	uxtb	r2, r2
 8022afa:	d127      	bne.n	8022b4c <MobleModelSendPacket+0x98>
 8022afc:	7163      	strb	r3, [r4, #5]
 8022afe:	71a1      	strb	r1, [r4, #6]
 8022b00:	71e2      	strb	r2, [r4, #7]
 8022b02:	2303      	movs	r3, #3
 8022b04:	6828      	ldr	r0, [r5, #0]
 8022b06:	6869      	ldr	r1, [r5, #4]
 8022b08:	f8ad 701a 	strh.w	r7, [sp, #26]
 8022b0c:	aa03      	add	r2, sp, #12
 8022b0e:	c203      	stmia	r2!, {r0, r1}
 8022b10:	896a      	ldrh	r2, [r5, #10]
 8022b12:	f8ad 2014 	strh.w	r2, [sp, #20]
 8022b16:	892a      	ldrh	r2, [r5, #8]
 8022b18:	f8ad 2016 	strh.w	r2, [sp, #22]
 8022b1c:	7daa      	ldrb	r2, [r5, #22]
 8022b1e:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 8022b22:	89ea      	ldrh	r2, [r5, #14]
 8022b24:	f8ad 2020 	strh.w	r2, [sp, #32]
 8022b28:	8a6a      	ldrh	r2, [r5, #18]
 8022b2a:	f8ad 201e 	strh.w	r2, [sp, #30]
 8022b2e:	7c2a      	ldrb	r2, [r5, #16]
 8022b30:	f88d 201c 	strb.w	r2, [sp, #28]
 8022b34:	7b2a      	ldrb	r2, [r5, #12]
 8022b36:	f88d 201d 	strb.w	r2, [sp, #29]
 8022b3a:	1ae2      	subs	r2, r4, r3
 8022b3c:	3208      	adds	r2, #8
 8022b3e:	4463      	add	r3, ip
 8022b40:	4669      	mov	r1, sp
 8022b42:	4630      	mov	r0, r6
 8022b44:	f7ff ff2a 	bl	802299c <MobleApplicationSendPacket>
 8022b48:	b00b      	add	sp, #44	; 0x2c
 8022b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022b4c:	060b      	lsls	r3, r1, #24
 8022b4e:	bf43      	ittte	mi
 8022b50:	71a1      	strbmi	r1, [r4, #6]
 8022b52:	71e2      	strbmi	r2, [r4, #7]
 8022b54:	2302      	movmi	r3, #2
 8022b56:	71e2      	strbpl	r2, [r4, #7]
 8022b58:	bf58      	it	pl
 8022b5a:	2301      	movpl	r3, #1
 8022b5c:	e7d2      	b.n	8022b04 <MobleModelSendPacket+0x50>
 8022b5e:	2001      	movs	r0, #1
 8022b60:	e7f2      	b.n	8022b48 <MobleModelSendPacket+0x94>
 8022b62:	bf00      	nop
 8022b64:	08033c50 	.word	0x08033c50
 8022b68:	0803206d 	.word	0x0803206d
 8022b6c:	08033b26 	.word	0x08033b26
 8022b70:	20001410 	.word	0x20001410

08022b74 <BnrgmHealthModel_ProcessPeriodSet>:
 8022b74:	b430      	push	{r4, r5}
 8022b76:	460a      	mov	r2, r1
 8022b78:	7819      	ldrb	r1, [r3, #0]
 8022b7a:	9c03      	ldr	r4, [sp, #12]
 8022b7c:	290f      	cmp	r1, #15
 8022b7e:	d819      	bhi.n	8022bb4 <BnrgmHealthModel_ProcessPeriodSet+0x40>
 8022b80:	6803      	ldr	r3, [r0, #0]
 8022b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022b84:	2537      	movs	r5, #55	; 0x37
 8022b86:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
 8022b8a:	2300      	movs	r3, #0
 8022b8c:	7025      	strb	r5, [r4, #0]
 8022b8e:	7221      	strb	r1, [r4, #8]
 8022b90:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 8022b94:	2101      	movs	r1, #1
 8022b96:	70a3      	strb	r3, [r4, #2]
 8022b98:	70e3      	strb	r3, [r4, #3]
 8022b9a:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 8022b9e:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8022ba2:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8022ba6:	7065      	strb	r5, [r4, #1]
 8022ba8:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
 8022bac:	4623      	mov	r3, r4
 8022bae:	bc30      	pop	{r4, r5}
 8022bb0:	f7ff bf80 	b.w	8022ab4 <MobleModelSendPacket>
 8022bb4:	2003      	movs	r0, #3
 8022bb6:	bc30      	pop	{r4, r5}
 8022bb8:	4770      	bx	lr

08022bba <BnrgmHealthModel_SendFaultStatus>:
 8022bba:	b4f0      	push	{r4, r5, r6, r7}
 8022bbc:	9d04      	ldr	r5, [sp, #16]
 8022bbe:	f8a5 3009 	strh.w	r3, [r5, #9]
 8022bc2:	6803      	ldr	r3, [r0, #0]
 8022bc4:	722a      	strb	r2, [r5, #8]
 8022bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022bc8:	2400      	movs	r4, #0
 8022bca:	2605      	movs	r6, #5
 8022bcc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8022bd0:	702e      	strb	r6, [r5, #0]
 8022bd2:	706c      	strb	r4, [r5, #1]
 8022bd4:	70ac      	strb	r4, [r5, #2]
 8022bd6:	70ec      	strb	r4, [r5, #3]
 8022bd8:	335c      	adds	r3, #92	; 0x5c
 8022bda:	f812 6b01 	ldrb.w	r6, [r2], #1
 8022bde:	b11e      	cbz	r6, 8022be8 <BnrgmHealthModel_SendFaultStatus+0x2e>
 8022be0:	192f      	adds	r7, r5, r4
 8022be2:	3401      	adds	r4, #1
 8022be4:	72fe      	strb	r6, [r7, #11]
 8022be6:	b2e4      	uxtb	r4, r4
 8022be8:	429a      	cmp	r2, r3
 8022bea:	d1f6      	bne.n	8022bda <BnrgmHealthModel_SendFaultStatus+0x20>
 8022bec:	3403      	adds	r4, #3
 8022bee:	f8c5 40a3 	str.w	r4, [r5, #163]	; 0xa3
 8022bf2:	462b      	mov	r3, r5
 8022bf4:	460a      	mov	r2, r1
 8022bf6:	bcf0      	pop	{r4, r5, r6, r7}
 8022bf8:	2101      	movs	r1, #1
 8022bfa:	f7ff bf5b 	b.w	8022ab4 <MobleModelSendPacket>
	...

08022c00 <BnrgmHealthModel_ProcessFaultTest>:
 8022c00:	b470      	push	{r4, r5, r6}
 8022c02:	4a0d      	ldr	r2, [pc, #52]	; (8022c38 <BnrgmHealthModel_ProcessFaultTest+0x38>)
 8022c04:	781c      	ldrb	r4, [r3, #0]
 8022c06:	f892 2f20 	ldrb.w	r2, [r2, #3872]	; 0xf20
 8022c0a:	9e04      	ldr	r6, [sp, #16]
 8022c0c:	42a2      	cmp	r2, r4
 8022c0e:	4605      	mov	r5, r0
 8022c10:	d002      	beq.n	8022c18 <BnrgmHealthModel_ProcessFaultTest+0x18>
 8022c12:	2003      	movs	r0, #3
 8022c14:	bc70      	pop	{r4, r5, r6}
 8022c16:	4770      	bx	lr
 8022c18:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8022c1c:	4b07      	ldr	r3, [pc, #28]	; (8022c3c <BnrgmHealthModel_ProcessFaultTest+0x3c>)
 8022c1e:	885b      	ldrh	r3, [r3, #2]
 8022c20:	b2a4      	uxth	r4, r4
 8022c22:	42a3      	cmp	r3, r4
 8022c24:	d1f5      	bne.n	8022c12 <BnrgmHealthModel_ProcessFaultTest+0x12>
 8022c26:	682c      	ldr	r4, [r5, #0]
 8022c28:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8022c2a:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
 8022c2e:	9603      	str	r6, [sp, #12]
 8022c30:	bc70      	pop	{r4, r5, r6}
 8022c32:	f7ff bfc2 	b.w	8022bba <BnrgmHealthModel_SendFaultStatus>
 8022c36:	bf00      	nop
 8022c38:	20000318 	.word	0x20000318
 8022c3c:	20000008 	.word	0x20000008

08022c40 <BnrgmHealthModel_ProcessFaultGet>:
 8022c40:	b410      	push	{r4}
 8022c42:	681a      	ldr	r2, [r3, #0]
 8022c44:	4b07      	ldr	r3, [pc, #28]	; (8022c64 <BnrgmHealthModel_ProcessFaultGet+0x24>)
 8022c46:	9c02      	ldr	r4, [sp, #8]
 8022c48:	885b      	ldrh	r3, [r3, #2]
 8022c4a:	b292      	uxth	r2, r2
 8022c4c:	4293      	cmp	r3, r2
 8022c4e:	d105      	bne.n	8022c5c <BnrgmHealthModel_ProcessFaultGet+0x1c>
 8022c50:	9401      	str	r4, [sp, #4]
 8022c52:	2200      	movs	r2, #0
 8022c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022c58:	f7ff bfaf 	b.w	8022bba <BnrgmHealthModel_SendFaultStatus>
 8022c5c:	2003      	movs	r0, #3
 8022c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022c62:	4770      	bx	lr
 8022c64:	20000008 	.word	0x20000008

08022c68 <BnrgmHealthModel_ProcessFaultClear>:
 8022c68:	b470      	push	{r4, r5, r6}
 8022c6a:	681c      	ldr	r4, [r3, #0]
 8022c6c:	4b0c      	ldr	r3, [pc, #48]	; (8022ca0 <BnrgmHealthModel_ProcessFaultClear+0x38>)
 8022c6e:	9e04      	ldr	r6, [sp, #16]
 8022c70:	885b      	ldrh	r3, [r3, #2]
 8022c72:	b2a4      	uxth	r4, r4
 8022c74:	42a3      	cmp	r3, r4
 8022c76:	d110      	bne.n	8022c9a <BnrgmHealthModel_ProcessFaultClear+0x32>
 8022c78:	6804      	ldr	r4, [r0, #0]
 8022c7a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022c7c:	2400      	movs	r4, #0
 8022c7e:	656c      	str	r4, [r5, #84]	; 0x54
 8022c80:	65ac      	str	r4, [r5, #88]	; 0x58
 8022c82:	6805      	ldr	r5, [r0, #0]
 8022c84:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8022c86:	64ec      	str	r4, [r5, #76]	; 0x4c
 8022c88:	652c      	str	r4, [r5, #80]	; 0x50
 8022c8a:	6802      	ldr	r2, [r0, #0]
 8022c8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8022c8e:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 8022c92:	9603      	str	r6, [sp, #12]
 8022c94:	bc70      	pop	{r4, r5, r6}
 8022c96:	f7ff bf90 	b.w	8022bba <BnrgmHealthModel_SendFaultStatus>
 8022c9a:	2003      	movs	r0, #3
 8022c9c:	bc70      	pop	{r4, r5, r6}
 8022c9e:	4770      	bx	lr
 8022ca0:	20000008 	.word	0x20000008

08022ca4 <BnrgmHealthModel_ProcessAttentionSet>:
 8022ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022ca6:	9101      	str	r1, [sp, #4]
 8022ca8:	7819      	ldrb	r1, [r3, #0]
 8022caa:	6803      	ldr	r3, [r0, #0]
 8022cac:	9c07      	ldr	r4, [sp, #28]
 8022cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022cb0:	4605      	mov	r5, r0
 8022cb2:	f883 106e 	strb.w	r1, [r3, #110]	; 0x6e
 8022cb6:	f7f4 ff69 	bl	8017b8c <BnrgmHealthModelSetAttentionTimer>
 8022cba:	682b      	ldr	r3, [r5, #0]
 8022cbc:	9a01      	ldr	r2, [sp, #4]
 8022cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022cc0:	2007      	movs	r0, #7
 8022cc2:	f893 106e 	ldrb.w	r1, [r3, #110]	; 0x6e
 8022cc6:	7020      	strb	r0, [r4, #0]
 8022cc8:	2300      	movs	r3, #0
 8022cca:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 8022cce:	7060      	strb	r0, [r4, #1]
 8022cd0:	70a3      	strb	r3, [r4, #2]
 8022cd2:	70e3      	strb	r3, [r4, #3]
 8022cd4:	7221      	strb	r1, [r4, #8]
 8022cd6:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 8022cda:	2101      	movs	r1, #1
 8022cdc:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8022ce0:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8022ce4:	4628      	mov	r0, r5
 8022ce6:	4623      	mov	r3, r4
 8022ce8:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
 8022cec:	b003      	add	sp, #12
 8022cee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022cf2:	f7ff bedf 	b.w	8022ab4 <MobleModelSendPacket>
	...

08022cf8 <MobleConfigModel_ProcessVendorModelSubscriptionGet>:
 8022cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cfc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022cfe:	4688      	mov	r8, r1
 8022d00:	4605      	mov	r5, r0
 8022d02:	b930      	cbnz	r0, 8022d12 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x1a>
 8022d04:	4b4a      	ldr	r3, [pc, #296]	; (8022e30 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x138>)
 8022d06:	4a4b      	ldr	r2, [pc, #300]	; (8022e34 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x13c>)
 8022d08:	f641 117a 	movw	r1, #6522	; 0x197a
 8022d0c:	484a      	ldr	r0, [pc, #296]	; (8022e38 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x140>)
 8022d0e:	f005 fec5 	bl	8028a9c <__assert_func>
 8022d12:	6802      	ldr	r2, [r0, #0]
 8022d14:	b922      	cbnz	r2, 8022d20 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x28>
 8022d16:	4b49      	ldr	r3, [pc, #292]	; (8022e3c <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x144>)
 8022d18:	4a46      	ldr	r2, [pc, #280]	; (8022e34 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x13c>)
 8022d1a:	f641 117b 	movw	r1, #6523	; 0x197b
 8022d1e:	e7f5      	b.n	8022d0c <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x14>
 8022d20:	8851      	ldrh	r1, [r2, #2]
 8022d22:	f8d3 9000 	ldr.w	r9, [r3]
 8022d26:	7f12      	ldrb	r2, [r2, #28]
 8022d28:	f8d3 7002 	ldr.w	r7, [r3, #2]
 8022d2c:	fa1f fa89 	uxth.w	sl, r9
 8022d30:	1e48      	subs	r0, r1, #1
 8022d32:	4402      	add	r2, r0
 8022d34:	458a      	cmp	sl, r1
 8022d36:	b292      	uxth	r2, r2
 8022d38:	d001      	beq.n	8022d3e <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x46>
 8022d3a:	4592      	cmp	sl, r2
 8022d3c:	d871      	bhi.n	8022e22 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x12a>
 8022d3e:	eba9 0101 	sub.w	r1, r9, r1
 8022d42:	b2c9      	uxtb	r1, r1
 8022d44:	4638      	mov	r0, r7
 8022d46:	f7f0 fbb3 	bl	80134b0 <ApplicationChkVendorModelActive>
 8022d4a:	2800      	cmp	r0, #0
 8022d4c:	bf0c      	ite	eq
 8022d4e:	2302      	moveq	r3, #2
 8022d50:	2300      	movne	r3, #0
 8022d52:	682a      	ldr	r2, [r5, #0]
 8022d54:	f892 b01c 	ldrb.w	fp, [r2, #28]
 8022d58:	7223      	strb	r3, [r4, #8]
 8022d5a:	222c      	movs	r2, #44	; 0x2c
 8022d5c:	2600      	movs	r6, #0
 8022d5e:	7022      	strb	r2, [r4, #0]
 8022d60:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8022d64:	7062      	strb	r2, [r4, #1]
 8022d66:	fa1f f189 	uxth.w	r1, r9
 8022d6a:	2202      	movs	r2, #2
 8022d6c:	70a6      	strb	r6, [r4, #2]
 8022d6e:	70e6      	strb	r6, [r4, #3]
 8022d70:	f104 0009 	add.w	r0, r4, #9
 8022d74:	f7f8 ffa0 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8022d78:	2204      	movs	r2, #4
 8022d7a:	4639      	mov	r1, r7
 8022d7c:	f104 000b 	add.w	r0, r4, #11
 8022d80:	f7f8 ff9a 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8022d84:	b2f3      	uxtb	r3, r6
 8022d86:	459b      	cmp	fp, r3
 8022d88:	d950      	bls.n	8022e2c <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x134>
 8022d8a:	682b      	ldr	r3, [r5, #0]
 8022d8c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8022d90:	46b1      	mov	r9, r6
 8022d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022d94:	8813      	ldrh	r3, [r2, #0]
 8022d96:	4553      	cmp	r3, sl
 8022d98:	f106 0601 	add.w	r6, r6, #1
 8022d9c:	d1f2      	bne.n	8022d84 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x8c>
 8022d9e:	2300      	movs	r3, #0
 8022da0:	2038      	movs	r0, #56	; 0x38
 8022da2:	3278      	adds	r2, #120	; 0x78
 8022da4:	fb00 fa03 	mul.w	sl, r0, r3
 8022da8:	f852 100a 	ldr.w	r1, [r2, sl]
 8022dac:	428f      	cmp	r7, r1
 8022dae:	d13a      	bne.n	8022e26 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x12e>
 8022db0:	f04f 0b00 	mov.w	fp, #0
 8022db4:	f109 0908 	add.w	r9, r9, #8
 8022db8:	271c      	movs	r7, #28
 8022dba:	f10a 0a80 	add.w	sl, sl, #128	; 0x80
 8022dbe:	465e      	mov	r6, fp
 8022dc0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8022dc4:	435f      	muls	r7, r3
 8022dc6:	682b      	ldr	r3, [r5, #0]
 8022dc8:	444b      	add	r3, r9
 8022dca:	6858      	ldr	r0, [r3, #4]
 8022dcc:	eb07 030b 	add.w	r3, r7, fp
 8022dd0:	3340      	adds	r3, #64	; 0x40
 8022dd2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8022dd6:	b18b      	cbz	r3, 8022dfc <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x104>
 8022dd8:	f10d 0206 	add.w	r2, sp, #6
 8022ddc:	4659      	mov	r1, fp
 8022dde:	4450      	add	r0, sl
 8022de0:	f7fa fb76 	bl	801d4d0 <MobleSetGet>
 8022de4:	2801      	cmp	r0, #1
 8022de6:	d809      	bhi.n	8022dfc <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x104>
 8022de8:	2202      	movs	r2, #2
 8022dea:	fb02 4006 	mla	r0, r2, r6, r4
 8022dee:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8022df2:	300f      	adds	r0, #15
 8022df4:	f7f8 ff60 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8022df8:	3601      	adds	r6, #1
 8022dfa:	b2f6      	uxtb	r6, r6
 8022dfc:	f10b 0b01 	add.w	fp, fp, #1
 8022e00:	f1bb 0f0a 	cmp.w	fp, #10
 8022e04:	d1df      	bne.n	8022dc6 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0xce>
 8022e06:	2307      	movs	r3, #7
 8022e08:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8022e0c:	f8c4 60a3 	str.w	r6, [r4, #163]	; 0xa3
 8022e10:	4623      	mov	r3, r4
 8022e12:	4642      	mov	r2, r8
 8022e14:	2101      	movs	r1, #1
 8022e16:	4628      	mov	r0, r5
 8022e18:	f7ff fe4c 	bl	8022ab4 <MobleModelSendPacket>
 8022e1c:	b003      	add	sp, #12
 8022e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e22:	2301      	movs	r3, #1
 8022e24:	e795      	b.n	8022d52 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x5a>
 8022e26:	3301      	adds	r3, #1
 8022e28:	2b0b      	cmp	r3, #11
 8022e2a:	d1bb      	bne.n	8022da4 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0xac>
 8022e2c:	2600      	movs	r6, #0
 8022e2e:	e7ea      	b.n	8022e06 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x10e>
 8022e30:	08033a09 	.word	0x08033a09
 8022e34:	08032082 	.word	0x08032082
 8022e38:	0803349b 	.word	0x0803349b
 8022e3c:	08033964 	.word	0x08033964

08022e40 <MobleConfigModel_SendVendorModelAppList>:
 8022e40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022e44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022e46:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8022e4a:	460e      	mov	r6, r1
 8022e4c:	4605      	mov	r5, r0
 8022e4e:	4619      	mov	r1, r3
 8022e50:	e9dd 930a 	ldrd	r9, r3, [sp, #40]	; 0x28
 8022e54:	b930      	cbnz	r0, 8022e64 <MobleConfigModel_SendVendorModelAppList+0x24>
 8022e56:	4b18      	ldr	r3, [pc, #96]	; (8022eb8 <MobleConfigModel_SendVendorModelAppList+0x78>)
 8022e58:	4a18      	ldr	r2, [pc, #96]	; (8022ebc <MobleConfigModel_SendVendorModelAppList+0x7c>)
 8022e5a:	4819      	ldr	r0, [pc, #100]	; (8022ec0 <MobleConfigModel_SendVendorModelAppList+0x80>)
 8022e5c:	f44f 6122 	mov.w	r1, #2592	; 0xa20
 8022e60:	f005 fe1c 	bl	8028a9c <__assert_func>
 8022e64:	204e      	movs	r0, #78	; 0x4e
 8022e66:	2700      	movs	r7, #0
 8022e68:	7020      	strb	r0, [r4, #0]
 8022e6a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 8022e6e:	7060      	strb	r0, [r4, #1]
 8022e70:	7222      	strb	r2, [r4, #8]
 8022e72:	70a7      	strb	r7, [r4, #2]
 8022e74:	70e7      	strb	r7, [r4, #3]
 8022e76:	2202      	movs	r2, #2
 8022e78:	f104 0009 	add.w	r0, r4, #9
 8022e7c:	9301      	str	r3, [sp, #4]
 8022e7e:	f7f8 ff1b 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8022e82:	4649      	mov	r1, r9
 8022e84:	2204      	movs	r2, #4
 8022e86:	f104 000b 	add.w	r0, r4, #11
 8022e8a:	f7f8 ff15 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8022e8e:	9b01      	ldr	r3, [sp, #4]
 8022e90:	f104 020f 	add.w	r2, r4, #15
 8022e94:	4641      	mov	r1, r8
 8022e96:	4638      	mov	r0, r7
 8022e98:	f7f4 fd0c 	bl	80178b4 <MobleConfigModelPutKeyIdxs>
 8022e9c:	b2c3      	uxtb	r3, r0
 8022e9e:	3307      	adds	r3, #7
 8022ea0:	f8c4 30a3 	str.w	r3, [r4, #163]	; 0xa3
 8022ea4:	4632      	mov	r2, r6
 8022ea6:	4623      	mov	r3, r4
 8022ea8:	2101      	movs	r1, #1
 8022eaa:	4628      	mov	r0, r5
 8022eac:	b003      	add	sp, #12
 8022eae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022eb2:	f7ff bdff 	b.w	8022ab4 <MobleModelSendPacket>
 8022eb6:	bf00      	nop
 8022eb8:	08033489 	.word	0x08033489
 8022ebc:	080320b5 	.word	0x080320b5
 8022ec0:	0803349b 	.word	0x0803349b

08022ec4 <MobleConfigModel_ProcessVendorModelAppGet>:
 8022ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ec8:	b08a      	sub	sp, #40	; 0x28
 8022eca:	af08      	add	r7, sp, #32
 8022ecc:	469c      	mov	ip, r3
 8022ece:	2300      	movs	r3, #0
 8022ed0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022ed2:	9308      	str	r3, [sp, #32]
 8022ed4:	460d      	mov	r5, r1
 8022ed6:	80bb      	strh	r3, [r7, #4]
 8022ed8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022edc:	4604      	mov	r4, r0
 8022ede:	b930      	cbnz	r0, 8022eee <MobleConfigModel_ProcessVendorModelAppGet+0x2a>
 8022ee0:	4b24      	ldr	r3, [pc, #144]	; (8022f74 <MobleConfigModel_ProcessVendorModelAppGet+0xb0>)
 8022ee2:	4a25      	ldr	r2, [pc, #148]	; (8022f78 <MobleConfigModel_ProcessVendorModelAppGet+0xb4>)
 8022ee4:	f641 1122 	movw	r1, #6434	; 0x1922
 8022ee8:	4824      	ldr	r0, [pc, #144]	; (8022f7c <MobleConfigModel_ProcessVendorModelAppGet+0xb8>)
 8022eea:	f005 fdd7 	bl	8028a9c <__assert_func>
 8022eee:	6802      	ldr	r2, [r0, #0]
 8022ef0:	b922      	cbnz	r2, 8022efc <MobleConfigModel_ProcessVendorModelAppGet+0x38>
 8022ef2:	4b23      	ldr	r3, [pc, #140]	; (8022f80 <MobleConfigModel_ProcessVendorModelAppGet+0xbc>)
 8022ef4:	4a20      	ldr	r2, [pc, #128]	; (8022f78 <MobleConfigModel_ProcessVendorModelAppGet+0xb4>)
 8022ef6:	f641 1123 	movw	r1, #6435	; 0x1923
 8022efa:	e7f5      	b.n	8022ee8 <MobleConfigModel_ProcessVendorModelAppGet+0x24>
 8022efc:	8850      	ldrh	r0, [r2, #2]
 8022efe:	f8dc 1000 	ldr.w	r1, [ip]
 8022f02:	7f12      	ldrb	r2, [r2, #28]
 8022f04:	f8dc 8002 	ldr.w	r8, [ip, #2]
 8022f08:	b28b      	uxth	r3, r1
 8022f0a:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 8022f0e:	4472      	add	r2, lr
 8022f10:	4283      	cmp	r3, r0
 8022f12:	b292      	uxth	r2, r2
 8022f14:	d001      	beq.n	8022f1a <MobleConfigModel_ProcessVendorModelAppGet+0x56>
 8022f16:	4293      	cmp	r3, r2
 8022f18:	d82a      	bhi.n	8022f70 <MobleConfigModel_ProcessVendorModelAppGet+0xac>
 8022f1a:	1a09      	subs	r1, r1, r0
 8022f1c:	b2c9      	uxtb	r1, r1
 8022f1e:	4640      	mov	r0, r8
 8022f20:	9305      	str	r3, [sp, #20]
 8022f22:	f7f0 fac5 	bl	80134b0 <ApplicationChkVendorModelActive>
 8022f26:	9b05      	ldr	r3, [sp, #20]
 8022f28:	b940      	cbnz	r0, 8022f3c <MobleConfigModel_ProcessVendorModelAppGet+0x78>
 8022f2a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022f2e:	2202      	movs	r2, #2
 8022f30:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8022f34:	9603      	str	r6, [sp, #12]
 8022f36:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8022f3a:	e006      	b.n	8022f4a <MobleConfigModel_ProcessVendorModelAppGet+0x86>
 8022f3c:	4a11      	ldr	r2, [pc, #68]	; (8022f84 <MobleConfigModel_ProcessVendorModelAppGet+0xc0>)
 8022f3e:	f892 261d 	ldrb.w	r2, [r2, #1565]	; 0x61d
 8022f42:	b95a      	cbnz	r2, 8022f5c <MobleConfigModel_ProcessVendorModelAppGet+0x98>
 8022f44:	e9cd 2602 	strd	r2, r6, [sp, #8]
 8022f48:	9201      	str	r2, [sp, #4]
 8022f4a:	f8cd 8000 	str.w	r8, [sp]
 8022f4e:	4629      	mov	r1, r5
 8022f50:	4620      	mov	r0, r4
 8022f52:	f7ff ff75 	bl	8022e40 <MobleConfigModel_SendVendorModelAppList>
 8022f56:	b00a      	add	sp, #40	; 0x28
 8022f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f5c:	f10d 021e 	add.w	r2, sp, #30
 8022f60:	4618      	mov	r0, r3
 8022f62:	4639      	mov	r1, r7
 8022f64:	9305      	str	r3, [sp, #20]
 8022f66:	f7f7 f865 	bl	801a034 <MoblePalCrypto_GetAppBind_VendorModel>
 8022f6a:	9b05      	ldr	r3, [sp, #20]
 8022f6c:	2200      	movs	r2, #0
 8022f6e:	e7df      	b.n	8022f30 <MobleConfigModel_ProcessVendorModelAppGet+0x6c>
 8022f70:	2201      	movs	r2, #1
 8022f72:	e7dd      	b.n	8022f30 <MobleConfigModel_ProcessVendorModelAppGet+0x6c>
 8022f74:	08033a09 	.word	0x08033a09
 8022f78:	080320dd 	.word	0x080320dd
 8022f7c:	0803349b 	.word	0x0803349b
 8022f80:	08033964 	.word	0x08033964
 8022f84:	20001410 	.word	0x20001410

08022f88 <MobleConfigModel_ProcessSigModelSubscriptionGet>:
 8022f88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f8c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022f8e:	4688      	mov	r8, r1
 8022f90:	4605      	mov	r5, r0
 8022f92:	b930      	cbnz	r0, 8022fa2 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x1a>
 8022f94:	4b4a      	ldr	r3, [pc, #296]	; (80230c0 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x138>)
 8022f96:	4a4b      	ldr	r2, [pc, #300]	; (80230c4 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x13c>)
 8022f98:	f641 01d9 	movw	r1, #6361	; 0x18d9
 8022f9c:	484a      	ldr	r0, [pc, #296]	; (80230c8 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x140>)
 8022f9e:	f005 fd7d 	bl	8028a9c <__assert_func>
 8022fa2:	6802      	ldr	r2, [r0, #0]
 8022fa4:	b922      	cbnz	r2, 8022fb0 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x28>
 8022fa6:	4b49      	ldr	r3, [pc, #292]	; (80230cc <MobleConfigModel_ProcessSigModelSubscriptionGet+0x144>)
 8022fa8:	4a46      	ldr	r2, [pc, #280]	; (80230c4 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x13c>)
 8022faa:	f641 01da 	movw	r1, #6362	; 0x18da
 8022fae:	e7f5      	b.n	8022f9c <MobleConfigModel_ProcessSigModelSubscriptionGet+0x14>
 8022fb0:	8851      	ldrh	r1, [r2, #2]
 8022fb2:	f8d3 9000 	ldr.w	r9, [r3]
 8022fb6:	7f12      	ldrb	r2, [r2, #28]
 8022fb8:	f8d3 7002 	ldr.w	r7, [r3, #2]
 8022fbc:	fa1f fa89 	uxth.w	sl, r9
 8022fc0:	1e48      	subs	r0, r1, #1
 8022fc2:	4402      	add	r2, r0
 8022fc4:	458a      	cmp	sl, r1
 8022fc6:	b292      	uxth	r2, r2
 8022fc8:	d001      	beq.n	8022fce <MobleConfigModel_ProcessSigModelSubscriptionGet+0x46>
 8022fca:	4592      	cmp	sl, r2
 8022fcc:	d871      	bhi.n	80230b2 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x12a>
 8022fce:	eba9 0101 	sub.w	r1, r9, r1
 8022fd2:	b2c9      	uxtb	r1, r1
 8022fd4:	b2b8      	uxth	r0, r7
 8022fd6:	f7f0 fa2f 	bl	8013438 <ApplicationChkSigModelActive>
 8022fda:	2800      	cmp	r0, #0
 8022fdc:	bf0c      	ite	eq
 8022fde:	2302      	moveq	r3, #2
 8022fe0:	2300      	movne	r3, #0
 8022fe2:	682a      	ldr	r2, [r5, #0]
 8022fe4:	f892 b01c 	ldrb.w	fp, [r2, #28]
 8022fe8:	7223      	strb	r3, [r4, #8]
 8022fea:	222a      	movs	r2, #42	; 0x2a
 8022fec:	2600      	movs	r6, #0
 8022fee:	7022      	strb	r2, [r4, #0]
 8022ff0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8022ff4:	7062      	strb	r2, [r4, #1]
 8022ff6:	fa1f f189 	uxth.w	r1, r9
 8022ffa:	70a6      	strb	r6, [r4, #2]
 8022ffc:	70e6      	strb	r6, [r4, #3]
 8022ffe:	2202      	movs	r2, #2
 8023000:	f104 0009 	add.w	r0, r4, #9
 8023004:	b2bf      	uxth	r7, r7
 8023006:	f7f8 fe57 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 802300a:	4639      	mov	r1, r7
 802300c:	f104 000b 	add.w	r0, r4, #11
 8023010:	f7f8 fe52 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8023014:	b2f3      	uxtb	r3, r6
 8023016:	459b      	cmp	fp, r3
 8023018:	d950      	bls.n	80230bc <MobleConfigModel_ProcessSigModelSubscriptionGet+0x134>
 802301a:	682b      	ldr	r3, [r5, #0]
 802301c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8023020:	46b1      	mov	r9, r6
 8023022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8023024:	8813      	ldrh	r3, [r2, #0]
 8023026:	4553      	cmp	r3, sl
 8023028:	f106 0601 	add.w	r6, r6, #1
 802302c:	d1f2      	bne.n	8023014 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x8c>
 802302e:	2300      	movs	r3, #0
 8023030:	2038      	movs	r0, #56	; 0x38
 8023032:	3278      	adds	r2, #120	; 0x78
 8023034:	fb00 fa03 	mul.w	sl, r0, r3
 8023038:	f852 100a 	ldr.w	r1, [r2, sl]
 802303c:	42b9      	cmp	r1, r7
 802303e:	d13a      	bne.n	80230b6 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x12e>
 8023040:	f04f 0b00 	mov.w	fp, #0
 8023044:	f109 0908 	add.w	r9, r9, #8
 8023048:	271c      	movs	r7, #28
 802304a:	f10a 0a80 	add.w	sl, sl, #128	; 0x80
 802304e:	465e      	mov	r6, fp
 8023050:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8023054:	435f      	muls	r7, r3
 8023056:	682b      	ldr	r3, [r5, #0]
 8023058:	444b      	add	r3, r9
 802305a:	6858      	ldr	r0, [r3, #4]
 802305c:	eb07 030b 	add.w	r3, r7, fp
 8023060:	3340      	adds	r3, #64	; 0x40
 8023062:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8023066:	b18b      	cbz	r3, 802308c <MobleConfigModel_ProcessSigModelSubscriptionGet+0x104>
 8023068:	f10d 0206 	add.w	r2, sp, #6
 802306c:	4659      	mov	r1, fp
 802306e:	4450      	add	r0, sl
 8023070:	f7fa fa2e 	bl	801d4d0 <MobleSetGet>
 8023074:	2801      	cmp	r0, #1
 8023076:	d809      	bhi.n	802308c <MobleConfigModel_ProcessSigModelSubscriptionGet+0x104>
 8023078:	2202      	movs	r2, #2
 802307a:	fb02 4006 	mla	r0, r2, r6, r4
 802307e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8023082:	300d      	adds	r0, #13
 8023084:	f7f8 fe18 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8023088:	3601      	adds	r6, #1
 802308a:	b2f6      	uxtb	r6, r6
 802308c:	f10b 0b01 	add.w	fp, fp, #1
 8023090:	f1bb 0f0a 	cmp.w	fp, #10
 8023094:	d1df      	bne.n	8023056 <MobleConfigModel_ProcessSigModelSubscriptionGet+0xce>
 8023096:	2305      	movs	r3, #5
 8023098:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 802309c:	f8c4 60a3 	str.w	r6, [r4, #163]	; 0xa3
 80230a0:	4623      	mov	r3, r4
 80230a2:	4642      	mov	r2, r8
 80230a4:	2101      	movs	r1, #1
 80230a6:	4628      	mov	r0, r5
 80230a8:	f7ff fd04 	bl	8022ab4 <MobleModelSendPacket>
 80230ac:	b003      	add	sp, #12
 80230ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230b2:	2301      	movs	r3, #1
 80230b4:	e795      	b.n	8022fe2 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x5a>
 80230b6:	3301      	adds	r3, #1
 80230b8:	2b0b      	cmp	r3, #11
 80230ba:	d1bb      	bne.n	8023034 <MobleConfigModel_ProcessSigModelSubscriptionGet+0xac>
 80230bc:	2600      	movs	r6, #0
 80230be:	e7ea      	b.n	8023096 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x10e>
 80230c0:	08033a09 	.word	0x08033a09
 80230c4:	08032107 	.word	0x08032107
 80230c8:	0803349b 	.word	0x0803349b
 80230cc:	08033964 	.word	0x08033964

080230d0 <MobleConfigModel_SendSigModelAppList>:
 80230d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80230d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80230d6:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 80230da:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 80230de:	460e      	mov	r6, r1
 80230e0:	4605      	mov	r5, r0
 80230e2:	4619      	mov	r1, r3
 80230e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80230e6:	b930      	cbnz	r0, 80230f6 <MobleConfigModel_SendSigModelAppList+0x26>
 80230e8:	4b17      	ldr	r3, [pc, #92]	; (8023148 <MobleConfigModel_SendSigModelAppList+0x78>)
 80230ea:	4a18      	ldr	r2, [pc, #96]	; (802314c <MobleConfigModel_SendSigModelAppList+0x7c>)
 80230ec:	4818      	ldr	r0, [pc, #96]	; (8023150 <MobleConfigModel_SendSigModelAppList+0x80>)
 80230ee:	f640 1191 	movw	r1, #2449	; 0x991
 80230f2:	f005 fcd3 	bl	8028a9c <__assert_func>
 80230f6:	204c      	movs	r0, #76	; 0x4c
 80230f8:	2700      	movs	r7, #0
 80230fa:	7020      	strb	r0, [r4, #0]
 80230fc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 8023100:	7060      	strb	r0, [r4, #1]
 8023102:	7222      	strb	r2, [r4, #8]
 8023104:	70a7      	strb	r7, [r4, #2]
 8023106:	2202      	movs	r2, #2
 8023108:	70e7      	strb	r7, [r4, #3]
 802310a:	f104 0009 	add.w	r0, r4, #9
 802310e:	9301      	str	r3, [sp, #4]
 8023110:	f7f8 fdd2 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8023114:	4649      	mov	r1, r9
 8023116:	f104 000b 	add.w	r0, r4, #11
 802311a:	f7f8 fdcd 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 802311e:	9b01      	ldr	r3, [sp, #4]
 8023120:	f104 020d 	add.w	r2, r4, #13
 8023124:	4641      	mov	r1, r8
 8023126:	4638      	mov	r0, r7
 8023128:	f7f4 fbc4 	bl	80178b4 <MobleConfigModelPutKeyIdxs>
 802312c:	b2c3      	uxtb	r3, r0
 802312e:	3305      	adds	r3, #5
 8023130:	f8c4 30a3 	str.w	r3, [r4, #163]	; 0xa3
 8023134:	4632      	mov	r2, r6
 8023136:	4623      	mov	r3, r4
 8023138:	2101      	movs	r1, #1
 802313a:	4628      	mov	r0, r5
 802313c:	b003      	add	sp, #12
 802313e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023142:	f7ff bcb7 	b.w	8022ab4 <MobleModelSendPacket>
 8023146:	bf00      	nop
 8023148:	08033489 	.word	0x08033489
 802314c:	08032137 	.word	0x08032137
 8023150:	0803349b 	.word	0x0803349b

08023154 <MobleConfigModel_ProcessSigModelAppGet>:
 8023154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023158:	b08a      	sub	sp, #40	; 0x28
 802315a:	f10d 0820 	add.w	r8, sp, #32
 802315e:	461d      	mov	r5, r3
 8023160:	2300      	movs	r3, #0
 8023162:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8023164:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023168:	460e      	mov	r6, r1
 802316a:	9308      	str	r3, [sp, #32]
 802316c:	f8a8 3004 	strh.w	r3, [r8, #4]
 8023170:	4604      	mov	r4, r0
 8023172:	b930      	cbnz	r0, 8023182 <MobleConfigModel_ProcessSigModelAppGet+0x2e>
 8023174:	4b24      	ldr	r3, [pc, #144]	; (8023208 <MobleConfigModel_ProcessSigModelAppGet+0xb4>)
 8023176:	4a25      	ldr	r2, [pc, #148]	; (802320c <MobleConfigModel_ProcessSigModelAppGet+0xb8>)
 8023178:	f641 017f 	movw	r1, #6271	; 0x187f
 802317c:	4824      	ldr	r0, [pc, #144]	; (8023210 <MobleConfigModel_ProcessSigModelAppGet+0xbc>)
 802317e:	f005 fc8d 	bl	8028a9c <__assert_func>
 8023182:	6802      	ldr	r2, [r0, #0]
 8023184:	b922      	cbnz	r2, 8023190 <MobleConfigModel_ProcessSigModelAppGet+0x3c>
 8023186:	4b23      	ldr	r3, [pc, #140]	; (8023214 <MobleConfigModel_ProcessSigModelAppGet+0xc0>)
 8023188:	4a20      	ldr	r2, [pc, #128]	; (802320c <MobleConfigModel_ProcessSigModelAppGet+0xb8>)
 802318a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 802318e:	e7f5      	b.n	802317c <MobleConfigModel_ProcessSigModelAppGet+0x28>
 8023190:	8850      	ldrh	r0, [r2, #2]
 8023192:	6829      	ldr	r1, [r5, #0]
 8023194:	7f12      	ldrb	r2, [r2, #28]
 8023196:	f8d5 5002 	ldr.w	r5, [r5, #2]
 802319a:	b28b      	uxth	r3, r1
 802319c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80231a0:	4462      	add	r2, ip
 80231a2:	4283      	cmp	r3, r0
 80231a4:	b292      	uxth	r2, r2
 80231a6:	b2ad      	uxth	r5, r5
 80231a8:	d001      	beq.n	80231ae <MobleConfigModel_ProcessSigModelAppGet+0x5a>
 80231aa:	4293      	cmp	r3, r2
 80231ac:	d829      	bhi.n	8023202 <MobleConfigModel_ProcessSigModelAppGet+0xae>
 80231ae:	1a09      	subs	r1, r1, r0
 80231b0:	b2c9      	uxtb	r1, r1
 80231b2:	4628      	mov	r0, r5
 80231b4:	9305      	str	r3, [sp, #20]
 80231b6:	f7f0 f93f 	bl	8013438 <ApplicationChkSigModelActive>
 80231ba:	9b05      	ldr	r3, [sp, #20]
 80231bc:	b940      	cbnz	r0, 80231d0 <MobleConfigModel_ProcessSigModelAppGet+0x7c>
 80231be:	f8ad 001e 	strh.w	r0, [sp, #30]
 80231c2:	2202      	movs	r2, #2
 80231c4:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80231c8:	9703      	str	r7, [sp, #12]
 80231ca:	e9cd 8101 	strd	r8, r1, [sp, #4]
 80231ce:	e006      	b.n	80231de <MobleConfigModel_ProcessSigModelAppGet+0x8a>
 80231d0:	4a11      	ldr	r2, [pc, #68]	; (8023218 <MobleConfigModel_ProcessSigModelAppGet+0xc4>)
 80231d2:	f892 261d 	ldrb.w	r2, [r2, #1565]	; 0x61d
 80231d6:	b952      	cbnz	r2, 80231ee <MobleConfigModel_ProcessSigModelAppGet+0x9a>
 80231d8:	e9cd 2702 	strd	r2, r7, [sp, #8]
 80231dc:	9201      	str	r2, [sp, #4]
 80231de:	9500      	str	r5, [sp, #0]
 80231e0:	4631      	mov	r1, r6
 80231e2:	4620      	mov	r0, r4
 80231e4:	f7ff ff74 	bl	80230d0 <MobleConfigModel_SendSigModelAppList>
 80231e8:	b00a      	add	sp, #40	; 0x28
 80231ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80231ee:	f10d 021e 	add.w	r2, sp, #30
 80231f2:	4618      	mov	r0, r3
 80231f4:	4641      	mov	r1, r8
 80231f6:	9305      	str	r3, [sp, #20]
 80231f8:	f7f6 ff64 	bl	801a0c4 <MoblePalCrypto_GetAppBind_SIGModel>
 80231fc:	9b05      	ldr	r3, [sp, #20]
 80231fe:	2200      	movs	r2, #0
 8023200:	e7e0      	b.n	80231c4 <MobleConfigModel_ProcessSigModelAppGet+0x70>
 8023202:	2201      	movs	r2, #1
 8023204:	e7de      	b.n	80231c4 <MobleConfigModel_ProcessSigModelAppGet+0x70>
 8023206:	bf00      	nop
 8023208:	08033a09 	.word	0x08033a09
 802320c:	0803215c 	.word	0x0803215c
 8023210:	0803349b 	.word	0x0803349b
 8023214:	08033964 	.word	0x08033964
 8023218:	20001410 	.word	0x20001410

0802321c <MobleConfigModel_ProcessNodeReset>:
 802321c:	b538      	push	{r3, r4, r5, lr}
 802321e:	9b05      	ldr	r3, [sp, #20]
 8023220:	460a      	mov	r2, r1
 8023222:	b930      	cbnz	r0, 8023232 <MobleConfigModel_ProcessNodeReset+0x16>
 8023224:	4b11      	ldr	r3, [pc, #68]	; (802326c <MobleConfigModel_ProcessNodeReset+0x50>)
 8023226:	4a12      	ldr	r2, [pc, #72]	; (8023270 <MobleConfigModel_ProcessNodeReset+0x54>)
 8023228:	4812      	ldr	r0, [pc, #72]	; (8023274 <MobleConfigModel_ProcessNodeReset+0x58>)
 802322a:	f640 1155 	movw	r1, #2389	; 0x955
 802322e:	f005 fc35 	bl	8028a9c <__assert_func>
 8023232:	214a      	movs	r1, #74	; 0x4a
 8023234:	2400      	movs	r4, #0
 8023236:	7019      	strb	r1, [r3, #0]
 8023238:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 802323c:	7059      	strb	r1, [r3, #1]
 802323e:	709c      	strb	r4, [r3, #2]
 8023240:	70dc      	strb	r4, [r3, #3]
 8023242:	f883 40a3 	strb.w	r4, [r3, #163]	; 0xa3
 8023246:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 802324a:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 802324e:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 8023252:	2101      	movs	r1, #1
 8023254:	f7ff fc2e 	bl	8022ab4 <MobleModelSendPacket>
 8023258:	4605      	mov	r5, r0
 802325a:	f7fd fea1 	bl	8020fa0 <MobleStackConfigInvalidate>
 802325e:	f7fc f995 	bl	801f58c <MoblePalBluetoothGracefulReset>
 8023262:	4620      	mov	r0, r4
 8023264:	f7e3 f8be 	bl	80063e4 <BLEMesh_UnprovisionCallback>
 8023268:	4628      	mov	r0, r5
 802326a:	bd38      	pop	{r3, r4, r5, pc}
 802326c:	08033489 	.word	0x08033489
 8023270:	08032183 	.word	0x08032183
 8023274:	0803349b 	.word	0x0803349b

08023278 <MobleConfigModel_ProcessNodeIdentitySet>:
 8023278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802327c:	4607      	mov	r7, r0
 802327e:	4618      	mov	r0, r3
 8023280:	461a      	mov	r2, r3
 8023282:	f7f4 fb10 	bl	80178a6 <MobleConfigModelGetNetIdx>
 8023286:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023288:	f892 8002 	ldrb.w	r8, [r2, #2]
 802328c:	4689      	mov	r9, r1
 802328e:	4605      	mov	r5, r0
 8023290:	f7f5 fe9a 	bl	8018fc8 <MoblePalCryptoHasNetworkKey>
 8023294:	b1b0      	cbz	r0, 80232c4 <MobleConfigModel_ProcessNodeIdentitySet+0x4c>
 8023296:	f1b8 0f01 	cmp.w	r8, #1
 802329a:	d83d      	bhi.n	8023318 <MobleConfigModel_ProcessNodeIdentitySet+0xa0>
 802329c:	4641      	mov	r1, r8
 802329e:	4628      	mov	r0, r5
 80232a0:	f7f5 fec6 	bl	8019030 <MoblePalCryptoSetNodeIdntyState>
 80232a4:	4606      	mov	r6, r0
 80232a6:	b978      	cbnz	r0, 80232c8 <MobleConfigModel_ProcessNodeIdentitySet+0x50>
 80232a8:	4641      	mov	r1, r8
 80232aa:	4638      	mov	r0, r7
 80232ac:	f7fe f814 	bl	80212d8 <BnrgmStackSetNodeIdentityState>
 80232b0:	f8ad 5006 	strh.w	r5, [sp, #6]
 80232b4:	b967      	cbnz	r7, 80232d0 <MobleConfigModel_ProcessNodeIdentitySet+0x58>
 80232b6:	4b19      	ldr	r3, [pc, #100]	; (802331c <MobleConfigModel_ProcessNodeIdentitySet+0xa4>)
 80232b8:	4a19      	ldr	r2, [pc, #100]	; (8023320 <MobleConfigModel_ProcessNodeIdentitySet+0xa8>)
 80232ba:	481a      	ldr	r0, [pc, #104]	; (8023324 <MobleConfigModel_ProcessNodeIdentitySet+0xac>)
 80232bc:	f640 113a 	movw	r1, #2362	; 0x93a
 80232c0:	f005 fbec 	bl	8028a9c <__assert_func>
 80232c4:	2604      	movs	r6, #4
 80232c6:	e7f3      	b.n	80232b0 <MobleConfigModel_ProcessNodeIdentitySet+0x38>
 80232c8:	260b      	movs	r6, #11
 80232ca:	f04f 0800 	mov.w	r8, #0
 80232ce:	e7ef      	b.n	80232b0 <MobleConfigModel_ProcessNodeIdentitySet+0x38>
 80232d0:	2348      	movs	r3, #72	; 0x48
 80232d2:	2500      	movs	r5, #0
 80232d4:	7023      	strb	r3, [r4, #0]
 80232d6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80232da:	7063      	strb	r3, [r4, #1]
 80232dc:	f104 0209 	add.w	r2, r4, #9
 80232e0:	f10d 0306 	add.w	r3, sp, #6
 80232e4:	70a5      	strb	r5, [r4, #2]
 80232e6:	70e5      	strb	r5, [r4, #3]
 80232e8:	7226      	strb	r6, [r4, #8]
 80232ea:	2101      	movs	r1, #1
 80232ec:	4628      	mov	r0, r5
 80232ee:	f7f4 fae1 	bl	80178b4 <MobleConfigModelPutKeyIdxs>
 80232f2:	2304      	movs	r3, #4
 80232f4:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 80232f8:	f884 800b 	strb.w	r8, [r4, #11]
 80232fc:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 8023300:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
 8023304:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 8023308:	4623      	mov	r3, r4
 802330a:	464a      	mov	r2, r9
 802330c:	4638      	mov	r0, r7
 802330e:	f7ff fbd1 	bl	8022ab4 <MobleModelSendPacket>
 8023312:	b003      	add	sp, #12
 8023314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023318:	2000      	movs	r0, #0
 802331a:	e7fa      	b.n	8023312 <MobleConfigModel_ProcessNodeIdentitySet+0x9a>
 802331c:	08033489 	.word	0x08033489
 8023320:	080321a8 	.word	0x080321a8
 8023324:	0803349b 	.word	0x0803349b

08023328 <MobleConfigModel_SendNetKeyStatus>:
 8023328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802332a:	9c08      	ldr	r4, [sp, #32]
 802332c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8023330:	460f      	mov	r7, r1
 8023332:	4606      	mov	r6, r0
 8023334:	b930      	cbnz	r0, 8023344 <MobleConfigModel_SendNetKeyStatus+0x1c>
 8023336:	4b14      	ldr	r3, [pc, #80]	; (8023388 <MobleConfigModel_SendNetKeyStatus+0x60>)
 8023338:	4a14      	ldr	r2, [pc, #80]	; (802338c <MobleConfigModel_SendNetKeyStatus+0x64>)
 802333a:	4815      	ldr	r0, [pc, #84]	; (8023390 <MobleConfigModel_SendNetKeyStatus+0x68>)
 802333c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8023340:	f005 fbac 	bl	8028a9c <__assert_func>
 8023344:	2344      	movs	r3, #68	; 0x44
 8023346:	2500      	movs	r5, #0
 8023348:	7023      	strb	r3, [r4, #0]
 802334a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 802334e:	7063      	strb	r3, [r4, #1]
 8023350:	7222      	strb	r2, [r4, #8]
 8023352:	f10d 0306 	add.w	r3, sp, #6
 8023356:	f104 0209 	add.w	r2, r4, #9
 802335a:	2101      	movs	r1, #1
 802335c:	70a5      	strb	r5, [r4, #2]
 802335e:	70e5      	strb	r5, [r4, #3]
 8023360:	4628      	mov	r0, r5
 8023362:	f7f4 faa7 	bl	80178b4 <MobleConfigModelPutKeyIdxs>
 8023366:	2303      	movs	r3, #3
 8023368:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 802336c:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 8023370:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
 8023374:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 8023378:	4623      	mov	r3, r4
 802337a:	463a      	mov	r2, r7
 802337c:	4630      	mov	r0, r6
 802337e:	f7ff fb99 	bl	8022ab4 <MobleModelSendPacket>
 8023382:	b003      	add	sp, #12
 8023384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023386:	bf00      	nop
 8023388:	08033489 	.word	0x08033489
 802338c:	080321d0 	.word	0x080321d0
 8023390:	0803349b 	.word	0x0803349b

08023394 <MobleConfigModel_ProcessNetKeyUpdate>:
 8023394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023398:	4607      	mov	r7, r0
 802339a:	b08d      	sub	sp, #52	; 0x34
 802339c:	4618      	mov	r0, r3
 802339e:	461a      	mov	r2, r3
 80233a0:	f7f4 fa81 	bl	80178a6 <MobleConfigModelGetNetIdx>
 80233a4:	ac04      	add	r4, sp, #16
 80233a6:	1c93      	adds	r3, r2, #2
 80233a8:	4688      	mov	r8, r1
 80233aa:	4605      	mov	r5, r0
 80233ac:	3212      	adds	r2, #18
 80233ae:	46a1      	mov	r9, r4
 80233b0:	6818      	ldr	r0, [r3, #0]
 80233b2:	6859      	ldr	r1, [r3, #4]
 80233b4:	4626      	mov	r6, r4
 80233b6:	c603      	stmia	r6!, {r0, r1}
 80233b8:	3308      	adds	r3, #8
 80233ba:	4293      	cmp	r3, r2
 80233bc:	4634      	mov	r4, r6
 80233be:	d1f7      	bne.n	80233b0 <MobleConfigModel_ProcessNetKeyUpdate+0x1c>
 80233c0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80233c4:	4628      	mov	r0, r5
 80233c6:	bf34      	ite	cc
 80233c8:	2400      	movcc	r4, #0
 80233ca:	2404      	movcs	r4, #4
 80233cc:	f7f7 f974 	bl	801a6b8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80233d0:	1e06      	subs	r6, r0, #0
 80233d2:	db2d      	blt.n	8023430 <MobleConfigModel_ProcessNetKeyUpdate+0x9c>
 80233d4:	b954      	cbnz	r4, 80233ec <MobleConfigModel_ProcessNetKeyUpdate+0x58>
 80233d6:	683b      	ldr	r3, [r7, #0]
 80233d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80233da:	4433      	add	r3, r6
 80233dc:	7d1c      	ldrb	r4, [r3, #20]
 80233de:	bb4c      	cbnz	r4, 8023434 <MobleConfigModel_ProcessNetKeyUpdate+0xa0>
 80233e0:	4628      	mov	r0, r5
 80233e2:	f7f5 fdd7 	bl	8018f94 <MoblePalCryptoHasNewNetworkKey>
 80233e6:	2801      	cmp	r0, #1
 80233e8:	bf08      	it	eq
 80233ea:	240b      	moveq	r4, #11
 80233ec:	4628      	mov	r0, r5
 80233ee:	f7f5 fdeb 	bl	8018fc8 <MoblePalCryptoHasNetworkKey>
 80233f2:	bb08      	cbnz	r0, 8023438 <MobleConfigModel_ProcessNetKeyUpdate+0xa4>
 80233f4:	2c00      	cmp	r4, #0
 80233f6:	bf08      	it	eq
 80233f8:	2404      	moveq	r4, #4
 80233fa:	f8ad 5020 	strh.w	r5, [sp, #32]
 80233fe:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
 8023402:	b924      	cbnz	r4, 802340e <MobleConfigModel_ProcessNetKeyUpdate+0x7a>
 8023404:	2310      	movs	r3, #16
 8023406:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 802340a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 802340e:	4b16      	ldr	r3, [pc, #88]	; (8023468 <MobleConfigModel_ProcessNetKeyUpdate+0xd4>)
 8023410:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8023414:	a808      	add	r0, sp, #32
 8023416:	69db      	ldr	r3, [r3, #28]
 8023418:	4798      	blx	r3
 802341a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802341c:	9300      	str	r3, [sp, #0]
 802341e:	4622      	mov	r2, r4
 8023420:	462b      	mov	r3, r5
 8023422:	4641      	mov	r1, r8
 8023424:	4638      	mov	r0, r7
 8023426:	f7ff ff7f 	bl	8023328 <MobleConfigModel_SendNetKeyStatus>
 802342a:	b00d      	add	sp, #52	; 0x34
 802342c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023430:	2404      	movs	r4, #4
 8023432:	e7db      	b.n	80233ec <MobleConfigModel_ProcessNetKeyUpdate+0x58>
 8023434:	240b      	movs	r4, #11
 8023436:	e7d9      	b.n	80233ec <MobleConfigModel_ProcessNetKeyUpdate+0x58>
 8023438:	2c00      	cmp	r4, #0
 802343a:	d1de      	bne.n	80233fa <MobleConfigModel_ProcessNetKeyUpdate+0x66>
 802343c:	4629      	mov	r1, r5
 802343e:	4648      	mov	r0, r9
 8023440:	f7f6 fb0a 	bl	8019a58 <MoblePalCryptoSetNewNetworkKey>
 8023444:	2803      	cmp	r0, #3
 8023446:	4604      	mov	r4, r0
 8023448:	d00a      	beq.n	8023460 <MobleConfigModel_ProcessNetKeyUpdate+0xcc>
 802344a:	b958      	cbnz	r0, 8023464 <MobleConfigModel_ProcessNetKeyUpdate+0xd0>
 802344c:	b2f1      	uxtb	r1, r6
 802344e:	4638      	mov	r0, r7
 8023450:	9103      	str	r1, [sp, #12]
 8023452:	f7fb fa6f 	bl	801e934 <BnrgmFrndMgmtUpdateKeys>
 8023456:	9903      	ldr	r1, [sp, #12]
 8023458:	2001      	movs	r0, #1
 802345a:	f7fe f931 	bl	80216c0 <ModelConfigUpdateKRState>
 802345e:	e7cc      	b.n	80233fa <MobleConfigModel_ProcessNetKeyUpdate+0x66>
 8023460:	2406      	movs	r4, #6
 8023462:	e7ca      	b.n	80233fa <MobleConfigModel_ProcessNetKeyUpdate+0x66>
 8023464:	2405      	movs	r4, #5
 8023466:	e7c8      	b.n	80233fa <MobleConfigModel_ProcessNetKeyUpdate+0x66>
 8023468:	20002508 	.word	0x20002508

0802346c <MobleConfigModel_ProcessNetKeyDelete>:
 802346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802346e:	4606      	mov	r6, r0
 8023470:	b087      	sub	sp, #28
 8023472:	4618      	mov	r0, r3
 8023474:	f7f4 fa17 	bl	80178a6 <MobleConfigModelGetNetIdx>
 8023478:	4b1f      	ldr	r3, [pc, #124]	; (80234f8 <MobleConfigModel_ProcessNetKeyDelete+0x8c>)
 802347a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 802347e:	f893 361c 	ldrb.w	r3, [r3, #1564]	; 0x61c
 8023482:	460f      	mov	r7, r1
 8023484:	4605      	mov	r5, r0
 8023486:	d232      	bcs.n	80234ee <MobleConfigModel_ProcessNetKeyDelete+0x82>
 8023488:	2b01      	cmp	r3, #1
 802348a:	d106      	bne.n	802349a <MobleConfigModel_ProcessNetKeyDelete+0x2e>
 802348c:	2400      	movs	r4, #0
 802348e:	4628      	mov	r0, r5
 8023490:	f7f5 fd9a 	bl	8018fc8 <MoblePalCryptoHasNetworkKey>
 8023494:	2801      	cmp	r0, #1
 8023496:	d005      	beq.n	80234a4 <MobleConfigModel_ProcessNetKeyDelete+0x38>
 8023498:	b92c      	cbnz	r4, 80234a6 <MobleConfigModel_ProcessNetKeyDelete+0x3a>
 802349a:	4628      	mov	r0, r5
 802349c:	f7f6 fd6c 	bl	8019f78 <MoblePalCryptoDeleteNetworkKey>
 80234a0:	2803      	cmp	r0, #3
 80234a2:	d120      	bne.n	80234e6 <MobleConfigModel_ProcessNetKeyDelete+0x7a>
 80234a4:	240c      	movs	r4, #12
 80234a6:	f8ad 5008 	strh.w	r5, [sp, #8]
 80234aa:	f88d 4015 	strb.w	r4, [sp, #21]
 80234ae:	b9e4      	cbnz	r4, 80234ea <MobleConfigModel_ProcessNetKeyDelete+0x7e>
 80234b0:	9403      	str	r4, [sp, #12]
 80234b2:	2310      	movs	r3, #16
 80234b4:	f88d 3014 	strb.w	r3, [sp, #20]
 80234b8:	4b10      	ldr	r3, [pc, #64]	; (80234fc <MobleConfigModel_ProcessNetKeyDelete+0x90>)
 80234ba:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 80234be:	a802      	add	r0, sp, #8
 80234c0:	695b      	ldr	r3, [r3, #20]
 80234c2:	4798      	blx	r3
 80234c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80234c6:	9300      	str	r3, [sp, #0]
 80234c8:	4622      	mov	r2, r4
 80234ca:	462b      	mov	r3, r5
 80234cc:	4639      	mov	r1, r7
 80234ce:	4630      	mov	r0, r6
 80234d0:	f7ff ff2a 	bl	8023328 <MobleConfigModel_SendNetKeyStatus>
 80234d4:	6833      	ldr	r3, [r6, #0]
 80234d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80234d8:	4602      	mov	r2, r0
 80234da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80234dc:	f7f4 fbac 	bl	8017c38 <MoblePalTimerStop>
 80234e0:	4610      	mov	r0, r2
 80234e2:	b007      	add	sp, #28
 80234e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80234e6:	2400      	movs	r4, #0
 80234e8:	e7dd      	b.n	80234a6 <MobleConfigModel_ProcessNetKeyDelete+0x3a>
 80234ea:	2300      	movs	r3, #0
 80234ec:	e7e2      	b.n	80234b4 <MobleConfigModel_ProcessNetKeyDelete+0x48>
 80234ee:	2b01      	cmp	r3, #1
 80234f0:	f04f 0404 	mov.w	r4, #4
 80234f4:	d1d7      	bne.n	80234a6 <MobleConfigModel_ProcessNetKeyDelete+0x3a>
 80234f6:	e7ca      	b.n	802348e <MobleConfigModel_ProcessNetKeyDelete+0x22>
 80234f8:	20001410 	.word	0x20001410
 80234fc:	20002508 	.word	0x20002508

08023500 <MobleConfigModel_ProcessNetKeyAdd>:
 8023500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023504:	4606      	mov	r6, r0
 8023506:	b08a      	sub	sp, #40	; 0x28
 8023508:	4618      	mov	r0, r3
 802350a:	461a      	mov	r2, r3
 802350c:	f7f4 f9cb 	bl	80178a6 <MobleConfigModelGetNetIdx>
 8023510:	ad02      	add	r5, sp, #8
 8023512:	1c93      	adds	r3, r2, #2
 8023514:	460f      	mov	r7, r1
 8023516:	4604      	mov	r4, r0
 8023518:	3212      	adds	r2, #18
 802351a:	46a8      	mov	r8, r5
 802351c:	6818      	ldr	r0, [r3, #0]
 802351e:	6859      	ldr	r1, [r3, #4]
 8023520:	46ac      	mov	ip, r5
 8023522:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8023526:	3308      	adds	r3, #8
 8023528:	4293      	cmp	r3, r2
 802352a:	4665      	mov	r5, ip
 802352c:	d1f6      	bne.n	802351c <MobleConfigModel_ProcessNetKeyAdd+0x1c>
 802352e:	4b21      	ldr	r3, [pc, #132]	; (80235b4 <MobleConfigModel_ProcessNetKeyAdd+0xb4>)
 8023530:	881a      	ldrh	r2, [r3, #0]
 8023532:	4b21      	ldr	r3, [pc, #132]	; (80235b8 <MobleConfigModel_ProcessNetKeyAdd+0xb8>)
 8023534:	f893 361c 	ldrb.w	r3, [r3, #1564]	; 0x61c
 8023538:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 802353c:	bf34      	ite	cc
 802353e:	2500      	movcc	r5, #0
 8023540:	2504      	movcs	r5, #4
 8023542:	429a      	cmp	r2, r3
 8023544:	d103      	bne.n	802354e <MobleConfigModel_ProcessNetKeyAdd+0x4e>
 8023546:	4620      	mov	r0, r4
 8023548:	f7f5 fd3e 	bl	8018fc8 <MoblePalCryptoHasNetworkKey>
 802354c:	b358      	cbz	r0, 80235a6 <MobleConfigModel_ProcessNetKeyAdd+0xa6>
 802354e:	bb6d      	cbnz	r5, 80235ac <MobleConfigModel_ProcessNetKeyAdd+0xac>
 8023550:	4621      	mov	r1, r4
 8023552:	4640      	mov	r0, r8
 8023554:	f7f6 faea 	bl	8019b2c <MoblePalCryptoSetNetworkKey>
 8023558:	4605      	mov	r5, r0
 802355a:	b9e0      	cbnz	r0, 8023596 <MobleConfigModel_ProcessNetKeyAdd+0x96>
 802355c:	6833      	ldr	r3, [r6, #0]
 802355e:	f8ad 4018 	strh.w	r4, [sp, #24]
 8023562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023564:	f8cd 801c 	str.w	r8, [sp, #28]
 8023568:	859c      	strh	r4, [r3, #44]	; 0x2c
 802356a:	2310      	movs	r3, #16
 802356c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8023570:	4b12      	ldr	r3, [pc, #72]	; (80235bc <MobleConfigModel_ProcessNetKeyAdd+0xbc>)
 8023572:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8023576:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 802357a:	a806      	add	r0, sp, #24
 802357c:	691b      	ldr	r3, [r3, #16]
 802357e:	4798      	blx	r3
 8023580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023582:	9300      	str	r3, [sp, #0]
 8023584:	462a      	mov	r2, r5
 8023586:	4623      	mov	r3, r4
 8023588:	4639      	mov	r1, r7
 802358a:	4630      	mov	r0, r6
 802358c:	f7ff fecc 	bl	8023328 <MobleConfigModel_SendNetKeyStatus>
 8023590:	b00a      	add	sp, #40	; 0x28
 8023592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023596:	2803      	cmp	r0, #3
 8023598:	f8ad 4018 	strh.w	r4, [sp, #24]
 802359c:	d001      	beq.n	80235a2 <MobleConfigModel_ProcessNetKeyAdd+0xa2>
 802359e:	2505      	movs	r5, #5
 80235a0:	e7e6      	b.n	8023570 <MobleConfigModel_ProcessNetKeyAdd+0x70>
 80235a2:	2506      	movs	r5, #6
 80235a4:	e7e4      	b.n	8023570 <MobleConfigModel_ProcessNetKeyAdd+0x70>
 80235a6:	f8ad 4018 	strh.w	r4, [sp, #24]
 80235aa:	e7f8      	b.n	802359e <MobleConfigModel_ProcessNetKeyAdd+0x9e>
 80235ac:	f8ad 4018 	strh.w	r4, [sp, #24]
 80235b0:	e7de      	b.n	8023570 <MobleConfigModel_ProcessNetKeyAdd+0x70>
 80235b2:	bf00      	nop
 80235b4:	20000008 	.word	0x20000008
 80235b8:	20001410 	.word	0x20001410
 80235bc:	20002508 	.word	0x20002508

080235c0 <MobleConfigModel_ProcessNetKeyGet>:
 80235c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80235c4:	b086      	sub	sp, #24
 80235c6:	f10d 0804 	add.w	r8, sp, #4
 80235ca:	4605      	mov	r5, r0
 80235cc:	460f      	mov	r7, r1
 80235ce:	4640      	mov	r0, r8
 80235d0:	f10d 0102 	add.w	r1, sp, #2
 80235d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80235d6:	f7f5 fddb 	bl	8019190 <MoblePalCrypto_GetNetKeyIndexes>
 80235da:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80235de:	f8ad 3010 	strh.w	r3, [sp, #16]
 80235e2:	4b16      	ldr	r3, [pc, #88]	; (802363c <MobleConfigModel_ProcessNetKeyGet+0x7c>)
 80235e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80235e8:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 80235ec:	2600      	movs	r6, #0
 80235ee:	699b      	ldr	r3, [r3, #24]
 80235f0:	f88d 6012 	strb.w	r6, [sp, #18]
 80235f4:	a803      	add	r0, sp, #12
 80235f6:	4798      	blx	r3
 80235f8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80235fc:	b935      	cbnz	r5, 802360c <MobleConfigModel_ProcessNetKeyGet+0x4c>
 80235fe:	4b10      	ldr	r3, [pc, #64]	; (8023640 <MobleConfigModel_ProcessNetKeyGet+0x80>)
 8023600:	4a10      	ldr	r2, [pc, #64]	; (8023644 <MobleConfigModel_ProcessNetKeyGet+0x84>)
 8023602:	4811      	ldr	r0, [pc, #68]	; (8023648 <MobleConfigModel_ProcessNetKeyGet+0x88>)
 8023604:	f640 01e4 	movw	r1, #2276	; 0x8e4
 8023608:	f005 fa48 	bl	8028a9c <__assert_func>
 802360c:	2343      	movs	r3, #67	; 0x43
 802360e:	7023      	strb	r3, [r4, #0]
 8023610:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8023614:	7063      	strb	r3, [r4, #1]
 8023616:	f104 0208 	add.w	r2, r4, #8
 802361a:	4643      	mov	r3, r8
 802361c:	70a6      	strb	r6, [r4, #2]
 802361e:	70e6      	strb	r6, [r4, #3]
 8023620:	4630      	mov	r0, r6
 8023622:	f7f4 f947 	bl	80178b4 <MobleConfigModelPutKeyIdxs>
 8023626:	4623      	mov	r3, r4
 8023628:	f8c4 00a3 	str.w	r0, [r4, #163]	; 0xa3
 802362c:	463a      	mov	r2, r7
 802362e:	2101      	movs	r1, #1
 8023630:	4628      	mov	r0, r5
 8023632:	f7ff fa3f 	bl	8022ab4 <MobleModelSendPacket>
 8023636:	b006      	add	sp, #24
 8023638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802363c:	20002508 	.word	0x20002508
 8023640:	08033489 	.word	0x08033489
 8023644:	080321f2 	.word	0x080321f2
 8023648:	0803349b 	.word	0x0803349b

0802364c <MobleConfigModel_SendModelSubscriptionStatus>:
 802364c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023650:	460e      	mov	r6, r1
 8023652:	e9dd 7407 	ldrd	r7, r4, [sp, #28]
 8023656:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 802365a:	4619      	mov	r1, r3
 802365c:	4605      	mov	r5, r0
 802365e:	b930      	cbnz	r0, 802366e <MobleConfigModel_SendModelSubscriptionStatus+0x22>
 8023660:	4b18      	ldr	r3, [pc, #96]	; (80236c4 <MobleConfigModel_SendModelSubscriptionStatus+0x78>)
 8023662:	4a19      	ldr	r2, [pc, #100]	; (80236c8 <MobleConfigModel_SendModelSubscriptionStatus+0x7c>)
 8023664:	4819      	ldr	r0, [pc, #100]	; (80236cc <MobleConfigModel_SendModelSubscriptionStatus+0x80>)
 8023666:	f640 01c3 	movw	r1, #2243	; 0x8c3
 802366a:	f005 fa17 	bl	8028a9c <__assert_func>
 802366e:	201f      	movs	r0, #31
 8023670:	2300      	movs	r3, #0
 8023672:	7020      	strb	r0, [r4, #0]
 8023674:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 8023678:	70a3      	strb	r3, [r4, #2]
 802367a:	70e3      	strb	r3, [r4, #3]
 802367c:	7060      	strb	r0, [r4, #1]
 802367e:	7222      	strb	r2, [r4, #8]
 8023680:	f104 0009 	add.w	r0, r4, #9
 8023684:	2202      	movs	r2, #2
 8023686:	f7f8 fb17 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 802368a:	4641      	mov	r1, r8
 802368c:	f104 000b 	add.w	r0, r4, #11
 8023690:	f7f8 fb12 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8023694:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 8023698:	bf28      	it	cs
 802369a:	2204      	movcs	r2, #4
 802369c:	4639      	mov	r1, r7
 802369e:	f104 000d 	add.w	r0, r4, #13
 80236a2:	f7f8 fb09 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 80236a6:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 80236aa:	bf2c      	ite	cs
 80236ac:	2309      	movcs	r3, #9
 80236ae:	2307      	movcc	r3, #7
 80236b0:	f8c4 30a3 	str.w	r3, [r4, #163]	; 0xa3
 80236b4:	4632      	mov	r2, r6
 80236b6:	4623      	mov	r3, r4
 80236b8:	4628      	mov	r0, r5
 80236ba:	2101      	movs	r1, #1
 80236bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80236c0:	f7ff b9f8 	b.w	8022ab4 <MobleModelSendPacket>
 80236c4:	08033489 	.word	0x08033489
 80236c8:	08032212 	.word	0x08032212
 80236cc:	0803349b 	.word	0x0803349b

080236d0 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite>:
 80236d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236d4:	4689      	mov	r9, r1
 80236d6:	b08f      	sub	sp, #60	; 0x3c
 80236d8:	469a      	mov	sl, r3
 80236da:	4604      	mov	r4, r0
 80236dc:	b930      	cbnz	r0, 80236ec <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x1c>
 80236de:	4b3c      	ldr	r3, [pc, #240]	; (80237d0 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x100>)
 80236e0:	4a3c      	ldr	r2, [pc, #240]	; (80237d4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x104>)
 80236e2:	f241 51b5 	movw	r1, #5557	; 0x15b5
 80236e6:	483c      	ldr	r0, [pc, #240]	; (80237d8 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x108>)
 80236e8:	f005 f9d8 	bl	8028a9c <__assert_func>
 80236ec:	6803      	ldr	r3, [r0, #0]
 80236ee:	b923      	cbnz	r3, 80236fa <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x2a>
 80236f0:	4b3a      	ldr	r3, [pc, #232]	; (80237dc <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x10c>)
 80236f2:	4a38      	ldr	r2, [pc, #224]	; (80237d4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x104>)
 80236f4:	f241 51b6 	movw	r1, #5558	; 0x15b6
 80236f8:	e7f5      	b.n	80236e6 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x16>
 80236fa:	4652      	mov	r2, sl
 80236fc:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 8023700:	f852 5b02 	ldr.w	r5, [r2], #2
 8023704:	f893 801c 	ldrb.w	r8, [r3, #28]
 8023708:	b2af      	uxth	r7, r5
 802370a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 802370e:	4498      	add	r8, r3
 8023710:	9705      	str	r7, [sp, #20]
 8023712:	463d      	mov	r5, r7
 8023714:	ab06      	add	r3, sp, #24
 8023716:	eba7 070b 	sub.w	r7, r7, fp
 802371a:	fa1f f888 	uxth.w	r8, r8
 802371e:	b2ff      	uxtb	r7, r7
 8023720:	f10a 0e12 	add.w	lr, sl, #18
 8023724:	469c      	mov	ip, r3
 8023726:	6810      	ldr	r0, [r2, #0]
 8023728:	6851      	ldr	r1, [r2, #4]
 802372a:	461e      	mov	r6, r3
 802372c:	c603      	stmia	r6!, {r0, r1}
 802372e:	3208      	adds	r2, #8
 8023730:	4572      	cmp	r2, lr
 8023732:	4633      	mov	r3, r6
 8023734:	d1f7      	bne.n	8023726 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x56>
 8023736:	4660      	mov	r0, ip
 8023738:	f7f5 feaa 	bl	8019490 <MobleConfigModelGetAddressFromVirtual>
 802373c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802373e:	2b14      	cmp	r3, #20
 8023740:	bf0c      	ite	eq
 8023742:	2102      	moveq	r1, #2
 8023744:	2104      	movne	r1, #4
 8023746:	4606      	mov	r6, r0
 8023748:	aa05      	add	r2, sp, #20
 802374a:	f10a 0012 	add.w	r0, sl, #18
 802374e:	f7f7 fd38 	bl	801b1c2 <MobleInputStreamGetLittleEndian>
 8023752:	455d      	cmp	r5, fp
 8023754:	f8dd a014 	ldr.w	sl, [sp, #20]
 8023758:	d001      	beq.n	802375e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x8e>
 802375a:	4545      	cmp	r5, r8
 802375c:	d82f      	bhi.n	80237be <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xee>
 802375e:	4639      	mov	r1, r7
 8023760:	4650      	mov	r0, sl
 8023762:	f7f8 fd1e 	bl	801c1a2 <MobleApplicationModelSupported>
 8023766:	b370      	cbz	r0, 80237c6 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xf6>
 8023768:	4633      	mov	r3, r6
 802376a:	462a      	mov	r2, r5
 802376c:	4651      	mov	r1, sl
 802376e:	4620      	mov	r0, r4
 8023770:	f7fa fb4a 	bl	801de08 <MobleConfigModel_SubscriptionOverwrite>
 8023774:	4680      	mov	r8, r0
 8023776:	6820      	ldr	r0, [r4, #0]
 8023778:	f7f9 fb68 	bl	801ce4c <MobleConfigNetworkSave>
 802377c:	2301      	movs	r3, #1
 802377e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8023782:	2300      	movs	r3, #0
 8023784:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8023788:	4b15      	ldr	r3, [pc, #84]	; (80237e0 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x110>)
 802378a:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 802378e:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8023792:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8023796:	a80a      	add	r0, sp, #40	; 0x28
 8023798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802379a:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 802379e:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 80237a2:	4798      	blx	r3
 80237a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80237a6:	9600      	str	r6, [sp, #0]
 80237a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80237ac:	4642      	mov	r2, r8
 80237ae:	462b      	mov	r3, r5
 80237b0:	4649      	mov	r1, r9
 80237b2:	4620      	mov	r0, r4
 80237b4:	f7ff ff4a 	bl	802364c <MobleConfigModel_SendModelSubscriptionStatus>
 80237b8:	b00f      	add	sp, #60	; 0x3c
 80237ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237be:	f04f 0801 	mov.w	r8, #1
 80237c2:	2600      	movs	r6, #0
 80237c4:	e7da      	b.n	802377c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xac>
 80237c6:	f04f 0802 	mov.w	r8, #2
 80237ca:	4606      	mov	r6, r0
 80237cc:	e7d6      	b.n	802377c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xac>
 80237ce:	bf00      	nop
 80237d0:	08033a09 	.word	0x08033a09
 80237d4:	0803223f 	.word	0x0803223f
 80237d8:	0803349b 	.word	0x0803349b
 80237dc:	08033964 	.word	0x08033964
 80237e0:	20002508 	.word	0x20002508

080237e4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete>:
 80237e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237e8:	4689      	mov	r9, r1
 80237ea:	b08f      	sub	sp, #60	; 0x3c
 80237ec:	469a      	mov	sl, r3
 80237ee:	4604      	mov	r4, r0
 80237f0:	b930      	cbnz	r0, 8023800 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x1c>
 80237f2:	4b3c      	ldr	r3, [pc, #240]	; (80238e4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x100>)
 80237f4:	4a3c      	ldr	r2, [pc, #240]	; (80238e8 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x104>)
 80237f6:	f241 5152 	movw	r1, #5458	; 0x1552
 80237fa:	483c      	ldr	r0, [pc, #240]	; (80238ec <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x108>)
 80237fc:	f005 f94e 	bl	8028a9c <__assert_func>
 8023800:	6803      	ldr	r3, [r0, #0]
 8023802:	b923      	cbnz	r3, 802380e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x2a>
 8023804:	4b3a      	ldr	r3, [pc, #232]	; (80238f0 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x10c>)
 8023806:	4a38      	ldr	r2, [pc, #224]	; (80238e8 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x104>)
 8023808:	f241 5153 	movw	r1, #5459	; 0x1553
 802380c:	e7f5      	b.n	80237fa <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x16>
 802380e:	4652      	mov	r2, sl
 8023810:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 8023814:	f852 5b02 	ldr.w	r5, [r2], #2
 8023818:	f893 801c 	ldrb.w	r8, [r3, #28]
 802381c:	b2af      	uxth	r7, r5
 802381e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8023822:	4498      	add	r8, r3
 8023824:	9705      	str	r7, [sp, #20]
 8023826:	463d      	mov	r5, r7
 8023828:	ab06      	add	r3, sp, #24
 802382a:	eba7 070b 	sub.w	r7, r7, fp
 802382e:	fa1f f888 	uxth.w	r8, r8
 8023832:	b2ff      	uxtb	r7, r7
 8023834:	f10a 0e12 	add.w	lr, sl, #18
 8023838:	469c      	mov	ip, r3
 802383a:	6810      	ldr	r0, [r2, #0]
 802383c:	6851      	ldr	r1, [r2, #4]
 802383e:	461e      	mov	r6, r3
 8023840:	c603      	stmia	r6!, {r0, r1}
 8023842:	3208      	adds	r2, #8
 8023844:	4572      	cmp	r2, lr
 8023846:	4633      	mov	r3, r6
 8023848:	d1f7      	bne.n	802383a <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x56>
 802384a:	4660      	mov	r0, ip
 802384c:	f7f5 fe20 	bl	8019490 <MobleConfigModelGetAddressFromVirtual>
 8023850:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023852:	2b14      	cmp	r3, #20
 8023854:	bf0c      	ite	eq
 8023856:	2102      	moveq	r1, #2
 8023858:	2104      	movne	r1, #4
 802385a:	4606      	mov	r6, r0
 802385c:	aa05      	add	r2, sp, #20
 802385e:	f10a 0012 	add.w	r0, sl, #18
 8023862:	f7f7 fcae 	bl	801b1c2 <MobleInputStreamGetLittleEndian>
 8023866:	455d      	cmp	r5, fp
 8023868:	f8dd a014 	ldr.w	sl, [sp, #20]
 802386c:	d001      	beq.n	8023872 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x8e>
 802386e:	4545      	cmp	r5, r8
 8023870:	d82f      	bhi.n	80238d2 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xee>
 8023872:	4639      	mov	r1, r7
 8023874:	4650      	mov	r0, sl
 8023876:	f7f8 fc94 	bl	801c1a2 <MobleApplicationModelSupported>
 802387a:	b370      	cbz	r0, 80238da <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xf6>
 802387c:	4633      	mov	r3, r6
 802387e:	462a      	mov	r2, r5
 8023880:	4651      	mov	r1, sl
 8023882:	4620      	mov	r0, r4
 8023884:	f7fa fbc6 	bl	801e014 <MobleConfigModel_SubscriptionDelete>
 8023888:	4680      	mov	r8, r0
 802388a:	6820      	ldr	r0, [r4, #0]
 802388c:	f7f9 fade 	bl	801ce4c <MobleConfigNetworkSave>
 8023890:	2301      	movs	r3, #1
 8023892:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8023896:	2300      	movs	r3, #0
 8023898:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 802389c:	4b15      	ldr	r3, [pc, #84]	; (80238f4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x110>)
 802389e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 80238a2:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 80238a6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80238aa:	a80a      	add	r0, sp, #40	; 0x28
 80238ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80238ae:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 80238b2:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 80238b6:	4798      	blx	r3
 80238b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80238ba:	9600      	str	r6, [sp, #0]
 80238bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80238c0:	4642      	mov	r2, r8
 80238c2:	462b      	mov	r3, r5
 80238c4:	4649      	mov	r1, r9
 80238c6:	4620      	mov	r0, r4
 80238c8:	f7ff fec0 	bl	802364c <MobleConfigModel_SendModelSubscriptionStatus>
 80238cc:	b00f      	add	sp, #60	; 0x3c
 80238ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238d2:	f04f 0801 	mov.w	r8, #1
 80238d6:	2600      	movs	r6, #0
 80238d8:	e7da      	b.n	8023890 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xac>
 80238da:	f04f 0802 	mov.w	r8, #2
 80238de:	4606      	mov	r6, r0
 80238e0:	e7d6      	b.n	8023890 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xac>
 80238e2:	bf00      	nop
 80238e4:	08033a09 	.word	0x08033a09
 80238e8:	08032280 	.word	0x08032280
 80238ec:	0803349b 	.word	0x0803349b
 80238f0:	08033964 	.word	0x08033964
 80238f4:	20002508 	.word	0x20002508

080238f8 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd>:
 80238f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238fc:	468a      	mov	sl, r1
 80238fe:	b08f      	sub	sp, #60	; 0x3c
 8023900:	4699      	mov	r9, r3
 8023902:	4604      	mov	r4, r0
 8023904:	b930      	cbnz	r0, 8023914 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x1c>
 8023906:	4b44      	ldr	r3, [pc, #272]	; (8023a18 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x120>)
 8023908:	4a44      	ldr	r2, [pc, #272]	; (8023a1c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x124>)
 802390a:	f241 41e8 	movw	r1, #5352	; 0x14e8
 802390e:	4844      	ldr	r0, [pc, #272]	; (8023a20 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x128>)
 8023910:	f005 f8c4 	bl	8028a9c <__assert_func>
 8023914:	6803      	ldr	r3, [r0, #0]
 8023916:	b923      	cbnz	r3, 8023922 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x2a>
 8023918:	4b42      	ldr	r3, [pc, #264]	; (8023a24 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x12c>)
 802391a:	4a40      	ldr	r2, [pc, #256]	; (8023a1c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x124>)
 802391c:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8023920:	e7f5      	b.n	802390e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x16>
 8023922:	464a      	mov	r2, r9
 8023924:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 8023928:	f852 5b02 	ldr.w	r5, [r2], #2
 802392c:	f893 801c 	ldrb.w	r8, [r3, #28]
 8023930:	b2af      	uxth	r7, r5
 8023932:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8023936:	4498      	add	r8, r3
 8023938:	9705      	str	r7, [sp, #20]
 802393a:	463d      	mov	r5, r7
 802393c:	ab06      	add	r3, sp, #24
 802393e:	eba7 070b 	sub.w	r7, r7, fp
 8023942:	fa1f f888 	uxth.w	r8, r8
 8023946:	b2ff      	uxtb	r7, r7
 8023948:	f109 0e12 	add.w	lr, r9, #18
 802394c:	469c      	mov	ip, r3
 802394e:	6810      	ldr	r0, [r2, #0]
 8023950:	6851      	ldr	r1, [r2, #4]
 8023952:	461e      	mov	r6, r3
 8023954:	c603      	stmia	r6!, {r0, r1}
 8023956:	3208      	adds	r2, #8
 8023958:	4572      	cmp	r2, lr
 802395a:	4633      	mov	r3, r6
 802395c:	d1f7      	bne.n	802394e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x56>
 802395e:	4660      	mov	r0, ip
 8023960:	f7f5 fd96 	bl	8019490 <MobleConfigModelGetAddressFromVirtual>
 8023964:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023966:	2b14      	cmp	r3, #20
 8023968:	bf0c      	ite	eq
 802396a:	2102      	moveq	r1, #2
 802396c:	2104      	movne	r1, #4
 802396e:	4606      	mov	r6, r0
 8023970:	aa05      	add	r2, sp, #20
 8023972:	f109 0012 	add.w	r0, r9, #18
 8023976:	f7f7 fc24 	bl	801b1c2 <MobleInputStreamGetLittleEndian>
 802397a:	455d      	cmp	r5, fp
 802397c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8023980:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 8023984:	d001      	beq.n	802398a <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x92>
 8023986:	4545      	cmp	r5, r8
 8023988:	d83d      	bhi.n	8023a06 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x10e>
 802398a:	4639      	mov	r1, r7
 802398c:	4648      	mov	r0, r9
 802398e:	f7f8 fc08 	bl	801c1a2 <MobleApplicationModelSupported>
 8023992:	2800      	cmp	r0, #0
 8023994:	d03b      	beq.n	8023a0e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x116>
 8023996:	6823      	ldr	r3, [r4, #0]
 8023998:	f10d 0c18 	add.w	ip, sp, #24
 802399c:	330c      	adds	r3, #12
 802399e:	4662      	mov	r2, ip
 80239a0:	ca03      	ldmia	r2!, {r0, r1}
 80239a2:	455a      	cmp	r2, fp
 80239a4:	6018      	str	r0, [r3, #0]
 80239a6:	6059      	str	r1, [r3, #4]
 80239a8:	4694      	mov	ip, r2
 80239aa:	f103 0308 	add.w	r3, r3, #8
 80239ae:	d1f6      	bne.n	802399e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0xa6>
 80239b0:	4633      	mov	r3, r6
 80239b2:	462a      	mov	r2, r5
 80239b4:	4649      	mov	r1, r9
 80239b6:	4620      	mov	r0, r4
 80239b8:	f7fa fa8a 	bl	801ded0 <MobleConfigModel_SubscriptionAdd>
 80239bc:	4680      	mov	r8, r0
 80239be:	6820      	ldr	r0, [r4, #0]
 80239c0:	f7f9 fa44 	bl	801ce4c <MobleConfigNetworkSave>
 80239c4:	2301      	movs	r3, #1
 80239c6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80239ca:	2300      	movs	r3, #0
 80239cc:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80239d0:	4b15      	ldr	r3, [pc, #84]	; (8023a28 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x130>)
 80239d2:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 80239d6:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 80239da:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80239de:	4658      	mov	r0, fp
 80239e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80239e2:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 80239e6:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 80239ea:	4798      	blx	r3
 80239ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80239ee:	9600      	str	r6, [sp, #0]
 80239f0:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80239f4:	4642      	mov	r2, r8
 80239f6:	462b      	mov	r3, r5
 80239f8:	4651      	mov	r1, sl
 80239fa:	4620      	mov	r0, r4
 80239fc:	f7ff fe26 	bl	802364c <MobleConfigModel_SendModelSubscriptionStatus>
 8023a00:	b00f      	add	sp, #60	; 0x3c
 8023a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a06:	f04f 0801 	mov.w	r8, #1
 8023a0a:	2600      	movs	r6, #0
 8023a0c:	e7da      	b.n	80239c4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0xcc>
 8023a0e:	f04f 0802 	mov.w	r8, #2
 8023a12:	4606      	mov	r6, r0
 8023a14:	e7d6      	b.n	80239c4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0xcc>
 8023a16:	bf00      	nop
 8023a18:	08033a09 	.word	0x08033a09
 8023a1c:	080322be 	.word	0x080322be
 8023a20:	0803349b 	.word	0x0803349b
 8023a24:	08033964 	.word	0x08033964
 8023a28:	20002508 	.word	0x20002508

08023a2c <MobleConfigModel_ProcessModelSubscriptionOverwrite>:
 8023a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a30:	4689      	mov	r9, r1
 8023a32:	b08b      	sub	sp, #44	; 0x2c
 8023a34:	4604      	mov	r4, r0
 8023a36:	b930      	cbnz	r0, 8023a46 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x1a>
 8023a38:	4b31      	ldr	r3, [pc, #196]	; (8023b00 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xd4>)
 8023a3a:	4a32      	ldr	r2, [pc, #200]	; (8023b04 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xd8>)
 8023a3c:	f241 4182 	movw	r1, #5250	; 0x1482
 8023a40:	4831      	ldr	r0, [pc, #196]	; (8023b08 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xdc>)
 8023a42:	f005 f82b 	bl	8028a9c <__assert_func>
 8023a46:	6802      	ldr	r2, [r0, #0]
 8023a48:	b922      	cbnz	r2, 8023a54 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x28>
 8023a4a:	4b30      	ldr	r3, [pc, #192]	; (8023b0c <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xe0>)
 8023a4c:	4a2d      	ldr	r2, [pc, #180]	; (8023b04 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xd8>)
 8023a4e:	f241 4183 	movw	r1, #5251	; 0x1483
 8023a52:	e7f5      	b.n	8023a40 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x14>
 8023a54:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 8023a58:	7f16      	ldrb	r6, [r2, #28]
 8023a5a:	f8d3 7002 	ldr.w	r7, [r3, #2]
 8023a5e:	681d      	ldr	r5, [r3, #0]
 8023a60:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8023a64:	4416      	add	r6, r2
 8023a66:	b2ba      	uxth	r2, r7
 8023a68:	9205      	str	r2, [sp, #20]
 8023a6a:	4617      	mov	r7, r2
 8023a6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023a6e:	2a06      	cmp	r2, #6
 8023a70:	fa1f f885 	uxth.w	r8, r5
 8023a74:	bf0c      	ite	eq
 8023a76:	2102      	moveq	r1, #2
 8023a78:	2104      	movne	r1, #4
 8023a7a:	aa05      	add	r2, sp, #20
 8023a7c:	1d18      	adds	r0, r3, #4
 8023a7e:	f7f7 fba0 	bl	801b1c2 <MobleInputStreamGetLittleEndian>
 8023a82:	eba5 050b 	sub.w	r5, r5, fp
 8023a86:	45d8      	cmp	r8, fp
 8023a88:	f8dd a014 	ldr.w	sl, [sp, #20]
 8023a8c:	b2b6      	uxth	r6, r6
 8023a8e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8023a92:	d001      	beq.n	8023a98 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x6c>
 8023a94:	45b0      	cmp	r8, r6
 8023a96:	d82e      	bhi.n	8023af6 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xca>
 8023a98:	4629      	mov	r1, r5
 8023a9a:	4650      	mov	r0, sl
 8023a9c:	f7f8 fb81 	bl	801c1a2 <MobleApplicationModelSupported>
 8023aa0:	b358      	cbz	r0, 8023afa <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xce>
 8023aa2:	463b      	mov	r3, r7
 8023aa4:	4642      	mov	r2, r8
 8023aa6:	4651      	mov	r1, sl
 8023aa8:	4620      	mov	r0, r4
 8023aaa:	f7fa f9ad 	bl	801de08 <MobleConfigModel_SubscriptionOverwrite>
 8023aae:	4606      	mov	r6, r0
 8023ab0:	6820      	ldr	r0, [r4, #0]
 8023ab2:	f7f9 f9cb 	bl	801ce4c <MobleConfigNetworkSave>
 8023ab6:	2300      	movs	r3, #0
 8023ab8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8023abc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8023ac0:	4b13      	ldr	r3, [pc, #76]	; (8023b10 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xe4>)
 8023ac2:	f88d 5018 	strb.w	r5, [sp, #24]
 8023ac6:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8023aca:	f8cd a01c 	str.w	sl, [sp, #28]
 8023ace:	a806      	add	r0, sp, #24
 8023ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023ad2:	f8ad 7020 	strh.w	r7, [sp, #32]
 8023ad6:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8023ada:	4798      	blx	r3
 8023adc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023ade:	9700      	str	r7, [sp, #0]
 8023ae0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8023ae4:	4632      	mov	r2, r6
 8023ae6:	4643      	mov	r3, r8
 8023ae8:	4649      	mov	r1, r9
 8023aea:	4620      	mov	r0, r4
 8023aec:	f7ff fdae 	bl	802364c <MobleConfigModel_SendModelSubscriptionStatus>
 8023af0:	b00b      	add	sp, #44	; 0x2c
 8023af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023af6:	2601      	movs	r6, #1
 8023af8:	e7dd      	b.n	8023ab6 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x8a>
 8023afa:	2602      	movs	r6, #2
 8023afc:	e7db      	b.n	8023ab6 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x8a>
 8023afe:	bf00      	nop
 8023b00:	08033a09 	.word	0x08033a09
 8023b04:	080322f9 	.word	0x080322f9
 8023b08:	0803349b 	.word	0x0803349b
 8023b0c:	08033964 	.word	0x08033964
 8023b10:	20002508 	.word	0x20002508

08023b14 <MobleConfigModel_ProcessModelSubscriptionDeleteAll>:
 8023b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b18:	4605      	mov	r5, r0
 8023b1a:	b08d      	sub	sp, #52	; 0x34
 8023b1c:	682a      	ldr	r2, [r5, #0]
 8023b1e:	4618      	mov	r0, r3
 8023b20:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8023b24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023b26:	f850 6b02 	ldr.w	r6, [r0], #2
 8023b2a:	2a04      	cmp	r2, #4
 8023b2c:	4688      	mov	r8, r1
 8023b2e:	b2b4      	uxth	r4, r6
 8023b30:	bf0c      	ite	eq
 8023b32:	2102      	moveq	r1, #2
 8023b34:	2104      	movne	r1, #4
 8023b36:	aa07      	add	r2, sp, #28
 8023b38:	9407      	str	r4, [sp, #28]
 8023b3a:	f7f7 fb42 	bl	801b1c2 <MobleInputStreamGetLittleEndian>
 8023b3e:	6828      	ldr	r0, [r5, #0]
 8023b40:	9f07      	ldr	r7, [sp, #28]
 8023b42:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8023b44:	7f02      	ldrb	r2, [r0, #28]
 8023b46:	8819      	ldrh	r1, [r3, #0]
 8023b48:	42a1      	cmp	r1, r4
 8023b4a:	4626      	mov	r6, r4
 8023b4c:	d10a      	bne.n	8023b64 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x50>
 8023b4e:	2f02      	cmp	r7, #2
 8023b50:	d108      	bne.n	8023b64 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x50>
 8023b52:	2100      	movs	r1, #0
 8023b54:	f8a3 1066 	strh.w	r1, [r3, #102]	; 0x66
 8023b58:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
 8023b5c:	9205      	str	r2, [sp, #20]
 8023b5e:	f7f9 f975 	bl	801ce4c <MobleConfigNetworkSave>
 8023b62:	9a05      	ldr	r2, [sp, #20]
 8023b64:	2300      	movs	r3, #0
 8023b66:	4699      	mov	r9, r3
 8023b68:	b2d9      	uxtb	r1, r3
 8023b6a:	428a      	cmp	r2, r1
 8023b6c:	d92e      	bls.n	8023bcc <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xb8>
 8023b6e:	f8d5 b000 	ldr.w	fp, [r5]
 8023b72:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
 8023b76:	f04f 0901 	mov.w	r9, #1
 8023b7a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8023b7c:	8801      	ldrh	r1, [r0, #0]
 8023b7e:	42b1      	cmp	r1, r6
 8023b80:	f103 0301 	add.w	r3, r3, #1
 8023b84:	d1f0      	bne.n	8023b68 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x54>
 8023b86:	2300      	movs	r3, #0
 8023b88:	f04f 0c38 	mov.w	ip, #56	; 0x38
 8023b8c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 8023b90:	fb0c f103 	mul.w	r1, ip, r3
 8023b94:	f85e 2001 	ldr.w	r2, [lr, r1]
 8023b98:	4297      	cmp	r7, r2
 8023b9a:	d112      	bne.n	8023bc2 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xae>
 8023b9c:	f101 0380 	add.w	r3, r1, #128	; 0x80
 8023ba0:	2214      	movs	r2, #20
 8023ba2:	2100      	movs	r1, #0
 8023ba4:	4418      	add	r0, r3
 8023ba6:	f005 f80b 	bl	8028bc0 <memset>
 8023baa:	4658      	mov	r0, fp
 8023bac:	f7f9 f94e 	bl	801ce4c <MobleConfigNetworkSave>
 8023bb0:	eba4 040a 	sub.w	r4, r4, sl
 8023bb4:	b2e4      	uxtb	r4, r4
 8023bb6:	f04f 0900 	mov.w	r9, #0
 8023bba:	6828      	ldr	r0, [r5, #0]
 8023bbc:	f7f9 f946 	bl	801ce4c <MobleConfigNetworkSave>
 8023bc0:	e00a      	b.n	8023bd8 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xc4>
 8023bc2:	3301      	adds	r3, #1
 8023bc4:	2b0b      	cmp	r3, #11
 8023bc6:	d1e3      	bne.n	8023b90 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x7c>
 8023bc8:	f04f 0902 	mov.w	r9, #2
 8023bcc:	eba4 040a 	sub.w	r4, r4, sl
 8023bd0:	f1b9 0f02 	cmp.w	r9, #2
 8023bd4:	b2e4      	uxtb	r4, r4
 8023bd6:	d1f0      	bne.n	8023bba <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xa6>
 8023bd8:	2301      	movs	r3, #1
 8023bda:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8023bde:	4b0e      	ldr	r3, [pc, #56]	; (8023c18 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x104>)
 8023be0:	f88d 4020 	strb.w	r4, [sp, #32]
 8023be4:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8023be8:	9709      	str	r7, [sp, #36]	; 0x24
 8023bea:	2400      	movs	r4, #0
 8023bec:	a808      	add	r0, sp, #32
 8023bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023bf0:	940a      	str	r4, [sp, #40]	; 0x28
 8023bf2:	4798      	blx	r3
 8023bf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023bf6:	9400      	str	r4, [sp, #0]
 8023bf8:	f1b9 0f02 	cmp.w	r9, #2
 8023bfc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8023c00:	bf08      	it	eq
 8023c02:	2205      	moveq	r2, #5
 8023c04:	4633      	mov	r3, r6
 8023c06:	bf18      	it	ne
 8023c08:	4622      	movne	r2, r4
 8023c0a:	4641      	mov	r1, r8
 8023c0c:	4628      	mov	r0, r5
 8023c0e:	f7ff fd1d 	bl	802364c <MobleConfigModel_SendModelSubscriptionStatus>
 8023c12:	b00d      	add	sp, #52	; 0x34
 8023c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c18:	20002508 	.word	0x20002508

08023c1c <MobleConfigModel_ProcessModelSubscriptionDelete>:
 8023c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c20:	4689      	mov	r9, r1
 8023c22:	b08b      	sub	sp, #44	; 0x2c
 8023c24:	4604      	mov	r4, r0
 8023c26:	b930      	cbnz	r0, 8023c36 <MobleConfigModel_ProcessModelSubscriptionDelete+0x1a>
 8023c28:	4b31      	ldr	r3, [pc, #196]	; (8023cf0 <MobleConfigModel_ProcessModelSubscriptionDelete+0xd4>)
 8023c2a:	4a32      	ldr	r2, [pc, #200]	; (8023cf4 <MobleConfigModel_ProcessModelSubscriptionDelete+0xd8>)
 8023c2c:	f241 31e5 	movw	r1, #5093	; 0x13e5
 8023c30:	4831      	ldr	r0, [pc, #196]	; (8023cf8 <MobleConfigModel_ProcessModelSubscriptionDelete+0xdc>)
 8023c32:	f004 ff33 	bl	8028a9c <__assert_func>
 8023c36:	6802      	ldr	r2, [r0, #0]
 8023c38:	b922      	cbnz	r2, 8023c44 <MobleConfigModel_ProcessModelSubscriptionDelete+0x28>
 8023c3a:	4b30      	ldr	r3, [pc, #192]	; (8023cfc <MobleConfigModel_ProcessModelSubscriptionDelete+0xe0>)
 8023c3c:	4a2d      	ldr	r2, [pc, #180]	; (8023cf4 <MobleConfigModel_ProcessModelSubscriptionDelete+0xd8>)
 8023c3e:	f241 31e6 	movw	r1, #5094	; 0x13e6
 8023c42:	e7f5      	b.n	8023c30 <MobleConfigModel_ProcessModelSubscriptionDelete+0x14>
 8023c44:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 8023c48:	7f16      	ldrb	r6, [r2, #28]
 8023c4a:	f8d3 7002 	ldr.w	r7, [r3, #2]
 8023c4e:	681d      	ldr	r5, [r3, #0]
 8023c50:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8023c54:	4416      	add	r6, r2
 8023c56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023c58:	b2b9      	uxth	r1, r7
 8023c5a:	2a06      	cmp	r2, #6
 8023c5c:	9105      	str	r1, [sp, #20]
 8023c5e:	fa1f f885 	uxth.w	r8, r5
 8023c62:	460f      	mov	r7, r1
 8023c64:	aa05      	add	r2, sp, #20
 8023c66:	bf0c      	ite	eq
 8023c68:	2102      	moveq	r1, #2
 8023c6a:	2104      	movne	r1, #4
 8023c6c:	1d18      	adds	r0, r3, #4
 8023c6e:	f7f7 faa8 	bl	801b1c2 <MobleInputStreamGetLittleEndian>
 8023c72:	eba5 050b 	sub.w	r5, r5, fp
 8023c76:	45d8      	cmp	r8, fp
 8023c78:	f8dd a014 	ldr.w	sl, [sp, #20]
 8023c7c:	b2b6      	uxth	r6, r6
 8023c7e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8023c82:	d001      	beq.n	8023c88 <MobleConfigModel_ProcessModelSubscriptionDelete+0x6c>
 8023c84:	45b0      	cmp	r8, r6
 8023c86:	d82e      	bhi.n	8023ce6 <MobleConfigModel_ProcessModelSubscriptionDelete+0xca>
 8023c88:	4629      	mov	r1, r5
 8023c8a:	4650      	mov	r0, sl
 8023c8c:	f7f8 fa89 	bl	801c1a2 <MobleApplicationModelSupported>
 8023c90:	b358      	cbz	r0, 8023cea <MobleConfigModel_ProcessModelSubscriptionDelete+0xce>
 8023c92:	463b      	mov	r3, r7
 8023c94:	4642      	mov	r2, r8
 8023c96:	4651      	mov	r1, sl
 8023c98:	4620      	mov	r0, r4
 8023c9a:	f7fa f9bb 	bl	801e014 <MobleConfigModel_SubscriptionDelete>
 8023c9e:	4606      	mov	r6, r0
 8023ca0:	6820      	ldr	r0, [r4, #0]
 8023ca2:	f7f9 f8d3 	bl	801ce4c <MobleConfigNetworkSave>
 8023ca6:	2300      	movs	r3, #0
 8023ca8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8023cac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8023cb0:	4b13      	ldr	r3, [pc, #76]	; (8023d00 <MobleConfigModel_ProcessModelSubscriptionDelete+0xe4>)
 8023cb2:	f88d 5018 	strb.w	r5, [sp, #24]
 8023cb6:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8023cba:	f8cd a01c 	str.w	sl, [sp, #28]
 8023cbe:	a806      	add	r0, sp, #24
 8023cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023cc2:	f8ad 7020 	strh.w	r7, [sp, #32]
 8023cc6:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8023cca:	4798      	blx	r3
 8023ccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023cce:	9700      	str	r7, [sp, #0]
 8023cd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8023cd4:	4632      	mov	r2, r6
 8023cd6:	4643      	mov	r3, r8
 8023cd8:	4649      	mov	r1, r9
 8023cda:	4620      	mov	r0, r4
 8023cdc:	f7ff fcb6 	bl	802364c <MobleConfigModel_SendModelSubscriptionStatus>
 8023ce0:	b00b      	add	sp, #44	; 0x2c
 8023ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ce6:	2601      	movs	r6, #1
 8023ce8:	e7dd      	b.n	8023ca6 <MobleConfigModel_ProcessModelSubscriptionDelete+0x8a>
 8023cea:	2602      	movs	r6, #2
 8023cec:	e7db      	b.n	8023ca6 <MobleConfigModel_ProcessModelSubscriptionDelete+0x8a>
 8023cee:	bf00      	nop
 8023cf0:	08033a09 	.word	0x08033a09
 8023cf4:	0803232c 	.word	0x0803232c
 8023cf8:	0803349b 	.word	0x0803349b
 8023cfc:	08033964 	.word	0x08033964
 8023d00:	20002508 	.word	0x20002508

08023d04 <MobleConfigModel_ProcessModelSubscriptionAdd>:
 8023d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d08:	6802      	ldr	r2, [r0, #0]
 8023d0a:	f8d3 7002 	ldr.w	r7, [r3, #2]
 8023d0e:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 8023d12:	7f16      	ldrb	r6, [r2, #28]
 8023d14:	681c      	ldr	r4, [r3, #0]
 8023d16:	b08b      	sub	sp, #44	; 0x2c
 8023d18:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8023d1c:	4416      	add	r6, r2
 8023d1e:	b2ba      	uxth	r2, r7
 8023d20:	9205      	str	r2, [sp, #20]
 8023d22:	4617      	mov	r7, r2
 8023d24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023d26:	2a06      	cmp	r2, #6
 8023d28:	4689      	mov	r9, r1
 8023d2a:	fa1f f884 	uxth.w	r8, r4
 8023d2e:	bf0c      	ite	eq
 8023d30:	2102      	moveq	r1, #2
 8023d32:	2104      	movne	r1, #4
 8023d34:	4605      	mov	r5, r0
 8023d36:	aa05      	add	r2, sp, #20
 8023d38:	1d18      	adds	r0, r3, #4
 8023d3a:	f7f7 fa42 	bl	801b1c2 <MobleInputStreamGetLittleEndian>
 8023d3e:	eba4 040b 	sub.w	r4, r4, fp
 8023d42:	45c3      	cmp	fp, r8
 8023d44:	f8dd a014 	ldr.w	sl, [sp, #20]
 8023d48:	b2b6      	uxth	r6, r6
 8023d4a:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 8023d4e:	d025      	beq.n	8023d9c <MobleConfigModel_ProcessModelSubscriptionAdd+0x98>
 8023d50:	4546      	cmp	r6, r8
 8023d52:	d223      	bcs.n	8023d9c <MobleConfigModel_ProcessModelSubscriptionAdd+0x98>
 8023d54:	6828      	ldr	r0, [r5, #0]
 8023d56:	f7f9 f879 	bl	801ce4c <MobleConfigNetworkSave>
 8023d5a:	2601      	movs	r6, #1
 8023d5c:	2300      	movs	r3, #0
 8023d5e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8023d62:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8023d66:	4b15      	ldr	r3, [pc, #84]	; (8023dbc <MobleConfigModel_ProcessModelSubscriptionAdd+0xb8>)
 8023d68:	f88d 4018 	strb.w	r4, [sp, #24]
 8023d6c:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8023d70:	f8cd a01c 	str.w	sl, [sp, #28]
 8023d74:	a806      	add	r0, sp, #24
 8023d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023d78:	f8ad 7020 	strh.w	r7, [sp, #32]
 8023d7c:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8023d80:	4798      	blx	r3
 8023d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023d84:	9700      	str	r7, [sp, #0]
 8023d86:	e9cd a301 	strd	sl, r3, [sp, #4]
 8023d8a:	4632      	mov	r2, r6
 8023d8c:	4643      	mov	r3, r8
 8023d8e:	4649      	mov	r1, r9
 8023d90:	4628      	mov	r0, r5
 8023d92:	f7ff fc5b 	bl	802364c <MobleConfigModel_SendModelSubscriptionStatus>
 8023d96:	b00b      	add	sp, #44	; 0x2c
 8023d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d9c:	4621      	mov	r1, r4
 8023d9e:	4650      	mov	r0, sl
 8023da0:	f7f8 f9ff 	bl	801c1a2 <MobleApplicationModelSupported>
 8023da4:	b138      	cbz	r0, 8023db6 <MobleConfigModel_ProcessModelSubscriptionAdd+0xb2>
 8023da6:	463b      	mov	r3, r7
 8023da8:	4642      	mov	r2, r8
 8023daa:	4651      	mov	r1, sl
 8023dac:	4628      	mov	r0, r5
 8023dae:	f7fa f88f 	bl	801ded0 <MobleConfigModel_SubscriptionAdd>
 8023db2:	4606      	mov	r6, r0
 8023db4:	e7d2      	b.n	8023d5c <MobleConfigModel_ProcessModelSubscriptionAdd+0x58>
 8023db6:	2602      	movs	r6, #2
 8023db8:	e7d0      	b.n	8023d5c <MobleConfigModel_ProcessModelSubscriptionAdd+0x58>
 8023dba:	bf00      	nop
 8023dbc:	20002508 	.word	0x20002508

08023dc0 <MobleConfigModel_SendModelPublicationStatus>:
 8023dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023dc4:	b085      	sub	sp, #20
 8023dc6:	460e      	mov	r6, r1
 8023dc8:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8023dcc:	9401      	str	r4, [sp, #4]
 8023dce:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8023dd2:	9402      	str	r4, [sp, #8]
 8023dd4:	4619      	mov	r1, r3
 8023dd6:	e9dd 7415 	ldrd	r7, r4, [sp, #84]	; 0x54
 8023dda:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8023dde:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 8023de2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8023de6:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8023dea:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8023dee:	4605      	mov	r5, r0
 8023df0:	b930      	cbnz	r0, 8023e00 <MobleConfigModel_SendModelPublicationStatus+0x40>
 8023df2:	4b25      	ldr	r3, [pc, #148]	; (8023e88 <MobleConfigModel_SendModelPublicationStatus+0xc8>)
 8023df4:	4a25      	ldr	r2, [pc, #148]	; (8023e8c <MobleConfigModel_SendModelPublicationStatus+0xcc>)
 8023df6:	4826      	ldr	r0, [pc, #152]	; (8023e90 <MobleConfigModel_SendModelPublicationStatus+0xd0>)
 8023df8:	f640 0199 	movw	r1, #2201	; 0x899
 8023dfc:	f004 fe4e 	bl	8028a9c <__assert_func>
 8023e00:	f04f 0c19 	mov.w	ip, #25
 8023e04:	2000      	movs	r0, #0
 8023e06:	f884 c000 	strb.w	ip, [r4]
 8023e0a:	f06f 0c7f 	mvn.w	ip, #127	; 0x7f
 8023e0e:	f884 c001 	strb.w	ip, [r4, #1]
 8023e12:	70a0      	strb	r0, [r4, #2]
 8023e14:	70e0      	strb	r0, [r4, #3]
 8023e16:	7222      	strb	r2, [r4, #8]
 8023e18:	f104 0009 	add.w	r0, r4, #9
 8023e1c:	2202      	movs	r2, #2
 8023e1e:	9303      	str	r3, [sp, #12]
 8023e20:	f7f7 ff4a 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8023e24:	9b03      	ldr	r3, [sp, #12]
 8023e26:	f104 000b 	add.w	r0, r4, #11
 8023e2a:	4619      	mov	r1, r3
 8023e2c:	f7f7 ff44 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8023e30:	4659      	mov	r1, fp
 8023e32:	f104 000d 	add.w	r0, r4, #13
 8023e36:	f7f7 ff3f 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8023e3a:	7ba3      	ldrb	r3, [r4, #14]
 8023e3c:	f884 900f 	strb.w	r9, [r4, #15]
 8023e40:	ea43 1a0a 	orr.w	sl, r3, sl, lsl #4
 8023e44:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8023e48:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 8023e4c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8023e50:	7463      	strb	r3, [r4, #17]
 8023e52:	bf28      	it	cs
 8023e54:	2204      	movcs	r2, #4
 8023e56:	4639      	mov	r1, r7
 8023e58:	f884 a00e 	strb.w	sl, [r4, #14]
 8023e5c:	f884 8010 	strb.w	r8, [r4, #16]
 8023e60:	f104 0012 	add.w	r0, r4, #18
 8023e64:	f7f7 ff28 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8023e68:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 8023e6c:	bf2c      	ite	cs
 8023e6e:	230e      	movcs	r3, #14
 8023e70:	230c      	movcc	r3, #12
 8023e72:	f8c4 30a3 	str.w	r3, [r4, #163]	; 0xa3
 8023e76:	4632      	mov	r2, r6
 8023e78:	4623      	mov	r3, r4
 8023e7a:	2101      	movs	r1, #1
 8023e7c:	4628      	mov	r0, r5
 8023e7e:	b005      	add	sp, #20
 8023e80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e84:	f7fe be16 	b.w	8022ab4 <MobleModelSendPacket>
 8023e88:	08033489 	.word	0x08033489
 8023e8c:	0803235c 	.word	0x0803235c
 8023e90:	0803349b 	.word	0x0803349b

08023e94 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet>:
 8023e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e98:	461c      	mov	r4, r3
 8023e9a:	6803      	ldr	r3, [r0, #0]
 8023e9c:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8023ea0:	885b      	ldrh	r3, [r3, #2]
 8023ea2:	1e5a      	subs	r2, r3, #1
 8023ea4:	b0a3      	sub	sp, #140	; 0x8c
 8023ea6:	445a      	add	r2, fp
 8023ea8:	b292      	uxth	r2, r2
 8023eaa:	920b      	str	r2, [sp, #44]	; 0x2c
 8023eac:	4622      	mov	r2, r4
 8023eae:	ae10      	add	r6, sp, #64	; 0x40
 8023eb0:	f852 5b02 	ldr.w	r5, [r2], #2
 8023eb4:	fa1f fa85 	uxth.w	sl, r5
 8023eb8:	4680      	mov	r8, r0
 8023eba:	4689      	mov	r9, r1
 8023ebc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8023ec0:	4655      	mov	r5, sl
 8023ec2:	f104 0e12 	add.w	lr, r4, #18
 8023ec6:	46b4      	mov	ip, r6
 8023ec8:	6810      	ldr	r0, [r2, #0]
 8023eca:	6851      	ldr	r1, [r2, #4]
 8023ecc:	4637      	mov	r7, r6
 8023ece:	c703      	stmia	r7!, {r0, r1}
 8023ed0:	3208      	adds	r2, #8
 8023ed2:	4572      	cmp	r2, lr
 8023ed4:	463e      	mov	r6, r7
 8023ed6:	d1f7      	bne.n	8023ec8 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x34>
 8023ed8:	4660      	mov	r0, ip
 8023eda:	930d      	str	r3, [sp, #52]	; 0x34
 8023edc:	f7f5 fad8 	bl	8019490 <MobleConfigModelGetAddressFromVirtual>
 8023ee0:	f8d4 7012 	ldr.w	r7, [r4, #18]
 8023ee4:	900c      	str	r0, [sp, #48]	; 0x30
 8023ee6:	b2ba      	uxth	r2, r7
 8023ee8:	920f      	str	r2, [sp, #60]	; 0x3c
 8023eea:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023eec:	2a19      	cmp	r2, #25
 8023eee:	bf08      	it	eq
 8023ef0:	2102      	moveq	r1, #2
 8023ef2:	aa0f      	add	r2, sp, #60	; 0x3c
 8023ef4:	bf18      	it	ne
 8023ef6:	2104      	movne	r1, #4
 8023ef8:	f104 0017 	add.w	r0, r4, #23
 8023efc:	f7f7 f961 	bl	801b1c2 <MobleInputStreamGetLittleEndian>
 8023f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023f02:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023f04:	2200      	movs	r2, #0
 8023f06:	42ab      	cmp	r3, r5
 8023f08:	9215      	str	r2, [sp, #84]	; 0x54
 8023f0a:	921b      	str	r2, [sp, #108]	; 0x6c
 8023f0c:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
 8023f10:	d024      	beq.n	8023f5c <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0xc8>
 8023f12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023f14:	42aa      	cmp	r2, r5
 8023f16:	d221      	bcs.n	8023f5c <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0xc8>
 8023f18:	9614      	str	r6, [sp, #80]	; 0x50
 8023f1a:	2201      	movs	r2, #1
 8023f1c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023f1e:	e9cd 6307 	strd	r6, r3, [sp, #28]
 8023f22:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8023f26:	9306      	str	r3, [sp, #24]
 8023f28:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
 8023f2c:	9305      	str	r3, [sp, #20]
 8023f2e:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 8023f32:	9304      	str	r3, [sp, #16]
 8023f34:	f89d 306d 	ldrb.w	r3, [sp, #109]	; 0x6d
 8023f38:	9303      	str	r3, [sp, #12]
 8023f3a:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8023f3e:	9302      	str	r3, [sp, #8]
 8023f40:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8023f44:	9301      	str	r3, [sp, #4]
 8023f46:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8023f4a:	9300      	str	r3, [sp, #0]
 8023f4c:	4649      	mov	r1, r9
 8023f4e:	462b      	mov	r3, r5
 8023f50:	4640      	mov	r0, r8
 8023f52:	f7ff ff35 	bl	8023dc0 <MobleConfigModel_SendModelPublicationStatus>
 8023f56:	b023      	add	sp, #140	; 0x8c
 8023f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f5c:	ebaa 0103 	sub.w	r1, sl, r3
 8023f60:	b2c9      	uxtb	r1, r1
 8023f62:	4630      	mov	r0, r6
 8023f64:	f7f8 f91d 	bl	801c1a2 <MobleApplicationModelSupported>
 8023f68:	b910      	cbnz	r0, 8023f70 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0xdc>
 8023f6a:	9614      	str	r6, [sp, #80]	; 0x50
 8023f6c:	2202      	movs	r2, #2
 8023f6e:	e7d5      	b.n	8023f1c <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x88>
 8023f70:	f3c7 070b 	ubfx	r7, r7, #0, #12
 8023f74:	4638      	mov	r0, r7
 8023f76:	f7f5 f841 	bl	8018ffc <MoblePalCryptoHasAppKey>
 8023f7a:	9614      	str	r6, [sp, #80]	; 0x50
 8023f7c:	b908      	cbnz	r0, 8023f82 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0xee>
 8023f7e:	2203      	movs	r2, #3
 8023f80:	e7cc      	b.n	8023f1c <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x88>
 8023f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023f84:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 8023f88:	7ce3      	ldrb	r3, [r4, #19]
 8023f8a:	f8ad 7056 	strh.w	r7, [sp, #86]	; 0x56
 8023f8e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8023f92:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8023f96:	7d23      	ldrb	r3, [r4, #20]
 8023f98:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8023f9c:	7d63      	ldrb	r3, [r4, #21]
 8023f9e:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
 8023fa2:	7da3      	ldrb	r3, [r4, #22]
 8023fa4:	f003 0207 	and.w	r2, r3, #7
 8023fa8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8023fac:	08db      	lsrs	r3, r3, #3
 8023fae:	aa14      	add	r2, sp, #80	; 0x50
 8023fb0:	4629      	mov	r1, r5
 8023fb2:	4658      	mov	r0, fp
 8023fb4:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8023fb8:	f7f6 faae 	bl	801a518 <MoblePalCrypto_UpdateModelPublicationParameters>
 8023fbc:	2200      	movs	r2, #0
 8023fbe:	e7ad      	b.n	8023f1c <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x88>

08023fc0 <MobleConfigModel_ProcessModelPublicationSet>:
 8023fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fc4:	6802      	ldr	r2, [r0, #0]
 8023fc6:	ed2d 8b02 	vpush	{d8}
 8023fca:	469a      	mov	sl, r3
 8023fcc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8023fd0:	f892 b01c 	ldrb.w	fp, [r2, #28]
 8023fd4:	f8da 7004 	ldr.w	r7, [sl, #4]
 8023fd8:	f8da 8000 	ldr.w	r8, [sl]
 8023fdc:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8023fe0:	b0a1      	sub	sp, #132	; 0x84
 8023fe2:	445a      	add	r2, fp
 8023fe4:	b293      	uxth	r3, r2
 8023fe6:	b2ba      	uxth	r2, r7
 8023fe8:	920c      	str	r2, [sp, #48]	; 0x30
 8023fea:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023fec:	930a      	str	r3, [sp, #40]	; 0x28
 8023fee:	2a0b      	cmp	r2, #11
 8023ff0:	ee08 1a10 	vmov	s16, r1
 8023ff4:	f8da 3002 	ldr.w	r3, [sl, #2]
 8023ff8:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ffa:	fa1f f588 	uxth.w	r5, r8
 8023ffe:	aa0c      	add	r2, sp, #48	; 0x30
 8024000:	bf0c      	ite	eq
 8024002:	2102      	moveq	r1, #2
 8024004:	2104      	movne	r1, #4
 8024006:	4606      	mov	r6, r0
 8024008:	f10a 0009 	add.w	r0, sl, #9
 802400c:	f7f7 f8d9 	bl	801b1c2 <MobleInputStreamGetLittleEndian>
 8024010:	2200      	movs	r2, #0
 8024012:	45a9      	cmp	r9, r5
 8024014:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024016:	9213      	str	r2, [sp, #76]	; 0x4c
 8024018:	fa5f f888 	uxtb.w	r8, r8
 802401c:	9219      	str	r2, [sp, #100]	; 0x64
 802401e:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 8024022:	d003      	beq.n	802402c <MobleConfigModel_ProcessModelPublicationSet+0x6c>
 8024024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024026:	42ab      	cmp	r3, r5
 8024028:	f0c0 809e 	bcc.w	8024168 <MobleConfigModel_ProcessModelPublicationSet+0x1a8>
 802402c:	eba8 0109 	sub.w	r1, r8, r9
 8024030:	b2c9      	uxtb	r1, r1
 8024032:	4620      	mov	r0, r4
 8024034:	f7f8 f8b5 	bl	801c1a2 <MobleApplicationModelSupported>
 8024038:	2800      	cmp	r0, #0
 802403a:	f000 8097 	beq.w	802416c <MobleConfigModel_ProcessModelPublicationSet+0x1ac>
 802403e:	f3c7 020b 	ubfx	r2, r7, #0, #12
 8024042:	4610      	mov	r0, r2
 8024044:	920a      	str	r2, [sp, #40]	; 0x28
 8024046:	f7f4 ffd9 	bl	8018ffc <MoblePalCryptoHasAppKey>
 802404a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802404c:	2800      	cmp	r0, #0
 802404e:	d14e      	bne.n	80240ee <MobleConfigModel_ProcessModelPublicationSet+0x12e>
 8024050:	9412      	str	r4, [sp, #72]	; 0x48
 8024052:	2703      	movs	r7, #3
 8024054:	6830      	ldr	r0, [r6, #0]
 8024056:	f7f8 fef9 	bl	801ce4c <MobleConfigNetworkSave>
 802405a:	2c02      	cmp	r4, #2
 802405c:	d102      	bne.n	8024064 <MobleConfigModel_ProcessModelPublicationSet+0xa4>
 802405e:	4630      	mov	r0, r6
 8024060:	f7f3 fe7e 	bl	8017d60 <BnrgmHealthModelSetPublishTimer.isra.0>
 8024064:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024066:	f88d 8034 	strb.w	r8, [sp, #52]	; 0x34
 802406a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8024170 <MobleConfigModel_ProcessModelPublicationSet+0x1b0>
 802406e:	930f      	str	r3, [sp, #60]	; 0x3c
 8024070:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8024074:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 8024078:	f8d8 36f8 	ldr.w	r3, [r8, #1784]	; 0x6f8
 802407c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802407e:	9210      	str	r2, [sp, #64]	; 0x40
 8024080:	a80d      	add	r0, sp, #52	; 0x34
 8024082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024084:	940e      	str	r4, [sp, #56]	; 0x38
 8024086:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
 802408a:	4798      	blx	r3
 802408c:	f898 3a39 	ldrb.w	r3, [r8, #2617]	; 0xa39
 8024090:	f898 2a38 	ldrb.w	r2, [r8, #2616]	; 0xa38
 8024094:	3301      	adds	r3, #1
 8024096:	b2db      	uxtb	r3, r3
 8024098:	429a      	cmp	r2, r3
 802409a:	f888 3a39 	strb.w	r3, [r8, #2617]	; 0xa39
 802409e:	bf04      	itt	eq
 80240a0:	2301      	moveq	r3, #1
 80240a2:	f886 32b4 	strbeq.w	r3, [r6, #692]	; 0x2b4
 80240a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80240a8:	e9cd 4307 	strd	r4, r3, [sp, #28]
 80240ac:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 80240b0:	9306      	str	r3, [sp, #24]
 80240b2:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 80240b6:	9305      	str	r3, [sp, #20]
 80240b8:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 80240bc:	9304      	str	r3, [sp, #16]
 80240be:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
 80240c2:	9303      	str	r3, [sp, #12]
 80240c4:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80240c8:	9302      	str	r3, [sp, #8]
 80240ca:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80240ce:	9301      	str	r3, [sp, #4]
 80240d0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80240d4:	9300      	str	r3, [sp, #0]
 80240d6:	ee18 1a10 	vmov	r1, s16
 80240da:	462b      	mov	r3, r5
 80240dc:	463a      	mov	r2, r7
 80240de:	4630      	mov	r0, r6
 80240e0:	f7ff fe6e 	bl	8023dc0 <MobleConfigModel_SendModelPublicationStatus>
 80240e4:	b021      	add	sp, #132	; 0x84
 80240e6:	ecbd 8b02 	vpop	{d8}
 80240ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240ee:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80240f2:	b96f      	cbnz	r7, 8024110 <MobleConfigModel_ProcessModelPublicationSet+0x150>
 80240f4:	2c02      	cmp	r4, #2
 80240f6:	9412      	str	r4, [sp, #72]	; 0x48
 80240f8:	d104      	bne.n	8024104 <MobleConfigModel_ProcessModelPublicationSet+0x144>
 80240fa:	a912      	add	r1, sp, #72	; 0x48
 80240fc:	4628      	mov	r0, r5
 80240fe:	f7f6 fa65 	bl	801a5cc <MoblePalCrypto_UpdateHealthModelPublicationParameters>
 8024102:	e7a7      	b.n	8024054 <MobleConfigModel_ProcessModelPublicationSet+0x94>
 8024104:	aa12      	add	r2, sp, #72	; 0x48
 8024106:	4629      	mov	r1, r5
 8024108:	4658      	mov	r0, fp
 802410a:	f7f6 fa05 	bl	801a518 <MoblePalCrypto_UpdateModelPublicationParameters>
 802410e:	e7a1      	b.n	8024054 <MobleConfigModel_ProcessModelPublicationSet+0x94>
 8024110:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8024114:	f89a 1005 	ldrb.w	r1, [sl, #5]
 8024118:	f89a c006 	ldrb.w	ip, [sl, #6]
 802411c:	f89a 0007 	ldrb.w	r0, [sl, #7]
 8024120:	9412      	str	r4, [sp, #72]	; 0x48
 8024122:	f003 0e07 	and.w	lr, r3, #7
 8024126:	f3c1 1100 	ubfx	r1, r1, #4, #1
 802412a:	08db      	lsrs	r3, r3, #3
 802412c:	2c02      	cmp	r4, #2
 802412e:	f8ad 704c 	strh.w	r7, [sp, #76]	; 0x4c
 8024132:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
 8024136:	f88d 1064 	strb.w	r1, [sp, #100]	; 0x64
 802413a:	f88d c065 	strb.w	ip, [sp, #101]	; 0x65
 802413e:	f88d 0066 	strb.w	r0, [sp, #102]	; 0x66
 8024142:	f88d e067 	strb.w	lr, [sp, #103]	; 0x67
 8024146:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 802414a:	d107      	bne.n	802415c <MobleConfigModel_ProcessModelPublicationSet+0x19c>
 802414c:	45a9      	cmp	r9, r5
 802414e:	d105      	bne.n	802415c <MobleConfigModel_ProcessModelPublicationSet+0x19c>
 8024150:	a912      	add	r1, sp, #72	; 0x48
 8024152:	4628      	mov	r0, r5
 8024154:	f7f6 fa3a 	bl	801a5cc <MoblePalCrypto_UpdateHealthModelPublicationParameters>
 8024158:	2700      	movs	r7, #0
 802415a:	e77b      	b.n	8024054 <MobleConfigModel_ProcessModelPublicationSet+0x94>
 802415c:	aa12      	add	r2, sp, #72	; 0x48
 802415e:	4629      	mov	r1, r5
 8024160:	4658      	mov	r0, fp
 8024162:	f7f6 f9d9 	bl	801a518 <MoblePalCrypto_UpdateModelPublicationParameters>
 8024166:	e7f7      	b.n	8024158 <MobleConfigModel_ProcessModelPublicationSet+0x198>
 8024168:	2701      	movs	r7, #1
 802416a:	e773      	b.n	8024054 <MobleConfigModel_ProcessModelPublicationSet+0x94>
 802416c:	2702      	movs	r7, #2
 802416e:	e771      	b.n	8024054 <MobleConfigModel_ProcessModelPublicationSet+0x94>
 8024170:	20002508 	.word	0x20002508

08024174 <MobleConfigModel_ProcessModelPublicationGet>:
 8024174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024178:	b093      	sub	sp, #76	; 0x4c
 802417a:	4680      	mov	r8, r0
 802417c:	4618      	mov	r0, r3
 802417e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8024180:	f850 5b02 	ldr.w	r5, [r0], #2
 8024184:	f8df b174 	ldr.w	fp, [pc, #372]	; 80242fc <MobleConfigModel_ProcessModelPublicationGet+0x188>
 8024188:	2a04      	cmp	r2, #4
 802418a:	4689      	mov	r9, r1
 802418c:	b2af      	uxth	r7, r5
 802418e:	bf0c      	ite	eq
 8024190:	2102      	moveq	r1, #2
 8024192:	2104      	movne	r1, #4
 8024194:	aa0c      	add	r2, sp, #48	; 0x30
 8024196:	970c      	str	r7, [sp, #48]	; 0x30
 8024198:	f7f7 f813 	bl	801b1c2 <MobleInputStreamGetLittleEndian>
 802419c:	f8d8 3000 	ldr.w	r3, [r8]
 80241a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80241a2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80241a6:	7f18      	ldrb	r0, [r3, #28]
 80241a8:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80241ac:	463d      	mov	r5, r7
 80241ae:	4403      	add	r3, r0
 80241b0:	b29b      	uxth	r3, r3
 80241b2:	4632      	mov	r2, r6
 80241b4:	4629      	mov	r1, r5
 80241b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80241b8:	f7f6 fa3a 	bl	801a630 <MoblePalCrypto_GetModelPublicationParameters>
 80241bc:	4555      	cmp	r5, sl
 80241be:	b2ff      	uxtb	r7, r7
 80241c0:	4604      	mov	r4, r0
 80241c2:	d034      	beq.n	802422e <MobleConfigModel_ProcessModelPublicationGet+0xba>
 80241c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80241c6:	429d      	cmp	r5, r3
 80241c8:	d931      	bls.n	802422e <MobleConfigModel_ProcessModelPublicationGet+0xba>
 80241ca:	2300      	movs	r3, #0
 80241cc:	6043      	str	r3, [r0, #4]
 80241ce:	61c3      	str	r3, [r0, #28]
 80241d0:	f880 3020 	strb.w	r3, [r0, #32]
 80241d4:	2201      	movs	r2, #1
 80241d6:	88a3      	ldrh	r3, [r4, #4]
 80241d8:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 80241dc:	88e3      	ldrh	r3, [r4, #6]
 80241de:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80241e2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80241e6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 80241ea:	f8db 36f8 	ldr.w	r3, [fp, #1784]	; 0x6f8
 80241ee:	69e1      	ldr	r1, [r4, #28]
 80241f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80241f2:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
 80241f6:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
 80241fa:	960e      	str	r6, [sp, #56]	; 0x38
 80241fc:	9110      	str	r1, [sp, #64]	; 0x40
 80241fe:	a80d      	add	r0, sp, #52	; 0x34
 8024200:	920b      	str	r2, [sp, #44]	; 0x2c
 8024202:	4798      	blx	r3
 8024204:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024206:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024208:	e9cd 6307 	strd	r6, r3, [sp, #28]
 802420c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8024210:	9306      	str	r3, [sp, #24]
 8024212:	7fe3      	ldrb	r3, [r4, #31]
 8024214:	9305      	str	r3, [sp, #20]
 8024216:	7fa3      	ldrb	r3, [r4, #30]
 8024218:	9304      	str	r3, [sp, #16]
 802421a:	7f63      	ldrb	r3, [r4, #29]
 802421c:	9303      	str	r3, [sp, #12]
 802421e:	7f23      	ldrb	r3, [r4, #28]
 8024220:	9302      	str	r3, [sp, #8]
 8024222:	88e3      	ldrh	r3, [r4, #6]
 8024224:	9301      	str	r3, [sp, #4]
 8024226:	88a3      	ldrh	r3, [r4, #4]
 8024228:	9300      	str	r3, [sp, #0]
 802422a:	462b      	mov	r3, r5
 802422c:	e05a      	b.n	80242e4 <MobleConfigModel_ProcessModelPublicationGet+0x170>
 802422e:	eba7 010a 	sub.w	r1, r7, sl
 8024232:	88e2      	ldrh	r2, [r4, #6]
 8024234:	920b      	str	r2, [sp, #44]	; 0x2c
 8024236:	b2c9      	uxtb	r1, r1
 8024238:	4630      	mov	r0, r6
 802423a:	f7f7 ffb2 	bl	801c1a2 <MobleApplicationModelSupported>
 802423e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024240:	b928      	cbnz	r0, 802424e <MobleConfigModel_ProcessModelPublicationGet+0xda>
 8024242:	6060      	str	r0, [r4, #4]
 8024244:	61e0      	str	r0, [r4, #28]
 8024246:	f884 0020 	strb.w	r0, [r4, #32]
 802424a:	2202      	movs	r2, #2
 802424c:	e7c3      	b.n	80241d6 <MobleConfigModel_ProcessModelPublicationGet+0x62>
 802424e:	4629      	mov	r1, r5
 8024250:	4630      	mov	r0, r6
 8024252:	f7f5 ff7d 	bl	801a150 <MoblePalCryptoHasAppKeyBind>
 8024256:	4602      	mov	r2, r0
 8024258:	b908      	cbnz	r0, 802425e <MobleConfigModel_ProcessModelPublicationGet+0xea>
 802425a:	80a0      	strh	r0, [r4, #4]
 802425c:	e7bb      	b.n	80241d6 <MobleConfigModel_ProcessModelPublicationGet+0x62>
 802425e:	2e02      	cmp	r6, #2
 8024260:	d147      	bne.n	80242f2 <MobleConfigModel_ProcessModelPublicationGet+0x17e>
 8024262:	4555      	cmp	r5, sl
 8024264:	d145      	bne.n	80242f2 <MobleConfigModel_ProcessModelPublicationGet+0x17e>
 8024266:	4c24      	ldr	r4, [pc, #144]	; (80242f8 <MobleConfigModel_ProcessModelPublicationGet+0x184>)
 8024268:	f8db 36f8 	ldr.w	r3, [fp, #1784]	; 0x6f8
 802426c:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
 8024270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8024272:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 8024276:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 802427a:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
 802427e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8024282:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
 8024286:	960e      	str	r6, [sp, #56]	; 0x38
 8024288:	ba5b      	rev16	r3, r3
 802428a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 802428e:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
 8024292:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 8024296:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 802429a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 802429e:	2700      	movs	r7, #0
 80242a0:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 80242a4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 80242a8:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
 80242ac:	a80d      	add	r0, sp, #52	; 0x34
 80242ae:	4790      	blx	r2
 80242b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80242b2:	e9cd 6307 	strd	r6, r3, [sp, #28]
 80242b6:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 80242ba:	9306      	str	r3, [sp, #24]
 80242bc:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80242c0:	9305      	str	r3, [sp, #20]
 80242c2:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 80242c6:	9304      	str	r3, [sp, #16]
 80242c8:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
 80242cc:	9303      	str	r3, [sp, #12]
 80242ce:	f894 310f 	ldrb.w	r3, [r4, #271]	; 0x10f
 80242d2:	9302      	str	r3, [sp, #8]
 80242d4:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
 80242d8:	9301      	str	r3, [sp, #4]
 80242da:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 80242de:	9300      	str	r3, [sp, #0]
 80242e0:	463a      	mov	r2, r7
 80242e2:	462b      	mov	r3, r5
 80242e4:	4649      	mov	r1, r9
 80242e6:	4640      	mov	r0, r8
 80242e8:	f7ff fd6a 	bl	8023dc0 <MobleConfigModel_SendModelPublicationStatus>
 80242ec:	b013      	add	sp, #76	; 0x4c
 80242ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242f2:	2200      	movs	r2, #0
 80242f4:	e76f      	b.n	80241d6 <MobleConfigModel_ProcessModelPublicationGet+0x62>
 80242f6:	bf00      	nop
 80242f8:	20000318 	.word	0x20000318
 80242fc:	20002508 	.word	0x20002508

08024300 <MobleConfigModel_SendAppStatus>:
 8024300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024304:	460e      	mov	r6, r1
 8024306:	e9dd 7407 	ldrd	r7, r4, [sp, #28]
 802430a:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 802430e:	4619      	mov	r1, r3
 8024310:	4605      	mov	r5, r0
 8024312:	b930      	cbnz	r0, 8024322 <MobleConfigModel_SendAppStatus+0x22>
 8024314:	4b18      	ldr	r3, [pc, #96]	; (8024378 <MobleConfigModel_SendAppStatus+0x78>)
 8024316:	4a19      	ldr	r2, [pc, #100]	; (802437c <MobleConfigModel_SendAppStatus+0x7c>)
 8024318:	4819      	ldr	r0, [pc, #100]	; (8024380 <MobleConfigModel_SendAppStatus+0x80>)
 802431a:	f640 0172 	movw	r1, #2162	; 0x872
 802431e:	f004 fbbd 	bl	8028a9c <__assert_func>
 8024322:	203e      	movs	r0, #62	; 0x3e
 8024324:	2300      	movs	r3, #0
 8024326:	7020      	strb	r0, [r4, #0]
 8024328:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 802432c:	70a3      	strb	r3, [r4, #2]
 802432e:	70e3      	strb	r3, [r4, #3]
 8024330:	7060      	strb	r0, [r4, #1]
 8024332:	7222      	strb	r2, [r4, #8]
 8024334:	f104 0009 	add.w	r0, r4, #9
 8024338:	2202      	movs	r2, #2
 802433a:	f7f7 fcbd 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 802433e:	4641      	mov	r1, r8
 8024340:	f104 000b 	add.w	r0, r4, #11
 8024344:	f7f7 fcb8 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8024348:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 802434c:	bf28      	it	cs
 802434e:	2204      	movcs	r2, #4
 8024350:	4639      	mov	r1, r7
 8024352:	f104 000d 	add.w	r0, r4, #13
 8024356:	f7f7 fcaf 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 802435a:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 802435e:	bf2c      	ite	cs
 8024360:	2309      	movcs	r3, #9
 8024362:	2307      	movcc	r3, #7
 8024364:	f8c4 30a3 	str.w	r3, [r4, #163]	; 0xa3
 8024368:	4632      	mov	r2, r6
 802436a:	4623      	mov	r3, r4
 802436c:	4628      	mov	r0, r5
 802436e:	2101      	movs	r1, #1
 8024370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024374:	f7fe bb9e 	b.w	8022ab4 <MobleModelSendPacket>
 8024378:	08033489 	.word	0x08033489
 802437c:	08032388 	.word	0x08032388
 8024380:	0803349b 	.word	0x0803349b

08024384 <MobleConfigModel_ProcessAppUnbind>:
 8024384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024388:	468a      	mov	sl, r1
 802438a:	b089      	sub	sp, #36	; 0x24
 802438c:	4605      	mov	r5, r0
 802438e:	b930      	cbnz	r0, 802439e <MobleConfigModel_ProcessAppUnbind+0x1a>
 8024390:	4b3a      	ldr	r3, [pc, #232]	; (802447c <MobleConfigModel_ProcessAppUnbind+0xf8>)
 8024392:	4a3b      	ldr	r2, [pc, #236]	; (8024480 <MobleConfigModel_ProcessAppUnbind+0xfc>)
 8024394:	f241 01e2 	movw	r1, #4322	; 0x10e2
 8024398:	483a      	ldr	r0, [pc, #232]	; (8024484 <MobleConfigModel_ProcessAppUnbind+0x100>)
 802439a:	f004 fb7f 	bl	8028a9c <__assert_func>
 802439e:	6802      	ldr	r2, [r0, #0]
 80243a0:	b922      	cbnz	r2, 80243ac <MobleConfigModel_ProcessAppUnbind+0x28>
 80243a2:	4b39      	ldr	r3, [pc, #228]	; (8024488 <MobleConfigModel_ProcessAppUnbind+0x104>)
 80243a4:	4a36      	ldr	r2, [pc, #216]	; (8024480 <MobleConfigModel_ProcessAppUnbind+0xfc>)
 80243a6:	f241 01e3 	movw	r1, #4323	; 0x10e3
 80243aa:	e7f5      	b.n	8024398 <MobleConfigModel_ProcessAppUnbind+0x14>
 80243ac:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 80243b0:	7f14      	ldrb	r4, [r2, #28]
 80243b2:	f8d3 6002 	ldr.w	r6, [r3, #2]
 80243b6:	681f      	ldr	r7, [r3, #0]
 80243b8:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80243bc:	4414      	add	r4, r2
 80243be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80243c0:	b2b1      	uxth	r1, r6
 80243c2:	2a06      	cmp	r2, #6
 80243c4:	9104      	str	r1, [sp, #16]
 80243c6:	fa1f f887 	uxth.w	r8, r7
 80243ca:	460e      	mov	r6, r1
 80243cc:	aa04      	add	r2, sp, #16
 80243ce:	bf0c      	ite	eq
 80243d0:	2102      	moveq	r1, #2
 80243d2:	2104      	movne	r1, #4
 80243d4:	1d18      	adds	r0, r3, #4
 80243d6:	f7f6 fef4 	bl	801b1c2 <MobleInputStreamGetLittleEndian>
 80243da:	eba7 070b 	sub.w	r7, r7, fp
 80243de:	45d8      	cmp	r8, fp
 80243e0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80243e4:	b2a4      	uxth	r4, r4
 80243e6:	f007 07ff 	and.w	r7, r7, #255	; 0xff
 80243ea:	d001      	beq.n	80243f0 <MobleConfigModel_ProcessAppUnbind+0x6c>
 80243ec:	45a0      	cmp	r8, r4
 80243ee:	d840      	bhi.n	8024472 <MobleConfigModel_ProcessAppUnbind+0xee>
 80243f0:	4639      	mov	r1, r7
 80243f2:	4648      	mov	r0, r9
 80243f4:	f7f7 fed5 	bl	801c1a2 <MobleApplicationModelSupported>
 80243f8:	2800      	cmp	r0, #0
 80243fa:	d03c      	beq.n	8024476 <MobleConfigModel_ProcessAppUnbind+0xf2>
 80243fc:	f1b9 0f02 	cmp.w	r9, #2
 8024400:	d12d      	bne.n	802445e <MobleConfigModel_ProcessAppUnbind+0xda>
 8024402:	45d8      	cmp	r8, fp
 8024404:	d12b      	bne.n	802445e <MobleConfigModel_ProcessAppUnbind+0xda>
 8024406:	4633      	mov	r3, r6
 8024408:	464a      	mov	r2, r9
 802440a:	4641      	mov	r1, r8
 802440c:	4628      	mov	r0, r5
 802440e:	f7fd fbb9 	bl	8021b84 <MobleConfigHealthModelAppUnBind>
 8024412:	4604      	mov	r4, r0
 8024414:	b918      	cbnz	r0, 802441e <MobleConfigModel_ProcessAppUnbind+0x9a>
 8024416:	6828      	ldr	r0, [r5, #0]
 8024418:	f7f8 fd18 	bl	801ce4c <MobleConfigNetworkSave>
 802441c:	e002      	b.n	8024424 <MobleConfigModel_ProcessAppUnbind+0xa0>
 802441e:	2c03      	cmp	r4, #3
 8024420:	d11b      	bne.n	802445a <MobleConfigModel_ProcessAppUnbind+0xd6>
 8024422:	2403      	movs	r4, #3
 8024424:	4b19      	ldr	r3, [pc, #100]	; (802448c <MobleConfigModel_ProcessAppUnbind+0x108>)
 8024426:	f88d 7014 	strb.w	r7, [sp, #20]
 802442a:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 802442e:	f8ad 6016 	strh.w	r6, [sp, #22]
 8024432:	a805      	add	r0, sp, #20
 8024434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024436:	f8cd 9018 	str.w	r9, [sp, #24]
 802443a:	f88d 401c 	strb.w	r4, [sp, #28]
 802443e:	4798      	blx	r3
 8024440:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024442:	9600      	str	r6, [sp, #0]
 8024444:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8024448:	4622      	mov	r2, r4
 802444a:	4643      	mov	r3, r8
 802444c:	4651      	mov	r1, sl
 802444e:	4628      	mov	r0, r5
 8024450:	f7ff ff56 	bl	8024300 <MobleConfigModel_SendAppStatus>
 8024454:	b009      	add	sp, #36	; 0x24
 8024456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802445a:	2405      	movs	r4, #5
 802445c:	e7e2      	b.n	8024424 <MobleConfigModel_ProcessAppUnbind+0xa0>
 802445e:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 8024462:	d2de      	bcs.n	8024422 <MobleConfigModel_ProcessAppUnbind+0x9e>
 8024464:	4633      	mov	r3, r6
 8024466:	464a      	mov	r2, r9
 8024468:	4641      	mov	r1, r8
 802446a:	4628      	mov	r0, r5
 802446c:	f7fd fae2 	bl	8021a34 <MobleConfigModelAppUnBind>
 8024470:	e7cf      	b.n	8024412 <MobleConfigModel_ProcessAppUnbind+0x8e>
 8024472:	2401      	movs	r4, #1
 8024474:	e7d6      	b.n	8024424 <MobleConfigModel_ProcessAppUnbind+0xa0>
 8024476:	2402      	movs	r4, #2
 8024478:	e7d4      	b.n	8024424 <MobleConfigModel_ProcessAppUnbind+0xa0>
 802447a:	bf00      	nop
 802447c:	08033a09 	.word	0x08033a09
 8024480:	080323a7 	.word	0x080323a7
 8024484:	0803349b 	.word	0x0803349b
 8024488:	08033964 	.word	0x08033964
 802448c:	20002508 	.word	0x20002508

08024490 <MobleConfigModel_ProcessAppBind>:
 8024490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024494:	468a      	mov	sl, r1
 8024496:	b089      	sub	sp, #36	; 0x24
 8024498:	4605      	mov	r5, r0
 802449a:	b930      	cbnz	r0, 80244aa <MobleConfigModel_ProcessAppBind+0x1a>
 802449c:	4b3b      	ldr	r3, [pc, #236]	; (802458c <MobleConfigModel_ProcessAppBind+0xfc>)
 802449e:	4a3c      	ldr	r2, [pc, #240]	; (8024590 <MobleConfigModel_ProcessAppBind+0x100>)
 80244a0:	f241 0146 	movw	r1, #4166	; 0x1046
 80244a4:	483b      	ldr	r0, [pc, #236]	; (8024594 <MobleConfigModel_ProcessAppBind+0x104>)
 80244a6:	f004 faf9 	bl	8028a9c <__assert_func>
 80244aa:	6802      	ldr	r2, [r0, #0]
 80244ac:	b922      	cbnz	r2, 80244b8 <MobleConfigModel_ProcessAppBind+0x28>
 80244ae:	4b3a      	ldr	r3, [pc, #232]	; (8024598 <MobleConfigModel_ProcessAppBind+0x108>)
 80244b0:	4a37      	ldr	r2, [pc, #220]	; (8024590 <MobleConfigModel_ProcessAppBind+0x100>)
 80244b2:	f241 0147 	movw	r1, #4167	; 0x1047
 80244b6:	e7f5      	b.n	80244a4 <MobleConfigModel_ProcessAppBind+0x14>
 80244b8:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 80244bc:	7f14      	ldrb	r4, [r2, #28]
 80244be:	f8d3 6002 	ldr.w	r6, [r3, #2]
 80244c2:	f8d3 8000 	ldr.w	r8, [r3]
 80244c6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80244ca:	4414      	add	r4, r2
 80244cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80244ce:	b2b1      	uxth	r1, r6
 80244d0:	2a06      	cmp	r2, #6
 80244d2:	9104      	str	r1, [sp, #16]
 80244d4:	fa1f f988 	uxth.w	r9, r8
 80244d8:	460e      	mov	r6, r1
 80244da:	aa04      	add	r2, sp, #16
 80244dc:	bf0c      	ite	eq
 80244de:	2102      	moveq	r1, #2
 80244e0:	2104      	movne	r1, #4
 80244e2:	1d18      	adds	r0, r3, #4
 80244e4:	f7f6 fe6d 	bl	801b1c2 <MobleInputStreamGetLittleEndian>
 80244e8:	eba8 080b 	sub.w	r8, r8, fp
 80244ec:	45d9      	cmp	r9, fp
 80244ee:	9f04      	ldr	r7, [sp, #16]
 80244f0:	b2a4      	uxth	r4, r4
 80244f2:	f008 08ff 	and.w	r8, r8, #255	; 0xff
 80244f6:	d001      	beq.n	80244fc <MobleConfigModel_ProcessAppBind+0x6c>
 80244f8:	45a1      	cmp	r9, r4
 80244fa:	d840      	bhi.n	802457e <MobleConfigModel_ProcessAppBind+0xee>
 80244fc:	4641      	mov	r1, r8
 80244fe:	4638      	mov	r0, r7
 8024500:	f7f7 fe4f 	bl	801c1a2 <MobleApplicationModelSupported>
 8024504:	2800      	cmp	r0, #0
 8024506:	d03c      	beq.n	8024582 <MobleConfigModel_ProcessAppBind+0xf2>
 8024508:	2f00      	cmp	r7, #0
 802450a:	d03c      	beq.n	8024586 <MobleConfigModel_ProcessAppBind+0xf6>
 802450c:	2f02      	cmp	r7, #2
 802450e:	d12c      	bne.n	802456a <MobleConfigModel_ProcessAppBind+0xda>
 8024510:	45d9      	cmp	r9, fp
 8024512:	d12a      	bne.n	802456a <MobleConfigModel_ProcessAppBind+0xda>
 8024514:	4633      	mov	r3, r6
 8024516:	463a      	mov	r2, r7
 8024518:	4649      	mov	r1, r9
 802451a:	4628      	mov	r0, r5
 802451c:	f7fd faf8 	bl	8021b10 <MobleConfigHealthModelAppBind>
 8024520:	4604      	mov	r4, r0
 8024522:	b918      	cbnz	r0, 802452c <MobleConfigModel_ProcessAppBind+0x9c>
 8024524:	6828      	ldr	r0, [r5, #0]
 8024526:	f7f8 fc91 	bl	801ce4c <MobleConfigNetworkSave>
 802452a:	e002      	b.n	8024532 <MobleConfigModel_ProcessAppBind+0xa2>
 802452c:	2c03      	cmp	r4, #3
 802452e:	d11a      	bne.n	8024566 <MobleConfigModel_ProcessAppBind+0xd6>
 8024530:	2403      	movs	r4, #3
 8024532:	4b1a      	ldr	r3, [pc, #104]	; (802459c <MobleConfigModel_ProcessAppBind+0x10c>)
 8024534:	f88d 8014 	strb.w	r8, [sp, #20]
 8024538:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 802453c:	f8ad 6016 	strh.w	r6, [sp, #22]
 8024540:	a805      	add	r0, sp, #20
 8024542:	6a1b      	ldr	r3, [r3, #32]
 8024544:	9706      	str	r7, [sp, #24]
 8024546:	f88d 401c 	strb.w	r4, [sp, #28]
 802454a:	4798      	blx	r3
 802454c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802454e:	9600      	str	r6, [sp, #0]
 8024550:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8024554:	4622      	mov	r2, r4
 8024556:	464b      	mov	r3, r9
 8024558:	4651      	mov	r1, sl
 802455a:	4628      	mov	r0, r5
 802455c:	f7ff fed0 	bl	8024300 <MobleConfigModel_SendAppStatus>
 8024560:	b009      	add	sp, #36	; 0x24
 8024562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024566:	2405      	movs	r4, #5
 8024568:	e7e3      	b.n	8024532 <MobleConfigModel_ProcessAppBind+0xa2>
 802456a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 802456e:	d2df      	bcs.n	8024530 <MobleConfigModel_ProcessAppBind+0xa0>
 8024570:	4633      	mov	r3, r6
 8024572:	463a      	mov	r2, r7
 8024574:	4649      	mov	r1, r9
 8024576:	4628      	mov	r0, r5
 8024578:	f7fd f9f2 	bl	8021960 <MobleConfigModelAppBind>
 802457c:	e7d0      	b.n	8024520 <MobleConfigModel_ProcessAppBind+0x90>
 802457e:	2401      	movs	r4, #1
 8024580:	e7d7      	b.n	8024532 <MobleConfigModel_ProcessAppBind+0xa2>
 8024582:	2402      	movs	r4, #2
 8024584:	e7d5      	b.n	8024532 <MobleConfigModel_ProcessAppBind+0xa2>
 8024586:	240d      	movs	r4, #13
 8024588:	e7d3      	b.n	8024532 <MobleConfigModel_ProcessAppBind+0xa2>
 802458a:	bf00      	nop
 802458c:	08033a09 	.word	0x08033a09
 8024590:	080323c9 	.word	0x080323c9
 8024594:	0803349b 	.word	0x0803349b
 8024598:	08033964 	.word	0x08033964
 802459c:	20002508 	.word	0x20002508

080245a0 <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet>:
 80245a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80245a4:	f8d3 9000 	ldr.w	r9, [r3]
 80245a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80245aa:	fa0f f389 	sxth.w	r3, r9
 80245ae:	2b00      	cmp	r3, #0
 80245b0:	4606      	mov	r6, r0
 80245b2:	4688      	mov	r8, r1
 80245b4:	dd31      	ble.n	802461a <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet+0x7a>
 80245b6:	6803      	ldr	r3, [r0, #0]
 80245b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80245ba:	7c9b      	ldrb	r3, [r3, #18]
 80245bc:	2b02      	cmp	r3, #2
 80245be:	d02a      	beq.n	8024616 <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet+0x76>
 80245c0:	fa1f f089 	uxth.w	r0, r9
 80245c4:	f7f9 fdee 	bl	801e1a4 <BnrgmFrndMgmtGetLpnPollTimeout>
 80245c8:	4607      	mov	r7, r0
 80245ca:	232e      	movs	r3, #46	; 0x2e
 80245cc:	2500      	movs	r5, #0
 80245ce:	7023      	strb	r3, [r4, #0]
 80245d0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80245d4:	7063      	strb	r3, [r4, #1]
 80245d6:	fa1f f189 	uxth.w	r1, r9
 80245da:	70a5      	strb	r5, [r4, #2]
 80245dc:	70e5      	strb	r5, [r4, #3]
 80245de:	2202      	movs	r2, #2
 80245e0:	f104 0008 	add.w	r0, r4, #8
 80245e4:	f7f7 fb68 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 80245e8:	4639      	mov	r1, r7
 80245ea:	2203      	movs	r2, #3
 80245ec:	f104 000a 	add.w	r0, r4, #10
 80245f0:	f7f7 fb62 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 80245f4:	2305      	movs	r3, #5
 80245f6:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 80245fa:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 80245fe:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
 8024602:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 8024606:	4623      	mov	r3, r4
 8024608:	4642      	mov	r2, r8
 802460a:	4630      	mov	r0, r6
 802460c:	2101      	movs	r1, #1
 802460e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024612:	f7fe ba4f 	b.w	8022ab4 <MobleModelSendPacket>
 8024616:	2700      	movs	r7, #0
 8024618:	e7d7      	b.n	80245ca <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet+0x2a>
 802461a:	2002      	movs	r0, #2
 802461c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08024620 <MobleConfigModel_ProcessKeyRefreshPhaseSet>:
 8024620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8024624:	f893 9002 	ldrb.w	r9, [r3, #2]
 8024628:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802462a:	f1b9 0f03 	cmp.w	r9, #3
 802462e:	4606      	mov	r6, r0
 8024630:	460f      	mov	r7, r1
 8024632:	4618      	mov	r0, r3
 8024634:	d903      	bls.n	802463e <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x1e>
 8024636:	2002      	movs	r0, #2
 8024638:	b003      	add	sp, #12
 802463a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802463e:	f7f3 f932 	bl	80178a6 <MobleConfigModelGetNetIdx>
 8024642:	4680      	mov	r8, r0
 8024644:	f7f6 f838 	bl	801a6b8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8024648:	1e05      	subs	r5, r0, #0
 802464a:	db2f      	blt.n	80246ac <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x8c>
 802464c:	b2e9      	uxtb	r1, r5
 802464e:	4648      	mov	r0, r9
 8024650:	f7fd f836 	bl	80216c0 <ModelConfigUpdateKRState>
 8024654:	2802      	cmp	r0, #2
 8024656:	d0ee      	beq.n	8024636 <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x16>
 8024658:	2300      	movs	r3, #0
 802465a:	6832      	ldr	r2, [r6, #0]
 802465c:	f8ad 8006 	strh.w	r8, [sp, #6]
 8024660:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8024662:	4405      	add	r5, r0
 8024664:	2217      	movs	r2, #23
 8024666:	f895 9014 	ldrb.w	r9, [r5, #20]
 802466a:	7022      	strb	r2, [r4, #0]
 802466c:	2500      	movs	r5, #0
 802466e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8024672:	7062      	strb	r2, [r4, #1]
 8024674:	7223      	strb	r3, [r4, #8]
 8024676:	f104 0209 	add.w	r2, r4, #9
 802467a:	f10d 0306 	add.w	r3, sp, #6
 802467e:	70a5      	strb	r5, [r4, #2]
 8024680:	70e5      	strb	r5, [r4, #3]
 8024682:	2101      	movs	r1, #1
 8024684:	4628      	mov	r0, r5
 8024686:	f7f3 f915 	bl	80178b4 <MobleConfigModelPutKeyIdxs>
 802468a:	2304      	movs	r3, #4
 802468c:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8024690:	f884 900b 	strb.w	r9, [r4, #11]
 8024694:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 8024698:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
 802469c:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 80246a0:	4623      	mov	r3, r4
 80246a2:	463a      	mov	r2, r7
 80246a4:	4630      	mov	r0, r6
 80246a6:	f7fe fa05 	bl	8022ab4 <MobleModelSendPacket>
 80246aa:	e7c5      	b.n	8024638 <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x18>
 80246ac:	230f      	movs	r3, #15
 80246ae:	e7d4      	b.n	802465a <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x3a>

080246b0 <MobleConfigModel_ProcessGattProxyGet>:
 80246b0:	b430      	push	{r4, r5}
 80246b2:	460a      	mov	r2, r1
 80246b4:	6801      	ldr	r1, [r0, #0]
 80246b6:	9b03      	ldr	r3, [sp, #12]
 80246b8:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80246ba:	2514      	movs	r5, #20
 80246bc:	7c09      	ldrb	r1, [r1, #16]
 80246be:	7219      	strb	r1, [r3, #8]
 80246c0:	2400      	movs	r4, #0
 80246c2:	701d      	strb	r5, [r3, #0]
 80246c4:	2101      	movs	r1, #1
 80246c6:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 80246ca:	705d      	strb	r5, [r3, #1]
 80246cc:	709c      	strb	r4, [r3, #2]
 80246ce:	70dc      	strb	r4, [r3, #3]
 80246d0:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 80246d4:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 80246d8:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 80246dc:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 80246e0:	bc30      	pop	{r4, r5}
 80246e2:	f7fe b9e7 	b.w	8022ab4 <MobleModelSendPacket>

080246e6 <MobleConfigModel_ProcessFriendGet>:
 80246e6:	b430      	push	{r4, r5}
 80246e8:	460a      	mov	r2, r1
 80246ea:	6801      	ldr	r1, [r0, #0]
 80246ec:	9b03      	ldr	r3, [sp, #12]
 80246ee:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80246f0:	2511      	movs	r5, #17
 80246f2:	7c89      	ldrb	r1, [r1, #18]
 80246f4:	7219      	strb	r1, [r3, #8]
 80246f6:	2400      	movs	r4, #0
 80246f8:	701d      	strb	r5, [r3, #0]
 80246fa:	2101      	movs	r1, #1
 80246fc:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 8024700:	705d      	strb	r5, [r3, #1]
 8024702:	709c      	strb	r4, [r3, #2]
 8024704:	70dc      	strb	r4, [r3, #3]
 8024706:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 802470a:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 802470e:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 8024712:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 8024716:	bc30      	pop	{r4, r5}
 8024718:	f7fe b9cc 	b.w	8022ab4 <MobleModelSendPacket>

0802471c <MobleConfigModel_ProcessDefaultTTLSet>:
 802471c:	b430      	push	{r4, r5}
 802471e:	461d      	mov	r5, r3
 8024720:	460a      	mov	r2, r1
 8024722:	7829      	ldrb	r1, [r5, #0]
 8024724:	f995 5000 	ldrsb.w	r5, [r5]
 8024728:	9b03      	ldr	r3, [sp, #12]
 802472a:	2d00      	cmp	r5, #0
 802472c:	db19      	blt.n	8024762 <MobleConfigModel_ProcessDefaultTTLSet+0x46>
 802472e:	2901      	cmp	r1, #1
 8024730:	d017      	beq.n	8024762 <MobleConfigModel_ProcessDefaultTTLSet+0x46>
 8024732:	6804      	ldr	r4, [r0, #0]
 8024734:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8024736:	250e      	movs	r5, #14
 8024738:	7261      	strb	r1, [r4, #9]
 802473a:	2400      	movs	r4, #0
 802473c:	701d      	strb	r5, [r3, #0]
 802473e:	7219      	strb	r1, [r3, #8]
 8024740:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 8024744:	2101      	movs	r1, #1
 8024746:	705d      	strb	r5, [r3, #1]
 8024748:	709c      	strb	r4, [r3, #2]
 802474a:	70dc      	strb	r4, [r3, #3]
 802474c:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 8024750:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 8024754:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 8024758:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 802475c:	bc30      	pop	{r4, r5}
 802475e:	f7fe b9a9 	b.w	8022ab4 <MobleModelSendPacket>
 8024762:	2002      	movs	r0, #2
 8024764:	bc30      	pop	{r4, r5}
 8024766:	4770      	bx	lr

08024768 <MobleConfigModel_ProcessBeaconSet>:
 8024768:	b570      	push	{r4, r5, r6, lr}
 802476a:	460a      	mov	r2, r1
 802476c:	9c05      	ldr	r4, [sp, #20]
 802476e:	7819      	ldrb	r1, [r3, #0]
 8024770:	b930      	cbnz	r0, 8024780 <MobleConfigModel_ProcessBeaconSet+0x18>
 8024772:	4b12      	ldr	r3, [pc, #72]	; (80247bc <MobleConfigModel_ProcessBeaconSet+0x54>)
 8024774:	4a12      	ldr	r2, [pc, #72]	; (80247c0 <MobleConfigModel_ProcessBeaconSet+0x58>)
 8024776:	4813      	ldr	r0, [pc, #76]	; (80247c4 <MobleConfigModel_ProcessBeaconSet+0x5c>)
 8024778:	f640 4135 	movw	r1, #3125	; 0xc35
 802477c:	f004 f98e 	bl	8028a9c <__assert_func>
 8024780:	2901      	cmp	r1, #1
 8024782:	d819      	bhi.n	80247b8 <MobleConfigModel_ProcessBeaconSet+0x50>
 8024784:	4b10      	ldr	r3, [pc, #64]	; (80247c8 <MobleConfigModel_ProcessBeaconSet+0x60>)
 8024786:	250b      	movs	r5, #11
 8024788:	f883 10ba 	strb.w	r1, [r3, #186]	; 0xba
 802478c:	2300      	movs	r3, #0
 802478e:	7025      	strb	r5, [r4, #0]
 8024790:	7221      	strb	r1, [r4, #8]
 8024792:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 8024796:	2101      	movs	r1, #1
 8024798:	70a3      	strb	r3, [r4, #2]
 802479a:	70e3      	strb	r3, [r4, #3]
 802479c:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 80247a0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80247a4:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80247a8:	7065      	strb	r5, [r4, #1]
 80247aa:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
 80247ae:	4623      	mov	r3, r4
 80247b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80247b4:	f7fe b97e 	b.w	8022ab4 <MobleModelSendPacket>
 80247b8:	2002      	movs	r0, #2
 80247ba:	bd70      	pop	{r4, r5, r6, pc}
 80247bc:	08033a09 	.word	0x08033a09
 80247c0:	080323e9 	.word	0x080323e9
 80247c4:	0803349b 	.word	0x0803349b
 80247c8:	20000318 	.word	0x20000318

080247cc <MobleConfigModel_SendAppKeyStatus>:
 80247cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80247ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80247d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80247d4:	460f      	mov	r7, r1
 80247d6:	4606      	mov	r6, r0
 80247d8:	b930      	cbnz	r0, 80247e8 <MobleConfigModel_SendAppKeyStatus+0x1c>
 80247da:	4b16      	ldr	r3, [pc, #88]	; (8024834 <MobleConfigModel_SendAppKeyStatus+0x68>)
 80247dc:	4a16      	ldr	r2, [pc, #88]	; (8024838 <MobleConfigModel_SendAppKeyStatus+0x6c>)
 80247de:	4817      	ldr	r0, [pc, #92]	; (802483c <MobleConfigModel_SendAppKeyStatus+0x70>)
 80247e0:	f240 7145 	movw	r1, #1861	; 0x745
 80247e4:	f004 f95a 	bl	8028a9c <__assert_func>
 80247e8:	2303      	movs	r3, #3
 80247ea:	2500      	movs	r5, #0
 80247ec:	7023      	strb	r3, [r4, #0]
 80247ee:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80247f2:	2101      	movs	r1, #1
 80247f4:	7063      	strb	r3, [r4, #1]
 80247f6:	7222      	strb	r2, [r4, #8]
 80247f8:	f10d 0306 	add.w	r3, sp, #6
 80247fc:	f104 0209 	add.w	r2, r4, #9
 8024800:	70a5      	strb	r5, [r4, #2]
 8024802:	70e5      	strb	r5, [r4, #3]
 8024804:	4628      	mov	r0, r5
 8024806:	f7f3 f855 	bl	80178b4 <MobleConfigModelPutKeyIdxs>
 802480a:	ab08      	add	r3, sp, #32
 802480c:	4608      	mov	r0, r1
 802480e:	f7f3 f851 	bl	80178b4 <MobleConfigModelPutKeyIdxs>
 8024812:	2304      	movs	r3, #4
 8024814:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8024818:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 802481c:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
 8024820:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 8024824:	4623      	mov	r3, r4
 8024826:	463a      	mov	r2, r7
 8024828:	4630      	mov	r0, r6
 802482a:	f7fe f943 	bl	8022ab4 <MobleModelSendPacket>
 802482e:	b003      	add	sp, #12
 8024830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024832:	bf00      	nop
 8024834:	08033489 	.word	0x08033489
 8024838:	0803240b 	.word	0x0803240b
 802483c:	0803349b 	.word	0x0803349b

08024840 <MobleConfigModel_ProcessAppKeyUpdate>:
 8024840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024844:	461d      	mov	r5, r3
 8024846:	b08b      	sub	sp, #44	; 0x2c
 8024848:	4680      	mov	r8, r0
 802484a:	4618      	mov	r0, r3
 802484c:	f7f3 f82b 	bl	80178a6 <MobleConfigModelGetNetIdx>
 8024850:	78af      	ldrb	r7, [r5, #2]
 8024852:	786b      	ldrb	r3, [r5, #1]
 8024854:	013f      	lsls	r7, r7, #4
 8024856:	eb07 1713 	add.w	r7, r7, r3, lsr #4
 802485a:	4606      	mov	r6, r0
 802485c:	f7f5 ff2c 	bl	801a6b8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8024860:	aa02      	add	r2, sp, #8
 8024862:	f1b0 0b00 	subs.w	fp, r0, #0
 8024866:	f105 0303 	add.w	r3, r5, #3
 802486a:	4689      	mov	r9, r1
 802486c:	bfac      	ite	ge
 802486e:	2400      	movge	r4, #0
 8024870:	2404      	movlt	r4, #4
 8024872:	3513      	adds	r5, #19
 8024874:	4692      	mov	sl, r2
 8024876:	6818      	ldr	r0, [r3, #0]
 8024878:	6859      	ldr	r1, [r3, #4]
 802487a:	4694      	mov	ip, r2
 802487c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8024880:	3308      	adds	r3, #8
 8024882:	42ab      	cmp	r3, r5
 8024884:	4662      	mov	r2, ip
 8024886:	d1f6      	bne.n	8024876 <MobleConfigModel_ProcessAppKeyUpdate+0x36>
 8024888:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 802488c:	d302      	bcc.n	8024894 <MobleConfigModel_ProcessAppKeyUpdate+0x54>
 802488e:	2c00      	cmp	r4, #0
 8024890:	bf08      	it	eq
 8024892:	2404      	moveq	r4, #4
 8024894:	4630      	mov	r0, r6
 8024896:	f7f4 fb97 	bl	8018fc8 <MoblePalCryptoHasNetworkKey>
 802489a:	4320      	orrs	r0, r4
 802489c:	b2c3      	uxtb	r3, r0
 802489e:	4827      	ldr	r0, [pc, #156]	; (802493c <MobleConfigModel_ProcessAppKeyUpdate+0xfc>)
 80248a0:	4483      	add	fp, r0
 80248a2:	2b00      	cmp	r3, #0
 80248a4:	f89b 30c0 	ldrb.w	r3, [fp, #192]	; 0xc0
 80248a8:	bf08      	it	eq
 80248aa:	2404      	moveq	r4, #4
 80248ac:	2b01      	cmp	r3, #1
 80248ae:	d002      	beq.n	80248b6 <MobleConfigModel_ProcessAppKeyUpdate+0x76>
 80248b0:	2c00      	cmp	r4, #0
 80248b2:	bf08      	it	eq
 80248b4:	240b      	moveq	r4, #11
 80248b6:	4638      	mov	r0, r7
 80248b8:	f7f4 fba0 	bl	8018ffc <MoblePalCryptoHasAppKey>
 80248bc:	bb00      	cbnz	r0, 8024900 <MobleConfigModel_ProcessAppKeyUpdate+0xc0>
 80248be:	2c00      	cmp	r4, #0
 80248c0:	bf08      	it	eq
 80248c2:	2403      	moveq	r4, #3
 80248c4:	f8ad 6018 	strh.w	r6, [sp, #24]
 80248c8:	f8ad 701a 	strh.w	r7, [sp, #26]
 80248cc:	b924      	cbnz	r4, 80248d8 <MobleConfigModel_ProcessAppKeyUpdate+0x98>
 80248ce:	2310      	movs	r3, #16
 80248d0:	f8cd a020 	str.w	sl, [sp, #32]
 80248d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80248d8:	4b19      	ldr	r3, [pc, #100]	; (8024940 <MobleConfigModel_ProcessAppKeyUpdate+0x100>)
 80248da:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
 80248de:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 80248e2:	a806      	add	r0, sp, #24
 80248e4:	68db      	ldr	r3, [r3, #12]
 80248e6:	4798      	blx	r3
 80248e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80248ea:	4622      	mov	r2, r4
 80248ec:	e9cd 7300 	strd	r7, r3, [sp]
 80248f0:	4649      	mov	r1, r9
 80248f2:	4633      	mov	r3, r6
 80248f4:	4640      	mov	r0, r8
 80248f6:	f7ff ff69 	bl	80247cc <MobleConfigModel_SendAppKeyStatus>
 80248fa:	b00b      	add	sp, #44	; 0x2c
 80248fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024900:	2c00      	cmp	r4, #0
 8024902:	d1df      	bne.n	80248c4 <MobleConfigModel_ProcessAppKeyUpdate+0x84>
 8024904:	4639      	mov	r1, r7
 8024906:	4630      	mov	r0, r6
 8024908:	f7f5 fc6e 	bl	801a1e8 <MoblePalCryptoHasAppKeyIndex>
 802490c:	2803      	cmp	r0, #3
 802490e:	d011      	beq.n	8024934 <MobleConfigModel_ProcessAppKeyUpdate+0xf4>
 8024910:	2801      	cmp	r0, #1
 8024912:	d011      	beq.n	8024938 <MobleConfigModel_ProcessAppKeyUpdate+0xf8>
 8024914:	4632      	mov	r2, r6
 8024916:	4650      	mov	r0, sl
 8024918:	f7f4 fe92 	bl	8019640 <MoblePalCryptoSetNewAppKey>
 802491c:	4604      	mov	r4, r0
 802491e:	b920      	cbnz	r0, 802492a <MobleConfigModel_ProcessAppKeyUpdate+0xea>
 8024920:	f8d8 0000 	ldr.w	r0, [r8]
 8024924:	f7f8 fa92 	bl	801ce4c <MobleConfigNetworkSave>
 8024928:	e7cc      	b.n	80248c4 <MobleConfigModel_ProcessAppKeyUpdate+0x84>
 802492a:	2803      	cmp	r0, #3
 802492c:	bf0c      	ite	eq
 802492e:	2406      	moveq	r4, #6
 8024930:	2405      	movne	r4, #5
 8024932:	e7c7      	b.n	80248c4 <MobleConfigModel_ProcessAppKeyUpdate+0x84>
 8024934:	2411      	movs	r4, #17
 8024936:	e7c5      	b.n	80248c4 <MobleConfigModel_ProcessAppKeyUpdate+0x84>
 8024938:	2403      	movs	r4, #3
 802493a:	e7c3      	b.n	80248c4 <MobleConfigModel_ProcessAppKeyUpdate+0x84>
 802493c:	20000318 	.word	0x20000318
 8024940:	20002508 	.word	0x20002508

08024944 <MobleConfigModel_ProcessAppKeyDelete>:
 8024944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024948:	461a      	mov	r2, r3
 802494a:	b086      	sub	sp, #24
 802494c:	4605      	mov	r5, r0
 802494e:	4618      	mov	r0, r3
 8024950:	f7f2 ffa9 	bl	80178a6 <MobleConfigModelGetNetIdx>
 8024954:	7857      	ldrb	r7, [r2, #1]
 8024956:	7892      	ldrb	r2, [r2, #2]
 8024958:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 802495c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8024960:	460e      	mov	r6, r1
 8024962:	4680      	mov	r8, r0
 8024964:	eb02 1717 	add.w	r7, r2, r7, lsr #4
 8024968:	d226      	bcs.n	80249b8 <MobleConfigModel_ProcessAppKeyDelete+0x74>
 802496a:	4601      	mov	r1, r0
 802496c:	4638      	mov	r0, r7
 802496e:	f7f5 fac3 	bl	8019ef8 <MoblePalCryptoDeleteAppKey>
 8024972:	1e04      	subs	r4, r0, #0
 8024974:	bf18      	it	ne
 8024976:	2403      	movne	r4, #3
 8024978:	6828      	ldr	r0, [r5, #0]
 802497a:	f7f8 fa67 	bl	801ce4c <MobleConfigNetworkSave>
 802497e:	f8ad 8008 	strh.w	r8, [sp, #8]
 8024982:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024986:	f88d 4015 	strb.w	r4, [sp, #21]
 802498a:	b9bc      	cbnz	r4, 80249bc <MobleConfigModel_ProcessAppKeyDelete+0x78>
 802498c:	9404      	str	r4, [sp, #16]
 802498e:	2310      	movs	r3, #16
 8024990:	f88d 3014 	strb.w	r3, [sp, #20]
 8024994:	4b0a      	ldr	r3, [pc, #40]	; (80249c0 <MobleConfigModel_ProcessAppKeyDelete+0x7c>)
 8024996:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 802499a:	a802      	add	r0, sp, #8
 802499c:	685b      	ldr	r3, [r3, #4]
 802499e:	4798      	blx	r3
 80249a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80249a2:	4622      	mov	r2, r4
 80249a4:	e9cd 7300 	strd	r7, r3, [sp]
 80249a8:	4631      	mov	r1, r6
 80249aa:	4643      	mov	r3, r8
 80249ac:	4628      	mov	r0, r5
 80249ae:	f7ff ff0d 	bl	80247cc <MobleConfigModel_SendAppKeyStatus>
 80249b2:	b006      	add	sp, #24
 80249b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80249b8:	2404      	movs	r4, #4
 80249ba:	e7dd      	b.n	8024978 <MobleConfigModel_ProcessAppKeyDelete+0x34>
 80249bc:	2300      	movs	r3, #0
 80249be:	e7e7      	b.n	8024990 <MobleConfigModel_ProcessAppKeyDelete+0x4c>
 80249c0:	20002508 	.word	0x20002508

080249c4 <MobleConfigModel_ProcessAppKeyAdd>:
 80249c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80249c8:	461c      	mov	r4, r3
 80249ca:	b08b      	sub	sp, #44	; 0x2c
 80249cc:	4607      	mov	r7, r0
 80249ce:	4618      	mov	r0, r3
 80249d0:	f7f2 ff69 	bl	80178a6 <MobleConfigModelGetNetIdx>
 80249d4:	78a5      	ldrb	r5, [r4, #2]
 80249d6:	7863      	ldrb	r3, [r4, #1]
 80249d8:	012d      	lsls	r5, r5, #4
 80249da:	aa02      	add	r2, sp, #8
 80249dc:	eb05 1513 	add.w	r5, r5, r3, lsr #4
 80249e0:	4688      	mov	r8, r1
 80249e2:	1ce3      	adds	r3, r4, #3
 80249e4:	4606      	mov	r6, r0
 80249e6:	3413      	adds	r4, #19
 80249e8:	4691      	mov	r9, r2
 80249ea:	6818      	ldr	r0, [r3, #0]
 80249ec:	6859      	ldr	r1, [r3, #4]
 80249ee:	4694      	mov	ip, r2
 80249f0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80249f4:	3308      	adds	r3, #8
 80249f6:	42a3      	cmp	r3, r4
 80249f8:	4662      	mov	r2, ip
 80249fa:	d1f6      	bne.n	80249ea <MobleConfigModel_ProcessAppKeyAdd+0x26>
 80249fc:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 8024a00:	4630      	mov	r0, r6
 8024a02:	bf2c      	ite	cs
 8024a04:	2404      	movcs	r4, #4
 8024a06:	2400      	movcc	r4, #0
 8024a08:	f7f4 fade 	bl	8018fc8 <MoblePalCryptoHasNetworkKey>
 8024a0c:	4320      	orrs	r0, r4
 8024a0e:	b2c0      	uxtb	r0, r0
 8024a10:	2800      	cmp	r0, #0
 8024a12:	4628      	mov	r0, r5
 8024a14:	bf08      	it	eq
 8024a16:	2404      	moveq	r4, #4
 8024a18:	f7f4 faf0 	bl	8018ffc <MoblePalCryptoHasAppKey>
 8024a1c:	2801      	cmp	r0, #1
 8024a1e:	d111      	bne.n	8024a44 <MobleConfigModel_ProcessAppKeyAdd+0x80>
 8024a20:	b994      	cbnz	r4, 8024a48 <MobleConfigModel_ProcessAppKeyAdd+0x84>
 8024a22:	4628      	mov	r0, r5
 8024a24:	f7f5 f9e8 	bl	8019df8 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 8024a28:	42b0      	cmp	r0, r6
 8024a2a:	d12f      	bne.n	8024a8c <MobleConfigModel_ProcessAppKeyAdd+0xc8>
 8024a2c:	4632      	mov	r2, r6
 8024a2e:	4629      	mov	r1, r5
 8024a30:	4648      	mov	r0, r9
 8024a32:	f7f4 fe93 	bl	801975c <MoblePalCryptoSetAppKey>
 8024a36:	4604      	mov	r4, r0
 8024a38:	bb18      	cbnz	r0, 8024a82 <MobleConfigModel_ProcessAppKeyAdd+0xbe>
 8024a3a:	6838      	ldr	r0, [r7, #0]
 8024a3c:	6084      	str	r4, [r0, #8]
 8024a3e:	f7f8 fa05 	bl	801ce4c <MobleConfigNetworkSave>
 8024a42:	e001      	b.n	8024a48 <MobleConfigModel_ProcessAppKeyAdd+0x84>
 8024a44:	2c00      	cmp	r4, #0
 8024a46:	d0f1      	beq.n	8024a2c <MobleConfigModel_ProcessAppKeyAdd+0x68>
 8024a48:	2310      	movs	r3, #16
 8024a4a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8024a4e:	4b10      	ldr	r3, [pc, #64]	; (8024a90 <MobleConfigModel_ProcessAppKeyAdd+0xcc>)
 8024a50:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
 8024a54:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8024a58:	f8ad 6018 	strh.w	r6, [sp, #24]
 8024a5c:	a806      	add	r0, sp, #24
 8024a5e:	681b      	ldr	r3, [r3, #0]
 8024a60:	f8ad 501a 	strh.w	r5, [sp, #26]
 8024a64:	f8cd 9020 	str.w	r9, [sp, #32]
 8024a68:	4798      	blx	r3
 8024a6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024a6c:	4622      	mov	r2, r4
 8024a6e:	e9cd 5300 	strd	r5, r3, [sp]
 8024a72:	4641      	mov	r1, r8
 8024a74:	4633      	mov	r3, r6
 8024a76:	4638      	mov	r0, r7
 8024a78:	f7ff fea8 	bl	80247cc <MobleConfigModel_SendAppKeyStatus>
 8024a7c:	b00b      	add	sp, #44	; 0x2c
 8024a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024a82:	2803      	cmp	r0, #3
 8024a84:	bf0c      	ite	eq
 8024a86:	2406      	moveq	r4, #6
 8024a88:	2403      	movne	r4, #3
 8024a8a:	e7dd      	b.n	8024a48 <MobleConfigModel_ProcessAppKeyAdd+0x84>
 8024a8c:	2404      	movs	r4, #4
 8024a8e:	e7db      	b.n	8024a48 <MobleConfigModel_ProcessAppKeyAdd+0x84>
 8024a90:	20002508 	.word	0x20002508

08024a94 <MobleConfigModel_SendAppKeyList>:
 8024a94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8024a98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024a9a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8024a9e:	4688      	mov	r8, r1
 8024aa0:	4606      	mov	r6, r0
 8024aa2:	b930      	cbnz	r0, 8024ab2 <MobleConfigModel_SendAppKeyList+0x1e>
 8024aa4:	4b16      	ldr	r3, [pc, #88]	; (8024b00 <MobleConfigModel_SendAppKeyList+0x6c>)
 8024aa6:	4a17      	ldr	r2, [pc, #92]	; (8024b04 <MobleConfigModel_SendAppKeyList+0x70>)
 8024aa8:	4817      	ldr	r0, [pc, #92]	; (8024b08 <MobleConfigModel_SendAppKeyList+0x74>)
 8024aaa:	f240 711a 	movw	r1, #1818	; 0x71a
 8024aae:	f003 fff5 	bl	8028a9c <__assert_func>
 8024ab2:	2302      	movs	r3, #2
 8024ab4:	2700      	movs	r7, #0
 8024ab6:	7023      	strb	r3, [r4, #0]
 8024ab8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8024abc:	7063      	strb	r3, [r4, #1]
 8024abe:	7222      	strb	r2, [r4, #8]
 8024ac0:	f10d 0306 	add.w	r3, sp, #6
 8024ac4:	f104 0209 	add.w	r2, r4, #9
 8024ac8:	70a7      	strb	r7, [r4, #2]
 8024aca:	70e7      	strb	r7, [r4, #3]
 8024acc:	2101      	movs	r1, #1
 8024ace:	4638      	mov	r0, r7
 8024ad0:	f7f2 fef0 	bl	80178b4 <MobleConfigModelPutKeyIdxs>
 8024ad4:	9b08      	ldr	r3, [sp, #32]
 8024ad6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8024ada:	f104 020b 	add.w	r2, r4, #11
 8024ade:	4605      	mov	r5, r0
 8024ae0:	4638      	mov	r0, r7
 8024ae2:	f7f2 fee7 	bl	80178b4 <MobleConfigModelPutKeyIdxs>
 8024ae6:	4405      	add	r5, r0
 8024ae8:	3501      	adds	r5, #1
 8024aea:	f8c4 50a3 	str.w	r5, [r4, #163]	; 0xa3
 8024aee:	4623      	mov	r3, r4
 8024af0:	4642      	mov	r2, r8
 8024af2:	2101      	movs	r1, #1
 8024af4:	4630      	mov	r0, r6
 8024af6:	f7fd ffdd 	bl	8022ab4 <MobleModelSendPacket>
 8024afa:	b002      	add	sp, #8
 8024afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b00:	08033489 	.word	0x08033489
 8024b04:	0803242d 	.word	0x0803242d
 8024b08:	0803349b 	.word	0x0803349b

08024b0c <MobleConfigModel_ProcessAppKeyGet>:
 8024b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b10:	4605      	mov	r5, r0
 8024b12:	b08c      	sub	sp, #48	; 0x30
 8024b14:	4618      	mov	r0, r3
 8024b16:	f7f2 fec6 	bl	80178a6 <MobleConfigModelGetNetIdx>
 8024b1a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8024b1e:	bf28      	it	cs
 8024b20:	2200      	movcs	r2, #0
 8024b22:	460e      	mov	r6, r1
 8024b24:	bf28      	it	cs
 8024b26:	f8ad 201a 	strhcs.w	r2, [sp, #26]
 8024b2a:	9005      	str	r0, [sp, #20]
 8024b2c:	f7f4 fa4c 	bl	8018fc8 <MoblePalCryptoHasNetworkKey>
 8024b30:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8024b34:	9b05      	ldr	r3, [sp, #20]
 8024b36:	b908      	cbnz	r0, 8024b3c <MobleConfigModel_ProcessAppKeyGet+0x30>
 8024b38:	f8ad 001a 	strh.w	r0, [sp, #26]
 8024b3c:	af07      	add	r7, sp, #28
 8024b3e:	461a      	mov	r2, r3
 8024b40:	f10d 011a 	add.w	r1, sp, #26
 8024b44:	4638      	mov	r0, r7
 8024b46:	9305      	str	r3, [sp, #20]
 8024b48:	f7f5 f916 	bl	8019d78 <MoblePalCryptoGetAppKeyIndexes>
 8024b4c:	9b05      	ldr	r3, [sp, #20]
 8024b4e:	4604      	mov	r4, r0
 8024b50:	b118      	cbz	r0, 8024b5a <MobleConfigModel_ProcessAppKeyGet+0x4e>
 8024b52:	2200      	movs	r2, #0
 8024b54:	f8ad 201a 	strh.w	r2, [sp, #26]
 8024b58:	2404      	movs	r4, #4
 8024b5a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8024b5e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8024b62:	4a0f      	ldr	r2, [pc, #60]	; (8024ba0 <MobleConfigModel_ProcessAppKeyGet+0x94>)
 8024b64:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
 8024b68:	f8d2 26f8 	ldr.w	r2, [r2, #1784]	; 0x6f8
 8024b6c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8024b70:	6892      	ldr	r2, [r2, #8]
 8024b72:	970a      	str	r7, [sp, #40]	; 0x28
 8024b74:	a809      	add	r0, sp, #36	; 0x24
 8024b76:	9305      	str	r3, [sp, #20]
 8024b78:	4790      	blx	r2
 8024b7a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8024b7e:	9b05      	ldr	r3, [sp, #20]
 8024b80:	e9cd 2801 	strd	r2, r8, [sp, #4]
 8024b84:	b944      	cbnz	r4, 8024b98 <MobleConfigModel_ProcessAppKeyGet+0x8c>
 8024b86:	9700      	str	r7, [sp, #0]
 8024b88:	4622      	mov	r2, r4
 8024b8a:	4631      	mov	r1, r6
 8024b8c:	4628      	mov	r0, r5
 8024b8e:	f7ff ff81 	bl	8024a94 <MobleConfigModel_SendAppKeyList>
 8024b92:	b00c      	add	sp, #48	; 0x30
 8024b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b98:	2200      	movs	r2, #0
 8024b9a:	9200      	str	r2, [sp, #0]
 8024b9c:	e7f4      	b.n	8024b88 <MobleConfigModel_ProcessAppKeyGet+0x7c>
 8024b9e:	bf00      	nop
 8024ba0:	20002508 	.word	0x20002508

08024ba4 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus>:
 8024ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024ba8:	461d      	mov	r5, r3
 8024baa:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8024bae:	f89d e024 	ldrb.w	lr, [sp, #36]	; 0x24
 8024bb2:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 8024bb6:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8024bba:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 8024bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024bc0:	b930      	cbnz	r0, 8024bd0 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x2c>
 8024bc2:	4b14      	ldr	r3, [pc, #80]	; (8024c14 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x70>)
 8024bc4:	4a14      	ldr	r2, [pc, #80]	; (8024c18 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x74>)
 8024bc6:	4815      	ldr	r0, [pc, #84]	; (8024c1c <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x78>)
 8024bc8:	f240 71f1 	movw	r1, #2033	; 0x7f1
 8024bcc:	f003 ff66 	bl	8028a9c <__assert_func>
 8024bd0:	2400      	movs	r4, #0
 8024bd2:	f04f 0906 	mov.w	r9, #6
 8024bd6:	721a      	strb	r2, [r3, #8]
 8024bd8:	f8a3 5009 	strh.w	r5, [r3, #9]
 8024bdc:	220a      	movs	r2, #10
 8024bde:	81df      	strh	r7, [r3, #14]
 8024be0:	821e      	strh	r6, [r3, #16]
 8024be2:	f883 9000 	strb.w	r9, [r3]
 8024be6:	705c      	strb	r4, [r3, #1]
 8024be8:	709c      	strb	r4, [r3, #2]
 8024bea:	70dc      	strb	r4, [r3, #3]
 8024bec:	f883 800b 	strb.w	r8, [r3, #11]
 8024bf0:	f883 e00c 	strb.w	lr, [r3, #12]
 8024bf4:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8024bf8:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 8024bfc:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 8024c00:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 8024c04:	460a      	mov	r2, r1
 8024c06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024c0a:	f883 c00d 	strb.w	ip, [r3, #13]
 8024c0e:	2101      	movs	r1, #1
 8024c10:	f7fd bf50 	b.w	8022ab4 <MobleModelSendPacket>
 8024c14:	08033489 	.word	0x08033489
 8024c18:	0803244d 	.word	0x0803244d
 8024c1c:	0803349b 	.word	0x0803349b

08024c20 <BnrgmConfigModel_ProcessHeartBeatPublicationSet>:
 8024c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024c24:	f8d3 9000 	ldr.w	r9, [r3]
 8024c28:	789e      	ldrb	r6, [r3, #2]
 8024c2a:	461d      	mov	r5, r3
 8024c2c:	fa1f f989 	uxth.w	r9, r9
 8024c30:	f1a6 0312 	sub.w	r3, r6, #18
 8024c34:	f1b9 0f00 	cmp.w	r9, #0
 8024c38:	b2db      	uxtb	r3, r3
 8024c3a:	78ea      	ldrb	r2, [r5, #3]
 8024c3c:	f895 a004 	ldrb.w	sl, [r5, #4]
 8024c40:	bf14      	ite	ne
 8024c42:	2400      	movne	r4, #0
 8024c44:	2402      	moveq	r4, #2
 8024c46:	2bec      	cmp	r3, #236	; 0xec
 8024c48:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8024c4c:	bf98      	it	ls
 8024c4e:	2402      	movls	r4, #2
 8024c50:	2a12      	cmp	r2, #18
 8024c52:	bf28      	it	cs
 8024c54:	2402      	movcs	r4, #2
 8024c56:	b086      	sub	sp, #24
 8024c58:	2b00      	cmp	r3, #0
 8024c5a:	4680      	mov	r8, r0
 8024c5c:	f105 0007 	add.w	r0, r5, #7
 8024c60:	bfb8      	it	lt
 8024c62:	2402      	movlt	r4, #2
 8024c64:	f7f2 fe1f 	bl	80178a6 <MobleConfigModelGetNetIdx>
 8024c68:	4607      	mov	r7, r0
 8024c6a:	2800      	cmp	r0, #0
 8024c6c:	d041      	beq.n	8024cf2 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xd2>
 8024c6e:	4b30      	ldr	r3, [pc, #192]	; (8024d30 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x110>)
 8024c70:	207c      	movs	r0, #124	; 0x7c
 8024c72:	fb00 3307 	mla	r3, r0, r7, r3
 8024c76:	f893 3445 	ldrb.w	r3, [r3, #1093]	; 0x445
 8024c7a:	2b00      	cmp	r3, #0
 8024c7c:	bf14      	ite	ne
 8024c7e:	f04f 0c00 	movne.w	ip, #0
 8024c82:	f04f 0c04 	moveq.w	ip, #4
 8024c86:	bb84      	cbnz	r4, 8024cea <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xca>
 8024c88:	f8d8 3000 	ldr.w	r3, [r8]
 8024c8c:	f8d5 e005 	ldr.w	lr, [r5, #5]
 8024c90:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8024c92:	f8a5 901e 	strh.w	r9, [r5, #30]
 8024c96:	bb76      	cbnz	r6, 8024cf6 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xd6>
 8024c98:	626e      	str	r6, [r5, #36]	; 0x24
 8024c9a:	2a00      	cmp	r2, #0
 8024c9c:	d13f      	bne.n	8024d1e <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xfe>
 8024c9e:	852a      	strh	r2, [r5, #40]	; 0x28
 8024ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024ca2:	f885 a01c 	strb.w	sl, [r5, #28]
 8024ca6:	f00e 000f 	and.w	r0, lr, #15
 8024caa:	8568      	strh	r0, [r5, #42]	; 0x2a
 8024cac:	85af      	strh	r7, [r5, #44]	; 0x2c
 8024cae:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8024cb2:	e9cd a002 	strd	sl, r0, [sp, #8]
 8024cb6:	e9cd 6200 	strd	r6, r2, [sp]
 8024cba:	464b      	mov	r3, r9
 8024cbc:	4662      	mov	r2, ip
 8024cbe:	4640      	mov	r0, r8
 8024cc0:	f7ff ff70 	bl	8024ba4 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus>
 8024cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8024cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024cca:	4604      	mov	r4, r0
 8024ccc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8024cce:	f7f2 ffb3 	bl	8017c38 <MoblePalTimerStop>
 8024cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8024cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024cda:	b132      	cbz	r2, 8024cea <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xca>
 8024cdc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8024cde:	b122      	cbz	r2, 8024cea <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xca>
 8024ce0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8024ce2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8024ce6:	f7f2 ff7f 	bl	8017be8 <MoblePalTimerStartOnce>
 8024cea:	4620      	mov	r0, r4
 8024cec:	b006      	add	sp, #24
 8024cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024cf2:	4684      	mov	ip, r0
 8024cf4:	e7c7      	b.n	8024c86 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x66>
 8024cf6:	2eff      	cmp	r6, #255	; 0xff
 8024cf8:	d103      	bne.n	8024d02 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xe2>
 8024cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024cfe:	626b      	str	r3, [r5, #36]	; 0x24
 8024d00:	e7cb      	b.n	8024c9a <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x7a>
 8024d02:	2e11      	cmp	r6, #17
 8024d04:	d102      	bne.n	8024d0c <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xec>
 8024d06:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8024d0a:	e7f8      	b.n	8024cfe <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xde>
 8024d0c:	1e70      	subs	r0, r6, #1
 8024d0e:	b2c0      	uxtb	r0, r0
 8024d10:	281f      	cmp	r0, #31
 8024d12:	bf9c      	itt	ls
 8024d14:	2401      	movls	r4, #1
 8024d16:	4084      	lslls	r4, r0
 8024d18:	b2a4      	uxth	r4, r4
 8024d1a:	626c      	str	r4, [r5, #36]	; 0x24
 8024d1c:	e7bd      	b.n	8024c9a <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x7a>
 8024d1e:	1e53      	subs	r3, r2, #1
 8024d20:	b2d8      	uxtb	r0, r3
 8024d22:	281f      	cmp	r0, #31
 8024d24:	bf9a      	itte	ls
 8024d26:	2301      	movls	r3, #1
 8024d28:	4083      	lslls	r3, r0
 8024d2a:	2300      	movhi	r3, #0
 8024d2c:	852b      	strh	r3, [r5, #40]	; 0x28
 8024d2e:	e7b7      	b.n	8024ca0 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x80>
 8024d30:	20001410 	.word	0x20001410

08024d34 <BnrgmConfigModel_ProcessHeartBeatPublicationGet>:
 8024d34:	6803      	ldr	r3, [r0, #0]
 8024d36:	b570      	push	{r4, r5, r6, lr}
 8024d38:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8024d3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8024d3c:	b086      	sub	sp, #24
 8024d3e:	b313      	cbz	r3, 8024d86 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x52>
 8024d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024d44:	4293      	cmp	r3, r2
 8024d46:	d020      	beq.n	8024d8a <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x56>
 8024d48:	2400      	movs	r4, #0
 8024d4a:	3401      	adds	r4, #1
 8024d4c:	2b01      	cmp	r3, #1
 8024d4e:	b2e4      	uxtb	r4, r4
 8024d50:	d117      	bne.n	8024d82 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x4e>
 8024d52:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8024d54:	b12a      	cbz	r2, 8024d62 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x2e>
 8024d56:	4616      	mov	r6, r2
 8024d58:	2200      	movs	r2, #0
 8024d5a:	1c53      	adds	r3, r2, #1
 8024d5c:	2e01      	cmp	r6, #1
 8024d5e:	b2da      	uxtb	r2, r3
 8024d60:	d115      	bne.n	8024d8e <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x5a>
 8024d62:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8024d64:	8beb      	ldrh	r3, [r5, #30]
 8024d66:	9605      	str	r6, [sp, #20]
 8024d68:	8dae      	ldrh	r6, [r5, #44]	; 0x2c
 8024d6a:	9604      	str	r6, [sp, #16]
 8024d6c:	8d6e      	ldrh	r6, [r5, #42]	; 0x2a
 8024d6e:	9603      	str	r6, [sp, #12]
 8024d70:	7f2d      	ldrb	r5, [r5, #28]
 8024d72:	9400      	str	r4, [sp, #0]
 8024d74:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8024d78:	2200      	movs	r2, #0
 8024d7a:	f7ff ff13 	bl	8024ba4 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus>
 8024d7e:	b006      	add	sp, #24
 8024d80:	bd70      	pop	{r4, r5, r6, pc}
 8024d82:	085b      	lsrs	r3, r3, #1
 8024d84:	e7e1      	b.n	8024d4a <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x16>
 8024d86:	461c      	mov	r4, r3
 8024d88:	e7e3      	b.n	8024d52 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x1e>
 8024d8a:	24ff      	movs	r4, #255	; 0xff
 8024d8c:	e7e1      	b.n	8024d52 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x1e>
 8024d8e:	0876      	lsrs	r6, r6, #1
 8024d90:	e7e3      	b.n	8024d5a <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x26>
	...

08024d94 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus>:
 8024d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024d98:	461d      	mov	r5, r3
 8024d9a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 8024d9e:	f89d e024 	ldrb.w	lr, [sp, #36]	; 0x24
 8024da2:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 8024da6:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8024daa:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8024dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024db0:	b930      	cbnz	r0, 8024dc0 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x2c>
 8024db2:	4b16      	ldr	r3, [pc, #88]	; (8024e0c <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x78>)
 8024db4:	4a16      	ldr	r2, [pc, #88]	; (8024e10 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x7c>)
 8024db6:	4817      	ldr	r0, [pc, #92]	; (8024e14 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x80>)
 8024db8:	f640 0118 	movw	r1, #2072	; 0x818
 8024dbc:	f003 fe6e 	bl	8028a9c <__assert_func>
 8024dc0:	f04f 093c 	mov.w	r9, #60	; 0x3c
 8024dc4:	2400      	movs	r4, #0
 8024dc6:	f883 9000 	strb.w	r9, [r3]
 8024dca:	721a      	strb	r2, [r3, #8]
 8024dcc:	f06f 097f 	mvn.w	r9, #127	; 0x7f
 8024dd0:	2209      	movs	r2, #9
 8024dd2:	f8a3 5009 	strh.w	r5, [r3, #9]
 8024dd6:	f8a3 800b 	strh.w	r8, [r3, #11]
 8024dda:	f883 9001 	strb.w	r9, [r3, #1]
 8024dde:	709c      	strb	r4, [r3, #2]
 8024de0:	70dc      	strb	r4, [r3, #3]
 8024de2:	f883 e00d 	strb.w	lr, [r3, #13]
 8024de6:	73df      	strb	r7, [r3, #15]
 8024de8:	741e      	strb	r6, [r3, #16]
 8024dea:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8024dee:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 8024df2:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 8024df6:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 8024dfa:	460a      	mov	r2, r1
 8024dfc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024e00:	f883 c00e 	strb.w	ip, [r3, #14]
 8024e04:	2101      	movs	r1, #1
 8024e06:	f7fd be55 	b.w	8022ab4 <MobleModelSendPacket>
 8024e0a:	bf00      	nop
 8024e0c:	08033489 	.word	0x08033489
 8024e10:	08032483 	.word	0x08032483
 8024e14:	0803349b 	.word	0x0803349b

08024e18 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet>:
 8024e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024e1c:	460f      	mov	r7, r1
 8024e1e:	4946      	ldr	r1, [pc, #280]	; (8024f38 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x120>)
 8024e20:	4605      	mov	r5, r0
 8024e22:	2000      	movs	r0, #0
 8024e24:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
 8024e28:	681a      	ldr	r2, [r3, #0]
 8024e2a:	fa1f fc82 	uxth.w	ip, r2
 8024e2e:	b212      	sxth	r2, r2
 8024e30:	4282      	cmp	r2, r0
 8024e32:	b087      	sub	sp, #28
 8024e34:	dc03      	bgt.n	8024e3e <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x26>
 8024e36:	f1bc 0f00 	cmp.w	ip, #0
 8024e3a:	d114      	bne.n	8024e66 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x4e>
 8024e3c:	2001      	movs	r0, #1
 8024e3e:	f8d3 8002 	ldr.w	r8, [r3, #2]
 8024e42:	fa1f f988 	uxth.w	r9, r8
 8024e46:	f1b9 0f00 	cmp.w	r9, #0
 8024e4a:	d00e      	beq.n	8024e6a <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x52>
 8024e4c:	f408 4240 	and.w	r2, r8, #49152	; 0xc000
 8024e50:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8024e54:	d007      	beq.n	8024e66 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x4e>
 8024e56:	fa0f f288 	sxth.w	r2, r8
 8024e5a:	2a00      	cmp	r2, #0
 8024e5c:	dd06      	ble.n	8024e6c <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x54>
 8024e5e:	682a      	ldr	r2, [r5, #0]
 8024e60:	8852      	ldrh	r2, [r2, #2]
 8024e62:	454a      	cmp	r2, r9
 8024e64:	d002      	beq.n	8024e6c <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x54>
 8024e66:	2002      	movs	r0, #2
 8024e68:	e04c      	b.n	8024f04 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xec>
 8024e6a:	2001      	movs	r0, #1
 8024e6c:	791c      	ldrb	r4, [r3, #4]
 8024e6e:	682b      	ldr	r3, [r5, #0]
 8024e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024e72:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8024e74:	4562      	cmp	r2, ip
 8024e76:	d103      	bne.n	8024e80 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x68>
 8024e78:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8024e7a:	454a      	cmp	r2, r9
 8024e7c:	d100      	bne.n	8024e80 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x68>
 8024e7e:	b114      	cbz	r4, 8024e86 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x6e>
 8024e80:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8024e84:	639a      	str	r2, [r3, #56]	; 0x38
 8024e86:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8024e88:	2a00      	cmp	r2, #0
 8024e8a:	d040      	beq.n	8024f0e <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xf6>
 8024e8c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8024e90:	42b2      	cmp	r2, r6
 8024e92:	d03e      	beq.n	8024f12 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xfa>
 8024e94:	2600      	movs	r6, #0
 8024e96:	3601      	adds	r6, #1
 8024e98:	2a01      	cmp	r2, #1
 8024e9a:	b2f6      	uxtb	r6, r6
 8024e9c:	d135      	bne.n	8024f0a <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xf2>
 8024e9e:	2c00      	cmp	r4, #0
 8024ea0:	d139      	bne.n	8024f16 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xfe>
 8024ea2:	635c      	str	r4, [r3, #52]	; 0x34
 8024ea4:	b108      	cbz	r0, 8024eaa <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x92>
 8024ea6:	2200      	movs	r2, #0
 8024ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8024eaa:	2400      	movs	r4, #0
 8024eac:	f8c1 40e8 	str.w	r4, [r1, #232]	; 0xe8
 8024eb0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8024eb2:	f7f2 fec1 	bl	8017c38 <MoblePalTimerStop>
 8024eb6:	682b      	ldr	r3, [r5, #0]
 8024eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024eba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8024ebc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8024ec0:	d304      	bcc.n	8024ecc <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xb4>
 8024ec2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8024ec4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8024ec8:	f7f2 fe5d 	bl	8017b86 <MoblePalTimerStart>
 8024ecc:	fa0f f888 	sxth.w	r8, r8
 8024ed0:	f1b8 0f00 	cmp.w	r8, #0
 8024ed4:	dc02      	bgt.n	8024edc <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xc4>
 8024ed6:	4648      	mov	r0, r9
 8024ed8:	f7f8 ff82 	bl	801dde0 <BnrgmFrndMgmtSubscriptionListAdd>
 8024edc:	682b      	ldr	r3, [r5, #0]
 8024ede:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024ee2:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 8024ee4:	9105      	str	r1, [sp, #20]
 8024ee6:	f892 103b 	ldrb.w	r1, [r2, #59]	; 0x3b
 8024eea:	9104      	str	r1, [sp, #16]
 8024eec:	f892 103a 	ldrb.w	r1, [r2, #58]	; 0x3a
 8024ef0:	9401      	str	r4, [sp, #4]
 8024ef2:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8024ef6:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8024ef8:	9200      	str	r2, [sp, #0]
 8024efa:	4639      	mov	r1, r7
 8024efc:	2200      	movs	r2, #0
 8024efe:	4628      	mov	r0, r5
 8024f00:	f7ff ff48 	bl	8024d94 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus>
 8024f04:	b007      	add	sp, #28
 8024f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024f0a:	0852      	lsrs	r2, r2, #1
 8024f0c:	e7c3      	b.n	8024e96 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x7e>
 8024f0e:	4616      	mov	r6, r2
 8024f10:	e7c5      	b.n	8024e9e <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x86>
 8024f12:	26ff      	movs	r6, #255	; 0xff
 8024f14:	e7c3      	b.n	8024e9e <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x86>
 8024f16:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8024f1a:	f8a3 9036 	strh.w	r9, [r3, #54]	; 0x36
 8024f1e:	2800      	cmp	r0, #0
 8024f20:	d1c1      	bne.n	8024ea6 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x8e>
 8024f22:	2c11      	cmp	r4, #17
 8024f24:	d8c4      	bhi.n	8024eb0 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x98>
 8024f26:	1e62      	subs	r2, r4, #1
 8024f28:	b2d0      	uxtb	r0, r2
 8024f2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8024f2e:	4082      	lsls	r2, r0
 8024f30:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
 8024f34:	e7bc      	b.n	8024eb0 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x98>
 8024f36:	bf00      	nop
 8024f38:	20000318 	.word	0x20000318

08024f3c <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet>:
 8024f3c:	6803      	ldr	r3, [r0, #0]
 8024f3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024f40:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8024f42:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 8024f44:	b087      	sub	sp, #28
 8024f46:	468c      	mov	ip, r1
 8024f48:	b3a3      	cbz	r3, 8024fb4 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x78>
 8024f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024f4e:	4293      	cmp	r3, r2
 8024f50:	d032      	beq.n	8024fb8 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x7c>
 8024f52:	2200      	movs	r2, #0
 8024f54:	3201      	adds	r2, #1
 8024f56:	2b01      	cmp	r3, #1
 8024f58:	b2d2      	uxtb	r2, r2
 8024f5a:	d129      	bne.n	8024fb0 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x74>
 8024f5c:	4b1c      	ldr	r3, [pc, #112]	; (8024fd0 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x94>)
 8024f5e:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8024f62:	f1b4 7f7a 	cmp.w	r4, #65536000	; 0x3e80000
 8024f66:	d229      	bcs.n	8024fbc <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x80>
 8024f68:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8024f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8024f70:	fbb4 f3f3 	udiv	r3, r4, r3
 8024f74:	b29b      	uxth	r3, r3
 8024f76:	d326      	bcc.n	8024fc6 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x8a>
 8024f78:	2400      	movs	r4, #0
 8024f7a:	3401      	adds	r4, #1
 8024f7c:	2b01      	cmp	r3, #1
 8024f7e:	b2e4      	uxtb	r4, r4
 8024f80:	d11f      	bne.n	8024fc2 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x86>
 8024f82:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8024f84:	f895 603a 	ldrb.w	r6, [r5, #58]	; 0x3a
 8024f88:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8024f8a:	b1f3      	cbz	r3, 8024fca <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x8e>
 8024f8c:	2f00      	cmp	r7, #0
 8024f8e:	bf08      	it	eq
 8024f90:	2600      	moveq	r6, #0
 8024f92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024f94:	9105      	str	r1, [sp, #20]
 8024f96:	f895 503b 	ldrb.w	r5, [r5, #59]	; 0x3b
 8024f9a:	9700      	str	r7, [sp, #0]
 8024f9c:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8024fa0:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8024fa4:	2200      	movs	r2, #0
 8024fa6:	4661      	mov	r1, ip
 8024fa8:	f7ff fef4 	bl	8024d94 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus>
 8024fac:	b007      	add	sp, #28
 8024fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024fb0:	085b      	lsrs	r3, r3, #1
 8024fb2:	e7cf      	b.n	8024f54 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x18>
 8024fb4:	461a      	mov	r2, r3
 8024fb6:	e7d1      	b.n	8024f5c <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x20>
 8024fb8:	22ff      	movs	r2, #255	; 0xff
 8024fba:	e7cf      	b.n	8024f5c <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x20>
 8024fbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024fc0:	e7da      	b.n	8024f78 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x3c>
 8024fc2:	085b      	lsrs	r3, r3, #1
 8024fc4:	e7d9      	b.n	8024f7a <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x3e>
 8024fc6:	2400      	movs	r4, #0
 8024fc8:	e7db      	b.n	8024f82 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x46>
 8024fca:	461e      	mov	r6, r3
 8024fcc:	e7e1      	b.n	8024f92 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x56>
 8024fce:	bf00      	nop
 8024fd0:	20000318 	.word	0x20000318

08024fd4 <BnrgmConfigModel_SendConfigNetworkTransmitStatus>:
 8024fd4:	b570      	push	{r4, r5, r6, lr}
 8024fd6:	461d      	mov	r5, r3
 8024fd8:	9b04      	ldr	r3, [sp, #16]
 8024fda:	b930      	cbnz	r0, 8024fea <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x16>
 8024fdc:	4b10      	ldr	r3, [pc, #64]	; (8025020 <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x4c>)
 8024fde:	4a11      	ldr	r2, [pc, #68]	; (8025024 <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x50>)
 8024fe0:	4811      	ldr	r0, [pc, #68]	; (8025028 <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x54>)
 8024fe2:	f640 111d 	movw	r1, #2333	; 0x91d
 8024fe6:	f003 fd59 	bl	8028a9c <__assert_func>
 8024fea:	ea42 05c5 	orr.w	r5, r2, r5, lsl #3
 8024fee:	2625      	movs	r6, #37	; 0x25
 8024ff0:	2400      	movs	r4, #0
 8024ff2:	701e      	strb	r6, [r3, #0]
 8024ff4:	721d      	strb	r5, [r3, #8]
 8024ff6:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8024ffa:	2501      	movs	r5, #1
 8024ffc:	705e      	strb	r6, [r3, #1]
 8024ffe:	709c      	strb	r4, [r3, #2]
 8025000:	70dc      	strb	r4, [r3, #3]
 8025002:	f883 50a3 	strb.w	r5, [r3, #163]	; 0xa3
 8025006:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 802500a:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 802500e:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 8025012:	460a      	mov	r2, r1
 8025014:	4629      	mov	r1, r5
 8025016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802501a:	f7fd bd4b 	b.w	8022ab4 <MobleModelSendPacket>
 802501e:	bf00      	nop
 8025020:	08033489 	.word	0x08033489
 8025024:	080324ba 	.word	0x080324ba
 8025028:	0803349b 	.word	0x0803349b

0802502c <BnrgmConfigModel_ProcessNetworkTransmitSet>:
 802502c:	b410      	push	{r4}
 802502e:	6804      	ldr	r4, [r0, #0]
 8025030:	781b      	ldrb	r3, [r3, #0]
 8025032:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8025034:	f003 0207 	and.w	r2, r3, #7
 8025038:	08db      	lsrs	r3, r3, #3
 802503a:	72a2      	strb	r2, [r4, #10]
 802503c:	72e3      	strb	r3, [r4, #11]
 802503e:	9c02      	ldr	r4, [sp, #8]
 8025040:	9401      	str	r4, [sp, #4]
 8025042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025046:	f7ff bfc5 	b.w	8024fd4 <BnrgmConfigModel_SendConfigNetworkTransmitStatus>

0802504a <BnrgmConfigModel_ProcessNetworkTransmitGet>:
 802504a:	b410      	push	{r4}
 802504c:	6803      	ldr	r3, [r0, #0]
 802504e:	9c02      	ldr	r4, [sp, #8]
 8025050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025052:	7ad3      	ldrb	r3, [r2, #11]
 8025054:	7a92      	ldrb	r2, [r2, #10]
 8025056:	9401      	str	r4, [sp, #4]
 8025058:	f85d 4b04 	ldr.w	r4, [sp], #4
 802505c:	f7ff bfba 	b.w	8024fd4 <BnrgmConfigModel_SendConfigNetworkTransmitStatus>

08025060 <MobleConfigModel_ProcessDeviceCompositionDataGet>:
 8025060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025064:	ed2d 8b02 	vpush	{d8}
 8025068:	6803      	ldr	r3, [r0, #0]
 802506a:	b0df      	sub	sp, #380	; 0x17c
 802506c:	885a      	ldrh	r2, [r3, #2]
 802506e:	7f1b      	ldrb	r3, [r3, #28]
 8025070:	9303      	str	r3, [sp, #12]
 8025072:	4b7e      	ldr	r3, [pc, #504]	; (802526c <MobleConfigModel_ProcessDeviceCompositionDataGet+0x20c>)
 8025074:	9208      	str	r2, [sp, #32]
 8025076:	f893 40bd 	ldrb.w	r4, [r3, #189]	; 0xbd
 802507a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 802507e:	9009      	str	r0, [sp, #36]	; 0x24
 8025080:	3c02      	subs	r4, #2
 8025082:	bf18      	it	ne
 8025084:	2401      	movne	r4, #1
 8025086:	2a02      	cmp	r2, #2
 8025088:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 802508c:	9e6b      	ldr	r6, [sp, #428]	; 0x1ac
 802508e:	bf18      	it	ne
 8025090:	f044 0402 	orrne.w	r4, r4, #2
 8025094:	2a02      	cmp	r2, #2
 8025096:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 802509a:	685b      	ldr	r3, [r3, #4]
 802509c:	bf18      	it	ne
 802509e:	f044 0404 	orrne.w	r4, r4, #4
 80250a2:	699b      	ldr	r3, [r3, #24]
 80250a4:	2a02      	cmp	r2, #2
 80250a6:	ad1f      	add	r5, sp, #124	; 0x7c
 80250a8:	a80c      	add	r0, sp, #48	; 0x30
 80250aa:	bf18      	it	ne
 80250ac:	f044 0408 	orrne.w	r4, r4, #8
 80250b0:	ee08 1a10 	vmov	s16, r1
 80250b4:	4798      	blx	r3
 80250b6:	2202      	movs	r2, #2
 80250b8:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 80250bc:	4628      	mov	r0, r5
 80250be:	f7f6 fdfb 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 80250c2:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 80250c6:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 80250ca:	f7f6 fdf5 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 80250ce:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80250d2:	a820      	add	r0, sp, #128	; 0x80
 80250d4:	f7f6 fdf0 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 80250d8:	2114      	movs	r1, #20
 80250da:	f10d 0082 	add.w	r0, sp, #130	; 0x82
 80250de:	f7f6 fdeb 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 80250e2:	4621      	mov	r1, r4
 80250e4:	a821      	add	r0, sp, #132	; 0x84
 80250e6:	f7f6 fde7 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 80250ea:	9b03      	ldr	r3, [sp, #12]
 80250ec:	9506      	str	r5, [sp, #24]
 80250ee:	005b      	lsls	r3, r3, #1
 80250f0:	3305      	adds	r3, #5
 80250f2:	f04f 0b00 	mov.w	fp, #0
 80250f6:	b2db      	uxtb	r3, r3
 80250f8:	930a      	str	r3, [sp, #40]	; 0x28
 80250fa:	46d8      	mov	r8, fp
 80250fc:	465c      	mov	r4, fp
 80250fe:	9a03      	ldr	r2, [sp, #12]
 8025100:	fa5f f38b 	uxtb.w	r3, fp
 8025104:	4293      	cmp	r3, r2
 8025106:	d321      	bcc.n	802514c <MobleConfigModel_ProcessDeviceCompositionDataGet+0xec>
 8025108:	4a59      	ldr	r2, [pc, #356]	; (8025270 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x210>)
 802510a:	f892 3a38 	ldrb.w	r3, [r2, #2616]	; 0xa38
 802510e:	3b02      	subs	r3, #2
 8025110:	f882 3a38 	strb.w	r3, [r2, #2616]	; 0xa38
 8025114:	2300      	movs	r3, #0
 8025116:	2202      	movs	r2, #2
 8025118:	7032      	strb	r2, [r6, #0]
 802511a:	7073      	strb	r3, [r6, #1]
 802511c:	4622      	mov	r2, r4
 802511e:	70b3      	strb	r3, [r6, #2]
 8025120:	70f3      	strb	r3, [r6, #3]
 8025122:	7233      	strb	r3, [r6, #8]
 8025124:	a91f      	add	r1, sp, #124	; 0x7c
 8025126:	f106 0009 	add.w	r0, r6, #9
 802512a:	3401      	adds	r4, #1
 802512c:	f003 fd20 	bl	8028b70 <memcpy>
 8025130:	ee18 2a10 	vmov	r2, s16
 8025134:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025136:	f8c6 40a3 	str.w	r4, [r6, #163]	; 0xa3
 802513a:	4633      	mov	r3, r6
 802513c:	2101      	movs	r1, #1
 802513e:	f7fd fcb9 	bl	8022ab4 <MobleModelSendPacket>
 8025142:	b05f      	add	sp, #380	; 0x17c
 8025144:	ecbd 8b02 	vpop	{d8}
 8025148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802514c:	4619      	mov	r1, r3
 802514e:	a80e      	add	r0, sp, #56	; 0x38
 8025150:	9304      	str	r3, [sp, #16]
 8025152:	f7f6 fffb 	bl	801c14c <MobleApplicationGetSigModelList>
 8025156:	9b04      	ldr	r3, [sp, #16]
 8025158:	930b      	str	r3, [sp, #44]	; 0x2c
 802515a:	4605      	mov	r5, r0
 802515c:	4619      	mov	r1, r3
 802515e:	a814      	add	r0, sp, #80	; 0x50
 8025160:	f7f7 f816 	bl	801c190 <MobleApplicationGetVendorModelList>
 8025164:	1c6b      	adds	r3, r5, #1
 8025166:	9004      	str	r0, [sp, #16]
 8025168:	d07d      	beq.n	8025266 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x206>
 802516a:	4603      	mov	r3, r0
 802516c:	3301      	adds	r3, #1
 802516e:	d07a      	beq.n	8025266 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x206>
 8025170:	b2eb      	uxtb	r3, r5
 8025172:	2202      	movs	r2, #2
 8025174:	f89d a010 	ldrb.w	sl, [sp, #16]
 8025178:	9307      	str	r3, [sp, #28]
 802517a:	fb12 5300 	smlabb	r3, r2, r0, r5
 802517e:	9305      	str	r3, [sp, #20]
 8025180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025182:	fa5a f785 	uxtab	r7, sl, r5
 8025186:	b2ff      	uxtb	r7, r7
 8025188:	2b00      	cmp	r3, #0
 802518a:	d151      	bne.n	8025230 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1d0>
 802518c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802518e:	9905      	ldr	r1, [sp, #20]
 8025190:	1854      	adds	r4, r2, r1
 8025192:	0064      	lsls	r4, r4, #1
 8025194:	9a03      	ldr	r2, [sp, #12]
 8025196:	9201      	str	r2, [sp, #4]
 8025198:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 802519c:	9a08      	ldr	r2, [sp, #32]
 802519e:	9200      	str	r2, [sp, #0]
 80251a0:	4639      	mov	r1, r7
 80251a2:	9a07      	ldr	r2, [sp, #28]
 80251a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80251a6:	4648      	mov	r0, r9
 80251a8:	f7f7 f814 	bl	801c1d4 <MobleApplicationUpdateSigModelList>
 80251ac:	9b03      	ldr	r3, [sp, #12]
 80251ae:	9301      	str	r3, [sp, #4]
 80251b0:	9b08      	ldr	r3, [sp, #32]
 80251b2:	9300      	str	r3, [sp, #0]
 80251b4:	4652      	mov	r2, sl
 80251b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80251b8:	4639      	mov	r1, r7
 80251ba:	a814      	add	r0, sp, #80	; 0x50
 80251bc:	f7f7 f848 	bl	801c250 <MobleApplicationUpdateVendorModelList>
 80251c0:	9b06      	ldr	r3, [sp, #24]
 80251c2:	f108 000a 	add.w	r0, r8, #10
 80251c6:	2202      	movs	r2, #2
 80251c8:	4418      	add	r0, r3
 80251ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80251ce:	f7f6 fd73 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 80251d2:	f508 73bc 	add.w	r3, r8, #376	; 0x178
 80251d6:	446b      	add	r3, sp
 80251d8:	9a07      	ldr	r2, [sp, #28]
 80251da:	f803 acef 	strb.w	sl, [r3, #-239]
 80251de:	f803 2cf0 	strb.w	r2, [r3, #-240]
 80251e2:	f108 030e 	add.w	r3, r8, #14
 80251e6:	b2e4      	uxtb	r4, r4
 80251e8:	f04f 0a00 	mov.w	sl, #0
 80251ec:	9307      	str	r3, [sp, #28]
 80251ee:	fa5f f38a 	uxtb.w	r3, sl
 80251f2:	42ab      	cmp	r3, r5
 80251f4:	f10a 0a01 	add.w	sl, sl, #1
 80251f8:	db1e      	blt.n	8025238 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1d8>
 80251fa:	f04f 0900 	mov.w	r9, #0
 80251fe:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8025202:	3507      	adds	r5, #7
 8025204:	9a04      	ldr	r2, [sp, #16]
 8025206:	fa5f f389 	uxtb.w	r3, r9
 802520a:	4293      	cmp	r3, r2
 802520c:	f109 0901 	add.w	r9, r9, #1
 8025210:	db1d      	blt.n	802524e <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1ee>
 8025212:	9b05      	ldr	r3, [sp, #20]
 8025214:	4a16      	ldr	r2, [pc, #88]	; (8025270 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x210>)
 8025216:	3302      	adds	r3, #2
 8025218:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 802521c:	f892 3a38 	ldrb.w	r3, [r2, #2616]	; 0xa38
 8025220:	441f      	add	r7, r3
 8025222:	fa5f f888 	uxtb.w	r8, r8
 8025226:	f882 7a38 	strb.w	r7, [r2, #2616]	; 0xa38
 802522a:	f10b 0b01 	add.w	fp, fp, #1
 802522e:	e766      	b.n	80250fe <MobleConfigModel_ProcessDeviceCompositionDataGet+0x9e>
 8025230:	9a05      	ldr	r2, [sp, #20]
 8025232:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8025236:	e7ad      	b.n	8025194 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x134>
 8025238:	9a07      	ldr	r2, [sp, #28]
 802523a:	f839 1013 	ldrh.w	r1, [r9, r3, lsl #1]
 802523e:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8025242:	9b06      	ldr	r3, [sp, #24]
 8025244:	2202      	movs	r2, #2
 8025246:	4418      	add	r0, r3
 8025248:	f7f6 fd36 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 802524c:	e7cf      	b.n	80251ee <MobleConfigModel_ProcessDeviceCompositionDataGet+0x18e>
 802524e:	eb05 0043 	add.w	r0, r5, r3, lsl #1
 8025252:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 8025256:	9b06      	ldr	r3, [sp, #24]
 8025258:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 802525c:	2204      	movs	r2, #4
 802525e:	4418      	add	r0, r3
 8025260:	f7f6 fd2a 	bl	801bcb8 <MobleOutputStreamPutLittleEndian>
 8025264:	e7ce      	b.n	8025204 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1a4>
 8025266:	2002      	movs	r0, #2
 8025268:	e76b      	b.n	8025142 <MobleConfigModel_ProcessDeviceCompositionDataGet+0xe2>
 802526a:	bf00      	nop
 802526c:	20000318 	.word	0x20000318
 8025270:	20002508 	.word	0x20002508

08025274 <BnrgmHealthModelPublish_TimerCallback>:
 8025274:	680b      	ldr	r3, [r1, #0]
 8025276:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802527a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802527e:	b089      	sub	sp, #36	; 0x24
 8025280:	460d      	mov	r5, r1
 8025282:	2b00      	cmp	r3, #0
 8025284:	d062      	beq.n	802534c <BnrgmHealthModelPublish_TimerCallback+0xd8>
 8025286:	4f32      	ldr	r7, [pc, #200]	; (8025350 <BnrgmHealthModelPublish_TimerCallback+0xdc>)
 8025288:	20a7      	movs	r0, #167	; 0xa7
 802528a:	f7f5 fdf3 	bl	801ae74 <MobleMemAlloc>
 802528e:	f8b7 610c 	ldrh.w	r6, [r7, #268]	; 0x10c
 8025292:	4604      	mov	r4, r0
 8025294:	4630      	mov	r0, r6
 8025296:	f7f4 fdaf 	bl	8019df8 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 802529a:	4601      	mov	r1, r0
 802529c:	f8ad 0012 	strh.w	r0, [sp, #18]
 80252a0:	4630      	mov	r0, r6
 80252a2:	f8ad 600e 	strh.w	r6, [sp, #14]
 80252a6:	f7f5 fa21 	bl	801a6ec <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 80252aa:	f88d 000c 	strb.w	r0, [sp, #12]
 80252ae:	4608      	mov	r0, r1
 80252b0:	f7f5 fa02 	bl	801a6b8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80252b4:	682b      	ldr	r3, [r5, #0]
 80252b6:	4e27      	ldr	r6, [pc, #156]	; (8025354 <BnrgmHealthModelPublish_TimerCallback+0xe0>)
 80252b8:	b2c0      	uxtb	r0, r0
 80252ba:	f88d 0010 	strb.w	r0, [sp, #16]
 80252be:	f88d 0014 	strb.w	r0, [sp, #20]
 80252c2:	885b      	ldrh	r3, [r3, #2]
 80252c4:	f8ad 300a 	strh.w	r3, [sp, #10]
 80252c8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80252cc:	f8ad 3008 	strh.w	r3, [sp, #8]
 80252d0:	b36c      	cbz	r4, 802532e <BnrgmHealthModelPublish_TimerCallback+0xba>
 80252d2:	8873      	ldrh	r3, [r6, #2]
 80252d4:	f8a4 3009 	strh.w	r3, [r4, #9]
 80252d8:	682b      	ldr	r3, [r5, #0]
 80252da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80252dc:	2200      	movs	r2, #0
 80252de:	2104      	movs	r1, #4
 80252e0:	7021      	strb	r1, [r4, #0]
 80252e2:	7062      	strb	r2, [r4, #1]
 80252e4:	70a2      	strb	r2, [r4, #2]
 80252e6:	70e2      	strb	r2, [r4, #3]
 80252e8:	7222      	strb	r2, [r4, #8]
 80252ea:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 80252ee:	f103 0754 	add.w	r7, r3, #84	; 0x54
 80252f2:	f811 0b01 	ldrb.w	r0, [r1], #1
 80252f6:	b128      	cbz	r0, 8025304 <BnrgmHealthModelPublish_TimerCallback+0x90>
 80252f8:	eb04 0c02 	add.w	ip, r4, r2
 80252fc:	3201      	adds	r2, #1
 80252fe:	f88c 000b 	strb.w	r0, [ip, #11]
 8025302:	b2d2      	uxtb	r2, r2
 8025304:	428f      	cmp	r7, r1
 8025306:	d1f4      	bne.n	80252f2 <BnrgmHealthModelPublish_TimerCallback+0x7e>
 8025308:	3203      	adds	r2, #3
 802530a:	f8c4 20a3 	str.w	r2, [r4, #163]	; 0xa3
 802530e:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8025312:	2b00      	cmp	r3, #0
 8025314:	bf0c      	ite	eq
 8025316:	2100      	moveq	r1, #0
 8025318:	2120      	movne	r1, #32
 802531a:	4623      	mov	r3, r4
 802531c:	466a      	mov	r2, sp
 802531e:	f041 0101 	orr.w	r1, r1, #1
 8025322:	4628      	mov	r0, r5
 8025324:	f7fd fbc6 	bl	8022ab4 <MobleModelSendPacket>
 8025328:	4620      	mov	r0, r4
 802532a:	f7f5 fe2d 	bl	801af88 <MobleMemFree>
 802532e:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8025332:	3b01      	subs	r3, #1
 8025334:	b2db      	uxtb	r3, r3
 8025336:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
 802533a:	b93b      	cbnz	r3, 802534c <BnrgmHealthModelPublish_TimerCallback+0xd8>
 802533c:	682b      	ldr	r3, [r5, #0]
 802533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025340:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8025342:	f7f2 fc99 	bl	8017c78 <MoblePalTimerDestroy>
 8025346:	2308      	movs	r3, #8
 8025348:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
 802534c:	b009      	add	sp, #36	; 0x24
 802534e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025350:	20000318 	.word	0x20000318
 8025354:	20000008 	.word	0x20000008

08025358 <BnrgmHealthModel_ProcessAttentionGet>:
 8025358:	b430      	push	{r4, r5}
 802535a:	460a      	mov	r2, r1
 802535c:	6801      	ldr	r1, [r0, #0]
 802535e:	9b03      	ldr	r3, [sp, #12]
 8025360:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8025362:	2507      	movs	r5, #7
 8025364:	f891 106e 	ldrb.w	r1, [r1, #110]	; 0x6e
 8025368:	7219      	strb	r1, [r3, #8]
 802536a:	2400      	movs	r4, #0
 802536c:	701d      	strb	r5, [r3, #0]
 802536e:	2101      	movs	r1, #1
 8025370:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 8025374:	705d      	strb	r5, [r3, #1]
 8025376:	709c      	strb	r4, [r3, #2]
 8025378:	70dc      	strb	r4, [r3, #3]
 802537a:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 802537e:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 8025382:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 8025386:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 802538a:	bc30      	pop	{r4, r5}
 802538c:	f7fd bb92 	b.w	8022ab4 <MobleModelSendPacket>

08025390 <BnrgmHealthModel_ProcessPeriodGet>:
 8025390:	b430      	push	{r4, r5}
 8025392:	460a      	mov	r2, r1
 8025394:	6801      	ldr	r1, [r0, #0]
 8025396:	9b03      	ldr	r3, [sp, #12]
 8025398:	6a49      	ldr	r1, [r1, #36]	; 0x24
 802539a:	2537      	movs	r5, #55	; 0x37
 802539c:	f891 106d 	ldrb.w	r1, [r1, #109]	; 0x6d
 80253a0:	7219      	strb	r1, [r3, #8]
 80253a2:	2400      	movs	r4, #0
 80253a4:	701d      	strb	r5, [r3, #0]
 80253a6:	2101      	movs	r1, #1
 80253a8:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 80253ac:	705d      	strb	r5, [r3, #1]
 80253ae:	709c      	strb	r4, [r3, #2]
 80253b0:	70dc      	strb	r4, [r3, #3]
 80253b2:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 80253b6:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 80253ba:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 80253be:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 80253c2:	bc30      	pop	{r4, r5}
 80253c4:	f7fd bb76 	b.w	8022ab4 <MobleModelSendPacket>

080253c8 <MobleConfigModel_ProcessRelayGet>:
 80253c8:	b4f0      	push	{r4, r5, r6, r7}
 80253ca:	460a      	mov	r2, r1
 80253cc:	6801      	ldr	r1, [r0, #0]
 80253ce:	9b05      	ldr	r3, [sp, #20]
 80253d0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80253d2:	7b61      	ldrb	r1, [r4, #13]
 80253d4:	7b25      	ldrb	r5, [r4, #12]
 80253d6:	7c66      	ldrb	r6, [r4, #17]
 80253d8:	721e      	strb	r6, [r3, #8]
 80253da:	2728      	movs	r7, #40	; 0x28
 80253dc:	2400      	movs	r4, #0
 80253de:	ea45 05c1 	orr.w	r5, r5, r1, lsl #3
 80253e2:	701f      	strb	r7, [r3, #0]
 80253e4:	2102      	movs	r1, #2
 80253e6:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 80253ea:	705f      	strb	r7, [r3, #1]
 80253ec:	709c      	strb	r4, [r3, #2]
 80253ee:	70dc      	strb	r4, [r3, #3]
 80253f0:	725d      	strb	r5, [r3, #9]
 80253f2:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 80253f6:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 80253fa:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 80253fe:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 8025402:	2101      	movs	r1, #1
 8025404:	bcf0      	pop	{r4, r5, r6, r7}
 8025406:	f7fd bb55 	b.w	8022ab4 <MobleModelSendPacket>
	...

0802540c <MobleConfigModel_ProcessNodeIdentityGet>:
 802540c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025410:	4607      	mov	r7, r0
 8025412:	4618      	mov	r0, r3
 8025414:	f7f2 fa47 	bl	80178a6 <MobleConfigModelGetNetIdx>
 8025418:	4688      	mov	r8, r1
 802541a:	4606      	mov	r6, r0
 802541c:	f7f3 fdd4 	bl	8018fc8 <MoblePalCryptoHasNetworkKey>
 8025420:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025422:	4605      	mov	r5, r0
 8025424:	b170      	cbz	r0, 8025444 <MobleConfigModel_ProcessNodeIdentityGet+0x38>
 8025426:	4630      	mov	r0, r6
 8025428:	f7f3 fe28 	bl	801907c <MoblePalCryptoGetNodeIdntyState>
 802542c:	2300      	movs	r3, #0
 802542e:	4605      	mov	r5, r0
 8025430:	f8ad 6006 	strh.w	r6, [sp, #6]
 8025434:	b947      	cbnz	r7, 8025448 <MobleConfigModel_ProcessNodeIdentityGet+0x3c>
 8025436:	4b16      	ldr	r3, [pc, #88]	; (8025490 <MobleConfigModel_ProcessNodeIdentityGet+0x84>)
 8025438:	4a16      	ldr	r2, [pc, #88]	; (8025494 <MobleConfigModel_ProcessNodeIdentityGet+0x88>)
 802543a:	4817      	ldr	r0, [pc, #92]	; (8025498 <MobleConfigModel_ProcessNodeIdentityGet+0x8c>)
 802543c:	f640 113a 	movw	r1, #2362	; 0x93a
 8025440:	f003 fb2c 	bl	8028a9c <__assert_func>
 8025444:	2304      	movs	r3, #4
 8025446:	e7f3      	b.n	8025430 <MobleConfigModel_ProcessNodeIdentityGet+0x24>
 8025448:	2248      	movs	r2, #72	; 0x48
 802544a:	2600      	movs	r6, #0
 802544c:	7022      	strb	r2, [r4, #0]
 802544e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8025452:	7062      	strb	r2, [r4, #1]
 8025454:	7223      	strb	r3, [r4, #8]
 8025456:	f104 0209 	add.w	r2, r4, #9
 802545a:	f10d 0306 	add.w	r3, sp, #6
 802545e:	2101      	movs	r1, #1
 8025460:	70a6      	strb	r6, [r4, #2]
 8025462:	70e6      	strb	r6, [r4, #3]
 8025464:	4630      	mov	r0, r6
 8025466:	f7f2 fa25 	bl	80178b4 <MobleConfigModelPutKeyIdxs>
 802546a:	2304      	movs	r3, #4
 802546c:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8025470:	72e5      	strb	r5, [r4, #11]
 8025472:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8025476:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
 802547a:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 802547e:	4623      	mov	r3, r4
 8025480:	4642      	mov	r2, r8
 8025482:	4638      	mov	r0, r7
 8025484:	f7fd fb16 	bl	8022ab4 <MobleModelSendPacket>
 8025488:	b002      	add	sp, #8
 802548a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802548e:	bf00      	nop
 8025490:	08033489 	.word	0x08033489
 8025494:	080321a8 	.word	0x080321a8
 8025498:	0803349b 	.word	0x0803349b

0802549c <MobleConfigModel_ProcessKeyRefreshPhaseGet>:
 802549c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80254a0:	4606      	mov	r6, r0
 80254a2:	4618      	mov	r0, r3
 80254a4:	f7f2 f9ff 	bl	80178a6 <MobleConfigModelGetNetIdx>
 80254a8:	460f      	mov	r7, r1
 80254aa:	4601      	mov	r1, r0
 80254ac:	f7f5 f904 	bl	801a6b8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80254b0:	6833      	ldr	r3, [r6, #0]
 80254b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80254b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80254b6:	f8ad 1006 	strh.w	r1, [sp, #6]
 80254ba:	1e02      	subs	r2, r0, #0
 80254bc:	bfb8      	it	lt
 80254be:	2200      	movlt	r2, #0
 80254c0:	4413      	add	r3, r2
 80254c2:	f04f 0500 	mov.w	r5, #0
 80254c6:	f893 8014 	ldrb.w	r8, [r3, #20]
 80254ca:	70a5      	strb	r5, [r4, #2]
 80254cc:	f04f 0317 	mov.w	r3, #23
 80254d0:	bfb4      	ite	lt
 80254d2:	f04f 0c04 	movlt.w	ip, #4
 80254d6:	f04f 0c00 	movge.w	ip, #0
 80254da:	7023      	strb	r3, [r4, #0]
 80254dc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80254e0:	7063      	strb	r3, [r4, #1]
 80254e2:	f884 c008 	strb.w	ip, [r4, #8]
 80254e6:	f10d 0306 	add.w	r3, sp, #6
 80254ea:	f104 0209 	add.w	r2, r4, #9
 80254ee:	2101      	movs	r1, #1
 80254f0:	70e5      	strb	r5, [r4, #3]
 80254f2:	4628      	mov	r0, r5
 80254f4:	f7f2 f9de 	bl	80178b4 <MobleConfigModelPutKeyIdxs>
 80254f8:	2304      	movs	r3, #4
 80254fa:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 80254fe:	f884 800b 	strb.w	r8, [r4, #11]
 8025502:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 8025506:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
 802550a:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 802550e:	4623      	mov	r3, r4
 8025510:	463a      	mov	r2, r7
 8025512:	4630      	mov	r0, r6
 8025514:	f7fd face 	bl	8022ab4 <MobleModelSendPacket>
 8025518:	b002      	add	sp, #8
 802551a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802551e <MobleConfigModel_ProcessDefaultTTLGet>:
 802551e:	b430      	push	{r4, r5}
 8025520:	460a      	mov	r2, r1
 8025522:	6801      	ldr	r1, [r0, #0]
 8025524:	9b03      	ldr	r3, [sp, #12]
 8025526:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8025528:	250e      	movs	r5, #14
 802552a:	7a49      	ldrb	r1, [r1, #9]
 802552c:	7219      	strb	r1, [r3, #8]
 802552e:	2400      	movs	r4, #0
 8025530:	701d      	strb	r5, [r3, #0]
 8025532:	2101      	movs	r1, #1
 8025534:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 8025538:	705d      	strb	r5, [r3, #1]
 802553a:	709c      	strb	r4, [r3, #2]
 802553c:	70dc      	strb	r4, [r3, #3]
 802553e:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 8025542:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 8025546:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 802554a:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 802554e:	bc30      	pop	{r4, r5}
 8025550:	f7fd bab0 	b.w	8022ab4 <MobleModelSendPacket>

08025554 <MobleConfigModel_ProcessBeaconGet>:
 8025554:	b570      	push	{r4, r5, r6, lr}
 8025556:	460a      	mov	r2, r1
 8025558:	4910      	ldr	r1, [pc, #64]	; (802559c <MobleConfigModel_ProcessBeaconGet+0x48>)
 802555a:	9b05      	ldr	r3, [sp, #20]
 802555c:	f891 10ba 	ldrb.w	r1, [r1, #186]	; 0xba
 8025560:	b930      	cbnz	r0, 8025570 <MobleConfigModel_ProcessBeaconGet+0x1c>
 8025562:	4b0f      	ldr	r3, [pc, #60]	; (80255a0 <MobleConfigModel_ProcessBeaconGet+0x4c>)
 8025564:	4a0f      	ldr	r2, [pc, #60]	; (80255a4 <MobleConfigModel_ProcessBeaconGet+0x50>)
 8025566:	4810      	ldr	r0, [pc, #64]	; (80255a8 <MobleConfigModel_ProcessBeaconGet+0x54>)
 8025568:	f240 7165 	movw	r1, #1893	; 0x765
 802556c:	f003 fa96 	bl	8028a9c <__assert_func>
 8025570:	250b      	movs	r5, #11
 8025572:	2400      	movs	r4, #0
 8025574:	701d      	strb	r5, [r3, #0]
 8025576:	7219      	strb	r1, [r3, #8]
 8025578:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 802557c:	2101      	movs	r1, #1
 802557e:	705d      	strb	r5, [r3, #1]
 8025580:	709c      	strb	r4, [r3, #2]
 8025582:	70dc      	strb	r4, [r3, #3]
 8025584:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 8025588:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 802558c:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 8025590:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 8025594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025598:	f7fd ba8c 	b.w	8022ab4 <MobleModelSendPacket>
 802559c:	20000318 	.word	0x20000318
 80255a0:	08033489 	.word	0x08033489
 80255a4:	080324eb 	.word	0x080324eb
 80255a8:	0803349b 	.word	0x0803349b

080255ac <MobleBluemeshModelReadElement>:
 80255ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255b0:	f04f 0800 	mov.w	r8, #0
 80255b4:	b08c      	sub	sp, #48	; 0x30
 80255b6:	4607      	mov	r7, r0
 80255b8:	460e      	mov	r6, r1
 80255ba:	4614      	mov	r4, r2
 80255bc:	4641      	mov	r1, r8
 80255be:	2228      	movs	r2, #40	; 0x28
 80255c0:	a802      	add	r0, sp, #8
 80255c2:	461d      	mov	r5, r3
 80255c4:	f8cd 8000 	str.w	r8, [sp]
 80255c8:	f88d 8004 	strb.w	r8, [sp, #4]
 80255cc:	f003 faf8 	bl	8028bc0 <memset>
 80255d0:	b3a7      	cbz	r7, 802563c <MobleBluemeshModelReadElement+0x90>
 80255d2:	0164      	lsls	r4, r4, #5
 80255d4:	f005 050f 	and.w	r5, r5, #15
 80255d8:	f004 0420 	and.w	r4, r4, #32
 80255dc:	f065 052f 	orn	r5, r5, #47	; 0x2f
 80255e0:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 80255e4:	2330      	movs	r3, #48	; 0x30
 80255e6:	432c      	orrs	r4, r5
 80255e8:	f10d 0003 	add.w	r0, sp, #3
 80255ec:	f88d 4000 	strb.w	r4, [sp]
 80255f0:	f88d 3001 	strb.w	r3, [sp, #1]
 80255f4:	f88d 8002 	strb.w	r8, [sp, #2]
 80255f8:	f7f5 fdef 	bl	801b1da <MobleOutputStreamPutArray>
 80255fc:	88b3      	ldrh	r3, [r6, #4]
 80255fe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8025602:	88f3      	ldrh	r3, [r6, #6]
 8025604:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025608:	7af3      	ldrb	r3, [r6, #11]
 802560a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 802560e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8025612:	7a73      	ldrb	r3, [r6, #9]
 8025614:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8025618:	f10d 0303 	add.w	r3, sp, #3
 802561c:	466c      	mov	r4, sp
 802561e:	4418      	add	r0, r3
 8025620:	1b03      	subs	r3, r0, r4
 8025622:	4622      	mov	r2, r4
 8025624:	a902      	add	r1, sp, #8
 8025626:	4638      	mov	r0, r7
 8025628:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 802562c:	f7fd f9b6 	bl	802299c <MobleApplicationSendPacket>
 8025630:	2801      	cmp	r0, #1
 8025632:	bf98      	it	ls
 8025634:	4640      	movls	r0, r8
 8025636:	b00c      	add	sp, #48	; 0x30
 8025638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802563c:	2003      	movs	r0, #3
 802563e:	e7fa      	b.n	8025636 <MobleBluemeshModelReadElement+0x8a>

08025640 <MobleLibraryRequestData>:
 8025640:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025642:	4e0e      	ldr	r6, [pc, #56]	; (802567c <MobleLibraryRequestData+0x3c>)
 8025644:	f8d6 56f0 	ldr.w	r5, [r6, #1776]	; 0x6f0
 8025648:	b1b5      	cbz	r5, 8025678 <MobleLibraryRequestData+0x38>
 802564a:	8884      	ldrh	r4, [r0, #4]
 802564c:	b1a4      	cbz	r4, 8025678 <MobleLibraryRequestData+0x38>
 802564e:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8025652:	b2a4      	uxth	r4, r4
 8025654:	2cfb      	cmp	r4, #251	; 0xfb
 8025656:	d90f      	bls.n	8025678 <MobleLibraryRequestData+0x38>
 8025658:	2a10      	cmp	r2, #16
 802565a:	d80d      	bhi.n	8025678 <MobleLibraryRequestData+0x38>
 802565c:	f896 46b4 	ldrb.w	r4, [r6, #1716]	; 0x6b4
 8025660:	b154      	cbz	r4, 8025678 <MobleLibraryRequestData+0x38>
 8025662:	9c06      	ldr	r4, [sp, #24]
 8025664:	e9cd 3400 	strd	r3, r4, [sp]
 8025668:	4613      	mov	r3, r2
 802566a:	460a      	mov	r2, r1
 802566c:	4601      	mov	r1, r0
 802566e:	4628      	mov	r0, r5
 8025670:	f7ff ff9c 	bl	80255ac <MobleBluemeshModelReadElement>
 8025674:	b002      	add	sp, #8
 8025676:	bd70      	pop	{r4, r5, r6, pc}
 8025678:	2002      	movs	r0, #2
 802567a:	e7fb      	b.n	8025674 <MobleLibraryRequestData+0x34>
 802567c:	20002508 	.word	0x20002508

08025680 <BLEMesh_ReadRemoteData>:
 8025680:	b507      	push	{r0, r1, r2, lr}
 8025682:	9300      	str	r3, [sp, #0]
 8025684:	4613      	mov	r3, r2
 8025686:	460a      	mov	r2, r1
 8025688:	2101      	movs	r1, #1
 802568a:	f7ff ffd9 	bl	8025640 <MobleLibraryRequestData>
 802568e:	b003      	add	sp, #12
 8025690:	f85d fb04 	ldr.w	pc, [sp], #4

08025694 <MobleBluemeshModelWriteElement>:
 8025694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025698:	4e2e      	ldr	r6, [pc, #184]	; (8025754 <MobleBluemeshModelWriteElement+0xc0>)
 802569a:	b08b      	sub	sp, #44	; 0x2c
 802569c:	4607      	mov	r7, r0
 802569e:	f8b6 094e 	ldrh.w	r0, [r6, #2382]	; 0x94e
 80256a2:	4689      	mov	r9, r1
 80256a4:	4690      	mov	r8, r2
 80256a6:	e9dd ab15 	ldrd	sl, fp, [sp, #84]	; 0x54
 80256aa:	461d      	mov	r5, r3
 80256ac:	f7f5 fbe2 	bl	801ae74 <MobleMemAlloc>
 80256b0:	2228      	movs	r2, #40	; 0x28
 80256b2:	4604      	mov	r4, r0
 80256b4:	2100      	movs	r1, #0
 80256b6:	4668      	mov	r0, sp
 80256b8:	f003 fa82 	bl	8028bc0 <memset>
 80256bc:	2c00      	cmp	r4, #0
 80256be:	d047      	beq.n	8025750 <MobleBluemeshModelWriteElement+0xbc>
 80256c0:	b157      	cbz	r7, 80256d8 <MobleBluemeshModelWriteElement+0x44>
 80256c2:	f1ba 0f00 	cmp.w	sl, #0
 80256c6:	d007      	beq.n	80256d8 <MobleBluemeshModelWriteElement+0x44>
 80256c8:	f1bb 0f00 	cmp.w	fp, #0
 80256cc:	d004      	beq.n	80256d8 <MobleBluemeshModelWriteElement+0x44>
 80256ce:	f8b6 394e 	ldrh.w	r3, [r6, #2382]	; 0x94e
 80256d2:	3b04      	subs	r3, #4
 80256d4:	455b      	cmp	r3, fp
 80256d6:	d207      	bcs.n	80256e8 <MobleBluemeshModelWriteElement+0x54>
 80256d8:	4620      	mov	r0, r4
 80256da:	f7f5 fc55 	bl	801af88 <MobleMemFree>
 80256de:	2503      	movs	r5, #3
 80256e0:	4628      	mov	r0, r5
 80256e2:	b00b      	add	sp, #44	; 0x2c
 80256e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256e8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80256ec:	016d      	lsls	r5, r5, #5
 80256ee:	f003 030f 	and.w	r3, r3, #15
 80256f2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80256f6:	f005 0520 	and.w	r5, r5, #32
 80256fa:	431d      	orrs	r5, r3
 80256fc:	2600      	movs	r6, #0
 80256fe:	2330      	movs	r3, #48	; 0x30
 8025700:	7025      	strb	r5, [r4, #0]
 8025702:	1ce5      	adds	r5, r4, #3
 8025704:	7063      	strb	r3, [r4, #1]
 8025706:	465a      	mov	r2, fp
 8025708:	4651      	mov	r1, sl
 802570a:	4628      	mov	r0, r5
 802570c:	70a6      	strb	r6, [r4, #2]
 802570e:	f7f5 fd64 	bl	801b1da <MobleOutputStreamPutArray>
 8025712:	683b      	ldr	r3, [r7, #0]
 8025714:	f8ad 601a 	strh.w	r6, [sp, #26]
 8025718:	885a      	ldrh	r2, [r3, #2]
 802571a:	f8ad 9016 	strh.w	r9, [sp, #22]
 802571e:	4428      	add	r0, r5
 8025720:	4490      	add	r8, r2
 8025722:	1b03      	subs	r3, r0, r4
 8025724:	4622      	mov	r2, r4
 8025726:	4669      	mov	r1, sp
 8025728:	4638      	mov	r0, r7
 802572a:	f8ad 8014 	strh.w	r8, [sp, #20]
 802572e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8025732:	f8ad 6020 	strh.w	r6, [sp, #32]
 8025736:	f7fd f931 	bl	802299c <MobleApplicationSendPacket>
 802573a:	4605      	mov	r5, r0
 802573c:	2d01      	cmp	r5, #1
 802573e:	4620      	mov	r0, r4
 8025740:	d902      	bls.n	8025748 <MobleBluemeshModelWriteElement+0xb4>
 8025742:	f7f5 fc21 	bl	801af88 <MobleMemFree>
 8025746:	e7cb      	b.n	80256e0 <MobleBluemeshModelWriteElement+0x4c>
 8025748:	f7f5 fc1e 	bl	801af88 <MobleMemFree>
 802574c:	4635      	mov	r5, r6
 802574e:	e7c7      	b.n	80256e0 <MobleBluemeshModelWriteElement+0x4c>
 8025750:	4625      	mov	r5, r4
 8025752:	e7c5      	b.n	80256e0 <MobleBluemeshModelWriteElement+0x4c>
 8025754:	20001410 	.word	0x20001410

08025758 <MobleLibrarySendData>:
 8025758:	b5f0      	push	{r4, r5, r6, r7, lr}
 802575a:	4f10      	ldr	r7, [pc, #64]	; (802579c <MobleLibrarySendData+0x44>)
 802575c:	b085      	sub	sp, #20
 802575e:	f8d7 56f0 	ldr.w	r5, [r7, #1776]	; 0x6f0
 8025762:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025764:	b1c5      	cbz	r5, 8025798 <MobleLibrarySendData+0x40>
 8025766:	b1bb      	cbz	r3, 8025798 <MobleLibrarySendData+0x40>
 8025768:	b1b6      	cbz	r6, 8025798 <MobleLibrarySendData+0x40>
 802576a:	b1a8      	cbz	r0, 8025798 <MobleLibrarySendData+0x40>
 802576c:	f500 7480 	add.w	r4, r0, #256	; 0x100
 8025770:	b2a4      	uxth	r4, r4
 8025772:	2cfb      	cmp	r4, #251	; 0xfb
 8025774:	d910      	bls.n	8025798 <MobleLibrarySendData+0x40>
 8025776:	2a10      	cmp	r2, #16
 8025778:	d80e      	bhi.n	8025798 <MobleLibrarySendData+0x40>
 802577a:	f897 46b4 	ldrb.w	r4, [r7, #1716]	; 0x6b4
 802577e:	b15c      	cbz	r4, 8025798 <MobleLibrarySendData+0x40>
 8025780:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8025784:	9200      	str	r2, [sp, #0]
 8025786:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 802578a:	460a      	mov	r2, r1
 802578c:	4601      	mov	r1, r0
 802578e:	4628      	mov	r0, r5
 8025790:	f7ff ff80 	bl	8025694 <MobleBluemeshModelWriteElement>
 8025794:	b005      	add	sp, #20
 8025796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025798:	2002      	movs	r0, #2
 802579a:	e7fb      	b.n	8025794 <MobleLibrarySendData+0x3c>
 802579c:	20002508 	.word	0x20002508

080257a0 <MobleBluemeshModelWritePublishElement>:
 80257a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257a4:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8025894 <MobleBluemeshModelWritePublishElement+0xf4>
 80257a8:	b08d      	sub	sp, #52	; 0x34
 80257aa:	4607      	mov	r7, r0
 80257ac:	f8ba 094e 	ldrh.w	r0, [sl, #2382]	; 0x94e
 80257b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80257b4:	4689      	mov	r9, r1
 80257b6:	4615      	mov	r5, r2
 80257b8:	461e      	mov	r6, r3
 80257ba:	f7f5 fb5b 	bl	801ae74 <MobleMemAlloc>
 80257be:	f8d7 b000 	ldr.w	fp, [r7]
 80257c2:	464a      	mov	r2, r9
 80257c4:	4604      	mov	r4, r0
 80257c6:	4629      	mov	r1, r5
 80257c8:	f89b 001c 	ldrb.w	r0, [fp, #28]
 80257cc:	f7f4 ff30 	bl	801a630 <MoblePalCrypto_GetModelPublicationParameters>
 80257d0:	2228      	movs	r2, #40	; 0x28
 80257d2:	4681      	mov	r9, r0
 80257d4:	2100      	movs	r1, #0
 80257d6:	a802      	add	r0, sp, #8
 80257d8:	f003 f9f2 	bl	8028bc0 <memset>
 80257dc:	2c00      	cmp	r4, #0
 80257de:	d055      	beq.n	802588c <MobleBluemeshModelWritePublishElement+0xec>
 80257e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80257e2:	b13b      	cbz	r3, 80257f4 <MobleBluemeshModelWritePublishElement+0x54>
 80257e4:	f1b8 0f00 	cmp.w	r8, #0
 80257e8:	d004      	beq.n	80257f4 <MobleBluemeshModelWritePublishElement+0x54>
 80257ea:	f8ba 394e 	ldrh.w	r3, [sl, #2382]	; 0x94e
 80257ee:	3b04      	subs	r3, #4
 80257f0:	4543      	cmp	r3, r8
 80257f2:	d207      	bcs.n	8025804 <MobleBluemeshModelWritePublishElement+0x64>
 80257f4:	4620      	mov	r0, r4
 80257f6:	f7f5 fbc7 	bl	801af88 <MobleMemFree>
 80257fa:	2503      	movs	r5, #3
 80257fc:	4628      	mov	r0, r5
 80257fe:	b00d      	add	sp, #52	; 0x34
 8025800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025804:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8025808:	9301      	str	r3, [sp, #4]
 802580a:	2b00      	cmp	r3, #0
 802580c:	d040      	beq.n	8025890 <MobleBluemeshModelWritePublishElement+0xf0>
 802580e:	f8b9 9006 	ldrh.w	r9, [r9, #6]
 8025812:	4648      	mov	r0, r9
 8025814:	f7f4 faf0 	bl	8019df8 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 8025818:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 802581c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802581e:	1aad      	subs	r5, r5, r2
 8025820:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8025824:	0176      	lsls	r6, r6, #5
 8025826:	f002 020f 	and.w	r2, r2, #15
 802582a:	f062 023f 	orn	r2, r2, #63	; 0x3f
 802582e:	f006 0620 	and.w	r6, r6, #32
 8025832:	4316      	orrs	r6, r2
 8025834:	7026      	strb	r6, [r4, #0]
 8025836:	2230      	movs	r2, #48	; 0x30
 8025838:	2600      	movs	r6, #0
 802583a:	4682      	mov	sl, r0
 802583c:	7062      	strb	r2, [r4, #1]
 802583e:	1ce0      	adds	r0, r4, #3
 8025840:	4642      	mov	r2, r8
 8025842:	70a6      	strb	r6, [r4, #2]
 8025844:	4680      	mov	r8, r0
 8025846:	f7f5 fcc8 	bl	801b1da <MobleOutputStreamPutArray>
 802584a:	683a      	ldr	r2, [r7, #0]
 802584c:	9b01      	ldr	r3, [sp, #4]
 802584e:	8852      	ldrh	r2, [r2, #2]
 8025850:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025854:	4440      	add	r0, r8
 8025856:	b2ed      	uxtb	r5, r5
 8025858:	4415      	add	r5, r2
 802585a:	1b03      	subs	r3, r0, r4
 802585c:	4622      	mov	r2, r4
 802585e:	a902      	add	r1, sp, #8
 8025860:	4638      	mov	r0, r7
 8025862:	f8ad 501c 	strh.w	r5, [sp, #28]
 8025866:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 802586a:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
 802586e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8025872:	f7fd f893 	bl	802299c <MobleApplicationSendPacket>
 8025876:	4605      	mov	r5, r0
 8025878:	2d01      	cmp	r5, #1
 802587a:	4620      	mov	r0, r4
 802587c:	d902      	bls.n	8025884 <MobleBluemeshModelWritePublishElement+0xe4>
 802587e:	f7f5 fb83 	bl	801af88 <MobleMemFree>
 8025882:	e7bb      	b.n	80257fc <MobleBluemeshModelWritePublishElement+0x5c>
 8025884:	f7f5 fb80 	bl	801af88 <MobleMemFree>
 8025888:	4635      	mov	r5, r6
 802588a:	e7b7      	b.n	80257fc <MobleBluemeshModelWritePublishElement+0x5c>
 802588c:	4625      	mov	r5, r4
 802588e:	e7b5      	b.n	80257fc <MobleBluemeshModelWritePublishElement+0x5c>
 8025890:	2502      	movs	r5, #2
 8025892:	e7b3      	b.n	80257fc <MobleBluemeshModelWritePublishElement+0x5c>
 8025894:	20001410 	.word	0x20001410

08025898 <MobleLibrarySendRemoteData>:
 8025898:	b5f0      	push	{r4, r5, r6, r7, lr}
 802589a:	4f10      	ldr	r7, [pc, #64]	; (80258dc <MobleLibrarySendRemoteData+0x44>)
 802589c:	b085      	sub	sp, #20
 802589e:	f8d7 56f0 	ldr.w	r5, [r7, #1776]	; 0x6f0
 80258a2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80258a4:	b1c5      	cbz	r5, 80258d8 <MobleLibrarySendRemoteData+0x40>
 80258a6:	b1bb      	cbz	r3, 80258d8 <MobleLibrarySendRemoteData+0x40>
 80258a8:	b1b6      	cbz	r6, 80258d8 <MobleLibrarySendRemoteData+0x40>
 80258aa:	b1a9      	cbz	r1, 80258d8 <MobleLibrarySendRemoteData+0x40>
 80258ac:	f501 7480 	add.w	r4, r1, #256	; 0x100
 80258b0:	b2a4      	uxth	r4, r4
 80258b2:	2cfb      	cmp	r4, #251	; 0xfb
 80258b4:	d910      	bls.n	80258d8 <MobleLibrarySendRemoteData+0x40>
 80258b6:	2a10      	cmp	r2, #16
 80258b8:	d80e      	bhi.n	80258d8 <MobleLibrarySendRemoteData+0x40>
 80258ba:	f897 46b4 	ldrb.w	r4, [r7, #1716]	; 0x6b4
 80258be:	b15c      	cbz	r4, 80258d8 <MobleLibrarySendRemoteData+0x40>
 80258c0:	e9cd 3601 	strd	r3, r6, [sp, #4]
 80258c4:	9200      	str	r2, [sp, #0]
 80258c6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80258ca:	460a      	mov	r2, r1
 80258cc:	4601      	mov	r1, r0
 80258ce:	4628      	mov	r0, r5
 80258d0:	f7ff ff66 	bl	80257a0 <MobleBluemeshModelWritePublishElement>
 80258d4:	b005      	add	sp, #20
 80258d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80258d8:	2002      	movs	r0, #2
 80258da:	e7fb      	b.n	80258d4 <MobleLibrarySendRemoteData+0x3c>
 80258dc:	20002508 	.word	0x20002508

080258e0 <MobleBluemeshModelResponse>:
 80258e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258e4:	b08b      	sub	sp, #44	; 0x2c
 80258e6:	e9dd 9614 	ldrd	r9, r6, [sp, #80]	; 0x50
 80258ea:	4680      	mov	r8, r0
 80258ec:	468a      	mov	sl, r1
 80258ee:	4617      	mov	r7, r2
 80258f0:	2100      	movs	r1, #0
 80258f2:	2228      	movs	r2, #40	; 0x28
 80258f4:	4668      	mov	r0, sp
 80258f6:	461d      	mov	r5, r3
 80258f8:	f003 f962 	bl	8028bc0 <memset>
 80258fc:	f1b9 0f00 	cmp.w	r9, #0
 8025900:	d100      	bne.n	8025904 <MobleBluemeshModelResponse+0x24>
 8025902:	b996      	cbnz	r6, 802592a <MobleBluemeshModelResponse+0x4a>
 8025904:	f8df b08c 	ldr.w	fp, [pc, #140]	; 8025994 <MobleBluemeshModelResponse+0xb4>
 8025908:	f8bb 094e 	ldrh.w	r0, [fp, #2382]	; 0x94e
 802590c:	f7f5 fab2 	bl	801ae74 <MobleMemAlloc>
 8025910:	4604      	mov	r4, r0
 8025912:	b3c8      	cbz	r0, 8025988 <MobleBluemeshModelResponse+0xa8>
 8025914:	f1b8 0f00 	cmp.w	r8, #0
 8025918:	d004      	beq.n	8025924 <MobleBluemeshModelResponse+0x44>
 802591a:	f8bb 394e 	ldrh.w	r3, [fp, #2382]	; 0x94e
 802591e:	3b03      	subs	r3, #3
 8025920:	42b3      	cmp	r3, r6
 8025922:	d204      	bcs.n	802592e <MobleBluemeshModelResponse+0x4e>
 8025924:	4620      	mov	r0, r4
 8025926:	f7f5 fb2f 	bl	801af88 <MobleMemFree>
 802592a:	2503      	movs	r5, #3
 802592c:	e028      	b.n	8025980 <MobleBluemeshModelResponse+0xa0>
 802592e:	f005 050f 	and.w	r5, r5, #15
 8025932:	f065 052f 	orn	r5, r5, #47	; 0x2f
 8025936:	7005      	strb	r5, [r0, #0]
 8025938:	f8a0 a001 	strh.w	sl, [r0, #1]
 802593c:	f1b9 0f00 	cmp.w	r9, #0
 8025940:	d005      	beq.n	802594e <MobleBluemeshModelResponse+0x6e>
 8025942:	b126      	cbz	r6, 802594e <MobleBluemeshModelResponse+0x6e>
 8025944:	4632      	mov	r2, r6
 8025946:	4649      	mov	r1, r9
 8025948:	3003      	adds	r0, #3
 802594a:	f7f5 fc46 	bl	801b1da <MobleOutputStreamPutArray>
 802594e:	2300      	movs	r3, #0
 8025950:	f8ad 301a 	strh.w	r3, [sp, #26]
 8025954:	88fb      	ldrh	r3, [r7, #6]
 8025956:	f8ad 3014 	strh.w	r3, [sp, #20]
 802595a:	88bb      	ldrh	r3, [r7, #4]
 802595c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025960:	897b      	ldrh	r3, [r7, #10]
 8025962:	ba5b      	rev16	r3, r3
 8025964:	f8ad 301c 	strh.w	r3, [sp, #28]
 8025968:	4622      	mov	r2, r4
 802596a:	1cf3      	adds	r3, r6, #3
 802596c:	4669      	mov	r1, sp
 802596e:	4640      	mov	r0, r8
 8025970:	f7fd f814 	bl	802299c <MobleApplicationSendPacket>
 8025974:	2801      	cmp	r0, #1
 8025976:	4605      	mov	r5, r0
 8025978:	d906      	bls.n	8025988 <MobleBluemeshModelResponse+0xa8>
 802597a:	4620      	mov	r0, r4
 802597c:	f7f5 fb04 	bl	801af88 <MobleMemFree>
 8025980:	4628      	mov	r0, r5
 8025982:	b00b      	add	sp, #44	; 0x2c
 8025984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025988:	4620      	mov	r0, r4
 802598a:	f7f5 fafd 	bl	801af88 <MobleMemFree>
 802598e:	2500      	movs	r5, #0
 8025990:	e7f6      	b.n	8025980 <MobleBluemeshModelResponse+0xa0>
 8025992:	bf00      	nop
 8025994:	20001410 	.word	0x20001410

08025998 <VendorModel_SendResponse>:
 8025998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802599a:	4c08      	ldr	r4, [pc, #32]	; (80259bc <VendorModel_SendResponse+0x24>)
 802599c:	f8d4 46f0 	ldr.w	r4, [r4, #1776]	; 0x6f0
 80259a0:	b154      	cbz	r4, 80259b8 <VendorModel_SendResponse+0x20>
 80259a2:	9d06      	ldr	r5, [sp, #24]
 80259a4:	e9cd 3500 	strd	r3, r5, [sp]
 80259a8:	4613      	mov	r3, r2
 80259aa:	460a      	mov	r2, r1
 80259ac:	4601      	mov	r1, r0
 80259ae:	4620      	mov	r0, r4
 80259b0:	f7ff ff96 	bl	80258e0 <MobleBluemeshModelResponse>
 80259b4:	b003      	add	sp, #12
 80259b6:	bd30      	pop	{r4, r5, pc}
 80259b8:	2002      	movs	r0, #2
 80259ba:	e7fb      	b.n	80259b4 <VendorModel_SendResponse+0x1c>
 80259bc:	20002508 	.word	0x20002508

080259c0 <Test_UpperTester_Send02>:
 80259c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80259c4:	4b2c      	ldr	r3, [pc, #176]	; (8025a78 <Test_UpperTester_Send02+0xb8>)
 80259c6:	b09d      	sub	sp, #116	; 0x74
 80259c8:	aa0f      	add	r2, sp, #60	; 0x3c
 80259ca:	4604      	mov	r4, r0
 80259cc:	460f      	mov	r7, r1
 80259ce:	f103 0c30 	add.w	ip, r3, #48	; 0x30
 80259d2:	4616      	mov	r6, r2
 80259d4:	6818      	ldr	r0, [r3, #0]
 80259d6:	6859      	ldr	r1, [r3, #4]
 80259d8:	4615      	mov	r5, r2
 80259da:	c503      	stmia	r5!, {r0, r1}
 80259dc:	3308      	adds	r3, #8
 80259de:	4563      	cmp	r3, ip
 80259e0:	462a      	mov	r2, r5
 80259e2:	d1f7      	bne.n	80259d4 <Test_UpperTester_Send02+0x14>
 80259e4:	881b      	ldrh	r3, [r3, #0]
 80259e6:	802b      	strh	r3, [r5, #0]
 80259e8:	4b24      	ldr	r3, [pc, #144]	; (8025a7c <Test_UpperTester_Send02+0xbc>)
 80259ea:	aa01      	add	r2, sp, #4
 80259ec:	f103 0e10 	add.w	lr, r3, #16
 80259f0:	4615      	mov	r5, r2
 80259f2:	6818      	ldr	r0, [r3, #0]
 80259f4:	6859      	ldr	r1, [r3, #4]
 80259f6:	4694      	mov	ip, r2
 80259f8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80259fc:	3308      	adds	r3, #8
 80259fe:	4573      	cmp	r3, lr
 8025a00:	4662      	mov	r2, ip
 8025a02:	d1f6      	bne.n	80259f2 <Test_UpperTester_Send02+0x32>
 8025a04:	f10d 0814 	add.w	r8, sp, #20
 8025a08:	2228      	movs	r2, #40	; 0x28
 8025a0a:	2100      	movs	r1, #0
 8025a0c:	4640      	mov	r0, r8
 8025a0e:	f003 f8d7 	bl	8028bc0 <memset>
 8025a12:	f897 9000 	ldrb.w	r9, [r7]
 8025a16:	f8b7 7001 	ldrh.w	r7, [r7, #1]
 8025a1a:	ba7f      	rev16	r7, r7
 8025a1c:	f407 4340 	and.w	r3, r7, #49152	; 0xc000
 8025a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8025a24:	d112      	bne.n	8025a4c <Test_UpperTester_Send02+0x8c>
 8025a26:	4b16      	ldr	r3, [pc, #88]	; (8025a80 <Test_UpperTester_Send02+0xc0>)
 8025a28:	685b      	ldr	r3, [r3, #4]
 8025a2a:	4628      	mov	r0, r5
 8025a2c:	695b      	ldr	r3, [r3, #20]
 8025a2e:	4798      	blx	r3
 8025a30:	6822      	ldr	r2, [r4, #0]
 8025a32:	320c      	adds	r2, #12
 8025a34:	462b      	mov	r3, r5
 8025a36:	cb03      	ldmia	r3!, {r0, r1}
 8025a38:	4543      	cmp	r3, r8
 8025a3a:	6010      	str	r0, [r2, #0]
 8025a3c:	6051      	str	r1, [r2, #4]
 8025a3e:	461d      	mov	r5, r3
 8025a40:	f102 0208 	add.w	r2, r2, #8
 8025a44:	d1f6      	bne.n	8025a34 <Test_UpperTester_Send02+0x74>
 8025a46:	6820      	ldr	r0, [r4, #0]
 8025a48:	f7f7 fa00 	bl	801ce4c <MobleConfigNetworkSave>
 8025a4c:	6822      	ldr	r2, [r4, #0]
 8025a4e:	2300      	movs	r3, #0
 8025a50:	8852      	ldrh	r2, [r2, #2]
 8025a52:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8025a56:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8025a5a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8025a5e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8025a62:	4632      	mov	r2, r6
 8025a64:	464b      	mov	r3, r9
 8025a66:	4641      	mov	r1, r8
 8025a68:	4620      	mov	r0, r4
 8025a6a:	f8ad 702a 	strh.w	r7, [sp, #42]	; 0x2a
 8025a6e:	f7fc ff95 	bl	802299c <MobleApplicationSendPacket>
 8025a72:	b01d      	add	sp, #116	; 0x74
 8025a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025a78:	08033c57 	.word	0x08033c57
 8025a7c:	08033c8a 	.word	0x08033c8a
 8025a80:	20000318 	.word	0x20000318

08025a84 <MobleTransSendControl>:
 8025a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025a88:	b088      	sub	sp, #32
 8025a8a:	4605      	mov	r5, r0
 8025a8c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8025a8e:	2e0e      	cmp	r6, #14
 8025a90:	460c      	mov	r4, r1
 8025a92:	4690      	mov	r8, r2
 8025a94:	461f      	mov	r7, r3
 8025a96:	dd06      	ble.n	8025aa6 <MobleTransSendControl+0x22>
 8025a98:	4b15      	ldr	r3, [pc, #84]	; (8025af0 <MobleTransSendControl+0x6c>)
 8025a9a:	4a16      	ldr	r2, [pc, #88]	; (8025af4 <MobleTransSendControl+0x70>)
 8025a9c:	4816      	ldr	r0, [pc, #88]	; (8025af8 <MobleTransSendControl+0x74>)
 8025a9e:	f240 412f 	movw	r1, #1071	; 0x42f
 8025aa2:	f002 fffb 	bl	8028a9c <__assert_func>
 8025aa6:	2210      	movs	r2, #16
 8025aa8:	eb0d 0002 	add.w	r0, sp, r2
 8025aac:	2100      	movs	r1, #0
 8025aae:	f003 f887 	bl	8028bc0 <memset>
 8025ab2:	2303      	movs	r3, #3
 8025ab4:	a904      	add	r1, sp, #16
 8025ab6:	4668      	mov	r0, sp
 8025ab8:	f88d 3000 	strb.w	r3, [sp]
 8025abc:	f88d 8001 	strb.w	r8, [sp, #1]
 8025ac0:	f7f6 fc96 	bl	801c3f0 <MobleTransportRenderHdr>
 8025ac4:	4632      	mov	r2, r6
 8025ac6:	4639      	mov	r1, r7
 8025ac8:	f10d 0011 	add.w	r0, sp, #17
 8025acc:	f003 f850 	bl	8028b70 <memcpy>
 8025ad0:	8b63      	ldrh	r3, [r4, #26]
 8025ad2:	f043 0308 	orr.w	r3, r3, #8
 8025ad6:	8363      	strh	r3, [r4, #26]
 8025ad8:	682b      	ldr	r3, [r5, #0]
 8025ada:	885b      	ldrh	r3, [r3, #2]
 8025adc:	82a3      	strh	r3, [r4, #20]
 8025ade:	aa04      	add	r2, sp, #16
 8025ae0:	1c73      	adds	r3, r6, #1
 8025ae2:	4621      	mov	r1, r4
 8025ae4:	4628      	mov	r0, r5
 8025ae6:	f7fc fc45 	bl	8022374 <MobleNetworkSendData>
 8025aea:	b008      	add	sp, #32
 8025aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025af0:	08033c9b 	.word	0x08033c9b
 8025af4:	08032525 	.word	0x08032525
 8025af8:	08033780 	.word	0x08033780

08025afc <MobleTransportSendHeartbeat>:
 8025afc:	b507      	push	{r0, r1, r2, lr}
 8025afe:	9300      	str	r3, [sp, #0]
 8025b00:	4613      	mov	r3, r2
 8025b02:	220a      	movs	r2, #10
 8025b04:	f7ff ffbe 	bl	8025a84 <MobleTransSendControl>
 8025b08:	b003      	add	sp, #12
 8025b0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08025b10 <BnrgmConfigModelSendHeartbeat>:
 8025b10:	b530      	push	{r4, r5, lr}
 8025b12:	b08d      	sub	sp, #52	; 0x34
 8025b14:	4604      	mov	r4, r0
 8025b16:	2228      	movs	r2, #40	; 0x28
 8025b18:	2100      	movs	r1, #0
 8025b1a:	a802      	add	r0, sp, #8
 8025b1c:	f003 f850 	bl	8028bc0 <memset>
 8025b20:	4b1c      	ldr	r3, [pc, #112]	; (8025b94 <BnrgmConfigModelSendHeartbeat+0x84>)
 8025b22:	f8b3 50ca 	ldrh.w	r5, [r3, #202]	; 0xca
 8025b26:	b395      	cbz	r5, 8025b8e <BnrgmConfigModelSendHeartbeat+0x7e>
 8025b28:	f893 10bd 	ldrb.w	r1, [r3, #189]	; 0xbd
 8025b2c:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 8025b30:	2902      	cmp	r1, #2
 8025b32:	bf28      	it	cs
 8025b34:	2100      	movcs	r1, #0
 8025b36:	2a01      	cmp	r2, #1
 8025b38:	bf98      	it	ls
 8025b3a:	ea41 0142 	orrls.w	r1, r1, r2, lsl #1
 8025b3e:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 8025b42:	b289      	uxth	r1, r1
 8025b44:	2a01      	cmp	r2, #1
 8025b46:	bf98      	it	ls
 8025b48:	ea41 0182 	orrls.w	r1, r1, r2, lsl #2
 8025b4c:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 8025b50:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8025b54:	f88d 3004 	strb.w	r3, [sp, #4]
 8025b58:	2a01      	cmp	r2, #1
 8025b5a:	bf98      	it	ls
 8025b5c:	ea41 01c2 	orrls.w	r1, r1, r2, lsl #3
 8025b60:	f10d 0005 	add.w	r0, sp, #5
 8025b64:	2202      	movs	r2, #2
 8025b66:	f7f5 fb45 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 8025b6a:	f88d 3017 	strb.w	r3, [sp, #23]
 8025b6e:	2302      	movs	r3, #2
 8025b70:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8025b74:	aa01      	add	r2, sp, #4
 8025b76:	2303      	movs	r3, #3
 8025b78:	a902      	add	r1, sp, #8
 8025b7a:	4620      	mov	r0, r4
 8025b7c:	f8ad 501e 	strh.w	r5, [sp, #30]
 8025b80:	f7ff ffbc 	bl	8025afc <MobleTransportSendHeartbeat>
 8025b84:	2800      	cmp	r0, #0
 8025b86:	bf18      	it	ne
 8025b88:	2002      	movne	r0, #2
 8025b8a:	b00d      	add	sp, #52	; 0x34
 8025b8c:	bd30      	pop	{r4, r5, pc}
 8025b8e:	2001      	movs	r0, #1
 8025b90:	e7fb      	b.n	8025b8a <BnrgmConfigModelSendHeartbeat+0x7a>
 8025b92:	bf00      	nop
 8025b94:	20000318 	.word	0x20000318

08025b98 <MobleConfigModel_ProcessRelaySet>:
 8025b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b9a:	4605      	mov	r5, r0
 8025b9c:	4618      	mov	r0, r3
 8025b9e:	460a      	mov	r2, r1
 8025ba0:	7801      	ldrb	r1, [r0, #0]
 8025ba2:	9b07      	ldr	r3, [sp, #28]
 8025ba4:	2901      	cmp	r1, #1
 8025ba6:	d839      	bhi.n	8025c1c <MobleConfigModel_ProcessRelaySet+0x84>
 8025ba8:	682c      	ldr	r4, [r5, #0]
 8025baa:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8025bac:	7c66      	ldrb	r6, [r4, #17]
 8025bae:	2e02      	cmp	r6, #2
 8025bb0:	d006      	beq.n	8025bc0 <MobleConfigModel_ProcessRelaySet+0x28>
 8025bb2:	7840      	ldrb	r0, [r0, #1]
 8025bb4:	7461      	strb	r1, [r4, #17]
 8025bb6:	f000 0107 	and.w	r1, r0, #7
 8025bba:	08c0      	lsrs	r0, r0, #3
 8025bbc:	7321      	strb	r1, [r4, #12]
 8025bbe:	7360      	strb	r0, [r4, #13]
 8025bc0:	7b21      	ldrb	r1, [r4, #12]
 8025bc2:	7c67      	ldrb	r7, [r4, #17]
 8025bc4:	7b64      	ldrb	r4, [r4, #13]
 8025bc6:	721f      	strb	r7, [r3, #8]
 8025bc8:	ea41 01c4 	orr.w	r1, r1, r4, lsl #3
 8025bcc:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8025bd0:	2000      	movs	r0, #0
 8025bd2:	f883 c000 	strb.w	ip, [r3]
 8025bd6:	7259      	strb	r1, [r3, #9]
 8025bd8:	f06f 0c7f 	mvn.w	ip, #127	; 0x7f
 8025bdc:	2102      	movs	r1, #2
 8025bde:	7098      	strb	r0, [r3, #2]
 8025be0:	70d8      	strb	r0, [r3, #3]
 8025be2:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 8025be6:	f883 00a4 	strb.w	r0, [r3, #164]	; 0xa4
 8025bea:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
 8025bee:	f883 00a6 	strb.w	r0, [r3, #166]	; 0xa6
 8025bf2:	f883 c001 	strb.w	ip, [r3, #1]
 8025bf6:	2101      	movs	r1, #1
 8025bf8:	4628      	mov	r0, r5
 8025bfa:	f7fc ff5b 	bl	8022ab4 <MobleModelSendPacket>
 8025bfe:	4604      	mov	r4, r0
 8025c00:	b950      	cbnz	r0, 8025c18 <MobleConfigModel_ProcessRelaySet+0x80>
 8025c02:	682b      	ldr	r3, [r5, #0]
 8025c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c06:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8025c08:	07d2      	lsls	r2, r2, #31
 8025c0a:	d505      	bpl.n	8025c18 <MobleConfigModel_ProcessRelaySet+0x80>
 8025c0c:	7c5b      	ldrb	r3, [r3, #17]
 8025c0e:	42b3      	cmp	r3, r6
 8025c10:	d002      	beq.n	8025c18 <MobleConfigModel_ProcessRelaySet+0x80>
 8025c12:	4628      	mov	r0, r5
 8025c14:	f7ff ff7c 	bl	8025b10 <BnrgmConfigModelSendHeartbeat>
 8025c18:	4620      	mov	r0, r4
 8025c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c1c:	2402      	movs	r4, #2
 8025c1e:	e7fb      	b.n	8025c18 <MobleConfigModel_ProcessRelaySet+0x80>

08025c20 <MobleConfigModel_ProcessGattProxySet>:
 8025c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c22:	460a      	mov	r2, r1
 8025c24:	7819      	ldrb	r1, [r3, #0]
 8025c26:	9c07      	ldr	r4, [sp, #28]
 8025c28:	2901      	cmp	r1, #1
 8025c2a:	4605      	mov	r5, r0
 8025c2c:	d82e      	bhi.n	8025c8c <MobleConfigModel_ProcessGattProxySet+0x6c>
 8025c2e:	6803      	ldr	r3, [r0, #0]
 8025c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c32:	2714      	movs	r7, #20
 8025c34:	7c1e      	ldrb	r6, [r3, #16]
 8025c36:	7419      	strb	r1, [r3, #16]
 8025c38:	2300      	movs	r3, #0
 8025c3a:	7027      	strb	r7, [r4, #0]
 8025c3c:	7221      	strb	r1, [r4, #8]
 8025c3e:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 8025c42:	2101      	movs	r1, #1
 8025c44:	70a3      	strb	r3, [r4, #2]
 8025c46:	70e3      	strb	r3, [r4, #3]
 8025c48:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 8025c4c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025c50:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8025c54:	7067      	strb	r7, [r4, #1]
 8025c56:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
 8025c5a:	4623      	mov	r3, r4
 8025c5c:	f7fc ff2a 	bl	8022ab4 <MobleModelSendPacket>
 8025c60:	4604      	mov	r4, r0
 8025c62:	b988      	cbnz	r0, 8025c88 <MobleConfigModel_ProcessGattProxySet+0x68>
 8025c64:	682b      	ldr	r3, [r5, #0]
 8025c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c68:	7c1a      	ldrb	r2, [r3, #16]
 8025c6a:	42b2      	cmp	r2, r6
 8025c6c:	d00c      	beq.n	8025c88 <MobleConfigModel_ProcessGattProxySet+0x68>
 8025c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025c70:	079b      	lsls	r3, r3, #30
 8025c72:	d502      	bpl.n	8025c7a <MobleConfigModel_ProcessGattProxySet+0x5a>
 8025c74:	4628      	mov	r0, r5
 8025c76:	f7ff ff4b 	bl	8025b10 <BnrgmConfigModelSendHeartbeat>
 8025c7a:	682b      	ldr	r3, [r5, #0]
 8025c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c7e:	7c1b      	ldrb	r3, [r3, #16]
 8025c80:	2b01      	cmp	r3, #1
 8025c82:	d001      	beq.n	8025c88 <MobleConfigModel_ProcessGattProxySet+0x68>
 8025c84:	f7f9 fc82 	bl	801f58c <MoblePalBluetoothGracefulReset>
 8025c88:	4620      	mov	r0, r4
 8025c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c8c:	2402      	movs	r4, #2
 8025c8e:	e7fb      	b.n	8025c88 <MobleConfigModel_ProcessGattProxySet+0x68>

08025c90 <BnrgmConfigModelHeartbeatPublication_TimerCallback>:
 8025c90:	b538      	push	{r3, r4, r5, lr}
 8025c92:	4604      	mov	r4, r0
 8025c94:	b330      	cbz	r0, 8025ce4 <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x54>
 8025c96:	4d14      	ldr	r5, [pc, #80]	; (8025ce8 <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x58>)
 8025c98:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 8025c9c:	b1eb      	cbz	r3, 8025cda <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x4a>
 8025c9e:	f8b5 30d4 	ldrh.w	r3, [r5, #212]	; 0xd4
 8025ca2:	b1d3      	cbz	r3, 8025cda <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x4a>
 8025ca4:	4608      	mov	r0, r1
 8025ca6:	f7ff ff33 	bl	8025b10 <BnrgmConfigModelSendHeartbeat>
 8025caa:	b948      	cbnz	r0, 8025cc0 <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x30>
 8025cac:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 8025cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8025cb4:	4293      	cmp	r3, r2
 8025cb6:	bf1c      	itt	ne
 8025cb8:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 8025cbc:	f8c5 30d0 	strne.w	r3, [r5, #208]	; 0xd0
 8025cc0:	f8b5 10d4 	ldrh.w	r1, [r5, #212]	; 0xd4
 8025cc4:	ebc1 1341 	rsb	r3, r1, r1, lsl #5
 8025cc8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8025ccc:	00c9      	lsls	r1, r1, #3
 8025cce:	4620      	mov	r0, r4
 8025cd0:	b289      	uxth	r1, r1
 8025cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025cd6:	f7f1 bf87 	b.w	8017be8 <MoblePalTimerStartOnce>
 8025cda:	4620      	mov	r0, r4
 8025cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025ce0:	f7f1 bfaa 	b.w	8017c38 <MoblePalTimerStop>
 8025ce4:	bd38      	pop	{r3, r4, r5, pc}
 8025ce6:	bf00      	nop
 8025ce8:	20000318 	.word	0x20000318

08025cec <BnrgmFrndFnSendFriendPollResponse>:
 8025cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025cf0:	f892 932d 	ldrb.w	r9, [r2, #813]	; 0x32d
 8025cf4:	252c      	movs	r5, #44	; 0x2c
 8025cf6:	fb05 2309 	mla	r3, r5, r9, r2
 8025cfa:	b08f      	sub	sp, #60	; 0x3c
 8025cfc:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
 8025d00:	f1b8 0f01 	cmp.w	r8, #1
 8025d04:	4606      	mov	r6, r0
 8025d06:	460f      	mov	r7, r1
 8025d08:	4614      	mov	r4, r2
 8025d0a:	d004      	beq.n	8025d16 <BnrgmFrndFnSendFriendPollResponse+0x2a>
 8025d0c:	b00f      	add	sp, #60	; 0x3c
 8025d0e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025d12:	f7fa bdbd 	b.w	8020890 <BnrgmFrndFnSendLpnMsg>
 8025d16:	2228      	movs	r2, #40	; 0x28
 8025d18:	2100      	movs	r1, #0
 8025d1a:	a804      	add	r0, sp, #16
 8025d1c:	f002 ff50 	bl	8028bc0 <memset>
 8025d20:	2385      	movs	r3, #133	; 0x85
 8025d22:	fb15 3509 	smlabb	r5, r5, r9, r3
 8025d26:	1963      	adds	r3, r4, r5
 8025d28:	5960      	ldr	r0, [r4, r5]
 8025d2a:	791b      	ldrb	r3, [r3, #4]
 8025d2c:	f88d 300c 	strb.w	r3, [sp, #12]
 8025d30:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 8025d34:	9002      	str	r0, [sp, #8]
 8025d36:	2b01      	cmp	r3, #1
 8025d38:	bf94      	ite	ls
 8025d3a:	2300      	movls	r3, #0
 8025d3c:	2301      	movhi	r3, #1
 8025d3e:	f88d 300d 	strb.w	r3, [sp, #13]
 8025d42:	2330      	movs	r3, #48	; 0x30
 8025d44:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8025d48:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8025d4c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8025d50:	88a3      	ldrh	r3, [r4, #4]
 8025d52:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8025d56:	2306      	movs	r3, #6
 8025d58:	9300      	str	r3, [sp, #0]
 8025d5a:	2202      	movs	r2, #2
 8025d5c:	ab02      	add	r3, sp, #8
 8025d5e:	a904      	add	r1, sp, #16
 8025d60:	4630      	mov	r0, r6
 8025d62:	f88d 7032 	strb.w	r7, [sp, #50]	; 0x32
 8025d66:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
 8025d6a:	f7ff fe8b 	bl	8025a84 <MobleTransSendControl>
 8025d6e:	b00f      	add	sp, #60	; 0x3c
 8025d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08025d74 <BnrgmFrndFnSendFrndClear>:
 8025d74:	b530      	push	{r4, r5, lr}
 8025d76:	460c      	mov	r4, r1
 8025d78:	b08f      	sub	sp, #60	; 0x3c
 8025d7a:	4605      	mov	r5, r0
 8025d7c:	2228      	movs	r2, #40	; 0x28
 8025d7e:	2100      	movs	r1, #0
 8025d80:	a804      	add	r0, sp, #16
 8025d82:	f002 ff1d 	bl	8028bc0 <memset>
 8025d86:	8a23      	ldrh	r3, [r4, #16]
 8025d88:	b33b      	cbz	r3, 8025dda <BnrgmFrndFnSendFrndClear+0x66>
 8025d8a:	88a1      	ldrh	r1, [r4, #4]
 8025d8c:	2202      	movs	r2, #2
 8025d8e:	a803      	add	r0, sp, #12
 8025d90:	f7f5 fa30 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 8025d94:	2300      	movs	r3, #0
 8025d96:	88e1      	ldrh	r1, [r4, #6]
 8025d98:	2202      	movs	r2, #2
 8025d9a:	f10d 000e 	add.w	r0, sp, #14
 8025d9e:	f7f5 fa29 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 8025da2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8025da6:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8025daa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8025dae:	8a23      	ldrh	r3, [r4, #16]
 8025db0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8025db4:	237f      	movs	r3, #127	; 0x7f
 8025db6:	f88d 301f 	strb.w	r3, [sp, #31]
 8025dba:	4b09      	ldr	r3, [pc, #36]	; (8025de0 <BnrgmFrndFnSendFrndClear+0x6c>)
 8025dbc:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8025dc0:	3301      	adds	r3, #1
 8025dc2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8025dc6:	2304      	movs	r3, #4
 8025dc8:	9300      	str	r3, [sp, #0]
 8025dca:	2205      	movs	r2, #5
 8025dcc:	ab03      	add	r3, sp, #12
 8025dce:	a904      	add	r1, sp, #16
 8025dd0:	4628      	mov	r0, r5
 8025dd2:	f7ff fe57 	bl	8025a84 <MobleTransSendControl>
 8025dd6:	b00f      	add	sp, #60	; 0x3c
 8025dd8:	bd30      	pop	{r4, r5, pc}
 8025dda:	2002      	movs	r0, #2
 8025ddc:	e7fb      	b.n	8025dd6 <BnrgmFrndFnSendFrndClear+0x62>
 8025dde:	bf00      	nop
 8025de0:	20000318 	.word	0x20000318

08025de4 <BnrgmStackSendFrndClear>:
 8025de4:	b508      	push	{r3, lr}
 8025de6:	4601      	mov	r1, r0
 8025de8:	4801      	ldr	r0, [pc, #4]	; (8025df0 <BnrgmStackSendFrndClear+0xc>)
 8025dea:	f7ff ffc3 	bl	8025d74 <BnrgmFrndFnSendFrndClear>
 8025dee:	bd08      	pop	{r3, pc}
 8025df0:	20001a90 	.word	0x20001a90

08025df4 <BnrgmFrndFnClear_TimerCallback>:
 8025df4:	b510      	push	{r4, lr}
 8025df6:	460c      	mov	r4, r1
 8025df8:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8025dfc:	428b      	cmp	r3, r1
 8025dfe:	bf8a      	itet	hi
 8025e00:	1a5b      	subhi	r3, r3, r1
 8025e02:	1acb      	subls	r3, r1, r3
 8025e04:	43db      	mvnhi	r3, r3
 8025e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8025e0a:	d30f      	bcc.n	8025e2c <BnrgmFrndFnClear_TimerCallback+0x38>
 8025e0c:	005b      	lsls	r3, r3, #1
 8025e0e:	1e59      	subs	r1, r3, #1
 8025e10:	f241 3287 	movw	r2, #4999	; 0x1387
 8025e14:	4291      	cmp	r1, r2
 8025e16:	d90b      	bls.n	8025e30 <BnrgmFrndFnClear_TimerCallback+0x3c>
 8025e18:	f7f1 ff2e 	bl	8017c78 <MoblePalTimerDestroy>
 8025e1c:	2300      	movs	r3, #0
 8025e1e:	6163      	str	r3, [r4, #20]
 8025e20:	8223      	strh	r3, [r4, #16]
 8025e22:	4620      	mov	r0, r4
 8025e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025e28:	f7ff bfdc 	b.w	8025de4 <BnrgmStackSendFrndClear>
 8025e2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8025e30:	b299      	uxth	r1, r3
 8025e32:	f7f1 fed9 	bl	8017be8 <MoblePalTimerStartOnce>
 8025e36:	e7f4      	b.n	8025e22 <BnrgmFrndFnClear_TimerCallback+0x2e>

08025e38 <BnrgmFrndLpnSendFrndClear.isra.0>:
 8025e38:	b530      	push	{r4, r5, lr}
 8025e3a:	4605      	mov	r5, r0
 8025e3c:	b08f      	sub	sp, #60	; 0x3c
 8025e3e:	460c      	mov	r4, r1
 8025e40:	2228      	movs	r2, #40	; 0x28
 8025e42:	2100      	movs	r1, #0
 8025e44:	a804      	add	r0, sp, #16
 8025e46:	f002 febb 	bl	8028bc0 <memset>
 8025e4a:	682b      	ldr	r3, [r5, #0]
 8025e4c:	2202      	movs	r2, #2
 8025e4e:	8859      	ldrh	r1, [r3, #2]
 8025e50:	a803      	add	r0, sp, #12
 8025e52:	f7f5 f9cf 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 8025e56:	8a61      	ldrh	r1, [r4, #18]
 8025e58:	2202      	movs	r2, #2
 8025e5a:	f10d 000e 	add.w	r0, sp, #14
 8025e5e:	f7f5 f9c9 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 8025e62:	8a23      	ldrh	r3, [r4, #16]
 8025e64:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8025e68:	4b0d      	ldr	r3, [pc, #52]	; (8025ea0 <BnrgmFrndLpnSendFrndClear.isra.0+0x68>)
 8025e6a:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 8025e6e:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8025e72:	f88d 201f 	strb.w	r2, [sp, #31]
 8025e76:	2000      	movs	r0, #0
 8025e78:	3301      	adds	r3, #1
 8025e7a:	8220      	strh	r0, [r4, #16]
 8025e7c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8025e80:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8025e84:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
 8025e88:	f7f4 fb32 	bl	801a4f0 <BnrgmPalCryptoDeleteFriendshipKeys>
 8025e8c:	2304      	movs	r3, #4
 8025e8e:	9300      	str	r3, [sp, #0]
 8025e90:	2205      	movs	r2, #5
 8025e92:	ab03      	add	r3, sp, #12
 8025e94:	a904      	add	r1, sp, #16
 8025e96:	4628      	mov	r0, r5
 8025e98:	f7ff fdf4 	bl	8025a84 <MobleTransSendControl>
 8025e9c:	b00f      	add	sp, #60	; 0x3c
 8025e9e:	bd30      	pop	{r4, r5, pc}
 8025ea0:	20000318 	.word	0x20000318

08025ea4 <BnrgmFrndMgmtBreakFriendship>:
 8025ea4:	b510      	push	{r4, lr}
 8025ea6:	4b0e      	ldr	r3, [pc, #56]	; (8025ee0 <BnrgmFrndMgmtBreakFriendship+0x3c>)
 8025ea8:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 8025eac:	2a01      	cmp	r2, #1
 8025eae:	d109      	bne.n	8025ec4 <BnrgmFrndMgmtBreakFriendship+0x20>
 8025eb0:	4b0c      	ldr	r3, [pc, #48]	; (8025ee4 <BnrgmFrndMgmtBreakFriendship+0x40>)
 8025eb2:	f8d3 4a04 	ldr.w	r4, [r3, #2564]	; 0xa04
 8025eb6:	4621      	mov	r1, r4
 8025eb8:	f7ff ffbe 	bl	8025e38 <BnrgmFrndLpnSendFrndClear.isra.0>
 8025ebc:	2000      	movs	r0, #0
 8025ebe:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
 8025ec2:	bd10      	pop	{r4, pc}
 8025ec4:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8025ec8:	2b01      	cmp	r3, #1
 8025eca:	d106      	bne.n	8025eda <BnrgmFrndMgmtBreakFriendship+0x36>
 8025ecc:	4b05      	ldr	r3, [pc, #20]	; (8025ee4 <BnrgmFrndMgmtBreakFriendship+0x40>)
 8025ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025ed2:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	; 0xa04
 8025ed6:	f7f8 b919 	b.w	801e10c <BnrgmFrndFnBreakFriendship>
 8025eda:	2001      	movs	r0, #1
 8025edc:	e7f1      	b.n	8025ec2 <BnrgmFrndMgmtBreakFriendship+0x1e>
 8025ede:	bf00      	nop
 8025ee0:	20000318 	.word	0x20000318
 8025ee4:	20002508 	.word	0x20002508

08025ee8 <MobleConfigModel_ProcessFriendSet>:
 8025ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025eea:	460a      	mov	r2, r1
 8025eec:	7819      	ldrb	r1, [r3, #0]
 8025eee:	9c07      	ldr	r4, [sp, #28]
 8025ef0:	2901      	cmp	r1, #1
 8025ef2:	4605      	mov	r5, r0
 8025ef4:	d82f      	bhi.n	8025f56 <MobleConfigModel_ProcessFriendSet+0x6e>
 8025ef6:	6803      	ldr	r3, [r0, #0]
 8025ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025efa:	2711      	movs	r7, #17
 8025efc:	7c9e      	ldrb	r6, [r3, #18]
 8025efe:	7499      	strb	r1, [r3, #18]
 8025f00:	2300      	movs	r3, #0
 8025f02:	7027      	strb	r7, [r4, #0]
 8025f04:	7221      	strb	r1, [r4, #8]
 8025f06:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 8025f0a:	2101      	movs	r1, #1
 8025f0c:	70a3      	strb	r3, [r4, #2]
 8025f0e:	70e3      	strb	r3, [r4, #3]
 8025f10:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 8025f14:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025f18:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8025f1c:	7067      	strb	r7, [r4, #1]
 8025f1e:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
 8025f22:	4623      	mov	r3, r4
 8025f24:	f7fc fdc6 	bl	8022ab4 <MobleModelSendPacket>
 8025f28:	4604      	mov	r4, r0
 8025f2a:	b990      	cbnz	r0, 8025f52 <MobleConfigModel_ProcessFriendSet+0x6a>
 8025f2c:	682b      	ldr	r3, [r5, #0]
 8025f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025f30:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8025f32:	0752      	lsls	r2, r2, #29
 8025f34:	d505      	bpl.n	8025f42 <MobleConfigModel_ProcessFriendSet+0x5a>
 8025f36:	7c9b      	ldrb	r3, [r3, #18]
 8025f38:	42b3      	cmp	r3, r6
 8025f3a:	d002      	beq.n	8025f42 <MobleConfigModel_ProcessFriendSet+0x5a>
 8025f3c:	4628      	mov	r0, r5
 8025f3e:	f7ff fde7 	bl	8025b10 <BnrgmConfigModelSendHeartbeat>
 8025f42:	682b      	ldr	r3, [r5, #0]
 8025f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025f46:	7c9b      	ldrb	r3, [r3, #18]
 8025f48:	2b01      	cmp	r3, #1
 8025f4a:	d002      	beq.n	8025f52 <MobleConfigModel_ProcessFriendSet+0x6a>
 8025f4c:	4628      	mov	r0, r5
 8025f4e:	f7ff ffa9 	bl	8025ea4 <BnrgmFrndMgmtBreakFriendship>
 8025f52:	4620      	mov	r0, r4
 8025f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025f56:	2402      	movs	r4, #2
 8025f58:	e7fb      	b.n	8025f52 <MobleConfigModel_ProcessFriendSet+0x6a>

08025f5a <Test_UpperTester_Set06>:
 8025f5a:	f7ff bfa3 	b.w	8025ea4 <BnrgmFrndMgmtBreakFriendship>
	...

08025f60 <BnrgmFrndFn_FSM>:
 8025f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f64:	b08f      	sub	sp, #60	; 0x3c
 8025f66:	461c      	mov	r4, r3
 8025f68:	4617      	mov	r7, r2
 8025f6a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8025f6e:	4680      	mov	r8, r0
 8025f70:	468a      	mov	sl, r1
 8025f72:	f7e1 ff83 	bl	8007e7c <HAL_GetTick>
 8025f76:	6823      	ldr	r3, [r4, #0]
 8025f78:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 8025f7c:	4606      	mov	r6, r0
 8025f7e:	1ac3      	subs	r3, r0, r3
 8025f80:	2a06      	cmp	r2, #6
 8025f82:	f200 80d1 	bhi.w	8026128 <BnrgmFrndFn_FSM+0x1c8>
 8025f86:	e8df f012 	tbh	[pc, r2, lsl #1]
 8025f8a:	0007      	.short	0x0007
 8025f8c:	00640011 	.word	0x00640011
 8025f90:	00a5007f 	.word	0x00a5007f
 8025f94:	011400d9 	.word	0x011400d9
 8025f98:	2d00      	cmp	r5, #0
 8025f9a:	d056      	beq.n	802604a <BnrgmFrndFn_FSM+0xea>
 8025f9c:	2d01      	cmp	r5, #1
 8025f9e:	f040 8133 	bne.w	8026208 <BnrgmFrndFn_FSM+0x2a8>
 8025fa2:	6020      	str	r0, [r4, #0]
 8025fa4:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
 8025fa8:	4615      	mov	r5, r2
 8025faa:	e04e      	b.n	802604a <BnrgmFrndFn_FSM+0xea>
 8025fac:	2d00      	cmp	r5, #0
 8025fae:	f040 812b 	bne.w	8026208 <BnrgmFrndFn_FSM+0x2a8>
 8025fb2:	8b22      	ldrh	r2, [r4, #24]
 8025fb4:	429a      	cmp	r2, r3
 8025fb6:	d248      	bcs.n	802604a <BnrgmFrndFn_FSM+0xea>
 8025fb8:	f8ba 9000 	ldrh.w	r9, [sl]
 8025fbc:	f109 0901 	add.w	r9, r9, #1
 8025fc0:	fa1f f989 	uxth.w	r9, r9
 8025fc4:	f8aa 9000 	strh.w	r9, [sl]
 8025fc8:	2228      	movs	r2, #40	; 0x28
 8025fca:	4629      	mov	r1, r5
 8025fcc:	f8a4 9008 	strh.w	r9, [r4, #8]
 8025fd0:	a804      	add	r0, sp, #16
 8025fd2:	f002 fdf5 	bl	8028bc0 <memset>
 8025fd6:	f894 232e 	ldrb.w	r2, [r4, #814]	; 0x32e
 8025fda:	f88d 200b 	strb.w	r2, [sp, #11]
 8025fde:	23ff      	movs	r3, #255	; 0xff
 8025fe0:	f04f 0a10 	mov.w	sl, #16
 8025fe4:	f88d 3008 	strb.w	r3, [sp, #8]
 8025fe8:	2202      	movs	r2, #2
 8025fea:	2306      	movs	r3, #6
 8025fec:	4649      	mov	r1, r9
 8025fee:	a803      	add	r0, sp, #12
 8025ff0:	f88d 300a 	strb.w	r3, [sp, #10]
 8025ff4:	f88d a009 	strb.w	sl, [sp, #9]
 8025ff8:	f7f5 f8fc 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 8025ffc:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8026000:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8026004:	88a2      	ldrh	r2, [r4, #4]
 8026006:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 802600a:	2201      	movs	r2, #1
 802600c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8026010:	9300      	str	r3, [sp, #0]
 8026012:	2204      	movs	r2, #4
 8026014:	ab02      	add	r3, sp, #8
 8026016:	eb0d 010a 	add.w	r1, sp, sl
 802601a:	4640      	mov	r0, r8
 802601c:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
 8026020:	f88d 7032 	strb.w	r7, [sp, #50]	; 0x32
 8026024:	f88d 501f 	strb.w	r5, [sp, #31]
 8026028:	f7ff fd2c 	bl	8025a84 <MobleTransSendControl>
 802602c:	f8d8 3000 	ldr.w	r3, [r8]
 8026030:	88a1      	ldrh	r1, [r4, #4]
 8026032:	885a      	ldrh	r2, [r3, #2]
 8026034:	8923      	ldrh	r3, [r4, #8]
 8026036:	9300      	str	r3, [sp, #0]
 8026038:	9501      	str	r5, [sp, #4]
 802603a:	88e3      	ldrh	r3, [r4, #6]
 802603c:	4638      	mov	r0, r7
 802603e:	f7f4 f9c3 	bl	801a3c8 <BnrgmPalCryptoSetFriendshipKeys>
 8026042:	2302      	movs	r3, #2
 8026044:	6026      	str	r6, [r4, #0]
 8026046:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 802604a:	4628      	mov	r0, r5
 802604c:	b00f      	add	sp, #60	; 0x3c
 802604e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026052:	b95d      	cbnz	r5, 802606c <BnrgmFrndFn_FSM+0x10c>
 8026054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8026058:	d9f7      	bls.n	802604a <BnrgmFrndFn_FSM+0xea>
 802605a:	80a5      	strh	r5, [r4, #4]
 802605c:	4638      	mov	r0, r7
 802605e:	f7f4 fa47 	bl	801a4f0 <BnrgmPalCryptoDeleteFriendshipKeys>
 8026062:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
 8026066:	6026      	str	r6, [r4, #0]
 8026068:	2501      	movs	r5, #1
 802606a:	e7ee      	b.n	802604a <BnrgmFrndFn_FSM+0xea>
 802606c:	3d02      	subs	r5, #2
 802606e:	2d01      	cmp	r5, #1
 8026070:	d89a      	bhi.n	8025fa8 <BnrgmFrndFn_FSM+0x48>
 8026072:	2500      	movs	r5, #0
 8026074:	f8a4 532c 	strh.w	r5, [r4, #812]	; 0x32c
 8026078:	4620      	mov	r0, r4
 802607a:	f7f8 f89b 	bl	801e1b4 <BnrgmFrndFnInsertFriendUpdate>
 802607e:	2303      	movs	r3, #3
 8026080:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8026084:	6026      	str	r6, [r4, #0]
 8026086:	e7e0      	b.n	802604a <BnrgmFrndFn_FSM+0xea>
 8026088:	2d00      	cmp	r5, #0
 802608a:	d1ed      	bne.n	8026068 <BnrgmFrndFn_FSM+0x108>
 802608c:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8026090:	8a23      	ldrh	r3, [r4, #16]
 8026092:	2a00      	cmp	r2, #0
 8026094:	dd10      	ble.n	80260b8 <BnrgmFrndFn_FSM+0x158>
 8026096:	f8d8 2000 	ldr.w	r2, [r8]
 802609a:	8852      	ldrh	r2, [r2, #2]
 802609c:	429a      	cmp	r2, r3
 802609e:	d00b      	beq.n	80260b8 <BnrgmFrndFn_FSM+0x158>
 80260a0:	495a      	ldr	r1, [pc, #360]	; (802620c <BnrgmFrndFn_FSM+0x2ac>)
 80260a2:	4622      	mov	r2, r4
 80260a4:	f104 0014 	add.w	r0, r4, #20
 80260a8:	f7f1 fd34 	bl	8017b14 <MoblePalTimerCreate>
 80260ac:	2801      	cmp	r0, #1
 80260ae:	d803      	bhi.n	80260b8 <BnrgmFrndFn_FSM+0x158>
 80260b0:	6960      	ldr	r0, [r4, #20]
 80260b2:	2101      	movs	r1, #1
 80260b4:	f7f1 fd98 	bl	8017be8 <MoblePalTimerStartOnce>
 80260b8:	2305      	movs	r3, #5
 80260ba:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80260be:	8a23      	ldrh	r3, [r4, #16]
 80260c0:	9300      	str	r3, [sp, #0]
 80260c2:	68e2      	ldr	r2, [r4, #12]
 80260c4:	f894 332f 	ldrb.w	r3, [r4, #815]	; 0x32f
 80260c8:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 80260cc:	88a0      	ldrh	r0, [r4, #4]
 80260ce:	f7f7 f883 	bl	801d1d8 <BnrgmLibraryFnOnFriendshipEstablished>
 80260d2:	e7ba      	b.n	802604a <BnrgmFrndFn_FSM+0xea>
 80260d4:	b9ad      	cbnz	r5, 8026102 <BnrgmFrndFn_FSM+0x1a2>
 80260d6:	68e2      	ldr	r2, [r4, #12]
 80260d8:	429a      	cmp	r2, r3
 80260da:	d2b6      	bcs.n	802604a <BnrgmFrndFn_FSM+0xea>
 80260dc:	88a1      	ldrh	r1, [r4, #4]
 80260de:	2002      	movs	r0, #2
 80260e0:	f7e0 fa32 	bl	8006548 <BLEMesh_FnFriendshipClearedCallback>
 80260e4:	80a5      	strh	r5, [r4, #4]
 80260e6:	4638      	mov	r0, r7
 80260e8:	f7f4 fa02 	bl	801a4f0 <BnrgmPalCryptoDeleteFriendshipKeys>
 80260ec:	6960      	ldr	r0, [r4, #20]
 80260ee:	b108      	cbz	r0, 80260f4 <BnrgmFrndFn_FSM+0x194>
 80260f0:	f7f1 fdc2 	bl	8017c78 <MoblePalTimerDestroy>
 80260f4:	f44f 724d 	mov.w	r2, #820	; 0x334
 80260f8:	2100      	movs	r1, #0
 80260fa:	4620      	mov	r0, r4
 80260fc:	f002 fd60 	bl	8028bc0 <memset>
 8026100:	e7b1      	b.n	8026066 <BnrgmFrndFn_FSM+0x106>
 8026102:	2d02      	cmp	r5, #2
 8026104:	d112      	bne.n	802612c <BnrgmFrndFn_FSM+0x1cc>
 8026106:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 802610a:	b14b      	cbz	r3, 8026120 <BnrgmFrndFn_FSM+0x1c0>
 802610c:	3b01      	subs	r3, #1
 802610e:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
 8026112:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 8026116:	3301      	adds	r3, #1
 8026118:	f003 030f 	and.w	r3, r3, #15
 802611c:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
 8026120:	6026      	str	r6, [r4, #0]
 8026122:	2305      	movs	r3, #5
 8026124:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8026128:	2500      	movs	r5, #0
 802612a:	e78e      	b.n	802604a <BnrgmFrndFn_FSM+0xea>
 802612c:	2d03      	cmp	r5, #3
 802612e:	d0f7      	beq.n	8026120 <BnrgmFrndFn_FSM+0x1c0>
 8026130:	1f2b      	subs	r3, r5, #4
 8026132:	2b01      	cmp	r3, #1
 8026134:	d827      	bhi.n	8026186 <BnrgmFrndFn_FSM+0x226>
 8026136:	6020      	str	r0, [r4, #0]
 8026138:	2306      	movs	r3, #6
 802613a:	e7f3      	b.n	8026124 <BnrgmFrndFn_FSM+0x1c4>
 802613c:	b985      	cbnz	r5, 8026160 <BnrgmFrndFn_FSM+0x200>
 802613e:	f894 2330 	ldrb.w	r2, [r4, #816]	; 0x330
 8026142:	429a      	cmp	r2, r3
 8026144:	d281      	bcs.n	802604a <BnrgmFrndFn_FSM+0xea>
 8026146:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 802614a:	b913      	cbnz	r3, 8026152 <BnrgmFrndFn_FSM+0x1f2>
 802614c:	4620      	mov	r0, r4
 802614e:	f7f8 f831 	bl	801e1b4 <BnrgmFrndFnInsertFriendUpdate>
 8026152:	4622      	mov	r2, r4
 8026154:	4639      	mov	r1, r7
 8026156:	4640      	mov	r0, r8
 8026158:	f7ff fdc8 	bl	8025cec <BnrgmFrndFnSendFriendPollResponse>
 802615c:	2304      	movs	r3, #4
 802615e:	e78f      	b.n	8026080 <BnrgmFrndFn_FSM+0x120>
 8026160:	2d02      	cmp	r5, #2
 8026162:	d10e      	bne.n	8026182 <BnrgmFrndFn_FSM+0x222>
 8026164:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 8026168:	b14b      	cbz	r3, 802617e <BnrgmFrndFn_FSM+0x21e>
 802616a:	3b01      	subs	r3, #1
 802616c:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
 8026170:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 8026174:	3301      	adds	r3, #1
 8026176:	f003 030f 	and.w	r3, r3, #15
 802617a:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
 802617e:	6026      	str	r6, [r4, #0]
 8026180:	e7d2      	b.n	8026128 <BnrgmFrndFn_FSM+0x1c8>
 8026182:	2d03      	cmp	r5, #3
 8026184:	d0fb      	beq.n	802617e <BnrgmFrndFn_FSM+0x21e>
 8026186:	2d06      	cmp	r5, #6
 8026188:	d13e      	bne.n	8026208 <BnrgmFrndFn_FSM+0x2a8>
 802618a:	88a1      	ldrh	r1, [r4, #4]
 802618c:	2003      	movs	r0, #3
 802618e:	f7e0 f9db 	bl	8006548 <BLEMesh_FnFriendshipClearedCallback>
 8026192:	2300      	movs	r3, #0
 8026194:	80a3      	strh	r3, [r4, #4]
 8026196:	4638      	mov	r0, r7
 8026198:	f7f4 f9aa 	bl	801a4f0 <BnrgmPalCryptoDeleteFriendshipKeys>
 802619c:	6960      	ldr	r0, [r4, #20]
 802619e:	b108      	cbz	r0, 80261a4 <BnrgmFrndFn_FSM+0x244>
 80261a0:	f7f1 fd6a 	bl	8017c78 <MoblePalTimerDestroy>
 80261a4:	f44f 724d 	mov.w	r2, #820	; 0x334
 80261a8:	2100      	movs	r1, #0
 80261aa:	4620      	mov	r0, r4
 80261ac:	f002 fd08 	bl	8028bc0 <memset>
 80261b0:	e7ba      	b.n	8026128 <BnrgmFrndFn_FSM+0x1c8>
 80261b2:	bb2d      	cbnz	r5, 8026200 <BnrgmFrndFn_FSM+0x2a0>
 80261b4:	f894 2330 	ldrb.w	r2, [r4, #816]	; 0x330
 80261b8:	429a      	cmp	r2, r3
 80261ba:	f4bf af46 	bcs.w	802604a <BnrgmFrndFn_FSM+0xea>
 80261be:	4629      	mov	r1, r5
 80261c0:	2228      	movs	r2, #40	; 0x28
 80261c2:	a804      	add	r0, sp, #16
 80261c4:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 80261c8:	f894 a068 	ldrb.w	sl, [r4, #104]	; 0x68
 80261cc:	f894 b332 	ldrb.w	fp, [r4, #818]	; 0x332
 80261d0:	f002 fcf6 	bl	8028bc0 <memset>
 80261d4:	2330      	movs	r3, #48	; 0x30
 80261d6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80261da:	2301      	movs	r3, #1
 80261dc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80261e0:	9300      	str	r3, [sp, #0]
 80261e2:	2209      	movs	r2, #9
 80261e4:	ab02      	add	r3, sp, #8
 80261e6:	a904      	add	r1, sp, #16
 80261e8:	4640      	mov	r0, r8
 80261ea:	f88d b008 	strb.w	fp, [sp, #8]
 80261ee:	f88d 7032 	strb.w	r7, [sp, #50]	; 0x32
 80261f2:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
 80261f6:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 80261fa:	f7ff fc43 	bl	8025a84 <MobleTransSendControl>
 80261fe:	e7ad      	b.n	802615c <BnrgmFrndFn_FSM+0x1fc>
 8026200:	1f2b      	subs	r3, r5, #4
 8026202:	2b01      	cmp	r3, #1
 8026204:	d8bf      	bhi.n	8026186 <BnrgmFrndFn_FSM+0x226>
 8026206:	e7ba      	b.n	802617e <BnrgmFrndFn_FSM+0x21e>
 8026208:	2502      	movs	r5, #2
 802620a:	e71e      	b.n	802604a <BnrgmFrndFn_FSM+0xea>
 802620c:	08025df5 	.word	0x08025df5

08026210 <BnrgmFrndFnProcessFrndPoll>:
 8026210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026214:	9c06      	ldr	r4, [sp, #24]
 8026216:	4615      	mov	r5, r2
 8026218:	4606      	mov	r6, r0
 802621a:	b930      	cbnz	r0, 802622a <BnrgmFrndFnProcessFrndPoll+0x1a>
 802621c:	4b16      	ldr	r3, [pc, #88]	; (8026278 <BnrgmFrndFnProcessFrndPoll+0x68>)
 802621e:	4a17      	ldr	r2, [pc, #92]	; (802627c <BnrgmFrndFnProcessFrndPoll+0x6c>)
 8026220:	4817      	ldr	r0, [pc, #92]	; (8026280 <BnrgmFrndFnProcessFrndPoll+0x70>)
 8026222:	f44f 7116 	mov.w	r1, #600	; 0x258
 8026226:	f002 fc39 	bl	8028a9c <__assert_func>
 802622a:	2c01      	cmp	r4, #1
 802622c:	d11e      	bne.n	802626c <BnrgmFrndFnProcessFrndPoll+0x5c>
 802622e:	781f      	ldrb	r7, [r3, #0]
 8026230:	2f01      	cmp	r7, #1
 8026232:	d81b      	bhi.n	802626c <BnrgmFrndFnProcessFrndPoll+0x5c>
 8026234:	4610      	mov	r0, r2
 8026236:	8a89      	ldrh	r1, [r1, #20]
 8026238:	f7f7 ff83 	bl	801e142 <BnrgmFrndFnGetLpnOffset>
 802623c:	1c42      	adds	r2, r0, #1
 802623e:	d018      	beq.n	8026272 <BnrgmFrndFnProcessFrndPoll+0x62>
 8026240:	f44f 744d 	mov.w	r4, #820	; 0x334
 8026244:	4344      	muls	r4, r0
 8026246:	1d23      	adds	r3, r4, #4
 8026248:	442c      	add	r4, r5
 802624a:	b2c2      	uxtb	r2, r0
 802624c:	f894 1335 	ldrb.w	r1, [r4, #821]	; 0x335
 8026250:	42b9      	cmp	r1, r7
 8026252:	bf0e      	itee	eq
 8026254:	2103      	moveq	r1, #3
 8026256:	f884 7335 	strbne.w	r7, [r4, #821]	; 0x335
 802625a:	2102      	movne	r1, #2
 802625c:	9106      	str	r1, [sp, #24]
 802625e:	442b      	add	r3, r5
 8026260:	4629      	mov	r1, r5
 8026262:	4630      	mov	r0, r6
 8026264:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026268:	f7ff be7a 	b.w	8025f60 <BnrgmFrndFn_FSM>
 802626c:	2002      	movs	r0, #2
 802626e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026272:	4620      	mov	r0, r4
 8026274:	e7fb      	b.n	802626e <BnrgmFrndFnProcessFrndPoll+0x5e>
 8026276:	bf00      	nop
 8026278:	08033440 	.word	0x08033440
 802627c:	0803253b 	.word	0x0803253b
 8026280:	08033a13 	.word	0x08033a13

08026284 <BnrgmFrndFnProcessFrndRequest>:
 8026284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026288:	ed2d 8b02 	vpush	{d8}
 802628c:	4688      	mov	r8, r1
 802628e:	ee08 0a10 	vmov	s16, r0
 8026292:	b087      	sub	sp, #28
 8026294:	4615      	mov	r5, r2
 8026296:	461f      	mov	r7, r3
 8026298:	b930      	cbnz	r0, 80262a8 <BnrgmFrndFnProcessFrndRequest+0x24>
 802629a:	4b69      	ldr	r3, [pc, #420]	; (8026440 <BnrgmFrndFnProcessFrndRequest+0x1bc>)
 802629c:	4a69      	ldr	r2, [pc, #420]	; (8026444 <BnrgmFrndFnProcessFrndRequest+0x1c0>)
 802629e:	486a      	ldr	r0, [pc, #424]	; (8026448 <BnrgmFrndFnProcessFrndRequest+0x1c4>)
 80262a0:	f240 2181 	movw	r1, #641	; 0x281
 80262a4:	f002 fbfa 	bl	8028a9c <__assert_func>
 80262a8:	2f00      	cmp	r7, #0
 80262aa:	d064      	beq.n	8026376 <BnrgmFrndFnProcessFrndRequest+0xf2>
 80262ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80262ae:	2b09      	cmp	r3, #9
 80262b0:	d961      	bls.n	8026376 <BnrgmFrndFnProcessFrndRequest+0xf2>
 80262b2:	7bcb      	ldrb	r3, [r1, #15]
 80262b4:	2b00      	cmp	r3, #0
 80262b6:	d15e      	bne.n	8026376 <BnrgmFrndFnProcessFrndRequest+0xf2>
 80262b8:	7891      	ldrb	r1, [r2, #2]
 80262ba:	f44f 704d 	mov.w	r0, #820	; 0x334
 80262be:	f102 0c08 	add.w	ip, r2, #8
 80262c2:	b2da      	uxtb	r2, r3
 80262c4:	4291      	cmp	r1, r2
 80262c6:	d929      	bls.n	802631c <BnrgmFrndFnProcessFrndRequest+0x98>
 80262c8:	fb00 f403 	mul.w	r4, r0, r3
 80262cc:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 80262d0:	f83c e004 	ldrh.w	lr, [ip, r4]
 80262d4:	4596      	cmp	lr, r2
 80262d6:	461e      	mov	r6, r3
 80262d8:	f103 0301 	add.w	r3, r3, #1
 80262dc:	d1f1      	bne.n	80262c2 <BnrgmFrndFnProcessFrndRequest+0x3e>
 80262de:	f104 0904 	add.w	r9, r4, #4
 80262e2:	442c      	add	r4, r5
 80262e4:	44a9      	add	r9, r5
 80262e6:	8aa3      	ldrh	r3, [r4, #20]
 80262e8:	b123      	cbz	r3, 80262f4 <BnrgmFrndFnProcessFrndRequest+0x70>
 80262ea:	ee18 0a10 	vmov	r0, s16
 80262ee:	4649      	mov	r1, r9
 80262f0:	f7ff fd40 	bl	8025d74 <BnrgmFrndFnSendFrndClear>
 80262f4:	2001      	movs	r0, #1
 80262f6:	8921      	ldrh	r1, [r4, #8]
 80262f8:	f7e0 f926 	bl	8006548 <BLEMesh_FnFriendshipClearedCallback>
 80262fc:	2300      	movs	r3, #0
 80262fe:	8123      	strh	r3, [r4, #8]
 8026300:	f44f 734d 	mov.w	r3, #820	; 0x334
 8026304:	fb03 5606 	mla	r6, r3, r6, r5
 8026308:	69b0      	ldr	r0, [r6, #24]
 802630a:	b108      	cbz	r0, 8026310 <BnrgmFrndFnProcessFrndRequest+0x8c>
 802630c:	f7f1 fcb4 	bl	8017c78 <MoblePalTimerDestroy>
 8026310:	f44f 724d 	mov.w	r2, #820	; 0x334
 8026314:	2100      	movs	r1, #0
 8026316:	4648      	mov	r0, r9
 8026318:	f002 fc52 	bl	8028bc0 <memset>
 802631c:	78aa      	ldrb	r2, [r5, #2]
 802631e:	2600      	movs	r6, #0
 8026320:	f5a5 714b 	sub.w	r1, r5, #812	; 0x32c
 8026324:	f44f 734d 	mov.w	r3, #820	; 0x334
 8026328:	fa5f fb86 	uxtb.w	fp, r6
 802632c:	455a      	cmp	r2, fp
 802632e:	d907      	bls.n	8026340 <BnrgmFrndFnProcessFrndRequest+0xbc>
 8026330:	fb06 3403 	mla	r4, r6, r3, r3
 8026334:	1c70      	adds	r0, r6, #1
 8026336:	5b0c      	ldrh	r4, [r1, r4]
 8026338:	b924      	cbnz	r4, 8026344 <BnrgmFrndFnProcessFrndRequest+0xc0>
 802633a:	b276      	sxtb	r6, r6
 802633c:	1c72      	adds	r2, r6, #1
 802633e:	d103      	bne.n	8026348 <BnrgmFrndFnProcessFrndRequest+0xc4>
 8026340:	2001      	movs	r0, #1
 8026342:	e077      	b.n	8026434 <BnrgmFrndFnProcessFrndRequest+0x1b0>
 8026344:	4606      	mov	r6, r0
 8026346:	e7ef      	b.n	8026328 <BnrgmFrndFnProcessFrndRequest+0xa4>
 8026348:	783a      	ldrb	r2, [r7, #0]
 802634a:	f3c2 1341 	ubfx	r3, r2, #5, #2
 802634e:	1e59      	subs	r1, r3, #1
 8026350:	2902      	cmp	r1, #2
 8026352:	bf98      	it	ls
 8026354:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
 8026358:	f3c2 04c1 	ubfx	r4, r2, #3, #2
 802635c:	bf94      	ite	ls
 802635e:	330a      	addls	r3, #10
 8026360:	230a      	movhi	r3, #10
 8026362:	9302      	str	r3, [sp, #8]
 8026364:	1e63      	subs	r3, r4, #1
 8026366:	2b02      	cmp	r3, #2
 8026368:	bf9a      	itte	ls
 802636a:	eb04 0484 	addls.w	r4, r4, r4, lsl #2
 802636e:	340a      	addls	r4, #10
 8026370:	240a      	movhi	r4, #10
 8026372:	0753      	lsls	r3, r2, #29
 8026374:	d101      	bne.n	802637a <BnrgmFrndFnProcessFrndRequest+0xf6>
 8026376:	2002      	movs	r0, #2
 8026378:	e05c      	b.n	8026434 <BnrgmFrndFnProcessFrndRequest+0x1b0>
 802637a:	787a      	ldrb	r2, [r7, #1]
 802637c:	2a09      	cmp	r2, #9
 802637e:	d9fa      	bls.n	8026376 <BnrgmFrndFnProcessFrndRequest+0xf2>
 8026380:	f44f 734d 	mov.w	r3, #820	; 0x334
 8026384:	4373      	muls	r3, r6
 8026386:	eb05 0a03 	add.w	sl, r5, r3
 802638a:	2103      	movs	r1, #3
 802638c:	f88a 2334 	strb.w	r2, [sl, #820]	; 0x334
 8026390:	1cb8      	adds	r0, r7, #2
 8026392:	aa04      	add	r2, sp, #16
 8026394:	9303      	str	r3, [sp, #12]
 8026396:	f7f4 ff03 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 802639a:	9a04      	ldr	r2, [sp, #16]
 802639c:	492b      	ldr	r1, [pc, #172]	; (802644c <BnrgmFrndFnProcessFrndRequest+0x1c8>)
 802639e:	f1a2 000a 	sub.w	r0, r2, #10
 80263a2:	4288      	cmp	r0, r1
 80263a4:	d8e7      	bhi.n	8026376 <BnrgmFrndFnProcessFrndRequest+0xf2>
 80263a6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80263aa:	fb09 f202 	mul.w	r2, r9, r2
 80263ae:	f8ca 2010 	str.w	r2, [sl, #16]
 80263b2:	2102      	movs	r1, #2
 80263b4:	aa05      	add	r2, sp, #20
 80263b6:	1d78      	adds	r0, r7, #5
 80263b8:	f7f4 fef2 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 80263bc:	9805      	ldr	r0, [sp, #20]
 80263be:	f8aa 0014 	strh.w	r0, [sl, #20]
 80263c2:	79f8      	ldrb	r0, [r7, #7]
 80263c4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80263c8:	f1bc 0f04 	cmp.w	ip, #4
 80263cc:	d8d3      	bhi.n	8026376 <BnrgmFrndFnProcessFrndRequest+0xf2>
 80263ce:	f88a 0333 	strb.w	r0, [sl, #819]	; 0x333
 80263d2:	f107 0008 	add.w	r0, r7, #8
 80263d6:	f7f4 fee3 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 80263da:	9a05      	ldr	r2, [sp, #20]
 80263dc:	f8aa 200a 	strh.w	r2, [sl, #10]
 80263e0:	f998 2018 	ldrsb.w	r2, [r8, #24]
 80263e4:	9b02      	ldr	r3, [sp, #8]
 80263e6:	f44f 714d 	mov.w	r1, #820	; 0x334
 80263ea:	fb01 5606 	mla	r6, r1, r6, r5
 80263ee:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 80263f2:	fb03 4412 	mls	r4, r3, r2, r4
 80263f6:	f886 2332 	strb.w	r2, [r6, #818]	; 0x332
 80263fa:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80263fe:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 8026402:	bfa4      	itt	ge
 8026404:	f04f 090a 	movge.w	r9, #10
 8026408:	fb94 f9f9 	sdivge	r9, r4, r9
 802640c:	f8a6 901c 	strh.w	r9, [r6, #28]
 8026410:	f8aa 2008 	strh.w	r2, [sl, #8]
 8026414:	f898 1042 	ldrb.w	r1, [r8, #66]	; 0x42
 8026418:	4658      	mov	r0, fp
 802641a:	f7f3 ffbf 	bl	801a39c <BnrgmPalCryptoSetFriendshipNetKeyOffset>
 802641e:	9b03      	ldr	r3, [sp, #12]
 8026420:	2201      	movs	r2, #1
 8026422:	3304      	adds	r3, #4
 8026424:	9200      	str	r2, [sp, #0]
 8026426:	ee18 0a10 	vmov	r0, s16
 802642a:	442b      	add	r3, r5
 802642c:	465a      	mov	r2, fp
 802642e:	4629      	mov	r1, r5
 8026430:	f7ff fd96 	bl	8025f60 <BnrgmFrndFn_FSM>
 8026434:	b007      	add	sp, #28
 8026436:	ecbd 8b02 	vpop	{d8}
 802643a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802643e:	bf00      	nop
 8026440:	08033440 	.word	0x08033440
 8026444:	08032556 	.word	0x08032556
 8026448:	08033a13 	.word	0x08033a13
 802644c:	00034bb5 	.word	0x00034bb5

08026450 <BnrgmFrndFnProcess>:
 8026450:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8026454:	2500      	movs	r5, #0
 8026456:	4606      	mov	r6, r0
 8026458:	460c      	mov	r4, r1
 802645a:	f44f 774d 	mov.w	r7, #820	; 0x334
 802645e:	46a8      	mov	r8, r5
 8026460:	78a3      	ldrb	r3, [r4, #2]
 8026462:	b2ea      	uxtb	r2, r5
 8026464:	4293      	cmp	r3, r2
 8026466:	d802      	bhi.n	802646e <BnrgmFrndFnProcess+0x1e>
 8026468:	b002      	add	sp, #8
 802646a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802646e:	fb07 4302 	mla	r3, r7, r2, r4
 8026472:	f8cd 8000 	str.w	r8, [sp]
 8026476:	3304      	adds	r3, #4
 8026478:	4621      	mov	r1, r4
 802647a:	4630      	mov	r0, r6
 802647c:	f7ff fd70 	bl	8025f60 <BnrgmFrndFn_FSM>
 8026480:	3501      	adds	r5, #1
 8026482:	e7ed      	b.n	8026460 <BnrgmFrndFnProcess+0x10>

08026484 <BnrgmFrndMgmtFriendshipProcess>:
 8026484:	b508      	push	{r3, lr}
 8026486:	4b0a      	ldr	r3, [pc, #40]	; (80264b0 <BnrgmFrndMgmtFriendshipProcess+0x2c>)
 8026488:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 802648c:	2a01      	cmp	r2, #1
 802648e:	d105      	bne.n	802649c <BnrgmFrndMgmtFriendshipProcess+0x18>
 8026490:	4b08      	ldr	r3, [pc, #32]	; (80264b4 <BnrgmFrndMgmtFriendshipProcess+0x30>)
 8026492:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	; 0xa04
 8026496:	f7ff ffdb 	bl	8026450 <BnrgmFrndFnProcess>
 802649a:	bd08      	pop	{r3, pc}
 802649c:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 80264a0:	2b02      	cmp	r3, #2
 80264a2:	d0fa      	beq.n	802649a <BnrgmFrndMgmtFriendshipProcess+0x16>
 80264a4:	4b03      	ldr	r3, [pc, #12]	; (80264b4 <BnrgmFrndMgmtFriendshipProcess+0x30>)
 80264a6:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	; 0xa04
 80264aa:	f7ed f839 	bl	8013520 <BnrgmFrndLpnProcess>
 80264ae:	e7f4      	b.n	802649a <BnrgmFrndMgmtFriendshipProcess+0x16>
 80264b0:	20000318 	.word	0x20000318
 80264b4:	20002508 	.word	0x20002508

080264b8 <MobleStackProcess>:
 80264b8:	b510      	push	{r4, lr}
 80264ba:	4c11      	ldr	r4, [pc, #68]	; (8026500 <MobleStackProcess+0x48>)
 80264bc:	f894 37ec 	ldrb.w	r3, [r4, #2028]	; 0x7ec
 80264c0:	2b04      	cmp	r3, #4
 80264c2:	d01b      	beq.n	80264fc <MobleStackProcess+0x44>
 80264c4:	f7f9 f856 	bl	801f574 <BnrgmTransmitProcess>
 80264c8:	f7f4 fdee 	bl	801b0a8 <MoblePalProcess>
 80264cc:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 80264d0:	f7f5 fe1e 	bl	801c110 <MobleApplicationProcess>
 80264d4:	f7f8 f9f4 	bl	801e8c0 <MobleStackProcessIvUpdate>
 80264d8:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
 80264dc:	781b      	ldrb	r3, [r3, #0]
 80264de:	b16b      	cbz	r3, 80264fc <MobleStackProcess+0x44>
 80264e0:	f894 3934 	ldrb.w	r3, [r4, #2356]	; 0x934
 80264e4:	b153      	cbz	r3, 80264fc <MobleStackProcess+0x44>
 80264e6:	f894 37ec 	ldrb.w	r3, [r4, #2028]	; 0x7ec
 80264ea:	2b02      	cmp	r3, #2
 80264ec:	d001      	beq.n	80264f2 <MobleStackProcess+0x3a>
 80264ee:	f7df ffd5 	bl	800649c <BLEMesh_ConfigurationCallback>
 80264f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80264f6:	4803      	ldr	r0, [pc, #12]	; (8026504 <MobleStackProcess+0x4c>)
 80264f8:	f7ff bfc4 	b.w	8026484 <BnrgmFrndMgmtFriendshipProcess>
 80264fc:	bd10      	pop	{r4, pc}
 80264fe:	bf00      	nop
 8026500:	20001410 	.word	0x20001410
 8026504:	20001a90 	.word	0x20001a90

08026508 <MobleLibraryProcess>:
 8026508:	b508      	push	{r3, lr}
 802650a:	4b05      	ldr	r3, [pc, #20]	; (8026520 <MobleLibraryProcess+0x18>)
 802650c:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8026510:	b11b      	cbz	r3, 802651a <MobleLibraryProcess+0x12>
 8026512:	f7ff ffd1 	bl	80264b8 <MobleStackProcess>
 8026516:	2000      	movs	r0, #0
 8026518:	bd08      	pop	{r3, pc}
 802651a:	2002      	movs	r0, #2
 802651c:	e7fc      	b.n	8026518 <MobleLibraryProcess+0x10>
 802651e:	bf00      	nop
 8026520:	20002508 	.word	0x20002508

08026524 <BLEMesh_Process>:
 8026524:	f7ff bff0 	b.w	8026508 <MobleLibraryProcess>

08026528 <BnrgmFrndFnProcessFrndClear>:
 8026528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802652c:	460f      	mov	r7, r1
 802652e:	b08e      	sub	sp, #56	; 0x38
 8026530:	4615      	mov	r5, r2
 8026532:	461c      	mov	r4, r3
 8026534:	4606      	mov	r6, r0
 8026536:	b930      	cbnz	r0, 8026546 <BnrgmFrndFnProcessFrndClear+0x1e>
 8026538:	4b38      	ldr	r3, [pc, #224]	; (802661c <BnrgmFrndFnProcessFrndClear+0xf4>)
 802653a:	4a39      	ldr	r2, [pc, #228]	; (8026620 <BnrgmFrndFnProcessFrndClear+0xf8>)
 802653c:	4839      	ldr	r0, [pc, #228]	; (8026624 <BnrgmFrndFnProcessFrndClear+0xfc>)
 802653e:	f240 3161 	movw	r1, #865	; 0x361
 8026542:	f002 faab 	bl	8028a9c <__assert_func>
 8026546:	2b00      	cmp	r3, #0
 8026548:	d066      	beq.n	8026618 <BnrgmFrndFnProcessFrndClear+0xf0>
 802654a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802654c:	2b04      	cmp	r3, #4
 802654e:	d163      	bne.n	8026618 <BnrgmFrndFnProcessFrndClear+0xf0>
 8026550:	aa02      	add	r2, sp, #8
 8026552:	2102      	movs	r1, #2
 8026554:	4620      	mov	r0, r4
 8026556:	f7f4 fe23 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 802655a:	1860      	adds	r0, r4, r1
 802655c:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8026560:	f7f4 fe1e 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 8026564:	78a8      	ldrb	r0, [r5, #2]
 8026566:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 802656a:	462a      	mov	r2, r5
 802656c:	2300      	movs	r3, #0
 802656e:	fa5f f883 	uxtb.w	r8, r3
 8026572:	4540      	cmp	r0, r8
 8026574:	d90a      	bls.n	802658c <BnrgmFrndFnProcessFrndClear+0x64>
 8026576:	8911      	ldrh	r1, [r2, #8]
 8026578:	4551      	cmp	r1, sl
 802657a:	d109      	bne.n	8026590 <BnrgmFrndFnProcessFrndClear+0x68>
 802657c:	8951      	ldrh	r1, [r2, #10]
 802657e:	eba9 0101 	sub.w	r1, r9, r1
 8026582:	29ff      	cmp	r1, #255	; 0xff
 8026584:	dc04      	bgt.n	8026590 <BnrgmFrndFnProcessFrndClear+0x68>
 8026586:	b25c      	sxtb	r4, r3
 8026588:	1c63      	adds	r3, r4, #1
 802658a:	d105      	bne.n	8026598 <BnrgmFrndFnProcessFrndClear+0x70>
 802658c:	2001      	movs	r0, #1
 802658e:	e040      	b.n	8026612 <BnrgmFrndFnProcessFrndClear+0xea>
 8026590:	3301      	adds	r3, #1
 8026592:	f502 724d 	add.w	r2, r2, #820	; 0x334
 8026596:	e7ea      	b.n	802656e <BnrgmFrndFnProcessFrndClear+0x46>
 8026598:	f44f 734d 	mov.w	r3, #820	; 0x334
 802659c:	435c      	muls	r4, r3
 802659e:	f104 0a04 	add.w	sl, r4, #4
 80265a2:	442c      	add	r4, r5
 80265a4:	2228      	movs	r2, #40	; 0x28
 80265a6:	2100      	movs	r1, #0
 80265a8:	a804      	add	r0, sp, #16
 80265aa:	f002 fb09 	bl	8028bc0 <memset>
 80265ae:	8921      	ldrh	r1, [r4, #8]
 80265b0:	2202      	movs	r2, #2
 80265b2:	a803      	add	r0, sp, #12
 80265b4:	f7f4 fe1e 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 80265b8:	2310      	movs	r3, #16
 80265ba:	2202      	movs	r2, #2
 80265bc:	4649      	mov	r1, r9
 80265be:	f10d 000e 	add.w	r0, sp, #14
 80265c2:	f7f4 fe17 	bl	801b1f4 <MobleOutputStreamPutBigEndian>
 80265c6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80265ca:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80265ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80265d2:	8abb      	ldrh	r3, [r7, #20]
 80265d4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80265d8:	7bfb      	ldrb	r3, [r7, #15]
 80265da:	4a13      	ldr	r2, [pc, #76]	; (8026628 <BnrgmFrndFnProcessFrndClear+0x100>)
 80265dc:	44aa      	add	sl, r5
 80265de:	b10b      	cbz	r3, 80265e4 <BnrgmFrndFnProcessFrndClear+0xbc>
 80265e0:	f892 30b5 	ldrb.w	r3, [r2, #181]	; 0xb5
 80265e4:	f88d 301f 	strb.w	r3, [sp, #31]
 80265e8:	f892 30b6 	ldrb.w	r3, [r2, #182]	; 0xb6
 80265ec:	3301      	adds	r3, #1
 80265ee:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80265f2:	2304      	movs	r3, #4
 80265f4:	9300      	str	r3, [sp, #0]
 80265f6:	2206      	movs	r2, #6
 80265f8:	ab03      	add	r3, sp, #12
 80265fa:	a904      	add	r1, sp, #16
 80265fc:	4630      	mov	r0, r6
 80265fe:	f7ff fa41 	bl	8025a84 <MobleTransSendControl>
 8026602:	2306      	movs	r3, #6
 8026604:	9300      	str	r3, [sp, #0]
 8026606:	4642      	mov	r2, r8
 8026608:	4653      	mov	r3, sl
 802660a:	4629      	mov	r1, r5
 802660c:	4630      	mov	r0, r6
 802660e:	f7ff fca7 	bl	8025f60 <BnrgmFrndFn_FSM>
 8026612:	b00e      	add	sp, #56	; 0x38
 8026614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026618:	2002      	movs	r0, #2
 802661a:	e7fa      	b.n	8026612 <BnrgmFrndFnProcessFrndClear+0xea>
 802661c:	08033440 	.word	0x08033440
 8026620:	08032574 	.word	0x08032574
 8026624:	08033a13 	.word	0x08033a13
 8026628:	20000318 	.word	0x20000318

0802662c <BnrgmFrndFnProcessFrndSubscrListRem>:
 802662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026630:	b087      	sub	sp, #28
 8026632:	4614      	mov	r4, r2
 8026634:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8026636:	4699      	mov	r9, r3
 8026638:	4682      	mov	sl, r0
 802663a:	b930      	cbnz	r0, 802664a <BnrgmFrndFnProcessFrndSubscrListRem+0x1e>
 802663c:	4b2f      	ldr	r3, [pc, #188]	; (80266fc <BnrgmFrndFnProcessFrndSubscrListRem+0xd0>)
 802663e:	4a30      	ldr	r2, [pc, #192]	; (8026700 <BnrgmFrndFnProcessFrndSubscrListRem+0xd4>)
 8026640:	4830      	ldr	r0, [pc, #192]	; (8026704 <BnrgmFrndFnProcessFrndSubscrListRem+0xd8>)
 8026642:	f240 412d 	movw	r1, #1069	; 0x42d
 8026646:	f002 fa29 	bl	8028a9c <__assert_func>
 802664a:	2b00      	cmp	r3, #0
 802664c:	d053      	beq.n	80266f6 <BnrgmFrndFnProcessFrndSubscrListRem+0xca>
 802664e:	2f02      	cmp	r7, #2
 8026650:	d951      	bls.n	80266f6 <BnrgmFrndFnProcessFrndSubscrListRem+0xca>
 8026652:	07fa      	lsls	r2, r7, #31
 8026654:	d54f      	bpl.n	80266f6 <BnrgmFrndFnProcessFrndSubscrListRem+0xca>
 8026656:	8a89      	ldrh	r1, [r1, #20]
 8026658:	4620      	mov	r0, r4
 802665a:	f7f7 fd72 	bl	801e142 <BnrgmFrndFnGetLpnOffset>
 802665e:	1c43      	adds	r3, r0, #1
 8026660:	4606      	mov	r6, r0
 8026662:	d048      	beq.n	80266f6 <BnrgmFrndFnProcessFrndSubscrListRem+0xca>
 8026664:	f44f 754d 	mov.w	r5, #820	; 0x334
 8026668:	4345      	muls	r5, r0
 802666a:	1963      	adds	r3, r4, r5
 802666c:	f899 b000 	ldrb.w	fp, [r9]
 8026670:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8026674:	455b      	cmp	r3, fp
 8026676:	d02b      	beq.n	80266d0 <BnrgmFrndFnProcessFrndSubscrListRem+0xa4>
 8026678:	087b      	lsrs	r3, r7, #1
 802667a:	351e      	adds	r5, #30
 802667c:	2700      	movs	r7, #0
 802667e:	9303      	str	r3, [sp, #12]
 8026680:	4425      	add	r5, r4
 8026682:	46b8      	mov	r8, r7
 8026684:	2102      	movs	r1, #2
 8026686:	fb01 9008 	mla	r0, r1, r8, r9
 802668a:	aa05      	add	r2, sp, #20
 802668c:	3001      	adds	r0, #1
 802668e:	f7f4 fd87 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 8026692:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8026696:	4629      	mov	r1, r5
 8026698:	2206      	movs	r2, #6
 802669a:	2300      	movs	r3, #0
 802669c:	f831 0b02 	ldrh.w	r0, [r1], #2
 80266a0:	b330      	cbz	r0, 80266f0 <BnrgmFrndFnProcessFrndSubscrListRem+0xc4>
 80266a2:	4584      	cmp	ip, r0
 80266a4:	d101      	bne.n	80266aa <BnrgmFrndFnProcessFrndSubscrListRem+0x7e>
 80266a6:	f821 3c02 	strh.w	r3, [r1, #-2]
 80266aa:	3a01      	subs	r2, #1
 80266ac:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80266b0:	d1f4      	bne.n	802669c <BnrgmFrndFnProcessFrndSubscrListRem+0x70>
 80266b2:	2f06      	cmp	r7, #6
 80266b4:	d006      	beq.n	80266c4 <BnrgmFrndFnProcessFrndSubscrListRem+0x98>
 80266b6:	9a03      	ldr	r2, [sp, #12]
 80266b8:	f108 0801 	add.w	r8, r8, #1
 80266bc:	fa5f f888 	uxtb.w	r8, r8
 80266c0:	4590      	cmp	r8, r2
 80266c2:	d3df      	bcc.n	8026684 <BnrgmFrndFnProcessFrndSubscrListRem+0x58>
 80266c4:	f44f 734d 	mov.w	r3, #820	; 0x334
 80266c8:	fb03 4306 	mla	r3, r3, r6, r4
 80266cc:	f883 b336 	strb.w	fp, [r3, #822]	; 0x336
 80266d0:	f44f 734d 	mov.w	r3, #820	; 0x334
 80266d4:	2205      	movs	r2, #5
 80266d6:	fb03 4306 	mla	r3, r3, r6, r4
 80266da:	9200      	str	r2, [sp, #0]
 80266dc:	3304      	adds	r3, #4
 80266de:	b2f2      	uxtb	r2, r6
 80266e0:	4621      	mov	r1, r4
 80266e2:	4650      	mov	r0, sl
 80266e4:	f7ff fc3c 	bl	8025f60 <BnrgmFrndFn_FSM>
 80266e8:	2000      	movs	r0, #0
 80266ea:	b007      	add	sp, #28
 80266ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80266f0:	3701      	adds	r7, #1
 80266f2:	b2ff      	uxtb	r7, r7
 80266f4:	e7d9      	b.n	80266aa <BnrgmFrndFnProcessFrndSubscrListRem+0x7e>
 80266f6:	2002      	movs	r0, #2
 80266f8:	e7f7      	b.n	80266ea <BnrgmFrndFnProcessFrndSubscrListRem+0xbe>
 80266fa:	bf00      	nop
 80266fc:	08033440 	.word	0x08033440
 8026700:	08032590 	.word	0x08032590
 8026704:	08033a13 	.word	0x08033a13

08026708 <BnrgmFrndFnProcessFrndSubscrListAdd>:
 8026708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802670c:	b087      	sub	sp, #28
 802670e:	4614      	mov	r4, r2
 8026710:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8026712:	4698      	mov	r8, r3
 8026714:	4681      	mov	r9, r0
 8026716:	b930      	cbnz	r0, 8026726 <BnrgmFrndFnProcessFrndSubscrListAdd+0x1e>
 8026718:	4b32      	ldr	r3, [pc, #200]	; (80267e4 <BnrgmFrndFnProcessFrndSubscrListAdd+0xdc>)
 802671a:	4a33      	ldr	r2, [pc, #204]	; (80267e8 <BnrgmFrndFnProcessFrndSubscrListAdd+0xe0>)
 802671c:	4833      	ldr	r0, [pc, #204]	; (80267ec <BnrgmFrndFnProcessFrndSubscrListAdd+0xe4>)
 802671e:	f240 31d5 	movw	r1, #981	; 0x3d5
 8026722:	f002 f9bb 	bl	8028a9c <__assert_func>
 8026726:	2b00      	cmp	r3, #0
 8026728:	d05a      	beq.n	80267e0 <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 802672a:	2f02      	cmp	r7, #2
 802672c:	d958      	bls.n	80267e0 <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 802672e:	07f8      	lsls	r0, r7, #31
 8026730:	d556      	bpl.n	80267e0 <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 8026732:	4610      	mov	r0, r2
 8026734:	8a89      	ldrh	r1, [r1, #20]
 8026736:	f7f7 fd04 	bl	801e142 <BnrgmFrndFnGetLpnOffset>
 802673a:	1c42      	adds	r2, r0, #1
 802673c:	4605      	mov	r5, r0
 802673e:	d04f      	beq.n	80267e0 <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 8026740:	f44f 764d 	mov.w	r6, #820	; 0x334
 8026744:	4346      	muls	r6, r0
 8026746:	19a3      	adds	r3, r4, r6
 8026748:	f898 b000 	ldrb.w	fp, [r8]
 802674c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8026750:	455b      	cmp	r3, fp
 8026752:	d033      	beq.n	80267bc <BnrgmFrndFnProcessFrndSubscrListAdd+0xb4>
 8026754:	087b      	lsrs	r3, r7, #1
 8026756:	361e      	adds	r6, #30
 8026758:	f44f 7acd 	mov.w	sl, #410	; 0x19a
 802675c:	9303      	str	r3, [sp, #12]
 802675e:	4426      	add	r6, r4
 8026760:	2700      	movs	r7, #0
 8026762:	fb0a fa00 	mul.w	sl, sl, r0
 8026766:	2102      	movs	r1, #2
 8026768:	fb01 8007 	mla	r0, r1, r7, r8
 802676c:	aa05      	add	r2, sp, #20
 802676e:	3001      	adds	r0, #1
 8026770:	f7f4 fd16 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 8026774:	2300      	movs	r3, #0
 8026776:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 802677a:	46b4      	mov	ip, r6
 802677c:	4619      	mov	r1, r3
 802677e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8026782:	f83c eb02 	ldrh.w	lr, [ip], #2
 8026786:	f1be 0f00 	cmp.w	lr, #0
 802678a:	d027      	beq.n	80267dc <BnrgmFrndFnProcessFrndSubscrListAdd+0xd4>
 802678c:	4570      	cmp	r0, lr
 802678e:	bf08      	it	eq
 8026790:	2101      	moveq	r1, #1
 8026792:	3301      	adds	r3, #1
 8026794:	2b06      	cmp	r3, #6
 8026796:	d1f4      	bne.n	8026782 <BnrgmFrndFnProcessFrndSubscrListAdd+0x7a>
 8026798:	1c53      	adds	r3, r2, #1
 802679a:	d009      	beq.n	80267b0 <BnrgmFrndFnProcessFrndSubscrListAdd+0xa8>
 802679c:	b919      	cbnz	r1, 80267a6 <BnrgmFrndFnProcessFrndSubscrListAdd+0x9e>
 802679e:	4452      	add	r2, sl
 80267a0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80267a4:	83d0      	strh	r0, [r2, #30]
 80267a6:	9b03      	ldr	r3, [sp, #12]
 80267a8:	3701      	adds	r7, #1
 80267aa:	b2ff      	uxtb	r7, r7
 80267ac:	429f      	cmp	r7, r3
 80267ae:	d3da      	bcc.n	8026766 <BnrgmFrndFnProcessFrndSubscrListAdd+0x5e>
 80267b0:	f44f 734d 	mov.w	r3, #820	; 0x334
 80267b4:	fb03 4305 	mla	r3, r3, r5, r4
 80267b8:	f883 b336 	strb.w	fp, [r3, #822]	; 0x336
 80267bc:	f44f 734d 	mov.w	r3, #820	; 0x334
 80267c0:	2204      	movs	r2, #4
 80267c2:	fb03 4305 	mla	r3, r3, r5, r4
 80267c6:	9200      	str	r2, [sp, #0]
 80267c8:	4413      	add	r3, r2
 80267ca:	4621      	mov	r1, r4
 80267cc:	b2ea      	uxtb	r2, r5
 80267ce:	4648      	mov	r0, r9
 80267d0:	f7ff fbc6 	bl	8025f60 <BnrgmFrndFn_FSM>
 80267d4:	2000      	movs	r0, #0
 80267d6:	b007      	add	sp, #28
 80267d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267dc:	b25a      	sxtb	r2, r3
 80267de:	e7d8      	b.n	8026792 <BnrgmFrndFnProcessFrndSubscrListAdd+0x8a>
 80267e0:	2002      	movs	r0, #2
 80267e2:	e7f8      	b.n	80267d6 <BnrgmFrndFnProcessFrndSubscrListAdd+0xce>
 80267e4:	08033440 	.word	0x08033440
 80267e8:	080325b4 	.word	0x080325b4
 80267ec:	08033a13 	.word	0x08033a13

080267f0 <MobleTransSarSendAck.isra.0>:
 80267f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80267f4:	b090      	sub	sp, #64	; 0x40
 80267f6:	2400      	movs	r4, #0
 80267f8:	4606      	mov	r6, r0
 80267fa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80267fc:	9400      	str	r4, [sp, #0]
 80267fe:	f8ad 4004 	strh.w	r4, [sp, #4]
 8026802:	f88d 4006 	strb.w	r4, [sp, #6]
 8026806:	f7f0 ffde 	bl	80177c6 <htobe32>
 802680a:	460d      	mov	r5, r1
 802680c:	4690      	mov	r8, r2
 802680e:	4682      	mov	sl, r0
 8026810:	2228      	movs	r2, #40	; 0x28
 8026812:	4621      	mov	r1, r4
 8026814:	a806      	add	r0, sp, #24
 8026816:	461f      	mov	r7, r3
 8026818:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 802681c:	f002 f9d0 	bl	8028bc0 <memset>
 8026820:	2302      	movs	r3, #2
 8026822:	f88d 3008 	strb.w	r3, [sp, #8]
 8026826:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 802682a:	f88d 300b 	strb.w	r3, [sp, #11]
 802682e:	a802      	add	r0, sp, #8
 8026830:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8026834:	f8ad 300c 	strh.w	r3, [sp, #12]
 8026838:	4669      	mov	r1, sp
 802683a:	f88d 4009 	strb.w	r4, [sp, #9]
 802683e:	f88d 400a 	strb.w	r4, [sp, #10]
 8026842:	f7f5 fdd5 	bl	801c3f0 <MobleTransportRenderHdr>
 8026846:	2308      	movs	r3, #8
 8026848:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802684c:	4b17      	ldr	r3, [pc, #92]	; (80268ac <MobleTransSarSendAck.isra.0+0xbc>)
 802684e:	f8cd a003 	str.w	sl, [sp, #3]
 8026852:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 8026856:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 802685a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 802685e:	3301      	adds	r3, #1
 8026860:	4648      	mov	r0, r9
 8026862:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8026866:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 802686a:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 802686e:	f7f3 ff23 	bl	801a6b8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8026872:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
 8026876:	4638      	mov	r0, r7
 8026878:	f7f3 ff38 	bl	801a6ec <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 802687c:	6833      	ldr	r3, [r6, #0]
 802687e:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
 8026882:	885a      	ldrh	r2, [r3, #2]
 8026884:	f8ad 9036 	strh.w	r9, [sp, #54]	; 0x36
 8026888:	4295      	cmp	r5, r2
 802688a:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
 802688e:	d303      	bcc.n	8026898 <MobleTransSarSendAck.isra.0+0xa8>
 8026890:	7f1b      	ldrb	r3, [r3, #28]
 8026892:	4413      	add	r3, r2
 8026894:	429d      	cmp	r5, r3
 8026896:	db05      	blt.n	80268a4 <MobleTransSarSendAck.isra.0+0xb4>
 8026898:	2307      	movs	r3, #7
 802689a:	466a      	mov	r2, sp
 802689c:	a906      	add	r1, sp, #24
 802689e:	4630      	mov	r0, r6
 80268a0:	f7fb fd68 	bl	8022374 <MobleNetworkSendData>
 80268a4:	b010      	add	sp, #64	; 0x40
 80268a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80268aa:	bf00      	nop
 80268ac:	20000318 	.word	0x20000318

080268b0 <MobleTransSarAssemble>:
 80268b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268b4:	b0b9      	sub	sp, #228	; 0xe4
 80268b6:	460c      	mov	r4, r1
 80268b8:	6909      	ldr	r1, [r1, #16]
 80268ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80268bc:	4615      	mov	r5, r2
 80268be:	f421 53ff 	bic.w	r3, r1, #8160	; 0x1fe0
 80268c2:	8892      	ldrh	r2, [r2, #4]
 80268c4:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8026b4c <MobleTransSarAssemble+0x29c>
 80268c8:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80268cc:	f023 031f 	bic.w	r3, r3, #31
 80268d0:	4413      	add	r3, r2
 80268d2:	428a      	cmp	r2, r1
 80268d4:	bf8c      	ite	hi
 80268d6:	f44f 5200 	movhi.w	r2, #8192	; 0x2000
 80268da:	2200      	movls	r2, #0
 80268dc:	1a9b      	subs	r3, r3, r2
 80268de:	4606      	mov	r6, r0
 80268e0:	f8b8 094c 	ldrh.w	r0, [r8, #2380]	; 0x94c
 80268e4:	930a      	str	r3, [sp, #40]	; 0x28
 80268e6:	f7f4 fac5 	bl	801ae74 <MobleMemAlloc>
 80268ea:	4607      	mov	r7, r0
 80268ec:	b150      	cbz	r0, 8026904 <MobleTransSarAssemble+0x54>
 80268ee:	f8b8 094e 	ldrh.w	r0, [r8, #2382]	; 0x94e
 80268f2:	f7f4 fabf 	bl	801ae74 <MobleMemAlloc>
 80268f6:	9008      	str	r0, [sp, #32]
 80268f8:	2800      	cmp	r0, #0
 80268fa:	f040 8122 	bne.w	8026b42 <MobleTransSarAssemble+0x292>
 80268fe:	4638      	mov	r0, r7
 8026900:	f7f4 fb42 	bl	801af88 <MobleMemFree>
 8026904:	2302      	movs	r3, #2
 8026906:	e085      	b.n	8026a14 <MobleTransSarAssemble+0x164>
 8026908:	79aa      	ldrb	r2, [r5, #6]
 802690a:	454a      	cmp	r2, r9
 802690c:	d142      	bne.n	8026994 <MobleTransSarAssemble+0xe4>
 802690e:	a938      	add	r1, sp, #224	; 0xe0
 8026910:	eb01 0189 	add.w	r1, r1, r9, lsl #2
 8026914:	6922      	ldr	r2, [r4, #16]
 8026916:	f841 2c8c 	str.w	r2, [r1, #-140]
 802691a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802691c:	f8dd a108 	ldr.w	sl, [sp, #264]	; 0x108
 8026920:	2a00      	cmp	r2, #0
 8026922:	f000 8101 	beq.w	8026b28 <MobleTransSarAssemble+0x278>
 8026926:	4611      	mov	r1, r2
 8026928:	4652      	mov	r2, sl
 802692a:	eb07 000b 	add.w	r0, r7, fp
 802692e:	f002 f91f 	bl	8028b70 <memcpy>
 8026932:	79ea      	ldrb	r2, [r5, #7]
 8026934:	454a      	cmp	r2, r9
 8026936:	44d3      	add	fp, sl
 8026938:	f109 0301 	add.w	r3, r9, #1
 802693c:	f040 80fd 	bne.w	8026b3a <MobleTransSarAssemble+0x28a>
 8026940:	68f3      	ldr	r3, [r6, #12]
 8026942:	3b01      	subs	r3, #1
 8026944:	60f3      	str	r3, [r6, #12]
 8026946:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 802694a:	f413 7800 	ands.w	r8, r3, #512	; 0x200
 802694e:	f000 80a1 	beq.w	8026a94 <MobleTransSarAssemble+0x1e4>
 8026952:	7ba3      	ldrb	r3, [r4, #14]
 8026954:	2b00      	cmp	r3, #0
 8026956:	d048      	beq.n	80269ea <MobleTransSarAssemble+0x13a>
 8026958:	2200      	movs	r2, #0
 802695a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802695e:	2b00      	cmp	r3, #0
 8026960:	dd16      	ble.n	8026990 <MobleTransSarAssemble+0xe0>
 8026962:	b112      	cbz	r2, 802696a <MobleTransSarAssemble+0xba>
 8026964:	6833      	ldr	r3, [r6, #0]
 8026966:	885b      	ldrh	r3, [r3, #2]
 8026968:	82e3      	strh	r3, [r4, #22]
 802696a:	79eb      	ldrb	r3, [r5, #7]
 802696c:	1c59      	adds	r1, r3, #1
 802696e:	2301      	movs	r3, #1
 8026970:	408b      	lsls	r3, r1
 8026972:	3b01      	subs	r3, #1
 8026974:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8026978:	88ab      	ldrh	r3, [r5, #4]
 802697a:	9301      	str	r3, [sp, #4]
 802697c:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8026980:	9300      	str	r3, [sp, #0]
 8026982:	8ae2      	ldrh	r2, [r4, #22]
 8026984:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8026988:	8aa1      	ldrh	r1, [r4, #20]
 802698a:	4630      	mov	r0, r6
 802698c:	f7ff ff30 	bl	80267f0 <MobleTransSarSendAck.isra.0>
 8026990:	2300      	movs	r3, #0
 8026992:	e037      	b.n	8026a04 <MobleTransSarAssemble+0x154>
 8026994:	222c      	movs	r2, #44	; 0x2c
 8026996:	435a      	muls	r2, r3
 8026998:	9209      	str	r2, [sp, #36]	; 0x24
 802699a:	f8d8 c2e0 	ldr.w	ip, [r8, #736]	; 0x2e0
 802699e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80269a0:	f81c 1001 	ldrb.w	r1, [ip, r1]
 80269a4:	4462      	add	r2, ip
 80269a6:	2900      	cmp	r1, #0
 80269a8:	f000 80bf 	beq.w	8026b2a <MobleTransSarAssemble+0x27a>
 80269ac:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 80269b0:	8aa1      	ldrh	r1, [r4, #20]
 80269b2:	458e      	cmp	lr, r1
 80269b4:	f040 80b9 	bne.w	8026b2a <MobleTransSarAssemble+0x27a>
 80269b8:	6851      	ldr	r1, [r2, #4]
 80269ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80269bc:	4281      	cmp	r1, r0
 80269be:	f040 80b4 	bne.w	8026b2a <MobleTransSarAssemble+0x27a>
 80269c2:	7c91      	ldrb	r1, [r2, #18]
 80269c4:	4549      	cmp	r1, r9
 80269c6:	f040 80b0 	bne.w	8026b2a <MobleTransSarAssemble+0x27a>
 80269ca:	ab38      	add	r3, sp, #224	; 0xe0
 80269cc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80269d0:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 80269d4:	f102 0115 	add.w	r1, r2, #21
 80269d8:	6892      	ldr	r2, [r2, #8]
 80269da:	f843 2c8c 	str.w	r2, [r3, #-140]
 80269de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80269e0:	f04f 0300 	mov.w	r3, #0
 80269e4:	f80c 3002 	strb.w	r3, [ip, r2]
 80269e8:	e79e      	b.n	8026928 <MobleTransSarAssemble+0x78>
 80269ea:	6832      	ldr	r2, [r6, #0]
 80269ec:	f892 a01c 	ldrb.w	sl, [r2, #28]
 80269f0:	8aa2      	ldrh	r2, [r4, #20]
 80269f2:	9209      	str	r2, [sp, #36]	; 0x24
 80269f4:	4698      	mov	r8, r3
 80269f6:	2302      	movs	r3, #2
 80269f8:	fa5f f288 	uxtb.w	r2, r8
 80269fc:	4592      	cmp	sl, r2
 80269fe:	d80d      	bhi.n	8026a1c <MobleTransSarAssemble+0x16c>
 8026a00:	2b01      	cmp	r3, #1
 8026a02:	d035      	beq.n	8026a70 <MobleTransSarAssemble+0x1c0>
 8026a04:	4638      	mov	r0, r7
 8026a06:	9309      	str	r3, [sp, #36]	; 0x24
 8026a08:	f7f4 fabe 	bl	801af88 <MobleMemFree>
 8026a0c:	9808      	ldr	r0, [sp, #32]
 8026a0e:	f7f4 fabb 	bl	801af88 <MobleMemFree>
 8026a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a14:	4618      	mov	r0, r3
 8026a16:	b039      	add	sp, #228	; 0xe4
 8026a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a1c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
 8026a20:	8aa2      	ldrh	r2, [r4, #20]
 8026a22:	f7fb f8eb 	bl	8021bfc <MobleConfigModel_KR_UseNewKeyDec>
 8026a26:	6833      	ldr	r3, [r6, #0]
 8026a28:	f895 c001 	ldrb.w	ip, [r5, #1]
 8026a2c:	9005      	str	r0, [sp, #20]
 8026a2e:	330c      	adds	r3, #12
 8026a30:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8026a34:	9b08      	ldr	r3, [sp, #32]
 8026a36:	78a9      	ldrb	r1, [r5, #2]
 8026a38:	9702      	str	r7, [sp, #8]
 8026a3a:	e9cd b303 	strd	fp, r3, [sp, #12]
 8026a3e:	fa12 f288 	uxtah	r2, r2, r8
 8026a42:	8ae3      	ldrh	r3, [r4, #22]
 8026a44:	b292      	uxth	r2, r2
 8026a46:	f1bc 0000 	subs.w	r0, ip, #0
 8026a4a:	e9cd 2300 	strd	r2, r3, [sp]
 8026a4e:	bf18      	it	ne
 8026a50:	2001      	movne	r0, #1
 8026a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026a54:	78ea      	ldrb	r2, [r5, #3]
 8026a56:	f7f4 ffd3 	bl	801ba00 <MoblePalCryptoDecryptApp>
 8026a5a:	fa1f f988 	uxth.w	r9, r8
 8026a5e:	4603      	mov	r3, r0
 8026a60:	f108 0801 	add.w	r8, r8, #1
 8026a64:	2800      	cmp	r0, #0
 8026a66:	d1c7      	bne.n	80269f8 <MobleTransSarAssemble+0x148>
 8026a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a6a:	4499      	add	r9, r3
 8026a6c:	f8a4 9014 	strh.w	r9, [r4, #20]
 8026a70:	78eb      	ldrb	r3, [r5, #3]
 8026a72:	2b00      	cmp	r3, #0
 8026a74:	bf14      	ite	ne
 8026a76:	2308      	movne	r3, #8
 8026a78:	2304      	moveq	r3, #4
 8026a7a:	ebab 0303 	sub.w	r3, fp, r3
 8026a7e:	9300      	str	r3, [sp, #0]
 8026a80:	462a      	mov	r2, r5
 8026a82:	9b08      	ldr	r3, [sp, #32]
 8026a84:	4621      	mov	r1, r4
 8026a86:	4630      	mov	r0, r6
 8026a88:	f7f5 f920 	bl	801bccc <MobleApplicationProcessPacket>
 8026a8c:	2801      	cmp	r0, #1
 8026a8e:	4603      	mov	r3, r0
 8026a90:	d8b8      	bhi.n	8026a04 <MobleTransSarAssemble+0x154>
 8026a92:	e761      	b.n	8026958 <MobleTransSarAssemble+0xa8>
 8026a94:	055b      	lsls	r3, r3, #21
 8026a96:	f57f af5f 	bpl.w	8026958 <MobleTransSarAssemble+0xa8>
 8026a9a:	2301      	movs	r3, #1
 8026a9c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8026aa0:	78eb      	ldrb	r3, [r5, #3]
 8026aa2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8026aa6:	78ab      	ldrb	r3, [r5, #2]
 8026aa8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8026aac:	786b      	ldrb	r3, [r5, #1]
 8026aae:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 8026ab2:	224c      	movs	r2, #76	; 0x4c
 8026ab4:	88ab      	ldrh	r3, [r5, #4]
 8026ab6:	f88d 903c 	strb.w	r9, [sp, #60]	; 0x3c
 8026aba:	4621      	mov	r1, r4
 8026abc:	a825      	add	r0, sp, #148	; 0x94
 8026abe:	f88d 8035 	strb.w	r8, [sp, #53]	; 0x35
 8026ac2:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
 8026ac6:	f002 f853 	bl	8028b70 <memcpy>
 8026aca:	46c1      	mov	r9, r8
 8026acc:	fa5f fa88 	uxtb.w	sl, r8
 8026ad0:	a911      	add	r1, sp, #68	; 0x44
 8026ad2:	a80d      	add	r0, sp, #52	; 0x34
 8026ad4:	f88d a03b 	strb.w	sl, [sp, #59]	; 0x3b
 8026ad8:	f7f5 fc8a 	bl	801c3f0 <MobleTransportRenderHdr>
 8026adc:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8026ae0:	fb19 fa0a 	smulbb	sl, r9, sl
 8026ae4:	4543      	cmp	r3, r8
 8026ae6:	fa5f fa8a 	uxtb.w	sl, sl
 8026aea:	ab15      	add	r3, sp, #84	; 0x54
 8026aec:	bf0c      	ite	eq
 8026aee:	ebab 090a 	subeq.w	r9, fp, sl
 8026af2:	f04f 090c 	movne.w	r9, #12
 8026af6:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8026afa:	9329      	str	r3, [sp, #164]	; 0xa4
 8026afc:	464a      	mov	r2, r9
 8026afe:	eb07 010a 	add.w	r1, r7, sl
 8026b02:	a812      	add	r0, sp, #72	; 0x48
 8026b04:	f002 f834 	bl	8028b70 <memcpy>
 8026b08:	f109 0304 	add.w	r3, r9, #4
 8026b0c:	9300      	str	r3, [sp, #0]
 8026b0e:	aa0d      	add	r2, sp, #52	; 0x34
 8026b10:	ab11      	add	r3, sp, #68	; 0x44
 8026b12:	a925      	add	r1, sp, #148	; 0x94
 8026b14:	4630      	mov	r0, r6
 8026b16:	f7f7 fd01 	bl	801e51c <BnrgmFrndMgmtQueLpnPkt>
 8026b1a:	79eb      	ldrb	r3, [r5, #7]
 8026b1c:	f108 0801 	add.w	r8, r8, #1
 8026b20:	4543      	cmp	r3, r8
 8026b22:	dad3      	bge.n	8026acc <MobleTransSarAssemble+0x21c>
 8026b24:	2201      	movs	r2, #1
 8026b26:	e718      	b.n	802695a <MobleTransSarAssemble+0xaa>
 8026b28:	3b01      	subs	r3, #1
 8026b2a:	3301      	adds	r3, #1
 8026b2c:	f898 22dc 	ldrb.w	r2, [r8, #732]	; 0x2dc
 8026b30:	429a      	cmp	r2, r3
 8026b32:	f73f aee9 	bgt.w	8026908 <MobleTransSarAssemble+0x58>
 8026b36:	2302      	movs	r3, #2
 8026b38:	e764      	b.n	8026a04 <MobleTransSarAssemble+0x154>
 8026b3a:	4699      	mov	r9, r3
 8026b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8026b40:	e7f3      	b.n	8026b2a <MobleTransSarAssemble+0x27a>
 8026b42:	2300      	movs	r3, #0
 8026b44:	469b      	mov	fp, r3
 8026b46:	4699      	mov	r9, r3
 8026b48:	e7f0      	b.n	8026b2c <MobleTransSarAssemble+0x27c>
 8026b4a:	bf00      	nop
 8026b4c:	20001410 	.word	0x20001410

08026b50 <MobleTransSarProcessSeg>:
 8026b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b54:	b087      	sub	sp, #28
 8026b56:	4616      	mov	r6, r2
 8026b58:	460d      	mov	r5, r1
 8026b5a:	6909      	ldr	r1, [r1, #16]
 8026b5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026b5e:	9204      	str	r2, [sp, #16]
 8026b60:	f421 58ff 	bic.w	r8, r1, #8160	; 0x1fe0
 8026b64:	88b2      	ldrh	r2, [r6, #4]
 8026b66:	f028 081f 	bic.w	r8, r8, #31
 8026b6a:	f3c1 040c 	ubfx	r4, r1, #0, #13
 8026b6e:	4490      	add	r8, r2
 8026b70:	42a2      	cmp	r2, r4
 8026b72:	bf8c      	ite	hi
 8026b74:	f44f 5200 	movhi.w	r2, #8192	; 0x2000
 8026b78:	2200      	movls	r2, #0
 8026b7a:	eba8 0802 	sub.w	r8, r8, r2
 8026b7e:	4683      	mov	fp, r0
 8026b80:	b930      	cbnz	r0, 8026b90 <MobleTransSarProcessSeg+0x40>
 8026b82:	4bc0      	ldr	r3, [pc, #768]	; (8026e84 <MobleTransSarProcessSeg+0x334>)
 8026b84:	4ac0      	ldr	r2, [pc, #768]	; (8026e88 <MobleTransSarProcessSeg+0x338>)
 8026b86:	48c1      	ldr	r0, [pc, #772]	; (8026e8c <MobleTransSarProcessSeg+0x33c>)
 8026b88:	f240 41c9 	movw	r1, #1225	; 0x4c9
 8026b8c:	f001 ff86 	bl	8028a9c <__assert_func>
 8026b90:	4541      	cmp	r1, r8
 8026b92:	d203      	bcs.n	8026b9c <MobleTransSarProcessSeg+0x4c>
 8026b94:	2002      	movs	r0, #2
 8026b96:	b007      	add	sp, #28
 8026b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026b9c:	79b1      	ldrb	r1, [r6, #6]
 8026b9e:	79f2      	ldrb	r2, [r6, #7]
 8026ba0:	4291      	cmp	r1, r2
 8026ba2:	d8f7      	bhi.n	8026b94 <MobleTransSarProcessSeg+0x44>
 8026ba4:	4cba      	ldr	r4, [pc, #744]	; (8026e90 <MobleTransSarProcessSeg+0x340>)
 8026ba6:	2700      	movs	r7, #0
 8026ba8:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
 8026bac:	f894 02dc 	ldrb.w	r0, [r4, #732]	; 0x2dc
 8026bb0:	f8d4 12e4 	ldr.w	r1, [r4, #740]	; 0x2e4
 8026bb4:	42b8      	cmp	r0, r7
 8026bb6:	dc4d      	bgt.n	8026c54 <MobleTransSarProcessSeg+0x104>
 8026bb8:	2700      	movs	r7, #0
 8026bba:	46b9      	mov	r9, r7
 8026bbc:	f1a1 0a2c 	sub.w	sl, r1, #44	; 0x2c
 8026bc0:	42b8      	cmp	r0, r7
 8026bc2:	d02f      	beq.n	8026c24 <MobleTransSarProcessSeg+0xd4>
 8026bc4:	f109 0c2c 	add.w	ip, r9, #44	; 0x2c
 8026bc8:	eb01 0209 	add.w	r2, r1, r9
 8026bcc:	f81a e00c 	ldrb.w	lr, [sl, ip]
 8026bd0:	f1be 0f00 	cmp.w	lr, #0
 8026bd4:	f040 80f3 	bne.w	8026dbe <MobleTransSarProcessSeg+0x26e>
 8026bd8:	2001      	movs	r0, #1
 8026bda:	8010      	strh	r0, [r2, #0]
 8026bdc:	8aa9      	ldrh	r1, [r5, #20]
 8026bde:	8091      	strh	r1, [r2, #4]
 8026be0:	8ae9      	ldrh	r1, [r5, #22]
 8026be2:	80d1      	strh	r1, [r2, #6]
 8026be4:	f8c2 800c 	str.w	r8, [r2, #12]
 8026be8:	f896 c006 	ldrb.w	ip, [r6, #6]
 8026bec:	f8c2 b028 	str.w	fp, [r2, #40]	; 0x28
 8026bf0:	b209      	sxth	r1, r1
 8026bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8026bf6:	2900      	cmp	r1, #0
 8026bf8:	6110      	str	r0, [r2, #16]
 8026bfa:	dd13      	ble.n	8026c24 <MobleTransSarProcessSeg+0xd4>
 8026bfc:	49a5      	ldr	r1, [pc, #660]	; (8026e94 <MobleTransSarProcessSeg+0x344>)
 8026bfe:	9305      	str	r3, [sp, #20]
 8026c00:	f102 0014 	add.w	r0, r2, #20
 8026c04:	f7f0 ff86 	bl	8017b14 <MoblePalTimerCreate>
 8026c08:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026c0c:	444a      	add	r2, r9
 8026c0e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8026c12:	6950      	ldr	r0, [r2, #20]
 8026c14:	f7f0 ffb7 	bl	8017b86 <MoblePalTimerStart>
 8026c18:	f8db 200c 	ldr.w	r2, [fp, #12]
 8026c1c:	9b05      	ldr	r3, [sp, #20]
 8026c1e:	3201      	adds	r2, #1
 8026c20:	f8cb 200c 	str.w	r2, [fp, #12]
 8026c24:	79f1      	ldrb	r1, [r6, #7]
 8026c26:	f894 22dc 	ldrb.w	r2, [r4, #732]	; 0x2dc
 8026c2a:	2900      	cmp	r1, #0
 8026c2c:	f040 80ca 	bne.w	8026dc4 <MobleTransSarProcessSeg+0x274>
 8026c30:	4297      	cmp	r7, r2
 8026c32:	f280 80c7 	bge.w	8026dc4 <MobleTransSarProcessSeg+0x274>
 8026c36:	222c      	movs	r2, #44	; 0x2c
 8026c38:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026c3c:	9305      	str	r3, [sp, #20]
 8026c3e:	4357      	muls	r7, r2
 8026c40:	4438      	add	r0, r7
 8026c42:	3014      	adds	r0, #20
 8026c44:	f7f1 f820 	bl	8017c88 <MobleTransEraseTimer>
 8026c48:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026c4c:	f240 1101 	movw	r1, #257	; 0x101
 8026c50:	53d1      	strh	r1, [r2, r7]
 8026c52:	e077      	b.n	8026d44 <MobleTransSarProcessSeg+0x1f4>
 8026c54:	fb0a f907 	mul.w	r9, sl, r7
 8026c58:	eb01 0009 	add.w	r0, r1, r9
 8026c5c:	f811 1009 	ldrb.w	r1, [r1, r9]
 8026c60:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8026c64:	8aaa      	ldrh	r2, [r5, #20]
 8026c66:	2900      	cmp	r1, #0
 8026c68:	f000 808d 	beq.w	8026d86 <MobleTransSarProcessSeg+0x236>
 8026c6c:	4594      	cmp	ip, r2
 8026c6e:	f040 80a2 	bne.w	8026db6 <MobleTransSarProcessSeg+0x266>
 8026c72:	68c2      	ldr	r2, [r0, #12]
 8026c74:	4542      	cmp	r2, r8
 8026c76:	f040 808b 	bne.w	8026d90 <MobleTransSarProcessSeg+0x240>
 8026c7a:	7842      	ldrb	r2, [r0, #1]
 8026c7c:	b392      	cbz	r2, 8026ce4 <MobleTransSarProcessSeg+0x194>
 8026c7e:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8026c82:	8ae8      	ldrh	r0, [r5, #22]
 8026c84:	2b00      	cmp	r3, #0
 8026c86:	dd2b      	ble.n	8026ce0 <MobleTransSarProcessSeg+0x190>
 8026c88:	f7f7 fae2 	bl	801e250 <BnrgmFrndMgmtGetFriendshipStatus>
 8026c8c:	4680      	mov	r8, r0
 8026c8e:	fab0 f780 	clz	r7, r0
 8026c92:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026c96:	4448      	add	r0, r9
 8026c98:	3014      	adds	r0, #20
 8026c9a:	f7f0 fff5 	bl	8017c88 <MobleTransEraseTimer>
 8026c9e:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026ca2:	4448      	add	r0, r9
 8026ca4:	301c      	adds	r0, #28
 8026ca6:	097f      	lsrs	r7, r7, #5
 8026ca8:	f7f0 ffee 	bl	8017c88 <MobleTransEraseTimer>
 8026cac:	f1b8 0f00 	cmp.w	r8, #0
 8026cb0:	d103      	bne.n	8026cba <MobleTransSarProcessSeg+0x16a>
 8026cb2:	f8db 3000 	ldr.w	r3, [fp]
 8026cb6:	885b      	ldrh	r3, [r3, #2]
 8026cb8:	82eb      	strh	r3, [r5, #22]
 8026cba:	79f3      	ldrb	r3, [r6, #7]
 8026cbc:	8aa9      	ldrh	r1, [r5, #20]
 8026cbe:	1c5a      	adds	r2, r3, #1
 8026cc0:	2301      	movs	r3, #1
 8026cc2:	4093      	lsls	r3, r2
 8026cc4:	3b01      	subs	r3, #1
 8026cc6:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8026cca:	88b3      	ldrh	r3, [r6, #4]
 8026ccc:	9301      	str	r3, [sp, #4]
 8026cce:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
 8026cd2:	9300      	str	r3, [sp, #0]
 8026cd4:	8aea      	ldrh	r2, [r5, #22]
 8026cd6:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
 8026cda:	4658      	mov	r0, fp
 8026cdc:	f7ff fd88 	bl	80267f0 <MobleTransSarSendAck.isra.0>
 8026ce0:	2000      	movs	r0, #0
 8026ce2:	e758      	b.n	8026b96 <MobleTransSarProcessSeg+0x46>
 8026ce4:	79b2      	ldrb	r2, [r6, #6]
 8026ce6:	6901      	ldr	r1, [r0, #16]
 8026ce8:	f04f 0a01 	mov.w	sl, #1
 8026cec:	fa0a f202 	lsl.w	r2, sl, r2
 8026cf0:	4211      	tst	r1, r2
 8026cf2:	d132      	bne.n	8026d5a <MobleTransSarProcessSeg+0x20a>
 8026cf4:	4311      	orrs	r1, r2
 8026cf6:	6101      	str	r1, [r0, #16]
 8026cf8:	79f2      	ldrb	r2, [r6, #7]
 8026cfa:	4452      	add	r2, sl
 8026cfc:	fa0a f202 	lsl.w	r2, sl, r2
 8026d00:	3a01      	subs	r2, #1
 8026d02:	4291      	cmp	r1, r2
 8026d04:	d161      	bne.n	8026dca <MobleTransSarProcessSeg+0x27a>
 8026d06:	3014      	adds	r0, #20
 8026d08:	9305      	str	r3, [sp, #20]
 8026d0a:	f7f0 ffbd 	bl	8017c88 <MobleTransEraseTimer>
 8026d0e:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026d12:	4448      	add	r0, r9
 8026d14:	3020      	adds	r0, #32
 8026d16:	f7f0 ffb7 	bl	8017c88 <MobleTransEraseTimer>
 8026d1a:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026d1e:	495e      	ldr	r1, [pc, #376]	; (8026e98 <MobleTransSarProcessSeg+0x348>)
 8026d20:	444a      	add	r2, r9
 8026d22:	f102 001c 	add.w	r0, r2, #28
 8026d26:	f7f0 fef5 	bl	8017b14 <MoblePalTimerCreate>
 8026d2a:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026d2e:	444a      	add	r2, r9
 8026d30:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8026d34:	69d0      	ldr	r0, [r2, #28]
 8026d36:	f7f0 ff57 	bl	8017be8 <MoblePalTimerStartOnce>
 8026d3a:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026d3e:	4481      	add	r9, r0
 8026d40:	f889 a001 	strb.w	sl, [r9, #1]
 8026d44:	9b04      	ldr	r3, [sp, #16]
 8026d46:	9310      	str	r3, [sp, #64]	; 0x40
 8026d48:	9b05      	ldr	r3, [sp, #20]
 8026d4a:	4632      	mov	r2, r6
 8026d4c:	4629      	mov	r1, r5
 8026d4e:	4658      	mov	r0, fp
 8026d50:	b007      	add	sp, #28
 8026d52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d56:	f7ff bdab 	b.w	80268b0 <MobleTransSarAssemble>
 8026d5a:	301c      	adds	r0, #28
 8026d5c:	f7f0 ff94 	bl	8017c88 <MobleTransEraseTimer>
 8026d60:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026d64:	494c      	ldr	r1, [pc, #304]	; (8026e98 <MobleTransSarProcessSeg+0x348>)
 8026d66:	444a      	add	r2, r9
 8026d68:	f102 001c 	add.w	r0, r2, #28
 8026d6c:	f7f0 fed2 	bl	8017b14 <MoblePalTimerCreate>
 8026d70:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026d74:	4481      	add	r9, r0
 8026d76:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8026d7a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8026d7e:	f7f0 ff33 	bl	8017be8 <MoblePalTimerStartOnce>
 8026d82:	2001      	movs	r0, #1
 8026d84:	e707      	b.n	8026b96 <MobleTransSarProcessSeg+0x46>
 8026d86:	4594      	cmp	ip, r2
 8026d88:	d115      	bne.n	8026db6 <MobleTransSarProcessSeg+0x266>
 8026d8a:	68c2      	ldr	r2, [r0, #12]
 8026d8c:	4542      	cmp	r2, r8
 8026d8e:	d0f8      	beq.n	8026d82 <MobleTransSarProcessSeg+0x232>
 8026d90:	68c2      	ldr	r2, [r0, #12]
 8026d92:	4542      	cmp	r2, r8
 8026d94:	d211      	bcs.n	8026dba <MobleTransSarProcessSeg+0x26a>
 8026d96:	301c      	adds	r0, #28
 8026d98:	9305      	str	r3, [sp, #20]
 8026d9a:	f7f0 ff75 	bl	8017c88 <MobleTransEraseTimer>
 8026d9e:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026da2:	4448      	add	r0, r9
 8026da4:	3014      	adds	r0, #20
 8026da6:	f7f0 ff6f 	bl	8017c88 <MobleTransEraseTimer>
 8026daa:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026dae:	9b05      	ldr	r3, [sp, #20]
 8026db0:	2100      	movs	r1, #0
 8026db2:	f802 1009 	strb.w	r1, [r2, r9]
 8026db6:	3701      	adds	r7, #1
 8026db8:	e6f8      	b.n	8026bac <MobleTransSarProcessSeg+0x5c>
 8026dba:	d9fc      	bls.n	8026db6 <MobleTransSarProcessSeg+0x266>
 8026dbc:	e6ea      	b.n	8026b94 <MobleTransSarProcessSeg+0x44>
 8026dbe:	3701      	adds	r7, #1
 8026dc0:	46e1      	mov	r9, ip
 8026dc2:	e6fd      	b.n	8026bc0 <MobleTransSarProcessSeg+0x70>
 8026dc4:	4297      	cmp	r7, r2
 8026dc6:	f43f aee5 	beq.w	8026b94 <MobleTransSarProcessSeg+0x44>
 8026dca:	222c      	movs	r2, #44	; 0x2c
 8026dcc:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026dd0:	9305      	str	r3, [sp, #20]
 8026dd2:	4357      	muls	r7, r2
 8026dd4:	4438      	add	r0, r7
 8026dd6:	3020      	adds	r0, #32
 8026dd8:	f7f0 ff56 	bl	8017c88 <MobleTransEraseTimer>
 8026ddc:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026de0:	492e      	ldr	r1, [pc, #184]	; (8026e9c <MobleTransSarProcessSeg+0x34c>)
 8026de2:	443a      	add	r2, r7
 8026de4:	f102 0020 	add.w	r0, r2, #32
 8026de8:	f7f0 fe94 	bl	8017b14 <MoblePalTimerCreate>
 8026dec:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026df0:	443a      	add	r2, r7
 8026df2:	f64e 2160 	movw	r1, #60000	; 0xea60
 8026df6:	6a10      	ldr	r0, [r2, #32]
 8026df8:	f7f0 fef6 	bl	8017be8 <MoblePalTimerStartOnce>
 8026dfc:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 8026e00:	9b05      	ldr	r3, [sp, #20]
 8026e02:	2a00      	cmp	r2, #0
 8026e04:	dd12      	ble.n	8026e2c <MobleTransSarProcessSeg+0x2dc>
 8026e06:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026e0a:	443a      	add	r2, r7
 8026e0c:	6951      	ldr	r1, [r2, #20]
 8026e0e:	b969      	cbnz	r1, 8026e2c <MobleTransSarProcessSeg+0x2dc>
 8026e10:	4920      	ldr	r1, [pc, #128]	; (8026e94 <MobleTransSarProcessSeg+0x344>)
 8026e12:	f102 0014 	add.w	r0, r2, #20
 8026e16:	f7f0 fe7d 	bl	8017b14 <MoblePalTimerCreate>
 8026e1a:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026e1e:	4417      	add	r7, r2
 8026e20:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8026e24:	6978      	ldr	r0, [r7, #20]
 8026e26:	f7f0 feae 	bl	8017b86 <MoblePalTimerStart>
 8026e2a:	9b05      	ldr	r3, [sp, #20]
 8026e2c:	f894 12dc 	ldrb.w	r1, [r4, #732]	; 0x2dc
 8026e30:	f8d4 22e0 	ldr.w	r2, [r4, #736]	; 0x2e0
 8026e34:	f04f 0900 	mov.w	r9, #0
 8026e38:	4549      	cmp	r1, r9
 8026e3a:	dd19      	ble.n	8026e70 <MobleTransSarProcessSeg+0x320>
 8026e3c:	4617      	mov	r7, r2
 8026e3e:	f812 0b2c 	ldrb.w	r0, [r2], #44
 8026e42:	b9d8      	cbnz	r0, 8026e7c <MobleTransSarProcessSeg+0x32c>
 8026e44:	2201      	movs	r2, #1
 8026e46:	703a      	strb	r2, [r7, #0]
 8026e48:	8aaa      	ldrh	r2, [r5, #20]
 8026e4a:	807a      	strh	r2, [r7, #2]
 8026e4c:	692a      	ldr	r2, [r5, #16]
 8026e4e:	6830      	ldr	r0, [r6, #0]
 8026e50:	6871      	ldr	r1, [r6, #4]
 8026e52:	e9c7 8201 	strd	r8, r2, [r7, #4]
 8026e56:	f107 020c 	add.w	r2, r7, #12
 8026e5a:	c203      	stmia	r2!, {r0, r1}
 8026e5c:	7a31      	ldrb	r1, [r6, #8]
 8026e5e:	7011      	strb	r1, [r2, #0]
 8026e60:	f107 0015 	add.w	r0, r7, #21
 8026e64:	4619      	mov	r1, r3
 8026e66:	9a04      	ldr	r2, [sp, #16]
 8026e68:	f001 fe82 	bl	8028b70 <memcpy>
 8026e6c:	9b04      	ldr	r3, [sp, #16]
 8026e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8026e70:	f894 32dc 	ldrb.w	r3, [r4, #732]	; 0x2dc
 8026e74:	454b      	cmp	r3, r9
 8026e76:	f47f af33 	bne.w	8026ce0 <MobleTransSarProcessSeg+0x190>
 8026e7a:	e68b      	b.n	8026b94 <MobleTransSarProcessSeg+0x44>
 8026e7c:	f109 0901 	add.w	r9, r9, #1
 8026e80:	e7da      	b.n	8026e38 <MobleTransSarProcessSeg+0x2e8>
 8026e82:	bf00      	nop
 8026e84:	08033440 	.word	0x08033440
 8026e88:	080325d8 	.word	0x080325d8
 8026e8c:	080338d0 	.word	0x080338d0
 8026e90:	20001410 	.word	0x20001410
 8026e94:	08026ee5 	.word	0x08026ee5
 8026e98:	08026ea1 	.word	0x08026ea1
 8026e9c:	08017cc1 	.word	0x08017cc1

08026ea0 <MobleTransSarOnAckSentInsurance>:
 8026ea0:	b530      	push	{r4, r5, lr}
 8026ea2:	460c      	mov	r4, r1
 8026ea4:	b085      	sub	sp, #20
 8026ea6:	f101 001c 	add.w	r0, r1, #28
 8026eaa:	f7f0 feed 	bl	8017c88 <MobleTransEraseTimer>
 8026eae:	88e0      	ldrh	r0, [r4, #6]
 8026eb0:	f7f7 f9ce 	bl	801e250 <BnrgmFrndMgmtGetFriendshipStatus>
 8026eb4:	2800      	cmp	r0, #0
 8026eb6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8026eb8:	6925      	ldr	r5, [r4, #16]
 8026eba:	bf08      	it	eq
 8026ebc:	6802      	ldreq	r2, [r0, #0]
 8026ebe:	88a1      	ldrh	r1, [r4, #4]
 8026ec0:	bf0b      	itete	eq
 8026ec2:	8852      	ldrheq	r2, [r2, #2]
 8026ec4:	88e2      	ldrhne	r2, [r4, #6]
 8026ec6:	2301      	moveq	r3, #1
 8026ec8:	2300      	movne	r3, #0
 8026eca:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8026ece:	68e3      	ldr	r3, [r4, #12]
 8026ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8026ed4:	9301      	str	r3, [sp, #4]
 8026ed6:	8963      	ldrh	r3, [r4, #10]
 8026ed8:	9300      	str	r3, [sp, #0]
 8026eda:	8923      	ldrh	r3, [r4, #8]
 8026edc:	f7ff fc88 	bl	80267f0 <MobleTransSarSendAck.isra.0>
 8026ee0:	b005      	add	sp, #20
 8026ee2:	bd30      	pop	{r4, r5, pc}

08026ee4 <MobleTransSarOnAckTimer>:
 8026ee4:	b530      	push	{r4, r5, lr}
 8026ee6:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 8026eea:	2b05      	cmp	r3, #5
 8026eec:	b085      	sub	sp, #20
 8026eee:	460c      	mov	r4, r1
 8026ef0:	d906      	bls.n	8026f00 <MobleTransSarOnAckTimer+0x1c>
 8026ef2:	f101 0014 	add.w	r0, r1, #20
 8026ef6:	b005      	add	sp, #20
 8026ef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026efc:	f7f0 bec4 	b.w	8017c88 <MobleTransEraseTimer>
 8026f00:	3301      	adds	r3, #1
 8026f02:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
 8026f06:	88c8      	ldrh	r0, [r1, #6]
 8026f08:	f7f7 f9a2 	bl	801e250 <BnrgmFrndMgmtGetFriendshipStatus>
 8026f0c:	2800      	cmp	r0, #0
 8026f0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8026f10:	6925      	ldr	r5, [r4, #16]
 8026f12:	bf08      	it	eq
 8026f14:	6802      	ldreq	r2, [r0, #0]
 8026f16:	88a1      	ldrh	r1, [r4, #4]
 8026f18:	bf0b      	itete	eq
 8026f1a:	8852      	ldrheq	r2, [r2, #2]
 8026f1c:	88e2      	ldrhne	r2, [r4, #6]
 8026f1e:	2301      	moveq	r3, #1
 8026f20:	2300      	movne	r3, #0
 8026f22:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8026f26:	68e3      	ldr	r3, [r4, #12]
 8026f28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8026f2c:	9301      	str	r3, [sp, #4]
 8026f2e:	8963      	ldrh	r3, [r4, #10]
 8026f30:	9300      	str	r3, [sp, #0]
 8026f32:	8923      	ldrh	r3, [r4, #8]
 8026f34:	f7ff fc5c 	bl	80267f0 <MobleTransSarSendAck.isra.0>
 8026f38:	b005      	add	sp, #20
 8026f3a:	bd30      	pop	{r4, r5, pc}

08026f3c <BnrgmHealthModelCreate>:
 8026f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026f3e:	4d0d      	ldr	r5, [pc, #52]	; (8026f74 <BnrgmHealthModelCreate+0x38>)
 8026f40:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
 8026f44:	2b01      	cmp	r3, #1
 8026f46:	d012      	beq.n	8026f6e <BnrgmHealthModelCreate+0x32>
 8026f48:	2301      	movs	r3, #1
 8026f4a:	f885 30f4 	strb.w	r3, [r5, #244]	; 0xf4
 8026f4e:	2400      	movs	r4, #0
 8026f50:	686b      	ldr	r3, [r5, #4]
 8026f52:	f885 40f6 	strb.w	r4, [r5, #246]	; 0xf6
 8026f56:	699b      	ldr	r3, [r3, #24]
 8026f58:	4668      	mov	r0, sp
 8026f5a:	4798      	blx	r3
 8026f5c:	4b06      	ldr	r3, [pc, #24]	; (8026f78 <BnrgmHealthModelCreate+0x3c>)
 8026f5e:	f8bd 2000 	ldrh.w	r2, [sp]
 8026f62:	805a      	strh	r2, [r3, #2]
 8026f64:	f885 4f20 	strb.w	r4, [r5, #3872]	; 0xf20
 8026f68:	4620      	mov	r0, r4
 8026f6a:	b003      	add	sp, #12
 8026f6c:	bd30      	pop	{r4, r5, pc}
 8026f6e:	2002      	movs	r0, #2
 8026f70:	e7fb      	b.n	8026f6a <BnrgmHealthModelCreate+0x2e>
 8026f72:	bf00      	nop
 8026f74:	20000318 	.word	0x20000318
 8026f78:	20000008 	.word	0x20000008

08026f7c <MobleLibraryInit>:
 8026f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026f7e:	b085      	sub	sp, #20
 8026f80:	4604      	mov	r4, r0
 8026f82:	f7f5 ff2d 	bl	801cde0 <MobleConfigInit>
 8026f86:	2801      	cmp	r0, #1
 8026f88:	d903      	bls.n	8026f92 <MobleLibraryInit+0x16>
 8026f8a:	2602      	movs	r6, #2
 8026f8c:	4630      	mov	r0, r6
 8026f8e:	b005      	add	sp, #20
 8026f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026f92:	6a22      	ldr	r2, [r4, #32]
 8026f94:	4d33      	ldr	r5, [pc, #204]	; (8027064 <MobleLibraryInit+0xe8>)
 8026f96:	6813      	ldr	r3, [r2, #0]
 8026f98:	8890      	ldrh	r0, [r2, #4]
 8026f9a:	88d1      	ldrh	r1, [r2, #6]
 8026f9c:	f8a5 1a08 	strh.w	r1, [r5, #2568]	; 0xa08
 8026fa0:	4403      	add	r3, r0
 8026fa2:	f8c5 3a04 	str.w	r3, [r5, #2564]	; 0xa04
 8026fa6:	68a3      	ldr	r3, [r4, #8]
 8026fa8:	9301      	str	r3, [sp, #4]
 8026faa:	7ea3      	ldrb	r3, [r4, #26]
 8026fac:	9300      	str	r3, [sp, #0]
 8026fae:	f505 61de 	add.w	r1, r5, #1776	; 0x6f0
 8026fb2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8026fb6:	f205 60b4 	addw	r0, r5, #1716	; 0x6b4
 8026fba:	f7f9 fb2d 	bl	8020618 <MobleStackInit>
 8026fbe:	2801      	cmp	r0, #1
 8026fc0:	d8e3      	bhi.n	8026f8a <MobleLibraryInit+0xe>
 8026fc2:	6a23      	ldr	r3, [r4, #32]
 8026fc4:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	; 0x6f0
 8026fc8:	8959      	ldrh	r1, [r3, #10]
 8026fca:	2900      	cmp	r1, #0
 8026fcc:	d03f      	beq.n	802704e <MobleLibraryInit+0xd2>
 8026fce:	889a      	ldrh	r2, [r3, #4]
 8026fd0:	88de      	ldrh	r6, [r3, #6]
 8026fd2:	4416      	add	r6, r2
 8026fd4:	681a      	ldr	r2, [r3, #0]
 8026fd6:	4432      	add	r2, r6
 8026fd8:	6966      	ldr	r6, [r4, #20]
 8026fda:	7937      	ldrb	r7, [r6, #4]
 8026fdc:	7833      	ldrb	r3, [r6, #0]
 8026fde:	9703      	str	r7, [sp, #12]
 8026fe0:	78f7      	ldrb	r7, [r6, #3]
 8026fe2:	9702      	str	r7, [sp, #8]
 8026fe4:	78b7      	ldrb	r7, [r6, #2]
 8026fe6:	9701      	str	r7, [sp, #4]
 8026fe8:	7876      	ldrb	r6, [r6, #1]
 8026fea:	9600      	str	r6, [sp, #0]
 8026fec:	f7f6 f974 	bl	801d2d8 <BLEMesh_NeighborTableInit>
 8026ff0:	2801      	cmp	r0, #1
 8026ff2:	d8ca      	bhi.n	8026f8a <MobleLibraryInit+0xe>
 8026ff4:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	; 0x6f0
 8026ff8:	f7f5 fee4 	bl	801cdc4 <MobleApplicationInit>
 8026ffc:	2801      	cmp	r0, #1
 8026ffe:	4606      	mov	r6, r0
 8027000:	d8c3      	bhi.n	8026f8a <MobleLibraryInit+0xe>
 8027002:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	; 0x6f0
 8027006:	f7fa f80b 	bl	8021020 <MobleConfigModelCreate>
 802700a:	2801      	cmp	r0, #1
 802700c:	d8bd      	bhi.n	8026f8a <MobleLibraryInit+0xe>
 802700e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8027012:	8b21      	ldrh	r1, [r4, #24]
 8027014:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	; 0x6f0
 8027018:	f7f9 ff38 	bl	8020e8c <MobleConfigModelInit>
 802701c:	2801      	cmp	r0, #1
 802701e:	d8b4      	bhi.n	8026f8a <MobleLibraryInit+0xe>
 8027020:	f8d5 36f0 	ldr.w	r3, [r5, #1776]	; 0x6f0
 8027024:	b15b      	cbz	r3, 802703e <MobleLibraryInit+0xc2>
 8027026:	681a      	ldr	r2, [r3, #0]
 8027028:	7812      	ldrb	r2, [r2, #0]
 802702a:	2a01      	cmp	r2, #1
 802702c:	d111      	bne.n	8027052 <MobleLibraryInit+0xd6>
 802702e:	4b0e      	ldr	r3, [pc, #56]	; (8027068 <MobleLibraryInit+0xec>)
 8027030:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8027034:	2b02      	cmp	r3, #2
 8027036:	d010      	beq.n	802705a <MobleLibraryInit+0xde>
 8027038:	2000      	movs	r0, #0
 802703a:	f7f8 fa65 	bl	801f508 <BnrgmTransmitSetAutoScanState>
 802703e:	f7ff ff7d 	bl	8026f3c <BnrgmHealthModelCreate>
 8027042:	2801      	cmp	r0, #1
 8027044:	d8a1      	bhi.n	8026f8a <MobleLibraryInit+0xe>
 8027046:	4b08      	ldr	r3, [pc, #32]	; (8027068 <MobleLibraryInit+0xec>)
 8027048:	69e2      	ldr	r2, [r4, #28]
 802704a:	601a      	str	r2, [r3, #0]
 802704c:	e79e      	b.n	8026f8c <MobleLibraryInit+0x10>
 802704e:	460a      	mov	r2, r1
 8027050:	e7c2      	b.n	8026fd8 <MobleLibraryInit+0x5c>
 8027052:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8027056:	2b01      	cmp	r3, #1
 8027058:	d1e9      	bne.n	802702e <MobleLibraryInit+0xb2>
 802705a:	4b04      	ldr	r3, [pc, #16]	; (802706c <MobleLibraryInit+0xf0>)
 802705c:	2201      	movs	r2, #1
 802705e:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
 8027062:	e7ec      	b.n	802703e <MobleLibraryInit+0xc2>
 8027064:	20002508 	.word	0x20002508
 8027068:	20000318 	.word	0x20000318
 802706c:	20003f58 	.word	0x20003f58

08027070 <BLEMesh_Init>:
 8027070:	b510      	push	{r4, lr}
 8027072:	4604      	mov	r4, r0
 8027074:	f7f4 f874 	bl	801b160 <mem_alloc_init>
 8027078:	4620      	mov	r0, r4
 802707a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802707e:	f7ff bf7d 	b.w	8026f7c <MobleLibraryInit>

08027082 <BnrgmHealthModelAttentionTimerSet>:
 8027082:	6803      	ldr	r3, [r0, #0]
 8027084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027086:	f883 106e 	strb.w	r1, [r3, #110]	; 0x6e
 802708a:	f7f0 bd7f 	b.w	8017b8c <BnrgmHealthModelSetAttentionTimer>
	...

08027090 <MobleProvision_UnprovisionedNode_DeInit>:
 8027090:	b538      	push	{r3, r4, r5, lr}
 8027092:	4c0e      	ldr	r4, [pc, #56]	; (80270cc <MobleProvision_UnprovisionedNode_DeInit+0x3c>)
 8027094:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	; 0xa0c
 8027098:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 802709c:	2b01      	cmp	r3, #1
 802709e:	d106      	bne.n	80270ae <MobleProvision_UnprovisionedNode_DeInit+0x1e>
 80270a0:	f7f2 fe48 	bl	8019d34 <MoblePalCryptoFreeEcc>
 80270a4:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	; 0xa0c
 80270a8:	2200      	movs	r2, #0
 80270aa:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
 80270ae:	2500      	movs	r5, #0
 80270b0:	f8d4 0a0c 	ldr.w	r0, [r4, #2572]	; 0xa0c
 80270b4:	f7f3 ff68 	bl	801af88 <MobleMemFree>
 80270b8:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	; 0x6f0
 80270bc:	f8c4 5a0c 	str.w	r5, [r4, #2572]	; 0xa0c
 80270c0:	4629      	mov	r1, r5
 80270c2:	f7ff ffde 	bl	8027082 <BnrgmHealthModelAttentionTimerSet>
 80270c6:	4628      	mov	r0, r5
 80270c8:	bd38      	pop	{r3, r4, r5, pc}
 80270ca:	bf00      	nop
 80270cc:	20002508 	.word	0x20002508

080270d0 <MobleProvisionBearerGatt_DeInit>:
 80270d0:	b508      	push	{r3, lr}
 80270d2:	4906      	ldr	r1, [pc, #24]	; (80270ec <MobleProvisionBearerGatt_DeInit+0x1c>)
 80270d4:	f501 6024 	add.w	r0, r1, #2624	; 0xa40
 80270d8:	f7f8 f814 	bl	801f104 <MobleProvisionBearerGatt_DeleteTimer>
 80270dc:	f601 2044 	addw	r0, r1, #2628	; 0xa44
 80270e0:	f7f8 f810 	bl	801f104 <MobleProvisionBearerGatt_DeleteTimer>
 80270e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80270e8:	f7ff bfd2 	b.w	8027090 <MobleProvision_UnprovisionedNode_DeInit>
 80270ec:	20002508 	.word	0x20002508

080270f0 <MobleProvision_DeInit>:
 80270f0:	b908      	cbnz	r0, 80270f6 <MobleProvision_DeInit+0x6>
 80270f2:	f7f8 be91 	b.w	801fe18 <MobleProvision_ProvisionerNode_DeInit>
 80270f6:	f7ff bfcb 	b.w	8027090 <MobleProvision_UnprovisionedNode_DeInit>

080270fa <MoblePBADVCloseLink>:
 80270fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80270fc:	2300      	movs	r3, #0
 80270fe:	4604      	mov	r4, r0
 8027100:	f88d 3007 	strb.w	r3, [sp, #7]
 8027104:	b149      	cbz	r1, 802711a <MoblePBADVCloseLink+0x20>
 8027106:	2503      	movs	r5, #3
 8027108:	2301      	movs	r3, #1
 802710a:	f10d 0207 	add.w	r2, sp, #7
 802710e:	2102      	movs	r1, #2
 8027110:	4620      	mov	r0, r4
 8027112:	f7f3 fdcb 	bl	801acac <MoblePBADVSendControl.isra.0>
 8027116:	3d01      	subs	r5, #1
 8027118:	d1f6      	bne.n	8027108 <MoblePBADVCloseLink+0xe>
 802711a:	f894 3020 	ldrb.w	r3, [r4, #32]
 802711e:	3b00      	subs	r3, #0
 8027120:	bf18      	it	ne
 8027122:	2301      	movne	r3, #1
 8027124:	7023      	strb	r3, [r4, #0]
 8027126:	2300      	movs	r3, #0
 8027128:	61e3      	str	r3, [r4, #28]
 802712a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 802712e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8027132:	62a3      	str	r3, [r4, #40]	; 0x28
 8027134:	4620      	mov	r0, r4
 8027136:	f7f0 fdf8 	bl	8017d2a <MoblePBADVClearTimers>
 802713a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 802713e:	b113      	cbz	r3, 8027146 <MoblePBADVCloseLink+0x4c>
 8027140:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
 8027144:	4798      	blx	r3
 8027146:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
 802714a:	b91b      	cbnz	r3, 8027154 <MoblePBADVCloseLink+0x5a>
 802714c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8027150:	f7ff ffce 	bl	80270f0 <MobleProvision_DeInit>
 8027154:	b003      	add	sp, #12
 8027156:	bd30      	pop	{r4, r5, pc}

08027158 <MoblePBADVOnOpenLinkRetransmit>:
 8027158:	b513      	push	{r0, r1, r4, lr}
 802715a:	f8d1 3158 	ldr.w	r3, [r1, #344]	; 0x158
 802715e:	9001      	str	r0, [sp, #4]
 8027160:	2b63      	cmp	r3, #99	; 0x63
 8027162:	460c      	mov	r4, r1
 8027164:	dd05      	ble.n	8027172 <MoblePBADVOnOpenLinkRetransmit+0x1a>
 8027166:	2101      	movs	r1, #1
 8027168:	4620      	mov	r0, r4
 802716a:	f7ff ffc6 	bl	80270fa <MoblePBADVCloseLink>
 802716e:	b002      	add	sp, #8
 8027170:	bd10      	pop	{r4, pc}
 8027172:	a801      	add	r0, sp, #4
 8027174:	f7f0 fdd0 	bl	8017d18 <MoblePBADVEraseTimer>
 8027178:	f101 0208 	add.w	r2, r1, #8
 802717c:	2310      	movs	r3, #16
 802717e:	2100      	movs	r1, #0
 8027180:	4620      	mov	r0, r4
 8027182:	f7f3 fd93 	bl	801acac <MoblePBADVSendControl.isra.0>
 8027186:	e7f2      	b.n	802716e <MoblePBADVOnOpenLinkRetransmit+0x16>

08027188 <MoblePBADVOnTransactionTimeout>:
 8027188:	4608      	mov	r0, r1
 802718a:	2100      	movs	r1, #0
 802718c:	f7ff bfb5 	b.w	80270fa <MoblePBADVCloseLink>

08027190 <MoblePBADVOnLinkIdleTimeout>:
 8027190:	4608      	mov	r0, r1
 8027192:	2101      	movs	r1, #1
 8027194:	f7ff bfb1 	b.w	80270fa <MoblePBADVCloseLink>

08027198 <MoblePBADVStopProvisioning>:
 8027198:	b508      	push	{r3, lr}
 802719a:	2101      	movs	r1, #1
 802719c:	f7ff ffad 	bl	80270fa <MoblePBADVCloseLink>
 80271a0:	2000      	movs	r0, #0
 80271a2:	bd08      	pop	{r3, pc}

080271a4 <MoblePBADVSendTransaction.isra.0>:
 80271a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80271a8:	4604      	mov	r4, r0
 80271aa:	6840      	ldr	r0, [r0, #4]
 80271ac:	f8d0 3158 	ldr.w	r3, [r0, #344]	; 0x158
 80271b0:	2b63      	cmp	r3, #99	; 0x63
 80271b2:	b0a2      	sub	sp, #136	; 0x88
 80271b4:	dd4a      	ble.n	802724c <MoblePBADVSendTransaction.isra.0+0xa8>
 80271b6:	2101      	movs	r1, #1
 80271b8:	b022      	add	sp, #136	; 0x88
 80271ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80271be:	f7ff bf9c 	b.w	80270fa <MoblePBADVCloseLink>
 80271c2:	89a5      	ldrh	r5, [r4, #12]
 80271c4:	3b01      	subs	r3, #1
 80271c6:	429e      	cmp	r6, r3
 80271c8:	fb06 7105 	mla	r1, r6, r5, r7
 80271cc:	d108      	bne.n	80271e0 <MoblePBADVSendTransaction.isra.0+0x3c>
 80271ce:	8a23      	ldrh	r3, [r4, #16]
 80271d0:	fbb3 f2f5 	udiv	r2, r3, r5
 80271d4:	fb05 3312 	mls	r3, r5, r2, r3
 80271d8:	b29b      	uxth	r3, r3
 80271da:	2b00      	cmp	r3, #0
 80271dc:	bf18      	it	ne
 80271de:	461d      	movne	r5, r3
 80271e0:	1dab      	adds	r3, r5, #6
 80271e2:	f88d 3008 	strb.w	r3, [sp, #8]
 80271e6:	69c3      	ldr	r3, [r0, #28]
 80271e8:	f8cd 300a 	str.w	r3, [sp, #10]
 80271ec:	462a      	mov	r2, r5
 80271ee:	7823      	ldrb	r3, [r4, #0]
 80271f0:	f88d 300e 	strb.w	r3, [sp, #14]
 80271f4:	f10d 000f 	add.w	r0, sp, #15
 80271f8:	f88d 8009 	strb.w	r8, [sp, #9]
 80271fc:	f001 fcb8 	bl	8028b70 <memcpy>
 8027200:	2301      	movs	r3, #1
 8027202:	2114      	movs	r1, #20
 8027204:	e9cd 3100 	strd	r3, r1, [sp]
 8027208:	1dea      	adds	r2, r5, #7
 802720a:	2300      	movs	r3, #0
 802720c:	b2d2      	uxtb	r2, r2
 802720e:	a902      	add	r1, sp, #8
 8027210:	4618      	mov	r0, r3
 8027212:	f7f3 fd35 	bl	801ac80 <BnrgmTransmitSend>
 8027216:	3601      	adds	r6, #1
 8027218:	7a23      	ldrb	r3, [r4, #8]
 802721a:	6860      	ldr	r0, [r4, #4]
 802721c:	429e      	cmp	r6, r3
 802721e:	dbd0      	blt.n	80271c2 <MoblePBADVSendTransaction.isra.0+0x1e>
 8027220:	f8d0 3158 	ldr.w	r3, [r0, #344]	; 0x158
 8027224:	490c      	ldr	r1, [pc, #48]	; (8027258 <MoblePBADVSendTransaction.isra.0+0xb4>)
 8027226:	3301      	adds	r3, #1
 8027228:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
 802722c:	4622      	mov	r2, r4
 802722e:	f500 70aa 	add.w	r0, r0, #340	; 0x154
 8027232:	f7f0 fc6f 	bl	8017b14 <MoblePalTimerCreate>
 8027236:	b930      	cbnz	r0, 8027246 <MoblePBADVSendTransaction.isra.0+0xa2>
 8027238:	6863      	ldr	r3, [r4, #4]
 802723a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 802723e:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
 8027242:	f7f0 fcd1 	bl	8017be8 <MoblePalTimerStartOnce>
 8027246:	b022      	add	sp, #136	; 0x88
 8027248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802724c:	2600      	movs	r6, #0
 802724e:	f104 0712 	add.w	r7, r4, #18
 8027252:	f04f 0829 	mov.w	r8, #41	; 0x29
 8027256:	e7df      	b.n	8027218 <MoblePBADVSendTransaction.isra.0+0x74>
 8027258:	0802725d 	.word	0x0802725d

0802725c <MoblePBADVOnRetransmit>:
 802725c:	b507      	push	{r0, r1, r2, lr}
 802725e:	9001      	str	r0, [sp, #4]
 8027260:	a801      	add	r0, sp, #4
 8027262:	f7f0 fd59 	bl	8017d18 <MoblePBADVEraseTimer>
 8027266:	4608      	mov	r0, r1
 8027268:	f7ff ff9c 	bl	80271a4 <MoblePBADVSendTransaction.isra.0>
 802726c:	b003      	add	sp, #12
 802726e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08027274 <MoblePBADVFireProvisionStateMach>:
 8027274:	b530      	push	{r4, r5, lr}
 8027276:	f890 5020 	ldrb.w	r5, [r0, #32]
 802727a:	b0a7      	sub	sp, #156	; 0x9c
 802727c:	4604      	mov	r4, r0
 802727e:	4628      	mov	r0, r5
 8027280:	f7f9 f844 	bl	802030c <MobleProvision_GetNextOperation>
 8027284:	b118      	cbz	r0, 802728e <MoblePBADVFireProvisionStateMach+0x1a>
 8027286:	2802      	cmp	r0, #2
 8027288:	d019      	beq.n	80272be <MoblePBADVFireProvisionStateMach+0x4a>
 802728a:	b027      	add	sp, #156	; 0x9c
 802728c:	bd30      	pop	{r4, r5, pc}
 802728e:	4628      	mov	r0, r5
 8027290:	f7f9 f84f 	bl	8020332 <MobleProvision_IsCompleted>
 8027294:	2800      	cmp	r0, #0
 8027296:	d0f8      	beq.n	802728a <MoblePBADVFireProvisionStateMach+0x16>
 8027298:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 802729c:	9003      	str	r0, [sp, #12]
 802729e:	491f      	ldr	r1, [pc, #124]	; (802731c <MoblePBADVFireProvisionStateMach+0xa8>)
 80272a0:	f7f0 fd3a 	bl	8017d18 <MoblePBADVEraseTimer>
 80272a4:	9803      	ldr	r0, [sp, #12]
 80272a6:	4622      	mov	r2, r4
 80272a8:	f7f0 fc34 	bl	8017b14 <MoblePalTimerCreate>
 80272ac:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
 80272b0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80272b4:	b027      	add	sp, #156	; 0x9c
 80272b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80272ba:	f7f0 bc95 	b.w	8017be8 <MoblePalTimerStartOnce>
 80272be:	ab05      	add	r3, sp, #20
 80272c0:	2280      	movs	r2, #128	; 0x80
 80272c2:	a906      	add	r1, sp, #24
 80272c4:	4628      	mov	r0, r5
 80272c6:	f7f9 f826 	bl	8020316 <MobleProvision_GetOutputMessage>
 80272ca:	b118      	cbz	r0, 80272d4 <MoblePBADVFireProvisionStateMach+0x60>
 80272cc:	2101      	movs	r1, #1
 80272ce:	4620      	mov	r0, r4
 80272d0:	f7ff ff13 	bl	80270fa <MoblePBADVCloseLink>
 80272d4:	2501      	movs	r5, #1
 80272d6:	69a2      	ldr	r2, [r4, #24]
 80272d8:	9905      	ldr	r1, [sp, #20]
 80272da:	9500      	str	r5, [sp, #0]
 80272dc:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
 80272e0:	a806      	add	r0, sp, #24
 80272e2:	f7f7 fc05 	bl	801eaf0 <MobleSARSplit>
 80272e6:	b118      	cbz	r0, 80272f0 <MoblePBADVFireProvisionStateMach+0x7c>
 80272e8:	4629      	mov	r1, r5
 80272ea:	4620      	mov	r0, r4
 80272ec:	f7ff ff05 	bl	80270fa <MoblePBADVCloseLink>
 80272f0:	2300      	movs	r3, #0
 80272f2:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 80272f6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80272fa:	f8c4 40bc 	str.w	r4, [r4, #188]	; 0xbc
 80272fe:	f7ff ff51 	bl	80271a4 <MoblePBADVSendTransaction.isra.0>
 8027302:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8027306:	f7f0 fc73 	bl	8017bf0 <MoblePBADVRaiseTransTimeoutTimer>
 802730a:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 802730e:	f7f0 fd03 	bl	8017d18 <MoblePBADVEraseTimer>
 8027312:	4620      	mov	r0, r4
 8027314:	f7f0 fc7e 	bl	8017c14 <MoblePBADVRaiseLinkIdleTimer>
 8027318:	e7b7      	b.n	802728a <MoblePBADVFireProvisionStateMach+0x16>
 802731a:	bf00      	nop
 802731c:	08027191 	.word	0x08027191

08027320 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0>:
 8027320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027324:	4eb1      	ldr	r6, [pc, #708]	; (80275ec <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2cc>)
 8027326:	b0bc      	sub	sp, #240	; 0xf0
 8027328:	4604      	mov	r4, r0
 802732a:	460f      	mov	r7, r1
 802732c:	4690      	mov	r8, r2
 802732e:	f7e0 fda5 	bl	8007e7c <HAL_GetTick>
 8027332:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	; 0xa0c
 8027336:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
 802733a:	1ac0      	subs	r0, r0, r3
 802733c:	4bac      	ldr	r3, [pc, #688]	; (80275f0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2d0>)
 802733e:	4298      	cmp	r0, r3
 8027340:	f200 8301 	bhi.w	8027946 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x626>
 8027344:	2c09      	cmp	r4, #9
 8027346:	d901      	bls.n	802734c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2c>
 8027348:	2402      	movs	r4, #2
 802734a:	e058      	b.n	80273fe <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xde>
 802734c:	f7e0 fd96 	bl	8007e7c <HAL_GetTick>
 8027350:	f8c5 01a4 	str.w	r0, [r5, #420]	; 0x1a4
 8027354:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	; 0xa0c
 8027358:	f895 9044 	ldrb.w	r9, [r5, #68]	; 0x44
 802735c:	f1b9 0f07 	cmp.w	r9, #7
 8027360:	f200 82eb 	bhi.w	802793a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x61a>
 8027364:	e8df f019 	tbh	[pc, r9, lsl #1]
 8027368:	003d0008 	.word	0x003d0008
 802736c:	02e90146 	.word	0x02e90146
 8027370:	020601b6 	.word	0x020601b6
 8027374:	02ed02ed 	.word	0x02ed02ed
 8027378:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
 802737c:	4304      	orrs	r4, r0
 802737e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8027382:	f040 82de 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 8027386:	f1b8 0f01 	cmp.w	r8, #1
 802738a:	f040 82da 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 802738e:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 8027392:	681a      	ldr	r2, [r3, #0]
 8027394:	7812      	ldrb	r2, [r2, #0]
 8027396:	2a01      	cmp	r2, #1
 8027398:	f000 82d3 	beq.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 802739c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80273a0:	b10b      	cbz	r3, 80273a6 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x86>
 80273a2:	7838      	ldrb	r0, [r7, #0]
 80273a4:	4798      	blx	r3
 80273a6:	7839      	ldrb	r1, [r7, #0]
 80273a8:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	; 0x6f0
 80273ac:	f7ff fe69 	bl	8027082 <BnrgmHealthModelAttentionTimerSet>
 80273b0:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	; 0xa0c
 80273b4:	783a      	ldrb	r2, [r7, #0]
 80273b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80273ba:	f8d3 2046 	ldr.w	r2, [r3, #70]	; 0x46
 80273be:	f8c3 2052 	str.w	r2, [r3, #82]	; 0x52
 80273c2:	f8d3 204a 	ldr.w	r2, [r3, #74]	; 0x4a
 80273c6:	f8c3 2056 	str.w	r2, [r3, #86]	; 0x56
 80273ca:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80273ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80273d2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80273d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80273da:	4620      	mov	r0, r4
 80273dc:	b03c      	add	sp, #240	; 0xf0
 80273de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80273e2:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80273e6:	2b00      	cmp	r3, #0
 80273e8:	f040 809e 	bne.w	8027528 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x208>
 80273ec:	2c02      	cmp	r4, #2
 80273ee:	f040 82a8 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 80273f2:	f1b8 0f05 	cmp.w	r8, #5
 80273f6:	f040 82a4 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 80273fa:	783b      	ldrb	r3, [r7, #0]
 80273fc:	b113      	cbz	r3, 8027404 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xe4>
 80273fe:	f885 41a8 	strb.w	r4, [r5, #424]	; 0x1a8
 8027402:	e7ea      	b.n	80273da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8027404:	787b      	ldrb	r3, [r7, #1]
 8027406:	2b01      	cmp	r3, #1
 8027408:	d805      	bhi.n	8027416 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 802740a:	f8d6 86f0 	ldr.w	r8, [r6, #1776]	; 0x6f0
 802740e:	f898 21fe 	ldrb.w	r2, [r8, #510]	; 0x1fe
 8027412:	429a      	cmp	r2, r3
 8027414:	d203      	bcs.n	802741e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xfe>
 8027416:	2302      	movs	r3, #2
 8027418:	f885 31a8 	strb.w	r3, [r5, #424]	; 0x1a8
 802741c:	e7dd      	b.n	80273da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 802741e:	78b9      	ldrb	r1, [r7, #2]
 8027420:	2903      	cmp	r1, #3
 8027422:	d8ec      	bhi.n	80273fe <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xde>
 8027424:	2901      	cmp	r1, #1
 8027426:	78fa      	ldrb	r2, [r7, #3]
 8027428:	d815      	bhi.n	8027456 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x136>
 802742a:	2a00      	cmp	r2, #0
 802742c:	d1f3      	bne.n	8027416 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 802742e:	793a      	ldrb	r2, [r7, #4]
 8027430:	2a00      	cmp	r2, #0
 8027432:	d1f0      	bne.n	8027416 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8027434:	f888 31fa 	strb.w	r3, [r8, #506]	; 0x1fa
 8027438:	78bb      	ldrb	r3, [r7, #2]
 802743a:	f888 31fb 	strb.w	r3, [r8, #507]	; 0x1fb
 802743e:	78fa      	ldrb	r2, [r7, #3]
 8027440:	f888 21fc 	strb.w	r2, [r8, #508]	; 0x1fc
 8027444:	7939      	ldrb	r1, [r7, #4]
 8027446:	f888 11fd 	strb.w	r1, [r8, #509]	; 0x1fd
 802744a:	2b03      	cmp	r3, #3
 802744c:	d82b      	bhi.n	80274a6 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x186>
 802744e:	e8df f003 	tbb	[pc, r3]
 8027452:	1359      	.short	0x1359
 8027454:	4c19      	.short	0x4c19
 8027456:	2902      	cmp	r1, #2
 8027458:	d107      	bne.n	802746a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x14a>
 802745a:	2a04      	cmp	r2, #4
 802745c:	f63f af74 	bhi.w	8027348 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x28>
 8027460:	793a      	ldrb	r2, [r7, #4]
 8027462:	3a01      	subs	r2, #1
 8027464:	2a07      	cmp	r2, #7
 8027466:	d9e5      	bls.n	8027434 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x114>
 8027468:	e76e      	b.n	8027348 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x28>
 802746a:	2a03      	cmp	r2, #3
 802746c:	d8d3      	bhi.n	8027416 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 802746e:	793a      	ldrb	r2, [r7, #4]
 8027470:	3a01      	subs	r2, #1
 8027472:	2a07      	cmp	r2, #7
 8027474:	d9de      	bls.n	8027434 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x114>
 8027476:	e7ce      	b.n	8027416 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8027478:	f898 31ff 	ldrb.w	r3, [r8, #511]	; 0x1ff
 802747c:	f013 0f01 	tst.w	r3, #1
 8027480:	d111      	bne.n	80274a6 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x186>
 8027482:	e7c8      	b.n	8027416 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8027484:	2a04      	cmp	r2, #4
 8027486:	d904      	bls.n	8027492 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x172>
 8027488:	2202      	movs	r2, #2
 802748a:	f885 21a8 	strb.w	r2, [r5, #424]	; 0x1a8
 802748e:	461c      	mov	r4, r3
 8027490:	e7a3      	b.n	80273da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8027492:	f898 0206 	ldrb.w	r0, [r8, #518]	; 0x206
 8027496:	4288      	cmp	r0, r1
 8027498:	d3f6      	bcc.n	8027488 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x168>
 802749a:	f8b8 1202 	ldrh.w	r1, [r8, #514]	; 0x202
 802749e:	fa41 f202 	asr.w	r2, r1, r2
 80274a2:	07d1      	lsls	r1, r2, #31
 80274a4:	d5f0      	bpl.n	8027488 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x168>
 80274a6:	2205      	movs	r2, #5
 80274a8:	4639      	mov	r1, r7
 80274aa:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 80274ae:	f001 fb6d 	bl	8028b8c <memmove>
 80274b2:	f898 31fa 	ldrb.w	r3, [r8, #506]	; 0x1fa
 80274b6:	bb53      	cbnz	r3, 802750e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x1ee>
 80274b8:	461d      	mov	r5, r3
 80274ba:	f8d6 7a0c 	ldr.w	r7, [r6, #2572]	; 0xa0c
 80274be:	f7f0 fdc7 	bl	8018050 <MoblePalBluetoothRandom>
 80274c2:	442f      	add	r7, r5
 80274c4:	3501      	adds	r5, #1
 80274c6:	2d20      	cmp	r5, #32
 80274c8:	f887 0142 	strb.w	r0, [r7, #322]	; 0x142
 80274cc:	d1f5      	bne.n	80274ba <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x19a>
 80274ce:	f8d6 0a0c 	ldr.w	r0, [r6, #2572]	; 0xa0c
 80274d2:	2120      	movs	r1, #32
 80274d4:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 80274d8:	f7f2 fc02 	bl	8019ce0 <MoblePalCryptoInitEcc>
 80274dc:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	; 0xa0c
 80274e0:	b1e8      	cbz	r0, 802751e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x1fe>
 80274e2:	2202      	movs	r2, #2
 80274e4:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 80274e8:	e777      	b.n	80273da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 80274ea:	2a03      	cmp	r2, #3
 80274ec:	d893      	bhi.n	8027416 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 80274ee:	f898 3207 	ldrb.w	r3, [r8, #519]	; 0x207
 80274f2:	428b      	cmp	r3, r1
 80274f4:	d38f      	bcc.n	8027416 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 80274f6:	f8b8 3204 	ldrh.w	r3, [r8, #516]	; 0x204
 80274fa:	fa43 f202 	asr.w	r2, r3, r2
 80274fe:	f012 0f01 	tst.w	r2, #1
 8027502:	e7bd      	b.n	8027480 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x160>
 8027504:	f898 3200 	ldrb.w	r3, [r8, #512]	; 0x200
 8027508:	2b00      	cmp	r3, #0
 802750a:	d1cc      	bne.n	80274a6 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x186>
 802750c:	e783      	b.n	8027416 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 802750e:	2220      	movs	r2, #32
 8027510:	f508 7112 	add.w	r1, r8, #584	; 0x248
 8027514:	f505 70a1 	add.w	r0, r5, #322	; 0x142
 8027518:	f001 fb38 	bl	8028b8c <memmove>
 802751c:	e7d7      	b.n	80274ce <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x1ae>
 802751e:	2201      	movs	r2, #1
 8027520:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
 8027524:	2400      	movs	r4, #0
 8027526:	e758      	b.n	80273da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8027528:	2b01      	cmp	r3, #1
 802752a:	f040 820a 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 802752e:	2c03      	cmp	r4, #3
 8027530:	f040 8207 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 8027534:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
 8027538:	f040 8203 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 802753c:	f8d6 16f0 	ldr.w	r1, [r6, #1776]	; 0x6f0
 8027540:	f891 31fa 	ldrb.w	r3, [r1, #506]	; 0x1fa
 8027544:	b32b      	cbz	r3, 8027592 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x272>
 8027546:	4642      	mov	r2, r8
 8027548:	f501 7102 	add.w	r1, r1, #520	; 0x208
 802754c:	f505 70b1 	add.w	r0, r5, #354	; 0x162
 8027550:	f001 fb1c 	bl	8028b8c <memmove>
 8027554:	2240      	movs	r2, #64	; 0x40
 8027556:	f8d6 0a0c 	ldr.w	r0, [r6, #2572]	; 0xa0c
 802755a:	4639      	mov	r1, r7
 802755c:	f001 fb16 	bl	8028b8c <memmove>
 8027560:	f8d6 4a0c 	ldr.w	r4, [r6, #2572]	; 0xa0c
 8027564:	aa2c      	add	r2, sp, #176	; 0xb0
 8027566:	f504 73b1 	add.w	r3, r4, #354	; 0x162
 802756a:	f504 7ed1 	add.w	lr, r4, #418	; 0x1a2
 802756e:	4615      	mov	r5, r2
 8027570:	6818      	ldr	r0, [r3, #0]
 8027572:	6859      	ldr	r1, [r3, #4]
 8027574:	4694      	mov	ip, r2
 8027576:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 802757a:	3308      	adds	r3, #8
 802757c:	4573      	cmp	r3, lr
 802757e:	4662      	mov	r2, ip
 8027580:	d1f6      	bne.n	8027570 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x250>
 8027582:	4620      	mov	r0, r4
 8027584:	f7f2 fbc0 	bl	8019d08 <MoblePalCryptoGetEccGenSecret>
 8027588:	6420      	str	r0, [r4, #64]	; 0x40
 802758a:	b9d0      	cbnz	r0, 80275c2 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2a2>
 802758c:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	; 0xa0c
 8027590:	e005      	b.n	802759e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x27e>
 8027592:	a81c      	add	r0, sp, #112	; 0x70
 8027594:	f7f1 fcb0 	bl	8018ef8 <MoblePalCryptoGetEccPublicKey.part.0>
 8027598:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	; 0xa0c
 802759c:	b118      	cbz	r0, 80275a6 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x286>
 802759e:	2402      	movs	r4, #2
 80275a0:	f883 41a8 	strb.w	r4, [r3, #424]	; 0x1a8
 80275a4:	e719      	b.n	80273da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 80275a6:	aa1c      	add	r2, sp, #112	; 0x70
 80275a8:	f503 73b1 	add.w	r3, r3, #354	; 0x162
 80275ac:	ad2c      	add	r5, sp, #176	; 0xb0
 80275ae:	4614      	mov	r4, r2
 80275b0:	cc03      	ldmia	r4!, {r0, r1}
 80275b2:	42ac      	cmp	r4, r5
 80275b4:	6018      	str	r0, [r3, #0]
 80275b6:	6059      	str	r1, [r3, #4]
 80275b8:	4622      	mov	r2, r4
 80275ba:	f103 0308 	add.w	r3, r3, #8
 80275be:	d1f6      	bne.n	80275ae <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x28e>
 80275c0:	e7c8      	b.n	8027554 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x234>
 80275c2:	f8d6 4a0c 	ldr.w	r4, [r6, #2572]	; 0xa0c
 80275c6:	2240      	movs	r2, #64	; 0x40
 80275c8:	f104 0062 	add.w	r0, r4, #98	; 0x62
 80275cc:	4639      	mov	r1, r7
 80275ce:	f001 fadd 	bl	8028b8c <memmove>
 80275d2:	f104 03a2 	add.w	r3, r4, #162	; 0xa2
 80275d6:	ac3c      	add	r4, sp, #240	; 0xf0
 80275d8:	462a      	mov	r2, r5
 80275da:	ca03      	ldmia	r2!, {r0, r1}
 80275dc:	42a2      	cmp	r2, r4
 80275de:	6018      	str	r0, [r3, #0]
 80275e0:	6059      	str	r1, [r3, #4]
 80275e2:	4615      	mov	r5, r2
 80275e4:	f103 0308 	add.w	r3, r3, #8
 80275e8:	d1f6      	bne.n	80275d8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2b8>
 80275ea:	e79b      	b.n	8027524 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x204>
 80275ec:	20002508 	.word	0x20002508
 80275f0:	0001d4c0 	.word	0x0001d4c0
 80275f4:	f895 a045 	ldrb.w	sl, [r5, #69]	; 0x45
 80275f8:	f1ba 0f00 	cmp.w	sl, #0
 80275fc:	f040 81a1 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 8027600:	2c05      	cmp	r4, #5
 8027602:	f040 819e 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 8027606:	f1b8 0f10 	cmp.w	r8, #16
 802760a:	f040 819a 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 802760e:	4628      	mov	r0, r5
 8027610:	f7f2 fb7a 	bl	8019d08 <MoblePalCryptoGetEccGenSecret>
 8027614:	6428      	str	r0, [r5, #64]	; 0x40
 8027616:	b930      	cbnz	r0, 8027626 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x306>
 8027618:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	; 0xa0c
 802761c:	2202      	movs	r2, #2
 802761e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8027622:	464c      	mov	r4, r9
 8027624:	e6d9      	b.n	80273da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8027626:	f8d6 4a0c 	ldr.w	r4, [r6, #2572]	; 0xa0c
 802762a:	4642      	mov	r2, r8
 802762c:	4639      	mov	r1, r7
 802762e:	f504 7089 	add.w	r0, r4, #274	; 0x112
 8027632:	f001 faab 	bl	8028b8c <memmove>
 8027636:	f104 03e2 	add.w	r3, r4, #226	; 0xe2
 802763a:	2291      	movs	r2, #145	; 0x91
 802763c:	f104 0151 	add.w	r1, r4, #81	; 0x51
 8027640:	a818      	add	r0, sp, #96	; 0x60
 8027642:	e9cd aa18 	strd	sl, sl, [sp, #96]	; 0x60
 8027646:	e9cd aa1a 	strd	sl, sl, [sp, #104]	; 0x68
 802764a:	f7f0 ffdb 	bl	8018604 <BAES_CmacCompute>
 802764e:	2304      	movs	r3, #4
 8027650:	f8d6 0a0c 	ldr.w	r0, [r6, #2572]	; 0xa0c
 8027654:	9302      	str	r3, [sp, #8]
 8027656:	4bbd      	ldr	r3, [pc, #756]	; (802794c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x62c>)
 8027658:	e9cd 8300 	strd	r8, r3, [sp]
 802765c:	2220      	movs	r2, #32
 802765e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8027660:	f100 03e2 	add.w	r3, r0, #226	; 0xe2
 8027664:	30f2      	adds	r0, #242	; 0xf2
 8027666:	f7f1 f89b 	bl	80187a0 <MoblePalCryptoK1.part.0>
 802766a:	2800      	cmp	r0, #0
 802766c:	d1d4      	bne.n	8027618 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2f8>
 802766e:	4604      	mov	r4, r0
 8027670:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	; 0xa0c
 8027674:	f7f0 fcec 	bl	8018050 <MoblePalBluetoothRandom>
 8027678:	4425      	add	r5, r4
 802767a:	3401      	adds	r4, #1
 802767c:	2c10      	cmp	r4, #16
 802767e:	f885 0122 	strb.w	r0, [r5, #290]	; 0x122
 8027682:	d1f5      	bne.n	8027670 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x350>
 8027684:	ac1c      	add	r4, sp, #112	; 0x70
 8027686:	2300      	movs	r3, #0
 8027688:	4620      	mov	r0, r4
 802768a:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 802768e:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
 8027692:	f7f7 fcef 	bl	801f074 <MobleProvisionGenerateAuthValue>
 8027696:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	; 0xa0c
 802769a:	ae2c      	add	r6, sp, #176	; 0xb0
 802769c:	f505 7391 	add.w	r3, r5, #290	; 0x122
 80276a0:	f505 7799 	add.w	r7, r5, #306	; 0x132
 80276a4:	6818      	ldr	r0, [r3, #0]
 80276a6:	6859      	ldr	r1, [r3, #4]
 80276a8:	4632      	mov	r2, r6
 80276aa:	c203      	stmia	r2!, {r0, r1}
 80276ac:	3308      	adds	r3, #8
 80276ae:	42bb      	cmp	r3, r7
 80276b0:	4616      	mov	r6, r2
 80276b2:	d1f7      	bne.n	80276a4 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x384>
 80276b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80276b8:	ae30      	add	r6, sp, #192	; 0xc0
 80276ba:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80276be:	f505 7381 	add.w	r3, r5, #258	; 0x102
 80276c2:	2220      	movs	r2, #32
 80276c4:	a92c      	add	r1, sp, #176	; 0xb0
 80276c6:	f105 00f2 	add.w	r0, r5, #242	; 0xf2
 80276ca:	f7f0 ff9b 	bl	8018604 <BAES_CmacCompute>
 80276ce:	f04f 0900 	mov.w	r9, #0
 80276d2:	e7a6      	b.n	8027622 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x302>
 80276d4:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 80276d8:	f1b9 0f00 	cmp.w	r9, #0
 80276dc:	f040 8131 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 80276e0:	2c06      	cmp	r4, #6
 80276e2:	f040 812e 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 80276e6:	f1b8 0f10 	cmp.w	r8, #16
 80276ea:	f040 812a 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 80276ee:	4639      	mov	r1, r7
 80276f0:	4642      	mov	r2, r8
 80276f2:	f505 7099 	add.w	r0, r5, #306	; 0x132
 80276f6:	ac1c      	add	r4, sp, #112	; 0x70
 80276f8:	f001 fa48 	bl	8028b8c <memmove>
 80276fc:	4620      	mov	r0, r4
 80276fe:	e9cd 9918 	strd	r9, r9, [sp, #96]	; 0x60
 8027702:	e9cd 991a 	strd	r9, r9, [sp, #104]	; 0x68
 8027706:	e9cd 991c 	strd	r9, r9, [sp, #112]	; 0x70
 802770a:	e9cd 991e 	strd	r9, r9, [sp, #120]	; 0x78
 802770e:	f7f7 fcb1 	bl	801f074 <MobleProvisionGenerateAuthValue>
 8027712:	f8d6 7a0c 	ldr.w	r7, [r6, #2572]	; 0xa0c
 8027716:	ad2c      	add	r5, sp, #176	; 0xb0
 8027718:	f507 7399 	add.w	r3, r7, #306	; 0x132
 802771c:	f507 7ca1 	add.w	ip, r7, #322	; 0x142
 8027720:	6818      	ldr	r0, [r3, #0]
 8027722:	6859      	ldr	r1, [r3, #4]
 8027724:	462a      	mov	r2, r5
 8027726:	c203      	stmia	r2!, {r0, r1}
 8027728:	3308      	adds	r3, #8
 802772a:	4563      	cmp	r3, ip
 802772c:	4615      	mov	r5, r2
 802772e:	d1f7      	bne.n	8027720 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x400>
 8027730:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8027734:	ad30      	add	r5, sp, #192	; 0xc0
 8027736:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 802773a:	ab18      	add	r3, sp, #96	; 0x60
 802773c:	2220      	movs	r2, #32
 802773e:	a92c      	add	r1, sp, #176	; 0xb0
 8027740:	f107 00f2 	add.w	r0, r7, #242	; 0xf2
 8027744:	f7f0 ff5e 	bl	8018604 <BAES_CmacCompute>
 8027748:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	; 0xa0c
 802774c:	ab18      	add	r3, sp, #96	; 0x60
 802774e:	f501 7289 	add.w	r2, r1, #274	; 0x112
 8027752:	f501 7091 	add.w	r0, r1, #290	; 0x122
 8027756:	f812 5b01 	ldrb.w	r5, [r2], #1
 802775a:	f813 4b01 	ldrb.w	r4, [r3], #1
 802775e:	42a5      	cmp	r5, r4
 8027760:	d005      	beq.n	802776e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x44e>
 8027762:	2304      	movs	r3, #4
 8027764:	f881 31a8 	strb.w	r3, [r1, #424]	; 0x1a8
 8027768:	f04f 0902 	mov.w	r9, #2
 802776c:	e759      	b.n	8027622 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x302>
 802776e:	4282      	cmp	r2, r0
 8027770:	d1f1      	bne.n	8027756 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x436>
 8027772:	e756      	b.n	8027622 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x302>
 8027774:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8027778:	2b00      	cmp	r3, #0
 802777a:	f040 80e2 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 802777e:	2c07      	cmp	r4, #7
 8027780:	f040 80df 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 8027784:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
 8027788:	f040 80db 	bne.w	8027942 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 802778c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8027790:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8027794:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8027798:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 802779c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 80277a0:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 80277a4:	ac2c      	add	r4, sp, #176	; 0xb0
 80277a6:	f105 03e2 	add.w	r3, r5, #226	; 0xe2
 80277aa:	f105 0cf2 	add.w	ip, r5, #242	; 0xf2
 80277ae:	6818      	ldr	r0, [r3, #0]
 80277b0:	6859      	ldr	r1, [r3, #4]
 80277b2:	4622      	mov	r2, r4
 80277b4:	c203      	stmia	r2!, {r0, r1}
 80277b6:	3308      	adds	r3, #8
 80277b8:	4563      	cmp	r3, ip
 80277ba:	4614      	mov	r4, r2
 80277bc:	d1f7      	bne.n	80277ae <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x48e>
 80277be:	f505 7399 	add.w	r3, r5, #306	; 0x132
 80277c2:	ac30      	add	r4, sp, #192	; 0xc0
 80277c4:	f505 7ea1 	add.w	lr, r5, #322	; 0x142
 80277c8:	469c      	mov	ip, r3
 80277ca:	6818      	ldr	r0, [r3, #0]
 80277cc:	6859      	ldr	r1, [r3, #4]
 80277ce:	4622      	mov	r2, r4
 80277d0:	c203      	stmia	r2!, {r0, r1}
 80277d2:	3308      	adds	r3, #8
 80277d4:	4573      	cmp	r3, lr
 80277d6:	4614      	mov	r4, r2
 80277d8:	d1f7      	bne.n	80277ca <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x4aa>
 80277da:	f505 7591 	add.w	r5, r5, #290	; 0x122
 80277de:	aa34      	add	r2, sp, #208	; 0xd0
 80277e0:	6828      	ldr	r0, [r5, #0]
 80277e2:	6869      	ldr	r1, [r5, #4]
 80277e4:	4613      	mov	r3, r2
 80277e6:	c303      	stmia	r3!, {r0, r1}
 80277e8:	3508      	adds	r5, #8
 80277ea:	4565      	cmp	r5, ip
 80277ec:	461a      	mov	r2, r3
 80277ee:	d1f7      	bne.n	80277e0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x4c0>
 80277f0:	ab14      	add	r3, sp, #80	; 0x50
 80277f2:	2230      	movs	r2, #48	; 0x30
 80277f4:	a92c      	add	r1, sp, #176	; 0xb0
 80277f6:	a810      	add	r0, sp, #64	; 0x40
 80277f8:	f7f0 ff04 	bl	8018604 <BAES_CmacCompute>
 80277fc:	f04f 0804 	mov.w	r8, #4
 8027800:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	; 0xa0c
 8027804:	4b52      	ldr	r3, [pc, #328]	; (8027950 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x630>)
 8027806:	9301      	str	r3, [sp, #4]
 8027808:	2510      	movs	r5, #16
 802780a:	f8cd 8008 	str.w	r8, [sp, #8]
 802780e:	9500      	str	r5, [sp, #0]
 8027810:	2220      	movs	r2, #32
 8027812:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8027814:	ab14      	add	r3, sp, #80	; 0x50
 8027816:	eb0d 0002 	add.w	r0, sp, r2
 802781a:	f7f0 ffc1 	bl	80187a0 <MoblePalCryptoK1.part.0>
 802781e:	2800      	cmp	r0, #0
 8027820:	f47f aeb4 	bne.w	802758c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x26c>
 8027824:	4b4b      	ldr	r3, [pc, #300]	; (8027954 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x634>)
 8027826:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	; 0xa0c
 802782a:	f8cd 8008 	str.w	r8, [sp, #8]
 802782e:	e9cd 5300 	strd	r5, r3, [sp]
 8027832:	2220      	movs	r2, #32
 8027834:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8027836:	ab14      	add	r3, sp, #80	; 0x50
 8027838:	a80c      	add	r0, sp, #48	; 0x30
 802783a:	f7f0 ffb1 	bl	80187a0 <MoblePalCryptoK1.part.0>
 802783e:	4604      	mov	r4, r0
 8027840:	2800      	cmp	r0, #0
 8027842:	f47f aea3 	bne.w	802758c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x26c>
 8027846:	2319      	movs	r3, #25
 8027848:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802784c:	2308      	movs	r3, #8
 802784e:	3719      	adds	r7, #25
 8027850:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8027854:	9301      	str	r3, [sp, #4]
 8027856:	9700      	str	r7, [sp, #0]
 8027858:	230d      	movs	r3, #13
 802785a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 802785e:	a908      	add	r1, sp, #32
 8027860:	a81c      	add	r0, sp, #112	; 0x70
 8027862:	f7f2 f873 	bl	801994c <MoblePalCryptoAesCcmDecrypt>
 8027866:	2801      	cmp	r0, #1
 8027868:	d906      	bls.n	8027878 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x558>
 802786a:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	; 0xa0c
 802786e:	2206      	movs	r2, #6
 8027870:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8027874:	2402      	movs	r4, #2
 8027876:	e5b0      	b.n	80273da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8027878:	4b37      	ldr	r3, [pc, #220]	; (8027958 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x638>)
 802787a:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	; 0xa0c
 802787e:	f8cd 8008 	str.w	r8, [sp, #8]
 8027882:	e9cd 5300 	strd	r5, r3, [sp]
 8027886:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 802788a:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 802788e:	ab14      	add	r3, sp, #80	; 0x50
 8027890:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8027892:	2220      	movs	r2, #32
 8027894:	a818      	add	r0, sp, #96	; 0x60
 8027896:	f7f0 ff83 	bl	80187a0 <MoblePalCryptoK1.part.0>
 802789a:	2801      	cmp	r0, #1
 802789c:	f63f ae76 	bhi.w	802758c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x26c>
 80278a0:	f89d 5080 	ldrb.w	r5, [sp, #128]	; 0x80
 80278a4:	022d      	lsls	r5, r5, #8
 80278a6:	f405 6370 	and.w	r3, r5, #3840	; 0xf00
 80278aa:	f89d 5081 	ldrb.w	r5, [sp, #129]	; 0x81
 80278ae:	a818      	add	r0, sp, #96	; 0x60
 80278b0:	441d      	add	r5, r3
 80278b2:	f7f1 fcab 	bl	801920c <MoblePalCryptoSetDevKey>
 80278b6:	4629      	mov	r1, r5
 80278b8:	a81c      	add	r0, sp, #112	; 0x70
 80278ba:	f7f2 f937 	bl	8019b2c <MoblePalCryptoSetNetworkKey>
 80278be:	2801      	cmp	r0, #1
 80278c0:	4604      	mov	r4, r0
 80278c2:	f63f ad8a 	bhi.w	80273da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 80278c6:	2101      	movs	r1, #1
 80278c8:	4628      	mov	r0, r5
 80278ca:	f7f1 fbb1 	bl	8019030 <MoblePalCryptoSetNodeIdntyState>
 80278ce:	f89d 7082 	ldrb.w	r7, [sp, #130]	; 0x82
 80278d2:	07fa      	lsls	r2, r7, #31
 80278d4:	d50b      	bpl.n	80278ee <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x5ce>
 80278d6:	4628      	mov	r0, r5
 80278d8:	f7f2 feee 	bl	801a6b8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80278dc:	4629      	mov	r1, r5
 80278de:	4604      	mov	r4, r0
 80278e0:	a81c      	add	r0, sp, #112	; 0x70
 80278e2:	f7f2 f8b9 	bl	8019a58 <MoblePalCryptoSetNewNetworkKey>
 80278e6:	b2e1      	uxtb	r1, r4
 80278e8:	2002      	movs	r0, #2
 80278ea:	f7f9 fee9 	bl	80216c0 <ModelConfigUpdateKRState>
 80278ee:	07bb      	lsls	r3, r7, #30
 80278f0:	bf42      	ittt	mi
 80278f2:	4b1a      	ldrmi	r3, [pc, #104]	; (802795c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x63c>)
 80278f4:	2201      	movmi	r2, #1
 80278f6:	f883 265c 	strbmi.w	r2, [r3, #1628]	; 0x65c
 80278fa:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 80278fe:	681a      	ldr	r2, [r3, #0]
 8027900:	2104      	movs	r1, #4
 8027902:	3204      	adds	r2, #4
 8027904:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8027908:	f7f3 fc4a 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 802790c:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 8027910:	681b      	ldr	r3, [r3, #0]
 8027912:	6858      	ldr	r0, [r3, #4]
 8027914:	f7f6 ff18 	bl	801e748 <MobleStackForcedSetIvIndex>
 8027918:	2400      	movs	r4, #0
 802791a:	aa07      	add	r2, sp, #28
 802791c:	2102      	movs	r1, #2
 802791e:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8027922:	9407      	str	r4, [sp, #28]
 8027924:	f7f3 fc3c 	bl	801b1a0 <MobleInputStreamGetBigEndian>
 8027928:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 802792c:	9a07      	ldr	r2, [sp, #28]
 802792e:	681b      	ldr	r3, [r3, #0]
 8027930:	805a      	strh	r2, [r3, #2]
 8027932:	2205      	movs	r2, #5
 8027934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8027938:	e54f      	b.n	80273da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 802793a:	2301      	movs	r3, #1
 802793c:	f885 31a8 	strb.w	r3, [r5, #424]	; 0x1a8
 8027940:	e798      	b.n	8027874 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x554>
 8027942:	2303      	movs	r3, #3
 8027944:	e7fa      	b.n	802793c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x61c>
 8027946:	2403      	movs	r4, #3
 8027948:	e547      	b.n	80273da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 802794a:	bf00      	nop
 802794c:	08033b0b 	.word	0x08033b0b
 8027950:	08033b10 	.word	0x08033b10
 8027954:	08033b15 	.word	0x08033b15
 8027958:	08033b1a 	.word	0x08033b1a
 802795c:	20001410 	.word	0x20001410

08027960 <MobleProvision_UnprovisionedNode_SetInputMessage>:
 8027960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027962:	4b0d      	ldr	r3, [pc, #52]	; (8027998 <MobleProvision_UnprovisionedNode_SetInputMessage+0x38>)
 8027964:	4605      	mov	r5, r0
 8027966:	460c      	mov	r4, r1
 8027968:	b939      	cbnz	r1, 802797a <MobleProvision_UnprovisionedNode_SetInputMessage+0x1a>
 802796a:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	; 0xa0c
 802796e:	2202      	movs	r2, #2
 8027970:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8027974:	2003      	movs	r0, #3
 8027976:	b003      	add	sp, #12
 8027978:	bd30      	pop	{r4, r5, pc}
 802797a:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 802797e:	9201      	str	r2, [sp, #4]
 8027980:	f7f7 fad2 	bl	801ef28 <MobleProvisionGetRole>
 8027984:	2801      	cmp	r0, #1
 8027986:	d1f5      	bne.n	8027974 <MobleProvision_UnprovisionedNode_SetInputMessage+0x14>
 8027988:	9a01      	ldr	r2, [sp, #4]
 802798a:	4621      	mov	r1, r4
 802798c:	4628      	mov	r0, r5
 802798e:	b003      	add	sp, #12
 8027990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027994:	f7ff bcc4 	b.w	8027320 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0>
 8027998:	20002508 	.word	0x20002508

0802799c <MobleProvisionBearerGatt_FSM>:
 802799c:	b570      	push	{r4, r5, r6, lr}
 802799e:	4e26      	ldr	r6, [pc, #152]	; (8027a38 <MobleProvisionBearerGatt_FSM+0x9c>)
 80279a0:	461d      	mov	r5, r3
 80279a2:	4604      	mov	r4, r0
 80279a4:	2c03      	cmp	r4, #3
 80279a6:	d804      	bhi.n	80279b2 <MobleProvisionBearerGatt_FSM+0x16>
 80279a8:	e8df f004 	tbb	[pc, r4]
 80279ac:	11443302 	.word	0x11443302
 80279b0:	b109      	cbz	r1, 80279b6 <MobleProvisionBearerGatt_FSM+0x1a>
 80279b2:	2402      	movs	r4, #2
 80279b4:	e00b      	b.n	80279ce <MobleProvisionBearerGatt_FSM+0x32>
 80279b6:	f7f8 fa01 	bl	801fdbc <MobleProvision_UnprovisionedNode_IsCompleted>
 80279ba:	2801      	cmp	r0, #1
 80279bc:	d109      	bne.n	80279d2 <MobleProvisionBearerGatt_FSM+0x36>
 80279be:	4b1e      	ldr	r3, [pc, #120]	; (8027a38 <MobleProvisionBearerGatt_FSM+0x9c>)
 80279c0:	f8d3 0a44 	ldr.w	r0, [r3, #2628]	; 0xa44
 80279c4:	f7f0 f938 	bl	8017c38 <MoblePalTimerStop>
 80279c8:	f7f0 fba2 	bl	8018110 <MoblePalBluetoothPrvnCmpltReset>
 80279cc:	2403      	movs	r4, #3
 80279ce:	4620      	mov	r0, r4
 80279d0:	bd70      	pop	{r4, r5, r6, pc}
 80279d2:	f7f7 fc01 	bl	801f1d8 <MobleProvision_UnprovisionedNode_GetNextOperation>
 80279d6:	2801      	cmp	r0, #1
 80279d8:	4604      	mov	r4, r0
 80279da:	d0f8      	beq.n	80279ce <MobleProvisionBearerGatt_FSM+0x32>
 80279dc:	2802      	cmp	r0, #2
 80279de:	d1e8      	bne.n	80279b2 <MobleProvisionBearerGatt_FSM+0x16>
 80279e0:	f8d6 0a44 	ldr.w	r0, [r6, #2628]	; 0xa44
 80279e4:	f7f0 f928 	bl	8017c38 <MoblePalTimerStop>
 80279e8:	f241 3188 	movw	r1, #5000	; 0x1388
 80279ec:	f8d6 0a44 	ldr.w	r0, [r6, #2628]	; 0xa44
 80279f0:	f7f0 f8fa 	bl	8017be8 <MoblePalTimerStartOnce>
 80279f4:	2801      	cmp	r0, #1
 80279f6:	d8dc      	bhi.n	80279b2 <MobleProvisionBearerGatt_FSM+0x16>
 80279f8:	f7f8 f9ce 	bl	801fd98 <MobleProvisionBearerGatt_Transmit>
 80279fc:	f7f9 fd16 	bl	802142c <MobleProvision_UnprovisionedNode_CompleteOperation>
 8027a00:	f7f7 fc0a 	bl	801f218 <BnrgmProvision_UnprovisionedGetState>
 8027a04:	2807      	cmp	r0, #7
 8027a06:	bf18      	it	ne
 8027a08:	2400      	movne	r4, #0
 8027a0a:	2500      	movs	r5, #0
 8027a0c:	462a      	mov	r2, r5
 8027a0e:	4629      	mov	r1, r5
 8027a10:	e7c8      	b.n	80279a4 <MobleProvisionBearerGatt_FSM+0x8>
 8027a12:	2901      	cmp	r1, #1
 8027a14:	d1cd      	bne.n	80279b2 <MobleProvisionBearerGatt_FSM+0x16>
 8027a16:	4611      	mov	r1, r2
 8027a18:	f8d6 0a44 	ldr.w	r0, [r6, #2628]	; 0xa44
 8027a1c:	3d01      	subs	r5, #1
 8027a1e:	f7f0 f90b 	bl	8017c38 <MoblePalTimerStop>
 8027a22:	b2ea      	uxtb	r2, r5
 8027a24:	f811 0b01 	ldrb.w	r0, [r1], #1
 8027a28:	f7ff ff9a 	bl	8027960 <MobleProvision_UnprovisionedNode_SetInputMessage>
 8027a2c:	2400      	movs	r4, #0
 8027a2e:	f7f9 fcfd 	bl	802142c <MobleProvision_UnprovisionedNode_CompleteOperation>
 8027a32:	e7ea      	b.n	8027a0a <MobleProvisionBearerGatt_FSM+0x6e>
 8027a34:	2401      	movs	r4, #1
 8027a36:	e7ca      	b.n	80279ce <MobleProvisionBearerGatt_FSM+0x32>
 8027a38:	20002508 	.word	0x20002508

08027a3c <MobleProvisionBearerGatt_TimerCallback>:
 8027a3c:	b510      	push	{r4, lr}
 8027a3e:	460c      	mov	r4, r1
 8027a40:	2300      	movs	r3, #0
 8027a42:	7820      	ldrb	r0, [r4, #0]
 8027a44:	461a      	mov	r2, r3
 8027a46:	2102      	movs	r1, #2
 8027a48:	f7ff ffa8 	bl	802799c <MobleProvisionBearerGatt_FSM>
 8027a4c:	7020      	strb	r0, [r4, #0]
 8027a4e:	f7f9 faa7 	bl	8020fa0 <MobleStackConfigInvalidate>
 8027a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027a56:	f7f7 bd99 	b.w	801f58c <MoblePalBluetoothGracefulReset>
	...

08027a5c <MobleProvisionBearerGatt_Init>:
 8027a5c:	b538      	push	{r3, r4, r5, lr}
 8027a5e:	f7f7 fb5b 	bl	801f118 <MobleProvision_UnprovisionedNode_Init>
 8027a62:	2801      	cmp	r0, #1
 8027a64:	4604      	mov	r4, r0
 8027a66:	d81a      	bhi.n	8027a9e <MobleProvisionBearerGatt_Init+0x42>
 8027a68:	4d15      	ldr	r5, [pc, #84]	; (8027ac0 <MobleProvisionBearerGatt_Init+0x64>)
 8027a6a:	4916      	ldr	r1, [pc, #88]	; (8027ac4 <MobleProvisionBearerGatt_Init+0x68>)
 8027a6c:	2302      	movs	r3, #2
 8027a6e:	f605 223c 	addw	r2, r5, #2620	; 0xa3c
 8027a72:	f505 6024 	add.w	r0, r5, #2624	; 0xa40
 8027a76:	f885 3a3c 	strb.w	r3, [r5, #2620]	; 0xa3c
 8027a7a:	f7f0 f84b 	bl	8017b14 <MoblePalTimerCreate>
 8027a7e:	2801      	cmp	r0, #1
 8027a80:	4604      	mov	r4, r0
 8027a82:	d80c      	bhi.n	8027a9e <MobleProvisionBearerGatt_Init+0x42>
 8027a84:	4910      	ldr	r1, [pc, #64]	; (8027ac8 <MobleProvisionBearerGatt_Init+0x6c>)
 8027a86:	2200      	movs	r2, #0
 8027a88:	f605 2044 	addw	r0, r5, #2628	; 0xa44
 8027a8c:	f7f0 f842 	bl	8017b14 <MoblePalTimerCreate>
 8027a90:	2801      	cmp	r0, #1
 8027a92:	4604      	mov	r4, r0
 8027a94:	d905      	bls.n	8027aa2 <MobleProvisionBearerGatt_Init+0x46>
 8027a96:	f505 6024 	add.w	r0, r5, #2624	; 0xa40
 8027a9a:	f7f7 fb33 	bl	801f104 <MobleProvisionBearerGatt_DeleteTimer>
 8027a9e:	4620      	mov	r0, r4
 8027aa0:	bd38      	pop	{r3, r4, r5, pc}
 8027aa2:	2300      	movs	r3, #0
 8027aa4:	4619      	mov	r1, r3
 8027aa6:	461a      	mov	r2, r3
 8027aa8:	4618      	mov	r0, r3
 8027aaa:	f7ff ff77 	bl	802799c <MobleProvisionBearerGatt_FSM>
 8027aae:	f24c 3150 	movw	r1, #50000	; 0xc350
 8027ab2:	f885 0a3c 	strb.w	r0, [r5, #2620]	; 0xa3c
 8027ab6:	f8d5 0a40 	ldr.w	r0, [r5, #2624]	; 0xa40
 8027aba:	f7f0 f895 	bl	8017be8 <MoblePalTimerStartOnce>
 8027abe:	e7ee      	b.n	8027a9e <MobleProvisionBearerGatt_Init+0x42>
 8027ac0:	20002508 	.word	0x20002508
 8027ac4:	08027a3d 	.word	0x08027a3d
 8027ac8:	080178a5 	.word	0x080178a5

08027acc <MobleGattOnConnectDisconnect>:
 8027acc:	b508      	push	{r3, lr}
 8027ace:	b318      	cbz	r0, 8027b18 <MobleGattOnConnectDisconnect+0x4c>
 8027ad0:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
 8027ad4:	b313      	cbz	r3, 8027b1c <MobleGattOnConnectDisconnect+0x50>
 8027ad6:	4a12      	ldr	r2, [pc, #72]	; (8027b20 <MobleGattOnConnectDisconnect+0x54>)
 8027ad8:	2901      	cmp	r1, #1
 8027ada:	8992      	ldrh	r2, [r2, #12]
 8027adc:	d112      	bne.n	8027b04 <MobleGattOnConnectDisconnect+0x38>
 8027ade:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168
 8027ae2:	881b      	ldrh	r3, [r3, #0]
 8027ae4:	4293      	cmp	r3, r2
 8027ae6:	d008      	beq.n	8027afa <MobleGattOnConnectDisconnect+0x2e>
 8027ae8:	f7f5 fef2 	bl	801d8d0 <BnrgmProxyProtocol_Init>
 8027aec:	4b0d      	ldr	r3, [pc, #52]	; (8027b24 <MobleGattOnConnectDisconnect+0x58>)
 8027aee:	2000      	movs	r0, #0
 8027af0:	f883 06f4 	strb.w	r0, [r3, #1780]	; 0x6f4
 8027af4:	f8a3 06f6 	strh.w	r0, [r3, #1782]	; 0x6f6
 8027af8:	e003      	b.n	8027b02 <MobleGattOnConnectDisconnect+0x36>
 8027afa:	f7ff ffaf 	bl	8027a5c <MobleProvisionBearerGatt_Init>
 8027afe:	2801      	cmp	r0, #1
 8027b00:	d9f2      	bls.n	8027ae8 <MobleGattOnConnectDisconnect+0x1c>
 8027b02:	bd08      	pop	{r3, pc}
 8027b04:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
 8027b08:	881b      	ldrh	r3, [r3, #0]
 8027b0a:	4293      	cmp	r3, r2
 8027b0c:	d101      	bne.n	8027b12 <MobleGattOnConnectDisconnect+0x46>
 8027b0e:	f7ff fadf 	bl	80270d0 <MobleProvisionBearerGatt_DeInit>
 8027b12:	f7f5 fecf 	bl	801d8b4 <BnrgmProxyProtocol_DeInit>
 8027b16:	e7e9      	b.n	8027aec <MobleGattOnConnectDisconnect+0x20>
 8027b18:	2003      	movs	r0, #3
 8027b1a:	e7f2      	b.n	8027b02 <MobleGattOnConnectDisconnect+0x36>
 8027b1c:	2002      	movs	r0, #2
 8027b1e:	e7f0      	b.n	8027b02 <MobleGattOnConnectDisconnect+0x36>
 8027b20:	20000008 	.word	0x20000008
 8027b24:	20002508 	.word	0x20002508

08027b28 <MobleStackConnectionCallback>:
 8027b28:	b510      	push	{r4, lr}
 8027b2a:	f7f0 fa31 	bl	8017f90 <MoblePalBluetoothGetConnectionState>
 8027b2e:	2801      	cmp	r0, #1
 8027b30:	4604      	mov	r4, r0
 8027b32:	d01b      	beq.n	8027b6c <MobleStackConnectionCallback+0x44>
 8027b34:	2802      	cmp	r0, #2
 8027b36:	d01d      	beq.n	8027b74 <MobleStackConnectionCallback+0x4c>
 8027b38:	bb50      	cbnz	r0, 8027b90 <MobleStackConnectionCallback+0x68>
 8027b3a:	4c16      	ldr	r4, [pc, #88]	; (8027b94 <MobleStackConnectionCallback+0x6c>)
 8027b3c:	f7f5 ff1a 	bl	801d974 <BnrgmProxyConfig_ResetFilter>
 8027b40:	f7f7 fcc6 	bl	801f4d0 <MobleTransmitSuspendAll>
 8027b44:	f7f7 fcd4 	bl	801f4f0 <MobleTransmitResumeAll>
 8027b48:	2101      	movs	r1, #1
 8027b4a:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 8027b4e:	f7ff ffbd 	bl	8027acc <MobleGattOnConnectDisconnect>
 8027b52:	2101      	movs	r1, #1
 8027b54:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 8027b58:	f7f8 fcf0 	bl	802053c <MobleStackFSM>
 8027b5c:	f8d4 07f8 	ldr.w	r0, [r4, #2040]	; 0x7f8
 8027b60:	f504 61d0 	add.w	r1, r4, #1664	; 0x680
 8027b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027b68:	f7f3 b858 	b.w	801ac1c <MobleStackFastAdvTimeoutTimerCallback>
 8027b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027b70:	f7f7 bcbe 	b.w	801f4f0 <MobleTransmitResumeAll>
 8027b74:	f7f7 fcbc 	bl	801f4f0 <MobleTransmitResumeAll>
 8027b78:	2100      	movs	r1, #0
 8027b7a:	4807      	ldr	r0, [pc, #28]	; (8027b98 <MobleStackConnectionCallback+0x70>)
 8027b7c:	f7ff ffa6 	bl	8027acc <MobleGattOnConnectDisconnect>
 8027b80:	4621      	mov	r1, r4
 8027b82:	4805      	ldr	r0, [pc, #20]	; (8027b98 <MobleStackConnectionCallback+0x70>)
 8027b84:	f7f8 fcda 	bl	802053c <MobleStackFSM>
 8027b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027b8c:	f7f5 bb32 	b.w	801d1f4 <MobleStackCreateStartFastAdvTimer>
 8027b90:	bd10      	pop	{r4, pc}
 8027b92:	bf00      	nop
 8027b94:	20001410 	.word	0x20001410
 8027b98:	20001a90 	.word	0x20001a90

08027b9c <MobleProvisionBearerGatt_ProcessPacket>:
 8027b9c:	b510      	push	{r4, lr}
 8027b9e:	4602      	mov	r2, r0
 8027ba0:	4c07      	ldr	r4, [pc, #28]	; (8027bc0 <MobleProvisionBearerGatt_ProcessPacket+0x24>)
 8027ba2:	460b      	mov	r3, r1
 8027ba4:	b141      	cbz	r1, 8027bb8 <MobleProvisionBearerGatt_ProcessPacket+0x1c>
 8027ba6:	f894 0a3c 	ldrb.w	r0, [r4, #2620]	; 0xa3c
 8027baa:	2101      	movs	r1, #1
 8027bac:	f7ff fef6 	bl	802799c <MobleProvisionBearerGatt_FSM>
 8027bb0:	f884 0a3c 	strb.w	r0, [r4, #2620]	; 0xa3c
 8027bb4:	2000      	movs	r0, #0
 8027bb6:	bd10      	pop	{r4, pc}
 8027bb8:	2302      	movs	r3, #2
 8027bba:	f884 3a3c 	strb.w	r3, [r4, #2620]	; 0xa3c
 8027bbe:	e7f9      	b.n	8027bb4 <MobleProvisionBearerGatt_ProcessPacket+0x18>
 8027bc0:	20002508 	.word	0x20002508

08027bc4 <BnrgmProxyProtocol_ProcessPacket>:
 8027bc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8027bc8:	460e      	mov	r6, r1
 8027bca:	4611      	mov	r1, r2
 8027bcc:	2a00      	cmp	r2, #0
 8027bce:	f000 80a1 	beq.w	8027d14 <BnrgmProxyProtocol_ProcessPacket+0x150>
 8027bd2:	2e00      	cmp	r6, #0
 8027bd4:	f000 809e 	beq.w	8027d14 <BnrgmProxyProtocol_ProcessPacket+0x150>
 8027bd8:	7833      	ldrb	r3, [r6, #0]
 8027bda:	f003 083f 	and.w	r8, r3, #63	; 0x3f
 8027bde:	b920      	cbnz	r0, 8027bea <BnrgmProxyProtocol_ProcessPacket+0x26>
 8027be0:	f1b8 0f03 	cmp.w	r8, #3
 8027be4:	d106      	bne.n	8027bf4 <BnrgmProxyProtocol_ProcessPacket+0x30>
 8027be6:	2502      	movs	r5, #2
 8027be8:	e042      	b.n	8027c70 <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027bea:	2801      	cmp	r0, #1
 8027bec:	d102      	bne.n	8027bf4 <BnrgmProxyProtocol_ProcessPacket+0x30>
 8027bee:	f1b8 0f03 	cmp.w	r8, #3
 8027bf2:	d1f8      	bne.n	8027be6 <BnrgmProxyProtocol_ProcessPacket+0x22>
 8027bf4:	f003 05c0 	and.w	r5, r3, #192	; 0xc0
 8027bf8:	2d40      	cmp	r5, #64	; 0x40
 8027bfa:	d050      	beq.n	8027c9e <BnrgmProxyProtocol_ProcessPacket+0xda>
 8027bfc:	d802      	bhi.n	8027c04 <BnrgmProxyProtocol_ProcessPacket+0x40>
 8027bfe:	b30d      	cbz	r5, 8027c44 <BnrgmProxyProtocol_ProcessPacket+0x80>
 8027c00:	2500      	movs	r5, #0
 8027c02:	e035      	b.n	8027c70 <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027c04:	061b      	lsls	r3, r3, #24
 8027c06:	d5fb      	bpl.n	8027c00 <BnrgmProxyProtocol_ProcessPacket+0x3c>
 8027c08:	4f43      	ldr	r7, [pc, #268]	; (8027d18 <BnrgmProxyProtocol_ProcessPacket+0x154>)
 8027c0a:	7a3b      	ldrb	r3, [r7, #8]
 8027c0c:	2b00      	cmp	r3, #0
 8027c0e:	d0ea      	beq.n	8027be6 <BnrgmProxyProtocol_ProcessPacket+0x22>
 8027c10:	7a7b      	ldrb	r3, [r7, #9]
 8027c12:	4543      	cmp	r3, r8
 8027c14:	d1e7      	bne.n	8027be6 <BnrgmProxyProtocol_ProcessPacket+0x22>
 8027c16:	1e4c      	subs	r4, r1, #1
 8027c18:	b2e1      	uxtb	r1, r4
 8027c1a:	1c70      	adds	r0, r6, #1
 8027c1c:	f7f5 fe92 	bl	801d944 <BnrgmProxyProtocol_AddFragment>
 8027c20:	2800      	cmp	r0, #0
 8027c22:	d047      	beq.n	8027cb4 <BnrgmProxyProtocol_ProcessPacket+0xf0>
 8027c24:	7833      	ldrb	r3, [r6, #0]
 8027c26:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8027c2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8027c2e:	2b80      	cmp	r3, #128	; 0x80
 8027c30:	d14b      	bne.n	8027cca <BnrgmProxyProtocol_ProcessPacket+0x106>
 8027c32:	f7f0 f801 	bl	8017c38 <MoblePalTimerStop>
 8027c36:	f644 6120 	movw	r1, #20000	; 0x4e20
 8027c3a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8027c3e:	f7ef ffd3 	bl	8017be8 <MoblePalTimerStartOnce>
 8027c42:	e7dd      	b.n	8027c00 <BnrgmProxyProtocol_ProcessPacket+0x3c>
 8027c44:	4b34      	ldr	r3, [pc, #208]	; (8027d18 <BnrgmProxyProtocol_ProcessPacket+0x154>)
 8027c46:	7a1b      	ldrb	r3, [r3, #8]
 8027c48:	b10b      	cbz	r3, 8027c4e <BnrgmProxyProtocol_ProcessPacket+0x8a>
 8027c4a:	f7f5 fe6d 	bl	801d928 <BnrgmProxyProtocol_ResetSar>
 8027c4e:	f1b8 0f03 	cmp.w	r8, #3
 8027c52:	d8d5      	bhi.n	8027c00 <BnrgmProxyProtocol_ProcessPacket+0x3c>
 8027c54:	e8df f008 	tbb	[pc, r8]
 8027c58:	1d171002 	.word	0x1d171002
 8027c5c:	237f      	movs	r3, #127	; 0x7f
 8027c5e:	1e4a      	subs	r2, r1, #1
 8027c60:	9300      	str	r3, [sp, #0]
 8027c62:	2301      	movs	r3, #1
 8027c64:	b2d2      	uxtb	r2, r2
 8027c66:	18f1      	adds	r1, r6, r3
 8027c68:	2000      	movs	r0, #0
 8027c6a:	f7fa fb73 	bl	8022354 <MobleStackProcessData>
 8027c6e:	4645      	mov	r5, r8
 8027c70:	4628      	mov	r0, r5
 8027c72:	b002      	add	sp, #8
 8027c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027c78:	237f      	movs	r3, #127	; 0x7f
 8027c7a:	2200      	movs	r2, #0
 8027c7c:	3901      	subs	r1, #1
 8027c7e:	1c70      	adds	r0, r6, #1
 8027c80:	f7f9 fd6e 	bl	8021760 <MobleStackProcessBeacon>
 8027c84:	e7f4      	b.n	8027c70 <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027c86:	3901      	subs	r1, #1
 8027c88:	b2c9      	uxtb	r1, r1
 8027c8a:	1c70      	adds	r0, r6, #1
 8027c8c:	f7f5 ffce 	bl	801dc2c <BnrgmProxyConfig_ProcessData>
 8027c90:	e7ee      	b.n	8027c70 <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027c92:	3901      	subs	r1, #1
 8027c94:	b2c9      	uxtb	r1, r1
 8027c96:	1c70      	adds	r0, r6, #1
 8027c98:	f7ff ff80 	bl	8027b9c <MobleProvisionBearerGatt_ProcessPacket>
 8027c9c:	e7e8      	b.n	8027c70 <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027c9e:	4d1e      	ldr	r5, [pc, #120]	; (8027d18 <BnrgmProxyProtocol_ProcessPacket+0x154>)
 8027ca0:	7a2b      	ldrb	r3, [r5, #8]
 8027ca2:	b10b      	cbz	r3, 8027ca8 <BnrgmProxyProtocol_ProcessPacket+0xe4>
 8027ca4:	f7f5 fe40 	bl	801d928 <BnrgmProxyProtocol_ResetSar>
 8027ca8:	3901      	subs	r1, #1
 8027caa:	b2c9      	uxtb	r1, r1
 8027cac:	1c70      	adds	r0, r6, #1
 8027cae:	f7f5 fe49 	bl	801d944 <BnrgmProxyProtocol_AddFragment>
 8027cb2:	b908      	cbnz	r0, 8027cb8 <BnrgmProxyProtocol_ProcessPacket+0xf4>
 8027cb4:	2504      	movs	r5, #4
 8027cb6:	e7db      	b.n	8027c70 <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027cb8:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 8027cbc:	f644 6120 	movw	r1, #20000	; 0x4e20
 8027cc0:	f7ef ff92 	bl	8017be8 <MoblePalTimerStartOnce>
 8027cc4:	f885 8009 	strb.w	r8, [r5, #9]
 8027cc8:	e79a      	b.n	8027c00 <BnrgmProxyProtocol_ProcessPacket+0x3c>
 8027cca:	f7ef ffb5 	bl	8017c38 <MoblePalTimerStop>
 8027cce:	7a7b      	ldrb	r3, [r7, #9]
 8027cd0:	2b03      	cmp	r3, #3
 8027cd2:	d80b      	bhi.n	8027cec <BnrgmProxyProtocol_ProcessPacket+0x128>
 8027cd4:	e8df f003 	tbb	[pc, r3]
 8027cd8:	19140d02 	.word	0x19140d02
 8027cdc:	237f      	movs	r3, #127	; 0x7f
 8027cde:	9300      	str	r3, [sp, #0]
 8027ce0:	7a3a      	ldrb	r2, [r7, #8]
 8027ce2:	490e      	ldr	r1, [pc, #56]	; (8027d1c <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8027ce4:	2301      	movs	r3, #1
 8027ce6:	2000      	movs	r0, #0
 8027ce8:	f7fa fb34 	bl	8022354 <MobleStackProcessData>
 8027cec:	2500      	movs	r5, #0
 8027cee:	723d      	strb	r5, [r7, #8]
 8027cf0:	e7be      	b.n	8027c70 <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027cf2:	7a39      	ldrb	r1, [r7, #8]
 8027cf4:	4809      	ldr	r0, [pc, #36]	; (8027d1c <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8027cf6:	237f      	movs	r3, #127	; 0x7f
 8027cf8:	2200      	movs	r2, #0
 8027cfa:	f7f9 fd31 	bl	8021760 <MobleStackProcessBeacon>
 8027cfe:	e7f5      	b.n	8027cec <BnrgmProxyProtocol_ProcessPacket+0x128>
 8027d00:	7a39      	ldrb	r1, [r7, #8]
 8027d02:	4806      	ldr	r0, [pc, #24]	; (8027d1c <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8027d04:	f7f5 ff92 	bl	801dc2c <BnrgmProxyConfig_ProcessData>
 8027d08:	e7f0      	b.n	8027cec <BnrgmProxyProtocol_ProcessPacket+0x128>
 8027d0a:	7a39      	ldrb	r1, [r7, #8]
 8027d0c:	4803      	ldr	r0, [pc, #12]	; (8027d1c <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8027d0e:	f7ff ff45 	bl	8027b9c <MobleProvisionBearerGatt_ProcessPacket>
 8027d12:	e7eb      	b.n	8027cec <BnrgmProxyProtocol_ProcessPacket+0x128>
 8027d14:	2503      	movs	r5, #3
 8027d16:	e7ab      	b.n	8027c70 <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027d18:	20000318 	.word	0x20000318
 8027d1c:	20000322 	.word	0x20000322

08027d20 <MobleGattWriteCallback>:
 8027d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027d22:	460c      	mov	r4, r1
 8027d24:	4611      	mov	r1, r2
 8027d26:	461a      	mov	r2, r3
 8027d28:	2800      	cmp	r0, #0
 8027d2a:	d052      	beq.n	8027dd2 <MobleGattWriteCallback+0xb2>
 8027d2c:	2900      	cmp	r1, #0
 8027d2e:	d050      	beq.n	8027dd2 <MobleGattWriteCallback+0xb2>
 8027d30:	2b00      	cmp	r3, #0
 8027d32:	d04e      	beq.n	8027dd2 <MobleGattWriteCallback+0xb2>
 8027d34:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
 8027d38:	2b00      	cmp	r3, #0
 8027d3a:	d048      	beq.n	8027dce <MobleGattWriteCallback+0xae>
 8027d3c:	6858      	ldr	r0, [r3, #4]
 8027d3e:	2800      	cmp	r0, #0
 8027d40:	d045      	beq.n	8027dce <MobleGattWriteCallback+0xae>
 8027d42:	789f      	ldrb	r7, [r3, #2]
 8027d44:	2f00      	cmp	r7, #0
 8027d46:	d042      	beq.n	8027dce <MobleGattWriteCallback+0xae>
 8027d48:	2500      	movs	r5, #0
 8027d4a:	8983      	ldrh	r3, [r0, #12]
 8027d4c:	1c5e      	adds	r6, r3, #1
 8027d4e:	b2b6      	uxth	r6, r6
 8027d50:	42b4      	cmp	r4, r6
 8027d52:	d116      	bne.n	8027d82 <MobleGattWriteCallback+0x62>
 8027d54:	7903      	ldrb	r3, [r0, #4]
 8027d56:	4293      	cmp	r3, r2
 8027d58:	d33b      	bcc.n	8027dd2 <MobleGattWriteCallback+0xb2>
 8027d5a:	7883      	ldrb	r3, [r0, #2]
 8027d5c:	f013 0f06 	tst.w	r3, #6
 8027d60:	d035      	beq.n	8027dce <MobleGattWriteCallback+0xae>
 8027d62:	8803      	ldrh	r3, [r0, #0]
 8027d64:	f642 20db 	movw	r0, #10971	; 0x2adb
 8027d68:	4283      	cmp	r3, r0
 8027d6a:	d008      	beq.n	8027d7e <MobleGattWriteCallback+0x5e>
 8027d6c:	f642 20dd 	movw	r0, #10973	; 0x2add
 8027d70:	4283      	cmp	r3, r0
 8027d72:	d12c      	bne.n	8027dce <MobleGattWriteCallback+0xae>
 8027d74:	2000      	movs	r0, #0
 8027d76:	f7ff ff25 	bl	8027bc4 <BnrgmProxyProtocol_ProcessPacket>
 8027d7a:	2000      	movs	r0, #0
 8027d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027d7e:	2001      	movs	r0, #1
 8027d80:	e7f9      	b.n	8027d76 <MobleGattWriteCallback+0x56>
 8027d82:	3302      	adds	r3, #2
 8027d84:	b29b      	uxth	r3, r3
 8027d86:	429c      	cmp	r4, r3
 8027d88:	d11b      	bne.n	8027dc2 <MobleGattWriteCallback+0xa2>
 8027d8a:	7883      	ldrb	r3, [r0, #2]
 8027d8c:	071b      	lsls	r3, r3, #28
 8027d8e:	d51e      	bpl.n	8027dce <MobleGattWriteCallback+0xae>
 8027d90:	8803      	ldrh	r3, [r0, #0]
 8027d92:	f642 22dc 	movw	r2, #10972	; 0x2adc
 8027d96:	4293      	cmp	r3, r2
 8027d98:	d00c      	beq.n	8027db4 <MobleGattWriteCallback+0x94>
 8027d9a:	f642 22de 	movw	r2, #10974	; 0x2ade
 8027d9e:	4293      	cmp	r3, r2
 8027da0:	d115      	bne.n	8027dce <MobleGattWriteCallback+0xae>
 8027da2:	780b      	ldrb	r3, [r1, #0]
 8027da4:	4a0c      	ldr	r2, [pc, #48]	; (8027dd8 <MobleGattWriteCallback+0xb8>)
 8027da6:	f003 0301 	and.w	r3, r3, #1
 8027daa:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 8027dae:	f7f5 fe85 	bl	801dabc <BnrgmStackSendBeaconOverGatt>
 8027db2:	e7e2      	b.n	8027d7a <MobleGattWriteCallback+0x5a>
 8027db4:	780b      	ldrb	r3, [r1, #0]
 8027db6:	4a08      	ldr	r2, [pc, #32]	; (8027dd8 <MobleGattWriteCallback+0xb8>)
 8027db8:	f003 0301 	and.w	r3, r3, #1
 8027dbc:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 8027dc0:	e7db      	b.n	8027d7a <MobleGattWriteCallback+0x5a>
 8027dc2:	3501      	adds	r5, #1
 8027dc4:	b2eb      	uxtb	r3, r5
 8027dc6:	429f      	cmp	r7, r3
 8027dc8:	f100 0010 	add.w	r0, r0, #16
 8027dcc:	d8bd      	bhi.n	8027d4a <MobleGattWriteCallback+0x2a>
 8027dce:	2002      	movs	r0, #2
 8027dd0:	e7d4      	b.n	8027d7c <MobleGattWriteCallback+0x5c>
 8027dd2:	2003      	movs	r0, #3
 8027dd4:	e7d2      	b.n	8027d7c <MobleGattWriteCallback+0x5c>
 8027dd6:	bf00      	nop
 8027dd8:	20000318 	.word	0x20000318

08027ddc <MobleProvision_SetInputMessage>:
 8027ddc:	b410      	push	{r4}
 8027dde:	4604      	mov	r4, r0
 8027de0:	4608      	mov	r0, r1
 8027de2:	4611      	mov	r1, r2
 8027de4:	461a      	mov	r2, r3
 8027de6:	b91c      	cbnz	r4, 8027df0 <MobleProvision_SetInputMessage+0x14>
 8027de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027dec:	f7f8 b944 	b.w	8020078 <MobleProvision_ProvisionerNode_SetInputMessage>
 8027df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027df4:	f7ff bdb4 	b.w	8027960 <MobleProvision_UnprovisionedNode_SetInputMessage>

08027df8 <MoblePBADVProcessData>:
 8027df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027dfc:	2a05      	cmp	r2, #5
 8027dfe:	b0a5      	sub	sp, #148	; 0x94
 8027e00:	4605      	mov	r5, r0
 8027e02:	460c      	mov	r4, r1
 8027e04:	4693      	mov	fp, r2
 8027e06:	f240 8165 	bls.w	80280d4 <MoblePBADVProcessData+0x2dc>
 8027e0a:	7a03      	ldrb	r3, [r0, #8]
 8027e0c:	680f      	ldr	r7, [r1, #0]
 8027e0e:	f891 9004 	ldrb.w	r9, [r1, #4]
 8027e12:	b113      	cbz	r3, 8027e1a <MoblePBADVProcessData+0x22>
 8027e14:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8027e16:	4297      	cmp	r7, r2
 8027e18:	d025      	beq.n	8027e66 <MoblePBADVProcessData+0x6e>
 8027e1a:	f895 217c 	ldrb.w	r2, [r5, #380]	; 0x17c
 8027e1e:	2a00      	cmp	r2, #0
 8027e20:	f000 814f 	beq.w	80280c2 <MoblePBADVProcessData+0x2ca>
 8027e24:	f8d5 1198 	ldr.w	r1, [r5, #408]	; 0x198
 8027e28:	428f      	cmp	r7, r1
 8027e2a:	f040 8155 	bne.w	80280d8 <MoblePBADVProcessData+0x2e0>
 8027e2e:	2601      	movs	r6, #1
 8027e30:	f44f 78ba 	mov.w	r8, #372	; 0x174
 8027e34:	fb08 f806 	mul.w	r8, r8, r6
 8027e38:	f108 0708 	add.w	r7, r8, #8
 8027e3c:	f508 70aa 	add.w	r0, r8, #340	; 0x154
 8027e40:	4428      	add	r0, r5
 8027e42:	442f      	add	r7, r5
 8027e44:	f7ef ff68 	bl	8017d18 <MoblePBADVEraseTimer>
 8027e48:	4638      	mov	r0, r7
 8027e4a:	f7ef fee3 	bl	8017c14 <MoblePBADVRaiseLinkIdleTimer>
 8027e4e:	7963      	ldrb	r3, [r4, #5]
 8027e50:	f003 0203 	and.w	r2, r3, #3
 8027e54:	2a03      	cmp	r2, #3
 8027e56:	d108      	bne.n	8027e6a <MoblePBADVProcessData+0x72>
 8027e58:	089b      	lsrs	r3, r3, #2
 8027e5a:	2b03      	cmp	r3, #3
 8027e5c:	d835      	bhi.n	8027eca <MoblePBADVProcessData+0xd2>
 8027e5e:	e8df f003 	tbb	[pc, r3]
 8027e62:	a686      	.short	0xa686
 8027e64:	0874      	.short	0x0874
 8027e66:	2600      	movs	r6, #0
 8027e68:	e7e2      	b.n	8027e30 <MoblePBADVProcessData+0x38>
 8027e6a:	2a01      	cmp	r2, #1
 8027e6c:	d12f      	bne.n	8027ece <MoblePBADVProcessData+0xd6>
 8027e6e:	2b01      	cmp	r3, #1
 8027e70:	d1f2      	bne.n	8027e58 <MoblePBADVProcessData+0x60>
 8027e72:	f44f 79ba 	mov.w	r9, #372	; 0x174
 8027e76:	fb09 5906 	mla	r9, r9, r6, r5
 8027e7a:	f8d9 30c4 	ldr.w	r3, [r9, #196]	; 0xc4
 8027e7e:	2b00      	cmp	r3, #0
 8027e80:	f000 8128 	beq.w	80280d4 <MoblePBADVProcessData+0x2dc>
 8027e84:	7922      	ldrb	r2, [r4, #4]
 8027e86:	f899 30c0 	ldrb.w	r3, [r9, #192]	; 0xc0
 8027e8a:	429a      	cmp	r2, r3
 8027e8c:	f040 8122 	bne.w	80280d4 <MoblePBADVProcessData+0x2dc>
 8027e90:	4638      	mov	r0, r7
 8027e92:	f7ef ff4a 	bl	8017d2a <MoblePBADVClearTimers>
 8027e96:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
 8027e9a:	4428      	add	r0, r5
 8027e9c:	f7ef fdb3 	bl	8017a06 <MoblePBADVEraseTransaction>
 8027ea0:	f899 30c0 	ldrb.w	r3, [r9, #192]	; 0xc0
 8027ea4:	3301      	adds	r3, #1
 8027ea6:	f889 30c0 	strb.w	r3, [r9, #192]	; 0xc0
 8027eaa:	f899 3164 	ldrb.w	r3, [r9, #356]	; 0x164
 8027eae:	b3c3      	cbz	r3, 8027f22 <MoblePBADVProcessData+0x12a>
 8027eb0:	f8d9 316c 	ldr.w	r3, [r9, #364]	; 0x16c
 8027eb4:	f8d9 0178 	ldr.w	r0, [r9, #376]	; 0x178
 8027eb8:	4798      	blx	r3
 8027eba:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8027ebe:	fb00 5606 	mla	r6, r0, r6, r5
 8027ec2:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8027ec6:	2b03      	cmp	r3, #3
 8027ec8:	d03a      	beq.n	8027f40 <MoblePBADVProcessData+0x148>
 8027eca:	2400      	movs	r4, #0
 8027ecc:	e13f      	b.n	802814e <MoblePBADVProcessData+0x356>
 8027ece:	eb05 0308 	add.w	r3, r5, r8
 8027ed2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8027ed6:	2a01      	cmp	r2, #1
 8027ed8:	d801      	bhi.n	8027ede <MoblePBADVProcessData+0xe6>
 8027eda:	f883 902c 	strb.w	r9, [r3, #44]	; 0x2c
 8027ede:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8027ee2:	fb03 5606 	mla	r6, r3, r6, r5
 8027ee6:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8027eea:	4599      	cmp	r9, r3
 8027eec:	f000 8090 	beq.w	8028010 <MoblePBADVProcessData+0x218>
 8027ef0:	3b01      	subs	r3, #1
 8027ef2:	454b      	cmp	r3, r9
 8027ef4:	f040 80ee 	bne.w	80280d4 <MoblePBADVProcessData+0x2dc>
 8027ef8:	2300      	movs	r3, #0
 8027efa:	461a      	mov	r2, r3
 8027efc:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
 8027f00:	2103      	movs	r1, #3
 8027f02:	4638      	mov	r0, r7
 8027f04:	f7f2 fed2 	bl	801acac <MoblePBADVSendControl.isra.0>
 8027f08:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8027f0c:	3301      	adds	r3, #1
 8027f0e:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
 8027f12:	e0df      	b.n	80280d4 <MoblePBADVProcessData+0x2dc>
 8027f14:	2a01      	cmp	r2, #1
 8027f16:	f040 80dd 	bne.w	80280d4 <MoblePBADVProcessData+0x2dc>
 8027f1a:	2b01      	cmp	r3, #1
 8027f1c:	f040 80ec 	bne.w	80280f8 <MoblePBADVProcessData+0x300>
 8027f20:	e0d8      	b.n	80280d4 <MoblePBADVProcessData+0x2dc>
 8027f22:	f899 2028 	ldrb.w	r2, [r9, #40]	; 0x28
 8027f26:	2a01      	cmp	r2, #1
 8027f28:	d103      	bne.n	8027f32 <MoblePBADVProcessData+0x13a>
 8027f2a:	f7f7 f975 	bl	801f218 <BnrgmProvision_UnprovisionedGetState>
 8027f2e:	2807      	cmp	r0, #7
 8027f30:	d0c3      	beq.n	8027eba <MoblePBADVProcessData+0xc2>
 8027f32:	4610      	mov	r0, r2
 8027f34:	f7f9 fba8 	bl	8021688 <MobleProvision_CompleteOperation>
 8027f38:	4638      	mov	r0, r7
 8027f3a:	f7ff f99b 	bl	8027274 <MoblePBADVFireProvisionStateMach>
 8027f3e:	e7bc      	b.n	8027eba <MoblePBADVProcessData+0xc2>
 8027f40:	2101      	movs	r1, #1
 8027f42:	4638      	mov	r0, r7
 8027f44:	f7ff f8d9 	bl	80270fa <MoblePBADVCloseLink>
 8027f48:	e7bf      	b.n	8027eca <MoblePBADVProcessData+0xd2>
 8027f4a:	6823      	ldr	r3, [r4, #0]
 8027f4c:	9303      	str	r3, [sp, #12]
 8027f4e:	2204      	movs	r2, #4
 8027f50:	69fb      	ldr	r3, [r7, #28]
 8027f52:	9304      	str	r3, [sp, #16]
 8027f54:	a903      	add	r1, sp, #12
 8027f56:	a804      	add	r0, sp, #16
 8027f58:	f000 fdfa 	bl	8028b50 <memcmp>
 8027f5c:	4604      	mov	r4, r0
 8027f5e:	2800      	cmp	r0, #0
 8027f60:	f040 80b8 	bne.w	80280d4 <MoblePBADVProcessData+0x2dc>
 8027f64:	4601      	mov	r1, r0
 8027f66:	4638      	mov	r0, r7
 8027f68:	f7ff f8c7 	bl	80270fa <MoblePBADVCloseLink>
 8027f6c:	e0ef      	b.n	802814e <MoblePBADVProcessData+0x356>
 8027f6e:	7924      	ldrb	r4, [r4, #4]
 8027f70:	2c00      	cmp	r4, #0
 8027f72:	f040 80af 	bne.w	80280d4 <MoblePBADVProcessData+0x2dc>
 8027f76:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8027f7a:	fb00 5606 	mla	r6, r0, r6, r5
 8027f7e:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
 8027f82:	2d01      	cmp	r5, #1
 8027f84:	f040 80a6 	bne.w	80280d4 <MoblePBADVProcessData+0x2dc>
 8027f88:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8027f8c:	2b03      	cmp	r3, #3
 8027f8e:	f000 80a1 	beq.w	80280d4 <MoblePBADVProcessData+0x2dc>
 8027f92:	2380      	movs	r3, #128	; 0x80
 8027f94:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
 8027f98:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
 8027f9c:	4623      	mov	r3, r4
 8027f9e:	4622      	mov	r2, r4
 8027fa0:	4629      	mov	r1, r5
 8027fa2:	4638      	mov	r0, r7
 8027fa4:	f7f2 fe82 	bl	801acac <MoblePBADVSendControl.isra.0>
 8027fa8:	f886 502c 	strb.w	r5, [r6, #44]	; 0x2c
 8027fac:	e0cf      	b.n	802814e <MoblePBADVProcessData+0x356>
 8027fae:	7923      	ldrb	r3, [r4, #4]
 8027fb0:	2b00      	cmp	r3, #0
 8027fb2:	f040 808f 	bne.w	80280d4 <MoblePBADVProcessData+0x2dc>
 8027fb6:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8027fba:	fb03 5606 	mla	r6, r3, r6, r5
 8027fbe:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
 8027fc2:	2c00      	cmp	r4, #0
 8027fc4:	f040 8086 	bne.w	80280d4 <MoblePBADVProcessData+0x2dc>
 8027fc8:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8027fcc:	2b03      	cmp	r3, #3
 8027fce:	d101      	bne.n	8027fd4 <MoblePBADVProcessData+0x1dc>
 8027fd0:	2101      	movs	r1, #1
 8027fd2:	e7c8      	b.n	8027f66 <MoblePBADVProcessData+0x16e>
 8027fd4:	2b01      	cmp	r3, #1
 8027fd6:	d17d      	bne.n	80280d4 <MoblePBADVProcessData+0x2dc>
 8027fd8:	2302      	movs	r3, #2
 8027fda:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
 8027fde:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
 8027fe2:	4428      	add	r0, r5
 8027fe4:	f886 40c0 	strb.w	r4, [r6, #192]	; 0xc0
 8027fe8:	f7ef fd0d 	bl	8017a06 <MoblePBADVEraseTransaction>
 8027fec:	4638      	mov	r0, r7
 8027fee:	f7ef fe9c 	bl	8017d2a <MoblePBADVClearTimers>
 8027ff2:	f896 3164 	ldrb.w	r3, [r6, #356]	; 0x164
 8027ff6:	b13b      	cbz	r3, 8028008 <MoblePBADVProcessData+0x210>
 8027ff8:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
 8027ffc:	f8d6 0178 	ldr.w	r0, [r6, #376]	; 0x178
 8028000:	4798      	blx	r3
 8028002:	f7de fa25 	bl	8006450 <BLEMesh_PbAdvLinkOpenCb>
 8028006:	e0a2      	b.n	802814e <MoblePBADVProcessData+0x356>
 8028008:	4638      	mov	r0, r7
 802800a:	f7ff f933 	bl	8027274 <MoblePBADVFireProvisionStateMach>
 802800e:	e7f8      	b.n	8028002 <MoblePBADVProcessData+0x20a>
 8028010:	f8d6 90c4 	ldr.w	r9, [r6, #196]	; 0xc4
 8028014:	f1b9 0f00 	cmp.w	r9, #0
 8028018:	d15c      	bne.n	80280d4 <MoblePBADVProcessData+0x2dc>
 802801a:	ab03      	add	r3, sp, #12
 802801c:	f108 0034 	add.w	r0, r8, #52	; 0x34
 8028020:	f04f 0a01 	mov.w	sl, #1
 8028024:	9300      	str	r3, [sp, #0]
 8028026:	1d61      	adds	r1, r4, #5
 8028028:	f8cd a004 	str.w	sl, [sp, #4]
 802802c:	ab04      	add	r3, sp, #16
 802802e:	f1ab 0205 	sub.w	r2, fp, #5
 8028032:	4428      	add	r0, r5
 8028034:	f7f6 fcd6 	bl	801e9e4 <MobleSARJoin>
 8028038:	4604      	mov	r4, r0
 802803a:	bbc8      	cbnz	r0, 80280b0 <MoblePBADVProcessData+0x2b8>
 802803c:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 8028040:	2903      	cmp	r1, #3
 8028042:	d105      	bne.n	8028050 <MoblePBADVProcessData+0x258>
 8028044:	4603      	mov	r3, r0
 8028046:	4602      	mov	r2, r0
 8028048:	4638      	mov	r0, r7
 802804a:	f7f2 fe2f 	bl	801acac <MoblePBADVSendControl.isra.0>
 802804e:	e7bf      	b.n	8027fd0 <MoblePBADVProcessData+0x1d8>
 8028050:	4603      	mov	r3, r0
 8028052:	4602      	mov	r2, r0
 8028054:	2103      	movs	r1, #3
 8028056:	4638      	mov	r0, r7
 8028058:	f8dd 900c 	ldr.w	r9, [sp, #12]
 802805c:	f7f2 fe26 	bl	801acac <MoblePBADVSendControl.isra.0>
 8028060:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8028064:	f108 002c 	add.w	r0, r8, #44	; 0x2c
 8028068:	3301      	adds	r3, #1
 802806a:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
 802806e:	4428      	add	r0, r5
 8028070:	f7ef fcc9 	bl	8017a06 <MoblePBADVEraseTransaction>
 8028074:	f896 3164 	ldrb.w	r3, [r6, #356]	; 0x164
 8028078:	b13b      	cbz	r3, 802808a <MoblePBADVProcessData+0x292>
 802807a:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
 802807e:	f8d6 0178 	ldr.w	r0, [r6, #376]	; 0x178
 8028082:	464a      	mov	r2, r9
 8028084:	a904      	add	r1, sp, #16
 8028086:	4798      	blx	r3
 8028088:	e061      	b.n	802814e <MoblePBADVProcessData+0x356>
 802808a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 802808e:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8028092:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
 8028096:	b2db      	uxtb	r3, r3
 8028098:	f10d 0211 	add.w	r2, sp, #17
 802809c:	f7ff fe9e 	bl	8027ddc <MobleProvision_SetInputMessage>
 80280a0:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
 80280a4:	f7f9 faf0 	bl	8021688 <MobleProvision_CompleteOperation>
 80280a8:	4638      	mov	r0, r7
 80280aa:	f7ff f8e3 	bl	8027274 <MoblePBADVFireProvisionStateMach>
 80280ae:	e04e      	b.n	802814e <MoblePBADVProcessData+0x356>
 80280b0:	2801      	cmp	r0, #1
 80280b2:	f43f af0a 	beq.w	8027eca <MoblePBADVProcessData+0xd2>
 80280b6:	4638      	mov	r0, r7
 80280b8:	f7ff f86e 	bl	8027198 <MoblePBADVStopProvisioning>
 80280bc:	e705      	b.n	8027eca <MoblePBADVProcessData+0xd2>
 80280be:	461c      	mov	r4, r3
 80280c0:	e045      	b.n	802814e <MoblePBADVProcessData+0x356>
 80280c2:	b13b      	cbz	r3, 80280d4 <MoblePBADVProcessData+0x2dc>
 80280c4:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80280c8:	2b01      	cmp	r3, #1
 80280ca:	d102      	bne.n	80280d2 <MoblePBADVProcessData+0x2da>
 80280cc:	f895 6029 	ldrb.w	r6, [r5, #41]	; 0x29
 80280d0:	b166      	cbz	r6, 80280ec <MoblePBADVProcessData+0x2f4>
 80280d2:	b91a      	cbnz	r2, 80280dc <MoblePBADVProcessData+0x2e4>
 80280d4:	2401      	movs	r4, #1
 80280d6:	e03a      	b.n	802814e <MoblePBADVProcessData+0x356>
 80280d8:	2b00      	cmp	r3, #0
 80280da:	d1f3      	bne.n	80280c4 <MoblePBADVProcessData+0x2cc>
 80280dc:	f895 619c 	ldrb.w	r6, [r5, #412]	; 0x19c
 80280e0:	2e01      	cmp	r6, #1
 80280e2:	d1f7      	bne.n	80280d4 <MoblePBADVProcessData+0x2dc>
 80280e4:	f895 319d 	ldrb.w	r3, [r5, #413]	; 0x19d
 80280e8:	2b00      	cmp	r3, #0
 80280ea:	d1f3      	bne.n	80280d4 <MoblePBADVProcessData+0x2dc>
 80280ec:	7963      	ldrb	r3, [r4, #5]
 80280ee:	f003 0203 	and.w	r2, r3, #3
 80280f2:	2a03      	cmp	r2, #3
 80280f4:	f47f af0e 	bne.w	8027f14 <MoblePBADVProcessData+0x11c>
 80280f8:	089b      	lsrs	r3, r3, #2
 80280fa:	d1eb      	bne.n	80280d4 <MoblePBADVProcessData+0x2dc>
 80280fc:	f1b9 0f00 	cmp.w	r9, #0
 8028100:	d1e8      	bne.n	80280d4 <MoblePBADVProcessData+0x2dc>
 8028102:	f1bb 0f14 	cmp.w	fp, #20
 8028106:	d9e5      	bls.n	80280d4 <MoblePBADVProcessData+0x2dc>
 8028108:	f44f 70ba 	mov.w	r0, #372	; 0x174
 802810c:	4346      	muls	r6, r0
 802810e:	f106 0010 	add.w	r0, r6, #16
 8028112:	2210      	movs	r2, #16
 8028114:	1da1      	adds	r1, r4, #6
 8028116:	4428      	add	r0, r5
 8028118:	f000 fd1a 	bl	8028b50 <memcmp>
 802811c:	2800      	cmp	r0, #0
 802811e:	d1d9      	bne.n	80280d4 <MoblePBADVProcessData+0x2dc>
 8028120:	f7f6 fffa 	bl	801f118 <MobleProvision_UnprovisionedNode_Init>
 8028124:	2302      	movs	r3, #2
 8028126:	4604      	mov	r4, r0
 8028128:	2800      	cmp	r0, #0
 802812a:	d1c8      	bne.n	80280be <MoblePBADVProcessData+0x2c6>
 802812c:	eb05 0806 	add.w	r8, r5, r6
 8028130:	f106 0008 	add.w	r0, r6, #8
 8028134:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
 8028138:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
 802813c:	464b      	mov	r3, r9
 802813e:	464a      	mov	r2, r9
 8028140:	2101      	movs	r1, #1
 8028142:	4428      	add	r0, r5
 8028144:	f7f2 fdb2 	bl	801acac <MoblePBADVSendControl.isra.0>
 8028148:	2301      	movs	r3, #1
 802814a:	f888 302c 	strb.w	r3, [r8, #44]	; 0x2c
 802814e:	4620      	mov	r0, r4
 8028150:	b025      	add	sp, #148	; 0x94
 8028152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028156 <MobleStackScanCallback>:
 8028156:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802815a:	4689      	mov	r9, r1
 802815c:	f99d b030 	ldrsb.w	fp, [sp, #48]	; 0x30
 8028160:	4692      	mov	sl, r2
 8028162:	461f      	mov	r7, r3
 8028164:	4680      	mov	r8, r0
 8028166:	2800      	cmp	r0, #0
 8028168:	d044      	beq.n	80281f4 <MobleStackScanCallback+0x9e>
 802816a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 802816e:	3b02      	subs	r3, #2
 8028170:	2b01      	cmp	r3, #1
 8028172:	d83f      	bhi.n	80281f4 <MobleStackScanCallback+0x9e>
 8028174:	2f01      	cmp	r7, #1
 8028176:	d93d      	bls.n	80281f4 <MobleStackScanCallback+0x9e>
 8028178:	2500      	movs	r5, #0
 802817a:	f81a 4005 	ldrb.w	r4, [sl, r5]
 802817e:	2c01      	cmp	r4, #1
 8028180:	eb0a 0605 	add.w	r6, sl, r5
 8028184:	d936      	bls.n	80281f4 <MobleStackScanCallback+0x9e>
 8028186:	1b7a      	subs	r2, r7, r5
 8028188:	42a2      	cmp	r2, r4
 802818a:	dd33      	ble.n	80281f4 <MobleStackScanCallback+0x9e>
 802818c:	7873      	ldrb	r3, [r6, #1]
 802818e:	1e61      	subs	r1, r4, #1
 8028190:	2b2a      	cmp	r3, #42	; 0x2a
 8028192:	b2c9      	uxtb	r1, r1
 8028194:	d111      	bne.n	80281ba <MobleStackScanCallback+0x64>
 8028196:	3c0d      	subs	r4, #13
 8028198:	2c13      	cmp	r4, #19
 802819a:	d807      	bhi.n	80281ac <MobleStackScanCallback+0x56>
 802819c:	460a      	mov	r2, r1
 802819e:	f8cd b000 	str.w	fp, [sp]
 80281a2:	2300      	movs	r3, #0
 80281a4:	1cb1      	adds	r1, r6, #2
 80281a6:	4648      	mov	r0, r9
 80281a8:	f7fa f8d4 	bl	8022354 <MobleStackProcessData>
 80281ac:	7833      	ldrb	r3, [r6, #0]
 80281ae:	3301      	adds	r3, #1
 80281b0:	441d      	add	r5, r3
 80281b2:	b2ed      	uxtb	r5, r5
 80281b4:	42af      	cmp	r7, r5
 80281b6:	d8e0      	bhi.n	802817a <MobleStackScanCallback+0x24>
 80281b8:	e01c      	b.n	80281f4 <MobleStackScanCallback+0x9e>
 80281ba:	2b29      	cmp	r3, #41	; 0x29
 80281bc:	d10d      	bne.n	80281da <MobleStackScanCallback+0x84>
 80281be:	3c07      	subs	r4, #7
 80281c0:	2c19      	cmp	r4, #25
 80281c2:	d8f3      	bhi.n	80281ac <MobleStackScanCallback+0x56>
 80281c4:	f898 31d4 	ldrb.w	r3, [r8, #468]	; 0x1d4
 80281c8:	2b01      	cmp	r3, #1
 80281ca:	d1ef      	bne.n	80281ac <MobleStackScanCallback+0x56>
 80281cc:	460a      	mov	r2, r1
 80281ce:	f8d8 029c 	ldr.w	r0, [r8, #668]	; 0x29c
 80281d2:	1cb1      	adds	r1, r6, #2
 80281d4:	f7ff fe10 	bl	8027df8 <MoblePBADVProcessData>
 80281d8:	e7e8      	b.n	80281ac <MobleStackScanCallback+0x56>
 80281da:	2b2b      	cmp	r3, #43	; 0x2b
 80281dc:	465b      	mov	r3, fp
 80281de:	d104      	bne.n	80281ea <MobleStackScanCallback+0x94>
 80281e0:	464a      	mov	r2, r9
 80281e2:	1cb0      	adds	r0, r6, #2
 80281e4:	f7f9 fabc 	bl	8021760 <MobleStackProcessBeacon>
 80281e8:	e7e0      	b.n	80281ac <MobleStackScanCallback+0x56>
 80281ea:	b2d2      	uxtb	r2, r2
 80281ec:	4631      	mov	r1, r6
 80281ee:	4648      	mov	r0, r9
 80281f0:	f7f4 ffe9 	bl	801d1c6 <BLEMesh_CustomBeaconReceivedCallback>
 80281f4:	b003      	add	sp, #12
 80281f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080281fa <BnrgmHealthModelSetFault>:
 80281fa:	2a08      	cmp	r2, #8
 80281fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028200:	4605      	mov	r5, r0
 8028202:	d902      	bls.n	802820a <BnrgmHealthModelSetFault+0x10>
 8028204:	2004      	movs	r0, #4
 8028206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802820a:	b352      	cbz	r2, 8028262 <BnrgmHealthModelSetFault+0x68>
 802820c:	3a01      	subs	r2, #1
 802820e:	1e4e      	subs	r6, r1, #1
 8028210:	fa51 f482 	uxtab	r4, r1, r2
 8028214:	f04f 0801 	mov.w	r8, #1
 8028218:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 802821c:	f1b9 0f00 	cmp.w	r9, #0
 8028220:	d014      	beq.n	802824c <BnrgmHealthModelSetFault+0x52>
 8028222:	682b      	ldr	r3, [r5, #0]
 8028224:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8028226:	f107 0a4c 	add.w	sl, r7, #76	; 0x4c
 802822a:	2208      	movs	r2, #8
 802822c:	4649      	mov	r1, r9
 802822e:	4650      	mov	r0, sl
 8028230:	f7d7 ffa6 	bl	8000180 <memchr>
 8028234:	4603      	mov	r3, r0
 8028236:	b958      	cbnz	r0, 8028250 <BnrgmHealthModelSetFault+0x56>
 8028238:	f81a 2b01 	ldrb.w	r2, [sl], #1
 802823c:	b96a      	cbnz	r2, 802825a <BnrgmHealthModelSetFault+0x60>
 802823e:	443b      	add	r3, r7
 8028240:	f883 904c 	strb.w	r9, [r3, #76]	; 0x4c
 8028244:	f883 9054 	strb.w	r9, [r3, #84]	; 0x54
 8028248:	f887 8049 	strb.w	r8, [r7, #73]	; 0x49
 802824c:	42a6      	cmp	r6, r4
 802824e:	d1e3      	bne.n	8028218 <BnrgmHealthModelSetFault+0x1e>
 8028250:	4628      	mov	r0, r5
 8028252:	f7ef fd85 	bl	8017d60 <BnrgmHealthModelSetPublishTimer.isra.0>
 8028256:	2000      	movs	r0, #0
 8028258:	e7d5      	b.n	8028206 <BnrgmHealthModelSetFault+0xc>
 802825a:	3301      	adds	r3, #1
 802825c:	2b08      	cmp	r3, #8
 802825e:	d1eb      	bne.n	8028238 <BnrgmHealthModelSetFault+0x3e>
 8028260:	e7d0      	b.n	8028204 <BnrgmHealthModelSetFault+0xa>
 8028262:	2003      	movs	r0, #3
 8028264:	e7cf      	b.n	8028206 <BnrgmHealthModelSetFault+0xc>
	...

08028268 <BLEMesh_SetFault>:
 8028268:	b410      	push	{r4}
 802826a:	b198      	cbz	r0, 8028294 <BLEMesh_SetFault+0x2c>
 802826c:	1e4b      	subs	r3, r1, #1
 802826e:	2b07      	cmp	r3, #7
 8028270:	d810      	bhi.n	8028294 <BLEMesh_SetFault+0x2c>
 8028272:	1e43      	subs	r3, r0, #1
 8028274:	1dc2      	adds	r2, r0, #7
 8028276:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 802827a:	2c32      	cmp	r4, #50	; 0x32
 802827c:	d80a      	bhi.n	8028294 <BLEMesh_SetFault+0x2c>
 802827e:	4293      	cmp	r3, r2
 8028280:	d1f9      	bne.n	8028276 <BLEMesh_SetFault+0xe>
 8028282:	4b06      	ldr	r3, [pc, #24]	; (802829c <BLEMesh_SetFault+0x34>)
 8028284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028288:	460a      	mov	r2, r1
 802828a:	4601      	mov	r1, r0
 802828c:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 8028290:	f7ff bfb3 	b.w	80281fa <BnrgmHealthModelSetFault>
 8028294:	2003      	movs	r0, #3
 8028296:	f85d 4b04 	ldr.w	r4, [sp], #4
 802829a:	4770      	bx	lr
 802829c:	20002508 	.word	0x20002508

080282a0 <BnrgmHealthModelClearFault>:
 80282a0:	2a08      	cmp	r2, #8
 80282a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80282a4:	4606      	mov	r6, r0
 80282a6:	d833      	bhi.n	8028310 <BnrgmHealthModelClearFault+0x70>
 80282a8:	b3a2      	cbz	r2, 8028314 <BnrgmHealthModelClearFault+0x74>
 80282aa:	2300      	movs	r3, #0
 80282ac:	3901      	subs	r1, #1
 80282ae:	461d      	mov	r5, r3
 80282b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80282b4:	b980      	cbnz	r0, 80282d8 <BnrgmHealthModelClearFault+0x38>
 80282b6:	3301      	adds	r3, #1
 80282b8:	b2db      	uxtb	r3, r3
 80282ba:	429a      	cmp	r2, r3
 80282bc:	d1f8      	bne.n	80282b0 <BnrgmHealthModelClearFault+0x10>
 80282be:	2500      	movs	r5, #0
 80282c0:	6833      	ldr	r3, [r6, #0]
 80282c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80282c4:	195a      	adds	r2, r3, r5
 80282c6:	f892 404c 	ldrb.w	r4, [r2, #76]	; 0x4c
 80282ca:	b1b4      	cbz	r4, 80282fa <BnrgmHealthModelClearFault+0x5a>
 80282cc:	2201      	movs	r2, #1
 80282ce:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80282d2:	2400      	movs	r4, #0
 80282d4:	4620      	mov	r0, r4
 80282d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80282d8:	6830      	ldr	r0, [r6, #0]
 80282da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80282dc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80282e0:	3454      	adds	r4, #84	; 0x54
 80282e2:	f810 7b01 	ldrb.w	r7, [r0], #1
 80282e6:	f891 c000 	ldrb.w	ip, [r1]
 80282ea:	45bc      	cmp	ip, r7
 80282ec:	bf04      	itt	eq
 80282ee:	f800 5c01 	strbeq.w	r5, [r0, #-1]
 80282f2:	71c5      	strbeq	r5, [r0, #7]
 80282f4:	4284      	cmp	r4, r0
 80282f6:	d1f4      	bne.n	80282e2 <BnrgmHealthModelClearFault+0x42>
 80282f8:	e7dd      	b.n	80282b6 <BnrgmHealthModelClearFault+0x16>
 80282fa:	2d07      	cmp	r5, #7
 80282fc:	d104      	bne.n	8028308 <BnrgmHealthModelClearFault+0x68>
 80282fe:	f883 4049 	strb.w	r4, [r3, #73]	; 0x49
 8028302:	4630      	mov	r0, r6
 8028304:	f7ef fd2c 	bl	8017d60 <BnrgmHealthModelSetPublishTimer.isra.0>
 8028308:	3501      	adds	r5, #1
 802830a:	2d08      	cmp	r5, #8
 802830c:	d1d8      	bne.n	80282c0 <BnrgmHealthModelClearFault+0x20>
 802830e:	e7e1      	b.n	80282d4 <BnrgmHealthModelClearFault+0x34>
 8028310:	2404      	movs	r4, #4
 8028312:	e7df      	b.n	80282d4 <BnrgmHealthModelClearFault+0x34>
 8028314:	2403      	movs	r4, #3
 8028316:	e7dd      	b.n	80282d4 <BnrgmHealthModelClearFault+0x34>

08028318 <BLEMesh_ClearFault>:
 8028318:	460a      	mov	r2, r1
 802831a:	b130      	cbz	r0, 802832a <BLEMesh_ClearFault+0x12>
 802831c:	b129      	cbz	r1, 802832a <BLEMesh_ClearFault+0x12>
 802831e:	4b04      	ldr	r3, [pc, #16]	; (8028330 <BLEMesh_ClearFault+0x18>)
 8028320:	4601      	mov	r1, r0
 8028322:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 8028326:	f7ff bfbb 	b.w	80282a0 <BnrgmHealthModelClearFault>
 802832a:	2002      	movs	r0, #2
 802832c:	4770      	bx	lr
 802832e:	bf00      	nop
 8028330:	20002508 	.word	0x20002508

08028334 <Test_UpperTester_Set10>:
 8028334:	784b      	ldrb	r3, [r1, #1]
 8028336:	2b31      	cmp	r3, #49	; 0x31
 8028338:	4608      	mov	r0, r1
 802833a:	d102      	bne.n	8028342 <Test_UpperTester_Set10+0xe>
 802833c:	2101      	movs	r1, #1
 802833e:	f7ff bf93 	b.w	8028268 <BLEMesh_SetFault>
 8028342:	2b30      	cmp	r3, #48	; 0x30
 8028344:	d102      	bne.n	802834c <Test_UpperTester_Set10+0x18>
 8028346:	2101      	movs	r1, #1
 8028348:	f7ff bfe6 	b.w	8028318 <BLEMesh_ClearFault>
 802834c:	2000      	movs	r0, #0
 802834e:	4770      	bx	lr

08028350 <BLEMesh_SetSIGModelsCbMap>:
 8028350:	4b04      	ldr	r3, [pc, #16]	; (8028364 <BLEMesh_SetSIGModelsCbMap+0x14>)
 8028352:	2800      	cmp	r0, #0
 8028354:	f8c3 0a28 	str.w	r0, [r3, #2600]	; 0xa28
 8028358:	f8c3 1a34 	str.w	r1, [r3, #2612]	; 0xa34
 802835c:	bf0c      	ite	eq
 802835e:	2003      	moveq	r0, #3
 8028360:	2000      	movne	r0, #0
 8028362:	4770      	bx	lr
 8028364:	20002508 	.word	0x20002508

08028368 <MobleSIGModelReplyStatus>:
 8028368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802836c:	ed2d 8b02 	vpush	{d8}
 8028370:	b08b      	sub	sp, #44	; 0x2c
 8028372:	ee08 0a10 	vmov	s16, r0
 8028376:	20a7      	movs	r0, #167	; 0xa7
 8028378:	460d      	mov	r5, r1
 802837a:	4617      	mov	r7, r2
 802837c:	9305      	str	r3, [sp, #20]
 802837e:	f7f2 fd79 	bl	801ae74 <MobleMemAlloc>
 8028382:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028384:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8028494 <MobleSIGModelReplyStatus+0x12c>
 8028388:	4606      	mov	r6, r0
 802838a:	f103 0020 	add.w	r0, r3, #32
 802838e:	f7f2 fd71 	bl	801ae74 <MobleMemAlloc>
 8028392:	88ab      	ldrh	r3, [r5, #4]
 8028394:	8103      	strh	r3, [r0, #8]
 8028396:	88eb      	ldrh	r3, [r5, #6]
 8028398:	8143      	strh	r3, [r0, #10]
 802839a:	7a2b      	ldrb	r3, [r5, #8]
 802839c:	70c3      	strb	r3, [r0, #3]
 802839e:	7a6b      	ldrb	r3, [r5, #9]
 80283a0:	7583      	strb	r3, [r0, #22]
 80283a2:	7aeb      	ldrb	r3, [r5, #11]
 80283a4:	7403      	strb	r3, [r0, #16]
 80283a6:	7aab      	ldrb	r3, [r5, #10]
 80283a8:	f8db 2a28 	ldr.w	r2, [fp, #2600]	; 0xa28
 80283ac:	7303      	strb	r3, [r0, #12]
 80283ae:	4604      	mov	r4, r0
 80283b0:	f8cb 2a24 	str.w	r2, [fp, #2596]	; 0xa24
 80283b4:	f04f 0800 	mov.w	r8, #0
 80283b8:	f60b 292c 	addw	r9, fp, #2604	; 0xa2c
 80283bc:	f8db 2a34 	ldr.w	r2, [fp, #2612]	; 0xa34
 80283c0:	f8db 1a24 	ldr.w	r1, [fp, #2596]	; 0xa24
 80283c4:	4542      	cmp	r2, r8
 80283c6:	d846      	bhi.n	8028456 <MobleSIGModelReplyStatus+0xee>
 80283c8:	f04f 0802 	mov.w	r8, #2
 80283cc:	f8db 1a30 	ldr.w	r1, [fp, #2608]	; 0xa30
 80283d0:	f8bb 2a2c 	ldrh.w	r2, [fp, #2604]	; 0xa2c
 80283d4:	9206      	str	r2, [sp, #24]
 80283d6:	4638      	mov	r0, r7
 80283d8:	9104      	str	r1, [sp, #16]
 80283da:	f7f8 fb45 	bl	8020a68 <MobleModelGetResponseOpCode>
 80283de:	46b2      	mov	sl, r6
 80283e0:	9a06      	ldr	r2, [sp, #24]
 80283e2:	9904      	ldr	r1, [sp, #16]
 80283e4:	f84a 0b08 	str.w	r0, [sl], #8
 80283e8:	4681      	mov	r9, r0
 80283ea:	4638      	mov	r0, r7
 80283ec:	9207      	str	r2, [sp, #28]
 80283ee:	9106      	str	r1, [sp, #24]
 80283f0:	f7f8 fb54 	bl	8020a9c <MobleModelGetMinResponseLength>
 80283f4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80283f8:	9004      	str	r0, [sp, #16]
 80283fa:	4638      	mov	r0, r7
 80283fc:	f7f8 fb68 	bl	8020ad0 <MobleModelGetMaxResponseLength>
 8028400:	2200      	movs	r2, #0
 8028402:	f8db 3a24 	ldr.w	r3, [fp, #2596]	; 0xa24
 8028406:	9202      	str	r2, [sp, #8]
 8028408:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802840a:	9201      	str	r2, [sp, #4]
 802840c:	9a05      	ldr	r2, [sp, #20]
 802840e:	9200      	str	r2, [sp, #0]
 8028410:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8028414:	4652      	mov	r2, sl
 8028416:	ab09      	add	r3, sp, #36	; 0x24
 8028418:	4607      	mov	r7, r0
 802841a:	4649      	mov	r1, r9
 802841c:	4628      	mov	r0, r5
 802841e:	47d8      	blx	fp
 8028420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028422:	9a04      	ldr	r2, [sp, #16]
 8028424:	429a      	cmp	r2, r3
 8028426:	d92e      	bls.n	8028486 <MobleSIGModelReplyStatus+0x11e>
 8028428:	9209      	str	r2, [sp, #36]	; 0x24
 802842a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802842c:	f8c6 30a3 	str.w	r3, [r6, #163]	; 0xa3
 8028430:	4622      	mov	r2, r4
 8028432:	4633      	mov	r3, r6
 8028434:	2100      	movs	r1, #0
 8028436:	ee18 0a10 	vmov	r0, s16
 802843a:	f7fa fb3b 	bl	8022ab4 <MobleModelSendPacket>
 802843e:	4630      	mov	r0, r6
 8028440:	f7f2 fda2 	bl	801af88 <MobleMemFree>
 8028444:	4620      	mov	r0, r4
 8028446:	f7f2 fd9f 	bl	801af88 <MobleMemFree>
 802844a:	4640      	mov	r0, r8
 802844c:	b00b      	add	sp, #44	; 0x2c
 802844e:	ecbd 8b02 	vpop	{d8}
 8028452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028456:	680a      	ldr	r2, [r1, #0]
 8028458:	480d      	ldr	r0, [pc, #52]	; (8028490 <MobleSIGModelReplyStatus+0x128>)
 802845a:	4649      	mov	r1, r9
 802845c:	4790      	blx	r2
 802845e:	f8bb 2a2c 	ldrh.w	r2, [fp, #2604]	; 0xa2c
 8028462:	f8db 1a30 	ldr.w	r1, [fp, #2608]	; 0xa30
 8028466:	4638      	mov	r0, r7
 8028468:	f7f8 fa9f 	bl	80209aa <MobleModelCheckOpcodeValidity>
 802846c:	2801      	cmp	r0, #1
 802846e:	d007      	beq.n	8028480 <MobleSIGModelReplyStatus+0x118>
 8028470:	f8db 2a24 	ldr.w	r2, [fp, #2596]	; 0xa24
 8028474:	320c      	adds	r2, #12
 8028476:	f8cb 2a24 	str.w	r2, [fp, #2596]	; 0xa24
 802847a:	f108 0801 	add.w	r8, r8, #1
 802847e:	e79d      	b.n	80283bc <MobleSIGModelReplyStatus+0x54>
 8028480:	f04f 0800 	mov.w	r8, #0
 8028484:	e7a2      	b.n	80283cc <MobleSIGModelReplyStatus+0x64>
 8028486:	42bb      	cmp	r3, r7
 8028488:	bf88      	it	hi
 802848a:	9709      	strhi	r7, [sp, #36]	; 0x24
 802848c:	e7cd      	b.n	802842a <MobleSIGModelReplyStatus+0xc2>
 802848e:	bf00      	nop
 8028490:	20002f38 	.word	0x20002f38
 8028494:	20002508 	.word	0x20002508

08028498 <Model_SendResponse>:
 8028498:	b513      	push	{r0, r1, r4, lr}
 802849a:	4c07      	ldr	r4, [pc, #28]	; (80284b8 <Model_SendResponse+0x20>)
 802849c:	f8d4 46f0 	ldr.w	r4, [r4, #1776]	; 0x6f0
 80284a0:	b144      	cbz	r4, 80284b4 <Model_SendResponse+0x1c>
 80284a2:	9300      	str	r3, [sp, #0]
 80284a4:	4613      	mov	r3, r2
 80284a6:	460a      	mov	r2, r1
 80284a8:	4601      	mov	r1, r0
 80284aa:	4620      	mov	r0, r4
 80284ac:	f7ff ff5c 	bl	8028368 <MobleSIGModelReplyStatus>
 80284b0:	b002      	add	sp, #8
 80284b2:	bd10      	pop	{r4, pc}
 80284b4:	2002      	movs	r0, #2
 80284b6:	e7fb      	b.n	80284b0 <Model_SendResponse+0x18>
 80284b8:	20002508 	.word	0x20002508

080284bc <MobleLibraryGenericSendData>:
 80284bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80284c0:	4607      	mov	r7, r0
 80284c2:	20a7      	movs	r0, #167	; 0xa7
 80284c4:	4616      	mov	r6, r2
 80284c6:	468a      	mov	sl, r1
 80284c8:	4699      	mov	r9, r3
 80284ca:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80284ce:	f7f2 fcd1 	bl	801ae74 <MobleMemAlloc>
 80284d2:	4605      	mov	r5, r0
 80284d4:	f108 0020 	add.w	r0, r8, #32
 80284d8:	f7f2 fccc 	bl	801ae74 <MobleMemAlloc>
 80284dc:	683b      	ldr	r3, [r7, #0]
 80284de:	f8a0 a008 	strh.w	sl, [r0, #8]
 80284e2:	885a      	ldrh	r2, [r3, #2]
 80284e4:	4416      	add	r6, r2
 80284e6:	8146      	strh	r6, [r0, #10]
 80284e8:	2600      	movs	r6, #0
 80284ea:	4604      	mov	r4, r0
 80284ec:	7406      	strb	r6, [r0, #16]
 80284ee:	7306      	strb	r6, [r0, #12]
 80284f0:	8246      	strh	r6, [r0, #18]
 80284f2:	81c6      	strh	r6, [r0, #14]
 80284f4:	b1e5      	cbz	r5, 8028530 <MobleLibraryGenericSendData+0x74>
 80284f6:	9908      	ldr	r1, [sp, #32]
 80284f8:	f8c5 9000 	str.w	r9, [r5]
 80284fc:	f8c5 80a3 	str.w	r8, [r5, #163]	; 0xa3
 8028500:	4642      	mov	r2, r8
 8028502:	f105 0008 	add.w	r0, r5, #8
 8028506:	f7f2 fe68 	bl	801b1da <MobleOutputStreamPutArray>
 802850a:	f1b8 0f9a 	cmp.w	r8, #154	; 0x9a
 802850e:	d811      	bhi.n	8028534 <MobleLibraryGenericSendData+0x78>
 8028510:	4631      	mov	r1, r6
 8028512:	462b      	mov	r3, r5
 8028514:	4622      	mov	r2, r4
 8028516:	4638      	mov	r0, r7
 8028518:	f7fa facc 	bl	8022ab4 <MobleModelSendPacket>
 802851c:	4606      	mov	r6, r0
 802851e:	4628      	mov	r0, r5
 8028520:	f7f2 fd32 	bl	801af88 <MobleMemFree>
 8028524:	4620      	mov	r0, r4
 8028526:	f7f2 fd2f 	bl	801af88 <MobleMemFree>
 802852a:	4630      	mov	r0, r6
 802852c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028530:	2604      	movs	r6, #4
 8028532:	e7f4      	b.n	802851e <MobleLibraryGenericSendData+0x62>
 8028534:	2602      	movs	r6, #2
 8028536:	e7f2      	b.n	802851e <MobleLibraryGenericSendData+0x62>

08028538 <BLEMesh_SetRemoteData>:
 8028538:	b5f0      	push	{r4, r5, r6, r7, lr}
 802853a:	f89d e01c 	ldrb.w	lr, [sp, #28]
 802853e:	9f05      	ldr	r7, [sp, #20]
 8028540:	f89d c018 	ldrb.w	ip, [sp, #24]
 8028544:	f1be 0f01 	cmp.w	lr, #1
 8028548:	d106      	bne.n	8028558 <BLEMesh_SetRemoteData+0x20>
 802854a:	f8cd c018 	str.w	ip, [sp, #24]
 802854e:	b2d2      	uxtb	r2, r2
 8028550:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8028554:	f7fd b900 	b.w	8025758 <MobleLibrarySendData>
 8028558:	e9cd 7c06 	strd	r7, ip, [sp, #24]
 802855c:	9305      	str	r3, [sp, #20]
 802855e:	4613      	mov	r3, r2
 8028560:	460a      	mov	r2, r1
 8028562:	4601      	mov	r1, r0
 8028564:	4803      	ldr	r0, [pc, #12]	; (8028574 <BLEMesh_SetRemoteData+0x3c>)
 8028566:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802856a:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	; 0x6f0
 802856e:	f7ff bfa5 	b.w	80284bc <MobleLibraryGenericSendData>
 8028572:	bf00      	nop
 8028574:	20002508 	.word	0x20002508

08028578 <MobleLibraryGenericSendRemoteData>:
 8028578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802857c:	4698      	mov	r8, r3
 802857e:	6803      	ldr	r3, [r0, #0]
 8028580:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8028582:	4691      	mov	r9, r2
 8028584:	4606      	mov	r6, r0
 8028586:	460a      	mov	r2, r1
 8028588:	7f18      	ldrb	r0, [r3, #28]
 802858a:	4649      	mov	r1, r9
 802858c:	f7f2 f850 	bl	801a630 <MoblePalCrypto_GetModelPublicationParameters>
 8028590:	8883      	ldrh	r3, [r0, #4]
 8028592:	4605      	mov	r5, r0
 8028594:	2b00      	cmp	r3, #0
 8028596:	d042      	beq.n	802861e <MobleLibraryGenericSendRemoteData+0xa6>
 8028598:	f107 0020 	add.w	r0, r7, #32
 802859c:	f7f2 fc6a 	bl	801ae74 <MobleMemAlloc>
 80285a0:	4604      	mov	r4, r0
 80285a2:	b950      	cbnz	r0, 80285ba <MobleLibraryGenericSendRemoteData+0x42>
 80285a4:	2500      	movs	r5, #0
 80285a6:	2604      	movs	r6, #4
 80285a8:	4628      	mov	r0, r5
 80285aa:	f7f2 fced 	bl	801af88 <MobleMemFree>
 80285ae:	4620      	mov	r0, r4
 80285b0:	f7f2 fcea 	bl	801af88 <MobleMemFree>
 80285b4:	4630      	mov	r0, r6
 80285b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80285ba:	2220      	movs	r2, #32
 80285bc:	2100      	movs	r1, #0
 80285be:	f000 faff 	bl	8028bc0 <memset>
 80285c2:	f8a4 900a 	strh.w	r9, [r4, #10]
 80285c6:	f8b5 9006 	ldrh.w	r9, [r5, #6]
 80285ca:	88ab      	ldrh	r3, [r5, #4]
 80285cc:	8123      	strh	r3, [r4, #8]
 80285ce:	f8a4 900e 	strh.w	r9, [r4, #14]
 80285d2:	4648      	mov	r0, r9
 80285d4:	f7f1 fc10 	bl	8019df8 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 80285d8:	8260      	strh	r0, [r4, #18]
 80285da:	f7f2 f86d 	bl	801a6b8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80285de:	7420      	strb	r0, [r4, #16]
 80285e0:	4648      	mov	r0, r9
 80285e2:	f7f2 f883 	bl	801a6ec <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 80285e6:	7320      	strb	r0, [r4, #12]
 80285e8:	20a7      	movs	r0, #167	; 0xa7
 80285ea:	f7f2 fc43 	bl	801ae74 <MobleMemAlloc>
 80285ee:	4605      	mov	r5, r0
 80285f0:	2800      	cmp	r0, #0
 80285f2:	d0d7      	beq.n	80285a4 <MobleLibraryGenericSendRemoteData+0x2c>
 80285f4:	f8c0 8000 	str.w	r8, [r0]
 80285f8:	f8c0 70a3 	str.w	r7, [r0, #163]	; 0xa3
 80285fc:	9908      	ldr	r1, [sp, #32]
 80285fe:	463a      	mov	r2, r7
 8028600:	3008      	adds	r0, #8
 8028602:	f7f2 fdea 	bl	801b1da <MobleOutputStreamPutArray>
 8028606:	2f9a      	cmp	r7, #154	; 0x9a
 8028608:	d807      	bhi.n	802861a <MobleLibraryGenericSendRemoteData+0xa2>
 802860a:	4630      	mov	r0, r6
 802860c:	462b      	mov	r3, r5
 802860e:	4622      	mov	r2, r4
 8028610:	2100      	movs	r1, #0
 8028612:	f7fa fa4f 	bl	8022ab4 <MobleModelSendPacket>
 8028616:	4606      	mov	r6, r0
 8028618:	e7c6      	b.n	80285a8 <MobleLibraryGenericSendRemoteData+0x30>
 802861a:	2602      	movs	r6, #2
 802861c:	e7c4      	b.n	80285a8 <MobleLibraryGenericSendRemoteData+0x30>
 802861e:	2602      	movs	r6, #2
 8028620:	e7c8      	b.n	80285b4 <MobleLibraryGenericSendRemoteData+0x3c>
	...

08028624 <BLEMesh_SetRemotePublication>:
 8028624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028626:	f89d e01c 	ldrb.w	lr, [sp, #28]
 802862a:	9f05      	ldr	r7, [sp, #20]
 802862c:	f89d c018 	ldrb.w	ip, [sp, #24]
 8028630:	f1be 0f01 	cmp.w	lr, #1
 8028634:	d106      	bne.n	8028644 <BLEMesh_SetRemotePublication+0x20>
 8028636:	f8cd c018 	str.w	ip, [sp, #24]
 802863a:	b2d2      	uxtb	r2, r2
 802863c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8028640:	f7fd b92a 	b.w	8025898 <MobleLibrarySendRemoteData>
 8028644:	e9cd 7c06 	strd	r7, ip, [sp, #24]
 8028648:	9305      	str	r3, [sp, #20]
 802864a:	4613      	mov	r3, r2
 802864c:	460a      	mov	r2, r1
 802864e:	4601      	mov	r1, r0
 8028650:	4803      	ldr	r0, [pc, #12]	; (8028660 <BLEMesh_SetRemotePublication+0x3c>)
 8028652:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8028656:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	; 0x6f0
 802865a:	f7ff bf8d 	b.w	8028578 <MobleLibraryGenericSendRemoteData>
 802865e:	bf00      	nop
 8028660:	20002508 	.word	0x20002508

08028664 <Test_UpperTester_ProcessData>:
 8028664:	4b05      	ldr	r3, [pc, #20]	; (802867c <Test_UpperTester_ProcessData+0x18>)
 8028666:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 802866a:	b410      	push	{r4}
 802866c:	460c      	mov	r4, r1
 802866e:	4620      	mov	r0, r4
 8028670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8028674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028678:	4611      	mov	r1, r2
 802867a:	4718      	bx	r3
 802867c:	0803255c 	.word	0x0803255c

08028680 <MobleUpperTesterDataProcess>:
 8028680:	4b02      	ldr	r3, [pc, #8]	; (802868c <MobleUpperTesterDataProcess+0xc>)
 8028682:	460a      	mov	r2, r1
 8028684:	f8d3 16f0 	ldr.w	r1, [r3, #1776]	; 0x6f0
 8028688:	f7ff bfec 	b.w	8028664 <Test_UpperTester_ProcessData>
 802868c:	20002508 	.word	0x20002508

08028690 <BLEMesh_UpperTesterDataProcess>:
 8028690:	f7ff bff6 	b.w	8028680 <MobleUpperTesterDataProcess>

08028694 <Test_Upper_Tester_PrintStringCb>:
 8028694:	b40f      	push	{r0, r1, r2, r3}
 8028696:	b004      	add	sp, #16
 8028698:	4770      	bx	lr
	...

0802869c <Test_UpperTester_Print01>:
 802869c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286a0:	4605      	mov	r5, r0
 80286a2:	485a      	ldr	r0, [pc, #360]	; (802880c <Test_UpperTester_Print01+0x170>)
 80286a4:	f7ff fff6 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 80286a8:	682b      	ldr	r3, [r5, #0]
 80286aa:	781b      	ldrb	r3, [r3, #0]
 80286ac:	2b00      	cmp	r3, #0
 80286ae:	d038      	beq.n	8028722 <Test_UpperTester_Print01+0x86>
 80286b0:	4857      	ldr	r0, [pc, #348]	; (8028810 <Test_UpperTester_Print01+0x174>)
 80286b2:	4f58      	ldr	r7, [pc, #352]	; (8028814 <Test_UpperTester_Print01+0x178>)
 80286b4:	f7ff ffee 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 80286b8:	682b      	ldr	r3, [r5, #0]
 80286ba:	885b      	ldrh	r3, [r3, #2]
 80286bc:	f88d 3005 	strb.w	r3, [sp, #5]
 80286c0:	0a1a      	lsrs	r2, r3, #8
 80286c2:	2102      	movs	r1, #2
 80286c4:	a801      	add	r0, sp, #4
 80286c6:	f88d 2004 	strb.w	r2, [sp, #4]
 80286ca:	f7e9 ffc9 	bl	8012660 <BLEMesh_PrintDataCb>
 80286ce:	f04f 0a00 	mov.w	sl, #0
 80286d2:	f207 4824 	addw	r8, r7, #1060	; 0x424
 80286d6:	682b      	ldr	r3, [r5, #0]
 80286d8:	6a1b      	ldr	r3, [r3, #32]
 80286da:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 80286de:	fa5f f48a 	uxtb.w	r4, sl
 80286e2:	42a3      	cmp	r3, r4
 80286e4:	d81f      	bhi.n	8028726 <Test_UpperTester_Print01+0x8a>
 80286e6:	f8df a154 	ldr.w	sl, [pc, #340]	; 802883c <Test_UpperTester_Print01+0x1a0>
 80286ea:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8028840 <Test_UpperTester_Print01+0x1a4>
 80286ee:	f04f 0800 	mov.w	r8, #0
 80286f2:	682b      	ldr	r3, [r5, #0]
 80286f4:	6a1b      	ldr	r3, [r3, #32]
 80286f6:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 80286fa:	fa5f f488 	uxtb.w	r4, r8
 80286fe:	42a3      	cmp	r3, r4
 8028700:	d85b      	bhi.n	80287ba <Test_UpperTester_Print01+0x11e>
 8028702:	4845      	ldr	r0, [pc, #276]	; (8028818 <Test_UpperTester_Print01+0x17c>)
 8028704:	f7ff ffc6 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 8028708:	4844      	ldr	r0, [pc, #272]	; (802881c <Test_UpperTester_Print01+0x180>)
 802870a:	2110      	movs	r1, #16
 802870c:	f7e9 ffa8 	bl	8012660 <BLEMesh_PrintDataCb>
 8028710:	f8d7 1658 	ldr.w	r1, [r7, #1624]	; 0x658
 8028714:	4842      	ldr	r0, [pc, #264]	; (8028820 <Test_UpperTester_Print01+0x184>)
 8028716:	f7ff ffbd 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 802871a:	2000      	movs	r0, #0
 802871c:	b003      	add	sp, #12
 802871e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028722:	4840      	ldr	r0, [pc, #256]	; (8028824 <Test_UpperTester_Print01+0x188>)
 8028724:	e7c5      	b.n	80286b2 <Test_UpperTester_Print01+0x16>
 8028726:	267c      	movs	r6, #124	; 0x7c
 8028728:	fb06 7904 	mla	r9, r6, r4, r7
 802872c:	483e      	ldr	r0, [pc, #248]	; (8028828 <Test_UpperTester_Print01+0x18c>)
 802872e:	4621      	mov	r1, r4
 8028730:	f7ff ffb0 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 8028734:	f899 3445 	ldrb.w	r3, [r9, #1093]	; 0x445
 8028738:	2b01      	cmp	r3, #1
 802873a:	bf0c      	ite	eq
 802873c:	4620      	moveq	r0, r4
 802873e:	2000      	movne	r0, #0
 8028740:	b200      	sxth	r0, r0
 8028742:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8028746:	2110      	movs	r1, #16
 8028748:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 802874c:	f7e9 ff88 	bl	8012660 <BLEMesh_PrintDataCb>
 8028750:	4836      	ldr	r0, [pc, #216]	; (802882c <Test_UpperTester_Print01+0x190>)
 8028752:	4621      	mov	r1, r4
 8028754:	f7ff ff9e 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 8028758:	f899 3445 	ldrb.w	r3, [r9, #1093]	; 0x445
 802875c:	2b01      	cmp	r3, #1
 802875e:	bf0c      	ite	eq
 8028760:	4620      	moveq	r0, r4
 8028762:	2000      	movne	r0, #0
 8028764:	233c      	movs	r3, #60	; 0x3c
 8028766:	fb16 3000 	smlabb	r0, r6, r0, r3
 802876a:	2110      	movs	r1, #16
 802876c:	4440      	add	r0, r8
 802876e:	f7e9 ff77 	bl	8012660 <BLEMesh_PrintDataCb>
 8028772:	482f      	ldr	r0, [pc, #188]	; (8028830 <Test_UpperTester_Print01+0x194>)
 8028774:	4621      	mov	r1, r4
 8028776:	f7ff ff8d 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 802877a:	f899 3445 	ldrb.w	r3, [r9, #1093]	; 0x445
 802877e:	2b01      	cmp	r3, #1
 8028780:	bf0c      	ite	eq
 8028782:	4620      	moveq	r0, r4
 8028784:	2000      	movne	r0, #0
 8028786:	2328      	movs	r3, #40	; 0x28
 8028788:	fb16 3000 	smlabb	r0, r6, r0, r3
 802878c:	2108      	movs	r1, #8
 802878e:	4440      	add	r0, r8
 8028790:	f7e9 ff66 	bl	8012660 <BLEMesh_PrintDataCb>
 8028794:	4621      	mov	r1, r4
 8028796:	4827      	ldr	r0, [pc, #156]	; (8028834 <Test_UpperTester_Print01+0x198>)
 8028798:	f7ff ff7c 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 802879c:	f899 3445 	ldrb.w	r3, [r9, #1093]	; 0x445
 80287a0:	2b01      	cmp	r3, #1
 80287a2:	bf18      	it	ne
 80287a4:	2400      	movne	r4, #0
 80287a6:	2038      	movs	r0, #56	; 0x38
 80287a8:	fb16 0004 	smlabb	r0, r6, r4, r0
 80287ac:	2101      	movs	r1, #1
 80287ae:	4440      	add	r0, r8
 80287b0:	f7e9 ff56 	bl	8012660 <BLEMesh_PrintDataCb>
 80287b4:	f10a 0a01 	add.w	sl, sl, #1
 80287b8:	e78d      	b.n	80286d6 <Test_UpperTester_Print01+0x3a>
 80287ba:	262c      	movs	r6, #44	; 0x2c
 80287bc:	fb06 7b04 	mla	fp, r6, r4, r7
 80287c0:	4650      	mov	r0, sl
 80287c2:	4621      	mov	r1, r4
 80287c4:	f7ff ff66 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 80287c8:	f89b 35b8 	ldrb.w	r3, [fp, #1464]	; 0x5b8
 80287cc:	2b01      	cmp	r3, #1
 80287ce:	bf0c      	ite	eq
 80287d0:	4620      	moveq	r0, r4
 80287d2:	2000      	movne	r0, #0
 80287d4:	f44f 73cc 	mov.w	r3, #408	; 0x198
 80287d8:	fb16 3000 	smlabb	r0, r6, r0, r3
 80287dc:	2101      	movs	r1, #1
 80287de:	4448      	add	r0, r9
 80287e0:	f7e9 ff3e 	bl	8012660 <BLEMesh_PrintDataCb>
 80287e4:	4621      	mov	r1, r4
 80287e6:	4814      	ldr	r0, [pc, #80]	; (8028838 <Test_UpperTester_Print01+0x19c>)
 80287e8:	f7ff ff54 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 80287ec:	f89b 35b8 	ldrb.w	r3, [fp, #1464]	; 0x5b8
 80287f0:	2b01      	cmp	r3, #1
 80287f2:	bf18      	it	ne
 80287f4:	2400      	movne	r4, #0
 80287f6:	f44f 70ba 	mov.w	r0, #372	; 0x174
 80287fa:	fb16 0004 	smlabb	r0, r6, r4, r0
 80287fe:	2110      	movs	r1, #16
 8028800:	4448      	add	r0, r9
 8028802:	f7e9 ff2d 	bl	8012660 <BLEMesh_PrintDataCb>
 8028806:	f108 0801 	add.w	r8, r8, #1
 802880a:	e772      	b.n	80286f2 <Test_UpperTester_Print01+0x56>
 802880c:	08033ce8 	.word	0x08033ce8
 8028810:	08033d07 	.word	0x08033d07
 8028814:	20001410 	.word	0x20001410
 8028818:	08033dd9 	.word	0x08033dd9
 802881c:	20001a30 	.word	0x20001a30
 8028820:	08033de2 	.word	0x08033de2
 8028824:	08033d2c 	.word	0x08033d2c
 8028828:	08033d53 	.word	0x08033d53
 802882c:	08033d6c 	.word	0x08033d6c
 8028830:	08033d88 	.word	0x08033d88
 8028834:	08033da0 	.word	0x08033da0
 8028838:	08033dc4 	.word	0x08033dc4
 802883c:	08033db2 	.word	0x08033db2
 8028840:	20001834 	.word	0x20001834

08028844 <Test_UpperTester_Set15>:
 8028844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028846:	6803      	ldr	r3, [r0, #0]
 8028848:	2400      	movs	r4, #0
 802884a:	7f1f      	ldrb	r7, [r3, #28]
 802884c:	4605      	mov	r5, r0
 802884e:	4626      	mov	r6, r4
 8028850:	b2e3      	uxtb	r3, r4
 8028852:	429f      	cmp	r7, r3
 8028854:	d801      	bhi.n	802885a <Test_UpperTester_Set15+0x16>
 8028856:	2000      	movs	r0, #0
 8028858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802885a:	682b      	ldr	r3, [r5, #0]
 802885c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8028860:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8028862:	f101 0380 	add.w	r3, r1, #128	; 0x80
 8028866:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
 802886a:	f853 2c08 	ldr.w	r2, [r3, #-8]
 802886e:	b1aa      	cbz	r2, 802889c <Test_UpperTester_Set15+0x58>
 8028870:	4618      	mov	r0, r3
 8028872:	2200      	movs	r2, #0
 8028874:	f830 cb02 	ldrh.w	ip, [r0], #2
 8028878:	f1bc 0f00 	cmp.w	ip, #0
 802887c:	d005      	beq.n	802888a <Test_UpperTester_Set15+0x46>
 802887e:	3201      	adds	r2, #1
 8028880:	b2d2      	uxtb	r2, r2
 8028882:	2a0a      	cmp	r2, #10
 8028884:	f820 6c02 	strh.w	r6, [r0, #-2]
 8028888:	d1f4      	bne.n	8028874 <Test_UpperTester_Set15+0x30>
 802888a:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 802888e:	b10a      	cbz	r2, 8028894 <Test_UpperTester_Set15+0x50>
 8028890:	f823 6c04 	strh.w	r6, [r3, #-4]
 8028894:	3338      	adds	r3, #56	; 0x38
 8028896:	428b      	cmp	r3, r1
 8028898:	d1e7      	bne.n	802886a <Test_UpperTester_Set15+0x26>
 802889a:	e005      	b.n	80288a8 <Test_UpperTester_Set15+0x64>
 802889c:	4803      	ldr	r0, [pc, #12]	; (80288ac <Test_UpperTester_Set15+0x68>)
 802889e:	f7ff fef9 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 80288a2:	4803      	ldr	r0, [pc, #12]	; (80288b0 <Test_UpperTester_Set15+0x6c>)
 80288a4:	f7ff fef6 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 80288a8:	3401      	adds	r4, #1
 80288aa:	e7d1      	b.n	8028850 <Test_UpperTester_Set15+0xc>
 80288ac:	08033df2 	.word	0x08033df2
 80288b0:	08033e0b 	.word	0x08033e0b

080288b4 <Test_UpperTester_Set13>:
 80288b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80288b8:	4b37      	ldr	r3, [pc, #220]	; (8028998 <Test_UpperTester_Set13+0xe4>)
 80288ba:	f893 961c 	ldrb.w	r9, [r3, #1564]	; 0x61c
 80288be:	f893 761d 	ldrb.w	r7, [r3, #1565]	; 0x61d
 80288c2:	4604      	mov	r4, r0
 80288c4:	f1b9 0f00 	cmp.w	r9, #0
 80288c8:	d061      	beq.n	802898e <Test_UpperTester_Set13+0xda>
 80288ca:	2500      	movs	r5, #0
 80288cc:	f04f 087c 	mov.w	r8, #124	; 0x7c
 80288d0:	46ab      	mov	fp, r5
 80288d2:	f04f 0a10 	mov.w	sl, #16
 80288d6:	6823      	ldr	r3, [r4, #0]
 80288d8:	1c6e      	adds	r6, r5, #1
 80288da:	6a1b      	ldr	r3, [r3, #32]
 80288dc:	b2f6      	uxtb	r6, r6
 80288de:	fb08 3206 	mla	r2, r8, r6, r3
 80288e2:	ebc6 1046 	rsb	r0, r6, r6, lsl #5
 80288e6:	f882 b021 	strb.w	fp, [r2, #33]	; 0x21
 80288ea:	fb08 3205 	mla	r2, r8, r5, r3
 80288ee:	2100      	movs	r1, #0
 80288f0:	f882 b022 	strb.w	fp, [r2, #34]	; 0x22
 80288f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80288f8:	2210      	movs	r2, #16
 80288fa:	f000 f961 	bl	8028bc0 <memset>
 80288fe:	6822      	ldr	r2, [r4, #0]
 8028900:	6a10      	ldr	r0, [r2, #32]
 8028902:	fb18 a305 	smlabb	r3, r8, r5, sl
 8028906:	2210      	movs	r2, #16
 8028908:	2100      	movs	r1, #0
 802890a:	4418      	add	r0, r3
 802890c:	f000 f958 	bl	8028bc0 <memset>
 8028910:	2d00      	cmp	r5, #0
 8028912:	d03a      	beq.n	802898a <Test_UpperTester_Set13+0xd6>
 8028914:	6823      	ldr	r3, [r4, #0]
 8028916:	6a1a      	ldr	r2, [r3, #32]
 8028918:	f892 31f8 	ldrb.w	r3, [r2, #504]	; 0x1f8
 802891c:	3b01      	subs	r3, #1
 802891e:	f882 31f8 	strb.w	r3, [r2, #504]	; 0x1f8
 8028922:	4635      	mov	r5, r6
 8028924:	454d      	cmp	r5, r9
 8028926:	d3d6      	bcc.n	80288d6 <Test_UpperTester_Set13+0x22>
 8028928:	481c      	ldr	r0, [pc, #112]	; (802899c <Test_UpperTester_Set13+0xe8>)
 802892a:	f7ff feb3 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 802892e:	b387      	cbz	r7, 8028992 <Test_UpperTester_Set13+0xde>
 8028930:	2500      	movs	r5, #0
 8028932:	f44f 76ba 	mov.w	r6, #372	; 0x174
 8028936:	f04f 092c 	mov.w	r9, #44	; 0x2c
 802893a:	46a8      	mov	r8, r5
 802893c:	6823      	ldr	r3, [r4, #0]
 802893e:	6a18      	ldr	r0, [r3, #32]
 8028940:	fb09 0305 	mla	r3, r9, r5, r0
 8028944:	2210      	movs	r2, #16
 8028946:	f8a3 8194 	strh.w	r8, [r3, #404]	; 0x194
 802894a:	2100      	movs	r1, #0
 802894c:	4430      	add	r0, r6
 802894e:	f000 f937 	bl	8028bc0 <memset>
 8028952:	6822      	ldr	r2, [r4, #0]
 8028954:	6a10      	ldr	r0, [r2, #32]
 8028956:	f106 0310 	add.w	r3, r6, #16
 802895a:	2210      	movs	r2, #16
 802895c:	4418      	add	r0, r3
 802895e:	2100      	movs	r1, #0
 8028960:	f000 f92e 	bl	8028bc0 <memset>
 8028964:	6823      	ldr	r3, [r4, #0]
 8028966:	6a1a      	ldr	r2, [r3, #32]
 8028968:	f892 31f9 	ldrb.w	r3, [r2, #505]	; 0x1f9
 802896c:	3501      	adds	r5, #1
 802896e:	3b01      	subs	r3, #1
 8028970:	f882 31f9 	strb.w	r3, [r2, #505]	; 0x1f9
 8028974:	b2eb      	uxtb	r3, r5
 8028976:	429f      	cmp	r7, r3
 8028978:	f106 062c 	add.w	r6, r6, #44	; 0x2c
 802897c:	d8de      	bhi.n	802893c <Test_UpperTester_Set13+0x88>
 802897e:	4808      	ldr	r0, [pc, #32]	; (80289a0 <Test_UpperTester_Set13+0xec>)
 8028980:	f7ff fe88 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 8028984:	2000      	movs	r0, #0
 8028986:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802898a:	2501      	movs	r5, #1
 802898c:	e7ca      	b.n	8028924 <Test_UpperTester_Set13+0x70>
 802898e:	4805      	ldr	r0, [pc, #20]	; (80289a4 <Test_UpperTester_Set13+0xf0>)
 8028990:	e7cb      	b.n	802892a <Test_UpperTester_Set13+0x76>
 8028992:	4805      	ldr	r0, [pc, #20]	; (80289a8 <Test_UpperTester_Set13+0xf4>)
 8028994:	e7f4      	b.n	8028980 <Test_UpperTester_Set13+0xcc>
 8028996:	bf00      	nop
 8028998:	20001410 	.word	0x20001410
 802899c:	08033e25 	.word	0x08033e25
 80289a0:	08033e5a 	.word	0x08033e5a
 80289a4:	08033e40 	.word	0x08033e40
 80289a8:	08033e75 	.word	0x08033e75

080289ac <Test_UpperTester_Set05>:
 80289ac:	b508      	push	{r3, lr}
 80289ae:	780b      	ldrb	r3, [r1, #0]
 80289b0:	2b30      	cmp	r3, #48	; 0x30
 80289b2:	d108      	bne.n	80289c6 <Test_UpperTester_Set05+0x1a>
 80289b4:	480c      	ldr	r0, [pc, #48]	; (80289e8 <Test_UpperTester_Set05+0x3c>)
 80289b6:	f7ff fe6d 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 80289ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80289be:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80289c2:	f7f5 bb11 	b.w	801dfe8 <BnrgmFrndMgmtSubscriptionListRemove>
 80289c6:	2b31      	cmp	r3, #49	; 0x31
 80289c8:	d108      	bne.n	80289dc <Test_UpperTester_Set05+0x30>
 80289ca:	4808      	ldr	r0, [pc, #32]	; (80289ec <Test_UpperTester_Set05+0x40>)
 80289cc:	f7ff fe62 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 80289d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80289d4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80289d8:	f7f5 ba02 	b.w	801dde0 <BnrgmFrndMgmtSubscriptionListAdd>
 80289dc:	4804      	ldr	r0, [pc, #16]	; (80289f0 <Test_UpperTester_Set05+0x44>)
 80289de:	f7ff fe59 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 80289e2:	2003      	movs	r0, #3
 80289e4:	bd08      	pop	{r3, pc}
 80289e6:	bf00      	nop
 80289e8:	08033e8f 	.word	0x08033e8f
 80289ec:	08033ea4 	.word	0x08033ea4
 80289f0:	08033eb7 	.word	0x08033eb7

080289f4 <Test_UpperTester_Set03>:
 80289f4:	780b      	ldrb	r3, [r1, #0]
 80289f6:	2b30      	cmp	r3, #48	; 0x30
 80289f8:	b510      	push	{r4, lr}
 80289fa:	4604      	mov	r4, r0
 80289fc:	d107      	bne.n	8028a0e <Test_UpperTester_Set03+0x1a>
 80289fe:	2301      	movs	r3, #1
 8028a00:	f880 32ac 	strb.w	r3, [r0, #684]	; 0x2ac
 8028a04:	4809      	ldr	r0, [pc, #36]	; (8028a2c <Test_UpperTester_Set03+0x38>)
 8028a06:	f7ff fe45 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 8028a0a:	2000      	movs	r0, #0
 8028a0c:	bd10      	pop	{r4, pc}
 8028a0e:	2b31      	cmp	r3, #49	; 0x31
 8028a10:	d106      	bne.n	8028a20 <Test_UpperTester_Set03+0x2c>
 8028a12:	4806      	ldr	r0, [pc, #24]	; (8028a2c <Test_UpperTester_Set03+0x38>)
 8028a14:	f7ff fe3e 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 8028a18:	2300      	movs	r3, #0
 8028a1a:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
 8028a1e:	e7f4      	b.n	8028a0a <Test_UpperTester_Set03+0x16>
 8028a20:	4803      	ldr	r0, [pc, #12]	; (8028a30 <Test_UpperTester_Set03+0x3c>)
 8028a22:	f7ff fe37 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 8028a26:	2003      	movs	r0, #3
 8028a28:	e7f0      	b.n	8028a0c <Test_UpperTester_Set03+0x18>
 8028a2a:	bf00      	nop
 8028a2c:	08033eca 	.word	0x08033eca
 8028a30:	08033eb7 	.word	0x08033eb7

08028a34 <Test_UpperTester_Set02>:
 8028a34:	b510      	push	{r4, lr}
 8028a36:	f7f8 fab3 	bl	8020fa0 <MobleStackConfigInvalidate>
 8028a3a:	4604      	mov	r4, r0
 8028a3c:	b930      	cbnz	r0, 8028a4c <Test_UpperTester_Set02+0x18>
 8028a3e:	f7f6 fda5 	bl	801f58c <MoblePalBluetoothGracefulReset>
 8028a42:	4806      	ldr	r0, [pc, #24]	; (8028a5c <Test_UpperTester_Set02+0x28>)
 8028a44:	f7ff fe26 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 8028a48:	4620      	mov	r0, r4
 8028a4a:	bd10      	pop	{r4, pc}
 8028a4c:	2801      	cmp	r0, #1
 8028a4e:	d1fb      	bne.n	8028a48 <Test_UpperTester_Set02+0x14>
 8028a50:	4803      	ldr	r0, [pc, #12]	; (8028a60 <Test_UpperTester_Set02+0x2c>)
 8028a52:	f7ff fe1f 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 8028a56:	2400      	movs	r4, #0
 8028a58:	e7f6      	b.n	8028a48 <Test_UpperTester_Set02+0x14>
 8028a5a:	bf00      	nop
 8028a5c:	08033eec 	.word	0x08033eec
 8028a60:	08033f0e 	.word	0x08033f0e

08028a64 <Test_UpperTester_Set01>:
 8028a64:	b508      	push	{r3, lr}
 8028a66:	4809      	ldr	r0, [pc, #36]	; (8028a8c <Test_UpperTester_Set01+0x28>)
 8028a68:	f7ff fe14 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 8028a6c:	4808      	ldr	r0, [pc, #32]	; (8028a90 <Test_UpperTester_Set01+0x2c>)
 8028a6e:	f7ff fe11 	bl	8028694 <Test_Upper_Tester_PrintStringCb>
 8028a72:	f3bf 8f4f 	dsb	sy
 8028a76:	4907      	ldr	r1, [pc, #28]	; (8028a94 <Test_UpperTester_Set01+0x30>)
 8028a78:	4b07      	ldr	r3, [pc, #28]	; (8028a98 <Test_UpperTester_Set01+0x34>)
 8028a7a:	68ca      	ldr	r2, [r1, #12]
 8028a7c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8028a80:	4313      	orrs	r3, r2
 8028a82:	60cb      	str	r3, [r1, #12]
 8028a84:	f3bf 8f4f 	dsb	sy
 8028a88:	bf00      	nop
 8028a8a:	e7fd      	b.n	8028a88 <Test_UpperTester_Set01+0x24>
 8028a8c:	08033f2b 	.word	0x08033f2b
 8028a90:	08033f39 	.word	0x08033f39
 8028a94:	e000ed00 	.word	0xe000ed00
 8028a98:	05fa0004 	.word	0x05fa0004

08028a9c <__assert_func>:
 8028a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028a9e:	4614      	mov	r4, r2
 8028aa0:	461a      	mov	r2, r3
 8028aa2:	4b09      	ldr	r3, [pc, #36]	; (8028ac8 <__assert_func+0x2c>)
 8028aa4:	681b      	ldr	r3, [r3, #0]
 8028aa6:	4605      	mov	r5, r0
 8028aa8:	68d8      	ldr	r0, [r3, #12]
 8028aaa:	b14c      	cbz	r4, 8028ac0 <__assert_func+0x24>
 8028aac:	4b07      	ldr	r3, [pc, #28]	; (8028acc <__assert_func+0x30>)
 8028aae:	9100      	str	r1, [sp, #0]
 8028ab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028ab4:	4906      	ldr	r1, [pc, #24]	; (8028ad0 <__assert_func+0x34>)
 8028ab6:	462b      	mov	r3, r5
 8028ab8:	f000 f814 	bl	8028ae4 <fiprintf>
 8028abc:	f001 f832 	bl	8029b24 <abort>
 8028ac0:	4b04      	ldr	r3, [pc, #16]	; (8028ad4 <__assert_func+0x38>)
 8028ac2:	461c      	mov	r4, r3
 8028ac4:	e7f3      	b.n	8028aae <__assert_func+0x12>
 8028ac6:	bf00      	nop
 8028ac8:	200000cc 	.word	0x200000cc
 8028acc:	08033f4a 	.word	0x08033f4a
 8028ad0:	08033f57 	.word	0x08033f57
 8028ad4:	08033547 	.word	0x08033547

08028ad8 <__errno>:
 8028ad8:	4b01      	ldr	r3, [pc, #4]	; (8028ae0 <__errno+0x8>)
 8028ada:	6818      	ldr	r0, [r3, #0]
 8028adc:	4770      	bx	lr
 8028ade:	bf00      	nop
 8028ae0:	200000cc 	.word	0x200000cc

08028ae4 <fiprintf>:
 8028ae4:	b40e      	push	{r1, r2, r3}
 8028ae6:	b503      	push	{r0, r1, lr}
 8028ae8:	4601      	mov	r1, r0
 8028aea:	ab03      	add	r3, sp, #12
 8028aec:	4805      	ldr	r0, [pc, #20]	; (8028b04 <fiprintf+0x20>)
 8028aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8028af2:	6800      	ldr	r0, [r0, #0]
 8028af4:	9301      	str	r3, [sp, #4]
 8028af6:	f000 f895 	bl	8028c24 <_vfiprintf_r>
 8028afa:	b002      	add	sp, #8
 8028afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8028b00:	b003      	add	sp, #12
 8028b02:	4770      	bx	lr
 8028b04:	200000cc 	.word	0x200000cc

08028b08 <__libc_init_array>:
 8028b08:	b570      	push	{r4, r5, r6, lr}
 8028b0a:	4d0d      	ldr	r5, [pc, #52]	; (8028b40 <__libc_init_array+0x38>)
 8028b0c:	4c0d      	ldr	r4, [pc, #52]	; (8028b44 <__libc_init_array+0x3c>)
 8028b0e:	1b64      	subs	r4, r4, r5
 8028b10:	10a4      	asrs	r4, r4, #2
 8028b12:	2600      	movs	r6, #0
 8028b14:	42a6      	cmp	r6, r4
 8028b16:	d109      	bne.n	8028b2c <__libc_init_array+0x24>
 8028b18:	4d0b      	ldr	r5, [pc, #44]	; (8028b48 <__libc_init_array+0x40>)
 8028b1a:	4c0c      	ldr	r4, [pc, #48]	; (8028b4c <__libc_init_array+0x44>)
 8028b1c:	f004 fa12 	bl	802cf44 <_init>
 8028b20:	1b64      	subs	r4, r4, r5
 8028b22:	10a4      	asrs	r4, r4, #2
 8028b24:	2600      	movs	r6, #0
 8028b26:	42a6      	cmp	r6, r4
 8028b28:	d105      	bne.n	8028b36 <__libc_init_array+0x2e>
 8028b2a:	bd70      	pop	{r4, r5, r6, pc}
 8028b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8028b30:	4798      	blx	r3
 8028b32:	3601      	adds	r6, #1
 8028b34:	e7ee      	b.n	8028b14 <__libc_init_array+0xc>
 8028b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8028b3a:	4798      	blx	r3
 8028b3c:	3601      	adds	r6, #1
 8028b3e:	e7f2      	b.n	8028b26 <__libc_init_array+0x1e>
 8028b40:	08034380 	.word	0x08034380
 8028b44:	08034380 	.word	0x08034380
 8028b48:	08034380 	.word	0x08034380
 8028b4c:	08034384 	.word	0x08034384

08028b50 <memcmp>:
 8028b50:	b510      	push	{r4, lr}
 8028b52:	3901      	subs	r1, #1
 8028b54:	4402      	add	r2, r0
 8028b56:	4290      	cmp	r0, r2
 8028b58:	d101      	bne.n	8028b5e <memcmp+0xe>
 8028b5a:	2000      	movs	r0, #0
 8028b5c:	e005      	b.n	8028b6a <memcmp+0x1a>
 8028b5e:	7803      	ldrb	r3, [r0, #0]
 8028b60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8028b64:	42a3      	cmp	r3, r4
 8028b66:	d001      	beq.n	8028b6c <memcmp+0x1c>
 8028b68:	1b18      	subs	r0, r3, r4
 8028b6a:	bd10      	pop	{r4, pc}
 8028b6c:	3001      	adds	r0, #1
 8028b6e:	e7f2      	b.n	8028b56 <memcmp+0x6>

08028b70 <memcpy>:
 8028b70:	440a      	add	r2, r1
 8028b72:	4291      	cmp	r1, r2
 8028b74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8028b78:	d100      	bne.n	8028b7c <memcpy+0xc>
 8028b7a:	4770      	bx	lr
 8028b7c:	b510      	push	{r4, lr}
 8028b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028b86:	4291      	cmp	r1, r2
 8028b88:	d1f9      	bne.n	8028b7e <memcpy+0xe>
 8028b8a:	bd10      	pop	{r4, pc}

08028b8c <memmove>:
 8028b8c:	4288      	cmp	r0, r1
 8028b8e:	b510      	push	{r4, lr}
 8028b90:	eb01 0402 	add.w	r4, r1, r2
 8028b94:	d902      	bls.n	8028b9c <memmove+0x10>
 8028b96:	4284      	cmp	r4, r0
 8028b98:	4623      	mov	r3, r4
 8028b9a:	d807      	bhi.n	8028bac <memmove+0x20>
 8028b9c:	1e43      	subs	r3, r0, #1
 8028b9e:	42a1      	cmp	r1, r4
 8028ba0:	d008      	beq.n	8028bb4 <memmove+0x28>
 8028ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8028ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8028baa:	e7f8      	b.n	8028b9e <memmove+0x12>
 8028bac:	4402      	add	r2, r0
 8028bae:	4601      	mov	r1, r0
 8028bb0:	428a      	cmp	r2, r1
 8028bb2:	d100      	bne.n	8028bb6 <memmove+0x2a>
 8028bb4:	bd10      	pop	{r4, pc}
 8028bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8028bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8028bbe:	e7f7      	b.n	8028bb0 <memmove+0x24>

08028bc0 <memset>:
 8028bc0:	4402      	add	r2, r0
 8028bc2:	4603      	mov	r3, r0
 8028bc4:	4293      	cmp	r3, r2
 8028bc6:	d100      	bne.n	8028bca <memset+0xa>
 8028bc8:	4770      	bx	lr
 8028bca:	f803 1b01 	strb.w	r1, [r3], #1
 8028bce:	e7f9      	b.n	8028bc4 <memset+0x4>

08028bd0 <__sfputc_r>:
 8028bd0:	6893      	ldr	r3, [r2, #8]
 8028bd2:	3b01      	subs	r3, #1
 8028bd4:	2b00      	cmp	r3, #0
 8028bd6:	b410      	push	{r4}
 8028bd8:	6093      	str	r3, [r2, #8]
 8028bda:	da08      	bge.n	8028bee <__sfputc_r+0x1e>
 8028bdc:	6994      	ldr	r4, [r2, #24]
 8028bde:	42a3      	cmp	r3, r4
 8028be0:	db01      	blt.n	8028be6 <__sfputc_r+0x16>
 8028be2:	290a      	cmp	r1, #10
 8028be4:	d103      	bne.n	8028bee <__sfputc_r+0x1e>
 8028be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028bea:	f000 bec9 	b.w	8029980 <__swbuf_r>
 8028bee:	6813      	ldr	r3, [r2, #0]
 8028bf0:	1c58      	adds	r0, r3, #1
 8028bf2:	6010      	str	r0, [r2, #0]
 8028bf4:	7019      	strb	r1, [r3, #0]
 8028bf6:	4608      	mov	r0, r1
 8028bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028bfc:	4770      	bx	lr

08028bfe <__sfputs_r>:
 8028bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028c00:	4606      	mov	r6, r0
 8028c02:	460f      	mov	r7, r1
 8028c04:	4614      	mov	r4, r2
 8028c06:	18d5      	adds	r5, r2, r3
 8028c08:	42ac      	cmp	r4, r5
 8028c0a:	d101      	bne.n	8028c10 <__sfputs_r+0x12>
 8028c0c:	2000      	movs	r0, #0
 8028c0e:	e007      	b.n	8028c20 <__sfputs_r+0x22>
 8028c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028c14:	463a      	mov	r2, r7
 8028c16:	4630      	mov	r0, r6
 8028c18:	f7ff ffda 	bl	8028bd0 <__sfputc_r>
 8028c1c:	1c43      	adds	r3, r0, #1
 8028c1e:	d1f3      	bne.n	8028c08 <__sfputs_r+0xa>
 8028c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028c24 <_vfiprintf_r>:
 8028c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c28:	460d      	mov	r5, r1
 8028c2a:	b09d      	sub	sp, #116	; 0x74
 8028c2c:	4614      	mov	r4, r2
 8028c2e:	4698      	mov	r8, r3
 8028c30:	4606      	mov	r6, r0
 8028c32:	b118      	cbz	r0, 8028c3c <_vfiprintf_r+0x18>
 8028c34:	6983      	ldr	r3, [r0, #24]
 8028c36:	b90b      	cbnz	r3, 8028c3c <_vfiprintf_r+0x18>
 8028c38:	f001 ff22 	bl	802aa80 <__sinit>
 8028c3c:	4b89      	ldr	r3, [pc, #548]	; (8028e64 <_vfiprintf_r+0x240>)
 8028c3e:	429d      	cmp	r5, r3
 8028c40:	d11b      	bne.n	8028c7a <_vfiprintf_r+0x56>
 8028c42:	6875      	ldr	r5, [r6, #4]
 8028c44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028c46:	07d9      	lsls	r1, r3, #31
 8028c48:	d405      	bmi.n	8028c56 <_vfiprintf_r+0x32>
 8028c4a:	89ab      	ldrh	r3, [r5, #12]
 8028c4c:	059a      	lsls	r2, r3, #22
 8028c4e:	d402      	bmi.n	8028c56 <_vfiprintf_r+0x32>
 8028c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028c52:	f001 ffb8 	bl	802abc6 <__retarget_lock_acquire_recursive>
 8028c56:	89ab      	ldrh	r3, [r5, #12]
 8028c58:	071b      	lsls	r3, r3, #28
 8028c5a:	d501      	bpl.n	8028c60 <_vfiprintf_r+0x3c>
 8028c5c:	692b      	ldr	r3, [r5, #16]
 8028c5e:	b9eb      	cbnz	r3, 8028c9c <_vfiprintf_r+0x78>
 8028c60:	4629      	mov	r1, r5
 8028c62:	4630      	mov	r0, r6
 8028c64:	f000 fef0 	bl	8029a48 <__swsetup_r>
 8028c68:	b1c0      	cbz	r0, 8028c9c <_vfiprintf_r+0x78>
 8028c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028c6c:	07dc      	lsls	r4, r3, #31
 8028c6e:	d50e      	bpl.n	8028c8e <_vfiprintf_r+0x6a>
 8028c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8028c74:	b01d      	add	sp, #116	; 0x74
 8028c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c7a:	4b7b      	ldr	r3, [pc, #492]	; (8028e68 <_vfiprintf_r+0x244>)
 8028c7c:	429d      	cmp	r5, r3
 8028c7e:	d101      	bne.n	8028c84 <_vfiprintf_r+0x60>
 8028c80:	68b5      	ldr	r5, [r6, #8]
 8028c82:	e7df      	b.n	8028c44 <_vfiprintf_r+0x20>
 8028c84:	4b79      	ldr	r3, [pc, #484]	; (8028e6c <_vfiprintf_r+0x248>)
 8028c86:	429d      	cmp	r5, r3
 8028c88:	bf08      	it	eq
 8028c8a:	68f5      	ldreq	r5, [r6, #12]
 8028c8c:	e7da      	b.n	8028c44 <_vfiprintf_r+0x20>
 8028c8e:	89ab      	ldrh	r3, [r5, #12]
 8028c90:	0598      	lsls	r0, r3, #22
 8028c92:	d4ed      	bmi.n	8028c70 <_vfiprintf_r+0x4c>
 8028c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028c96:	f001 ff97 	bl	802abc8 <__retarget_lock_release_recursive>
 8028c9a:	e7e9      	b.n	8028c70 <_vfiprintf_r+0x4c>
 8028c9c:	2300      	movs	r3, #0
 8028c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8028ca0:	2320      	movs	r3, #32
 8028ca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8028caa:	2330      	movs	r3, #48	; 0x30
 8028cac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8028e70 <_vfiprintf_r+0x24c>
 8028cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028cb4:	f04f 0901 	mov.w	r9, #1
 8028cb8:	4623      	mov	r3, r4
 8028cba:	469a      	mov	sl, r3
 8028cbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028cc0:	b10a      	cbz	r2, 8028cc6 <_vfiprintf_r+0xa2>
 8028cc2:	2a25      	cmp	r2, #37	; 0x25
 8028cc4:	d1f9      	bne.n	8028cba <_vfiprintf_r+0x96>
 8028cc6:	ebba 0b04 	subs.w	fp, sl, r4
 8028cca:	d00b      	beq.n	8028ce4 <_vfiprintf_r+0xc0>
 8028ccc:	465b      	mov	r3, fp
 8028cce:	4622      	mov	r2, r4
 8028cd0:	4629      	mov	r1, r5
 8028cd2:	4630      	mov	r0, r6
 8028cd4:	f7ff ff93 	bl	8028bfe <__sfputs_r>
 8028cd8:	3001      	adds	r0, #1
 8028cda:	f000 80aa 	beq.w	8028e32 <_vfiprintf_r+0x20e>
 8028cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028ce0:	445a      	add	r2, fp
 8028ce2:	9209      	str	r2, [sp, #36]	; 0x24
 8028ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8028ce8:	2b00      	cmp	r3, #0
 8028cea:	f000 80a2 	beq.w	8028e32 <_vfiprintf_r+0x20e>
 8028cee:	2300      	movs	r3, #0
 8028cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8028cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028cf8:	f10a 0a01 	add.w	sl, sl, #1
 8028cfc:	9304      	str	r3, [sp, #16]
 8028cfe:	9307      	str	r3, [sp, #28]
 8028d00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028d04:	931a      	str	r3, [sp, #104]	; 0x68
 8028d06:	4654      	mov	r4, sl
 8028d08:	2205      	movs	r2, #5
 8028d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028d0e:	4858      	ldr	r0, [pc, #352]	; (8028e70 <_vfiprintf_r+0x24c>)
 8028d10:	f7d7 fa36 	bl	8000180 <memchr>
 8028d14:	9a04      	ldr	r2, [sp, #16]
 8028d16:	b9d8      	cbnz	r0, 8028d50 <_vfiprintf_r+0x12c>
 8028d18:	06d1      	lsls	r1, r2, #27
 8028d1a:	bf44      	itt	mi
 8028d1c:	2320      	movmi	r3, #32
 8028d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028d22:	0713      	lsls	r3, r2, #28
 8028d24:	bf44      	itt	mi
 8028d26:	232b      	movmi	r3, #43	; 0x2b
 8028d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8028d30:	2b2a      	cmp	r3, #42	; 0x2a
 8028d32:	d015      	beq.n	8028d60 <_vfiprintf_r+0x13c>
 8028d34:	9a07      	ldr	r2, [sp, #28]
 8028d36:	4654      	mov	r4, sl
 8028d38:	2000      	movs	r0, #0
 8028d3a:	f04f 0c0a 	mov.w	ip, #10
 8028d3e:	4621      	mov	r1, r4
 8028d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028d44:	3b30      	subs	r3, #48	; 0x30
 8028d46:	2b09      	cmp	r3, #9
 8028d48:	d94e      	bls.n	8028de8 <_vfiprintf_r+0x1c4>
 8028d4a:	b1b0      	cbz	r0, 8028d7a <_vfiprintf_r+0x156>
 8028d4c:	9207      	str	r2, [sp, #28]
 8028d4e:	e014      	b.n	8028d7a <_vfiprintf_r+0x156>
 8028d50:	eba0 0308 	sub.w	r3, r0, r8
 8028d54:	fa09 f303 	lsl.w	r3, r9, r3
 8028d58:	4313      	orrs	r3, r2
 8028d5a:	9304      	str	r3, [sp, #16]
 8028d5c:	46a2      	mov	sl, r4
 8028d5e:	e7d2      	b.n	8028d06 <_vfiprintf_r+0xe2>
 8028d60:	9b03      	ldr	r3, [sp, #12]
 8028d62:	1d19      	adds	r1, r3, #4
 8028d64:	681b      	ldr	r3, [r3, #0]
 8028d66:	9103      	str	r1, [sp, #12]
 8028d68:	2b00      	cmp	r3, #0
 8028d6a:	bfbb      	ittet	lt
 8028d6c:	425b      	neglt	r3, r3
 8028d6e:	f042 0202 	orrlt.w	r2, r2, #2
 8028d72:	9307      	strge	r3, [sp, #28]
 8028d74:	9307      	strlt	r3, [sp, #28]
 8028d76:	bfb8      	it	lt
 8028d78:	9204      	strlt	r2, [sp, #16]
 8028d7a:	7823      	ldrb	r3, [r4, #0]
 8028d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8028d7e:	d10c      	bne.n	8028d9a <_vfiprintf_r+0x176>
 8028d80:	7863      	ldrb	r3, [r4, #1]
 8028d82:	2b2a      	cmp	r3, #42	; 0x2a
 8028d84:	d135      	bne.n	8028df2 <_vfiprintf_r+0x1ce>
 8028d86:	9b03      	ldr	r3, [sp, #12]
 8028d88:	1d1a      	adds	r2, r3, #4
 8028d8a:	681b      	ldr	r3, [r3, #0]
 8028d8c:	9203      	str	r2, [sp, #12]
 8028d8e:	2b00      	cmp	r3, #0
 8028d90:	bfb8      	it	lt
 8028d92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8028d96:	3402      	adds	r4, #2
 8028d98:	9305      	str	r3, [sp, #20]
 8028d9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028e80 <_vfiprintf_r+0x25c>
 8028d9e:	7821      	ldrb	r1, [r4, #0]
 8028da0:	2203      	movs	r2, #3
 8028da2:	4650      	mov	r0, sl
 8028da4:	f7d7 f9ec 	bl	8000180 <memchr>
 8028da8:	b140      	cbz	r0, 8028dbc <_vfiprintf_r+0x198>
 8028daa:	2340      	movs	r3, #64	; 0x40
 8028dac:	eba0 000a 	sub.w	r0, r0, sl
 8028db0:	fa03 f000 	lsl.w	r0, r3, r0
 8028db4:	9b04      	ldr	r3, [sp, #16]
 8028db6:	4303      	orrs	r3, r0
 8028db8:	3401      	adds	r4, #1
 8028dba:	9304      	str	r3, [sp, #16]
 8028dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028dc0:	482c      	ldr	r0, [pc, #176]	; (8028e74 <_vfiprintf_r+0x250>)
 8028dc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028dc6:	2206      	movs	r2, #6
 8028dc8:	f7d7 f9da 	bl	8000180 <memchr>
 8028dcc:	2800      	cmp	r0, #0
 8028dce:	d03f      	beq.n	8028e50 <_vfiprintf_r+0x22c>
 8028dd0:	4b29      	ldr	r3, [pc, #164]	; (8028e78 <_vfiprintf_r+0x254>)
 8028dd2:	bb1b      	cbnz	r3, 8028e1c <_vfiprintf_r+0x1f8>
 8028dd4:	9b03      	ldr	r3, [sp, #12]
 8028dd6:	3307      	adds	r3, #7
 8028dd8:	f023 0307 	bic.w	r3, r3, #7
 8028ddc:	3308      	adds	r3, #8
 8028dde:	9303      	str	r3, [sp, #12]
 8028de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028de2:	443b      	add	r3, r7
 8028de4:	9309      	str	r3, [sp, #36]	; 0x24
 8028de6:	e767      	b.n	8028cb8 <_vfiprintf_r+0x94>
 8028de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8028dec:	460c      	mov	r4, r1
 8028dee:	2001      	movs	r0, #1
 8028df0:	e7a5      	b.n	8028d3e <_vfiprintf_r+0x11a>
 8028df2:	2300      	movs	r3, #0
 8028df4:	3401      	adds	r4, #1
 8028df6:	9305      	str	r3, [sp, #20]
 8028df8:	4619      	mov	r1, r3
 8028dfa:	f04f 0c0a 	mov.w	ip, #10
 8028dfe:	4620      	mov	r0, r4
 8028e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028e04:	3a30      	subs	r2, #48	; 0x30
 8028e06:	2a09      	cmp	r2, #9
 8028e08:	d903      	bls.n	8028e12 <_vfiprintf_r+0x1ee>
 8028e0a:	2b00      	cmp	r3, #0
 8028e0c:	d0c5      	beq.n	8028d9a <_vfiprintf_r+0x176>
 8028e0e:	9105      	str	r1, [sp, #20]
 8028e10:	e7c3      	b.n	8028d9a <_vfiprintf_r+0x176>
 8028e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8028e16:	4604      	mov	r4, r0
 8028e18:	2301      	movs	r3, #1
 8028e1a:	e7f0      	b.n	8028dfe <_vfiprintf_r+0x1da>
 8028e1c:	ab03      	add	r3, sp, #12
 8028e1e:	9300      	str	r3, [sp, #0]
 8028e20:	462a      	mov	r2, r5
 8028e22:	4b16      	ldr	r3, [pc, #88]	; (8028e7c <_vfiprintf_r+0x258>)
 8028e24:	a904      	add	r1, sp, #16
 8028e26:	4630      	mov	r0, r6
 8028e28:	f000 f8cc 	bl	8028fc4 <_printf_float>
 8028e2c:	4607      	mov	r7, r0
 8028e2e:	1c78      	adds	r0, r7, #1
 8028e30:	d1d6      	bne.n	8028de0 <_vfiprintf_r+0x1bc>
 8028e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028e34:	07d9      	lsls	r1, r3, #31
 8028e36:	d405      	bmi.n	8028e44 <_vfiprintf_r+0x220>
 8028e38:	89ab      	ldrh	r3, [r5, #12]
 8028e3a:	059a      	lsls	r2, r3, #22
 8028e3c:	d402      	bmi.n	8028e44 <_vfiprintf_r+0x220>
 8028e3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028e40:	f001 fec2 	bl	802abc8 <__retarget_lock_release_recursive>
 8028e44:	89ab      	ldrh	r3, [r5, #12]
 8028e46:	065b      	lsls	r3, r3, #25
 8028e48:	f53f af12 	bmi.w	8028c70 <_vfiprintf_r+0x4c>
 8028e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028e4e:	e711      	b.n	8028c74 <_vfiprintf_r+0x50>
 8028e50:	ab03      	add	r3, sp, #12
 8028e52:	9300      	str	r3, [sp, #0]
 8028e54:	462a      	mov	r2, r5
 8028e56:	4b09      	ldr	r3, [pc, #36]	; (8028e7c <_vfiprintf_r+0x258>)
 8028e58:	a904      	add	r1, sp, #16
 8028e5a:	4630      	mov	r0, r6
 8028e5c:	f000 fb56 	bl	802950c <_printf_i>
 8028e60:	e7e4      	b.n	8028e2c <_vfiprintf_r+0x208>
 8028e62:	bf00      	nop
 8028e64:	08034080 	.word	0x08034080
 8028e68:	080340a0 	.word	0x080340a0
 8028e6c:	08034060 	.word	0x08034060
 8028e70:	08033f8c 	.word	0x08033f8c
 8028e74:	08033f96 	.word	0x08033f96
 8028e78:	08028fc5 	.word	0x08028fc5
 8028e7c:	08028bff 	.word	0x08028bff
 8028e80:	08033f92 	.word	0x08033f92

08028e84 <__cvt>:
 8028e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028e88:	ec55 4b10 	vmov	r4, r5, d0
 8028e8c:	2d00      	cmp	r5, #0
 8028e8e:	460e      	mov	r6, r1
 8028e90:	4619      	mov	r1, r3
 8028e92:	462b      	mov	r3, r5
 8028e94:	bfbb      	ittet	lt
 8028e96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8028e9a:	461d      	movlt	r5, r3
 8028e9c:	2300      	movge	r3, #0
 8028e9e:	232d      	movlt	r3, #45	; 0x2d
 8028ea0:	700b      	strb	r3, [r1, #0]
 8028ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028ea4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8028ea8:	4691      	mov	r9, r2
 8028eaa:	f023 0820 	bic.w	r8, r3, #32
 8028eae:	bfbc      	itt	lt
 8028eb0:	4622      	movlt	r2, r4
 8028eb2:	4614      	movlt	r4, r2
 8028eb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8028eb8:	d005      	beq.n	8028ec6 <__cvt+0x42>
 8028eba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8028ebe:	d100      	bne.n	8028ec2 <__cvt+0x3e>
 8028ec0:	3601      	adds	r6, #1
 8028ec2:	2102      	movs	r1, #2
 8028ec4:	e000      	b.n	8028ec8 <__cvt+0x44>
 8028ec6:	2103      	movs	r1, #3
 8028ec8:	ab03      	add	r3, sp, #12
 8028eca:	9301      	str	r3, [sp, #4]
 8028ecc:	ab02      	add	r3, sp, #8
 8028ece:	9300      	str	r3, [sp, #0]
 8028ed0:	ec45 4b10 	vmov	d0, r4, r5
 8028ed4:	4653      	mov	r3, sl
 8028ed6:	4632      	mov	r2, r6
 8028ed8:	f000 feca 	bl	8029c70 <_dtoa_r>
 8028edc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8028ee0:	4607      	mov	r7, r0
 8028ee2:	d102      	bne.n	8028eea <__cvt+0x66>
 8028ee4:	f019 0f01 	tst.w	r9, #1
 8028ee8:	d022      	beq.n	8028f30 <__cvt+0xac>
 8028eea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8028eee:	eb07 0906 	add.w	r9, r7, r6
 8028ef2:	d110      	bne.n	8028f16 <__cvt+0x92>
 8028ef4:	783b      	ldrb	r3, [r7, #0]
 8028ef6:	2b30      	cmp	r3, #48	; 0x30
 8028ef8:	d10a      	bne.n	8028f10 <__cvt+0x8c>
 8028efa:	2200      	movs	r2, #0
 8028efc:	2300      	movs	r3, #0
 8028efe:	4620      	mov	r0, r4
 8028f00:	4629      	mov	r1, r5
 8028f02:	f7d7 fdb9 	bl	8000a78 <__aeabi_dcmpeq>
 8028f06:	b918      	cbnz	r0, 8028f10 <__cvt+0x8c>
 8028f08:	f1c6 0601 	rsb	r6, r6, #1
 8028f0c:	f8ca 6000 	str.w	r6, [sl]
 8028f10:	f8da 3000 	ldr.w	r3, [sl]
 8028f14:	4499      	add	r9, r3
 8028f16:	2200      	movs	r2, #0
 8028f18:	2300      	movs	r3, #0
 8028f1a:	4620      	mov	r0, r4
 8028f1c:	4629      	mov	r1, r5
 8028f1e:	f7d7 fdab 	bl	8000a78 <__aeabi_dcmpeq>
 8028f22:	b108      	cbz	r0, 8028f28 <__cvt+0xa4>
 8028f24:	f8cd 900c 	str.w	r9, [sp, #12]
 8028f28:	2230      	movs	r2, #48	; 0x30
 8028f2a:	9b03      	ldr	r3, [sp, #12]
 8028f2c:	454b      	cmp	r3, r9
 8028f2e:	d307      	bcc.n	8028f40 <__cvt+0xbc>
 8028f30:	9b03      	ldr	r3, [sp, #12]
 8028f32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028f34:	1bdb      	subs	r3, r3, r7
 8028f36:	4638      	mov	r0, r7
 8028f38:	6013      	str	r3, [r2, #0]
 8028f3a:	b004      	add	sp, #16
 8028f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028f40:	1c59      	adds	r1, r3, #1
 8028f42:	9103      	str	r1, [sp, #12]
 8028f44:	701a      	strb	r2, [r3, #0]
 8028f46:	e7f0      	b.n	8028f2a <__cvt+0xa6>

08028f48 <__exponent>:
 8028f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028f4a:	4603      	mov	r3, r0
 8028f4c:	2900      	cmp	r1, #0
 8028f4e:	bfb8      	it	lt
 8028f50:	4249      	neglt	r1, r1
 8028f52:	f803 2b02 	strb.w	r2, [r3], #2
 8028f56:	bfb4      	ite	lt
 8028f58:	222d      	movlt	r2, #45	; 0x2d
 8028f5a:	222b      	movge	r2, #43	; 0x2b
 8028f5c:	2909      	cmp	r1, #9
 8028f5e:	7042      	strb	r2, [r0, #1]
 8028f60:	dd2a      	ble.n	8028fb8 <__exponent+0x70>
 8028f62:	f10d 0407 	add.w	r4, sp, #7
 8028f66:	46a4      	mov	ip, r4
 8028f68:	270a      	movs	r7, #10
 8028f6a:	46a6      	mov	lr, r4
 8028f6c:	460a      	mov	r2, r1
 8028f6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8028f72:	fb07 1516 	mls	r5, r7, r6, r1
 8028f76:	3530      	adds	r5, #48	; 0x30
 8028f78:	2a63      	cmp	r2, #99	; 0x63
 8028f7a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8028f7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8028f82:	4631      	mov	r1, r6
 8028f84:	dcf1      	bgt.n	8028f6a <__exponent+0x22>
 8028f86:	3130      	adds	r1, #48	; 0x30
 8028f88:	f1ae 0502 	sub.w	r5, lr, #2
 8028f8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8028f90:	1c44      	adds	r4, r0, #1
 8028f92:	4629      	mov	r1, r5
 8028f94:	4561      	cmp	r1, ip
 8028f96:	d30a      	bcc.n	8028fae <__exponent+0x66>
 8028f98:	f10d 0209 	add.w	r2, sp, #9
 8028f9c:	eba2 020e 	sub.w	r2, r2, lr
 8028fa0:	4565      	cmp	r5, ip
 8028fa2:	bf88      	it	hi
 8028fa4:	2200      	movhi	r2, #0
 8028fa6:	4413      	add	r3, r2
 8028fa8:	1a18      	subs	r0, r3, r0
 8028faa:	b003      	add	sp, #12
 8028fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8028fb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8028fb6:	e7ed      	b.n	8028f94 <__exponent+0x4c>
 8028fb8:	2330      	movs	r3, #48	; 0x30
 8028fba:	3130      	adds	r1, #48	; 0x30
 8028fbc:	7083      	strb	r3, [r0, #2]
 8028fbe:	70c1      	strb	r1, [r0, #3]
 8028fc0:	1d03      	adds	r3, r0, #4
 8028fc2:	e7f1      	b.n	8028fa8 <__exponent+0x60>

08028fc4 <_printf_float>:
 8028fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028fc8:	ed2d 8b02 	vpush	{d8}
 8028fcc:	b08d      	sub	sp, #52	; 0x34
 8028fce:	460c      	mov	r4, r1
 8028fd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8028fd4:	4616      	mov	r6, r2
 8028fd6:	461f      	mov	r7, r3
 8028fd8:	4605      	mov	r5, r0
 8028fda:	f001 fdef 	bl	802abbc <_localeconv_r>
 8028fde:	f8d0 a000 	ldr.w	sl, [r0]
 8028fe2:	4650      	mov	r0, sl
 8028fe4:	f7d7 f91c 	bl	8000220 <strlen>
 8028fe8:	2300      	movs	r3, #0
 8028fea:	930a      	str	r3, [sp, #40]	; 0x28
 8028fec:	6823      	ldr	r3, [r4, #0]
 8028fee:	9305      	str	r3, [sp, #20]
 8028ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8028ff4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8028ff8:	3307      	adds	r3, #7
 8028ffa:	f023 0307 	bic.w	r3, r3, #7
 8028ffe:	f103 0208 	add.w	r2, r3, #8
 8029002:	f8c8 2000 	str.w	r2, [r8]
 8029006:	e9d3 2300 	ldrd	r2, r3, [r3]
 802900a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 802900e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8029012:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8029016:	9307      	str	r3, [sp, #28]
 8029018:	f8cd 8018 	str.w	r8, [sp, #24]
 802901c:	ee08 0a10 	vmov	s16, r0
 8029020:	4b9f      	ldr	r3, [pc, #636]	; (80292a0 <_printf_float+0x2dc>)
 8029022:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8029026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802902a:	f7d7 fd57 	bl	8000adc <__aeabi_dcmpun>
 802902e:	bb88      	cbnz	r0, 8029094 <_printf_float+0xd0>
 8029030:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8029034:	4b9a      	ldr	r3, [pc, #616]	; (80292a0 <_printf_float+0x2dc>)
 8029036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802903a:	f7d7 fd31 	bl	8000aa0 <__aeabi_dcmple>
 802903e:	bb48      	cbnz	r0, 8029094 <_printf_float+0xd0>
 8029040:	2200      	movs	r2, #0
 8029042:	2300      	movs	r3, #0
 8029044:	4640      	mov	r0, r8
 8029046:	4649      	mov	r1, r9
 8029048:	f7d7 fd20 	bl	8000a8c <__aeabi_dcmplt>
 802904c:	b110      	cbz	r0, 8029054 <_printf_float+0x90>
 802904e:	232d      	movs	r3, #45	; 0x2d
 8029050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029054:	4b93      	ldr	r3, [pc, #588]	; (80292a4 <_printf_float+0x2e0>)
 8029056:	4894      	ldr	r0, [pc, #592]	; (80292a8 <_printf_float+0x2e4>)
 8029058:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 802905c:	bf94      	ite	ls
 802905e:	4698      	movls	r8, r3
 8029060:	4680      	movhi	r8, r0
 8029062:	2303      	movs	r3, #3
 8029064:	6123      	str	r3, [r4, #16]
 8029066:	9b05      	ldr	r3, [sp, #20]
 8029068:	f023 0204 	bic.w	r2, r3, #4
 802906c:	6022      	str	r2, [r4, #0]
 802906e:	f04f 0900 	mov.w	r9, #0
 8029072:	9700      	str	r7, [sp, #0]
 8029074:	4633      	mov	r3, r6
 8029076:	aa0b      	add	r2, sp, #44	; 0x2c
 8029078:	4621      	mov	r1, r4
 802907a:	4628      	mov	r0, r5
 802907c:	f000 f9d8 	bl	8029430 <_printf_common>
 8029080:	3001      	adds	r0, #1
 8029082:	f040 8090 	bne.w	80291a6 <_printf_float+0x1e2>
 8029086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802908a:	b00d      	add	sp, #52	; 0x34
 802908c:	ecbd 8b02 	vpop	{d8}
 8029090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029094:	4642      	mov	r2, r8
 8029096:	464b      	mov	r3, r9
 8029098:	4640      	mov	r0, r8
 802909a:	4649      	mov	r1, r9
 802909c:	f7d7 fd1e 	bl	8000adc <__aeabi_dcmpun>
 80290a0:	b140      	cbz	r0, 80290b4 <_printf_float+0xf0>
 80290a2:	464b      	mov	r3, r9
 80290a4:	2b00      	cmp	r3, #0
 80290a6:	bfbc      	itt	lt
 80290a8:	232d      	movlt	r3, #45	; 0x2d
 80290aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80290ae:	487f      	ldr	r0, [pc, #508]	; (80292ac <_printf_float+0x2e8>)
 80290b0:	4b7f      	ldr	r3, [pc, #508]	; (80292b0 <_printf_float+0x2ec>)
 80290b2:	e7d1      	b.n	8029058 <_printf_float+0x94>
 80290b4:	6863      	ldr	r3, [r4, #4]
 80290b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80290ba:	9206      	str	r2, [sp, #24]
 80290bc:	1c5a      	adds	r2, r3, #1
 80290be:	d13f      	bne.n	8029140 <_printf_float+0x17c>
 80290c0:	2306      	movs	r3, #6
 80290c2:	6063      	str	r3, [r4, #4]
 80290c4:	9b05      	ldr	r3, [sp, #20]
 80290c6:	6861      	ldr	r1, [r4, #4]
 80290c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80290cc:	2300      	movs	r3, #0
 80290ce:	9303      	str	r3, [sp, #12]
 80290d0:	ab0a      	add	r3, sp, #40	; 0x28
 80290d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80290d6:	ab09      	add	r3, sp, #36	; 0x24
 80290d8:	ec49 8b10 	vmov	d0, r8, r9
 80290dc:	9300      	str	r3, [sp, #0]
 80290de:	6022      	str	r2, [r4, #0]
 80290e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80290e4:	4628      	mov	r0, r5
 80290e6:	f7ff fecd 	bl	8028e84 <__cvt>
 80290ea:	9b06      	ldr	r3, [sp, #24]
 80290ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80290ee:	2b47      	cmp	r3, #71	; 0x47
 80290f0:	4680      	mov	r8, r0
 80290f2:	d108      	bne.n	8029106 <_printf_float+0x142>
 80290f4:	1cc8      	adds	r0, r1, #3
 80290f6:	db02      	blt.n	80290fe <_printf_float+0x13a>
 80290f8:	6863      	ldr	r3, [r4, #4]
 80290fa:	4299      	cmp	r1, r3
 80290fc:	dd41      	ble.n	8029182 <_printf_float+0x1be>
 80290fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8029102:	fa5f fb8b 	uxtb.w	fp, fp
 8029106:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802910a:	d820      	bhi.n	802914e <_printf_float+0x18a>
 802910c:	3901      	subs	r1, #1
 802910e:	465a      	mov	r2, fp
 8029110:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8029114:	9109      	str	r1, [sp, #36]	; 0x24
 8029116:	f7ff ff17 	bl	8028f48 <__exponent>
 802911a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802911c:	1813      	adds	r3, r2, r0
 802911e:	2a01      	cmp	r2, #1
 8029120:	4681      	mov	r9, r0
 8029122:	6123      	str	r3, [r4, #16]
 8029124:	dc02      	bgt.n	802912c <_printf_float+0x168>
 8029126:	6822      	ldr	r2, [r4, #0]
 8029128:	07d2      	lsls	r2, r2, #31
 802912a:	d501      	bpl.n	8029130 <_printf_float+0x16c>
 802912c:	3301      	adds	r3, #1
 802912e:	6123      	str	r3, [r4, #16]
 8029130:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8029134:	2b00      	cmp	r3, #0
 8029136:	d09c      	beq.n	8029072 <_printf_float+0xae>
 8029138:	232d      	movs	r3, #45	; 0x2d
 802913a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802913e:	e798      	b.n	8029072 <_printf_float+0xae>
 8029140:	9a06      	ldr	r2, [sp, #24]
 8029142:	2a47      	cmp	r2, #71	; 0x47
 8029144:	d1be      	bne.n	80290c4 <_printf_float+0x100>
 8029146:	2b00      	cmp	r3, #0
 8029148:	d1bc      	bne.n	80290c4 <_printf_float+0x100>
 802914a:	2301      	movs	r3, #1
 802914c:	e7b9      	b.n	80290c2 <_printf_float+0xfe>
 802914e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8029152:	d118      	bne.n	8029186 <_printf_float+0x1c2>
 8029154:	2900      	cmp	r1, #0
 8029156:	6863      	ldr	r3, [r4, #4]
 8029158:	dd0b      	ble.n	8029172 <_printf_float+0x1ae>
 802915a:	6121      	str	r1, [r4, #16]
 802915c:	b913      	cbnz	r3, 8029164 <_printf_float+0x1a0>
 802915e:	6822      	ldr	r2, [r4, #0]
 8029160:	07d0      	lsls	r0, r2, #31
 8029162:	d502      	bpl.n	802916a <_printf_float+0x1a6>
 8029164:	3301      	adds	r3, #1
 8029166:	440b      	add	r3, r1
 8029168:	6123      	str	r3, [r4, #16]
 802916a:	65a1      	str	r1, [r4, #88]	; 0x58
 802916c:	f04f 0900 	mov.w	r9, #0
 8029170:	e7de      	b.n	8029130 <_printf_float+0x16c>
 8029172:	b913      	cbnz	r3, 802917a <_printf_float+0x1b6>
 8029174:	6822      	ldr	r2, [r4, #0]
 8029176:	07d2      	lsls	r2, r2, #31
 8029178:	d501      	bpl.n	802917e <_printf_float+0x1ba>
 802917a:	3302      	adds	r3, #2
 802917c:	e7f4      	b.n	8029168 <_printf_float+0x1a4>
 802917e:	2301      	movs	r3, #1
 8029180:	e7f2      	b.n	8029168 <_printf_float+0x1a4>
 8029182:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8029186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029188:	4299      	cmp	r1, r3
 802918a:	db05      	blt.n	8029198 <_printf_float+0x1d4>
 802918c:	6823      	ldr	r3, [r4, #0]
 802918e:	6121      	str	r1, [r4, #16]
 8029190:	07d8      	lsls	r0, r3, #31
 8029192:	d5ea      	bpl.n	802916a <_printf_float+0x1a6>
 8029194:	1c4b      	adds	r3, r1, #1
 8029196:	e7e7      	b.n	8029168 <_printf_float+0x1a4>
 8029198:	2900      	cmp	r1, #0
 802919a:	bfd4      	ite	le
 802919c:	f1c1 0202 	rsble	r2, r1, #2
 80291a0:	2201      	movgt	r2, #1
 80291a2:	4413      	add	r3, r2
 80291a4:	e7e0      	b.n	8029168 <_printf_float+0x1a4>
 80291a6:	6823      	ldr	r3, [r4, #0]
 80291a8:	055a      	lsls	r2, r3, #21
 80291aa:	d407      	bmi.n	80291bc <_printf_float+0x1f8>
 80291ac:	6923      	ldr	r3, [r4, #16]
 80291ae:	4642      	mov	r2, r8
 80291b0:	4631      	mov	r1, r6
 80291b2:	4628      	mov	r0, r5
 80291b4:	47b8      	blx	r7
 80291b6:	3001      	adds	r0, #1
 80291b8:	d12c      	bne.n	8029214 <_printf_float+0x250>
 80291ba:	e764      	b.n	8029086 <_printf_float+0xc2>
 80291bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80291c0:	f240 80e0 	bls.w	8029384 <_printf_float+0x3c0>
 80291c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80291c8:	2200      	movs	r2, #0
 80291ca:	2300      	movs	r3, #0
 80291cc:	f7d7 fc54 	bl	8000a78 <__aeabi_dcmpeq>
 80291d0:	2800      	cmp	r0, #0
 80291d2:	d034      	beq.n	802923e <_printf_float+0x27a>
 80291d4:	4a37      	ldr	r2, [pc, #220]	; (80292b4 <_printf_float+0x2f0>)
 80291d6:	2301      	movs	r3, #1
 80291d8:	4631      	mov	r1, r6
 80291da:	4628      	mov	r0, r5
 80291dc:	47b8      	blx	r7
 80291de:	3001      	adds	r0, #1
 80291e0:	f43f af51 	beq.w	8029086 <_printf_float+0xc2>
 80291e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80291e8:	429a      	cmp	r2, r3
 80291ea:	db02      	blt.n	80291f2 <_printf_float+0x22e>
 80291ec:	6823      	ldr	r3, [r4, #0]
 80291ee:	07d8      	lsls	r0, r3, #31
 80291f0:	d510      	bpl.n	8029214 <_printf_float+0x250>
 80291f2:	ee18 3a10 	vmov	r3, s16
 80291f6:	4652      	mov	r2, sl
 80291f8:	4631      	mov	r1, r6
 80291fa:	4628      	mov	r0, r5
 80291fc:	47b8      	blx	r7
 80291fe:	3001      	adds	r0, #1
 8029200:	f43f af41 	beq.w	8029086 <_printf_float+0xc2>
 8029204:	f04f 0800 	mov.w	r8, #0
 8029208:	f104 091a 	add.w	r9, r4, #26
 802920c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802920e:	3b01      	subs	r3, #1
 8029210:	4543      	cmp	r3, r8
 8029212:	dc09      	bgt.n	8029228 <_printf_float+0x264>
 8029214:	6823      	ldr	r3, [r4, #0]
 8029216:	079b      	lsls	r3, r3, #30
 8029218:	f100 8105 	bmi.w	8029426 <_printf_float+0x462>
 802921c:	68e0      	ldr	r0, [r4, #12]
 802921e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029220:	4298      	cmp	r0, r3
 8029222:	bfb8      	it	lt
 8029224:	4618      	movlt	r0, r3
 8029226:	e730      	b.n	802908a <_printf_float+0xc6>
 8029228:	2301      	movs	r3, #1
 802922a:	464a      	mov	r2, r9
 802922c:	4631      	mov	r1, r6
 802922e:	4628      	mov	r0, r5
 8029230:	47b8      	blx	r7
 8029232:	3001      	adds	r0, #1
 8029234:	f43f af27 	beq.w	8029086 <_printf_float+0xc2>
 8029238:	f108 0801 	add.w	r8, r8, #1
 802923c:	e7e6      	b.n	802920c <_printf_float+0x248>
 802923e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029240:	2b00      	cmp	r3, #0
 8029242:	dc39      	bgt.n	80292b8 <_printf_float+0x2f4>
 8029244:	4a1b      	ldr	r2, [pc, #108]	; (80292b4 <_printf_float+0x2f0>)
 8029246:	2301      	movs	r3, #1
 8029248:	4631      	mov	r1, r6
 802924a:	4628      	mov	r0, r5
 802924c:	47b8      	blx	r7
 802924e:	3001      	adds	r0, #1
 8029250:	f43f af19 	beq.w	8029086 <_printf_float+0xc2>
 8029254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8029258:	4313      	orrs	r3, r2
 802925a:	d102      	bne.n	8029262 <_printf_float+0x29e>
 802925c:	6823      	ldr	r3, [r4, #0]
 802925e:	07d9      	lsls	r1, r3, #31
 8029260:	d5d8      	bpl.n	8029214 <_printf_float+0x250>
 8029262:	ee18 3a10 	vmov	r3, s16
 8029266:	4652      	mov	r2, sl
 8029268:	4631      	mov	r1, r6
 802926a:	4628      	mov	r0, r5
 802926c:	47b8      	blx	r7
 802926e:	3001      	adds	r0, #1
 8029270:	f43f af09 	beq.w	8029086 <_printf_float+0xc2>
 8029274:	f04f 0900 	mov.w	r9, #0
 8029278:	f104 0a1a 	add.w	sl, r4, #26
 802927c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802927e:	425b      	negs	r3, r3
 8029280:	454b      	cmp	r3, r9
 8029282:	dc01      	bgt.n	8029288 <_printf_float+0x2c4>
 8029284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029286:	e792      	b.n	80291ae <_printf_float+0x1ea>
 8029288:	2301      	movs	r3, #1
 802928a:	4652      	mov	r2, sl
 802928c:	4631      	mov	r1, r6
 802928e:	4628      	mov	r0, r5
 8029290:	47b8      	blx	r7
 8029292:	3001      	adds	r0, #1
 8029294:	f43f aef7 	beq.w	8029086 <_printf_float+0xc2>
 8029298:	f109 0901 	add.w	r9, r9, #1
 802929c:	e7ee      	b.n	802927c <_printf_float+0x2b8>
 802929e:	bf00      	nop
 80292a0:	7fefffff 	.word	0x7fefffff
 80292a4:	08033f9d 	.word	0x08033f9d
 80292a8:	08033fa1 	.word	0x08033fa1
 80292ac:	08033fa9 	.word	0x08033fa9
 80292b0:	08033fa5 	.word	0x08033fa5
 80292b4:	08033e73 	.word	0x08033e73
 80292b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80292ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80292bc:	429a      	cmp	r2, r3
 80292be:	bfa8      	it	ge
 80292c0:	461a      	movge	r2, r3
 80292c2:	2a00      	cmp	r2, #0
 80292c4:	4691      	mov	r9, r2
 80292c6:	dc37      	bgt.n	8029338 <_printf_float+0x374>
 80292c8:	f04f 0b00 	mov.w	fp, #0
 80292cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80292d0:	f104 021a 	add.w	r2, r4, #26
 80292d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80292d6:	9305      	str	r3, [sp, #20]
 80292d8:	eba3 0309 	sub.w	r3, r3, r9
 80292dc:	455b      	cmp	r3, fp
 80292de:	dc33      	bgt.n	8029348 <_printf_float+0x384>
 80292e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80292e4:	429a      	cmp	r2, r3
 80292e6:	db3b      	blt.n	8029360 <_printf_float+0x39c>
 80292e8:	6823      	ldr	r3, [r4, #0]
 80292ea:	07da      	lsls	r2, r3, #31
 80292ec:	d438      	bmi.n	8029360 <_printf_float+0x39c>
 80292ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80292f0:	9a05      	ldr	r2, [sp, #20]
 80292f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80292f4:	1a9a      	subs	r2, r3, r2
 80292f6:	eba3 0901 	sub.w	r9, r3, r1
 80292fa:	4591      	cmp	r9, r2
 80292fc:	bfa8      	it	ge
 80292fe:	4691      	movge	r9, r2
 8029300:	f1b9 0f00 	cmp.w	r9, #0
 8029304:	dc35      	bgt.n	8029372 <_printf_float+0x3ae>
 8029306:	f04f 0800 	mov.w	r8, #0
 802930a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802930e:	f104 0a1a 	add.w	sl, r4, #26
 8029312:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8029316:	1a9b      	subs	r3, r3, r2
 8029318:	eba3 0309 	sub.w	r3, r3, r9
 802931c:	4543      	cmp	r3, r8
 802931e:	f77f af79 	ble.w	8029214 <_printf_float+0x250>
 8029322:	2301      	movs	r3, #1
 8029324:	4652      	mov	r2, sl
 8029326:	4631      	mov	r1, r6
 8029328:	4628      	mov	r0, r5
 802932a:	47b8      	blx	r7
 802932c:	3001      	adds	r0, #1
 802932e:	f43f aeaa 	beq.w	8029086 <_printf_float+0xc2>
 8029332:	f108 0801 	add.w	r8, r8, #1
 8029336:	e7ec      	b.n	8029312 <_printf_float+0x34e>
 8029338:	4613      	mov	r3, r2
 802933a:	4631      	mov	r1, r6
 802933c:	4642      	mov	r2, r8
 802933e:	4628      	mov	r0, r5
 8029340:	47b8      	blx	r7
 8029342:	3001      	adds	r0, #1
 8029344:	d1c0      	bne.n	80292c8 <_printf_float+0x304>
 8029346:	e69e      	b.n	8029086 <_printf_float+0xc2>
 8029348:	2301      	movs	r3, #1
 802934a:	4631      	mov	r1, r6
 802934c:	4628      	mov	r0, r5
 802934e:	9205      	str	r2, [sp, #20]
 8029350:	47b8      	blx	r7
 8029352:	3001      	adds	r0, #1
 8029354:	f43f ae97 	beq.w	8029086 <_printf_float+0xc2>
 8029358:	9a05      	ldr	r2, [sp, #20]
 802935a:	f10b 0b01 	add.w	fp, fp, #1
 802935e:	e7b9      	b.n	80292d4 <_printf_float+0x310>
 8029360:	ee18 3a10 	vmov	r3, s16
 8029364:	4652      	mov	r2, sl
 8029366:	4631      	mov	r1, r6
 8029368:	4628      	mov	r0, r5
 802936a:	47b8      	blx	r7
 802936c:	3001      	adds	r0, #1
 802936e:	d1be      	bne.n	80292ee <_printf_float+0x32a>
 8029370:	e689      	b.n	8029086 <_printf_float+0xc2>
 8029372:	9a05      	ldr	r2, [sp, #20]
 8029374:	464b      	mov	r3, r9
 8029376:	4442      	add	r2, r8
 8029378:	4631      	mov	r1, r6
 802937a:	4628      	mov	r0, r5
 802937c:	47b8      	blx	r7
 802937e:	3001      	adds	r0, #1
 8029380:	d1c1      	bne.n	8029306 <_printf_float+0x342>
 8029382:	e680      	b.n	8029086 <_printf_float+0xc2>
 8029384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029386:	2a01      	cmp	r2, #1
 8029388:	dc01      	bgt.n	802938e <_printf_float+0x3ca>
 802938a:	07db      	lsls	r3, r3, #31
 802938c:	d538      	bpl.n	8029400 <_printf_float+0x43c>
 802938e:	2301      	movs	r3, #1
 8029390:	4642      	mov	r2, r8
 8029392:	4631      	mov	r1, r6
 8029394:	4628      	mov	r0, r5
 8029396:	47b8      	blx	r7
 8029398:	3001      	adds	r0, #1
 802939a:	f43f ae74 	beq.w	8029086 <_printf_float+0xc2>
 802939e:	ee18 3a10 	vmov	r3, s16
 80293a2:	4652      	mov	r2, sl
 80293a4:	4631      	mov	r1, r6
 80293a6:	4628      	mov	r0, r5
 80293a8:	47b8      	blx	r7
 80293aa:	3001      	adds	r0, #1
 80293ac:	f43f ae6b 	beq.w	8029086 <_printf_float+0xc2>
 80293b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80293b4:	2200      	movs	r2, #0
 80293b6:	2300      	movs	r3, #0
 80293b8:	f7d7 fb5e 	bl	8000a78 <__aeabi_dcmpeq>
 80293bc:	b9d8      	cbnz	r0, 80293f6 <_printf_float+0x432>
 80293be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80293c0:	f108 0201 	add.w	r2, r8, #1
 80293c4:	3b01      	subs	r3, #1
 80293c6:	4631      	mov	r1, r6
 80293c8:	4628      	mov	r0, r5
 80293ca:	47b8      	blx	r7
 80293cc:	3001      	adds	r0, #1
 80293ce:	d10e      	bne.n	80293ee <_printf_float+0x42a>
 80293d0:	e659      	b.n	8029086 <_printf_float+0xc2>
 80293d2:	2301      	movs	r3, #1
 80293d4:	4652      	mov	r2, sl
 80293d6:	4631      	mov	r1, r6
 80293d8:	4628      	mov	r0, r5
 80293da:	47b8      	blx	r7
 80293dc:	3001      	adds	r0, #1
 80293de:	f43f ae52 	beq.w	8029086 <_printf_float+0xc2>
 80293e2:	f108 0801 	add.w	r8, r8, #1
 80293e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80293e8:	3b01      	subs	r3, #1
 80293ea:	4543      	cmp	r3, r8
 80293ec:	dcf1      	bgt.n	80293d2 <_printf_float+0x40e>
 80293ee:	464b      	mov	r3, r9
 80293f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80293f4:	e6dc      	b.n	80291b0 <_printf_float+0x1ec>
 80293f6:	f04f 0800 	mov.w	r8, #0
 80293fa:	f104 0a1a 	add.w	sl, r4, #26
 80293fe:	e7f2      	b.n	80293e6 <_printf_float+0x422>
 8029400:	2301      	movs	r3, #1
 8029402:	4642      	mov	r2, r8
 8029404:	e7df      	b.n	80293c6 <_printf_float+0x402>
 8029406:	2301      	movs	r3, #1
 8029408:	464a      	mov	r2, r9
 802940a:	4631      	mov	r1, r6
 802940c:	4628      	mov	r0, r5
 802940e:	47b8      	blx	r7
 8029410:	3001      	adds	r0, #1
 8029412:	f43f ae38 	beq.w	8029086 <_printf_float+0xc2>
 8029416:	f108 0801 	add.w	r8, r8, #1
 802941a:	68e3      	ldr	r3, [r4, #12]
 802941c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802941e:	1a5b      	subs	r3, r3, r1
 8029420:	4543      	cmp	r3, r8
 8029422:	dcf0      	bgt.n	8029406 <_printf_float+0x442>
 8029424:	e6fa      	b.n	802921c <_printf_float+0x258>
 8029426:	f04f 0800 	mov.w	r8, #0
 802942a:	f104 0919 	add.w	r9, r4, #25
 802942e:	e7f4      	b.n	802941a <_printf_float+0x456>

08029430 <_printf_common>:
 8029430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029434:	4616      	mov	r6, r2
 8029436:	4699      	mov	r9, r3
 8029438:	688a      	ldr	r2, [r1, #8]
 802943a:	690b      	ldr	r3, [r1, #16]
 802943c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8029440:	4293      	cmp	r3, r2
 8029442:	bfb8      	it	lt
 8029444:	4613      	movlt	r3, r2
 8029446:	6033      	str	r3, [r6, #0]
 8029448:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802944c:	4607      	mov	r7, r0
 802944e:	460c      	mov	r4, r1
 8029450:	b10a      	cbz	r2, 8029456 <_printf_common+0x26>
 8029452:	3301      	adds	r3, #1
 8029454:	6033      	str	r3, [r6, #0]
 8029456:	6823      	ldr	r3, [r4, #0]
 8029458:	0699      	lsls	r1, r3, #26
 802945a:	bf42      	ittt	mi
 802945c:	6833      	ldrmi	r3, [r6, #0]
 802945e:	3302      	addmi	r3, #2
 8029460:	6033      	strmi	r3, [r6, #0]
 8029462:	6825      	ldr	r5, [r4, #0]
 8029464:	f015 0506 	ands.w	r5, r5, #6
 8029468:	d106      	bne.n	8029478 <_printf_common+0x48>
 802946a:	f104 0a19 	add.w	sl, r4, #25
 802946e:	68e3      	ldr	r3, [r4, #12]
 8029470:	6832      	ldr	r2, [r6, #0]
 8029472:	1a9b      	subs	r3, r3, r2
 8029474:	42ab      	cmp	r3, r5
 8029476:	dc26      	bgt.n	80294c6 <_printf_common+0x96>
 8029478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802947c:	1e13      	subs	r3, r2, #0
 802947e:	6822      	ldr	r2, [r4, #0]
 8029480:	bf18      	it	ne
 8029482:	2301      	movne	r3, #1
 8029484:	0692      	lsls	r2, r2, #26
 8029486:	d42b      	bmi.n	80294e0 <_printf_common+0xb0>
 8029488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802948c:	4649      	mov	r1, r9
 802948e:	4638      	mov	r0, r7
 8029490:	47c0      	blx	r8
 8029492:	3001      	adds	r0, #1
 8029494:	d01e      	beq.n	80294d4 <_printf_common+0xa4>
 8029496:	6823      	ldr	r3, [r4, #0]
 8029498:	68e5      	ldr	r5, [r4, #12]
 802949a:	6832      	ldr	r2, [r6, #0]
 802949c:	f003 0306 	and.w	r3, r3, #6
 80294a0:	2b04      	cmp	r3, #4
 80294a2:	bf08      	it	eq
 80294a4:	1aad      	subeq	r5, r5, r2
 80294a6:	68a3      	ldr	r3, [r4, #8]
 80294a8:	6922      	ldr	r2, [r4, #16]
 80294aa:	bf0c      	ite	eq
 80294ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80294b0:	2500      	movne	r5, #0
 80294b2:	4293      	cmp	r3, r2
 80294b4:	bfc4      	itt	gt
 80294b6:	1a9b      	subgt	r3, r3, r2
 80294b8:	18ed      	addgt	r5, r5, r3
 80294ba:	2600      	movs	r6, #0
 80294bc:	341a      	adds	r4, #26
 80294be:	42b5      	cmp	r5, r6
 80294c0:	d11a      	bne.n	80294f8 <_printf_common+0xc8>
 80294c2:	2000      	movs	r0, #0
 80294c4:	e008      	b.n	80294d8 <_printf_common+0xa8>
 80294c6:	2301      	movs	r3, #1
 80294c8:	4652      	mov	r2, sl
 80294ca:	4649      	mov	r1, r9
 80294cc:	4638      	mov	r0, r7
 80294ce:	47c0      	blx	r8
 80294d0:	3001      	adds	r0, #1
 80294d2:	d103      	bne.n	80294dc <_printf_common+0xac>
 80294d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80294d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80294dc:	3501      	adds	r5, #1
 80294de:	e7c6      	b.n	802946e <_printf_common+0x3e>
 80294e0:	18e1      	adds	r1, r4, r3
 80294e2:	1c5a      	adds	r2, r3, #1
 80294e4:	2030      	movs	r0, #48	; 0x30
 80294e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80294ea:	4422      	add	r2, r4
 80294ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80294f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80294f4:	3302      	adds	r3, #2
 80294f6:	e7c7      	b.n	8029488 <_printf_common+0x58>
 80294f8:	2301      	movs	r3, #1
 80294fa:	4622      	mov	r2, r4
 80294fc:	4649      	mov	r1, r9
 80294fe:	4638      	mov	r0, r7
 8029500:	47c0      	blx	r8
 8029502:	3001      	adds	r0, #1
 8029504:	d0e6      	beq.n	80294d4 <_printf_common+0xa4>
 8029506:	3601      	adds	r6, #1
 8029508:	e7d9      	b.n	80294be <_printf_common+0x8e>
	...

0802950c <_printf_i>:
 802950c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029510:	7e0f      	ldrb	r7, [r1, #24]
 8029512:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029514:	2f78      	cmp	r7, #120	; 0x78
 8029516:	4691      	mov	r9, r2
 8029518:	4680      	mov	r8, r0
 802951a:	460c      	mov	r4, r1
 802951c:	469a      	mov	sl, r3
 802951e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8029522:	d807      	bhi.n	8029534 <_printf_i+0x28>
 8029524:	2f62      	cmp	r7, #98	; 0x62
 8029526:	d80a      	bhi.n	802953e <_printf_i+0x32>
 8029528:	2f00      	cmp	r7, #0
 802952a:	f000 80d8 	beq.w	80296de <_printf_i+0x1d2>
 802952e:	2f58      	cmp	r7, #88	; 0x58
 8029530:	f000 80a3 	beq.w	802967a <_printf_i+0x16e>
 8029534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802953c:	e03a      	b.n	80295b4 <_printf_i+0xa8>
 802953e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8029542:	2b15      	cmp	r3, #21
 8029544:	d8f6      	bhi.n	8029534 <_printf_i+0x28>
 8029546:	a101      	add	r1, pc, #4	; (adr r1, 802954c <_printf_i+0x40>)
 8029548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802954c:	080295a5 	.word	0x080295a5
 8029550:	080295b9 	.word	0x080295b9
 8029554:	08029535 	.word	0x08029535
 8029558:	08029535 	.word	0x08029535
 802955c:	08029535 	.word	0x08029535
 8029560:	08029535 	.word	0x08029535
 8029564:	080295b9 	.word	0x080295b9
 8029568:	08029535 	.word	0x08029535
 802956c:	08029535 	.word	0x08029535
 8029570:	08029535 	.word	0x08029535
 8029574:	08029535 	.word	0x08029535
 8029578:	080296c5 	.word	0x080296c5
 802957c:	080295e9 	.word	0x080295e9
 8029580:	080296a7 	.word	0x080296a7
 8029584:	08029535 	.word	0x08029535
 8029588:	08029535 	.word	0x08029535
 802958c:	080296e7 	.word	0x080296e7
 8029590:	08029535 	.word	0x08029535
 8029594:	080295e9 	.word	0x080295e9
 8029598:	08029535 	.word	0x08029535
 802959c:	08029535 	.word	0x08029535
 80295a0:	080296af 	.word	0x080296af
 80295a4:	682b      	ldr	r3, [r5, #0]
 80295a6:	1d1a      	adds	r2, r3, #4
 80295a8:	681b      	ldr	r3, [r3, #0]
 80295aa:	602a      	str	r2, [r5, #0]
 80295ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80295b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80295b4:	2301      	movs	r3, #1
 80295b6:	e0a3      	b.n	8029700 <_printf_i+0x1f4>
 80295b8:	6820      	ldr	r0, [r4, #0]
 80295ba:	6829      	ldr	r1, [r5, #0]
 80295bc:	0606      	lsls	r6, r0, #24
 80295be:	f101 0304 	add.w	r3, r1, #4
 80295c2:	d50a      	bpl.n	80295da <_printf_i+0xce>
 80295c4:	680e      	ldr	r6, [r1, #0]
 80295c6:	602b      	str	r3, [r5, #0]
 80295c8:	2e00      	cmp	r6, #0
 80295ca:	da03      	bge.n	80295d4 <_printf_i+0xc8>
 80295cc:	232d      	movs	r3, #45	; 0x2d
 80295ce:	4276      	negs	r6, r6
 80295d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80295d4:	485e      	ldr	r0, [pc, #376]	; (8029750 <_printf_i+0x244>)
 80295d6:	230a      	movs	r3, #10
 80295d8:	e019      	b.n	802960e <_printf_i+0x102>
 80295da:	680e      	ldr	r6, [r1, #0]
 80295dc:	602b      	str	r3, [r5, #0]
 80295de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80295e2:	bf18      	it	ne
 80295e4:	b236      	sxthne	r6, r6
 80295e6:	e7ef      	b.n	80295c8 <_printf_i+0xbc>
 80295e8:	682b      	ldr	r3, [r5, #0]
 80295ea:	6820      	ldr	r0, [r4, #0]
 80295ec:	1d19      	adds	r1, r3, #4
 80295ee:	6029      	str	r1, [r5, #0]
 80295f0:	0601      	lsls	r1, r0, #24
 80295f2:	d501      	bpl.n	80295f8 <_printf_i+0xec>
 80295f4:	681e      	ldr	r6, [r3, #0]
 80295f6:	e002      	b.n	80295fe <_printf_i+0xf2>
 80295f8:	0646      	lsls	r6, r0, #25
 80295fa:	d5fb      	bpl.n	80295f4 <_printf_i+0xe8>
 80295fc:	881e      	ldrh	r6, [r3, #0]
 80295fe:	4854      	ldr	r0, [pc, #336]	; (8029750 <_printf_i+0x244>)
 8029600:	2f6f      	cmp	r7, #111	; 0x6f
 8029602:	bf0c      	ite	eq
 8029604:	2308      	moveq	r3, #8
 8029606:	230a      	movne	r3, #10
 8029608:	2100      	movs	r1, #0
 802960a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802960e:	6865      	ldr	r5, [r4, #4]
 8029610:	60a5      	str	r5, [r4, #8]
 8029612:	2d00      	cmp	r5, #0
 8029614:	bfa2      	ittt	ge
 8029616:	6821      	ldrge	r1, [r4, #0]
 8029618:	f021 0104 	bicge.w	r1, r1, #4
 802961c:	6021      	strge	r1, [r4, #0]
 802961e:	b90e      	cbnz	r6, 8029624 <_printf_i+0x118>
 8029620:	2d00      	cmp	r5, #0
 8029622:	d04d      	beq.n	80296c0 <_printf_i+0x1b4>
 8029624:	4615      	mov	r5, r2
 8029626:	fbb6 f1f3 	udiv	r1, r6, r3
 802962a:	fb03 6711 	mls	r7, r3, r1, r6
 802962e:	5dc7      	ldrb	r7, [r0, r7]
 8029630:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8029634:	4637      	mov	r7, r6
 8029636:	42bb      	cmp	r3, r7
 8029638:	460e      	mov	r6, r1
 802963a:	d9f4      	bls.n	8029626 <_printf_i+0x11a>
 802963c:	2b08      	cmp	r3, #8
 802963e:	d10b      	bne.n	8029658 <_printf_i+0x14c>
 8029640:	6823      	ldr	r3, [r4, #0]
 8029642:	07de      	lsls	r6, r3, #31
 8029644:	d508      	bpl.n	8029658 <_printf_i+0x14c>
 8029646:	6923      	ldr	r3, [r4, #16]
 8029648:	6861      	ldr	r1, [r4, #4]
 802964a:	4299      	cmp	r1, r3
 802964c:	bfde      	ittt	le
 802964e:	2330      	movle	r3, #48	; 0x30
 8029650:	f805 3c01 	strble.w	r3, [r5, #-1]
 8029654:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8029658:	1b52      	subs	r2, r2, r5
 802965a:	6122      	str	r2, [r4, #16]
 802965c:	f8cd a000 	str.w	sl, [sp]
 8029660:	464b      	mov	r3, r9
 8029662:	aa03      	add	r2, sp, #12
 8029664:	4621      	mov	r1, r4
 8029666:	4640      	mov	r0, r8
 8029668:	f7ff fee2 	bl	8029430 <_printf_common>
 802966c:	3001      	adds	r0, #1
 802966e:	d14c      	bne.n	802970a <_printf_i+0x1fe>
 8029670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8029674:	b004      	add	sp, #16
 8029676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802967a:	4835      	ldr	r0, [pc, #212]	; (8029750 <_printf_i+0x244>)
 802967c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8029680:	6829      	ldr	r1, [r5, #0]
 8029682:	6823      	ldr	r3, [r4, #0]
 8029684:	f851 6b04 	ldr.w	r6, [r1], #4
 8029688:	6029      	str	r1, [r5, #0]
 802968a:	061d      	lsls	r5, r3, #24
 802968c:	d514      	bpl.n	80296b8 <_printf_i+0x1ac>
 802968e:	07df      	lsls	r7, r3, #31
 8029690:	bf44      	itt	mi
 8029692:	f043 0320 	orrmi.w	r3, r3, #32
 8029696:	6023      	strmi	r3, [r4, #0]
 8029698:	b91e      	cbnz	r6, 80296a2 <_printf_i+0x196>
 802969a:	6823      	ldr	r3, [r4, #0]
 802969c:	f023 0320 	bic.w	r3, r3, #32
 80296a0:	6023      	str	r3, [r4, #0]
 80296a2:	2310      	movs	r3, #16
 80296a4:	e7b0      	b.n	8029608 <_printf_i+0xfc>
 80296a6:	6823      	ldr	r3, [r4, #0]
 80296a8:	f043 0320 	orr.w	r3, r3, #32
 80296ac:	6023      	str	r3, [r4, #0]
 80296ae:	2378      	movs	r3, #120	; 0x78
 80296b0:	4828      	ldr	r0, [pc, #160]	; (8029754 <_printf_i+0x248>)
 80296b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80296b6:	e7e3      	b.n	8029680 <_printf_i+0x174>
 80296b8:	0659      	lsls	r1, r3, #25
 80296ba:	bf48      	it	mi
 80296bc:	b2b6      	uxthmi	r6, r6
 80296be:	e7e6      	b.n	802968e <_printf_i+0x182>
 80296c0:	4615      	mov	r5, r2
 80296c2:	e7bb      	b.n	802963c <_printf_i+0x130>
 80296c4:	682b      	ldr	r3, [r5, #0]
 80296c6:	6826      	ldr	r6, [r4, #0]
 80296c8:	6961      	ldr	r1, [r4, #20]
 80296ca:	1d18      	adds	r0, r3, #4
 80296cc:	6028      	str	r0, [r5, #0]
 80296ce:	0635      	lsls	r5, r6, #24
 80296d0:	681b      	ldr	r3, [r3, #0]
 80296d2:	d501      	bpl.n	80296d8 <_printf_i+0x1cc>
 80296d4:	6019      	str	r1, [r3, #0]
 80296d6:	e002      	b.n	80296de <_printf_i+0x1d2>
 80296d8:	0670      	lsls	r0, r6, #25
 80296da:	d5fb      	bpl.n	80296d4 <_printf_i+0x1c8>
 80296dc:	8019      	strh	r1, [r3, #0]
 80296de:	2300      	movs	r3, #0
 80296e0:	6123      	str	r3, [r4, #16]
 80296e2:	4615      	mov	r5, r2
 80296e4:	e7ba      	b.n	802965c <_printf_i+0x150>
 80296e6:	682b      	ldr	r3, [r5, #0]
 80296e8:	1d1a      	adds	r2, r3, #4
 80296ea:	602a      	str	r2, [r5, #0]
 80296ec:	681d      	ldr	r5, [r3, #0]
 80296ee:	6862      	ldr	r2, [r4, #4]
 80296f0:	2100      	movs	r1, #0
 80296f2:	4628      	mov	r0, r5
 80296f4:	f7d6 fd44 	bl	8000180 <memchr>
 80296f8:	b108      	cbz	r0, 80296fe <_printf_i+0x1f2>
 80296fa:	1b40      	subs	r0, r0, r5
 80296fc:	6060      	str	r0, [r4, #4]
 80296fe:	6863      	ldr	r3, [r4, #4]
 8029700:	6123      	str	r3, [r4, #16]
 8029702:	2300      	movs	r3, #0
 8029704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029708:	e7a8      	b.n	802965c <_printf_i+0x150>
 802970a:	6923      	ldr	r3, [r4, #16]
 802970c:	462a      	mov	r2, r5
 802970e:	4649      	mov	r1, r9
 8029710:	4640      	mov	r0, r8
 8029712:	47d0      	blx	sl
 8029714:	3001      	adds	r0, #1
 8029716:	d0ab      	beq.n	8029670 <_printf_i+0x164>
 8029718:	6823      	ldr	r3, [r4, #0]
 802971a:	079b      	lsls	r3, r3, #30
 802971c:	d413      	bmi.n	8029746 <_printf_i+0x23a>
 802971e:	68e0      	ldr	r0, [r4, #12]
 8029720:	9b03      	ldr	r3, [sp, #12]
 8029722:	4298      	cmp	r0, r3
 8029724:	bfb8      	it	lt
 8029726:	4618      	movlt	r0, r3
 8029728:	e7a4      	b.n	8029674 <_printf_i+0x168>
 802972a:	2301      	movs	r3, #1
 802972c:	4632      	mov	r2, r6
 802972e:	4649      	mov	r1, r9
 8029730:	4640      	mov	r0, r8
 8029732:	47d0      	blx	sl
 8029734:	3001      	adds	r0, #1
 8029736:	d09b      	beq.n	8029670 <_printf_i+0x164>
 8029738:	3501      	adds	r5, #1
 802973a:	68e3      	ldr	r3, [r4, #12]
 802973c:	9903      	ldr	r1, [sp, #12]
 802973e:	1a5b      	subs	r3, r3, r1
 8029740:	42ab      	cmp	r3, r5
 8029742:	dcf2      	bgt.n	802972a <_printf_i+0x21e>
 8029744:	e7eb      	b.n	802971e <_printf_i+0x212>
 8029746:	2500      	movs	r5, #0
 8029748:	f104 0619 	add.w	r6, r4, #25
 802974c:	e7f5      	b.n	802973a <_printf_i+0x22e>
 802974e:	bf00      	nop
 8029750:	08033fad 	.word	0x08033fad
 8029754:	08033fbe 	.word	0x08033fbe

08029758 <iprintf>:
 8029758:	b40f      	push	{r0, r1, r2, r3}
 802975a:	4b0a      	ldr	r3, [pc, #40]	; (8029784 <iprintf+0x2c>)
 802975c:	b513      	push	{r0, r1, r4, lr}
 802975e:	681c      	ldr	r4, [r3, #0]
 8029760:	b124      	cbz	r4, 802976c <iprintf+0x14>
 8029762:	69a3      	ldr	r3, [r4, #24]
 8029764:	b913      	cbnz	r3, 802976c <iprintf+0x14>
 8029766:	4620      	mov	r0, r4
 8029768:	f001 f98a 	bl	802aa80 <__sinit>
 802976c:	ab05      	add	r3, sp, #20
 802976e:	9a04      	ldr	r2, [sp, #16]
 8029770:	68a1      	ldr	r1, [r4, #8]
 8029772:	9301      	str	r3, [sp, #4]
 8029774:	4620      	mov	r0, r4
 8029776:	f7ff fa55 	bl	8028c24 <_vfiprintf_r>
 802977a:	b002      	add	sp, #8
 802977c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029780:	b004      	add	sp, #16
 8029782:	4770      	bx	lr
 8029784:	200000cc 	.word	0x200000cc

08029788 <_puts_r>:
 8029788:	b570      	push	{r4, r5, r6, lr}
 802978a:	460e      	mov	r6, r1
 802978c:	4605      	mov	r5, r0
 802978e:	b118      	cbz	r0, 8029798 <_puts_r+0x10>
 8029790:	6983      	ldr	r3, [r0, #24]
 8029792:	b90b      	cbnz	r3, 8029798 <_puts_r+0x10>
 8029794:	f001 f974 	bl	802aa80 <__sinit>
 8029798:	69ab      	ldr	r3, [r5, #24]
 802979a:	68ac      	ldr	r4, [r5, #8]
 802979c:	b913      	cbnz	r3, 80297a4 <_puts_r+0x1c>
 802979e:	4628      	mov	r0, r5
 80297a0:	f001 f96e 	bl	802aa80 <__sinit>
 80297a4:	4b2c      	ldr	r3, [pc, #176]	; (8029858 <_puts_r+0xd0>)
 80297a6:	429c      	cmp	r4, r3
 80297a8:	d120      	bne.n	80297ec <_puts_r+0x64>
 80297aa:	686c      	ldr	r4, [r5, #4]
 80297ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80297ae:	07db      	lsls	r3, r3, #31
 80297b0:	d405      	bmi.n	80297be <_puts_r+0x36>
 80297b2:	89a3      	ldrh	r3, [r4, #12]
 80297b4:	0598      	lsls	r0, r3, #22
 80297b6:	d402      	bmi.n	80297be <_puts_r+0x36>
 80297b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80297ba:	f001 fa04 	bl	802abc6 <__retarget_lock_acquire_recursive>
 80297be:	89a3      	ldrh	r3, [r4, #12]
 80297c0:	0719      	lsls	r1, r3, #28
 80297c2:	d51d      	bpl.n	8029800 <_puts_r+0x78>
 80297c4:	6923      	ldr	r3, [r4, #16]
 80297c6:	b1db      	cbz	r3, 8029800 <_puts_r+0x78>
 80297c8:	3e01      	subs	r6, #1
 80297ca:	68a3      	ldr	r3, [r4, #8]
 80297cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80297d0:	3b01      	subs	r3, #1
 80297d2:	60a3      	str	r3, [r4, #8]
 80297d4:	bb39      	cbnz	r1, 8029826 <_puts_r+0x9e>
 80297d6:	2b00      	cmp	r3, #0
 80297d8:	da38      	bge.n	802984c <_puts_r+0xc4>
 80297da:	4622      	mov	r2, r4
 80297dc:	210a      	movs	r1, #10
 80297de:	4628      	mov	r0, r5
 80297e0:	f000 f8ce 	bl	8029980 <__swbuf_r>
 80297e4:	3001      	adds	r0, #1
 80297e6:	d011      	beq.n	802980c <_puts_r+0x84>
 80297e8:	250a      	movs	r5, #10
 80297ea:	e011      	b.n	8029810 <_puts_r+0x88>
 80297ec:	4b1b      	ldr	r3, [pc, #108]	; (802985c <_puts_r+0xd4>)
 80297ee:	429c      	cmp	r4, r3
 80297f0:	d101      	bne.n	80297f6 <_puts_r+0x6e>
 80297f2:	68ac      	ldr	r4, [r5, #8]
 80297f4:	e7da      	b.n	80297ac <_puts_r+0x24>
 80297f6:	4b1a      	ldr	r3, [pc, #104]	; (8029860 <_puts_r+0xd8>)
 80297f8:	429c      	cmp	r4, r3
 80297fa:	bf08      	it	eq
 80297fc:	68ec      	ldreq	r4, [r5, #12]
 80297fe:	e7d5      	b.n	80297ac <_puts_r+0x24>
 8029800:	4621      	mov	r1, r4
 8029802:	4628      	mov	r0, r5
 8029804:	f000 f920 	bl	8029a48 <__swsetup_r>
 8029808:	2800      	cmp	r0, #0
 802980a:	d0dd      	beq.n	80297c8 <_puts_r+0x40>
 802980c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8029810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029812:	07da      	lsls	r2, r3, #31
 8029814:	d405      	bmi.n	8029822 <_puts_r+0x9a>
 8029816:	89a3      	ldrh	r3, [r4, #12]
 8029818:	059b      	lsls	r3, r3, #22
 802981a:	d402      	bmi.n	8029822 <_puts_r+0x9a>
 802981c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802981e:	f001 f9d3 	bl	802abc8 <__retarget_lock_release_recursive>
 8029822:	4628      	mov	r0, r5
 8029824:	bd70      	pop	{r4, r5, r6, pc}
 8029826:	2b00      	cmp	r3, #0
 8029828:	da04      	bge.n	8029834 <_puts_r+0xac>
 802982a:	69a2      	ldr	r2, [r4, #24]
 802982c:	429a      	cmp	r2, r3
 802982e:	dc06      	bgt.n	802983e <_puts_r+0xb6>
 8029830:	290a      	cmp	r1, #10
 8029832:	d004      	beq.n	802983e <_puts_r+0xb6>
 8029834:	6823      	ldr	r3, [r4, #0]
 8029836:	1c5a      	adds	r2, r3, #1
 8029838:	6022      	str	r2, [r4, #0]
 802983a:	7019      	strb	r1, [r3, #0]
 802983c:	e7c5      	b.n	80297ca <_puts_r+0x42>
 802983e:	4622      	mov	r2, r4
 8029840:	4628      	mov	r0, r5
 8029842:	f000 f89d 	bl	8029980 <__swbuf_r>
 8029846:	3001      	adds	r0, #1
 8029848:	d1bf      	bne.n	80297ca <_puts_r+0x42>
 802984a:	e7df      	b.n	802980c <_puts_r+0x84>
 802984c:	6823      	ldr	r3, [r4, #0]
 802984e:	250a      	movs	r5, #10
 8029850:	1c5a      	adds	r2, r3, #1
 8029852:	6022      	str	r2, [r4, #0]
 8029854:	701d      	strb	r5, [r3, #0]
 8029856:	e7db      	b.n	8029810 <_puts_r+0x88>
 8029858:	08034080 	.word	0x08034080
 802985c:	080340a0 	.word	0x080340a0
 8029860:	08034060 	.word	0x08034060

08029864 <puts>:
 8029864:	4b02      	ldr	r3, [pc, #8]	; (8029870 <puts+0xc>)
 8029866:	4601      	mov	r1, r0
 8029868:	6818      	ldr	r0, [r3, #0]
 802986a:	f7ff bf8d 	b.w	8029788 <_puts_r>
 802986e:	bf00      	nop
 8029870:	200000cc 	.word	0x200000cc

08029874 <siscanf>:
 8029874:	b40e      	push	{r1, r2, r3}
 8029876:	b510      	push	{r4, lr}
 8029878:	b09f      	sub	sp, #124	; 0x7c
 802987a:	ac21      	add	r4, sp, #132	; 0x84
 802987c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8029880:	f854 2b04 	ldr.w	r2, [r4], #4
 8029884:	9201      	str	r2, [sp, #4]
 8029886:	f8ad 101c 	strh.w	r1, [sp, #28]
 802988a:	9004      	str	r0, [sp, #16]
 802988c:	9008      	str	r0, [sp, #32]
 802988e:	f7d6 fcc7 	bl	8000220 <strlen>
 8029892:	4b0c      	ldr	r3, [pc, #48]	; (80298c4 <siscanf+0x50>)
 8029894:	9005      	str	r0, [sp, #20]
 8029896:	9009      	str	r0, [sp, #36]	; 0x24
 8029898:	930d      	str	r3, [sp, #52]	; 0x34
 802989a:	480b      	ldr	r0, [pc, #44]	; (80298c8 <siscanf+0x54>)
 802989c:	9a01      	ldr	r2, [sp, #4]
 802989e:	6800      	ldr	r0, [r0, #0]
 80298a0:	9403      	str	r4, [sp, #12]
 80298a2:	2300      	movs	r3, #0
 80298a4:	9311      	str	r3, [sp, #68]	; 0x44
 80298a6:	9316      	str	r3, [sp, #88]	; 0x58
 80298a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80298ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80298b0:	a904      	add	r1, sp, #16
 80298b2:	4623      	mov	r3, r4
 80298b4:	f001 ff0e 	bl	802b6d4 <__ssvfiscanf_r>
 80298b8:	b01f      	add	sp, #124	; 0x7c
 80298ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80298be:	b003      	add	sp, #12
 80298c0:	4770      	bx	lr
 80298c2:	bf00      	nop
 80298c4:	080298ef 	.word	0x080298ef
 80298c8:	200000cc 	.word	0x200000cc

080298cc <__sread>:
 80298cc:	b510      	push	{r4, lr}
 80298ce:	460c      	mov	r4, r1
 80298d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80298d4:	f002 f9c8 	bl	802bc68 <_read_r>
 80298d8:	2800      	cmp	r0, #0
 80298da:	bfab      	itete	ge
 80298dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80298de:	89a3      	ldrhlt	r3, [r4, #12]
 80298e0:	181b      	addge	r3, r3, r0
 80298e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80298e6:	bfac      	ite	ge
 80298e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80298ea:	81a3      	strhlt	r3, [r4, #12]
 80298ec:	bd10      	pop	{r4, pc}

080298ee <__seofread>:
 80298ee:	2000      	movs	r0, #0
 80298f0:	4770      	bx	lr

080298f2 <__swrite>:
 80298f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80298f6:	461f      	mov	r7, r3
 80298f8:	898b      	ldrh	r3, [r1, #12]
 80298fa:	05db      	lsls	r3, r3, #23
 80298fc:	4605      	mov	r5, r0
 80298fe:	460c      	mov	r4, r1
 8029900:	4616      	mov	r6, r2
 8029902:	d505      	bpl.n	8029910 <__swrite+0x1e>
 8029904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029908:	2302      	movs	r3, #2
 802990a:	2200      	movs	r2, #0
 802990c:	f001 f95e 	bl	802abcc <_lseek_r>
 8029910:	89a3      	ldrh	r3, [r4, #12]
 8029912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802991a:	81a3      	strh	r3, [r4, #12]
 802991c:	4632      	mov	r2, r6
 802991e:	463b      	mov	r3, r7
 8029920:	4628      	mov	r0, r5
 8029922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029926:	f000 b87d 	b.w	8029a24 <_write_r>

0802992a <__sseek>:
 802992a:	b510      	push	{r4, lr}
 802992c:	460c      	mov	r4, r1
 802992e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029932:	f001 f94b 	bl	802abcc <_lseek_r>
 8029936:	1c43      	adds	r3, r0, #1
 8029938:	89a3      	ldrh	r3, [r4, #12]
 802993a:	bf15      	itete	ne
 802993c:	6560      	strne	r0, [r4, #84]	; 0x54
 802993e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8029942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8029946:	81a3      	strheq	r3, [r4, #12]
 8029948:	bf18      	it	ne
 802994a:	81a3      	strhne	r3, [r4, #12]
 802994c:	bd10      	pop	{r4, pc}

0802994e <__sclose>:
 802994e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029952:	f000 b8ef 	b.w	8029b34 <_close_r>

08029956 <strncmp>:
 8029956:	b510      	push	{r4, lr}
 8029958:	b17a      	cbz	r2, 802997a <strncmp+0x24>
 802995a:	4603      	mov	r3, r0
 802995c:	3901      	subs	r1, #1
 802995e:	1884      	adds	r4, r0, r2
 8029960:	f813 0b01 	ldrb.w	r0, [r3], #1
 8029964:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8029968:	4290      	cmp	r0, r2
 802996a:	d101      	bne.n	8029970 <strncmp+0x1a>
 802996c:	42a3      	cmp	r3, r4
 802996e:	d101      	bne.n	8029974 <strncmp+0x1e>
 8029970:	1a80      	subs	r0, r0, r2
 8029972:	bd10      	pop	{r4, pc}
 8029974:	2800      	cmp	r0, #0
 8029976:	d1f3      	bne.n	8029960 <strncmp+0xa>
 8029978:	e7fa      	b.n	8029970 <strncmp+0x1a>
 802997a:	4610      	mov	r0, r2
 802997c:	e7f9      	b.n	8029972 <strncmp+0x1c>
	...

08029980 <__swbuf_r>:
 8029980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029982:	460e      	mov	r6, r1
 8029984:	4614      	mov	r4, r2
 8029986:	4605      	mov	r5, r0
 8029988:	b118      	cbz	r0, 8029992 <__swbuf_r+0x12>
 802998a:	6983      	ldr	r3, [r0, #24]
 802998c:	b90b      	cbnz	r3, 8029992 <__swbuf_r+0x12>
 802998e:	f001 f877 	bl	802aa80 <__sinit>
 8029992:	4b21      	ldr	r3, [pc, #132]	; (8029a18 <__swbuf_r+0x98>)
 8029994:	429c      	cmp	r4, r3
 8029996:	d12b      	bne.n	80299f0 <__swbuf_r+0x70>
 8029998:	686c      	ldr	r4, [r5, #4]
 802999a:	69a3      	ldr	r3, [r4, #24]
 802999c:	60a3      	str	r3, [r4, #8]
 802999e:	89a3      	ldrh	r3, [r4, #12]
 80299a0:	071a      	lsls	r2, r3, #28
 80299a2:	d52f      	bpl.n	8029a04 <__swbuf_r+0x84>
 80299a4:	6923      	ldr	r3, [r4, #16]
 80299a6:	b36b      	cbz	r3, 8029a04 <__swbuf_r+0x84>
 80299a8:	6923      	ldr	r3, [r4, #16]
 80299aa:	6820      	ldr	r0, [r4, #0]
 80299ac:	1ac0      	subs	r0, r0, r3
 80299ae:	6963      	ldr	r3, [r4, #20]
 80299b0:	b2f6      	uxtb	r6, r6
 80299b2:	4283      	cmp	r3, r0
 80299b4:	4637      	mov	r7, r6
 80299b6:	dc04      	bgt.n	80299c2 <__swbuf_r+0x42>
 80299b8:	4621      	mov	r1, r4
 80299ba:	4628      	mov	r0, r5
 80299bc:	f000 ffcc 	bl	802a958 <_fflush_r>
 80299c0:	bb30      	cbnz	r0, 8029a10 <__swbuf_r+0x90>
 80299c2:	68a3      	ldr	r3, [r4, #8]
 80299c4:	3b01      	subs	r3, #1
 80299c6:	60a3      	str	r3, [r4, #8]
 80299c8:	6823      	ldr	r3, [r4, #0]
 80299ca:	1c5a      	adds	r2, r3, #1
 80299cc:	6022      	str	r2, [r4, #0]
 80299ce:	701e      	strb	r6, [r3, #0]
 80299d0:	6963      	ldr	r3, [r4, #20]
 80299d2:	3001      	adds	r0, #1
 80299d4:	4283      	cmp	r3, r0
 80299d6:	d004      	beq.n	80299e2 <__swbuf_r+0x62>
 80299d8:	89a3      	ldrh	r3, [r4, #12]
 80299da:	07db      	lsls	r3, r3, #31
 80299dc:	d506      	bpl.n	80299ec <__swbuf_r+0x6c>
 80299de:	2e0a      	cmp	r6, #10
 80299e0:	d104      	bne.n	80299ec <__swbuf_r+0x6c>
 80299e2:	4621      	mov	r1, r4
 80299e4:	4628      	mov	r0, r5
 80299e6:	f000 ffb7 	bl	802a958 <_fflush_r>
 80299ea:	b988      	cbnz	r0, 8029a10 <__swbuf_r+0x90>
 80299ec:	4638      	mov	r0, r7
 80299ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80299f0:	4b0a      	ldr	r3, [pc, #40]	; (8029a1c <__swbuf_r+0x9c>)
 80299f2:	429c      	cmp	r4, r3
 80299f4:	d101      	bne.n	80299fa <__swbuf_r+0x7a>
 80299f6:	68ac      	ldr	r4, [r5, #8]
 80299f8:	e7cf      	b.n	802999a <__swbuf_r+0x1a>
 80299fa:	4b09      	ldr	r3, [pc, #36]	; (8029a20 <__swbuf_r+0xa0>)
 80299fc:	429c      	cmp	r4, r3
 80299fe:	bf08      	it	eq
 8029a00:	68ec      	ldreq	r4, [r5, #12]
 8029a02:	e7ca      	b.n	802999a <__swbuf_r+0x1a>
 8029a04:	4621      	mov	r1, r4
 8029a06:	4628      	mov	r0, r5
 8029a08:	f000 f81e 	bl	8029a48 <__swsetup_r>
 8029a0c:	2800      	cmp	r0, #0
 8029a0e:	d0cb      	beq.n	80299a8 <__swbuf_r+0x28>
 8029a10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8029a14:	e7ea      	b.n	80299ec <__swbuf_r+0x6c>
 8029a16:	bf00      	nop
 8029a18:	08034080 	.word	0x08034080
 8029a1c:	080340a0 	.word	0x080340a0
 8029a20:	08034060 	.word	0x08034060

08029a24 <_write_r>:
 8029a24:	b538      	push	{r3, r4, r5, lr}
 8029a26:	4d07      	ldr	r5, [pc, #28]	; (8029a44 <_write_r+0x20>)
 8029a28:	4604      	mov	r4, r0
 8029a2a:	4608      	mov	r0, r1
 8029a2c:	4611      	mov	r1, r2
 8029a2e:	2200      	movs	r2, #0
 8029a30:	602a      	str	r2, [r5, #0]
 8029a32:	461a      	mov	r2, r3
 8029a34:	f7ec fec8 	bl	80167c8 <_write>
 8029a38:	1c43      	adds	r3, r0, #1
 8029a3a:	d102      	bne.n	8029a42 <_write_r+0x1e>
 8029a3c:	682b      	ldr	r3, [r5, #0]
 8029a3e:	b103      	cbz	r3, 8029a42 <_write_r+0x1e>
 8029a40:	6023      	str	r3, [r4, #0]
 8029a42:	bd38      	pop	{r3, r4, r5, pc}
 8029a44:	20007fb8 	.word	0x20007fb8

08029a48 <__swsetup_r>:
 8029a48:	4b32      	ldr	r3, [pc, #200]	; (8029b14 <__swsetup_r+0xcc>)
 8029a4a:	b570      	push	{r4, r5, r6, lr}
 8029a4c:	681d      	ldr	r5, [r3, #0]
 8029a4e:	4606      	mov	r6, r0
 8029a50:	460c      	mov	r4, r1
 8029a52:	b125      	cbz	r5, 8029a5e <__swsetup_r+0x16>
 8029a54:	69ab      	ldr	r3, [r5, #24]
 8029a56:	b913      	cbnz	r3, 8029a5e <__swsetup_r+0x16>
 8029a58:	4628      	mov	r0, r5
 8029a5a:	f001 f811 	bl	802aa80 <__sinit>
 8029a5e:	4b2e      	ldr	r3, [pc, #184]	; (8029b18 <__swsetup_r+0xd0>)
 8029a60:	429c      	cmp	r4, r3
 8029a62:	d10f      	bne.n	8029a84 <__swsetup_r+0x3c>
 8029a64:	686c      	ldr	r4, [r5, #4]
 8029a66:	89a3      	ldrh	r3, [r4, #12]
 8029a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029a6c:	0719      	lsls	r1, r3, #28
 8029a6e:	d42c      	bmi.n	8029aca <__swsetup_r+0x82>
 8029a70:	06dd      	lsls	r5, r3, #27
 8029a72:	d411      	bmi.n	8029a98 <__swsetup_r+0x50>
 8029a74:	2309      	movs	r3, #9
 8029a76:	6033      	str	r3, [r6, #0]
 8029a78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8029a7c:	81a3      	strh	r3, [r4, #12]
 8029a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8029a82:	e03e      	b.n	8029b02 <__swsetup_r+0xba>
 8029a84:	4b25      	ldr	r3, [pc, #148]	; (8029b1c <__swsetup_r+0xd4>)
 8029a86:	429c      	cmp	r4, r3
 8029a88:	d101      	bne.n	8029a8e <__swsetup_r+0x46>
 8029a8a:	68ac      	ldr	r4, [r5, #8]
 8029a8c:	e7eb      	b.n	8029a66 <__swsetup_r+0x1e>
 8029a8e:	4b24      	ldr	r3, [pc, #144]	; (8029b20 <__swsetup_r+0xd8>)
 8029a90:	429c      	cmp	r4, r3
 8029a92:	bf08      	it	eq
 8029a94:	68ec      	ldreq	r4, [r5, #12]
 8029a96:	e7e6      	b.n	8029a66 <__swsetup_r+0x1e>
 8029a98:	0758      	lsls	r0, r3, #29
 8029a9a:	d512      	bpl.n	8029ac2 <__swsetup_r+0x7a>
 8029a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029a9e:	b141      	cbz	r1, 8029ab2 <__swsetup_r+0x6a>
 8029aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029aa4:	4299      	cmp	r1, r3
 8029aa6:	d002      	beq.n	8029aae <__swsetup_r+0x66>
 8029aa8:	4630      	mov	r0, r6
 8029aaa:	f001 fca9 	bl	802b400 <_free_r>
 8029aae:	2300      	movs	r3, #0
 8029ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8029ab2:	89a3      	ldrh	r3, [r4, #12]
 8029ab4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8029ab8:	81a3      	strh	r3, [r4, #12]
 8029aba:	2300      	movs	r3, #0
 8029abc:	6063      	str	r3, [r4, #4]
 8029abe:	6923      	ldr	r3, [r4, #16]
 8029ac0:	6023      	str	r3, [r4, #0]
 8029ac2:	89a3      	ldrh	r3, [r4, #12]
 8029ac4:	f043 0308 	orr.w	r3, r3, #8
 8029ac8:	81a3      	strh	r3, [r4, #12]
 8029aca:	6923      	ldr	r3, [r4, #16]
 8029acc:	b94b      	cbnz	r3, 8029ae2 <__swsetup_r+0x9a>
 8029ace:	89a3      	ldrh	r3, [r4, #12]
 8029ad0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8029ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029ad8:	d003      	beq.n	8029ae2 <__swsetup_r+0x9a>
 8029ada:	4621      	mov	r1, r4
 8029adc:	4630      	mov	r0, r6
 8029ade:	f001 f8ad 	bl	802ac3c <__smakebuf_r>
 8029ae2:	89a0      	ldrh	r0, [r4, #12]
 8029ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029ae8:	f010 0301 	ands.w	r3, r0, #1
 8029aec:	d00a      	beq.n	8029b04 <__swsetup_r+0xbc>
 8029aee:	2300      	movs	r3, #0
 8029af0:	60a3      	str	r3, [r4, #8]
 8029af2:	6963      	ldr	r3, [r4, #20]
 8029af4:	425b      	negs	r3, r3
 8029af6:	61a3      	str	r3, [r4, #24]
 8029af8:	6923      	ldr	r3, [r4, #16]
 8029afa:	b943      	cbnz	r3, 8029b0e <__swsetup_r+0xc6>
 8029afc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8029b00:	d1ba      	bne.n	8029a78 <__swsetup_r+0x30>
 8029b02:	bd70      	pop	{r4, r5, r6, pc}
 8029b04:	0781      	lsls	r1, r0, #30
 8029b06:	bf58      	it	pl
 8029b08:	6963      	ldrpl	r3, [r4, #20]
 8029b0a:	60a3      	str	r3, [r4, #8]
 8029b0c:	e7f4      	b.n	8029af8 <__swsetup_r+0xb0>
 8029b0e:	2000      	movs	r0, #0
 8029b10:	e7f7      	b.n	8029b02 <__swsetup_r+0xba>
 8029b12:	bf00      	nop
 8029b14:	200000cc 	.word	0x200000cc
 8029b18:	08034080 	.word	0x08034080
 8029b1c:	080340a0 	.word	0x080340a0
 8029b20:	08034060 	.word	0x08034060

08029b24 <abort>:
 8029b24:	b508      	push	{r3, lr}
 8029b26:	2006      	movs	r0, #6
 8029b28:	f002 f920 	bl	802bd6c <raise>
 8029b2c:	2001      	movs	r0, #1
 8029b2e:	f7d9 fcbe 	bl	80034ae <_exit>
	...

08029b34 <_close_r>:
 8029b34:	b538      	push	{r3, r4, r5, lr}
 8029b36:	4d06      	ldr	r5, [pc, #24]	; (8029b50 <_close_r+0x1c>)
 8029b38:	2300      	movs	r3, #0
 8029b3a:	4604      	mov	r4, r0
 8029b3c:	4608      	mov	r0, r1
 8029b3e:	602b      	str	r3, [r5, #0]
 8029b40:	f7d9 fcdc 	bl	80034fc <_close>
 8029b44:	1c43      	adds	r3, r0, #1
 8029b46:	d102      	bne.n	8029b4e <_close_r+0x1a>
 8029b48:	682b      	ldr	r3, [r5, #0]
 8029b4a:	b103      	cbz	r3, 8029b4e <_close_r+0x1a>
 8029b4c:	6023      	str	r3, [r4, #0]
 8029b4e:	bd38      	pop	{r3, r4, r5, pc}
 8029b50:	20007fb8 	.word	0x20007fb8

08029b54 <quorem>:
 8029b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029b58:	6903      	ldr	r3, [r0, #16]
 8029b5a:	690c      	ldr	r4, [r1, #16]
 8029b5c:	42a3      	cmp	r3, r4
 8029b5e:	4607      	mov	r7, r0
 8029b60:	f2c0 8081 	blt.w	8029c66 <quorem+0x112>
 8029b64:	3c01      	subs	r4, #1
 8029b66:	f101 0814 	add.w	r8, r1, #20
 8029b6a:	f100 0514 	add.w	r5, r0, #20
 8029b6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8029b72:	9301      	str	r3, [sp, #4]
 8029b74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8029b78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8029b7c:	3301      	adds	r3, #1
 8029b7e:	429a      	cmp	r2, r3
 8029b80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8029b84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8029b88:	fbb2 f6f3 	udiv	r6, r2, r3
 8029b8c:	d331      	bcc.n	8029bf2 <quorem+0x9e>
 8029b8e:	f04f 0e00 	mov.w	lr, #0
 8029b92:	4640      	mov	r0, r8
 8029b94:	46ac      	mov	ip, r5
 8029b96:	46f2      	mov	sl, lr
 8029b98:	f850 2b04 	ldr.w	r2, [r0], #4
 8029b9c:	b293      	uxth	r3, r2
 8029b9e:	fb06 e303 	mla	r3, r6, r3, lr
 8029ba2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8029ba6:	b29b      	uxth	r3, r3
 8029ba8:	ebaa 0303 	sub.w	r3, sl, r3
 8029bac:	f8dc a000 	ldr.w	sl, [ip]
 8029bb0:	0c12      	lsrs	r2, r2, #16
 8029bb2:	fa13 f38a 	uxtah	r3, r3, sl
 8029bb6:	fb06 e202 	mla	r2, r6, r2, lr
 8029bba:	9300      	str	r3, [sp, #0]
 8029bbc:	9b00      	ldr	r3, [sp, #0]
 8029bbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8029bc2:	b292      	uxth	r2, r2
 8029bc4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8029bc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8029bcc:	f8bd 3000 	ldrh.w	r3, [sp]
 8029bd0:	4581      	cmp	r9, r0
 8029bd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029bd6:	f84c 3b04 	str.w	r3, [ip], #4
 8029bda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8029bde:	d2db      	bcs.n	8029b98 <quorem+0x44>
 8029be0:	f855 300b 	ldr.w	r3, [r5, fp]
 8029be4:	b92b      	cbnz	r3, 8029bf2 <quorem+0x9e>
 8029be6:	9b01      	ldr	r3, [sp, #4]
 8029be8:	3b04      	subs	r3, #4
 8029bea:	429d      	cmp	r5, r3
 8029bec:	461a      	mov	r2, r3
 8029bee:	d32e      	bcc.n	8029c4e <quorem+0xfa>
 8029bf0:	613c      	str	r4, [r7, #16]
 8029bf2:	4638      	mov	r0, r7
 8029bf4:	f001 faec 	bl	802b1d0 <__mcmp>
 8029bf8:	2800      	cmp	r0, #0
 8029bfa:	db24      	blt.n	8029c46 <quorem+0xf2>
 8029bfc:	3601      	adds	r6, #1
 8029bfe:	4628      	mov	r0, r5
 8029c00:	f04f 0c00 	mov.w	ip, #0
 8029c04:	f858 2b04 	ldr.w	r2, [r8], #4
 8029c08:	f8d0 e000 	ldr.w	lr, [r0]
 8029c0c:	b293      	uxth	r3, r2
 8029c0e:	ebac 0303 	sub.w	r3, ip, r3
 8029c12:	0c12      	lsrs	r2, r2, #16
 8029c14:	fa13 f38e 	uxtah	r3, r3, lr
 8029c18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8029c1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8029c20:	b29b      	uxth	r3, r3
 8029c22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029c26:	45c1      	cmp	r9, r8
 8029c28:	f840 3b04 	str.w	r3, [r0], #4
 8029c2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8029c30:	d2e8      	bcs.n	8029c04 <quorem+0xb0>
 8029c32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8029c36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8029c3a:	b922      	cbnz	r2, 8029c46 <quorem+0xf2>
 8029c3c:	3b04      	subs	r3, #4
 8029c3e:	429d      	cmp	r5, r3
 8029c40:	461a      	mov	r2, r3
 8029c42:	d30a      	bcc.n	8029c5a <quorem+0x106>
 8029c44:	613c      	str	r4, [r7, #16]
 8029c46:	4630      	mov	r0, r6
 8029c48:	b003      	add	sp, #12
 8029c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029c4e:	6812      	ldr	r2, [r2, #0]
 8029c50:	3b04      	subs	r3, #4
 8029c52:	2a00      	cmp	r2, #0
 8029c54:	d1cc      	bne.n	8029bf0 <quorem+0x9c>
 8029c56:	3c01      	subs	r4, #1
 8029c58:	e7c7      	b.n	8029bea <quorem+0x96>
 8029c5a:	6812      	ldr	r2, [r2, #0]
 8029c5c:	3b04      	subs	r3, #4
 8029c5e:	2a00      	cmp	r2, #0
 8029c60:	d1f0      	bne.n	8029c44 <quorem+0xf0>
 8029c62:	3c01      	subs	r4, #1
 8029c64:	e7eb      	b.n	8029c3e <quorem+0xea>
 8029c66:	2000      	movs	r0, #0
 8029c68:	e7ee      	b.n	8029c48 <quorem+0xf4>
 8029c6a:	0000      	movs	r0, r0
 8029c6c:	0000      	movs	r0, r0
	...

08029c70 <_dtoa_r>:
 8029c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c74:	ed2d 8b04 	vpush	{d8-d9}
 8029c78:	ec57 6b10 	vmov	r6, r7, d0
 8029c7c:	b093      	sub	sp, #76	; 0x4c
 8029c7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8029c80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8029c84:	9106      	str	r1, [sp, #24]
 8029c86:	ee10 aa10 	vmov	sl, s0
 8029c8a:	4604      	mov	r4, r0
 8029c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8029c8e:	930c      	str	r3, [sp, #48]	; 0x30
 8029c90:	46bb      	mov	fp, r7
 8029c92:	b975      	cbnz	r5, 8029cb2 <_dtoa_r+0x42>
 8029c94:	2010      	movs	r0, #16
 8029c96:	f001 f811 	bl	802acbc <malloc>
 8029c9a:	4602      	mov	r2, r0
 8029c9c:	6260      	str	r0, [r4, #36]	; 0x24
 8029c9e:	b920      	cbnz	r0, 8029caa <_dtoa_r+0x3a>
 8029ca0:	4ba7      	ldr	r3, [pc, #668]	; (8029f40 <_dtoa_r+0x2d0>)
 8029ca2:	21ea      	movs	r1, #234	; 0xea
 8029ca4:	48a7      	ldr	r0, [pc, #668]	; (8029f44 <_dtoa_r+0x2d4>)
 8029ca6:	f7fe fef9 	bl	8028a9c <__assert_func>
 8029caa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8029cae:	6005      	str	r5, [r0, #0]
 8029cb0:	60c5      	str	r5, [r0, #12]
 8029cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029cb4:	6819      	ldr	r1, [r3, #0]
 8029cb6:	b151      	cbz	r1, 8029cce <_dtoa_r+0x5e>
 8029cb8:	685a      	ldr	r2, [r3, #4]
 8029cba:	604a      	str	r2, [r1, #4]
 8029cbc:	2301      	movs	r3, #1
 8029cbe:	4093      	lsls	r3, r2
 8029cc0:	608b      	str	r3, [r1, #8]
 8029cc2:	4620      	mov	r0, r4
 8029cc4:	f001 f842 	bl	802ad4c <_Bfree>
 8029cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029cca:	2200      	movs	r2, #0
 8029ccc:	601a      	str	r2, [r3, #0]
 8029cce:	1e3b      	subs	r3, r7, #0
 8029cd0:	bfaa      	itet	ge
 8029cd2:	2300      	movge	r3, #0
 8029cd4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8029cd8:	f8c8 3000 	strge.w	r3, [r8]
 8029cdc:	4b9a      	ldr	r3, [pc, #616]	; (8029f48 <_dtoa_r+0x2d8>)
 8029cde:	bfbc      	itt	lt
 8029ce0:	2201      	movlt	r2, #1
 8029ce2:	f8c8 2000 	strlt.w	r2, [r8]
 8029ce6:	ea33 030b 	bics.w	r3, r3, fp
 8029cea:	d11b      	bne.n	8029d24 <_dtoa_r+0xb4>
 8029cec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029cee:	f242 730f 	movw	r3, #9999	; 0x270f
 8029cf2:	6013      	str	r3, [r2, #0]
 8029cf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8029cf8:	4333      	orrs	r3, r6
 8029cfa:	f000 8592 	beq.w	802a822 <_dtoa_r+0xbb2>
 8029cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029d00:	b963      	cbnz	r3, 8029d1c <_dtoa_r+0xac>
 8029d02:	4b92      	ldr	r3, [pc, #584]	; (8029f4c <_dtoa_r+0x2dc>)
 8029d04:	e022      	b.n	8029d4c <_dtoa_r+0xdc>
 8029d06:	4b92      	ldr	r3, [pc, #584]	; (8029f50 <_dtoa_r+0x2e0>)
 8029d08:	9301      	str	r3, [sp, #4]
 8029d0a:	3308      	adds	r3, #8
 8029d0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8029d0e:	6013      	str	r3, [r2, #0]
 8029d10:	9801      	ldr	r0, [sp, #4]
 8029d12:	b013      	add	sp, #76	; 0x4c
 8029d14:	ecbd 8b04 	vpop	{d8-d9}
 8029d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d1c:	4b8b      	ldr	r3, [pc, #556]	; (8029f4c <_dtoa_r+0x2dc>)
 8029d1e:	9301      	str	r3, [sp, #4]
 8029d20:	3303      	adds	r3, #3
 8029d22:	e7f3      	b.n	8029d0c <_dtoa_r+0x9c>
 8029d24:	2200      	movs	r2, #0
 8029d26:	2300      	movs	r3, #0
 8029d28:	4650      	mov	r0, sl
 8029d2a:	4659      	mov	r1, fp
 8029d2c:	f7d6 fea4 	bl	8000a78 <__aeabi_dcmpeq>
 8029d30:	ec4b ab19 	vmov	d9, sl, fp
 8029d34:	4680      	mov	r8, r0
 8029d36:	b158      	cbz	r0, 8029d50 <_dtoa_r+0xe0>
 8029d38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029d3a:	2301      	movs	r3, #1
 8029d3c:	6013      	str	r3, [r2, #0]
 8029d3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029d40:	2b00      	cmp	r3, #0
 8029d42:	f000 856b 	beq.w	802a81c <_dtoa_r+0xbac>
 8029d46:	4883      	ldr	r0, [pc, #524]	; (8029f54 <_dtoa_r+0x2e4>)
 8029d48:	6018      	str	r0, [r3, #0]
 8029d4a:	1e43      	subs	r3, r0, #1
 8029d4c:	9301      	str	r3, [sp, #4]
 8029d4e:	e7df      	b.n	8029d10 <_dtoa_r+0xa0>
 8029d50:	ec4b ab10 	vmov	d0, sl, fp
 8029d54:	aa10      	add	r2, sp, #64	; 0x40
 8029d56:	a911      	add	r1, sp, #68	; 0x44
 8029d58:	4620      	mov	r0, r4
 8029d5a:	f001 fadf 	bl	802b31c <__d2b>
 8029d5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8029d62:	ee08 0a10 	vmov	s16, r0
 8029d66:	2d00      	cmp	r5, #0
 8029d68:	f000 8084 	beq.w	8029e74 <_dtoa_r+0x204>
 8029d6c:	ee19 3a90 	vmov	r3, s19
 8029d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8029d74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8029d78:	4656      	mov	r6, sl
 8029d7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8029d7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8029d82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8029d86:	4b74      	ldr	r3, [pc, #464]	; (8029f58 <_dtoa_r+0x2e8>)
 8029d88:	2200      	movs	r2, #0
 8029d8a:	4630      	mov	r0, r6
 8029d8c:	4639      	mov	r1, r7
 8029d8e:	f7d6 fa53 	bl	8000238 <__aeabi_dsub>
 8029d92:	a365      	add	r3, pc, #404	; (adr r3, 8029f28 <_dtoa_r+0x2b8>)
 8029d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029d98:	f7d6 fc06 	bl	80005a8 <__aeabi_dmul>
 8029d9c:	a364      	add	r3, pc, #400	; (adr r3, 8029f30 <_dtoa_r+0x2c0>)
 8029d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029da2:	f7d6 fa4b 	bl	800023c <__adddf3>
 8029da6:	4606      	mov	r6, r0
 8029da8:	4628      	mov	r0, r5
 8029daa:	460f      	mov	r7, r1
 8029dac:	f7d6 fb92 	bl	80004d4 <__aeabi_i2d>
 8029db0:	a361      	add	r3, pc, #388	; (adr r3, 8029f38 <_dtoa_r+0x2c8>)
 8029db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029db6:	f7d6 fbf7 	bl	80005a8 <__aeabi_dmul>
 8029dba:	4602      	mov	r2, r0
 8029dbc:	460b      	mov	r3, r1
 8029dbe:	4630      	mov	r0, r6
 8029dc0:	4639      	mov	r1, r7
 8029dc2:	f7d6 fa3b 	bl	800023c <__adddf3>
 8029dc6:	4606      	mov	r6, r0
 8029dc8:	460f      	mov	r7, r1
 8029dca:	f7d6 fe9d 	bl	8000b08 <__aeabi_d2iz>
 8029dce:	2200      	movs	r2, #0
 8029dd0:	9000      	str	r0, [sp, #0]
 8029dd2:	2300      	movs	r3, #0
 8029dd4:	4630      	mov	r0, r6
 8029dd6:	4639      	mov	r1, r7
 8029dd8:	f7d6 fe58 	bl	8000a8c <__aeabi_dcmplt>
 8029ddc:	b150      	cbz	r0, 8029df4 <_dtoa_r+0x184>
 8029dde:	9800      	ldr	r0, [sp, #0]
 8029de0:	f7d6 fb78 	bl	80004d4 <__aeabi_i2d>
 8029de4:	4632      	mov	r2, r6
 8029de6:	463b      	mov	r3, r7
 8029de8:	f7d6 fe46 	bl	8000a78 <__aeabi_dcmpeq>
 8029dec:	b910      	cbnz	r0, 8029df4 <_dtoa_r+0x184>
 8029dee:	9b00      	ldr	r3, [sp, #0]
 8029df0:	3b01      	subs	r3, #1
 8029df2:	9300      	str	r3, [sp, #0]
 8029df4:	9b00      	ldr	r3, [sp, #0]
 8029df6:	2b16      	cmp	r3, #22
 8029df8:	d85a      	bhi.n	8029eb0 <_dtoa_r+0x240>
 8029dfa:	9a00      	ldr	r2, [sp, #0]
 8029dfc:	4b57      	ldr	r3, [pc, #348]	; (8029f5c <_dtoa_r+0x2ec>)
 8029dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8029e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029e06:	ec51 0b19 	vmov	r0, r1, d9
 8029e0a:	f7d6 fe3f 	bl	8000a8c <__aeabi_dcmplt>
 8029e0e:	2800      	cmp	r0, #0
 8029e10:	d050      	beq.n	8029eb4 <_dtoa_r+0x244>
 8029e12:	9b00      	ldr	r3, [sp, #0]
 8029e14:	3b01      	subs	r3, #1
 8029e16:	9300      	str	r3, [sp, #0]
 8029e18:	2300      	movs	r3, #0
 8029e1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8029e1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8029e1e:	1b5d      	subs	r5, r3, r5
 8029e20:	1e6b      	subs	r3, r5, #1
 8029e22:	9305      	str	r3, [sp, #20]
 8029e24:	bf45      	ittet	mi
 8029e26:	f1c5 0301 	rsbmi	r3, r5, #1
 8029e2a:	9304      	strmi	r3, [sp, #16]
 8029e2c:	2300      	movpl	r3, #0
 8029e2e:	2300      	movmi	r3, #0
 8029e30:	bf4c      	ite	mi
 8029e32:	9305      	strmi	r3, [sp, #20]
 8029e34:	9304      	strpl	r3, [sp, #16]
 8029e36:	9b00      	ldr	r3, [sp, #0]
 8029e38:	2b00      	cmp	r3, #0
 8029e3a:	db3d      	blt.n	8029eb8 <_dtoa_r+0x248>
 8029e3c:	9b05      	ldr	r3, [sp, #20]
 8029e3e:	9a00      	ldr	r2, [sp, #0]
 8029e40:	920a      	str	r2, [sp, #40]	; 0x28
 8029e42:	4413      	add	r3, r2
 8029e44:	9305      	str	r3, [sp, #20]
 8029e46:	2300      	movs	r3, #0
 8029e48:	9307      	str	r3, [sp, #28]
 8029e4a:	9b06      	ldr	r3, [sp, #24]
 8029e4c:	2b09      	cmp	r3, #9
 8029e4e:	f200 8089 	bhi.w	8029f64 <_dtoa_r+0x2f4>
 8029e52:	2b05      	cmp	r3, #5
 8029e54:	bfc4      	itt	gt
 8029e56:	3b04      	subgt	r3, #4
 8029e58:	9306      	strgt	r3, [sp, #24]
 8029e5a:	9b06      	ldr	r3, [sp, #24]
 8029e5c:	f1a3 0302 	sub.w	r3, r3, #2
 8029e60:	bfcc      	ite	gt
 8029e62:	2500      	movgt	r5, #0
 8029e64:	2501      	movle	r5, #1
 8029e66:	2b03      	cmp	r3, #3
 8029e68:	f200 8087 	bhi.w	8029f7a <_dtoa_r+0x30a>
 8029e6c:	e8df f003 	tbb	[pc, r3]
 8029e70:	59383a2d 	.word	0x59383a2d
 8029e74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8029e78:	441d      	add	r5, r3
 8029e7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8029e7e:	2b20      	cmp	r3, #32
 8029e80:	bfc1      	itttt	gt
 8029e82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8029e86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8029e8a:	fa0b f303 	lslgt.w	r3, fp, r3
 8029e8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8029e92:	bfda      	itte	le
 8029e94:	f1c3 0320 	rsble	r3, r3, #32
 8029e98:	fa06 f003 	lslle.w	r0, r6, r3
 8029e9c:	4318      	orrgt	r0, r3
 8029e9e:	f7d6 fb09 	bl	80004b4 <__aeabi_ui2d>
 8029ea2:	2301      	movs	r3, #1
 8029ea4:	4606      	mov	r6, r0
 8029ea6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8029eaa:	3d01      	subs	r5, #1
 8029eac:	930e      	str	r3, [sp, #56]	; 0x38
 8029eae:	e76a      	b.n	8029d86 <_dtoa_r+0x116>
 8029eb0:	2301      	movs	r3, #1
 8029eb2:	e7b2      	b.n	8029e1a <_dtoa_r+0x1aa>
 8029eb4:	900b      	str	r0, [sp, #44]	; 0x2c
 8029eb6:	e7b1      	b.n	8029e1c <_dtoa_r+0x1ac>
 8029eb8:	9b04      	ldr	r3, [sp, #16]
 8029eba:	9a00      	ldr	r2, [sp, #0]
 8029ebc:	1a9b      	subs	r3, r3, r2
 8029ebe:	9304      	str	r3, [sp, #16]
 8029ec0:	4253      	negs	r3, r2
 8029ec2:	9307      	str	r3, [sp, #28]
 8029ec4:	2300      	movs	r3, #0
 8029ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8029ec8:	e7bf      	b.n	8029e4a <_dtoa_r+0x1da>
 8029eca:	2300      	movs	r3, #0
 8029ecc:	9308      	str	r3, [sp, #32]
 8029ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029ed0:	2b00      	cmp	r3, #0
 8029ed2:	dc55      	bgt.n	8029f80 <_dtoa_r+0x310>
 8029ed4:	2301      	movs	r3, #1
 8029ed6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8029eda:	461a      	mov	r2, r3
 8029edc:	9209      	str	r2, [sp, #36]	; 0x24
 8029ede:	e00c      	b.n	8029efa <_dtoa_r+0x28a>
 8029ee0:	2301      	movs	r3, #1
 8029ee2:	e7f3      	b.n	8029ecc <_dtoa_r+0x25c>
 8029ee4:	2300      	movs	r3, #0
 8029ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029ee8:	9308      	str	r3, [sp, #32]
 8029eea:	9b00      	ldr	r3, [sp, #0]
 8029eec:	4413      	add	r3, r2
 8029eee:	9302      	str	r3, [sp, #8]
 8029ef0:	3301      	adds	r3, #1
 8029ef2:	2b01      	cmp	r3, #1
 8029ef4:	9303      	str	r3, [sp, #12]
 8029ef6:	bfb8      	it	lt
 8029ef8:	2301      	movlt	r3, #1
 8029efa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8029efc:	2200      	movs	r2, #0
 8029efe:	6042      	str	r2, [r0, #4]
 8029f00:	2204      	movs	r2, #4
 8029f02:	f102 0614 	add.w	r6, r2, #20
 8029f06:	429e      	cmp	r6, r3
 8029f08:	6841      	ldr	r1, [r0, #4]
 8029f0a:	d93d      	bls.n	8029f88 <_dtoa_r+0x318>
 8029f0c:	4620      	mov	r0, r4
 8029f0e:	f000 fedd 	bl	802accc <_Balloc>
 8029f12:	9001      	str	r0, [sp, #4]
 8029f14:	2800      	cmp	r0, #0
 8029f16:	d13b      	bne.n	8029f90 <_dtoa_r+0x320>
 8029f18:	4b11      	ldr	r3, [pc, #68]	; (8029f60 <_dtoa_r+0x2f0>)
 8029f1a:	4602      	mov	r2, r0
 8029f1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8029f20:	e6c0      	b.n	8029ca4 <_dtoa_r+0x34>
 8029f22:	2301      	movs	r3, #1
 8029f24:	e7df      	b.n	8029ee6 <_dtoa_r+0x276>
 8029f26:	bf00      	nop
 8029f28:	636f4361 	.word	0x636f4361
 8029f2c:	3fd287a7 	.word	0x3fd287a7
 8029f30:	8b60c8b3 	.word	0x8b60c8b3
 8029f34:	3fc68a28 	.word	0x3fc68a28
 8029f38:	509f79fb 	.word	0x509f79fb
 8029f3c:	3fd34413 	.word	0x3fd34413
 8029f40:	08033fdc 	.word	0x08033fdc
 8029f44:	08033ff3 	.word	0x08033ff3
 8029f48:	7ff00000 	.word	0x7ff00000
 8029f4c:	08033fd8 	.word	0x08033fd8
 8029f50:	08033fcf 	.word	0x08033fcf
 8029f54:	08033e74 	.word	0x08033e74
 8029f58:	3ff80000 	.word	0x3ff80000
 8029f5c:	08034148 	.word	0x08034148
 8029f60:	0803404e 	.word	0x0803404e
 8029f64:	2501      	movs	r5, #1
 8029f66:	2300      	movs	r3, #0
 8029f68:	9306      	str	r3, [sp, #24]
 8029f6a:	9508      	str	r5, [sp, #32]
 8029f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8029f70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8029f74:	2200      	movs	r2, #0
 8029f76:	2312      	movs	r3, #18
 8029f78:	e7b0      	b.n	8029edc <_dtoa_r+0x26c>
 8029f7a:	2301      	movs	r3, #1
 8029f7c:	9308      	str	r3, [sp, #32]
 8029f7e:	e7f5      	b.n	8029f6c <_dtoa_r+0x2fc>
 8029f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029f82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8029f86:	e7b8      	b.n	8029efa <_dtoa_r+0x28a>
 8029f88:	3101      	adds	r1, #1
 8029f8a:	6041      	str	r1, [r0, #4]
 8029f8c:	0052      	lsls	r2, r2, #1
 8029f8e:	e7b8      	b.n	8029f02 <_dtoa_r+0x292>
 8029f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029f92:	9a01      	ldr	r2, [sp, #4]
 8029f94:	601a      	str	r2, [r3, #0]
 8029f96:	9b03      	ldr	r3, [sp, #12]
 8029f98:	2b0e      	cmp	r3, #14
 8029f9a:	f200 809d 	bhi.w	802a0d8 <_dtoa_r+0x468>
 8029f9e:	2d00      	cmp	r5, #0
 8029fa0:	f000 809a 	beq.w	802a0d8 <_dtoa_r+0x468>
 8029fa4:	9b00      	ldr	r3, [sp, #0]
 8029fa6:	2b00      	cmp	r3, #0
 8029fa8:	dd32      	ble.n	802a010 <_dtoa_r+0x3a0>
 8029faa:	4ab7      	ldr	r2, [pc, #732]	; (802a288 <_dtoa_r+0x618>)
 8029fac:	f003 030f 	and.w	r3, r3, #15
 8029fb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8029fb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8029fb8:	9b00      	ldr	r3, [sp, #0]
 8029fba:	05d8      	lsls	r0, r3, #23
 8029fbc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8029fc0:	d516      	bpl.n	8029ff0 <_dtoa_r+0x380>
 8029fc2:	4bb2      	ldr	r3, [pc, #712]	; (802a28c <_dtoa_r+0x61c>)
 8029fc4:	ec51 0b19 	vmov	r0, r1, d9
 8029fc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8029fcc:	f7d6 fc16 	bl	80007fc <__aeabi_ddiv>
 8029fd0:	f007 070f 	and.w	r7, r7, #15
 8029fd4:	4682      	mov	sl, r0
 8029fd6:	468b      	mov	fp, r1
 8029fd8:	2503      	movs	r5, #3
 8029fda:	4eac      	ldr	r6, [pc, #688]	; (802a28c <_dtoa_r+0x61c>)
 8029fdc:	b957      	cbnz	r7, 8029ff4 <_dtoa_r+0x384>
 8029fde:	4642      	mov	r2, r8
 8029fe0:	464b      	mov	r3, r9
 8029fe2:	4650      	mov	r0, sl
 8029fe4:	4659      	mov	r1, fp
 8029fe6:	f7d6 fc09 	bl	80007fc <__aeabi_ddiv>
 8029fea:	4682      	mov	sl, r0
 8029fec:	468b      	mov	fp, r1
 8029fee:	e028      	b.n	802a042 <_dtoa_r+0x3d2>
 8029ff0:	2502      	movs	r5, #2
 8029ff2:	e7f2      	b.n	8029fda <_dtoa_r+0x36a>
 8029ff4:	07f9      	lsls	r1, r7, #31
 8029ff6:	d508      	bpl.n	802a00a <_dtoa_r+0x39a>
 8029ff8:	4640      	mov	r0, r8
 8029ffa:	4649      	mov	r1, r9
 8029ffc:	e9d6 2300 	ldrd	r2, r3, [r6]
 802a000:	f7d6 fad2 	bl	80005a8 <__aeabi_dmul>
 802a004:	3501      	adds	r5, #1
 802a006:	4680      	mov	r8, r0
 802a008:	4689      	mov	r9, r1
 802a00a:	107f      	asrs	r7, r7, #1
 802a00c:	3608      	adds	r6, #8
 802a00e:	e7e5      	b.n	8029fdc <_dtoa_r+0x36c>
 802a010:	f000 809b 	beq.w	802a14a <_dtoa_r+0x4da>
 802a014:	9b00      	ldr	r3, [sp, #0]
 802a016:	4f9d      	ldr	r7, [pc, #628]	; (802a28c <_dtoa_r+0x61c>)
 802a018:	425e      	negs	r6, r3
 802a01a:	4b9b      	ldr	r3, [pc, #620]	; (802a288 <_dtoa_r+0x618>)
 802a01c:	f006 020f 	and.w	r2, r6, #15
 802a020:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a028:	ec51 0b19 	vmov	r0, r1, d9
 802a02c:	f7d6 fabc 	bl	80005a8 <__aeabi_dmul>
 802a030:	1136      	asrs	r6, r6, #4
 802a032:	4682      	mov	sl, r0
 802a034:	468b      	mov	fp, r1
 802a036:	2300      	movs	r3, #0
 802a038:	2502      	movs	r5, #2
 802a03a:	2e00      	cmp	r6, #0
 802a03c:	d17a      	bne.n	802a134 <_dtoa_r+0x4c4>
 802a03e:	2b00      	cmp	r3, #0
 802a040:	d1d3      	bne.n	8029fea <_dtoa_r+0x37a>
 802a042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a044:	2b00      	cmp	r3, #0
 802a046:	f000 8082 	beq.w	802a14e <_dtoa_r+0x4de>
 802a04a:	4b91      	ldr	r3, [pc, #580]	; (802a290 <_dtoa_r+0x620>)
 802a04c:	2200      	movs	r2, #0
 802a04e:	4650      	mov	r0, sl
 802a050:	4659      	mov	r1, fp
 802a052:	f7d6 fd1b 	bl	8000a8c <__aeabi_dcmplt>
 802a056:	2800      	cmp	r0, #0
 802a058:	d079      	beq.n	802a14e <_dtoa_r+0x4de>
 802a05a:	9b03      	ldr	r3, [sp, #12]
 802a05c:	2b00      	cmp	r3, #0
 802a05e:	d076      	beq.n	802a14e <_dtoa_r+0x4de>
 802a060:	9b02      	ldr	r3, [sp, #8]
 802a062:	2b00      	cmp	r3, #0
 802a064:	dd36      	ble.n	802a0d4 <_dtoa_r+0x464>
 802a066:	9b00      	ldr	r3, [sp, #0]
 802a068:	4650      	mov	r0, sl
 802a06a:	4659      	mov	r1, fp
 802a06c:	1e5f      	subs	r7, r3, #1
 802a06e:	2200      	movs	r2, #0
 802a070:	4b88      	ldr	r3, [pc, #544]	; (802a294 <_dtoa_r+0x624>)
 802a072:	f7d6 fa99 	bl	80005a8 <__aeabi_dmul>
 802a076:	9e02      	ldr	r6, [sp, #8]
 802a078:	4682      	mov	sl, r0
 802a07a:	468b      	mov	fp, r1
 802a07c:	3501      	adds	r5, #1
 802a07e:	4628      	mov	r0, r5
 802a080:	f7d6 fa28 	bl	80004d4 <__aeabi_i2d>
 802a084:	4652      	mov	r2, sl
 802a086:	465b      	mov	r3, fp
 802a088:	f7d6 fa8e 	bl	80005a8 <__aeabi_dmul>
 802a08c:	4b82      	ldr	r3, [pc, #520]	; (802a298 <_dtoa_r+0x628>)
 802a08e:	2200      	movs	r2, #0
 802a090:	f7d6 f8d4 	bl	800023c <__adddf3>
 802a094:	46d0      	mov	r8, sl
 802a096:	46d9      	mov	r9, fp
 802a098:	4682      	mov	sl, r0
 802a09a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 802a09e:	2e00      	cmp	r6, #0
 802a0a0:	d158      	bne.n	802a154 <_dtoa_r+0x4e4>
 802a0a2:	4b7e      	ldr	r3, [pc, #504]	; (802a29c <_dtoa_r+0x62c>)
 802a0a4:	2200      	movs	r2, #0
 802a0a6:	4640      	mov	r0, r8
 802a0a8:	4649      	mov	r1, r9
 802a0aa:	f7d6 f8c5 	bl	8000238 <__aeabi_dsub>
 802a0ae:	4652      	mov	r2, sl
 802a0b0:	465b      	mov	r3, fp
 802a0b2:	4680      	mov	r8, r0
 802a0b4:	4689      	mov	r9, r1
 802a0b6:	f7d6 fd07 	bl	8000ac8 <__aeabi_dcmpgt>
 802a0ba:	2800      	cmp	r0, #0
 802a0bc:	f040 8295 	bne.w	802a5ea <_dtoa_r+0x97a>
 802a0c0:	4652      	mov	r2, sl
 802a0c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802a0c6:	4640      	mov	r0, r8
 802a0c8:	4649      	mov	r1, r9
 802a0ca:	f7d6 fcdf 	bl	8000a8c <__aeabi_dcmplt>
 802a0ce:	2800      	cmp	r0, #0
 802a0d0:	f040 8289 	bne.w	802a5e6 <_dtoa_r+0x976>
 802a0d4:	ec5b ab19 	vmov	sl, fp, d9
 802a0d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802a0da:	2b00      	cmp	r3, #0
 802a0dc:	f2c0 8148 	blt.w	802a370 <_dtoa_r+0x700>
 802a0e0:	9a00      	ldr	r2, [sp, #0]
 802a0e2:	2a0e      	cmp	r2, #14
 802a0e4:	f300 8144 	bgt.w	802a370 <_dtoa_r+0x700>
 802a0e8:	4b67      	ldr	r3, [pc, #412]	; (802a288 <_dtoa_r+0x618>)
 802a0ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802a0ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 802a0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a0f4:	2b00      	cmp	r3, #0
 802a0f6:	f280 80d5 	bge.w	802a2a4 <_dtoa_r+0x634>
 802a0fa:	9b03      	ldr	r3, [sp, #12]
 802a0fc:	2b00      	cmp	r3, #0
 802a0fe:	f300 80d1 	bgt.w	802a2a4 <_dtoa_r+0x634>
 802a102:	f040 826f 	bne.w	802a5e4 <_dtoa_r+0x974>
 802a106:	4b65      	ldr	r3, [pc, #404]	; (802a29c <_dtoa_r+0x62c>)
 802a108:	2200      	movs	r2, #0
 802a10a:	4640      	mov	r0, r8
 802a10c:	4649      	mov	r1, r9
 802a10e:	f7d6 fa4b 	bl	80005a8 <__aeabi_dmul>
 802a112:	4652      	mov	r2, sl
 802a114:	465b      	mov	r3, fp
 802a116:	f7d6 fccd 	bl	8000ab4 <__aeabi_dcmpge>
 802a11a:	9e03      	ldr	r6, [sp, #12]
 802a11c:	4637      	mov	r7, r6
 802a11e:	2800      	cmp	r0, #0
 802a120:	f040 8245 	bne.w	802a5ae <_dtoa_r+0x93e>
 802a124:	9d01      	ldr	r5, [sp, #4]
 802a126:	2331      	movs	r3, #49	; 0x31
 802a128:	f805 3b01 	strb.w	r3, [r5], #1
 802a12c:	9b00      	ldr	r3, [sp, #0]
 802a12e:	3301      	adds	r3, #1
 802a130:	9300      	str	r3, [sp, #0]
 802a132:	e240      	b.n	802a5b6 <_dtoa_r+0x946>
 802a134:	07f2      	lsls	r2, r6, #31
 802a136:	d505      	bpl.n	802a144 <_dtoa_r+0x4d4>
 802a138:	e9d7 2300 	ldrd	r2, r3, [r7]
 802a13c:	f7d6 fa34 	bl	80005a8 <__aeabi_dmul>
 802a140:	3501      	adds	r5, #1
 802a142:	2301      	movs	r3, #1
 802a144:	1076      	asrs	r6, r6, #1
 802a146:	3708      	adds	r7, #8
 802a148:	e777      	b.n	802a03a <_dtoa_r+0x3ca>
 802a14a:	2502      	movs	r5, #2
 802a14c:	e779      	b.n	802a042 <_dtoa_r+0x3d2>
 802a14e:	9f00      	ldr	r7, [sp, #0]
 802a150:	9e03      	ldr	r6, [sp, #12]
 802a152:	e794      	b.n	802a07e <_dtoa_r+0x40e>
 802a154:	9901      	ldr	r1, [sp, #4]
 802a156:	4b4c      	ldr	r3, [pc, #304]	; (802a288 <_dtoa_r+0x618>)
 802a158:	4431      	add	r1, r6
 802a15a:	910d      	str	r1, [sp, #52]	; 0x34
 802a15c:	9908      	ldr	r1, [sp, #32]
 802a15e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802a162:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802a166:	2900      	cmp	r1, #0
 802a168:	d043      	beq.n	802a1f2 <_dtoa_r+0x582>
 802a16a:	494d      	ldr	r1, [pc, #308]	; (802a2a0 <_dtoa_r+0x630>)
 802a16c:	2000      	movs	r0, #0
 802a16e:	f7d6 fb45 	bl	80007fc <__aeabi_ddiv>
 802a172:	4652      	mov	r2, sl
 802a174:	465b      	mov	r3, fp
 802a176:	f7d6 f85f 	bl	8000238 <__aeabi_dsub>
 802a17a:	9d01      	ldr	r5, [sp, #4]
 802a17c:	4682      	mov	sl, r0
 802a17e:	468b      	mov	fp, r1
 802a180:	4649      	mov	r1, r9
 802a182:	4640      	mov	r0, r8
 802a184:	f7d6 fcc0 	bl	8000b08 <__aeabi_d2iz>
 802a188:	4606      	mov	r6, r0
 802a18a:	f7d6 f9a3 	bl	80004d4 <__aeabi_i2d>
 802a18e:	4602      	mov	r2, r0
 802a190:	460b      	mov	r3, r1
 802a192:	4640      	mov	r0, r8
 802a194:	4649      	mov	r1, r9
 802a196:	f7d6 f84f 	bl	8000238 <__aeabi_dsub>
 802a19a:	3630      	adds	r6, #48	; 0x30
 802a19c:	f805 6b01 	strb.w	r6, [r5], #1
 802a1a0:	4652      	mov	r2, sl
 802a1a2:	465b      	mov	r3, fp
 802a1a4:	4680      	mov	r8, r0
 802a1a6:	4689      	mov	r9, r1
 802a1a8:	f7d6 fc70 	bl	8000a8c <__aeabi_dcmplt>
 802a1ac:	2800      	cmp	r0, #0
 802a1ae:	d163      	bne.n	802a278 <_dtoa_r+0x608>
 802a1b0:	4642      	mov	r2, r8
 802a1b2:	464b      	mov	r3, r9
 802a1b4:	4936      	ldr	r1, [pc, #216]	; (802a290 <_dtoa_r+0x620>)
 802a1b6:	2000      	movs	r0, #0
 802a1b8:	f7d6 f83e 	bl	8000238 <__aeabi_dsub>
 802a1bc:	4652      	mov	r2, sl
 802a1be:	465b      	mov	r3, fp
 802a1c0:	f7d6 fc64 	bl	8000a8c <__aeabi_dcmplt>
 802a1c4:	2800      	cmp	r0, #0
 802a1c6:	f040 80b5 	bne.w	802a334 <_dtoa_r+0x6c4>
 802a1ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a1cc:	429d      	cmp	r5, r3
 802a1ce:	d081      	beq.n	802a0d4 <_dtoa_r+0x464>
 802a1d0:	4b30      	ldr	r3, [pc, #192]	; (802a294 <_dtoa_r+0x624>)
 802a1d2:	2200      	movs	r2, #0
 802a1d4:	4650      	mov	r0, sl
 802a1d6:	4659      	mov	r1, fp
 802a1d8:	f7d6 f9e6 	bl	80005a8 <__aeabi_dmul>
 802a1dc:	4b2d      	ldr	r3, [pc, #180]	; (802a294 <_dtoa_r+0x624>)
 802a1de:	4682      	mov	sl, r0
 802a1e0:	468b      	mov	fp, r1
 802a1e2:	4640      	mov	r0, r8
 802a1e4:	4649      	mov	r1, r9
 802a1e6:	2200      	movs	r2, #0
 802a1e8:	f7d6 f9de 	bl	80005a8 <__aeabi_dmul>
 802a1ec:	4680      	mov	r8, r0
 802a1ee:	4689      	mov	r9, r1
 802a1f0:	e7c6      	b.n	802a180 <_dtoa_r+0x510>
 802a1f2:	4650      	mov	r0, sl
 802a1f4:	4659      	mov	r1, fp
 802a1f6:	f7d6 f9d7 	bl	80005a8 <__aeabi_dmul>
 802a1fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a1fc:	9d01      	ldr	r5, [sp, #4]
 802a1fe:	930f      	str	r3, [sp, #60]	; 0x3c
 802a200:	4682      	mov	sl, r0
 802a202:	468b      	mov	fp, r1
 802a204:	4649      	mov	r1, r9
 802a206:	4640      	mov	r0, r8
 802a208:	f7d6 fc7e 	bl	8000b08 <__aeabi_d2iz>
 802a20c:	4606      	mov	r6, r0
 802a20e:	f7d6 f961 	bl	80004d4 <__aeabi_i2d>
 802a212:	3630      	adds	r6, #48	; 0x30
 802a214:	4602      	mov	r2, r0
 802a216:	460b      	mov	r3, r1
 802a218:	4640      	mov	r0, r8
 802a21a:	4649      	mov	r1, r9
 802a21c:	f7d6 f80c 	bl	8000238 <__aeabi_dsub>
 802a220:	f805 6b01 	strb.w	r6, [r5], #1
 802a224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a226:	429d      	cmp	r5, r3
 802a228:	4680      	mov	r8, r0
 802a22a:	4689      	mov	r9, r1
 802a22c:	f04f 0200 	mov.w	r2, #0
 802a230:	d124      	bne.n	802a27c <_dtoa_r+0x60c>
 802a232:	4b1b      	ldr	r3, [pc, #108]	; (802a2a0 <_dtoa_r+0x630>)
 802a234:	4650      	mov	r0, sl
 802a236:	4659      	mov	r1, fp
 802a238:	f7d6 f800 	bl	800023c <__adddf3>
 802a23c:	4602      	mov	r2, r0
 802a23e:	460b      	mov	r3, r1
 802a240:	4640      	mov	r0, r8
 802a242:	4649      	mov	r1, r9
 802a244:	f7d6 fc40 	bl	8000ac8 <__aeabi_dcmpgt>
 802a248:	2800      	cmp	r0, #0
 802a24a:	d173      	bne.n	802a334 <_dtoa_r+0x6c4>
 802a24c:	4652      	mov	r2, sl
 802a24e:	465b      	mov	r3, fp
 802a250:	4913      	ldr	r1, [pc, #76]	; (802a2a0 <_dtoa_r+0x630>)
 802a252:	2000      	movs	r0, #0
 802a254:	f7d5 fff0 	bl	8000238 <__aeabi_dsub>
 802a258:	4602      	mov	r2, r0
 802a25a:	460b      	mov	r3, r1
 802a25c:	4640      	mov	r0, r8
 802a25e:	4649      	mov	r1, r9
 802a260:	f7d6 fc14 	bl	8000a8c <__aeabi_dcmplt>
 802a264:	2800      	cmp	r0, #0
 802a266:	f43f af35 	beq.w	802a0d4 <_dtoa_r+0x464>
 802a26a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a26c:	1e6b      	subs	r3, r5, #1
 802a26e:	930f      	str	r3, [sp, #60]	; 0x3c
 802a270:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802a274:	2b30      	cmp	r3, #48	; 0x30
 802a276:	d0f8      	beq.n	802a26a <_dtoa_r+0x5fa>
 802a278:	9700      	str	r7, [sp, #0]
 802a27a:	e049      	b.n	802a310 <_dtoa_r+0x6a0>
 802a27c:	4b05      	ldr	r3, [pc, #20]	; (802a294 <_dtoa_r+0x624>)
 802a27e:	f7d6 f993 	bl	80005a8 <__aeabi_dmul>
 802a282:	4680      	mov	r8, r0
 802a284:	4689      	mov	r9, r1
 802a286:	e7bd      	b.n	802a204 <_dtoa_r+0x594>
 802a288:	08034148 	.word	0x08034148
 802a28c:	08034120 	.word	0x08034120
 802a290:	3ff00000 	.word	0x3ff00000
 802a294:	40240000 	.word	0x40240000
 802a298:	401c0000 	.word	0x401c0000
 802a29c:	40140000 	.word	0x40140000
 802a2a0:	3fe00000 	.word	0x3fe00000
 802a2a4:	9d01      	ldr	r5, [sp, #4]
 802a2a6:	4656      	mov	r6, sl
 802a2a8:	465f      	mov	r7, fp
 802a2aa:	4642      	mov	r2, r8
 802a2ac:	464b      	mov	r3, r9
 802a2ae:	4630      	mov	r0, r6
 802a2b0:	4639      	mov	r1, r7
 802a2b2:	f7d6 faa3 	bl	80007fc <__aeabi_ddiv>
 802a2b6:	f7d6 fc27 	bl	8000b08 <__aeabi_d2iz>
 802a2ba:	4682      	mov	sl, r0
 802a2bc:	f7d6 f90a 	bl	80004d4 <__aeabi_i2d>
 802a2c0:	4642      	mov	r2, r8
 802a2c2:	464b      	mov	r3, r9
 802a2c4:	f7d6 f970 	bl	80005a8 <__aeabi_dmul>
 802a2c8:	4602      	mov	r2, r0
 802a2ca:	460b      	mov	r3, r1
 802a2cc:	4630      	mov	r0, r6
 802a2ce:	4639      	mov	r1, r7
 802a2d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 802a2d4:	f7d5 ffb0 	bl	8000238 <__aeabi_dsub>
 802a2d8:	f805 6b01 	strb.w	r6, [r5], #1
 802a2dc:	9e01      	ldr	r6, [sp, #4]
 802a2de:	9f03      	ldr	r7, [sp, #12]
 802a2e0:	1bae      	subs	r6, r5, r6
 802a2e2:	42b7      	cmp	r7, r6
 802a2e4:	4602      	mov	r2, r0
 802a2e6:	460b      	mov	r3, r1
 802a2e8:	d135      	bne.n	802a356 <_dtoa_r+0x6e6>
 802a2ea:	f7d5 ffa7 	bl	800023c <__adddf3>
 802a2ee:	4642      	mov	r2, r8
 802a2f0:	464b      	mov	r3, r9
 802a2f2:	4606      	mov	r6, r0
 802a2f4:	460f      	mov	r7, r1
 802a2f6:	f7d6 fbe7 	bl	8000ac8 <__aeabi_dcmpgt>
 802a2fa:	b9d0      	cbnz	r0, 802a332 <_dtoa_r+0x6c2>
 802a2fc:	4642      	mov	r2, r8
 802a2fe:	464b      	mov	r3, r9
 802a300:	4630      	mov	r0, r6
 802a302:	4639      	mov	r1, r7
 802a304:	f7d6 fbb8 	bl	8000a78 <__aeabi_dcmpeq>
 802a308:	b110      	cbz	r0, 802a310 <_dtoa_r+0x6a0>
 802a30a:	f01a 0f01 	tst.w	sl, #1
 802a30e:	d110      	bne.n	802a332 <_dtoa_r+0x6c2>
 802a310:	4620      	mov	r0, r4
 802a312:	ee18 1a10 	vmov	r1, s16
 802a316:	f000 fd19 	bl	802ad4c <_Bfree>
 802a31a:	2300      	movs	r3, #0
 802a31c:	9800      	ldr	r0, [sp, #0]
 802a31e:	702b      	strb	r3, [r5, #0]
 802a320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a322:	3001      	adds	r0, #1
 802a324:	6018      	str	r0, [r3, #0]
 802a326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802a328:	2b00      	cmp	r3, #0
 802a32a:	f43f acf1 	beq.w	8029d10 <_dtoa_r+0xa0>
 802a32e:	601d      	str	r5, [r3, #0]
 802a330:	e4ee      	b.n	8029d10 <_dtoa_r+0xa0>
 802a332:	9f00      	ldr	r7, [sp, #0]
 802a334:	462b      	mov	r3, r5
 802a336:	461d      	mov	r5, r3
 802a338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802a33c:	2a39      	cmp	r2, #57	; 0x39
 802a33e:	d106      	bne.n	802a34e <_dtoa_r+0x6de>
 802a340:	9a01      	ldr	r2, [sp, #4]
 802a342:	429a      	cmp	r2, r3
 802a344:	d1f7      	bne.n	802a336 <_dtoa_r+0x6c6>
 802a346:	9901      	ldr	r1, [sp, #4]
 802a348:	2230      	movs	r2, #48	; 0x30
 802a34a:	3701      	adds	r7, #1
 802a34c:	700a      	strb	r2, [r1, #0]
 802a34e:	781a      	ldrb	r2, [r3, #0]
 802a350:	3201      	adds	r2, #1
 802a352:	701a      	strb	r2, [r3, #0]
 802a354:	e790      	b.n	802a278 <_dtoa_r+0x608>
 802a356:	4ba6      	ldr	r3, [pc, #664]	; (802a5f0 <_dtoa_r+0x980>)
 802a358:	2200      	movs	r2, #0
 802a35a:	f7d6 f925 	bl	80005a8 <__aeabi_dmul>
 802a35e:	2200      	movs	r2, #0
 802a360:	2300      	movs	r3, #0
 802a362:	4606      	mov	r6, r0
 802a364:	460f      	mov	r7, r1
 802a366:	f7d6 fb87 	bl	8000a78 <__aeabi_dcmpeq>
 802a36a:	2800      	cmp	r0, #0
 802a36c:	d09d      	beq.n	802a2aa <_dtoa_r+0x63a>
 802a36e:	e7cf      	b.n	802a310 <_dtoa_r+0x6a0>
 802a370:	9a08      	ldr	r2, [sp, #32]
 802a372:	2a00      	cmp	r2, #0
 802a374:	f000 80d7 	beq.w	802a526 <_dtoa_r+0x8b6>
 802a378:	9a06      	ldr	r2, [sp, #24]
 802a37a:	2a01      	cmp	r2, #1
 802a37c:	f300 80ba 	bgt.w	802a4f4 <_dtoa_r+0x884>
 802a380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a382:	2a00      	cmp	r2, #0
 802a384:	f000 80b2 	beq.w	802a4ec <_dtoa_r+0x87c>
 802a388:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802a38c:	9e07      	ldr	r6, [sp, #28]
 802a38e:	9d04      	ldr	r5, [sp, #16]
 802a390:	9a04      	ldr	r2, [sp, #16]
 802a392:	441a      	add	r2, r3
 802a394:	9204      	str	r2, [sp, #16]
 802a396:	9a05      	ldr	r2, [sp, #20]
 802a398:	2101      	movs	r1, #1
 802a39a:	441a      	add	r2, r3
 802a39c:	4620      	mov	r0, r4
 802a39e:	9205      	str	r2, [sp, #20]
 802a3a0:	f000 fd8c 	bl	802aebc <__i2b>
 802a3a4:	4607      	mov	r7, r0
 802a3a6:	2d00      	cmp	r5, #0
 802a3a8:	dd0c      	ble.n	802a3c4 <_dtoa_r+0x754>
 802a3aa:	9b05      	ldr	r3, [sp, #20]
 802a3ac:	2b00      	cmp	r3, #0
 802a3ae:	dd09      	ble.n	802a3c4 <_dtoa_r+0x754>
 802a3b0:	42ab      	cmp	r3, r5
 802a3b2:	9a04      	ldr	r2, [sp, #16]
 802a3b4:	bfa8      	it	ge
 802a3b6:	462b      	movge	r3, r5
 802a3b8:	1ad2      	subs	r2, r2, r3
 802a3ba:	9204      	str	r2, [sp, #16]
 802a3bc:	9a05      	ldr	r2, [sp, #20]
 802a3be:	1aed      	subs	r5, r5, r3
 802a3c0:	1ad3      	subs	r3, r2, r3
 802a3c2:	9305      	str	r3, [sp, #20]
 802a3c4:	9b07      	ldr	r3, [sp, #28]
 802a3c6:	b31b      	cbz	r3, 802a410 <_dtoa_r+0x7a0>
 802a3c8:	9b08      	ldr	r3, [sp, #32]
 802a3ca:	2b00      	cmp	r3, #0
 802a3cc:	f000 80af 	beq.w	802a52e <_dtoa_r+0x8be>
 802a3d0:	2e00      	cmp	r6, #0
 802a3d2:	dd13      	ble.n	802a3fc <_dtoa_r+0x78c>
 802a3d4:	4639      	mov	r1, r7
 802a3d6:	4632      	mov	r2, r6
 802a3d8:	4620      	mov	r0, r4
 802a3da:	f000 fe2f 	bl	802b03c <__pow5mult>
 802a3de:	ee18 2a10 	vmov	r2, s16
 802a3e2:	4601      	mov	r1, r0
 802a3e4:	4607      	mov	r7, r0
 802a3e6:	4620      	mov	r0, r4
 802a3e8:	f000 fd7e 	bl	802aee8 <__multiply>
 802a3ec:	ee18 1a10 	vmov	r1, s16
 802a3f0:	4680      	mov	r8, r0
 802a3f2:	4620      	mov	r0, r4
 802a3f4:	f000 fcaa 	bl	802ad4c <_Bfree>
 802a3f8:	ee08 8a10 	vmov	s16, r8
 802a3fc:	9b07      	ldr	r3, [sp, #28]
 802a3fe:	1b9a      	subs	r2, r3, r6
 802a400:	d006      	beq.n	802a410 <_dtoa_r+0x7a0>
 802a402:	ee18 1a10 	vmov	r1, s16
 802a406:	4620      	mov	r0, r4
 802a408:	f000 fe18 	bl	802b03c <__pow5mult>
 802a40c:	ee08 0a10 	vmov	s16, r0
 802a410:	2101      	movs	r1, #1
 802a412:	4620      	mov	r0, r4
 802a414:	f000 fd52 	bl	802aebc <__i2b>
 802a418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a41a:	2b00      	cmp	r3, #0
 802a41c:	4606      	mov	r6, r0
 802a41e:	f340 8088 	ble.w	802a532 <_dtoa_r+0x8c2>
 802a422:	461a      	mov	r2, r3
 802a424:	4601      	mov	r1, r0
 802a426:	4620      	mov	r0, r4
 802a428:	f000 fe08 	bl	802b03c <__pow5mult>
 802a42c:	9b06      	ldr	r3, [sp, #24]
 802a42e:	2b01      	cmp	r3, #1
 802a430:	4606      	mov	r6, r0
 802a432:	f340 8081 	ble.w	802a538 <_dtoa_r+0x8c8>
 802a436:	f04f 0800 	mov.w	r8, #0
 802a43a:	6933      	ldr	r3, [r6, #16]
 802a43c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802a440:	6918      	ldr	r0, [r3, #16]
 802a442:	f000 fceb 	bl	802ae1c <__hi0bits>
 802a446:	f1c0 0020 	rsb	r0, r0, #32
 802a44a:	9b05      	ldr	r3, [sp, #20]
 802a44c:	4418      	add	r0, r3
 802a44e:	f010 001f 	ands.w	r0, r0, #31
 802a452:	f000 8092 	beq.w	802a57a <_dtoa_r+0x90a>
 802a456:	f1c0 0320 	rsb	r3, r0, #32
 802a45a:	2b04      	cmp	r3, #4
 802a45c:	f340 808a 	ble.w	802a574 <_dtoa_r+0x904>
 802a460:	f1c0 001c 	rsb	r0, r0, #28
 802a464:	9b04      	ldr	r3, [sp, #16]
 802a466:	4403      	add	r3, r0
 802a468:	9304      	str	r3, [sp, #16]
 802a46a:	9b05      	ldr	r3, [sp, #20]
 802a46c:	4403      	add	r3, r0
 802a46e:	4405      	add	r5, r0
 802a470:	9305      	str	r3, [sp, #20]
 802a472:	9b04      	ldr	r3, [sp, #16]
 802a474:	2b00      	cmp	r3, #0
 802a476:	dd07      	ble.n	802a488 <_dtoa_r+0x818>
 802a478:	ee18 1a10 	vmov	r1, s16
 802a47c:	461a      	mov	r2, r3
 802a47e:	4620      	mov	r0, r4
 802a480:	f000 fe36 	bl	802b0f0 <__lshift>
 802a484:	ee08 0a10 	vmov	s16, r0
 802a488:	9b05      	ldr	r3, [sp, #20]
 802a48a:	2b00      	cmp	r3, #0
 802a48c:	dd05      	ble.n	802a49a <_dtoa_r+0x82a>
 802a48e:	4631      	mov	r1, r6
 802a490:	461a      	mov	r2, r3
 802a492:	4620      	mov	r0, r4
 802a494:	f000 fe2c 	bl	802b0f0 <__lshift>
 802a498:	4606      	mov	r6, r0
 802a49a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a49c:	2b00      	cmp	r3, #0
 802a49e:	d06e      	beq.n	802a57e <_dtoa_r+0x90e>
 802a4a0:	ee18 0a10 	vmov	r0, s16
 802a4a4:	4631      	mov	r1, r6
 802a4a6:	f000 fe93 	bl	802b1d0 <__mcmp>
 802a4aa:	2800      	cmp	r0, #0
 802a4ac:	da67      	bge.n	802a57e <_dtoa_r+0x90e>
 802a4ae:	9b00      	ldr	r3, [sp, #0]
 802a4b0:	3b01      	subs	r3, #1
 802a4b2:	ee18 1a10 	vmov	r1, s16
 802a4b6:	9300      	str	r3, [sp, #0]
 802a4b8:	220a      	movs	r2, #10
 802a4ba:	2300      	movs	r3, #0
 802a4bc:	4620      	mov	r0, r4
 802a4be:	f000 fc67 	bl	802ad90 <__multadd>
 802a4c2:	9b08      	ldr	r3, [sp, #32]
 802a4c4:	ee08 0a10 	vmov	s16, r0
 802a4c8:	2b00      	cmp	r3, #0
 802a4ca:	f000 81b1 	beq.w	802a830 <_dtoa_r+0xbc0>
 802a4ce:	2300      	movs	r3, #0
 802a4d0:	4639      	mov	r1, r7
 802a4d2:	220a      	movs	r2, #10
 802a4d4:	4620      	mov	r0, r4
 802a4d6:	f000 fc5b 	bl	802ad90 <__multadd>
 802a4da:	9b02      	ldr	r3, [sp, #8]
 802a4dc:	2b00      	cmp	r3, #0
 802a4de:	4607      	mov	r7, r0
 802a4e0:	f300 808e 	bgt.w	802a600 <_dtoa_r+0x990>
 802a4e4:	9b06      	ldr	r3, [sp, #24]
 802a4e6:	2b02      	cmp	r3, #2
 802a4e8:	dc51      	bgt.n	802a58e <_dtoa_r+0x91e>
 802a4ea:	e089      	b.n	802a600 <_dtoa_r+0x990>
 802a4ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802a4ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802a4f2:	e74b      	b.n	802a38c <_dtoa_r+0x71c>
 802a4f4:	9b03      	ldr	r3, [sp, #12]
 802a4f6:	1e5e      	subs	r6, r3, #1
 802a4f8:	9b07      	ldr	r3, [sp, #28]
 802a4fa:	42b3      	cmp	r3, r6
 802a4fc:	bfbf      	itttt	lt
 802a4fe:	9b07      	ldrlt	r3, [sp, #28]
 802a500:	9607      	strlt	r6, [sp, #28]
 802a502:	1af2      	sublt	r2, r6, r3
 802a504:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802a506:	bfb6      	itet	lt
 802a508:	189b      	addlt	r3, r3, r2
 802a50a:	1b9e      	subge	r6, r3, r6
 802a50c:	930a      	strlt	r3, [sp, #40]	; 0x28
 802a50e:	9b03      	ldr	r3, [sp, #12]
 802a510:	bfb8      	it	lt
 802a512:	2600      	movlt	r6, #0
 802a514:	2b00      	cmp	r3, #0
 802a516:	bfb7      	itett	lt
 802a518:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 802a51c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 802a520:	1a9d      	sublt	r5, r3, r2
 802a522:	2300      	movlt	r3, #0
 802a524:	e734      	b.n	802a390 <_dtoa_r+0x720>
 802a526:	9e07      	ldr	r6, [sp, #28]
 802a528:	9d04      	ldr	r5, [sp, #16]
 802a52a:	9f08      	ldr	r7, [sp, #32]
 802a52c:	e73b      	b.n	802a3a6 <_dtoa_r+0x736>
 802a52e:	9a07      	ldr	r2, [sp, #28]
 802a530:	e767      	b.n	802a402 <_dtoa_r+0x792>
 802a532:	9b06      	ldr	r3, [sp, #24]
 802a534:	2b01      	cmp	r3, #1
 802a536:	dc18      	bgt.n	802a56a <_dtoa_r+0x8fa>
 802a538:	f1ba 0f00 	cmp.w	sl, #0
 802a53c:	d115      	bne.n	802a56a <_dtoa_r+0x8fa>
 802a53e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802a542:	b993      	cbnz	r3, 802a56a <_dtoa_r+0x8fa>
 802a544:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802a548:	0d1b      	lsrs	r3, r3, #20
 802a54a:	051b      	lsls	r3, r3, #20
 802a54c:	b183      	cbz	r3, 802a570 <_dtoa_r+0x900>
 802a54e:	9b04      	ldr	r3, [sp, #16]
 802a550:	3301      	adds	r3, #1
 802a552:	9304      	str	r3, [sp, #16]
 802a554:	9b05      	ldr	r3, [sp, #20]
 802a556:	3301      	adds	r3, #1
 802a558:	9305      	str	r3, [sp, #20]
 802a55a:	f04f 0801 	mov.w	r8, #1
 802a55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a560:	2b00      	cmp	r3, #0
 802a562:	f47f af6a 	bne.w	802a43a <_dtoa_r+0x7ca>
 802a566:	2001      	movs	r0, #1
 802a568:	e76f      	b.n	802a44a <_dtoa_r+0x7da>
 802a56a:	f04f 0800 	mov.w	r8, #0
 802a56e:	e7f6      	b.n	802a55e <_dtoa_r+0x8ee>
 802a570:	4698      	mov	r8, r3
 802a572:	e7f4      	b.n	802a55e <_dtoa_r+0x8ee>
 802a574:	f43f af7d 	beq.w	802a472 <_dtoa_r+0x802>
 802a578:	4618      	mov	r0, r3
 802a57a:	301c      	adds	r0, #28
 802a57c:	e772      	b.n	802a464 <_dtoa_r+0x7f4>
 802a57e:	9b03      	ldr	r3, [sp, #12]
 802a580:	2b00      	cmp	r3, #0
 802a582:	dc37      	bgt.n	802a5f4 <_dtoa_r+0x984>
 802a584:	9b06      	ldr	r3, [sp, #24]
 802a586:	2b02      	cmp	r3, #2
 802a588:	dd34      	ble.n	802a5f4 <_dtoa_r+0x984>
 802a58a:	9b03      	ldr	r3, [sp, #12]
 802a58c:	9302      	str	r3, [sp, #8]
 802a58e:	9b02      	ldr	r3, [sp, #8]
 802a590:	b96b      	cbnz	r3, 802a5ae <_dtoa_r+0x93e>
 802a592:	4631      	mov	r1, r6
 802a594:	2205      	movs	r2, #5
 802a596:	4620      	mov	r0, r4
 802a598:	f000 fbfa 	bl	802ad90 <__multadd>
 802a59c:	4601      	mov	r1, r0
 802a59e:	4606      	mov	r6, r0
 802a5a0:	ee18 0a10 	vmov	r0, s16
 802a5a4:	f000 fe14 	bl	802b1d0 <__mcmp>
 802a5a8:	2800      	cmp	r0, #0
 802a5aa:	f73f adbb 	bgt.w	802a124 <_dtoa_r+0x4b4>
 802a5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a5b0:	9d01      	ldr	r5, [sp, #4]
 802a5b2:	43db      	mvns	r3, r3
 802a5b4:	9300      	str	r3, [sp, #0]
 802a5b6:	f04f 0800 	mov.w	r8, #0
 802a5ba:	4631      	mov	r1, r6
 802a5bc:	4620      	mov	r0, r4
 802a5be:	f000 fbc5 	bl	802ad4c <_Bfree>
 802a5c2:	2f00      	cmp	r7, #0
 802a5c4:	f43f aea4 	beq.w	802a310 <_dtoa_r+0x6a0>
 802a5c8:	f1b8 0f00 	cmp.w	r8, #0
 802a5cc:	d005      	beq.n	802a5da <_dtoa_r+0x96a>
 802a5ce:	45b8      	cmp	r8, r7
 802a5d0:	d003      	beq.n	802a5da <_dtoa_r+0x96a>
 802a5d2:	4641      	mov	r1, r8
 802a5d4:	4620      	mov	r0, r4
 802a5d6:	f000 fbb9 	bl	802ad4c <_Bfree>
 802a5da:	4639      	mov	r1, r7
 802a5dc:	4620      	mov	r0, r4
 802a5de:	f000 fbb5 	bl	802ad4c <_Bfree>
 802a5e2:	e695      	b.n	802a310 <_dtoa_r+0x6a0>
 802a5e4:	2600      	movs	r6, #0
 802a5e6:	4637      	mov	r7, r6
 802a5e8:	e7e1      	b.n	802a5ae <_dtoa_r+0x93e>
 802a5ea:	9700      	str	r7, [sp, #0]
 802a5ec:	4637      	mov	r7, r6
 802a5ee:	e599      	b.n	802a124 <_dtoa_r+0x4b4>
 802a5f0:	40240000 	.word	0x40240000
 802a5f4:	9b08      	ldr	r3, [sp, #32]
 802a5f6:	2b00      	cmp	r3, #0
 802a5f8:	f000 80ca 	beq.w	802a790 <_dtoa_r+0xb20>
 802a5fc:	9b03      	ldr	r3, [sp, #12]
 802a5fe:	9302      	str	r3, [sp, #8]
 802a600:	2d00      	cmp	r5, #0
 802a602:	dd05      	ble.n	802a610 <_dtoa_r+0x9a0>
 802a604:	4639      	mov	r1, r7
 802a606:	462a      	mov	r2, r5
 802a608:	4620      	mov	r0, r4
 802a60a:	f000 fd71 	bl	802b0f0 <__lshift>
 802a60e:	4607      	mov	r7, r0
 802a610:	f1b8 0f00 	cmp.w	r8, #0
 802a614:	d05b      	beq.n	802a6ce <_dtoa_r+0xa5e>
 802a616:	6879      	ldr	r1, [r7, #4]
 802a618:	4620      	mov	r0, r4
 802a61a:	f000 fb57 	bl	802accc <_Balloc>
 802a61e:	4605      	mov	r5, r0
 802a620:	b928      	cbnz	r0, 802a62e <_dtoa_r+0x9be>
 802a622:	4b87      	ldr	r3, [pc, #540]	; (802a840 <_dtoa_r+0xbd0>)
 802a624:	4602      	mov	r2, r0
 802a626:	f240 21ea 	movw	r1, #746	; 0x2ea
 802a62a:	f7ff bb3b 	b.w	8029ca4 <_dtoa_r+0x34>
 802a62e:	693a      	ldr	r2, [r7, #16]
 802a630:	3202      	adds	r2, #2
 802a632:	0092      	lsls	r2, r2, #2
 802a634:	f107 010c 	add.w	r1, r7, #12
 802a638:	300c      	adds	r0, #12
 802a63a:	f7fe fa99 	bl	8028b70 <memcpy>
 802a63e:	2201      	movs	r2, #1
 802a640:	4629      	mov	r1, r5
 802a642:	4620      	mov	r0, r4
 802a644:	f000 fd54 	bl	802b0f0 <__lshift>
 802a648:	9b01      	ldr	r3, [sp, #4]
 802a64a:	f103 0901 	add.w	r9, r3, #1
 802a64e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 802a652:	4413      	add	r3, r2
 802a654:	9305      	str	r3, [sp, #20]
 802a656:	f00a 0301 	and.w	r3, sl, #1
 802a65a:	46b8      	mov	r8, r7
 802a65c:	9304      	str	r3, [sp, #16]
 802a65e:	4607      	mov	r7, r0
 802a660:	4631      	mov	r1, r6
 802a662:	ee18 0a10 	vmov	r0, s16
 802a666:	f7ff fa75 	bl	8029b54 <quorem>
 802a66a:	4641      	mov	r1, r8
 802a66c:	9002      	str	r0, [sp, #8]
 802a66e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802a672:	ee18 0a10 	vmov	r0, s16
 802a676:	f000 fdab 	bl	802b1d0 <__mcmp>
 802a67a:	463a      	mov	r2, r7
 802a67c:	9003      	str	r0, [sp, #12]
 802a67e:	4631      	mov	r1, r6
 802a680:	4620      	mov	r0, r4
 802a682:	f000 fdc1 	bl	802b208 <__mdiff>
 802a686:	68c2      	ldr	r2, [r0, #12]
 802a688:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 802a68c:	4605      	mov	r5, r0
 802a68e:	bb02      	cbnz	r2, 802a6d2 <_dtoa_r+0xa62>
 802a690:	4601      	mov	r1, r0
 802a692:	ee18 0a10 	vmov	r0, s16
 802a696:	f000 fd9b 	bl	802b1d0 <__mcmp>
 802a69a:	4602      	mov	r2, r0
 802a69c:	4629      	mov	r1, r5
 802a69e:	4620      	mov	r0, r4
 802a6a0:	9207      	str	r2, [sp, #28]
 802a6a2:	f000 fb53 	bl	802ad4c <_Bfree>
 802a6a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 802a6aa:	ea43 0102 	orr.w	r1, r3, r2
 802a6ae:	9b04      	ldr	r3, [sp, #16]
 802a6b0:	430b      	orrs	r3, r1
 802a6b2:	464d      	mov	r5, r9
 802a6b4:	d10f      	bne.n	802a6d6 <_dtoa_r+0xa66>
 802a6b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802a6ba:	d02a      	beq.n	802a712 <_dtoa_r+0xaa2>
 802a6bc:	9b03      	ldr	r3, [sp, #12]
 802a6be:	2b00      	cmp	r3, #0
 802a6c0:	dd02      	ble.n	802a6c8 <_dtoa_r+0xa58>
 802a6c2:	9b02      	ldr	r3, [sp, #8]
 802a6c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 802a6c8:	f88b a000 	strb.w	sl, [fp]
 802a6cc:	e775      	b.n	802a5ba <_dtoa_r+0x94a>
 802a6ce:	4638      	mov	r0, r7
 802a6d0:	e7ba      	b.n	802a648 <_dtoa_r+0x9d8>
 802a6d2:	2201      	movs	r2, #1
 802a6d4:	e7e2      	b.n	802a69c <_dtoa_r+0xa2c>
 802a6d6:	9b03      	ldr	r3, [sp, #12]
 802a6d8:	2b00      	cmp	r3, #0
 802a6da:	db04      	blt.n	802a6e6 <_dtoa_r+0xa76>
 802a6dc:	9906      	ldr	r1, [sp, #24]
 802a6de:	430b      	orrs	r3, r1
 802a6e0:	9904      	ldr	r1, [sp, #16]
 802a6e2:	430b      	orrs	r3, r1
 802a6e4:	d122      	bne.n	802a72c <_dtoa_r+0xabc>
 802a6e6:	2a00      	cmp	r2, #0
 802a6e8:	ddee      	ble.n	802a6c8 <_dtoa_r+0xa58>
 802a6ea:	ee18 1a10 	vmov	r1, s16
 802a6ee:	2201      	movs	r2, #1
 802a6f0:	4620      	mov	r0, r4
 802a6f2:	f000 fcfd 	bl	802b0f0 <__lshift>
 802a6f6:	4631      	mov	r1, r6
 802a6f8:	ee08 0a10 	vmov	s16, r0
 802a6fc:	f000 fd68 	bl	802b1d0 <__mcmp>
 802a700:	2800      	cmp	r0, #0
 802a702:	dc03      	bgt.n	802a70c <_dtoa_r+0xa9c>
 802a704:	d1e0      	bne.n	802a6c8 <_dtoa_r+0xa58>
 802a706:	f01a 0f01 	tst.w	sl, #1
 802a70a:	d0dd      	beq.n	802a6c8 <_dtoa_r+0xa58>
 802a70c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802a710:	d1d7      	bne.n	802a6c2 <_dtoa_r+0xa52>
 802a712:	2339      	movs	r3, #57	; 0x39
 802a714:	f88b 3000 	strb.w	r3, [fp]
 802a718:	462b      	mov	r3, r5
 802a71a:	461d      	mov	r5, r3
 802a71c:	3b01      	subs	r3, #1
 802a71e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802a722:	2a39      	cmp	r2, #57	; 0x39
 802a724:	d071      	beq.n	802a80a <_dtoa_r+0xb9a>
 802a726:	3201      	adds	r2, #1
 802a728:	701a      	strb	r2, [r3, #0]
 802a72a:	e746      	b.n	802a5ba <_dtoa_r+0x94a>
 802a72c:	2a00      	cmp	r2, #0
 802a72e:	dd07      	ble.n	802a740 <_dtoa_r+0xad0>
 802a730:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802a734:	d0ed      	beq.n	802a712 <_dtoa_r+0xaa2>
 802a736:	f10a 0301 	add.w	r3, sl, #1
 802a73a:	f88b 3000 	strb.w	r3, [fp]
 802a73e:	e73c      	b.n	802a5ba <_dtoa_r+0x94a>
 802a740:	9b05      	ldr	r3, [sp, #20]
 802a742:	f809 ac01 	strb.w	sl, [r9, #-1]
 802a746:	4599      	cmp	r9, r3
 802a748:	d047      	beq.n	802a7da <_dtoa_r+0xb6a>
 802a74a:	ee18 1a10 	vmov	r1, s16
 802a74e:	2300      	movs	r3, #0
 802a750:	220a      	movs	r2, #10
 802a752:	4620      	mov	r0, r4
 802a754:	f000 fb1c 	bl	802ad90 <__multadd>
 802a758:	45b8      	cmp	r8, r7
 802a75a:	ee08 0a10 	vmov	s16, r0
 802a75e:	f04f 0300 	mov.w	r3, #0
 802a762:	f04f 020a 	mov.w	r2, #10
 802a766:	4641      	mov	r1, r8
 802a768:	4620      	mov	r0, r4
 802a76a:	d106      	bne.n	802a77a <_dtoa_r+0xb0a>
 802a76c:	f000 fb10 	bl	802ad90 <__multadd>
 802a770:	4680      	mov	r8, r0
 802a772:	4607      	mov	r7, r0
 802a774:	f109 0901 	add.w	r9, r9, #1
 802a778:	e772      	b.n	802a660 <_dtoa_r+0x9f0>
 802a77a:	f000 fb09 	bl	802ad90 <__multadd>
 802a77e:	4639      	mov	r1, r7
 802a780:	4680      	mov	r8, r0
 802a782:	2300      	movs	r3, #0
 802a784:	220a      	movs	r2, #10
 802a786:	4620      	mov	r0, r4
 802a788:	f000 fb02 	bl	802ad90 <__multadd>
 802a78c:	4607      	mov	r7, r0
 802a78e:	e7f1      	b.n	802a774 <_dtoa_r+0xb04>
 802a790:	9b03      	ldr	r3, [sp, #12]
 802a792:	9302      	str	r3, [sp, #8]
 802a794:	9d01      	ldr	r5, [sp, #4]
 802a796:	ee18 0a10 	vmov	r0, s16
 802a79a:	4631      	mov	r1, r6
 802a79c:	f7ff f9da 	bl	8029b54 <quorem>
 802a7a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802a7a4:	9b01      	ldr	r3, [sp, #4]
 802a7a6:	f805 ab01 	strb.w	sl, [r5], #1
 802a7aa:	1aea      	subs	r2, r5, r3
 802a7ac:	9b02      	ldr	r3, [sp, #8]
 802a7ae:	4293      	cmp	r3, r2
 802a7b0:	dd09      	ble.n	802a7c6 <_dtoa_r+0xb56>
 802a7b2:	ee18 1a10 	vmov	r1, s16
 802a7b6:	2300      	movs	r3, #0
 802a7b8:	220a      	movs	r2, #10
 802a7ba:	4620      	mov	r0, r4
 802a7bc:	f000 fae8 	bl	802ad90 <__multadd>
 802a7c0:	ee08 0a10 	vmov	s16, r0
 802a7c4:	e7e7      	b.n	802a796 <_dtoa_r+0xb26>
 802a7c6:	9b02      	ldr	r3, [sp, #8]
 802a7c8:	2b00      	cmp	r3, #0
 802a7ca:	bfc8      	it	gt
 802a7cc:	461d      	movgt	r5, r3
 802a7ce:	9b01      	ldr	r3, [sp, #4]
 802a7d0:	bfd8      	it	le
 802a7d2:	2501      	movle	r5, #1
 802a7d4:	441d      	add	r5, r3
 802a7d6:	f04f 0800 	mov.w	r8, #0
 802a7da:	ee18 1a10 	vmov	r1, s16
 802a7de:	2201      	movs	r2, #1
 802a7e0:	4620      	mov	r0, r4
 802a7e2:	f000 fc85 	bl	802b0f0 <__lshift>
 802a7e6:	4631      	mov	r1, r6
 802a7e8:	ee08 0a10 	vmov	s16, r0
 802a7ec:	f000 fcf0 	bl	802b1d0 <__mcmp>
 802a7f0:	2800      	cmp	r0, #0
 802a7f2:	dc91      	bgt.n	802a718 <_dtoa_r+0xaa8>
 802a7f4:	d102      	bne.n	802a7fc <_dtoa_r+0xb8c>
 802a7f6:	f01a 0f01 	tst.w	sl, #1
 802a7fa:	d18d      	bne.n	802a718 <_dtoa_r+0xaa8>
 802a7fc:	462b      	mov	r3, r5
 802a7fe:	461d      	mov	r5, r3
 802a800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802a804:	2a30      	cmp	r2, #48	; 0x30
 802a806:	d0fa      	beq.n	802a7fe <_dtoa_r+0xb8e>
 802a808:	e6d7      	b.n	802a5ba <_dtoa_r+0x94a>
 802a80a:	9a01      	ldr	r2, [sp, #4]
 802a80c:	429a      	cmp	r2, r3
 802a80e:	d184      	bne.n	802a71a <_dtoa_r+0xaaa>
 802a810:	9b00      	ldr	r3, [sp, #0]
 802a812:	3301      	adds	r3, #1
 802a814:	9300      	str	r3, [sp, #0]
 802a816:	2331      	movs	r3, #49	; 0x31
 802a818:	7013      	strb	r3, [r2, #0]
 802a81a:	e6ce      	b.n	802a5ba <_dtoa_r+0x94a>
 802a81c:	4b09      	ldr	r3, [pc, #36]	; (802a844 <_dtoa_r+0xbd4>)
 802a81e:	f7ff ba95 	b.w	8029d4c <_dtoa_r+0xdc>
 802a822:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802a824:	2b00      	cmp	r3, #0
 802a826:	f47f aa6e 	bne.w	8029d06 <_dtoa_r+0x96>
 802a82a:	4b07      	ldr	r3, [pc, #28]	; (802a848 <_dtoa_r+0xbd8>)
 802a82c:	f7ff ba8e 	b.w	8029d4c <_dtoa_r+0xdc>
 802a830:	9b02      	ldr	r3, [sp, #8]
 802a832:	2b00      	cmp	r3, #0
 802a834:	dcae      	bgt.n	802a794 <_dtoa_r+0xb24>
 802a836:	9b06      	ldr	r3, [sp, #24]
 802a838:	2b02      	cmp	r3, #2
 802a83a:	f73f aea8 	bgt.w	802a58e <_dtoa_r+0x91e>
 802a83e:	e7a9      	b.n	802a794 <_dtoa_r+0xb24>
 802a840:	0803404e 	.word	0x0803404e
 802a844:	08033e73 	.word	0x08033e73
 802a848:	08033fcf 	.word	0x08033fcf

0802a84c <__sflush_r>:
 802a84c:	898a      	ldrh	r2, [r1, #12]
 802a84e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a852:	4605      	mov	r5, r0
 802a854:	0710      	lsls	r0, r2, #28
 802a856:	460c      	mov	r4, r1
 802a858:	d458      	bmi.n	802a90c <__sflush_r+0xc0>
 802a85a:	684b      	ldr	r3, [r1, #4]
 802a85c:	2b00      	cmp	r3, #0
 802a85e:	dc05      	bgt.n	802a86c <__sflush_r+0x20>
 802a860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802a862:	2b00      	cmp	r3, #0
 802a864:	dc02      	bgt.n	802a86c <__sflush_r+0x20>
 802a866:	2000      	movs	r0, #0
 802a868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a86c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a86e:	2e00      	cmp	r6, #0
 802a870:	d0f9      	beq.n	802a866 <__sflush_r+0x1a>
 802a872:	2300      	movs	r3, #0
 802a874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802a878:	682f      	ldr	r7, [r5, #0]
 802a87a:	602b      	str	r3, [r5, #0]
 802a87c:	d032      	beq.n	802a8e4 <__sflush_r+0x98>
 802a87e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802a880:	89a3      	ldrh	r3, [r4, #12]
 802a882:	075a      	lsls	r2, r3, #29
 802a884:	d505      	bpl.n	802a892 <__sflush_r+0x46>
 802a886:	6863      	ldr	r3, [r4, #4]
 802a888:	1ac0      	subs	r0, r0, r3
 802a88a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802a88c:	b10b      	cbz	r3, 802a892 <__sflush_r+0x46>
 802a88e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a890:	1ac0      	subs	r0, r0, r3
 802a892:	2300      	movs	r3, #0
 802a894:	4602      	mov	r2, r0
 802a896:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a898:	6a21      	ldr	r1, [r4, #32]
 802a89a:	4628      	mov	r0, r5
 802a89c:	47b0      	blx	r6
 802a89e:	1c43      	adds	r3, r0, #1
 802a8a0:	89a3      	ldrh	r3, [r4, #12]
 802a8a2:	d106      	bne.n	802a8b2 <__sflush_r+0x66>
 802a8a4:	6829      	ldr	r1, [r5, #0]
 802a8a6:	291d      	cmp	r1, #29
 802a8a8:	d82c      	bhi.n	802a904 <__sflush_r+0xb8>
 802a8aa:	4a2a      	ldr	r2, [pc, #168]	; (802a954 <__sflush_r+0x108>)
 802a8ac:	40ca      	lsrs	r2, r1
 802a8ae:	07d6      	lsls	r6, r2, #31
 802a8b0:	d528      	bpl.n	802a904 <__sflush_r+0xb8>
 802a8b2:	2200      	movs	r2, #0
 802a8b4:	6062      	str	r2, [r4, #4]
 802a8b6:	04d9      	lsls	r1, r3, #19
 802a8b8:	6922      	ldr	r2, [r4, #16]
 802a8ba:	6022      	str	r2, [r4, #0]
 802a8bc:	d504      	bpl.n	802a8c8 <__sflush_r+0x7c>
 802a8be:	1c42      	adds	r2, r0, #1
 802a8c0:	d101      	bne.n	802a8c6 <__sflush_r+0x7a>
 802a8c2:	682b      	ldr	r3, [r5, #0]
 802a8c4:	b903      	cbnz	r3, 802a8c8 <__sflush_r+0x7c>
 802a8c6:	6560      	str	r0, [r4, #84]	; 0x54
 802a8c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a8ca:	602f      	str	r7, [r5, #0]
 802a8cc:	2900      	cmp	r1, #0
 802a8ce:	d0ca      	beq.n	802a866 <__sflush_r+0x1a>
 802a8d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a8d4:	4299      	cmp	r1, r3
 802a8d6:	d002      	beq.n	802a8de <__sflush_r+0x92>
 802a8d8:	4628      	mov	r0, r5
 802a8da:	f000 fd91 	bl	802b400 <_free_r>
 802a8de:	2000      	movs	r0, #0
 802a8e0:	6360      	str	r0, [r4, #52]	; 0x34
 802a8e2:	e7c1      	b.n	802a868 <__sflush_r+0x1c>
 802a8e4:	6a21      	ldr	r1, [r4, #32]
 802a8e6:	2301      	movs	r3, #1
 802a8e8:	4628      	mov	r0, r5
 802a8ea:	47b0      	blx	r6
 802a8ec:	1c41      	adds	r1, r0, #1
 802a8ee:	d1c7      	bne.n	802a880 <__sflush_r+0x34>
 802a8f0:	682b      	ldr	r3, [r5, #0]
 802a8f2:	2b00      	cmp	r3, #0
 802a8f4:	d0c4      	beq.n	802a880 <__sflush_r+0x34>
 802a8f6:	2b1d      	cmp	r3, #29
 802a8f8:	d001      	beq.n	802a8fe <__sflush_r+0xb2>
 802a8fa:	2b16      	cmp	r3, #22
 802a8fc:	d101      	bne.n	802a902 <__sflush_r+0xb6>
 802a8fe:	602f      	str	r7, [r5, #0]
 802a900:	e7b1      	b.n	802a866 <__sflush_r+0x1a>
 802a902:	89a3      	ldrh	r3, [r4, #12]
 802a904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a908:	81a3      	strh	r3, [r4, #12]
 802a90a:	e7ad      	b.n	802a868 <__sflush_r+0x1c>
 802a90c:	690f      	ldr	r7, [r1, #16]
 802a90e:	2f00      	cmp	r7, #0
 802a910:	d0a9      	beq.n	802a866 <__sflush_r+0x1a>
 802a912:	0793      	lsls	r3, r2, #30
 802a914:	680e      	ldr	r6, [r1, #0]
 802a916:	bf08      	it	eq
 802a918:	694b      	ldreq	r3, [r1, #20]
 802a91a:	600f      	str	r7, [r1, #0]
 802a91c:	bf18      	it	ne
 802a91e:	2300      	movne	r3, #0
 802a920:	eba6 0807 	sub.w	r8, r6, r7
 802a924:	608b      	str	r3, [r1, #8]
 802a926:	f1b8 0f00 	cmp.w	r8, #0
 802a92a:	dd9c      	ble.n	802a866 <__sflush_r+0x1a>
 802a92c:	6a21      	ldr	r1, [r4, #32]
 802a92e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802a930:	4643      	mov	r3, r8
 802a932:	463a      	mov	r2, r7
 802a934:	4628      	mov	r0, r5
 802a936:	47b0      	blx	r6
 802a938:	2800      	cmp	r0, #0
 802a93a:	dc06      	bgt.n	802a94a <__sflush_r+0xfe>
 802a93c:	89a3      	ldrh	r3, [r4, #12]
 802a93e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a942:	81a3      	strh	r3, [r4, #12]
 802a944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802a948:	e78e      	b.n	802a868 <__sflush_r+0x1c>
 802a94a:	4407      	add	r7, r0
 802a94c:	eba8 0800 	sub.w	r8, r8, r0
 802a950:	e7e9      	b.n	802a926 <__sflush_r+0xda>
 802a952:	bf00      	nop
 802a954:	20400001 	.word	0x20400001

0802a958 <_fflush_r>:
 802a958:	b538      	push	{r3, r4, r5, lr}
 802a95a:	690b      	ldr	r3, [r1, #16]
 802a95c:	4605      	mov	r5, r0
 802a95e:	460c      	mov	r4, r1
 802a960:	b913      	cbnz	r3, 802a968 <_fflush_r+0x10>
 802a962:	2500      	movs	r5, #0
 802a964:	4628      	mov	r0, r5
 802a966:	bd38      	pop	{r3, r4, r5, pc}
 802a968:	b118      	cbz	r0, 802a972 <_fflush_r+0x1a>
 802a96a:	6983      	ldr	r3, [r0, #24]
 802a96c:	b90b      	cbnz	r3, 802a972 <_fflush_r+0x1a>
 802a96e:	f000 f887 	bl	802aa80 <__sinit>
 802a972:	4b14      	ldr	r3, [pc, #80]	; (802a9c4 <_fflush_r+0x6c>)
 802a974:	429c      	cmp	r4, r3
 802a976:	d11b      	bne.n	802a9b0 <_fflush_r+0x58>
 802a978:	686c      	ldr	r4, [r5, #4]
 802a97a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a97e:	2b00      	cmp	r3, #0
 802a980:	d0ef      	beq.n	802a962 <_fflush_r+0xa>
 802a982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a984:	07d0      	lsls	r0, r2, #31
 802a986:	d404      	bmi.n	802a992 <_fflush_r+0x3a>
 802a988:	0599      	lsls	r1, r3, #22
 802a98a:	d402      	bmi.n	802a992 <_fflush_r+0x3a>
 802a98c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a98e:	f000 f91a 	bl	802abc6 <__retarget_lock_acquire_recursive>
 802a992:	4628      	mov	r0, r5
 802a994:	4621      	mov	r1, r4
 802a996:	f7ff ff59 	bl	802a84c <__sflush_r>
 802a99a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a99c:	07da      	lsls	r2, r3, #31
 802a99e:	4605      	mov	r5, r0
 802a9a0:	d4e0      	bmi.n	802a964 <_fflush_r+0xc>
 802a9a2:	89a3      	ldrh	r3, [r4, #12]
 802a9a4:	059b      	lsls	r3, r3, #22
 802a9a6:	d4dd      	bmi.n	802a964 <_fflush_r+0xc>
 802a9a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a9aa:	f000 f90d 	bl	802abc8 <__retarget_lock_release_recursive>
 802a9ae:	e7d9      	b.n	802a964 <_fflush_r+0xc>
 802a9b0:	4b05      	ldr	r3, [pc, #20]	; (802a9c8 <_fflush_r+0x70>)
 802a9b2:	429c      	cmp	r4, r3
 802a9b4:	d101      	bne.n	802a9ba <_fflush_r+0x62>
 802a9b6:	68ac      	ldr	r4, [r5, #8]
 802a9b8:	e7df      	b.n	802a97a <_fflush_r+0x22>
 802a9ba:	4b04      	ldr	r3, [pc, #16]	; (802a9cc <_fflush_r+0x74>)
 802a9bc:	429c      	cmp	r4, r3
 802a9be:	bf08      	it	eq
 802a9c0:	68ec      	ldreq	r4, [r5, #12]
 802a9c2:	e7da      	b.n	802a97a <_fflush_r+0x22>
 802a9c4:	08034080 	.word	0x08034080
 802a9c8:	080340a0 	.word	0x080340a0
 802a9cc:	08034060 	.word	0x08034060

0802a9d0 <std>:
 802a9d0:	2300      	movs	r3, #0
 802a9d2:	b510      	push	{r4, lr}
 802a9d4:	4604      	mov	r4, r0
 802a9d6:	e9c0 3300 	strd	r3, r3, [r0]
 802a9da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802a9de:	6083      	str	r3, [r0, #8]
 802a9e0:	8181      	strh	r1, [r0, #12]
 802a9e2:	6643      	str	r3, [r0, #100]	; 0x64
 802a9e4:	81c2      	strh	r2, [r0, #14]
 802a9e6:	6183      	str	r3, [r0, #24]
 802a9e8:	4619      	mov	r1, r3
 802a9ea:	2208      	movs	r2, #8
 802a9ec:	305c      	adds	r0, #92	; 0x5c
 802a9ee:	f7fe f8e7 	bl	8028bc0 <memset>
 802a9f2:	4b05      	ldr	r3, [pc, #20]	; (802aa08 <std+0x38>)
 802a9f4:	6263      	str	r3, [r4, #36]	; 0x24
 802a9f6:	4b05      	ldr	r3, [pc, #20]	; (802aa0c <std+0x3c>)
 802a9f8:	62a3      	str	r3, [r4, #40]	; 0x28
 802a9fa:	4b05      	ldr	r3, [pc, #20]	; (802aa10 <std+0x40>)
 802a9fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 802a9fe:	4b05      	ldr	r3, [pc, #20]	; (802aa14 <std+0x44>)
 802aa00:	6224      	str	r4, [r4, #32]
 802aa02:	6323      	str	r3, [r4, #48]	; 0x30
 802aa04:	bd10      	pop	{r4, pc}
 802aa06:	bf00      	nop
 802aa08:	080298cd 	.word	0x080298cd
 802aa0c:	080298f3 	.word	0x080298f3
 802aa10:	0802992b 	.word	0x0802992b
 802aa14:	0802994f 	.word	0x0802994f

0802aa18 <_cleanup_r>:
 802aa18:	4901      	ldr	r1, [pc, #4]	; (802aa20 <_cleanup_r+0x8>)
 802aa1a:	f000 b8af 	b.w	802ab7c <_fwalk_reent>
 802aa1e:	bf00      	nop
 802aa20:	0802a959 	.word	0x0802a959

0802aa24 <__sfmoreglue>:
 802aa24:	b570      	push	{r4, r5, r6, lr}
 802aa26:	2268      	movs	r2, #104	; 0x68
 802aa28:	1e4d      	subs	r5, r1, #1
 802aa2a:	4355      	muls	r5, r2
 802aa2c:	460e      	mov	r6, r1
 802aa2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802aa32:	f000 fd51 	bl	802b4d8 <_malloc_r>
 802aa36:	4604      	mov	r4, r0
 802aa38:	b140      	cbz	r0, 802aa4c <__sfmoreglue+0x28>
 802aa3a:	2100      	movs	r1, #0
 802aa3c:	e9c0 1600 	strd	r1, r6, [r0]
 802aa40:	300c      	adds	r0, #12
 802aa42:	60a0      	str	r0, [r4, #8]
 802aa44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802aa48:	f7fe f8ba 	bl	8028bc0 <memset>
 802aa4c:	4620      	mov	r0, r4
 802aa4e:	bd70      	pop	{r4, r5, r6, pc}

0802aa50 <__sfp_lock_acquire>:
 802aa50:	4801      	ldr	r0, [pc, #4]	; (802aa58 <__sfp_lock_acquire+0x8>)
 802aa52:	f000 b8b8 	b.w	802abc6 <__retarget_lock_acquire_recursive>
 802aa56:	bf00      	nop
 802aa58:	20007fad 	.word	0x20007fad

0802aa5c <__sfp_lock_release>:
 802aa5c:	4801      	ldr	r0, [pc, #4]	; (802aa64 <__sfp_lock_release+0x8>)
 802aa5e:	f000 b8b3 	b.w	802abc8 <__retarget_lock_release_recursive>
 802aa62:	bf00      	nop
 802aa64:	20007fad 	.word	0x20007fad

0802aa68 <__sinit_lock_acquire>:
 802aa68:	4801      	ldr	r0, [pc, #4]	; (802aa70 <__sinit_lock_acquire+0x8>)
 802aa6a:	f000 b8ac 	b.w	802abc6 <__retarget_lock_acquire_recursive>
 802aa6e:	bf00      	nop
 802aa70:	20007fae 	.word	0x20007fae

0802aa74 <__sinit_lock_release>:
 802aa74:	4801      	ldr	r0, [pc, #4]	; (802aa7c <__sinit_lock_release+0x8>)
 802aa76:	f000 b8a7 	b.w	802abc8 <__retarget_lock_release_recursive>
 802aa7a:	bf00      	nop
 802aa7c:	20007fae 	.word	0x20007fae

0802aa80 <__sinit>:
 802aa80:	b510      	push	{r4, lr}
 802aa82:	4604      	mov	r4, r0
 802aa84:	f7ff fff0 	bl	802aa68 <__sinit_lock_acquire>
 802aa88:	69a3      	ldr	r3, [r4, #24]
 802aa8a:	b11b      	cbz	r3, 802aa94 <__sinit+0x14>
 802aa8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802aa90:	f7ff bff0 	b.w	802aa74 <__sinit_lock_release>
 802aa94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802aa98:	6523      	str	r3, [r4, #80]	; 0x50
 802aa9a:	4b13      	ldr	r3, [pc, #76]	; (802aae8 <__sinit+0x68>)
 802aa9c:	4a13      	ldr	r2, [pc, #76]	; (802aaec <__sinit+0x6c>)
 802aa9e:	681b      	ldr	r3, [r3, #0]
 802aaa0:	62a2      	str	r2, [r4, #40]	; 0x28
 802aaa2:	42a3      	cmp	r3, r4
 802aaa4:	bf04      	itt	eq
 802aaa6:	2301      	moveq	r3, #1
 802aaa8:	61a3      	streq	r3, [r4, #24]
 802aaaa:	4620      	mov	r0, r4
 802aaac:	f000 f820 	bl	802aaf0 <__sfp>
 802aab0:	6060      	str	r0, [r4, #4]
 802aab2:	4620      	mov	r0, r4
 802aab4:	f000 f81c 	bl	802aaf0 <__sfp>
 802aab8:	60a0      	str	r0, [r4, #8]
 802aaba:	4620      	mov	r0, r4
 802aabc:	f000 f818 	bl	802aaf0 <__sfp>
 802aac0:	2200      	movs	r2, #0
 802aac2:	60e0      	str	r0, [r4, #12]
 802aac4:	2104      	movs	r1, #4
 802aac6:	6860      	ldr	r0, [r4, #4]
 802aac8:	f7ff ff82 	bl	802a9d0 <std>
 802aacc:	68a0      	ldr	r0, [r4, #8]
 802aace:	2201      	movs	r2, #1
 802aad0:	2109      	movs	r1, #9
 802aad2:	f7ff ff7d 	bl	802a9d0 <std>
 802aad6:	68e0      	ldr	r0, [r4, #12]
 802aad8:	2202      	movs	r2, #2
 802aada:	2112      	movs	r1, #18
 802aadc:	f7ff ff78 	bl	802a9d0 <std>
 802aae0:	2301      	movs	r3, #1
 802aae2:	61a3      	str	r3, [r4, #24]
 802aae4:	e7d2      	b.n	802aa8c <__sinit+0xc>
 802aae6:	bf00      	nop
 802aae8:	08033f88 	.word	0x08033f88
 802aaec:	0802aa19 	.word	0x0802aa19

0802aaf0 <__sfp>:
 802aaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aaf2:	4607      	mov	r7, r0
 802aaf4:	f7ff ffac 	bl	802aa50 <__sfp_lock_acquire>
 802aaf8:	4b1e      	ldr	r3, [pc, #120]	; (802ab74 <__sfp+0x84>)
 802aafa:	681e      	ldr	r6, [r3, #0]
 802aafc:	69b3      	ldr	r3, [r6, #24]
 802aafe:	b913      	cbnz	r3, 802ab06 <__sfp+0x16>
 802ab00:	4630      	mov	r0, r6
 802ab02:	f7ff ffbd 	bl	802aa80 <__sinit>
 802ab06:	3648      	adds	r6, #72	; 0x48
 802ab08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802ab0c:	3b01      	subs	r3, #1
 802ab0e:	d503      	bpl.n	802ab18 <__sfp+0x28>
 802ab10:	6833      	ldr	r3, [r6, #0]
 802ab12:	b30b      	cbz	r3, 802ab58 <__sfp+0x68>
 802ab14:	6836      	ldr	r6, [r6, #0]
 802ab16:	e7f7      	b.n	802ab08 <__sfp+0x18>
 802ab18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802ab1c:	b9d5      	cbnz	r5, 802ab54 <__sfp+0x64>
 802ab1e:	4b16      	ldr	r3, [pc, #88]	; (802ab78 <__sfp+0x88>)
 802ab20:	60e3      	str	r3, [r4, #12]
 802ab22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802ab26:	6665      	str	r5, [r4, #100]	; 0x64
 802ab28:	f000 f84c 	bl	802abc4 <__retarget_lock_init_recursive>
 802ab2c:	f7ff ff96 	bl	802aa5c <__sfp_lock_release>
 802ab30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802ab34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802ab38:	6025      	str	r5, [r4, #0]
 802ab3a:	61a5      	str	r5, [r4, #24]
 802ab3c:	2208      	movs	r2, #8
 802ab3e:	4629      	mov	r1, r5
 802ab40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802ab44:	f7fe f83c 	bl	8028bc0 <memset>
 802ab48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802ab4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802ab50:	4620      	mov	r0, r4
 802ab52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ab54:	3468      	adds	r4, #104	; 0x68
 802ab56:	e7d9      	b.n	802ab0c <__sfp+0x1c>
 802ab58:	2104      	movs	r1, #4
 802ab5a:	4638      	mov	r0, r7
 802ab5c:	f7ff ff62 	bl	802aa24 <__sfmoreglue>
 802ab60:	4604      	mov	r4, r0
 802ab62:	6030      	str	r0, [r6, #0]
 802ab64:	2800      	cmp	r0, #0
 802ab66:	d1d5      	bne.n	802ab14 <__sfp+0x24>
 802ab68:	f7ff ff78 	bl	802aa5c <__sfp_lock_release>
 802ab6c:	230c      	movs	r3, #12
 802ab6e:	603b      	str	r3, [r7, #0]
 802ab70:	e7ee      	b.n	802ab50 <__sfp+0x60>
 802ab72:	bf00      	nop
 802ab74:	08033f88 	.word	0x08033f88
 802ab78:	ffff0001 	.word	0xffff0001

0802ab7c <_fwalk_reent>:
 802ab7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ab80:	4606      	mov	r6, r0
 802ab82:	4688      	mov	r8, r1
 802ab84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802ab88:	2700      	movs	r7, #0
 802ab8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802ab8e:	f1b9 0901 	subs.w	r9, r9, #1
 802ab92:	d505      	bpl.n	802aba0 <_fwalk_reent+0x24>
 802ab94:	6824      	ldr	r4, [r4, #0]
 802ab96:	2c00      	cmp	r4, #0
 802ab98:	d1f7      	bne.n	802ab8a <_fwalk_reent+0xe>
 802ab9a:	4638      	mov	r0, r7
 802ab9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802aba0:	89ab      	ldrh	r3, [r5, #12]
 802aba2:	2b01      	cmp	r3, #1
 802aba4:	d907      	bls.n	802abb6 <_fwalk_reent+0x3a>
 802aba6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802abaa:	3301      	adds	r3, #1
 802abac:	d003      	beq.n	802abb6 <_fwalk_reent+0x3a>
 802abae:	4629      	mov	r1, r5
 802abb0:	4630      	mov	r0, r6
 802abb2:	47c0      	blx	r8
 802abb4:	4307      	orrs	r7, r0
 802abb6:	3568      	adds	r5, #104	; 0x68
 802abb8:	e7e9      	b.n	802ab8e <_fwalk_reent+0x12>
	...

0802abbc <_localeconv_r>:
 802abbc:	4800      	ldr	r0, [pc, #0]	; (802abc0 <_localeconv_r+0x4>)
 802abbe:	4770      	bx	lr
 802abc0:	20000220 	.word	0x20000220

0802abc4 <__retarget_lock_init_recursive>:
 802abc4:	4770      	bx	lr

0802abc6 <__retarget_lock_acquire_recursive>:
 802abc6:	4770      	bx	lr

0802abc8 <__retarget_lock_release_recursive>:
 802abc8:	4770      	bx	lr
	...

0802abcc <_lseek_r>:
 802abcc:	b538      	push	{r3, r4, r5, lr}
 802abce:	4d07      	ldr	r5, [pc, #28]	; (802abec <_lseek_r+0x20>)
 802abd0:	4604      	mov	r4, r0
 802abd2:	4608      	mov	r0, r1
 802abd4:	4611      	mov	r1, r2
 802abd6:	2200      	movs	r2, #0
 802abd8:	602a      	str	r2, [r5, #0]
 802abda:	461a      	mov	r2, r3
 802abdc:	f7d8 fcb5 	bl	800354a <_lseek>
 802abe0:	1c43      	adds	r3, r0, #1
 802abe2:	d102      	bne.n	802abea <_lseek_r+0x1e>
 802abe4:	682b      	ldr	r3, [r5, #0]
 802abe6:	b103      	cbz	r3, 802abea <_lseek_r+0x1e>
 802abe8:	6023      	str	r3, [r4, #0]
 802abea:	bd38      	pop	{r3, r4, r5, pc}
 802abec:	20007fb8 	.word	0x20007fb8

0802abf0 <__swhatbuf_r>:
 802abf0:	b570      	push	{r4, r5, r6, lr}
 802abf2:	460e      	mov	r6, r1
 802abf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802abf8:	2900      	cmp	r1, #0
 802abfa:	b096      	sub	sp, #88	; 0x58
 802abfc:	4614      	mov	r4, r2
 802abfe:	461d      	mov	r5, r3
 802ac00:	da08      	bge.n	802ac14 <__swhatbuf_r+0x24>
 802ac02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802ac06:	2200      	movs	r2, #0
 802ac08:	602a      	str	r2, [r5, #0]
 802ac0a:	061a      	lsls	r2, r3, #24
 802ac0c:	d410      	bmi.n	802ac30 <__swhatbuf_r+0x40>
 802ac0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802ac12:	e00e      	b.n	802ac32 <__swhatbuf_r+0x42>
 802ac14:	466a      	mov	r2, sp
 802ac16:	f001 f9f7 	bl	802c008 <_fstat_r>
 802ac1a:	2800      	cmp	r0, #0
 802ac1c:	dbf1      	blt.n	802ac02 <__swhatbuf_r+0x12>
 802ac1e:	9a01      	ldr	r2, [sp, #4]
 802ac20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802ac24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802ac28:	425a      	negs	r2, r3
 802ac2a:	415a      	adcs	r2, r3
 802ac2c:	602a      	str	r2, [r5, #0]
 802ac2e:	e7ee      	b.n	802ac0e <__swhatbuf_r+0x1e>
 802ac30:	2340      	movs	r3, #64	; 0x40
 802ac32:	2000      	movs	r0, #0
 802ac34:	6023      	str	r3, [r4, #0]
 802ac36:	b016      	add	sp, #88	; 0x58
 802ac38:	bd70      	pop	{r4, r5, r6, pc}
	...

0802ac3c <__smakebuf_r>:
 802ac3c:	898b      	ldrh	r3, [r1, #12]
 802ac3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802ac40:	079d      	lsls	r5, r3, #30
 802ac42:	4606      	mov	r6, r0
 802ac44:	460c      	mov	r4, r1
 802ac46:	d507      	bpl.n	802ac58 <__smakebuf_r+0x1c>
 802ac48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802ac4c:	6023      	str	r3, [r4, #0]
 802ac4e:	6123      	str	r3, [r4, #16]
 802ac50:	2301      	movs	r3, #1
 802ac52:	6163      	str	r3, [r4, #20]
 802ac54:	b002      	add	sp, #8
 802ac56:	bd70      	pop	{r4, r5, r6, pc}
 802ac58:	ab01      	add	r3, sp, #4
 802ac5a:	466a      	mov	r2, sp
 802ac5c:	f7ff ffc8 	bl	802abf0 <__swhatbuf_r>
 802ac60:	9900      	ldr	r1, [sp, #0]
 802ac62:	4605      	mov	r5, r0
 802ac64:	4630      	mov	r0, r6
 802ac66:	f000 fc37 	bl	802b4d8 <_malloc_r>
 802ac6a:	b948      	cbnz	r0, 802ac80 <__smakebuf_r+0x44>
 802ac6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ac70:	059a      	lsls	r2, r3, #22
 802ac72:	d4ef      	bmi.n	802ac54 <__smakebuf_r+0x18>
 802ac74:	f023 0303 	bic.w	r3, r3, #3
 802ac78:	f043 0302 	orr.w	r3, r3, #2
 802ac7c:	81a3      	strh	r3, [r4, #12]
 802ac7e:	e7e3      	b.n	802ac48 <__smakebuf_r+0xc>
 802ac80:	4b0d      	ldr	r3, [pc, #52]	; (802acb8 <__smakebuf_r+0x7c>)
 802ac82:	62b3      	str	r3, [r6, #40]	; 0x28
 802ac84:	89a3      	ldrh	r3, [r4, #12]
 802ac86:	6020      	str	r0, [r4, #0]
 802ac88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ac8c:	81a3      	strh	r3, [r4, #12]
 802ac8e:	9b00      	ldr	r3, [sp, #0]
 802ac90:	6163      	str	r3, [r4, #20]
 802ac92:	9b01      	ldr	r3, [sp, #4]
 802ac94:	6120      	str	r0, [r4, #16]
 802ac96:	b15b      	cbz	r3, 802acb0 <__smakebuf_r+0x74>
 802ac98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ac9c:	4630      	mov	r0, r6
 802ac9e:	f001 f9c5 	bl	802c02c <_isatty_r>
 802aca2:	b128      	cbz	r0, 802acb0 <__smakebuf_r+0x74>
 802aca4:	89a3      	ldrh	r3, [r4, #12]
 802aca6:	f023 0303 	bic.w	r3, r3, #3
 802acaa:	f043 0301 	orr.w	r3, r3, #1
 802acae:	81a3      	strh	r3, [r4, #12]
 802acb0:	89a0      	ldrh	r0, [r4, #12]
 802acb2:	4305      	orrs	r5, r0
 802acb4:	81a5      	strh	r5, [r4, #12]
 802acb6:	e7cd      	b.n	802ac54 <__smakebuf_r+0x18>
 802acb8:	0802aa19 	.word	0x0802aa19

0802acbc <malloc>:
 802acbc:	4b02      	ldr	r3, [pc, #8]	; (802acc8 <malloc+0xc>)
 802acbe:	4601      	mov	r1, r0
 802acc0:	6818      	ldr	r0, [r3, #0]
 802acc2:	f000 bc09 	b.w	802b4d8 <_malloc_r>
 802acc6:	bf00      	nop
 802acc8:	200000cc 	.word	0x200000cc

0802accc <_Balloc>:
 802accc:	b570      	push	{r4, r5, r6, lr}
 802acce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802acd0:	4604      	mov	r4, r0
 802acd2:	460d      	mov	r5, r1
 802acd4:	b976      	cbnz	r6, 802acf4 <_Balloc+0x28>
 802acd6:	2010      	movs	r0, #16
 802acd8:	f7ff fff0 	bl	802acbc <malloc>
 802acdc:	4602      	mov	r2, r0
 802acde:	6260      	str	r0, [r4, #36]	; 0x24
 802ace0:	b920      	cbnz	r0, 802acec <_Balloc+0x20>
 802ace2:	4b18      	ldr	r3, [pc, #96]	; (802ad44 <_Balloc+0x78>)
 802ace4:	4818      	ldr	r0, [pc, #96]	; (802ad48 <_Balloc+0x7c>)
 802ace6:	2166      	movs	r1, #102	; 0x66
 802ace8:	f7fd fed8 	bl	8028a9c <__assert_func>
 802acec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802acf0:	6006      	str	r6, [r0, #0]
 802acf2:	60c6      	str	r6, [r0, #12]
 802acf4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802acf6:	68f3      	ldr	r3, [r6, #12]
 802acf8:	b183      	cbz	r3, 802ad1c <_Balloc+0x50>
 802acfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802acfc:	68db      	ldr	r3, [r3, #12]
 802acfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802ad02:	b9b8      	cbnz	r0, 802ad34 <_Balloc+0x68>
 802ad04:	2101      	movs	r1, #1
 802ad06:	fa01 f605 	lsl.w	r6, r1, r5
 802ad0a:	1d72      	adds	r2, r6, #5
 802ad0c:	0092      	lsls	r2, r2, #2
 802ad0e:	4620      	mov	r0, r4
 802ad10:	f000 fb60 	bl	802b3d4 <_calloc_r>
 802ad14:	b160      	cbz	r0, 802ad30 <_Balloc+0x64>
 802ad16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802ad1a:	e00e      	b.n	802ad3a <_Balloc+0x6e>
 802ad1c:	2221      	movs	r2, #33	; 0x21
 802ad1e:	2104      	movs	r1, #4
 802ad20:	4620      	mov	r0, r4
 802ad22:	f000 fb57 	bl	802b3d4 <_calloc_r>
 802ad26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802ad28:	60f0      	str	r0, [r6, #12]
 802ad2a:	68db      	ldr	r3, [r3, #12]
 802ad2c:	2b00      	cmp	r3, #0
 802ad2e:	d1e4      	bne.n	802acfa <_Balloc+0x2e>
 802ad30:	2000      	movs	r0, #0
 802ad32:	bd70      	pop	{r4, r5, r6, pc}
 802ad34:	6802      	ldr	r2, [r0, #0]
 802ad36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802ad3a:	2300      	movs	r3, #0
 802ad3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802ad40:	e7f7      	b.n	802ad32 <_Balloc+0x66>
 802ad42:	bf00      	nop
 802ad44:	08033fdc 	.word	0x08033fdc
 802ad48:	080340c0 	.word	0x080340c0

0802ad4c <_Bfree>:
 802ad4c:	b570      	push	{r4, r5, r6, lr}
 802ad4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802ad50:	4605      	mov	r5, r0
 802ad52:	460c      	mov	r4, r1
 802ad54:	b976      	cbnz	r6, 802ad74 <_Bfree+0x28>
 802ad56:	2010      	movs	r0, #16
 802ad58:	f7ff ffb0 	bl	802acbc <malloc>
 802ad5c:	4602      	mov	r2, r0
 802ad5e:	6268      	str	r0, [r5, #36]	; 0x24
 802ad60:	b920      	cbnz	r0, 802ad6c <_Bfree+0x20>
 802ad62:	4b09      	ldr	r3, [pc, #36]	; (802ad88 <_Bfree+0x3c>)
 802ad64:	4809      	ldr	r0, [pc, #36]	; (802ad8c <_Bfree+0x40>)
 802ad66:	218a      	movs	r1, #138	; 0x8a
 802ad68:	f7fd fe98 	bl	8028a9c <__assert_func>
 802ad6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802ad70:	6006      	str	r6, [r0, #0]
 802ad72:	60c6      	str	r6, [r0, #12]
 802ad74:	b13c      	cbz	r4, 802ad86 <_Bfree+0x3a>
 802ad76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802ad78:	6862      	ldr	r2, [r4, #4]
 802ad7a:	68db      	ldr	r3, [r3, #12]
 802ad7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802ad80:	6021      	str	r1, [r4, #0]
 802ad82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802ad86:	bd70      	pop	{r4, r5, r6, pc}
 802ad88:	08033fdc 	.word	0x08033fdc
 802ad8c:	080340c0 	.word	0x080340c0

0802ad90 <__multadd>:
 802ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ad94:	690d      	ldr	r5, [r1, #16]
 802ad96:	4607      	mov	r7, r0
 802ad98:	460c      	mov	r4, r1
 802ad9a:	461e      	mov	r6, r3
 802ad9c:	f101 0c14 	add.w	ip, r1, #20
 802ada0:	2000      	movs	r0, #0
 802ada2:	f8dc 3000 	ldr.w	r3, [ip]
 802ada6:	b299      	uxth	r1, r3
 802ada8:	fb02 6101 	mla	r1, r2, r1, r6
 802adac:	0c1e      	lsrs	r6, r3, #16
 802adae:	0c0b      	lsrs	r3, r1, #16
 802adb0:	fb02 3306 	mla	r3, r2, r6, r3
 802adb4:	b289      	uxth	r1, r1
 802adb6:	3001      	adds	r0, #1
 802adb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802adbc:	4285      	cmp	r5, r0
 802adbe:	f84c 1b04 	str.w	r1, [ip], #4
 802adc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802adc6:	dcec      	bgt.n	802ada2 <__multadd+0x12>
 802adc8:	b30e      	cbz	r6, 802ae0e <__multadd+0x7e>
 802adca:	68a3      	ldr	r3, [r4, #8]
 802adcc:	42ab      	cmp	r3, r5
 802adce:	dc19      	bgt.n	802ae04 <__multadd+0x74>
 802add0:	6861      	ldr	r1, [r4, #4]
 802add2:	4638      	mov	r0, r7
 802add4:	3101      	adds	r1, #1
 802add6:	f7ff ff79 	bl	802accc <_Balloc>
 802adda:	4680      	mov	r8, r0
 802addc:	b928      	cbnz	r0, 802adea <__multadd+0x5a>
 802adde:	4602      	mov	r2, r0
 802ade0:	4b0c      	ldr	r3, [pc, #48]	; (802ae14 <__multadd+0x84>)
 802ade2:	480d      	ldr	r0, [pc, #52]	; (802ae18 <__multadd+0x88>)
 802ade4:	21b5      	movs	r1, #181	; 0xb5
 802ade6:	f7fd fe59 	bl	8028a9c <__assert_func>
 802adea:	6922      	ldr	r2, [r4, #16]
 802adec:	3202      	adds	r2, #2
 802adee:	f104 010c 	add.w	r1, r4, #12
 802adf2:	0092      	lsls	r2, r2, #2
 802adf4:	300c      	adds	r0, #12
 802adf6:	f7fd febb 	bl	8028b70 <memcpy>
 802adfa:	4621      	mov	r1, r4
 802adfc:	4638      	mov	r0, r7
 802adfe:	f7ff ffa5 	bl	802ad4c <_Bfree>
 802ae02:	4644      	mov	r4, r8
 802ae04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802ae08:	3501      	adds	r5, #1
 802ae0a:	615e      	str	r6, [r3, #20]
 802ae0c:	6125      	str	r5, [r4, #16]
 802ae0e:	4620      	mov	r0, r4
 802ae10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ae14:	0803404e 	.word	0x0803404e
 802ae18:	080340c0 	.word	0x080340c0

0802ae1c <__hi0bits>:
 802ae1c:	0c03      	lsrs	r3, r0, #16
 802ae1e:	041b      	lsls	r3, r3, #16
 802ae20:	b9d3      	cbnz	r3, 802ae58 <__hi0bits+0x3c>
 802ae22:	0400      	lsls	r0, r0, #16
 802ae24:	2310      	movs	r3, #16
 802ae26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802ae2a:	bf04      	itt	eq
 802ae2c:	0200      	lsleq	r0, r0, #8
 802ae2e:	3308      	addeq	r3, #8
 802ae30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802ae34:	bf04      	itt	eq
 802ae36:	0100      	lsleq	r0, r0, #4
 802ae38:	3304      	addeq	r3, #4
 802ae3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802ae3e:	bf04      	itt	eq
 802ae40:	0080      	lsleq	r0, r0, #2
 802ae42:	3302      	addeq	r3, #2
 802ae44:	2800      	cmp	r0, #0
 802ae46:	db05      	blt.n	802ae54 <__hi0bits+0x38>
 802ae48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802ae4c:	f103 0301 	add.w	r3, r3, #1
 802ae50:	bf08      	it	eq
 802ae52:	2320      	moveq	r3, #32
 802ae54:	4618      	mov	r0, r3
 802ae56:	4770      	bx	lr
 802ae58:	2300      	movs	r3, #0
 802ae5a:	e7e4      	b.n	802ae26 <__hi0bits+0xa>

0802ae5c <__lo0bits>:
 802ae5c:	6803      	ldr	r3, [r0, #0]
 802ae5e:	f013 0207 	ands.w	r2, r3, #7
 802ae62:	4601      	mov	r1, r0
 802ae64:	d00b      	beq.n	802ae7e <__lo0bits+0x22>
 802ae66:	07da      	lsls	r2, r3, #31
 802ae68:	d423      	bmi.n	802aeb2 <__lo0bits+0x56>
 802ae6a:	0798      	lsls	r0, r3, #30
 802ae6c:	bf49      	itett	mi
 802ae6e:	085b      	lsrmi	r3, r3, #1
 802ae70:	089b      	lsrpl	r3, r3, #2
 802ae72:	2001      	movmi	r0, #1
 802ae74:	600b      	strmi	r3, [r1, #0]
 802ae76:	bf5c      	itt	pl
 802ae78:	600b      	strpl	r3, [r1, #0]
 802ae7a:	2002      	movpl	r0, #2
 802ae7c:	4770      	bx	lr
 802ae7e:	b298      	uxth	r0, r3
 802ae80:	b9a8      	cbnz	r0, 802aeae <__lo0bits+0x52>
 802ae82:	0c1b      	lsrs	r3, r3, #16
 802ae84:	2010      	movs	r0, #16
 802ae86:	b2da      	uxtb	r2, r3
 802ae88:	b90a      	cbnz	r2, 802ae8e <__lo0bits+0x32>
 802ae8a:	3008      	adds	r0, #8
 802ae8c:	0a1b      	lsrs	r3, r3, #8
 802ae8e:	071a      	lsls	r2, r3, #28
 802ae90:	bf04      	itt	eq
 802ae92:	091b      	lsreq	r3, r3, #4
 802ae94:	3004      	addeq	r0, #4
 802ae96:	079a      	lsls	r2, r3, #30
 802ae98:	bf04      	itt	eq
 802ae9a:	089b      	lsreq	r3, r3, #2
 802ae9c:	3002      	addeq	r0, #2
 802ae9e:	07da      	lsls	r2, r3, #31
 802aea0:	d403      	bmi.n	802aeaa <__lo0bits+0x4e>
 802aea2:	085b      	lsrs	r3, r3, #1
 802aea4:	f100 0001 	add.w	r0, r0, #1
 802aea8:	d005      	beq.n	802aeb6 <__lo0bits+0x5a>
 802aeaa:	600b      	str	r3, [r1, #0]
 802aeac:	4770      	bx	lr
 802aeae:	4610      	mov	r0, r2
 802aeb0:	e7e9      	b.n	802ae86 <__lo0bits+0x2a>
 802aeb2:	2000      	movs	r0, #0
 802aeb4:	4770      	bx	lr
 802aeb6:	2020      	movs	r0, #32
 802aeb8:	4770      	bx	lr
	...

0802aebc <__i2b>:
 802aebc:	b510      	push	{r4, lr}
 802aebe:	460c      	mov	r4, r1
 802aec0:	2101      	movs	r1, #1
 802aec2:	f7ff ff03 	bl	802accc <_Balloc>
 802aec6:	4602      	mov	r2, r0
 802aec8:	b928      	cbnz	r0, 802aed6 <__i2b+0x1a>
 802aeca:	4b05      	ldr	r3, [pc, #20]	; (802aee0 <__i2b+0x24>)
 802aecc:	4805      	ldr	r0, [pc, #20]	; (802aee4 <__i2b+0x28>)
 802aece:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802aed2:	f7fd fde3 	bl	8028a9c <__assert_func>
 802aed6:	2301      	movs	r3, #1
 802aed8:	6144      	str	r4, [r0, #20]
 802aeda:	6103      	str	r3, [r0, #16]
 802aedc:	bd10      	pop	{r4, pc}
 802aede:	bf00      	nop
 802aee0:	0803404e 	.word	0x0803404e
 802aee4:	080340c0 	.word	0x080340c0

0802aee8 <__multiply>:
 802aee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aeec:	4691      	mov	r9, r2
 802aeee:	690a      	ldr	r2, [r1, #16]
 802aef0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802aef4:	429a      	cmp	r2, r3
 802aef6:	bfb8      	it	lt
 802aef8:	460b      	movlt	r3, r1
 802aefa:	460c      	mov	r4, r1
 802aefc:	bfbc      	itt	lt
 802aefe:	464c      	movlt	r4, r9
 802af00:	4699      	movlt	r9, r3
 802af02:	6927      	ldr	r7, [r4, #16]
 802af04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802af08:	68a3      	ldr	r3, [r4, #8]
 802af0a:	6861      	ldr	r1, [r4, #4]
 802af0c:	eb07 060a 	add.w	r6, r7, sl
 802af10:	42b3      	cmp	r3, r6
 802af12:	b085      	sub	sp, #20
 802af14:	bfb8      	it	lt
 802af16:	3101      	addlt	r1, #1
 802af18:	f7ff fed8 	bl	802accc <_Balloc>
 802af1c:	b930      	cbnz	r0, 802af2c <__multiply+0x44>
 802af1e:	4602      	mov	r2, r0
 802af20:	4b44      	ldr	r3, [pc, #272]	; (802b034 <__multiply+0x14c>)
 802af22:	4845      	ldr	r0, [pc, #276]	; (802b038 <__multiply+0x150>)
 802af24:	f240 115d 	movw	r1, #349	; 0x15d
 802af28:	f7fd fdb8 	bl	8028a9c <__assert_func>
 802af2c:	f100 0514 	add.w	r5, r0, #20
 802af30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802af34:	462b      	mov	r3, r5
 802af36:	2200      	movs	r2, #0
 802af38:	4543      	cmp	r3, r8
 802af3a:	d321      	bcc.n	802af80 <__multiply+0x98>
 802af3c:	f104 0314 	add.w	r3, r4, #20
 802af40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802af44:	f109 0314 	add.w	r3, r9, #20
 802af48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802af4c:	9202      	str	r2, [sp, #8]
 802af4e:	1b3a      	subs	r2, r7, r4
 802af50:	3a15      	subs	r2, #21
 802af52:	f022 0203 	bic.w	r2, r2, #3
 802af56:	3204      	adds	r2, #4
 802af58:	f104 0115 	add.w	r1, r4, #21
 802af5c:	428f      	cmp	r7, r1
 802af5e:	bf38      	it	cc
 802af60:	2204      	movcc	r2, #4
 802af62:	9201      	str	r2, [sp, #4]
 802af64:	9a02      	ldr	r2, [sp, #8]
 802af66:	9303      	str	r3, [sp, #12]
 802af68:	429a      	cmp	r2, r3
 802af6a:	d80c      	bhi.n	802af86 <__multiply+0x9e>
 802af6c:	2e00      	cmp	r6, #0
 802af6e:	dd03      	ble.n	802af78 <__multiply+0x90>
 802af70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802af74:	2b00      	cmp	r3, #0
 802af76:	d05a      	beq.n	802b02e <__multiply+0x146>
 802af78:	6106      	str	r6, [r0, #16]
 802af7a:	b005      	add	sp, #20
 802af7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802af80:	f843 2b04 	str.w	r2, [r3], #4
 802af84:	e7d8      	b.n	802af38 <__multiply+0x50>
 802af86:	f8b3 a000 	ldrh.w	sl, [r3]
 802af8a:	f1ba 0f00 	cmp.w	sl, #0
 802af8e:	d024      	beq.n	802afda <__multiply+0xf2>
 802af90:	f104 0e14 	add.w	lr, r4, #20
 802af94:	46a9      	mov	r9, r5
 802af96:	f04f 0c00 	mov.w	ip, #0
 802af9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 802af9e:	f8d9 1000 	ldr.w	r1, [r9]
 802afa2:	fa1f fb82 	uxth.w	fp, r2
 802afa6:	b289      	uxth	r1, r1
 802afa8:	fb0a 110b 	mla	r1, sl, fp, r1
 802afac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802afb0:	f8d9 2000 	ldr.w	r2, [r9]
 802afb4:	4461      	add	r1, ip
 802afb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802afba:	fb0a c20b 	mla	r2, sl, fp, ip
 802afbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802afc2:	b289      	uxth	r1, r1
 802afc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802afc8:	4577      	cmp	r7, lr
 802afca:	f849 1b04 	str.w	r1, [r9], #4
 802afce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802afd2:	d8e2      	bhi.n	802af9a <__multiply+0xb2>
 802afd4:	9a01      	ldr	r2, [sp, #4]
 802afd6:	f845 c002 	str.w	ip, [r5, r2]
 802afda:	9a03      	ldr	r2, [sp, #12]
 802afdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802afe0:	3304      	adds	r3, #4
 802afe2:	f1b9 0f00 	cmp.w	r9, #0
 802afe6:	d020      	beq.n	802b02a <__multiply+0x142>
 802afe8:	6829      	ldr	r1, [r5, #0]
 802afea:	f104 0c14 	add.w	ip, r4, #20
 802afee:	46ae      	mov	lr, r5
 802aff0:	f04f 0a00 	mov.w	sl, #0
 802aff4:	f8bc b000 	ldrh.w	fp, [ip]
 802aff8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802affc:	fb09 220b 	mla	r2, r9, fp, r2
 802b000:	4492      	add	sl, r2
 802b002:	b289      	uxth	r1, r1
 802b004:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 802b008:	f84e 1b04 	str.w	r1, [lr], #4
 802b00c:	f85c 2b04 	ldr.w	r2, [ip], #4
 802b010:	f8be 1000 	ldrh.w	r1, [lr]
 802b014:	0c12      	lsrs	r2, r2, #16
 802b016:	fb09 1102 	mla	r1, r9, r2, r1
 802b01a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802b01e:	4567      	cmp	r7, ip
 802b020:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802b024:	d8e6      	bhi.n	802aff4 <__multiply+0x10c>
 802b026:	9a01      	ldr	r2, [sp, #4]
 802b028:	50a9      	str	r1, [r5, r2]
 802b02a:	3504      	adds	r5, #4
 802b02c:	e79a      	b.n	802af64 <__multiply+0x7c>
 802b02e:	3e01      	subs	r6, #1
 802b030:	e79c      	b.n	802af6c <__multiply+0x84>
 802b032:	bf00      	nop
 802b034:	0803404e 	.word	0x0803404e
 802b038:	080340c0 	.word	0x080340c0

0802b03c <__pow5mult>:
 802b03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b040:	4615      	mov	r5, r2
 802b042:	f012 0203 	ands.w	r2, r2, #3
 802b046:	4606      	mov	r6, r0
 802b048:	460f      	mov	r7, r1
 802b04a:	d007      	beq.n	802b05c <__pow5mult+0x20>
 802b04c:	4c25      	ldr	r4, [pc, #148]	; (802b0e4 <__pow5mult+0xa8>)
 802b04e:	3a01      	subs	r2, #1
 802b050:	2300      	movs	r3, #0
 802b052:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802b056:	f7ff fe9b 	bl	802ad90 <__multadd>
 802b05a:	4607      	mov	r7, r0
 802b05c:	10ad      	asrs	r5, r5, #2
 802b05e:	d03d      	beq.n	802b0dc <__pow5mult+0xa0>
 802b060:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802b062:	b97c      	cbnz	r4, 802b084 <__pow5mult+0x48>
 802b064:	2010      	movs	r0, #16
 802b066:	f7ff fe29 	bl	802acbc <malloc>
 802b06a:	4602      	mov	r2, r0
 802b06c:	6270      	str	r0, [r6, #36]	; 0x24
 802b06e:	b928      	cbnz	r0, 802b07c <__pow5mult+0x40>
 802b070:	4b1d      	ldr	r3, [pc, #116]	; (802b0e8 <__pow5mult+0xac>)
 802b072:	481e      	ldr	r0, [pc, #120]	; (802b0ec <__pow5mult+0xb0>)
 802b074:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802b078:	f7fd fd10 	bl	8028a9c <__assert_func>
 802b07c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802b080:	6004      	str	r4, [r0, #0]
 802b082:	60c4      	str	r4, [r0, #12]
 802b084:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802b088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802b08c:	b94c      	cbnz	r4, 802b0a2 <__pow5mult+0x66>
 802b08e:	f240 2171 	movw	r1, #625	; 0x271
 802b092:	4630      	mov	r0, r6
 802b094:	f7ff ff12 	bl	802aebc <__i2b>
 802b098:	2300      	movs	r3, #0
 802b09a:	f8c8 0008 	str.w	r0, [r8, #8]
 802b09e:	4604      	mov	r4, r0
 802b0a0:	6003      	str	r3, [r0, #0]
 802b0a2:	f04f 0900 	mov.w	r9, #0
 802b0a6:	07eb      	lsls	r3, r5, #31
 802b0a8:	d50a      	bpl.n	802b0c0 <__pow5mult+0x84>
 802b0aa:	4639      	mov	r1, r7
 802b0ac:	4622      	mov	r2, r4
 802b0ae:	4630      	mov	r0, r6
 802b0b0:	f7ff ff1a 	bl	802aee8 <__multiply>
 802b0b4:	4639      	mov	r1, r7
 802b0b6:	4680      	mov	r8, r0
 802b0b8:	4630      	mov	r0, r6
 802b0ba:	f7ff fe47 	bl	802ad4c <_Bfree>
 802b0be:	4647      	mov	r7, r8
 802b0c0:	106d      	asrs	r5, r5, #1
 802b0c2:	d00b      	beq.n	802b0dc <__pow5mult+0xa0>
 802b0c4:	6820      	ldr	r0, [r4, #0]
 802b0c6:	b938      	cbnz	r0, 802b0d8 <__pow5mult+0x9c>
 802b0c8:	4622      	mov	r2, r4
 802b0ca:	4621      	mov	r1, r4
 802b0cc:	4630      	mov	r0, r6
 802b0ce:	f7ff ff0b 	bl	802aee8 <__multiply>
 802b0d2:	6020      	str	r0, [r4, #0]
 802b0d4:	f8c0 9000 	str.w	r9, [r0]
 802b0d8:	4604      	mov	r4, r0
 802b0da:	e7e4      	b.n	802b0a6 <__pow5mult+0x6a>
 802b0dc:	4638      	mov	r0, r7
 802b0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b0e2:	bf00      	nop
 802b0e4:	08034210 	.word	0x08034210
 802b0e8:	08033fdc 	.word	0x08033fdc
 802b0ec:	080340c0 	.word	0x080340c0

0802b0f0 <__lshift>:
 802b0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b0f4:	460c      	mov	r4, r1
 802b0f6:	6849      	ldr	r1, [r1, #4]
 802b0f8:	6923      	ldr	r3, [r4, #16]
 802b0fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802b0fe:	68a3      	ldr	r3, [r4, #8]
 802b100:	4607      	mov	r7, r0
 802b102:	4691      	mov	r9, r2
 802b104:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802b108:	f108 0601 	add.w	r6, r8, #1
 802b10c:	42b3      	cmp	r3, r6
 802b10e:	db0b      	blt.n	802b128 <__lshift+0x38>
 802b110:	4638      	mov	r0, r7
 802b112:	f7ff fddb 	bl	802accc <_Balloc>
 802b116:	4605      	mov	r5, r0
 802b118:	b948      	cbnz	r0, 802b12e <__lshift+0x3e>
 802b11a:	4602      	mov	r2, r0
 802b11c:	4b2a      	ldr	r3, [pc, #168]	; (802b1c8 <__lshift+0xd8>)
 802b11e:	482b      	ldr	r0, [pc, #172]	; (802b1cc <__lshift+0xdc>)
 802b120:	f240 11d9 	movw	r1, #473	; 0x1d9
 802b124:	f7fd fcba 	bl	8028a9c <__assert_func>
 802b128:	3101      	adds	r1, #1
 802b12a:	005b      	lsls	r3, r3, #1
 802b12c:	e7ee      	b.n	802b10c <__lshift+0x1c>
 802b12e:	2300      	movs	r3, #0
 802b130:	f100 0114 	add.w	r1, r0, #20
 802b134:	f100 0210 	add.w	r2, r0, #16
 802b138:	4618      	mov	r0, r3
 802b13a:	4553      	cmp	r3, sl
 802b13c:	db37      	blt.n	802b1ae <__lshift+0xbe>
 802b13e:	6920      	ldr	r0, [r4, #16]
 802b140:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802b144:	f104 0314 	add.w	r3, r4, #20
 802b148:	f019 091f 	ands.w	r9, r9, #31
 802b14c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802b150:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802b154:	d02f      	beq.n	802b1b6 <__lshift+0xc6>
 802b156:	f1c9 0e20 	rsb	lr, r9, #32
 802b15a:	468a      	mov	sl, r1
 802b15c:	f04f 0c00 	mov.w	ip, #0
 802b160:	681a      	ldr	r2, [r3, #0]
 802b162:	fa02 f209 	lsl.w	r2, r2, r9
 802b166:	ea42 020c 	orr.w	r2, r2, ip
 802b16a:	f84a 2b04 	str.w	r2, [sl], #4
 802b16e:	f853 2b04 	ldr.w	r2, [r3], #4
 802b172:	4298      	cmp	r0, r3
 802b174:	fa22 fc0e 	lsr.w	ip, r2, lr
 802b178:	d8f2      	bhi.n	802b160 <__lshift+0x70>
 802b17a:	1b03      	subs	r3, r0, r4
 802b17c:	3b15      	subs	r3, #21
 802b17e:	f023 0303 	bic.w	r3, r3, #3
 802b182:	3304      	adds	r3, #4
 802b184:	f104 0215 	add.w	r2, r4, #21
 802b188:	4290      	cmp	r0, r2
 802b18a:	bf38      	it	cc
 802b18c:	2304      	movcc	r3, #4
 802b18e:	f841 c003 	str.w	ip, [r1, r3]
 802b192:	f1bc 0f00 	cmp.w	ip, #0
 802b196:	d001      	beq.n	802b19c <__lshift+0xac>
 802b198:	f108 0602 	add.w	r6, r8, #2
 802b19c:	3e01      	subs	r6, #1
 802b19e:	4638      	mov	r0, r7
 802b1a0:	612e      	str	r6, [r5, #16]
 802b1a2:	4621      	mov	r1, r4
 802b1a4:	f7ff fdd2 	bl	802ad4c <_Bfree>
 802b1a8:	4628      	mov	r0, r5
 802b1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b1ae:	f842 0f04 	str.w	r0, [r2, #4]!
 802b1b2:	3301      	adds	r3, #1
 802b1b4:	e7c1      	b.n	802b13a <__lshift+0x4a>
 802b1b6:	3904      	subs	r1, #4
 802b1b8:	f853 2b04 	ldr.w	r2, [r3], #4
 802b1bc:	f841 2f04 	str.w	r2, [r1, #4]!
 802b1c0:	4298      	cmp	r0, r3
 802b1c2:	d8f9      	bhi.n	802b1b8 <__lshift+0xc8>
 802b1c4:	e7ea      	b.n	802b19c <__lshift+0xac>
 802b1c6:	bf00      	nop
 802b1c8:	0803404e 	.word	0x0803404e
 802b1cc:	080340c0 	.word	0x080340c0

0802b1d0 <__mcmp>:
 802b1d0:	b530      	push	{r4, r5, lr}
 802b1d2:	6902      	ldr	r2, [r0, #16]
 802b1d4:	690c      	ldr	r4, [r1, #16]
 802b1d6:	1b12      	subs	r2, r2, r4
 802b1d8:	d10e      	bne.n	802b1f8 <__mcmp+0x28>
 802b1da:	f100 0314 	add.w	r3, r0, #20
 802b1de:	3114      	adds	r1, #20
 802b1e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802b1e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802b1e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802b1ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802b1f0:	42a5      	cmp	r5, r4
 802b1f2:	d003      	beq.n	802b1fc <__mcmp+0x2c>
 802b1f4:	d305      	bcc.n	802b202 <__mcmp+0x32>
 802b1f6:	2201      	movs	r2, #1
 802b1f8:	4610      	mov	r0, r2
 802b1fa:	bd30      	pop	{r4, r5, pc}
 802b1fc:	4283      	cmp	r3, r0
 802b1fe:	d3f3      	bcc.n	802b1e8 <__mcmp+0x18>
 802b200:	e7fa      	b.n	802b1f8 <__mcmp+0x28>
 802b202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802b206:	e7f7      	b.n	802b1f8 <__mcmp+0x28>

0802b208 <__mdiff>:
 802b208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b20c:	460c      	mov	r4, r1
 802b20e:	4606      	mov	r6, r0
 802b210:	4611      	mov	r1, r2
 802b212:	4620      	mov	r0, r4
 802b214:	4690      	mov	r8, r2
 802b216:	f7ff ffdb 	bl	802b1d0 <__mcmp>
 802b21a:	1e05      	subs	r5, r0, #0
 802b21c:	d110      	bne.n	802b240 <__mdiff+0x38>
 802b21e:	4629      	mov	r1, r5
 802b220:	4630      	mov	r0, r6
 802b222:	f7ff fd53 	bl	802accc <_Balloc>
 802b226:	b930      	cbnz	r0, 802b236 <__mdiff+0x2e>
 802b228:	4b3a      	ldr	r3, [pc, #232]	; (802b314 <__mdiff+0x10c>)
 802b22a:	4602      	mov	r2, r0
 802b22c:	f240 2132 	movw	r1, #562	; 0x232
 802b230:	4839      	ldr	r0, [pc, #228]	; (802b318 <__mdiff+0x110>)
 802b232:	f7fd fc33 	bl	8028a9c <__assert_func>
 802b236:	2301      	movs	r3, #1
 802b238:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802b23c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b240:	bfa4      	itt	ge
 802b242:	4643      	movge	r3, r8
 802b244:	46a0      	movge	r8, r4
 802b246:	4630      	mov	r0, r6
 802b248:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802b24c:	bfa6      	itte	ge
 802b24e:	461c      	movge	r4, r3
 802b250:	2500      	movge	r5, #0
 802b252:	2501      	movlt	r5, #1
 802b254:	f7ff fd3a 	bl	802accc <_Balloc>
 802b258:	b920      	cbnz	r0, 802b264 <__mdiff+0x5c>
 802b25a:	4b2e      	ldr	r3, [pc, #184]	; (802b314 <__mdiff+0x10c>)
 802b25c:	4602      	mov	r2, r0
 802b25e:	f44f 7110 	mov.w	r1, #576	; 0x240
 802b262:	e7e5      	b.n	802b230 <__mdiff+0x28>
 802b264:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802b268:	6926      	ldr	r6, [r4, #16]
 802b26a:	60c5      	str	r5, [r0, #12]
 802b26c:	f104 0914 	add.w	r9, r4, #20
 802b270:	f108 0514 	add.w	r5, r8, #20
 802b274:	f100 0e14 	add.w	lr, r0, #20
 802b278:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802b27c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802b280:	f108 0210 	add.w	r2, r8, #16
 802b284:	46f2      	mov	sl, lr
 802b286:	2100      	movs	r1, #0
 802b288:	f859 3b04 	ldr.w	r3, [r9], #4
 802b28c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802b290:	fa1f f883 	uxth.w	r8, r3
 802b294:	fa11 f18b 	uxtah	r1, r1, fp
 802b298:	0c1b      	lsrs	r3, r3, #16
 802b29a:	eba1 0808 	sub.w	r8, r1, r8
 802b29e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802b2a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802b2a6:	fa1f f888 	uxth.w	r8, r8
 802b2aa:	1419      	asrs	r1, r3, #16
 802b2ac:	454e      	cmp	r6, r9
 802b2ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802b2b2:	f84a 3b04 	str.w	r3, [sl], #4
 802b2b6:	d8e7      	bhi.n	802b288 <__mdiff+0x80>
 802b2b8:	1b33      	subs	r3, r6, r4
 802b2ba:	3b15      	subs	r3, #21
 802b2bc:	f023 0303 	bic.w	r3, r3, #3
 802b2c0:	3304      	adds	r3, #4
 802b2c2:	3415      	adds	r4, #21
 802b2c4:	42a6      	cmp	r6, r4
 802b2c6:	bf38      	it	cc
 802b2c8:	2304      	movcc	r3, #4
 802b2ca:	441d      	add	r5, r3
 802b2cc:	4473      	add	r3, lr
 802b2ce:	469e      	mov	lr, r3
 802b2d0:	462e      	mov	r6, r5
 802b2d2:	4566      	cmp	r6, ip
 802b2d4:	d30e      	bcc.n	802b2f4 <__mdiff+0xec>
 802b2d6:	f10c 0203 	add.w	r2, ip, #3
 802b2da:	1b52      	subs	r2, r2, r5
 802b2dc:	f022 0203 	bic.w	r2, r2, #3
 802b2e0:	3d03      	subs	r5, #3
 802b2e2:	45ac      	cmp	ip, r5
 802b2e4:	bf38      	it	cc
 802b2e6:	2200      	movcc	r2, #0
 802b2e8:	441a      	add	r2, r3
 802b2ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802b2ee:	b17b      	cbz	r3, 802b310 <__mdiff+0x108>
 802b2f0:	6107      	str	r7, [r0, #16]
 802b2f2:	e7a3      	b.n	802b23c <__mdiff+0x34>
 802b2f4:	f856 8b04 	ldr.w	r8, [r6], #4
 802b2f8:	fa11 f288 	uxtah	r2, r1, r8
 802b2fc:	1414      	asrs	r4, r2, #16
 802b2fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802b302:	b292      	uxth	r2, r2
 802b304:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802b308:	f84e 2b04 	str.w	r2, [lr], #4
 802b30c:	1421      	asrs	r1, r4, #16
 802b30e:	e7e0      	b.n	802b2d2 <__mdiff+0xca>
 802b310:	3f01      	subs	r7, #1
 802b312:	e7ea      	b.n	802b2ea <__mdiff+0xe2>
 802b314:	0803404e 	.word	0x0803404e
 802b318:	080340c0 	.word	0x080340c0

0802b31c <__d2b>:
 802b31c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802b320:	4689      	mov	r9, r1
 802b322:	2101      	movs	r1, #1
 802b324:	ec57 6b10 	vmov	r6, r7, d0
 802b328:	4690      	mov	r8, r2
 802b32a:	f7ff fccf 	bl	802accc <_Balloc>
 802b32e:	4604      	mov	r4, r0
 802b330:	b930      	cbnz	r0, 802b340 <__d2b+0x24>
 802b332:	4602      	mov	r2, r0
 802b334:	4b25      	ldr	r3, [pc, #148]	; (802b3cc <__d2b+0xb0>)
 802b336:	4826      	ldr	r0, [pc, #152]	; (802b3d0 <__d2b+0xb4>)
 802b338:	f240 310a 	movw	r1, #778	; 0x30a
 802b33c:	f7fd fbae 	bl	8028a9c <__assert_func>
 802b340:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802b344:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802b348:	bb35      	cbnz	r5, 802b398 <__d2b+0x7c>
 802b34a:	2e00      	cmp	r6, #0
 802b34c:	9301      	str	r3, [sp, #4]
 802b34e:	d028      	beq.n	802b3a2 <__d2b+0x86>
 802b350:	4668      	mov	r0, sp
 802b352:	9600      	str	r6, [sp, #0]
 802b354:	f7ff fd82 	bl	802ae5c <__lo0bits>
 802b358:	9900      	ldr	r1, [sp, #0]
 802b35a:	b300      	cbz	r0, 802b39e <__d2b+0x82>
 802b35c:	9a01      	ldr	r2, [sp, #4]
 802b35e:	f1c0 0320 	rsb	r3, r0, #32
 802b362:	fa02 f303 	lsl.w	r3, r2, r3
 802b366:	430b      	orrs	r3, r1
 802b368:	40c2      	lsrs	r2, r0
 802b36a:	6163      	str	r3, [r4, #20]
 802b36c:	9201      	str	r2, [sp, #4]
 802b36e:	9b01      	ldr	r3, [sp, #4]
 802b370:	61a3      	str	r3, [r4, #24]
 802b372:	2b00      	cmp	r3, #0
 802b374:	bf14      	ite	ne
 802b376:	2202      	movne	r2, #2
 802b378:	2201      	moveq	r2, #1
 802b37a:	6122      	str	r2, [r4, #16]
 802b37c:	b1d5      	cbz	r5, 802b3b4 <__d2b+0x98>
 802b37e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802b382:	4405      	add	r5, r0
 802b384:	f8c9 5000 	str.w	r5, [r9]
 802b388:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802b38c:	f8c8 0000 	str.w	r0, [r8]
 802b390:	4620      	mov	r0, r4
 802b392:	b003      	add	sp, #12
 802b394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802b39c:	e7d5      	b.n	802b34a <__d2b+0x2e>
 802b39e:	6161      	str	r1, [r4, #20]
 802b3a0:	e7e5      	b.n	802b36e <__d2b+0x52>
 802b3a2:	a801      	add	r0, sp, #4
 802b3a4:	f7ff fd5a 	bl	802ae5c <__lo0bits>
 802b3a8:	9b01      	ldr	r3, [sp, #4]
 802b3aa:	6163      	str	r3, [r4, #20]
 802b3ac:	2201      	movs	r2, #1
 802b3ae:	6122      	str	r2, [r4, #16]
 802b3b0:	3020      	adds	r0, #32
 802b3b2:	e7e3      	b.n	802b37c <__d2b+0x60>
 802b3b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802b3b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802b3bc:	f8c9 0000 	str.w	r0, [r9]
 802b3c0:	6918      	ldr	r0, [r3, #16]
 802b3c2:	f7ff fd2b 	bl	802ae1c <__hi0bits>
 802b3c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802b3ca:	e7df      	b.n	802b38c <__d2b+0x70>
 802b3cc:	0803404e 	.word	0x0803404e
 802b3d0:	080340c0 	.word	0x080340c0

0802b3d4 <_calloc_r>:
 802b3d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802b3d6:	fba1 2402 	umull	r2, r4, r1, r2
 802b3da:	b94c      	cbnz	r4, 802b3f0 <_calloc_r+0x1c>
 802b3dc:	4611      	mov	r1, r2
 802b3de:	9201      	str	r2, [sp, #4]
 802b3e0:	f000 f87a 	bl	802b4d8 <_malloc_r>
 802b3e4:	9a01      	ldr	r2, [sp, #4]
 802b3e6:	4605      	mov	r5, r0
 802b3e8:	b930      	cbnz	r0, 802b3f8 <_calloc_r+0x24>
 802b3ea:	4628      	mov	r0, r5
 802b3ec:	b003      	add	sp, #12
 802b3ee:	bd30      	pop	{r4, r5, pc}
 802b3f0:	220c      	movs	r2, #12
 802b3f2:	6002      	str	r2, [r0, #0]
 802b3f4:	2500      	movs	r5, #0
 802b3f6:	e7f8      	b.n	802b3ea <_calloc_r+0x16>
 802b3f8:	4621      	mov	r1, r4
 802b3fa:	f7fd fbe1 	bl	8028bc0 <memset>
 802b3fe:	e7f4      	b.n	802b3ea <_calloc_r+0x16>

0802b400 <_free_r>:
 802b400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802b402:	2900      	cmp	r1, #0
 802b404:	d044      	beq.n	802b490 <_free_r+0x90>
 802b406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b40a:	9001      	str	r0, [sp, #4]
 802b40c:	2b00      	cmp	r3, #0
 802b40e:	f1a1 0404 	sub.w	r4, r1, #4
 802b412:	bfb8      	it	lt
 802b414:	18e4      	addlt	r4, r4, r3
 802b416:	f000 fe2b 	bl	802c070 <__malloc_lock>
 802b41a:	4a1e      	ldr	r2, [pc, #120]	; (802b494 <_free_r+0x94>)
 802b41c:	9801      	ldr	r0, [sp, #4]
 802b41e:	6813      	ldr	r3, [r2, #0]
 802b420:	b933      	cbnz	r3, 802b430 <_free_r+0x30>
 802b422:	6063      	str	r3, [r4, #4]
 802b424:	6014      	str	r4, [r2, #0]
 802b426:	b003      	add	sp, #12
 802b428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b42c:	f000 be26 	b.w	802c07c <__malloc_unlock>
 802b430:	42a3      	cmp	r3, r4
 802b432:	d908      	bls.n	802b446 <_free_r+0x46>
 802b434:	6825      	ldr	r5, [r4, #0]
 802b436:	1961      	adds	r1, r4, r5
 802b438:	428b      	cmp	r3, r1
 802b43a:	bf01      	itttt	eq
 802b43c:	6819      	ldreq	r1, [r3, #0]
 802b43e:	685b      	ldreq	r3, [r3, #4]
 802b440:	1949      	addeq	r1, r1, r5
 802b442:	6021      	streq	r1, [r4, #0]
 802b444:	e7ed      	b.n	802b422 <_free_r+0x22>
 802b446:	461a      	mov	r2, r3
 802b448:	685b      	ldr	r3, [r3, #4]
 802b44a:	b10b      	cbz	r3, 802b450 <_free_r+0x50>
 802b44c:	42a3      	cmp	r3, r4
 802b44e:	d9fa      	bls.n	802b446 <_free_r+0x46>
 802b450:	6811      	ldr	r1, [r2, #0]
 802b452:	1855      	adds	r5, r2, r1
 802b454:	42a5      	cmp	r5, r4
 802b456:	d10b      	bne.n	802b470 <_free_r+0x70>
 802b458:	6824      	ldr	r4, [r4, #0]
 802b45a:	4421      	add	r1, r4
 802b45c:	1854      	adds	r4, r2, r1
 802b45e:	42a3      	cmp	r3, r4
 802b460:	6011      	str	r1, [r2, #0]
 802b462:	d1e0      	bne.n	802b426 <_free_r+0x26>
 802b464:	681c      	ldr	r4, [r3, #0]
 802b466:	685b      	ldr	r3, [r3, #4]
 802b468:	6053      	str	r3, [r2, #4]
 802b46a:	4421      	add	r1, r4
 802b46c:	6011      	str	r1, [r2, #0]
 802b46e:	e7da      	b.n	802b426 <_free_r+0x26>
 802b470:	d902      	bls.n	802b478 <_free_r+0x78>
 802b472:	230c      	movs	r3, #12
 802b474:	6003      	str	r3, [r0, #0]
 802b476:	e7d6      	b.n	802b426 <_free_r+0x26>
 802b478:	6825      	ldr	r5, [r4, #0]
 802b47a:	1961      	adds	r1, r4, r5
 802b47c:	428b      	cmp	r3, r1
 802b47e:	bf04      	itt	eq
 802b480:	6819      	ldreq	r1, [r3, #0]
 802b482:	685b      	ldreq	r3, [r3, #4]
 802b484:	6063      	str	r3, [r4, #4]
 802b486:	bf04      	itt	eq
 802b488:	1949      	addeq	r1, r1, r5
 802b48a:	6021      	streq	r1, [r4, #0]
 802b48c:	6054      	str	r4, [r2, #4]
 802b48e:	e7ca      	b.n	802b426 <_free_r+0x26>
 802b490:	b003      	add	sp, #12
 802b492:	bd30      	pop	{r4, r5, pc}
 802b494:	20007fb0 	.word	0x20007fb0

0802b498 <sbrk_aligned>:
 802b498:	b570      	push	{r4, r5, r6, lr}
 802b49a:	4e0e      	ldr	r6, [pc, #56]	; (802b4d4 <sbrk_aligned+0x3c>)
 802b49c:	460c      	mov	r4, r1
 802b49e:	6831      	ldr	r1, [r6, #0]
 802b4a0:	4605      	mov	r5, r0
 802b4a2:	b911      	cbnz	r1, 802b4aa <sbrk_aligned+0x12>
 802b4a4:	f000 fbf2 	bl	802bc8c <_sbrk_r>
 802b4a8:	6030      	str	r0, [r6, #0]
 802b4aa:	4621      	mov	r1, r4
 802b4ac:	4628      	mov	r0, r5
 802b4ae:	f000 fbed 	bl	802bc8c <_sbrk_r>
 802b4b2:	1c43      	adds	r3, r0, #1
 802b4b4:	d00a      	beq.n	802b4cc <sbrk_aligned+0x34>
 802b4b6:	1cc4      	adds	r4, r0, #3
 802b4b8:	f024 0403 	bic.w	r4, r4, #3
 802b4bc:	42a0      	cmp	r0, r4
 802b4be:	d007      	beq.n	802b4d0 <sbrk_aligned+0x38>
 802b4c0:	1a21      	subs	r1, r4, r0
 802b4c2:	4628      	mov	r0, r5
 802b4c4:	f000 fbe2 	bl	802bc8c <_sbrk_r>
 802b4c8:	3001      	adds	r0, #1
 802b4ca:	d101      	bne.n	802b4d0 <sbrk_aligned+0x38>
 802b4cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 802b4d0:	4620      	mov	r0, r4
 802b4d2:	bd70      	pop	{r4, r5, r6, pc}
 802b4d4:	20007fb4 	.word	0x20007fb4

0802b4d8 <_malloc_r>:
 802b4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b4dc:	1ccd      	adds	r5, r1, #3
 802b4de:	f025 0503 	bic.w	r5, r5, #3
 802b4e2:	3508      	adds	r5, #8
 802b4e4:	2d0c      	cmp	r5, #12
 802b4e6:	bf38      	it	cc
 802b4e8:	250c      	movcc	r5, #12
 802b4ea:	2d00      	cmp	r5, #0
 802b4ec:	4607      	mov	r7, r0
 802b4ee:	db01      	blt.n	802b4f4 <_malloc_r+0x1c>
 802b4f0:	42a9      	cmp	r1, r5
 802b4f2:	d905      	bls.n	802b500 <_malloc_r+0x28>
 802b4f4:	230c      	movs	r3, #12
 802b4f6:	603b      	str	r3, [r7, #0]
 802b4f8:	2600      	movs	r6, #0
 802b4fa:	4630      	mov	r0, r6
 802b4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b500:	4e2e      	ldr	r6, [pc, #184]	; (802b5bc <_malloc_r+0xe4>)
 802b502:	f000 fdb5 	bl	802c070 <__malloc_lock>
 802b506:	6833      	ldr	r3, [r6, #0]
 802b508:	461c      	mov	r4, r3
 802b50a:	bb34      	cbnz	r4, 802b55a <_malloc_r+0x82>
 802b50c:	4629      	mov	r1, r5
 802b50e:	4638      	mov	r0, r7
 802b510:	f7ff ffc2 	bl	802b498 <sbrk_aligned>
 802b514:	1c43      	adds	r3, r0, #1
 802b516:	4604      	mov	r4, r0
 802b518:	d14d      	bne.n	802b5b6 <_malloc_r+0xde>
 802b51a:	6834      	ldr	r4, [r6, #0]
 802b51c:	4626      	mov	r6, r4
 802b51e:	2e00      	cmp	r6, #0
 802b520:	d140      	bne.n	802b5a4 <_malloc_r+0xcc>
 802b522:	6823      	ldr	r3, [r4, #0]
 802b524:	4631      	mov	r1, r6
 802b526:	4638      	mov	r0, r7
 802b528:	eb04 0803 	add.w	r8, r4, r3
 802b52c:	f000 fbae 	bl	802bc8c <_sbrk_r>
 802b530:	4580      	cmp	r8, r0
 802b532:	d13a      	bne.n	802b5aa <_malloc_r+0xd2>
 802b534:	6821      	ldr	r1, [r4, #0]
 802b536:	3503      	adds	r5, #3
 802b538:	1a6d      	subs	r5, r5, r1
 802b53a:	f025 0503 	bic.w	r5, r5, #3
 802b53e:	3508      	adds	r5, #8
 802b540:	2d0c      	cmp	r5, #12
 802b542:	bf38      	it	cc
 802b544:	250c      	movcc	r5, #12
 802b546:	4629      	mov	r1, r5
 802b548:	4638      	mov	r0, r7
 802b54a:	f7ff ffa5 	bl	802b498 <sbrk_aligned>
 802b54e:	3001      	adds	r0, #1
 802b550:	d02b      	beq.n	802b5aa <_malloc_r+0xd2>
 802b552:	6823      	ldr	r3, [r4, #0]
 802b554:	442b      	add	r3, r5
 802b556:	6023      	str	r3, [r4, #0]
 802b558:	e00e      	b.n	802b578 <_malloc_r+0xa0>
 802b55a:	6822      	ldr	r2, [r4, #0]
 802b55c:	1b52      	subs	r2, r2, r5
 802b55e:	d41e      	bmi.n	802b59e <_malloc_r+0xc6>
 802b560:	2a0b      	cmp	r2, #11
 802b562:	d916      	bls.n	802b592 <_malloc_r+0xba>
 802b564:	1961      	adds	r1, r4, r5
 802b566:	42a3      	cmp	r3, r4
 802b568:	6025      	str	r5, [r4, #0]
 802b56a:	bf18      	it	ne
 802b56c:	6059      	strne	r1, [r3, #4]
 802b56e:	6863      	ldr	r3, [r4, #4]
 802b570:	bf08      	it	eq
 802b572:	6031      	streq	r1, [r6, #0]
 802b574:	5162      	str	r2, [r4, r5]
 802b576:	604b      	str	r3, [r1, #4]
 802b578:	4638      	mov	r0, r7
 802b57a:	f104 060b 	add.w	r6, r4, #11
 802b57e:	f000 fd7d 	bl	802c07c <__malloc_unlock>
 802b582:	f026 0607 	bic.w	r6, r6, #7
 802b586:	1d23      	adds	r3, r4, #4
 802b588:	1af2      	subs	r2, r6, r3
 802b58a:	d0b6      	beq.n	802b4fa <_malloc_r+0x22>
 802b58c:	1b9b      	subs	r3, r3, r6
 802b58e:	50a3      	str	r3, [r4, r2]
 802b590:	e7b3      	b.n	802b4fa <_malloc_r+0x22>
 802b592:	6862      	ldr	r2, [r4, #4]
 802b594:	42a3      	cmp	r3, r4
 802b596:	bf0c      	ite	eq
 802b598:	6032      	streq	r2, [r6, #0]
 802b59a:	605a      	strne	r2, [r3, #4]
 802b59c:	e7ec      	b.n	802b578 <_malloc_r+0xa0>
 802b59e:	4623      	mov	r3, r4
 802b5a0:	6864      	ldr	r4, [r4, #4]
 802b5a2:	e7b2      	b.n	802b50a <_malloc_r+0x32>
 802b5a4:	4634      	mov	r4, r6
 802b5a6:	6876      	ldr	r6, [r6, #4]
 802b5a8:	e7b9      	b.n	802b51e <_malloc_r+0x46>
 802b5aa:	230c      	movs	r3, #12
 802b5ac:	603b      	str	r3, [r7, #0]
 802b5ae:	4638      	mov	r0, r7
 802b5b0:	f000 fd64 	bl	802c07c <__malloc_unlock>
 802b5b4:	e7a1      	b.n	802b4fa <_malloc_r+0x22>
 802b5b6:	6025      	str	r5, [r4, #0]
 802b5b8:	e7de      	b.n	802b578 <_malloc_r+0xa0>
 802b5ba:	bf00      	nop
 802b5bc:	20007fb0 	.word	0x20007fb0

0802b5c0 <_realloc_r>:
 802b5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b5c4:	4680      	mov	r8, r0
 802b5c6:	4614      	mov	r4, r2
 802b5c8:	460e      	mov	r6, r1
 802b5ca:	b921      	cbnz	r1, 802b5d6 <_realloc_r+0x16>
 802b5cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b5d0:	4611      	mov	r1, r2
 802b5d2:	f7ff bf81 	b.w	802b4d8 <_malloc_r>
 802b5d6:	b92a      	cbnz	r2, 802b5e4 <_realloc_r+0x24>
 802b5d8:	f7ff ff12 	bl	802b400 <_free_r>
 802b5dc:	4625      	mov	r5, r4
 802b5de:	4628      	mov	r0, r5
 802b5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b5e4:	f000 fd50 	bl	802c088 <_malloc_usable_size_r>
 802b5e8:	4284      	cmp	r4, r0
 802b5ea:	4607      	mov	r7, r0
 802b5ec:	d802      	bhi.n	802b5f4 <_realloc_r+0x34>
 802b5ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802b5f2:	d812      	bhi.n	802b61a <_realloc_r+0x5a>
 802b5f4:	4621      	mov	r1, r4
 802b5f6:	4640      	mov	r0, r8
 802b5f8:	f7ff ff6e 	bl	802b4d8 <_malloc_r>
 802b5fc:	4605      	mov	r5, r0
 802b5fe:	2800      	cmp	r0, #0
 802b600:	d0ed      	beq.n	802b5de <_realloc_r+0x1e>
 802b602:	42bc      	cmp	r4, r7
 802b604:	4622      	mov	r2, r4
 802b606:	4631      	mov	r1, r6
 802b608:	bf28      	it	cs
 802b60a:	463a      	movcs	r2, r7
 802b60c:	f7fd fab0 	bl	8028b70 <memcpy>
 802b610:	4631      	mov	r1, r6
 802b612:	4640      	mov	r0, r8
 802b614:	f7ff fef4 	bl	802b400 <_free_r>
 802b618:	e7e1      	b.n	802b5de <_realloc_r+0x1e>
 802b61a:	4635      	mov	r5, r6
 802b61c:	e7df      	b.n	802b5de <_realloc_r+0x1e>

0802b61e <_sungetc_r>:
 802b61e:	b538      	push	{r3, r4, r5, lr}
 802b620:	1c4b      	adds	r3, r1, #1
 802b622:	4614      	mov	r4, r2
 802b624:	d103      	bne.n	802b62e <_sungetc_r+0x10>
 802b626:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 802b62a:	4628      	mov	r0, r5
 802b62c:	bd38      	pop	{r3, r4, r5, pc}
 802b62e:	8993      	ldrh	r3, [r2, #12]
 802b630:	f023 0320 	bic.w	r3, r3, #32
 802b634:	8193      	strh	r3, [r2, #12]
 802b636:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b638:	6852      	ldr	r2, [r2, #4]
 802b63a:	b2cd      	uxtb	r5, r1
 802b63c:	b18b      	cbz	r3, 802b662 <_sungetc_r+0x44>
 802b63e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802b640:	4293      	cmp	r3, r2
 802b642:	dd08      	ble.n	802b656 <_sungetc_r+0x38>
 802b644:	6823      	ldr	r3, [r4, #0]
 802b646:	1e5a      	subs	r2, r3, #1
 802b648:	6022      	str	r2, [r4, #0]
 802b64a:	f803 5c01 	strb.w	r5, [r3, #-1]
 802b64e:	6863      	ldr	r3, [r4, #4]
 802b650:	3301      	adds	r3, #1
 802b652:	6063      	str	r3, [r4, #4]
 802b654:	e7e9      	b.n	802b62a <_sungetc_r+0xc>
 802b656:	4621      	mov	r1, r4
 802b658:	f000 fc9c 	bl	802bf94 <__submore>
 802b65c:	2800      	cmp	r0, #0
 802b65e:	d0f1      	beq.n	802b644 <_sungetc_r+0x26>
 802b660:	e7e1      	b.n	802b626 <_sungetc_r+0x8>
 802b662:	6921      	ldr	r1, [r4, #16]
 802b664:	6823      	ldr	r3, [r4, #0]
 802b666:	b151      	cbz	r1, 802b67e <_sungetc_r+0x60>
 802b668:	4299      	cmp	r1, r3
 802b66a:	d208      	bcs.n	802b67e <_sungetc_r+0x60>
 802b66c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802b670:	42a9      	cmp	r1, r5
 802b672:	d104      	bne.n	802b67e <_sungetc_r+0x60>
 802b674:	3b01      	subs	r3, #1
 802b676:	3201      	adds	r2, #1
 802b678:	6023      	str	r3, [r4, #0]
 802b67a:	6062      	str	r2, [r4, #4]
 802b67c:	e7d5      	b.n	802b62a <_sungetc_r+0xc>
 802b67e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802b682:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b686:	6363      	str	r3, [r4, #52]	; 0x34
 802b688:	2303      	movs	r3, #3
 802b68a:	63a3      	str	r3, [r4, #56]	; 0x38
 802b68c:	4623      	mov	r3, r4
 802b68e:	f803 5f46 	strb.w	r5, [r3, #70]!
 802b692:	6023      	str	r3, [r4, #0]
 802b694:	2301      	movs	r3, #1
 802b696:	e7dc      	b.n	802b652 <_sungetc_r+0x34>

0802b698 <__ssrefill_r>:
 802b698:	b510      	push	{r4, lr}
 802b69a:	460c      	mov	r4, r1
 802b69c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802b69e:	b169      	cbz	r1, 802b6bc <__ssrefill_r+0x24>
 802b6a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b6a4:	4299      	cmp	r1, r3
 802b6a6:	d001      	beq.n	802b6ac <__ssrefill_r+0x14>
 802b6a8:	f7ff feaa 	bl	802b400 <_free_r>
 802b6ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b6ae:	6063      	str	r3, [r4, #4]
 802b6b0:	2000      	movs	r0, #0
 802b6b2:	6360      	str	r0, [r4, #52]	; 0x34
 802b6b4:	b113      	cbz	r3, 802b6bc <__ssrefill_r+0x24>
 802b6b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b6b8:	6023      	str	r3, [r4, #0]
 802b6ba:	bd10      	pop	{r4, pc}
 802b6bc:	6923      	ldr	r3, [r4, #16]
 802b6be:	6023      	str	r3, [r4, #0]
 802b6c0:	2300      	movs	r3, #0
 802b6c2:	6063      	str	r3, [r4, #4]
 802b6c4:	89a3      	ldrh	r3, [r4, #12]
 802b6c6:	f043 0320 	orr.w	r3, r3, #32
 802b6ca:	81a3      	strh	r3, [r4, #12]
 802b6cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b6d0:	e7f3      	b.n	802b6ba <__ssrefill_r+0x22>
	...

0802b6d4 <__ssvfiscanf_r>:
 802b6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b6d8:	460c      	mov	r4, r1
 802b6da:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 802b6de:	2100      	movs	r1, #0
 802b6e0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802b6e4:	49a6      	ldr	r1, [pc, #664]	; (802b980 <__ssvfiscanf_r+0x2ac>)
 802b6e6:	91a0      	str	r1, [sp, #640]	; 0x280
 802b6e8:	f10d 0804 	add.w	r8, sp, #4
 802b6ec:	49a5      	ldr	r1, [pc, #660]	; (802b984 <__ssvfiscanf_r+0x2b0>)
 802b6ee:	4fa6      	ldr	r7, [pc, #664]	; (802b988 <__ssvfiscanf_r+0x2b4>)
 802b6f0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 802b98c <__ssvfiscanf_r+0x2b8>
 802b6f4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802b6f8:	4606      	mov	r6, r0
 802b6fa:	91a1      	str	r1, [sp, #644]	; 0x284
 802b6fc:	9300      	str	r3, [sp, #0]
 802b6fe:	7813      	ldrb	r3, [r2, #0]
 802b700:	2b00      	cmp	r3, #0
 802b702:	f000 815a 	beq.w	802b9ba <__ssvfiscanf_r+0x2e6>
 802b706:	5dd9      	ldrb	r1, [r3, r7]
 802b708:	f011 0108 	ands.w	r1, r1, #8
 802b70c:	f102 0501 	add.w	r5, r2, #1
 802b710:	d019      	beq.n	802b746 <__ssvfiscanf_r+0x72>
 802b712:	6863      	ldr	r3, [r4, #4]
 802b714:	2b00      	cmp	r3, #0
 802b716:	dd0f      	ble.n	802b738 <__ssvfiscanf_r+0x64>
 802b718:	6823      	ldr	r3, [r4, #0]
 802b71a:	781a      	ldrb	r2, [r3, #0]
 802b71c:	5cba      	ldrb	r2, [r7, r2]
 802b71e:	0712      	lsls	r2, r2, #28
 802b720:	d401      	bmi.n	802b726 <__ssvfiscanf_r+0x52>
 802b722:	462a      	mov	r2, r5
 802b724:	e7eb      	b.n	802b6fe <__ssvfiscanf_r+0x2a>
 802b726:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802b728:	3201      	adds	r2, #1
 802b72a:	9245      	str	r2, [sp, #276]	; 0x114
 802b72c:	6862      	ldr	r2, [r4, #4]
 802b72e:	3301      	adds	r3, #1
 802b730:	3a01      	subs	r2, #1
 802b732:	6062      	str	r2, [r4, #4]
 802b734:	6023      	str	r3, [r4, #0]
 802b736:	e7ec      	b.n	802b712 <__ssvfiscanf_r+0x3e>
 802b738:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b73a:	4621      	mov	r1, r4
 802b73c:	4630      	mov	r0, r6
 802b73e:	4798      	blx	r3
 802b740:	2800      	cmp	r0, #0
 802b742:	d0e9      	beq.n	802b718 <__ssvfiscanf_r+0x44>
 802b744:	e7ed      	b.n	802b722 <__ssvfiscanf_r+0x4e>
 802b746:	2b25      	cmp	r3, #37	; 0x25
 802b748:	d012      	beq.n	802b770 <__ssvfiscanf_r+0x9c>
 802b74a:	469a      	mov	sl, r3
 802b74c:	6863      	ldr	r3, [r4, #4]
 802b74e:	2b00      	cmp	r3, #0
 802b750:	f340 8091 	ble.w	802b876 <__ssvfiscanf_r+0x1a2>
 802b754:	6822      	ldr	r2, [r4, #0]
 802b756:	7813      	ldrb	r3, [r2, #0]
 802b758:	4553      	cmp	r3, sl
 802b75a:	f040 812e 	bne.w	802b9ba <__ssvfiscanf_r+0x2e6>
 802b75e:	6863      	ldr	r3, [r4, #4]
 802b760:	3b01      	subs	r3, #1
 802b762:	6063      	str	r3, [r4, #4]
 802b764:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802b766:	3201      	adds	r2, #1
 802b768:	3301      	adds	r3, #1
 802b76a:	6022      	str	r2, [r4, #0]
 802b76c:	9345      	str	r3, [sp, #276]	; 0x114
 802b76e:	e7d8      	b.n	802b722 <__ssvfiscanf_r+0x4e>
 802b770:	9141      	str	r1, [sp, #260]	; 0x104
 802b772:	9143      	str	r1, [sp, #268]	; 0x10c
 802b774:	7853      	ldrb	r3, [r2, #1]
 802b776:	2b2a      	cmp	r3, #42	; 0x2a
 802b778:	bf02      	ittt	eq
 802b77a:	2310      	moveq	r3, #16
 802b77c:	1c95      	addeq	r5, r2, #2
 802b77e:	9341      	streq	r3, [sp, #260]	; 0x104
 802b780:	220a      	movs	r2, #10
 802b782:	46aa      	mov	sl, r5
 802b784:	f81a 1b01 	ldrb.w	r1, [sl], #1
 802b788:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 802b78c:	2b09      	cmp	r3, #9
 802b78e:	d91d      	bls.n	802b7cc <__ssvfiscanf_r+0xf8>
 802b790:	487e      	ldr	r0, [pc, #504]	; (802b98c <__ssvfiscanf_r+0x2b8>)
 802b792:	2203      	movs	r2, #3
 802b794:	f7d4 fcf4 	bl	8000180 <memchr>
 802b798:	b140      	cbz	r0, 802b7ac <__ssvfiscanf_r+0xd8>
 802b79a:	2301      	movs	r3, #1
 802b79c:	eba0 0009 	sub.w	r0, r0, r9
 802b7a0:	fa03 f000 	lsl.w	r0, r3, r0
 802b7a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b7a6:	4318      	orrs	r0, r3
 802b7a8:	9041      	str	r0, [sp, #260]	; 0x104
 802b7aa:	4655      	mov	r5, sl
 802b7ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 802b7b0:	2b78      	cmp	r3, #120	; 0x78
 802b7b2:	d806      	bhi.n	802b7c2 <__ssvfiscanf_r+0xee>
 802b7b4:	2b57      	cmp	r3, #87	; 0x57
 802b7b6:	d810      	bhi.n	802b7da <__ssvfiscanf_r+0x106>
 802b7b8:	2b25      	cmp	r3, #37	; 0x25
 802b7ba:	d0c6      	beq.n	802b74a <__ssvfiscanf_r+0x76>
 802b7bc:	d856      	bhi.n	802b86c <__ssvfiscanf_r+0x198>
 802b7be:	2b00      	cmp	r3, #0
 802b7c0:	d064      	beq.n	802b88c <__ssvfiscanf_r+0x1b8>
 802b7c2:	2303      	movs	r3, #3
 802b7c4:	9347      	str	r3, [sp, #284]	; 0x11c
 802b7c6:	230a      	movs	r3, #10
 802b7c8:	9342      	str	r3, [sp, #264]	; 0x108
 802b7ca:	e071      	b.n	802b8b0 <__ssvfiscanf_r+0x1dc>
 802b7cc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802b7ce:	fb02 1103 	mla	r1, r2, r3, r1
 802b7d2:	3930      	subs	r1, #48	; 0x30
 802b7d4:	9143      	str	r1, [sp, #268]	; 0x10c
 802b7d6:	4655      	mov	r5, sl
 802b7d8:	e7d3      	b.n	802b782 <__ssvfiscanf_r+0xae>
 802b7da:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802b7de:	2a20      	cmp	r2, #32
 802b7e0:	d8ef      	bhi.n	802b7c2 <__ssvfiscanf_r+0xee>
 802b7e2:	a101      	add	r1, pc, #4	; (adr r1, 802b7e8 <__ssvfiscanf_r+0x114>)
 802b7e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802b7e8:	0802b89b 	.word	0x0802b89b
 802b7ec:	0802b7c3 	.word	0x0802b7c3
 802b7f0:	0802b7c3 	.word	0x0802b7c3
 802b7f4:	0802b8f9 	.word	0x0802b8f9
 802b7f8:	0802b7c3 	.word	0x0802b7c3
 802b7fc:	0802b7c3 	.word	0x0802b7c3
 802b800:	0802b7c3 	.word	0x0802b7c3
 802b804:	0802b7c3 	.word	0x0802b7c3
 802b808:	0802b7c3 	.word	0x0802b7c3
 802b80c:	0802b7c3 	.word	0x0802b7c3
 802b810:	0802b7c3 	.word	0x0802b7c3
 802b814:	0802b90f 	.word	0x0802b90f
 802b818:	0802b8e5 	.word	0x0802b8e5
 802b81c:	0802b873 	.word	0x0802b873
 802b820:	0802b873 	.word	0x0802b873
 802b824:	0802b873 	.word	0x0802b873
 802b828:	0802b7c3 	.word	0x0802b7c3
 802b82c:	0802b8e9 	.word	0x0802b8e9
 802b830:	0802b7c3 	.word	0x0802b7c3
 802b834:	0802b7c3 	.word	0x0802b7c3
 802b838:	0802b7c3 	.word	0x0802b7c3
 802b83c:	0802b7c3 	.word	0x0802b7c3
 802b840:	0802b91f 	.word	0x0802b91f
 802b844:	0802b8f1 	.word	0x0802b8f1
 802b848:	0802b893 	.word	0x0802b893
 802b84c:	0802b7c3 	.word	0x0802b7c3
 802b850:	0802b7c3 	.word	0x0802b7c3
 802b854:	0802b91b 	.word	0x0802b91b
 802b858:	0802b7c3 	.word	0x0802b7c3
 802b85c:	0802b8e5 	.word	0x0802b8e5
 802b860:	0802b7c3 	.word	0x0802b7c3
 802b864:	0802b7c3 	.word	0x0802b7c3
 802b868:	0802b89b 	.word	0x0802b89b
 802b86c:	3b45      	subs	r3, #69	; 0x45
 802b86e:	2b02      	cmp	r3, #2
 802b870:	d8a7      	bhi.n	802b7c2 <__ssvfiscanf_r+0xee>
 802b872:	2305      	movs	r3, #5
 802b874:	e01b      	b.n	802b8ae <__ssvfiscanf_r+0x1da>
 802b876:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b878:	4621      	mov	r1, r4
 802b87a:	4630      	mov	r0, r6
 802b87c:	4798      	blx	r3
 802b87e:	2800      	cmp	r0, #0
 802b880:	f43f af68 	beq.w	802b754 <__ssvfiscanf_r+0x80>
 802b884:	9844      	ldr	r0, [sp, #272]	; 0x110
 802b886:	2800      	cmp	r0, #0
 802b888:	f040 808d 	bne.w	802b9a6 <__ssvfiscanf_r+0x2d2>
 802b88c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b890:	e08f      	b.n	802b9b2 <__ssvfiscanf_r+0x2de>
 802b892:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802b894:	f042 0220 	orr.w	r2, r2, #32
 802b898:	9241      	str	r2, [sp, #260]	; 0x104
 802b89a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802b89c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802b8a0:	9241      	str	r2, [sp, #260]	; 0x104
 802b8a2:	2210      	movs	r2, #16
 802b8a4:	2b6f      	cmp	r3, #111	; 0x6f
 802b8a6:	9242      	str	r2, [sp, #264]	; 0x108
 802b8a8:	bf34      	ite	cc
 802b8aa:	2303      	movcc	r3, #3
 802b8ac:	2304      	movcs	r3, #4
 802b8ae:	9347      	str	r3, [sp, #284]	; 0x11c
 802b8b0:	6863      	ldr	r3, [r4, #4]
 802b8b2:	2b00      	cmp	r3, #0
 802b8b4:	dd42      	ble.n	802b93c <__ssvfiscanf_r+0x268>
 802b8b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b8b8:	0659      	lsls	r1, r3, #25
 802b8ba:	d404      	bmi.n	802b8c6 <__ssvfiscanf_r+0x1f2>
 802b8bc:	6823      	ldr	r3, [r4, #0]
 802b8be:	781a      	ldrb	r2, [r3, #0]
 802b8c0:	5cba      	ldrb	r2, [r7, r2]
 802b8c2:	0712      	lsls	r2, r2, #28
 802b8c4:	d441      	bmi.n	802b94a <__ssvfiscanf_r+0x276>
 802b8c6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802b8c8:	2b02      	cmp	r3, #2
 802b8ca:	dc50      	bgt.n	802b96e <__ssvfiscanf_r+0x29a>
 802b8cc:	466b      	mov	r3, sp
 802b8ce:	4622      	mov	r2, r4
 802b8d0:	a941      	add	r1, sp, #260	; 0x104
 802b8d2:	4630      	mov	r0, r6
 802b8d4:	f000 f876 	bl	802b9c4 <_scanf_chars>
 802b8d8:	2801      	cmp	r0, #1
 802b8da:	d06e      	beq.n	802b9ba <__ssvfiscanf_r+0x2e6>
 802b8dc:	2802      	cmp	r0, #2
 802b8de:	f47f af20 	bne.w	802b722 <__ssvfiscanf_r+0x4e>
 802b8e2:	e7cf      	b.n	802b884 <__ssvfiscanf_r+0x1b0>
 802b8e4:	220a      	movs	r2, #10
 802b8e6:	e7dd      	b.n	802b8a4 <__ssvfiscanf_r+0x1d0>
 802b8e8:	2300      	movs	r3, #0
 802b8ea:	9342      	str	r3, [sp, #264]	; 0x108
 802b8ec:	2303      	movs	r3, #3
 802b8ee:	e7de      	b.n	802b8ae <__ssvfiscanf_r+0x1da>
 802b8f0:	2308      	movs	r3, #8
 802b8f2:	9342      	str	r3, [sp, #264]	; 0x108
 802b8f4:	2304      	movs	r3, #4
 802b8f6:	e7da      	b.n	802b8ae <__ssvfiscanf_r+0x1da>
 802b8f8:	4629      	mov	r1, r5
 802b8fa:	4640      	mov	r0, r8
 802b8fc:	f000 f9d6 	bl	802bcac <__sccl>
 802b900:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b906:	9341      	str	r3, [sp, #260]	; 0x104
 802b908:	4605      	mov	r5, r0
 802b90a:	2301      	movs	r3, #1
 802b90c:	e7cf      	b.n	802b8ae <__ssvfiscanf_r+0x1da>
 802b90e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b914:	9341      	str	r3, [sp, #260]	; 0x104
 802b916:	2300      	movs	r3, #0
 802b918:	e7c9      	b.n	802b8ae <__ssvfiscanf_r+0x1da>
 802b91a:	2302      	movs	r3, #2
 802b91c:	e7c7      	b.n	802b8ae <__ssvfiscanf_r+0x1da>
 802b91e:	9841      	ldr	r0, [sp, #260]	; 0x104
 802b920:	06c3      	lsls	r3, r0, #27
 802b922:	f53f aefe 	bmi.w	802b722 <__ssvfiscanf_r+0x4e>
 802b926:	9b00      	ldr	r3, [sp, #0]
 802b928:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802b92a:	1d19      	adds	r1, r3, #4
 802b92c:	9100      	str	r1, [sp, #0]
 802b92e:	681b      	ldr	r3, [r3, #0]
 802b930:	f010 0f01 	tst.w	r0, #1
 802b934:	bf14      	ite	ne
 802b936:	801a      	strhne	r2, [r3, #0]
 802b938:	601a      	streq	r2, [r3, #0]
 802b93a:	e6f2      	b.n	802b722 <__ssvfiscanf_r+0x4e>
 802b93c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b93e:	4621      	mov	r1, r4
 802b940:	4630      	mov	r0, r6
 802b942:	4798      	blx	r3
 802b944:	2800      	cmp	r0, #0
 802b946:	d0b6      	beq.n	802b8b6 <__ssvfiscanf_r+0x1e2>
 802b948:	e79c      	b.n	802b884 <__ssvfiscanf_r+0x1b0>
 802b94a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802b94c:	3201      	adds	r2, #1
 802b94e:	9245      	str	r2, [sp, #276]	; 0x114
 802b950:	6862      	ldr	r2, [r4, #4]
 802b952:	3a01      	subs	r2, #1
 802b954:	2a00      	cmp	r2, #0
 802b956:	6062      	str	r2, [r4, #4]
 802b958:	dd02      	ble.n	802b960 <__ssvfiscanf_r+0x28c>
 802b95a:	3301      	adds	r3, #1
 802b95c:	6023      	str	r3, [r4, #0]
 802b95e:	e7ad      	b.n	802b8bc <__ssvfiscanf_r+0x1e8>
 802b960:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b962:	4621      	mov	r1, r4
 802b964:	4630      	mov	r0, r6
 802b966:	4798      	blx	r3
 802b968:	2800      	cmp	r0, #0
 802b96a:	d0a7      	beq.n	802b8bc <__ssvfiscanf_r+0x1e8>
 802b96c:	e78a      	b.n	802b884 <__ssvfiscanf_r+0x1b0>
 802b96e:	2b04      	cmp	r3, #4
 802b970:	dc0e      	bgt.n	802b990 <__ssvfiscanf_r+0x2bc>
 802b972:	466b      	mov	r3, sp
 802b974:	4622      	mov	r2, r4
 802b976:	a941      	add	r1, sp, #260	; 0x104
 802b978:	4630      	mov	r0, r6
 802b97a:	f000 f87d 	bl	802ba78 <_scanf_i>
 802b97e:	e7ab      	b.n	802b8d8 <__ssvfiscanf_r+0x204>
 802b980:	0802b61f 	.word	0x0802b61f
 802b984:	0802b699 	.word	0x0802b699
 802b988:	08034238 	.word	0x08034238
 802b98c:	08033f92 	.word	0x08033f92
 802b990:	4b0b      	ldr	r3, [pc, #44]	; (802b9c0 <__ssvfiscanf_r+0x2ec>)
 802b992:	2b00      	cmp	r3, #0
 802b994:	f43f aec5 	beq.w	802b722 <__ssvfiscanf_r+0x4e>
 802b998:	466b      	mov	r3, sp
 802b99a:	4622      	mov	r2, r4
 802b99c:	a941      	add	r1, sp, #260	; 0x104
 802b99e:	4630      	mov	r0, r6
 802b9a0:	f3af 8000 	nop.w
 802b9a4:	e798      	b.n	802b8d8 <__ssvfiscanf_r+0x204>
 802b9a6:	89a3      	ldrh	r3, [r4, #12]
 802b9a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 802b9ac:	bf18      	it	ne
 802b9ae:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 802b9b2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 802b9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b9ba:	9844      	ldr	r0, [sp, #272]	; 0x110
 802b9bc:	e7f9      	b.n	802b9b2 <__ssvfiscanf_r+0x2de>
 802b9be:	bf00      	nop
 802b9c0:	00000000 	.word	0x00000000

0802b9c4 <_scanf_chars>:
 802b9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b9c8:	4615      	mov	r5, r2
 802b9ca:	688a      	ldr	r2, [r1, #8]
 802b9cc:	4680      	mov	r8, r0
 802b9ce:	460c      	mov	r4, r1
 802b9d0:	b932      	cbnz	r2, 802b9e0 <_scanf_chars+0x1c>
 802b9d2:	698a      	ldr	r2, [r1, #24]
 802b9d4:	2a00      	cmp	r2, #0
 802b9d6:	bf0c      	ite	eq
 802b9d8:	2201      	moveq	r2, #1
 802b9da:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 802b9de:	608a      	str	r2, [r1, #8]
 802b9e0:	6822      	ldr	r2, [r4, #0]
 802b9e2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 802ba74 <_scanf_chars+0xb0>
 802b9e6:	06d1      	lsls	r1, r2, #27
 802b9e8:	bf5f      	itttt	pl
 802b9ea:	681a      	ldrpl	r2, [r3, #0]
 802b9ec:	1d11      	addpl	r1, r2, #4
 802b9ee:	6019      	strpl	r1, [r3, #0]
 802b9f0:	6816      	ldrpl	r6, [r2, #0]
 802b9f2:	2700      	movs	r7, #0
 802b9f4:	69a0      	ldr	r0, [r4, #24]
 802b9f6:	b188      	cbz	r0, 802ba1c <_scanf_chars+0x58>
 802b9f8:	2801      	cmp	r0, #1
 802b9fa:	d107      	bne.n	802ba0c <_scanf_chars+0x48>
 802b9fc:	682a      	ldr	r2, [r5, #0]
 802b9fe:	7811      	ldrb	r1, [r2, #0]
 802ba00:	6962      	ldr	r2, [r4, #20]
 802ba02:	5c52      	ldrb	r2, [r2, r1]
 802ba04:	b952      	cbnz	r2, 802ba1c <_scanf_chars+0x58>
 802ba06:	2f00      	cmp	r7, #0
 802ba08:	d031      	beq.n	802ba6e <_scanf_chars+0xaa>
 802ba0a:	e022      	b.n	802ba52 <_scanf_chars+0x8e>
 802ba0c:	2802      	cmp	r0, #2
 802ba0e:	d120      	bne.n	802ba52 <_scanf_chars+0x8e>
 802ba10:	682b      	ldr	r3, [r5, #0]
 802ba12:	781b      	ldrb	r3, [r3, #0]
 802ba14:	f813 3009 	ldrb.w	r3, [r3, r9]
 802ba18:	071b      	lsls	r3, r3, #28
 802ba1a:	d41a      	bmi.n	802ba52 <_scanf_chars+0x8e>
 802ba1c:	6823      	ldr	r3, [r4, #0]
 802ba1e:	06da      	lsls	r2, r3, #27
 802ba20:	bf5e      	ittt	pl
 802ba22:	682b      	ldrpl	r3, [r5, #0]
 802ba24:	781b      	ldrbpl	r3, [r3, #0]
 802ba26:	f806 3b01 	strbpl.w	r3, [r6], #1
 802ba2a:	682a      	ldr	r2, [r5, #0]
 802ba2c:	686b      	ldr	r3, [r5, #4]
 802ba2e:	3201      	adds	r2, #1
 802ba30:	602a      	str	r2, [r5, #0]
 802ba32:	68a2      	ldr	r2, [r4, #8]
 802ba34:	3b01      	subs	r3, #1
 802ba36:	3a01      	subs	r2, #1
 802ba38:	606b      	str	r3, [r5, #4]
 802ba3a:	3701      	adds	r7, #1
 802ba3c:	60a2      	str	r2, [r4, #8]
 802ba3e:	b142      	cbz	r2, 802ba52 <_scanf_chars+0x8e>
 802ba40:	2b00      	cmp	r3, #0
 802ba42:	dcd7      	bgt.n	802b9f4 <_scanf_chars+0x30>
 802ba44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802ba48:	4629      	mov	r1, r5
 802ba4a:	4640      	mov	r0, r8
 802ba4c:	4798      	blx	r3
 802ba4e:	2800      	cmp	r0, #0
 802ba50:	d0d0      	beq.n	802b9f4 <_scanf_chars+0x30>
 802ba52:	6823      	ldr	r3, [r4, #0]
 802ba54:	f013 0310 	ands.w	r3, r3, #16
 802ba58:	d105      	bne.n	802ba66 <_scanf_chars+0xa2>
 802ba5a:	68e2      	ldr	r2, [r4, #12]
 802ba5c:	3201      	adds	r2, #1
 802ba5e:	60e2      	str	r2, [r4, #12]
 802ba60:	69a2      	ldr	r2, [r4, #24]
 802ba62:	b102      	cbz	r2, 802ba66 <_scanf_chars+0xa2>
 802ba64:	7033      	strb	r3, [r6, #0]
 802ba66:	6923      	ldr	r3, [r4, #16]
 802ba68:	443b      	add	r3, r7
 802ba6a:	6123      	str	r3, [r4, #16]
 802ba6c:	2000      	movs	r0, #0
 802ba6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ba72:	bf00      	nop
 802ba74:	08034238 	.word	0x08034238

0802ba78 <_scanf_i>:
 802ba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ba7c:	4698      	mov	r8, r3
 802ba7e:	4b76      	ldr	r3, [pc, #472]	; (802bc58 <_scanf_i+0x1e0>)
 802ba80:	460c      	mov	r4, r1
 802ba82:	4682      	mov	sl, r0
 802ba84:	4616      	mov	r6, r2
 802ba86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802ba8a:	b087      	sub	sp, #28
 802ba8c:	ab03      	add	r3, sp, #12
 802ba8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802ba92:	4b72      	ldr	r3, [pc, #456]	; (802bc5c <_scanf_i+0x1e4>)
 802ba94:	69a1      	ldr	r1, [r4, #24]
 802ba96:	4a72      	ldr	r2, [pc, #456]	; (802bc60 <_scanf_i+0x1e8>)
 802ba98:	2903      	cmp	r1, #3
 802ba9a:	bf18      	it	ne
 802ba9c:	461a      	movne	r2, r3
 802ba9e:	68a3      	ldr	r3, [r4, #8]
 802baa0:	9201      	str	r2, [sp, #4]
 802baa2:	1e5a      	subs	r2, r3, #1
 802baa4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802baa8:	bf88      	it	hi
 802baaa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802baae:	4627      	mov	r7, r4
 802bab0:	bf82      	ittt	hi
 802bab2:	eb03 0905 	addhi.w	r9, r3, r5
 802bab6:	f240 135d 	movwhi	r3, #349	; 0x15d
 802baba:	60a3      	strhi	r3, [r4, #8]
 802babc:	f857 3b1c 	ldr.w	r3, [r7], #28
 802bac0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802bac4:	bf98      	it	ls
 802bac6:	f04f 0900 	movls.w	r9, #0
 802baca:	6023      	str	r3, [r4, #0]
 802bacc:	463d      	mov	r5, r7
 802bace:	f04f 0b00 	mov.w	fp, #0
 802bad2:	6831      	ldr	r1, [r6, #0]
 802bad4:	ab03      	add	r3, sp, #12
 802bad6:	7809      	ldrb	r1, [r1, #0]
 802bad8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802badc:	2202      	movs	r2, #2
 802bade:	f7d4 fb4f 	bl	8000180 <memchr>
 802bae2:	b328      	cbz	r0, 802bb30 <_scanf_i+0xb8>
 802bae4:	f1bb 0f01 	cmp.w	fp, #1
 802bae8:	d159      	bne.n	802bb9e <_scanf_i+0x126>
 802baea:	6862      	ldr	r2, [r4, #4]
 802baec:	b92a      	cbnz	r2, 802bafa <_scanf_i+0x82>
 802baee:	6822      	ldr	r2, [r4, #0]
 802baf0:	2308      	movs	r3, #8
 802baf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802baf6:	6063      	str	r3, [r4, #4]
 802baf8:	6022      	str	r2, [r4, #0]
 802bafa:	6822      	ldr	r2, [r4, #0]
 802bafc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802bb00:	6022      	str	r2, [r4, #0]
 802bb02:	68a2      	ldr	r2, [r4, #8]
 802bb04:	1e51      	subs	r1, r2, #1
 802bb06:	60a1      	str	r1, [r4, #8]
 802bb08:	b192      	cbz	r2, 802bb30 <_scanf_i+0xb8>
 802bb0a:	6832      	ldr	r2, [r6, #0]
 802bb0c:	1c51      	adds	r1, r2, #1
 802bb0e:	6031      	str	r1, [r6, #0]
 802bb10:	7812      	ldrb	r2, [r2, #0]
 802bb12:	f805 2b01 	strb.w	r2, [r5], #1
 802bb16:	6872      	ldr	r2, [r6, #4]
 802bb18:	3a01      	subs	r2, #1
 802bb1a:	2a00      	cmp	r2, #0
 802bb1c:	6072      	str	r2, [r6, #4]
 802bb1e:	dc07      	bgt.n	802bb30 <_scanf_i+0xb8>
 802bb20:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802bb24:	4631      	mov	r1, r6
 802bb26:	4650      	mov	r0, sl
 802bb28:	4790      	blx	r2
 802bb2a:	2800      	cmp	r0, #0
 802bb2c:	f040 8085 	bne.w	802bc3a <_scanf_i+0x1c2>
 802bb30:	f10b 0b01 	add.w	fp, fp, #1
 802bb34:	f1bb 0f03 	cmp.w	fp, #3
 802bb38:	d1cb      	bne.n	802bad2 <_scanf_i+0x5a>
 802bb3a:	6863      	ldr	r3, [r4, #4]
 802bb3c:	b90b      	cbnz	r3, 802bb42 <_scanf_i+0xca>
 802bb3e:	230a      	movs	r3, #10
 802bb40:	6063      	str	r3, [r4, #4]
 802bb42:	6863      	ldr	r3, [r4, #4]
 802bb44:	4947      	ldr	r1, [pc, #284]	; (802bc64 <_scanf_i+0x1ec>)
 802bb46:	6960      	ldr	r0, [r4, #20]
 802bb48:	1ac9      	subs	r1, r1, r3
 802bb4a:	f000 f8af 	bl	802bcac <__sccl>
 802bb4e:	f04f 0b00 	mov.w	fp, #0
 802bb52:	68a3      	ldr	r3, [r4, #8]
 802bb54:	6822      	ldr	r2, [r4, #0]
 802bb56:	2b00      	cmp	r3, #0
 802bb58:	d03d      	beq.n	802bbd6 <_scanf_i+0x15e>
 802bb5a:	6831      	ldr	r1, [r6, #0]
 802bb5c:	6960      	ldr	r0, [r4, #20]
 802bb5e:	f891 c000 	ldrb.w	ip, [r1]
 802bb62:	f810 000c 	ldrb.w	r0, [r0, ip]
 802bb66:	2800      	cmp	r0, #0
 802bb68:	d035      	beq.n	802bbd6 <_scanf_i+0x15e>
 802bb6a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802bb6e:	d124      	bne.n	802bbba <_scanf_i+0x142>
 802bb70:	0510      	lsls	r0, r2, #20
 802bb72:	d522      	bpl.n	802bbba <_scanf_i+0x142>
 802bb74:	f10b 0b01 	add.w	fp, fp, #1
 802bb78:	f1b9 0f00 	cmp.w	r9, #0
 802bb7c:	d003      	beq.n	802bb86 <_scanf_i+0x10e>
 802bb7e:	3301      	adds	r3, #1
 802bb80:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 802bb84:	60a3      	str	r3, [r4, #8]
 802bb86:	6873      	ldr	r3, [r6, #4]
 802bb88:	3b01      	subs	r3, #1
 802bb8a:	2b00      	cmp	r3, #0
 802bb8c:	6073      	str	r3, [r6, #4]
 802bb8e:	dd1b      	ble.n	802bbc8 <_scanf_i+0x150>
 802bb90:	6833      	ldr	r3, [r6, #0]
 802bb92:	3301      	adds	r3, #1
 802bb94:	6033      	str	r3, [r6, #0]
 802bb96:	68a3      	ldr	r3, [r4, #8]
 802bb98:	3b01      	subs	r3, #1
 802bb9a:	60a3      	str	r3, [r4, #8]
 802bb9c:	e7d9      	b.n	802bb52 <_scanf_i+0xda>
 802bb9e:	f1bb 0f02 	cmp.w	fp, #2
 802bba2:	d1ae      	bne.n	802bb02 <_scanf_i+0x8a>
 802bba4:	6822      	ldr	r2, [r4, #0]
 802bba6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802bbaa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802bbae:	d1bf      	bne.n	802bb30 <_scanf_i+0xb8>
 802bbb0:	2310      	movs	r3, #16
 802bbb2:	6063      	str	r3, [r4, #4]
 802bbb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802bbb8:	e7a2      	b.n	802bb00 <_scanf_i+0x88>
 802bbba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802bbbe:	6022      	str	r2, [r4, #0]
 802bbc0:	780b      	ldrb	r3, [r1, #0]
 802bbc2:	f805 3b01 	strb.w	r3, [r5], #1
 802bbc6:	e7de      	b.n	802bb86 <_scanf_i+0x10e>
 802bbc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802bbcc:	4631      	mov	r1, r6
 802bbce:	4650      	mov	r0, sl
 802bbd0:	4798      	blx	r3
 802bbd2:	2800      	cmp	r0, #0
 802bbd4:	d0df      	beq.n	802bb96 <_scanf_i+0x11e>
 802bbd6:	6823      	ldr	r3, [r4, #0]
 802bbd8:	05db      	lsls	r3, r3, #23
 802bbda:	d50d      	bpl.n	802bbf8 <_scanf_i+0x180>
 802bbdc:	42bd      	cmp	r5, r7
 802bbde:	d909      	bls.n	802bbf4 <_scanf_i+0x17c>
 802bbe0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802bbe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802bbe8:	4632      	mov	r2, r6
 802bbea:	4650      	mov	r0, sl
 802bbec:	4798      	blx	r3
 802bbee:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 802bbf2:	464d      	mov	r5, r9
 802bbf4:	42bd      	cmp	r5, r7
 802bbf6:	d02d      	beq.n	802bc54 <_scanf_i+0x1dc>
 802bbf8:	6822      	ldr	r2, [r4, #0]
 802bbfa:	f012 0210 	ands.w	r2, r2, #16
 802bbfe:	d113      	bne.n	802bc28 <_scanf_i+0x1b0>
 802bc00:	702a      	strb	r2, [r5, #0]
 802bc02:	6863      	ldr	r3, [r4, #4]
 802bc04:	9e01      	ldr	r6, [sp, #4]
 802bc06:	4639      	mov	r1, r7
 802bc08:	4650      	mov	r0, sl
 802bc0a:	47b0      	blx	r6
 802bc0c:	6821      	ldr	r1, [r4, #0]
 802bc0e:	f8d8 3000 	ldr.w	r3, [r8]
 802bc12:	f011 0f20 	tst.w	r1, #32
 802bc16:	d013      	beq.n	802bc40 <_scanf_i+0x1c8>
 802bc18:	1d1a      	adds	r2, r3, #4
 802bc1a:	f8c8 2000 	str.w	r2, [r8]
 802bc1e:	681b      	ldr	r3, [r3, #0]
 802bc20:	6018      	str	r0, [r3, #0]
 802bc22:	68e3      	ldr	r3, [r4, #12]
 802bc24:	3301      	adds	r3, #1
 802bc26:	60e3      	str	r3, [r4, #12]
 802bc28:	1bed      	subs	r5, r5, r7
 802bc2a:	44ab      	add	fp, r5
 802bc2c:	6925      	ldr	r5, [r4, #16]
 802bc2e:	445d      	add	r5, fp
 802bc30:	6125      	str	r5, [r4, #16]
 802bc32:	2000      	movs	r0, #0
 802bc34:	b007      	add	sp, #28
 802bc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bc3a:	f04f 0b00 	mov.w	fp, #0
 802bc3e:	e7ca      	b.n	802bbd6 <_scanf_i+0x15e>
 802bc40:	1d1a      	adds	r2, r3, #4
 802bc42:	f8c8 2000 	str.w	r2, [r8]
 802bc46:	681b      	ldr	r3, [r3, #0]
 802bc48:	f011 0f01 	tst.w	r1, #1
 802bc4c:	bf14      	ite	ne
 802bc4e:	8018      	strhne	r0, [r3, #0]
 802bc50:	6018      	streq	r0, [r3, #0]
 802bc52:	e7e6      	b.n	802bc22 <_scanf_i+0x1aa>
 802bc54:	2001      	movs	r0, #1
 802bc56:	e7ed      	b.n	802bc34 <_scanf_i+0x1bc>
 802bc58:	08032658 	.word	0x08032658
 802bc5c:	0802bf91 	.word	0x0802bf91
 802bc60:	0802bea9 	.word	0x0802bea9
 802bc64:	08034235 	.word	0x08034235

0802bc68 <_read_r>:
 802bc68:	b538      	push	{r3, r4, r5, lr}
 802bc6a:	4d07      	ldr	r5, [pc, #28]	; (802bc88 <_read_r+0x20>)
 802bc6c:	4604      	mov	r4, r0
 802bc6e:	4608      	mov	r0, r1
 802bc70:	4611      	mov	r1, r2
 802bc72:	2200      	movs	r2, #0
 802bc74:	602a      	str	r2, [r5, #0]
 802bc76:	461a      	mov	r2, r3
 802bc78:	f7d7 fc23 	bl	80034c2 <_read>
 802bc7c:	1c43      	adds	r3, r0, #1
 802bc7e:	d102      	bne.n	802bc86 <_read_r+0x1e>
 802bc80:	682b      	ldr	r3, [r5, #0]
 802bc82:	b103      	cbz	r3, 802bc86 <_read_r+0x1e>
 802bc84:	6023      	str	r3, [r4, #0]
 802bc86:	bd38      	pop	{r3, r4, r5, pc}
 802bc88:	20007fb8 	.word	0x20007fb8

0802bc8c <_sbrk_r>:
 802bc8c:	b538      	push	{r3, r4, r5, lr}
 802bc8e:	4d06      	ldr	r5, [pc, #24]	; (802bca8 <_sbrk_r+0x1c>)
 802bc90:	2300      	movs	r3, #0
 802bc92:	4604      	mov	r4, r0
 802bc94:	4608      	mov	r0, r1
 802bc96:	602b      	str	r3, [r5, #0]
 802bc98:	f7d7 fc64 	bl	8003564 <_sbrk>
 802bc9c:	1c43      	adds	r3, r0, #1
 802bc9e:	d102      	bne.n	802bca6 <_sbrk_r+0x1a>
 802bca0:	682b      	ldr	r3, [r5, #0]
 802bca2:	b103      	cbz	r3, 802bca6 <_sbrk_r+0x1a>
 802bca4:	6023      	str	r3, [r4, #0]
 802bca6:	bd38      	pop	{r3, r4, r5, pc}
 802bca8:	20007fb8 	.word	0x20007fb8

0802bcac <__sccl>:
 802bcac:	b570      	push	{r4, r5, r6, lr}
 802bcae:	780b      	ldrb	r3, [r1, #0]
 802bcb0:	4604      	mov	r4, r0
 802bcb2:	2b5e      	cmp	r3, #94	; 0x5e
 802bcb4:	bf0b      	itete	eq
 802bcb6:	784b      	ldrbeq	r3, [r1, #1]
 802bcb8:	1c48      	addne	r0, r1, #1
 802bcba:	1c88      	addeq	r0, r1, #2
 802bcbc:	2200      	movne	r2, #0
 802bcbe:	bf08      	it	eq
 802bcc0:	2201      	moveq	r2, #1
 802bcc2:	1e61      	subs	r1, r4, #1
 802bcc4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802bcc8:	f801 2f01 	strb.w	r2, [r1, #1]!
 802bccc:	42a9      	cmp	r1, r5
 802bcce:	d1fb      	bne.n	802bcc8 <__sccl+0x1c>
 802bcd0:	b90b      	cbnz	r3, 802bcd6 <__sccl+0x2a>
 802bcd2:	3801      	subs	r0, #1
 802bcd4:	bd70      	pop	{r4, r5, r6, pc}
 802bcd6:	f082 0201 	eor.w	r2, r2, #1
 802bcda:	54e2      	strb	r2, [r4, r3]
 802bcdc:	4605      	mov	r5, r0
 802bcde:	4628      	mov	r0, r5
 802bce0:	f810 1b01 	ldrb.w	r1, [r0], #1
 802bce4:	292d      	cmp	r1, #45	; 0x2d
 802bce6:	d006      	beq.n	802bcf6 <__sccl+0x4a>
 802bce8:	295d      	cmp	r1, #93	; 0x5d
 802bcea:	d0f3      	beq.n	802bcd4 <__sccl+0x28>
 802bcec:	b909      	cbnz	r1, 802bcf2 <__sccl+0x46>
 802bcee:	4628      	mov	r0, r5
 802bcf0:	e7f0      	b.n	802bcd4 <__sccl+0x28>
 802bcf2:	460b      	mov	r3, r1
 802bcf4:	e7f1      	b.n	802bcda <__sccl+0x2e>
 802bcf6:	786e      	ldrb	r6, [r5, #1]
 802bcf8:	2e5d      	cmp	r6, #93	; 0x5d
 802bcfa:	d0fa      	beq.n	802bcf2 <__sccl+0x46>
 802bcfc:	42b3      	cmp	r3, r6
 802bcfe:	dcf8      	bgt.n	802bcf2 <__sccl+0x46>
 802bd00:	3502      	adds	r5, #2
 802bd02:	4619      	mov	r1, r3
 802bd04:	3101      	adds	r1, #1
 802bd06:	428e      	cmp	r6, r1
 802bd08:	5462      	strb	r2, [r4, r1]
 802bd0a:	dcfb      	bgt.n	802bd04 <__sccl+0x58>
 802bd0c:	1af1      	subs	r1, r6, r3
 802bd0e:	3901      	subs	r1, #1
 802bd10:	1c58      	adds	r0, r3, #1
 802bd12:	42b3      	cmp	r3, r6
 802bd14:	bfa8      	it	ge
 802bd16:	2100      	movge	r1, #0
 802bd18:	1843      	adds	r3, r0, r1
 802bd1a:	e7e0      	b.n	802bcde <__sccl+0x32>

0802bd1c <_raise_r>:
 802bd1c:	291f      	cmp	r1, #31
 802bd1e:	b538      	push	{r3, r4, r5, lr}
 802bd20:	4604      	mov	r4, r0
 802bd22:	460d      	mov	r5, r1
 802bd24:	d904      	bls.n	802bd30 <_raise_r+0x14>
 802bd26:	2316      	movs	r3, #22
 802bd28:	6003      	str	r3, [r0, #0]
 802bd2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802bd2e:	bd38      	pop	{r3, r4, r5, pc}
 802bd30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802bd32:	b112      	cbz	r2, 802bd3a <_raise_r+0x1e>
 802bd34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802bd38:	b94b      	cbnz	r3, 802bd4e <_raise_r+0x32>
 802bd3a:	4620      	mov	r0, r4
 802bd3c:	f000 f830 	bl	802bda0 <_getpid_r>
 802bd40:	462a      	mov	r2, r5
 802bd42:	4601      	mov	r1, r0
 802bd44:	4620      	mov	r0, r4
 802bd46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bd4a:	f000 b817 	b.w	802bd7c <_kill_r>
 802bd4e:	2b01      	cmp	r3, #1
 802bd50:	d00a      	beq.n	802bd68 <_raise_r+0x4c>
 802bd52:	1c59      	adds	r1, r3, #1
 802bd54:	d103      	bne.n	802bd5e <_raise_r+0x42>
 802bd56:	2316      	movs	r3, #22
 802bd58:	6003      	str	r3, [r0, #0]
 802bd5a:	2001      	movs	r0, #1
 802bd5c:	e7e7      	b.n	802bd2e <_raise_r+0x12>
 802bd5e:	2400      	movs	r4, #0
 802bd60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802bd64:	4628      	mov	r0, r5
 802bd66:	4798      	blx	r3
 802bd68:	2000      	movs	r0, #0
 802bd6a:	e7e0      	b.n	802bd2e <_raise_r+0x12>

0802bd6c <raise>:
 802bd6c:	4b02      	ldr	r3, [pc, #8]	; (802bd78 <raise+0xc>)
 802bd6e:	4601      	mov	r1, r0
 802bd70:	6818      	ldr	r0, [r3, #0]
 802bd72:	f7ff bfd3 	b.w	802bd1c <_raise_r>
 802bd76:	bf00      	nop
 802bd78:	200000cc 	.word	0x200000cc

0802bd7c <_kill_r>:
 802bd7c:	b538      	push	{r3, r4, r5, lr}
 802bd7e:	4d07      	ldr	r5, [pc, #28]	; (802bd9c <_kill_r+0x20>)
 802bd80:	2300      	movs	r3, #0
 802bd82:	4604      	mov	r4, r0
 802bd84:	4608      	mov	r0, r1
 802bd86:	4611      	mov	r1, r2
 802bd88:	602b      	str	r3, [r5, #0]
 802bd8a:	f7d7 fb80 	bl	800348e <_kill>
 802bd8e:	1c43      	adds	r3, r0, #1
 802bd90:	d102      	bne.n	802bd98 <_kill_r+0x1c>
 802bd92:	682b      	ldr	r3, [r5, #0]
 802bd94:	b103      	cbz	r3, 802bd98 <_kill_r+0x1c>
 802bd96:	6023      	str	r3, [r4, #0]
 802bd98:	bd38      	pop	{r3, r4, r5, pc}
 802bd9a:	bf00      	nop
 802bd9c:	20007fb8 	.word	0x20007fb8

0802bda0 <_getpid_r>:
 802bda0:	f7d7 bb6d 	b.w	800347e <_getpid>

0802bda4 <_strtol_l.constprop.0>:
 802bda4:	2b01      	cmp	r3, #1
 802bda6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bdaa:	d001      	beq.n	802bdb0 <_strtol_l.constprop.0+0xc>
 802bdac:	2b24      	cmp	r3, #36	; 0x24
 802bdae:	d906      	bls.n	802bdbe <_strtol_l.constprop.0+0x1a>
 802bdb0:	f7fc fe92 	bl	8028ad8 <__errno>
 802bdb4:	2316      	movs	r3, #22
 802bdb6:	6003      	str	r3, [r0, #0]
 802bdb8:	2000      	movs	r0, #0
 802bdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bdbe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 802bea4 <_strtol_l.constprop.0+0x100>
 802bdc2:	460d      	mov	r5, r1
 802bdc4:	462e      	mov	r6, r5
 802bdc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 802bdca:	f814 700c 	ldrb.w	r7, [r4, ip]
 802bdce:	f017 0708 	ands.w	r7, r7, #8
 802bdd2:	d1f7      	bne.n	802bdc4 <_strtol_l.constprop.0+0x20>
 802bdd4:	2c2d      	cmp	r4, #45	; 0x2d
 802bdd6:	d132      	bne.n	802be3e <_strtol_l.constprop.0+0x9a>
 802bdd8:	782c      	ldrb	r4, [r5, #0]
 802bdda:	2701      	movs	r7, #1
 802bddc:	1cb5      	adds	r5, r6, #2
 802bdde:	2b00      	cmp	r3, #0
 802bde0:	d05b      	beq.n	802be9a <_strtol_l.constprop.0+0xf6>
 802bde2:	2b10      	cmp	r3, #16
 802bde4:	d109      	bne.n	802bdfa <_strtol_l.constprop.0+0x56>
 802bde6:	2c30      	cmp	r4, #48	; 0x30
 802bde8:	d107      	bne.n	802bdfa <_strtol_l.constprop.0+0x56>
 802bdea:	782c      	ldrb	r4, [r5, #0]
 802bdec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802bdf0:	2c58      	cmp	r4, #88	; 0x58
 802bdf2:	d14d      	bne.n	802be90 <_strtol_l.constprop.0+0xec>
 802bdf4:	786c      	ldrb	r4, [r5, #1]
 802bdf6:	2310      	movs	r3, #16
 802bdf8:	3502      	adds	r5, #2
 802bdfa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802bdfe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 802be02:	f04f 0c00 	mov.w	ip, #0
 802be06:	fbb8 f9f3 	udiv	r9, r8, r3
 802be0a:	4666      	mov	r6, ip
 802be0c:	fb03 8a19 	mls	sl, r3, r9, r8
 802be10:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 802be14:	f1be 0f09 	cmp.w	lr, #9
 802be18:	d816      	bhi.n	802be48 <_strtol_l.constprop.0+0xa4>
 802be1a:	4674      	mov	r4, lr
 802be1c:	42a3      	cmp	r3, r4
 802be1e:	dd24      	ble.n	802be6a <_strtol_l.constprop.0+0xc6>
 802be20:	f1bc 0f00 	cmp.w	ip, #0
 802be24:	db1e      	blt.n	802be64 <_strtol_l.constprop.0+0xc0>
 802be26:	45b1      	cmp	r9, r6
 802be28:	d31c      	bcc.n	802be64 <_strtol_l.constprop.0+0xc0>
 802be2a:	d101      	bne.n	802be30 <_strtol_l.constprop.0+0x8c>
 802be2c:	45a2      	cmp	sl, r4
 802be2e:	db19      	blt.n	802be64 <_strtol_l.constprop.0+0xc0>
 802be30:	fb06 4603 	mla	r6, r6, r3, r4
 802be34:	f04f 0c01 	mov.w	ip, #1
 802be38:	f815 4b01 	ldrb.w	r4, [r5], #1
 802be3c:	e7e8      	b.n	802be10 <_strtol_l.constprop.0+0x6c>
 802be3e:	2c2b      	cmp	r4, #43	; 0x2b
 802be40:	bf04      	itt	eq
 802be42:	782c      	ldrbeq	r4, [r5, #0]
 802be44:	1cb5      	addeq	r5, r6, #2
 802be46:	e7ca      	b.n	802bdde <_strtol_l.constprop.0+0x3a>
 802be48:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 802be4c:	f1be 0f19 	cmp.w	lr, #25
 802be50:	d801      	bhi.n	802be56 <_strtol_l.constprop.0+0xb2>
 802be52:	3c37      	subs	r4, #55	; 0x37
 802be54:	e7e2      	b.n	802be1c <_strtol_l.constprop.0+0x78>
 802be56:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802be5a:	f1be 0f19 	cmp.w	lr, #25
 802be5e:	d804      	bhi.n	802be6a <_strtol_l.constprop.0+0xc6>
 802be60:	3c57      	subs	r4, #87	; 0x57
 802be62:	e7db      	b.n	802be1c <_strtol_l.constprop.0+0x78>
 802be64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 802be68:	e7e6      	b.n	802be38 <_strtol_l.constprop.0+0x94>
 802be6a:	f1bc 0f00 	cmp.w	ip, #0
 802be6e:	da05      	bge.n	802be7c <_strtol_l.constprop.0+0xd8>
 802be70:	2322      	movs	r3, #34	; 0x22
 802be72:	6003      	str	r3, [r0, #0]
 802be74:	4646      	mov	r6, r8
 802be76:	b942      	cbnz	r2, 802be8a <_strtol_l.constprop.0+0xe6>
 802be78:	4630      	mov	r0, r6
 802be7a:	e79e      	b.n	802bdba <_strtol_l.constprop.0+0x16>
 802be7c:	b107      	cbz	r7, 802be80 <_strtol_l.constprop.0+0xdc>
 802be7e:	4276      	negs	r6, r6
 802be80:	2a00      	cmp	r2, #0
 802be82:	d0f9      	beq.n	802be78 <_strtol_l.constprop.0+0xd4>
 802be84:	f1bc 0f00 	cmp.w	ip, #0
 802be88:	d000      	beq.n	802be8c <_strtol_l.constprop.0+0xe8>
 802be8a:	1e69      	subs	r1, r5, #1
 802be8c:	6011      	str	r1, [r2, #0]
 802be8e:	e7f3      	b.n	802be78 <_strtol_l.constprop.0+0xd4>
 802be90:	2430      	movs	r4, #48	; 0x30
 802be92:	2b00      	cmp	r3, #0
 802be94:	d1b1      	bne.n	802bdfa <_strtol_l.constprop.0+0x56>
 802be96:	2308      	movs	r3, #8
 802be98:	e7af      	b.n	802bdfa <_strtol_l.constprop.0+0x56>
 802be9a:	2c30      	cmp	r4, #48	; 0x30
 802be9c:	d0a5      	beq.n	802bdea <_strtol_l.constprop.0+0x46>
 802be9e:	230a      	movs	r3, #10
 802bea0:	e7ab      	b.n	802bdfa <_strtol_l.constprop.0+0x56>
 802bea2:	bf00      	nop
 802bea4:	08034238 	.word	0x08034238

0802bea8 <_strtol_r>:
 802bea8:	f7ff bf7c 	b.w	802bda4 <_strtol_l.constprop.0>

0802beac <_strtoul_l.constprop.0>:
 802beac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802beb0:	4f36      	ldr	r7, [pc, #216]	; (802bf8c <_strtoul_l.constprop.0+0xe0>)
 802beb2:	4686      	mov	lr, r0
 802beb4:	460d      	mov	r5, r1
 802beb6:	4628      	mov	r0, r5
 802beb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 802bebc:	5de6      	ldrb	r6, [r4, r7]
 802bebe:	f016 0608 	ands.w	r6, r6, #8
 802bec2:	d1f8      	bne.n	802beb6 <_strtoul_l.constprop.0+0xa>
 802bec4:	2c2d      	cmp	r4, #45	; 0x2d
 802bec6:	d12f      	bne.n	802bf28 <_strtoul_l.constprop.0+0x7c>
 802bec8:	782c      	ldrb	r4, [r5, #0]
 802beca:	2601      	movs	r6, #1
 802becc:	1c85      	adds	r5, r0, #2
 802bece:	2b00      	cmp	r3, #0
 802bed0:	d057      	beq.n	802bf82 <_strtoul_l.constprop.0+0xd6>
 802bed2:	2b10      	cmp	r3, #16
 802bed4:	d109      	bne.n	802beea <_strtoul_l.constprop.0+0x3e>
 802bed6:	2c30      	cmp	r4, #48	; 0x30
 802bed8:	d107      	bne.n	802beea <_strtoul_l.constprop.0+0x3e>
 802beda:	7828      	ldrb	r0, [r5, #0]
 802bedc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802bee0:	2858      	cmp	r0, #88	; 0x58
 802bee2:	d149      	bne.n	802bf78 <_strtoul_l.constprop.0+0xcc>
 802bee4:	786c      	ldrb	r4, [r5, #1]
 802bee6:	2310      	movs	r3, #16
 802bee8:	3502      	adds	r5, #2
 802beea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 802beee:	2700      	movs	r7, #0
 802bef0:	fbb8 f8f3 	udiv	r8, r8, r3
 802bef4:	fb03 f908 	mul.w	r9, r3, r8
 802bef8:	ea6f 0909 	mvn.w	r9, r9
 802befc:	4638      	mov	r0, r7
 802befe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802bf02:	f1bc 0f09 	cmp.w	ip, #9
 802bf06:	d814      	bhi.n	802bf32 <_strtoul_l.constprop.0+0x86>
 802bf08:	4664      	mov	r4, ip
 802bf0a:	42a3      	cmp	r3, r4
 802bf0c:	dd22      	ble.n	802bf54 <_strtoul_l.constprop.0+0xa8>
 802bf0e:	2f00      	cmp	r7, #0
 802bf10:	db1d      	blt.n	802bf4e <_strtoul_l.constprop.0+0xa2>
 802bf12:	4580      	cmp	r8, r0
 802bf14:	d31b      	bcc.n	802bf4e <_strtoul_l.constprop.0+0xa2>
 802bf16:	d101      	bne.n	802bf1c <_strtoul_l.constprop.0+0x70>
 802bf18:	45a1      	cmp	r9, r4
 802bf1a:	db18      	blt.n	802bf4e <_strtoul_l.constprop.0+0xa2>
 802bf1c:	fb00 4003 	mla	r0, r0, r3, r4
 802bf20:	2701      	movs	r7, #1
 802bf22:	f815 4b01 	ldrb.w	r4, [r5], #1
 802bf26:	e7ea      	b.n	802befe <_strtoul_l.constprop.0+0x52>
 802bf28:	2c2b      	cmp	r4, #43	; 0x2b
 802bf2a:	bf04      	itt	eq
 802bf2c:	782c      	ldrbeq	r4, [r5, #0]
 802bf2e:	1c85      	addeq	r5, r0, #2
 802bf30:	e7cd      	b.n	802bece <_strtoul_l.constprop.0+0x22>
 802bf32:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802bf36:	f1bc 0f19 	cmp.w	ip, #25
 802bf3a:	d801      	bhi.n	802bf40 <_strtoul_l.constprop.0+0x94>
 802bf3c:	3c37      	subs	r4, #55	; 0x37
 802bf3e:	e7e4      	b.n	802bf0a <_strtoul_l.constprop.0+0x5e>
 802bf40:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802bf44:	f1bc 0f19 	cmp.w	ip, #25
 802bf48:	d804      	bhi.n	802bf54 <_strtoul_l.constprop.0+0xa8>
 802bf4a:	3c57      	subs	r4, #87	; 0x57
 802bf4c:	e7dd      	b.n	802bf0a <_strtoul_l.constprop.0+0x5e>
 802bf4e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802bf52:	e7e6      	b.n	802bf22 <_strtoul_l.constprop.0+0x76>
 802bf54:	2f00      	cmp	r7, #0
 802bf56:	da07      	bge.n	802bf68 <_strtoul_l.constprop.0+0xbc>
 802bf58:	2322      	movs	r3, #34	; 0x22
 802bf5a:	f8ce 3000 	str.w	r3, [lr]
 802bf5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802bf62:	b932      	cbnz	r2, 802bf72 <_strtoul_l.constprop.0+0xc6>
 802bf64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802bf68:	b106      	cbz	r6, 802bf6c <_strtoul_l.constprop.0+0xc0>
 802bf6a:	4240      	negs	r0, r0
 802bf6c:	2a00      	cmp	r2, #0
 802bf6e:	d0f9      	beq.n	802bf64 <_strtoul_l.constprop.0+0xb8>
 802bf70:	b107      	cbz	r7, 802bf74 <_strtoul_l.constprop.0+0xc8>
 802bf72:	1e69      	subs	r1, r5, #1
 802bf74:	6011      	str	r1, [r2, #0]
 802bf76:	e7f5      	b.n	802bf64 <_strtoul_l.constprop.0+0xb8>
 802bf78:	2430      	movs	r4, #48	; 0x30
 802bf7a:	2b00      	cmp	r3, #0
 802bf7c:	d1b5      	bne.n	802beea <_strtoul_l.constprop.0+0x3e>
 802bf7e:	2308      	movs	r3, #8
 802bf80:	e7b3      	b.n	802beea <_strtoul_l.constprop.0+0x3e>
 802bf82:	2c30      	cmp	r4, #48	; 0x30
 802bf84:	d0a9      	beq.n	802beda <_strtoul_l.constprop.0+0x2e>
 802bf86:	230a      	movs	r3, #10
 802bf88:	e7af      	b.n	802beea <_strtoul_l.constprop.0+0x3e>
 802bf8a:	bf00      	nop
 802bf8c:	08034238 	.word	0x08034238

0802bf90 <_strtoul_r>:
 802bf90:	f7ff bf8c 	b.w	802beac <_strtoul_l.constprop.0>

0802bf94 <__submore>:
 802bf94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bf98:	460c      	mov	r4, r1
 802bf9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802bf9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802bfa0:	4299      	cmp	r1, r3
 802bfa2:	d11d      	bne.n	802bfe0 <__submore+0x4c>
 802bfa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802bfa8:	f7ff fa96 	bl	802b4d8 <_malloc_r>
 802bfac:	b918      	cbnz	r0, 802bfb6 <__submore+0x22>
 802bfae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802bfb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bfb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bfba:	63a3      	str	r3, [r4, #56]	; 0x38
 802bfbc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802bfc0:	6360      	str	r0, [r4, #52]	; 0x34
 802bfc2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802bfc6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802bfca:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802bfce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802bfd2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802bfd6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802bfda:	6020      	str	r0, [r4, #0]
 802bfdc:	2000      	movs	r0, #0
 802bfde:	e7e8      	b.n	802bfb2 <__submore+0x1e>
 802bfe0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802bfe2:	0077      	lsls	r7, r6, #1
 802bfe4:	463a      	mov	r2, r7
 802bfe6:	f7ff faeb 	bl	802b5c0 <_realloc_r>
 802bfea:	4605      	mov	r5, r0
 802bfec:	2800      	cmp	r0, #0
 802bfee:	d0de      	beq.n	802bfae <__submore+0x1a>
 802bff0:	eb00 0806 	add.w	r8, r0, r6
 802bff4:	4601      	mov	r1, r0
 802bff6:	4632      	mov	r2, r6
 802bff8:	4640      	mov	r0, r8
 802bffa:	f7fc fdb9 	bl	8028b70 <memcpy>
 802bffe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802c002:	f8c4 8000 	str.w	r8, [r4]
 802c006:	e7e9      	b.n	802bfdc <__submore+0x48>

0802c008 <_fstat_r>:
 802c008:	b538      	push	{r3, r4, r5, lr}
 802c00a:	4d07      	ldr	r5, [pc, #28]	; (802c028 <_fstat_r+0x20>)
 802c00c:	2300      	movs	r3, #0
 802c00e:	4604      	mov	r4, r0
 802c010:	4608      	mov	r0, r1
 802c012:	4611      	mov	r1, r2
 802c014:	602b      	str	r3, [r5, #0]
 802c016:	f7d7 fa7d 	bl	8003514 <_fstat>
 802c01a:	1c43      	adds	r3, r0, #1
 802c01c:	d102      	bne.n	802c024 <_fstat_r+0x1c>
 802c01e:	682b      	ldr	r3, [r5, #0]
 802c020:	b103      	cbz	r3, 802c024 <_fstat_r+0x1c>
 802c022:	6023      	str	r3, [r4, #0]
 802c024:	bd38      	pop	{r3, r4, r5, pc}
 802c026:	bf00      	nop
 802c028:	20007fb8 	.word	0x20007fb8

0802c02c <_isatty_r>:
 802c02c:	b538      	push	{r3, r4, r5, lr}
 802c02e:	4d06      	ldr	r5, [pc, #24]	; (802c048 <_isatty_r+0x1c>)
 802c030:	2300      	movs	r3, #0
 802c032:	4604      	mov	r4, r0
 802c034:	4608      	mov	r0, r1
 802c036:	602b      	str	r3, [r5, #0]
 802c038:	f7d7 fa7c 	bl	8003534 <_isatty>
 802c03c:	1c43      	adds	r3, r0, #1
 802c03e:	d102      	bne.n	802c046 <_isatty_r+0x1a>
 802c040:	682b      	ldr	r3, [r5, #0]
 802c042:	b103      	cbz	r3, 802c046 <_isatty_r+0x1a>
 802c044:	6023      	str	r3, [r4, #0]
 802c046:	bd38      	pop	{r3, r4, r5, pc}
 802c048:	20007fb8 	.word	0x20007fb8

0802c04c <__ascii_mbtowc>:
 802c04c:	b082      	sub	sp, #8
 802c04e:	b901      	cbnz	r1, 802c052 <__ascii_mbtowc+0x6>
 802c050:	a901      	add	r1, sp, #4
 802c052:	b142      	cbz	r2, 802c066 <__ascii_mbtowc+0x1a>
 802c054:	b14b      	cbz	r3, 802c06a <__ascii_mbtowc+0x1e>
 802c056:	7813      	ldrb	r3, [r2, #0]
 802c058:	600b      	str	r3, [r1, #0]
 802c05a:	7812      	ldrb	r2, [r2, #0]
 802c05c:	1e10      	subs	r0, r2, #0
 802c05e:	bf18      	it	ne
 802c060:	2001      	movne	r0, #1
 802c062:	b002      	add	sp, #8
 802c064:	4770      	bx	lr
 802c066:	4610      	mov	r0, r2
 802c068:	e7fb      	b.n	802c062 <__ascii_mbtowc+0x16>
 802c06a:	f06f 0001 	mvn.w	r0, #1
 802c06e:	e7f8      	b.n	802c062 <__ascii_mbtowc+0x16>

0802c070 <__malloc_lock>:
 802c070:	4801      	ldr	r0, [pc, #4]	; (802c078 <__malloc_lock+0x8>)
 802c072:	f7fe bda8 	b.w	802abc6 <__retarget_lock_acquire_recursive>
 802c076:	bf00      	nop
 802c078:	20007fac 	.word	0x20007fac

0802c07c <__malloc_unlock>:
 802c07c:	4801      	ldr	r0, [pc, #4]	; (802c084 <__malloc_unlock+0x8>)
 802c07e:	f7fe bda3 	b.w	802abc8 <__retarget_lock_release_recursive>
 802c082:	bf00      	nop
 802c084:	20007fac 	.word	0x20007fac

0802c088 <_malloc_usable_size_r>:
 802c088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c08c:	1f18      	subs	r0, r3, #4
 802c08e:	2b00      	cmp	r3, #0
 802c090:	bfbc      	itt	lt
 802c092:	580b      	ldrlt	r3, [r1, r0]
 802c094:	18c0      	addlt	r0, r0, r3
 802c096:	4770      	bx	lr

0802c098 <__ascii_wctomb>:
 802c098:	b149      	cbz	r1, 802c0ae <__ascii_wctomb+0x16>
 802c09a:	2aff      	cmp	r2, #255	; 0xff
 802c09c:	bf85      	ittet	hi
 802c09e:	238a      	movhi	r3, #138	; 0x8a
 802c0a0:	6003      	strhi	r3, [r0, #0]
 802c0a2:	700a      	strbls	r2, [r1, #0]
 802c0a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 802c0a8:	bf98      	it	ls
 802c0aa:	2001      	movls	r0, #1
 802c0ac:	4770      	bx	lr
 802c0ae:	4608      	mov	r0, r1
 802c0b0:	4770      	bx	lr
	...

0802c0b4 <pow>:
 802c0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c0b6:	ed2d 8b02 	vpush	{d8}
 802c0ba:	eeb0 8a40 	vmov.f32	s16, s0
 802c0be:	eef0 8a60 	vmov.f32	s17, s1
 802c0c2:	ec55 4b11 	vmov	r4, r5, d1
 802c0c6:	f000 f893 	bl	802c1f0 <__ieee754_pow>
 802c0ca:	4622      	mov	r2, r4
 802c0cc:	462b      	mov	r3, r5
 802c0ce:	4620      	mov	r0, r4
 802c0d0:	4629      	mov	r1, r5
 802c0d2:	ec57 6b10 	vmov	r6, r7, d0
 802c0d6:	f7d4 fd01 	bl	8000adc <__aeabi_dcmpun>
 802c0da:	2800      	cmp	r0, #0
 802c0dc:	d13b      	bne.n	802c156 <pow+0xa2>
 802c0de:	ec51 0b18 	vmov	r0, r1, d8
 802c0e2:	2200      	movs	r2, #0
 802c0e4:	2300      	movs	r3, #0
 802c0e6:	f7d4 fcc7 	bl	8000a78 <__aeabi_dcmpeq>
 802c0ea:	b1b8      	cbz	r0, 802c11c <pow+0x68>
 802c0ec:	2200      	movs	r2, #0
 802c0ee:	2300      	movs	r3, #0
 802c0f0:	4620      	mov	r0, r4
 802c0f2:	4629      	mov	r1, r5
 802c0f4:	f7d4 fcc0 	bl	8000a78 <__aeabi_dcmpeq>
 802c0f8:	2800      	cmp	r0, #0
 802c0fa:	d146      	bne.n	802c18a <pow+0xd6>
 802c0fc:	ec45 4b10 	vmov	d0, r4, r5
 802c100:	f000 fe8f 	bl	802ce22 <finite>
 802c104:	b338      	cbz	r0, 802c156 <pow+0xa2>
 802c106:	2200      	movs	r2, #0
 802c108:	2300      	movs	r3, #0
 802c10a:	4620      	mov	r0, r4
 802c10c:	4629      	mov	r1, r5
 802c10e:	f7d4 fcbd 	bl	8000a8c <__aeabi_dcmplt>
 802c112:	b300      	cbz	r0, 802c156 <pow+0xa2>
 802c114:	f7fc fce0 	bl	8028ad8 <__errno>
 802c118:	2322      	movs	r3, #34	; 0x22
 802c11a:	e01b      	b.n	802c154 <pow+0xa0>
 802c11c:	ec47 6b10 	vmov	d0, r6, r7
 802c120:	f000 fe7f 	bl	802ce22 <finite>
 802c124:	b9e0      	cbnz	r0, 802c160 <pow+0xac>
 802c126:	eeb0 0a48 	vmov.f32	s0, s16
 802c12a:	eef0 0a68 	vmov.f32	s1, s17
 802c12e:	f000 fe78 	bl	802ce22 <finite>
 802c132:	b1a8      	cbz	r0, 802c160 <pow+0xac>
 802c134:	ec45 4b10 	vmov	d0, r4, r5
 802c138:	f000 fe73 	bl	802ce22 <finite>
 802c13c:	b180      	cbz	r0, 802c160 <pow+0xac>
 802c13e:	4632      	mov	r2, r6
 802c140:	463b      	mov	r3, r7
 802c142:	4630      	mov	r0, r6
 802c144:	4639      	mov	r1, r7
 802c146:	f7d4 fcc9 	bl	8000adc <__aeabi_dcmpun>
 802c14a:	2800      	cmp	r0, #0
 802c14c:	d0e2      	beq.n	802c114 <pow+0x60>
 802c14e:	f7fc fcc3 	bl	8028ad8 <__errno>
 802c152:	2321      	movs	r3, #33	; 0x21
 802c154:	6003      	str	r3, [r0, #0]
 802c156:	ecbd 8b02 	vpop	{d8}
 802c15a:	ec47 6b10 	vmov	d0, r6, r7
 802c15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c160:	2200      	movs	r2, #0
 802c162:	2300      	movs	r3, #0
 802c164:	4630      	mov	r0, r6
 802c166:	4639      	mov	r1, r7
 802c168:	f7d4 fc86 	bl	8000a78 <__aeabi_dcmpeq>
 802c16c:	2800      	cmp	r0, #0
 802c16e:	d0f2      	beq.n	802c156 <pow+0xa2>
 802c170:	eeb0 0a48 	vmov.f32	s0, s16
 802c174:	eef0 0a68 	vmov.f32	s1, s17
 802c178:	f000 fe53 	bl	802ce22 <finite>
 802c17c:	2800      	cmp	r0, #0
 802c17e:	d0ea      	beq.n	802c156 <pow+0xa2>
 802c180:	ec45 4b10 	vmov	d0, r4, r5
 802c184:	f000 fe4d 	bl	802ce22 <finite>
 802c188:	e7c3      	b.n	802c112 <pow+0x5e>
 802c18a:	4f01      	ldr	r7, [pc, #4]	; (802c190 <pow+0xdc>)
 802c18c:	2600      	movs	r6, #0
 802c18e:	e7e2      	b.n	802c156 <pow+0xa2>
 802c190:	3ff00000 	.word	0x3ff00000

0802c194 <sqrt>:
 802c194:	b538      	push	{r3, r4, r5, lr}
 802c196:	ed2d 8b02 	vpush	{d8}
 802c19a:	ec55 4b10 	vmov	r4, r5, d0
 802c19e:	f000 fd55 	bl	802cc4c <__ieee754_sqrt>
 802c1a2:	4622      	mov	r2, r4
 802c1a4:	462b      	mov	r3, r5
 802c1a6:	4620      	mov	r0, r4
 802c1a8:	4629      	mov	r1, r5
 802c1aa:	eeb0 8a40 	vmov.f32	s16, s0
 802c1ae:	eef0 8a60 	vmov.f32	s17, s1
 802c1b2:	f7d4 fc93 	bl	8000adc <__aeabi_dcmpun>
 802c1b6:	b990      	cbnz	r0, 802c1de <sqrt+0x4a>
 802c1b8:	2200      	movs	r2, #0
 802c1ba:	2300      	movs	r3, #0
 802c1bc:	4620      	mov	r0, r4
 802c1be:	4629      	mov	r1, r5
 802c1c0:	f7d4 fc64 	bl	8000a8c <__aeabi_dcmplt>
 802c1c4:	b158      	cbz	r0, 802c1de <sqrt+0x4a>
 802c1c6:	f7fc fc87 	bl	8028ad8 <__errno>
 802c1ca:	2321      	movs	r3, #33	; 0x21
 802c1cc:	6003      	str	r3, [r0, #0]
 802c1ce:	2200      	movs	r2, #0
 802c1d0:	2300      	movs	r3, #0
 802c1d2:	4610      	mov	r0, r2
 802c1d4:	4619      	mov	r1, r3
 802c1d6:	f7d4 fb11 	bl	80007fc <__aeabi_ddiv>
 802c1da:	ec41 0b18 	vmov	d8, r0, r1
 802c1de:	eeb0 0a48 	vmov.f32	s0, s16
 802c1e2:	eef0 0a68 	vmov.f32	s1, s17
 802c1e6:	ecbd 8b02 	vpop	{d8}
 802c1ea:	bd38      	pop	{r3, r4, r5, pc}
 802c1ec:	0000      	movs	r0, r0
	...

0802c1f0 <__ieee754_pow>:
 802c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c1f4:	ed2d 8b06 	vpush	{d8-d10}
 802c1f8:	b089      	sub	sp, #36	; 0x24
 802c1fa:	ed8d 1b00 	vstr	d1, [sp]
 802c1fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 802c202:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802c206:	ea58 0102 	orrs.w	r1, r8, r2
 802c20a:	ec57 6b10 	vmov	r6, r7, d0
 802c20e:	d115      	bne.n	802c23c <__ieee754_pow+0x4c>
 802c210:	19b3      	adds	r3, r6, r6
 802c212:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 802c216:	4152      	adcs	r2, r2
 802c218:	4299      	cmp	r1, r3
 802c21a:	4b89      	ldr	r3, [pc, #548]	; (802c440 <__ieee754_pow+0x250>)
 802c21c:	4193      	sbcs	r3, r2
 802c21e:	f080 84d2 	bcs.w	802cbc6 <__ieee754_pow+0x9d6>
 802c222:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c226:	4630      	mov	r0, r6
 802c228:	4639      	mov	r1, r7
 802c22a:	f7d4 f807 	bl	800023c <__adddf3>
 802c22e:	ec41 0b10 	vmov	d0, r0, r1
 802c232:	b009      	add	sp, #36	; 0x24
 802c234:	ecbd 8b06 	vpop	{d8-d10}
 802c238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c23c:	4b81      	ldr	r3, [pc, #516]	; (802c444 <__ieee754_pow+0x254>)
 802c23e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 802c242:	429c      	cmp	r4, r3
 802c244:	ee10 aa10 	vmov	sl, s0
 802c248:	463d      	mov	r5, r7
 802c24a:	dc06      	bgt.n	802c25a <__ieee754_pow+0x6a>
 802c24c:	d101      	bne.n	802c252 <__ieee754_pow+0x62>
 802c24e:	2e00      	cmp	r6, #0
 802c250:	d1e7      	bne.n	802c222 <__ieee754_pow+0x32>
 802c252:	4598      	cmp	r8, r3
 802c254:	dc01      	bgt.n	802c25a <__ieee754_pow+0x6a>
 802c256:	d10f      	bne.n	802c278 <__ieee754_pow+0x88>
 802c258:	b172      	cbz	r2, 802c278 <__ieee754_pow+0x88>
 802c25a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 802c25e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 802c262:	ea55 050a 	orrs.w	r5, r5, sl
 802c266:	d1dc      	bne.n	802c222 <__ieee754_pow+0x32>
 802c268:	e9dd 3200 	ldrd	r3, r2, [sp]
 802c26c:	18db      	adds	r3, r3, r3
 802c26e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 802c272:	4152      	adcs	r2, r2
 802c274:	429d      	cmp	r5, r3
 802c276:	e7d0      	b.n	802c21a <__ieee754_pow+0x2a>
 802c278:	2d00      	cmp	r5, #0
 802c27a:	da3b      	bge.n	802c2f4 <__ieee754_pow+0x104>
 802c27c:	4b72      	ldr	r3, [pc, #456]	; (802c448 <__ieee754_pow+0x258>)
 802c27e:	4598      	cmp	r8, r3
 802c280:	dc51      	bgt.n	802c326 <__ieee754_pow+0x136>
 802c282:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802c286:	4598      	cmp	r8, r3
 802c288:	f340 84ac 	ble.w	802cbe4 <__ieee754_pow+0x9f4>
 802c28c:	ea4f 5328 	mov.w	r3, r8, asr #20
 802c290:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802c294:	2b14      	cmp	r3, #20
 802c296:	dd0f      	ble.n	802c2b8 <__ieee754_pow+0xc8>
 802c298:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 802c29c:	fa22 f103 	lsr.w	r1, r2, r3
 802c2a0:	fa01 f303 	lsl.w	r3, r1, r3
 802c2a4:	4293      	cmp	r3, r2
 802c2a6:	f040 849d 	bne.w	802cbe4 <__ieee754_pow+0x9f4>
 802c2aa:	f001 0101 	and.w	r1, r1, #1
 802c2ae:	f1c1 0302 	rsb	r3, r1, #2
 802c2b2:	9304      	str	r3, [sp, #16]
 802c2b4:	b182      	cbz	r2, 802c2d8 <__ieee754_pow+0xe8>
 802c2b6:	e05f      	b.n	802c378 <__ieee754_pow+0x188>
 802c2b8:	2a00      	cmp	r2, #0
 802c2ba:	d15b      	bne.n	802c374 <__ieee754_pow+0x184>
 802c2bc:	f1c3 0314 	rsb	r3, r3, #20
 802c2c0:	fa48 f103 	asr.w	r1, r8, r3
 802c2c4:	fa01 f303 	lsl.w	r3, r1, r3
 802c2c8:	4543      	cmp	r3, r8
 802c2ca:	f040 8488 	bne.w	802cbde <__ieee754_pow+0x9ee>
 802c2ce:	f001 0101 	and.w	r1, r1, #1
 802c2d2:	f1c1 0302 	rsb	r3, r1, #2
 802c2d6:	9304      	str	r3, [sp, #16]
 802c2d8:	4b5c      	ldr	r3, [pc, #368]	; (802c44c <__ieee754_pow+0x25c>)
 802c2da:	4598      	cmp	r8, r3
 802c2dc:	d132      	bne.n	802c344 <__ieee754_pow+0x154>
 802c2de:	f1b9 0f00 	cmp.w	r9, #0
 802c2e2:	f280 8478 	bge.w	802cbd6 <__ieee754_pow+0x9e6>
 802c2e6:	4959      	ldr	r1, [pc, #356]	; (802c44c <__ieee754_pow+0x25c>)
 802c2e8:	4632      	mov	r2, r6
 802c2ea:	463b      	mov	r3, r7
 802c2ec:	2000      	movs	r0, #0
 802c2ee:	f7d4 fa85 	bl	80007fc <__aeabi_ddiv>
 802c2f2:	e79c      	b.n	802c22e <__ieee754_pow+0x3e>
 802c2f4:	2300      	movs	r3, #0
 802c2f6:	9304      	str	r3, [sp, #16]
 802c2f8:	2a00      	cmp	r2, #0
 802c2fa:	d13d      	bne.n	802c378 <__ieee754_pow+0x188>
 802c2fc:	4b51      	ldr	r3, [pc, #324]	; (802c444 <__ieee754_pow+0x254>)
 802c2fe:	4598      	cmp	r8, r3
 802c300:	d1ea      	bne.n	802c2d8 <__ieee754_pow+0xe8>
 802c302:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802c306:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802c30a:	ea53 030a 	orrs.w	r3, r3, sl
 802c30e:	f000 845a 	beq.w	802cbc6 <__ieee754_pow+0x9d6>
 802c312:	4b4f      	ldr	r3, [pc, #316]	; (802c450 <__ieee754_pow+0x260>)
 802c314:	429c      	cmp	r4, r3
 802c316:	dd08      	ble.n	802c32a <__ieee754_pow+0x13a>
 802c318:	f1b9 0f00 	cmp.w	r9, #0
 802c31c:	f2c0 8457 	blt.w	802cbce <__ieee754_pow+0x9de>
 802c320:	e9dd 0100 	ldrd	r0, r1, [sp]
 802c324:	e783      	b.n	802c22e <__ieee754_pow+0x3e>
 802c326:	2302      	movs	r3, #2
 802c328:	e7e5      	b.n	802c2f6 <__ieee754_pow+0x106>
 802c32a:	f1b9 0f00 	cmp.w	r9, #0
 802c32e:	f04f 0000 	mov.w	r0, #0
 802c332:	f04f 0100 	mov.w	r1, #0
 802c336:	f6bf af7a 	bge.w	802c22e <__ieee754_pow+0x3e>
 802c33a:	e9dd 0300 	ldrd	r0, r3, [sp]
 802c33e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802c342:	e774      	b.n	802c22e <__ieee754_pow+0x3e>
 802c344:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802c348:	d106      	bne.n	802c358 <__ieee754_pow+0x168>
 802c34a:	4632      	mov	r2, r6
 802c34c:	463b      	mov	r3, r7
 802c34e:	4630      	mov	r0, r6
 802c350:	4639      	mov	r1, r7
 802c352:	f7d4 f929 	bl	80005a8 <__aeabi_dmul>
 802c356:	e76a      	b.n	802c22e <__ieee754_pow+0x3e>
 802c358:	4b3e      	ldr	r3, [pc, #248]	; (802c454 <__ieee754_pow+0x264>)
 802c35a:	4599      	cmp	r9, r3
 802c35c:	d10c      	bne.n	802c378 <__ieee754_pow+0x188>
 802c35e:	2d00      	cmp	r5, #0
 802c360:	db0a      	blt.n	802c378 <__ieee754_pow+0x188>
 802c362:	ec47 6b10 	vmov	d0, r6, r7
 802c366:	b009      	add	sp, #36	; 0x24
 802c368:	ecbd 8b06 	vpop	{d8-d10}
 802c36c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c370:	f000 bc6c 	b.w	802cc4c <__ieee754_sqrt>
 802c374:	2300      	movs	r3, #0
 802c376:	9304      	str	r3, [sp, #16]
 802c378:	ec47 6b10 	vmov	d0, r6, r7
 802c37c:	f000 fd48 	bl	802ce10 <fabs>
 802c380:	ec51 0b10 	vmov	r0, r1, d0
 802c384:	f1ba 0f00 	cmp.w	sl, #0
 802c388:	d129      	bne.n	802c3de <__ieee754_pow+0x1ee>
 802c38a:	b124      	cbz	r4, 802c396 <__ieee754_pow+0x1a6>
 802c38c:	4b2f      	ldr	r3, [pc, #188]	; (802c44c <__ieee754_pow+0x25c>)
 802c38e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 802c392:	429a      	cmp	r2, r3
 802c394:	d123      	bne.n	802c3de <__ieee754_pow+0x1ee>
 802c396:	f1b9 0f00 	cmp.w	r9, #0
 802c39a:	da05      	bge.n	802c3a8 <__ieee754_pow+0x1b8>
 802c39c:	4602      	mov	r2, r0
 802c39e:	460b      	mov	r3, r1
 802c3a0:	2000      	movs	r0, #0
 802c3a2:	492a      	ldr	r1, [pc, #168]	; (802c44c <__ieee754_pow+0x25c>)
 802c3a4:	f7d4 fa2a 	bl	80007fc <__aeabi_ddiv>
 802c3a8:	2d00      	cmp	r5, #0
 802c3aa:	f6bf af40 	bge.w	802c22e <__ieee754_pow+0x3e>
 802c3ae:	9b04      	ldr	r3, [sp, #16]
 802c3b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802c3b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802c3b8:	4323      	orrs	r3, r4
 802c3ba:	d108      	bne.n	802c3ce <__ieee754_pow+0x1de>
 802c3bc:	4602      	mov	r2, r0
 802c3be:	460b      	mov	r3, r1
 802c3c0:	4610      	mov	r0, r2
 802c3c2:	4619      	mov	r1, r3
 802c3c4:	f7d3 ff38 	bl	8000238 <__aeabi_dsub>
 802c3c8:	4602      	mov	r2, r0
 802c3ca:	460b      	mov	r3, r1
 802c3cc:	e78f      	b.n	802c2ee <__ieee754_pow+0xfe>
 802c3ce:	9b04      	ldr	r3, [sp, #16]
 802c3d0:	2b01      	cmp	r3, #1
 802c3d2:	f47f af2c 	bne.w	802c22e <__ieee754_pow+0x3e>
 802c3d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802c3da:	4619      	mov	r1, r3
 802c3dc:	e727      	b.n	802c22e <__ieee754_pow+0x3e>
 802c3de:	0feb      	lsrs	r3, r5, #31
 802c3e0:	3b01      	subs	r3, #1
 802c3e2:	9306      	str	r3, [sp, #24]
 802c3e4:	9a06      	ldr	r2, [sp, #24]
 802c3e6:	9b04      	ldr	r3, [sp, #16]
 802c3e8:	4313      	orrs	r3, r2
 802c3ea:	d102      	bne.n	802c3f2 <__ieee754_pow+0x202>
 802c3ec:	4632      	mov	r2, r6
 802c3ee:	463b      	mov	r3, r7
 802c3f0:	e7e6      	b.n	802c3c0 <__ieee754_pow+0x1d0>
 802c3f2:	4b19      	ldr	r3, [pc, #100]	; (802c458 <__ieee754_pow+0x268>)
 802c3f4:	4598      	cmp	r8, r3
 802c3f6:	f340 80fb 	ble.w	802c5f0 <__ieee754_pow+0x400>
 802c3fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 802c3fe:	4598      	cmp	r8, r3
 802c400:	4b13      	ldr	r3, [pc, #76]	; (802c450 <__ieee754_pow+0x260>)
 802c402:	dd0c      	ble.n	802c41e <__ieee754_pow+0x22e>
 802c404:	429c      	cmp	r4, r3
 802c406:	dc0f      	bgt.n	802c428 <__ieee754_pow+0x238>
 802c408:	f1b9 0f00 	cmp.w	r9, #0
 802c40c:	da0f      	bge.n	802c42e <__ieee754_pow+0x23e>
 802c40e:	2000      	movs	r0, #0
 802c410:	b009      	add	sp, #36	; 0x24
 802c412:	ecbd 8b06 	vpop	{d8-d10}
 802c416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c41a:	f000 bcf0 	b.w	802cdfe <__math_oflow>
 802c41e:	429c      	cmp	r4, r3
 802c420:	dbf2      	blt.n	802c408 <__ieee754_pow+0x218>
 802c422:	4b0a      	ldr	r3, [pc, #40]	; (802c44c <__ieee754_pow+0x25c>)
 802c424:	429c      	cmp	r4, r3
 802c426:	dd19      	ble.n	802c45c <__ieee754_pow+0x26c>
 802c428:	f1b9 0f00 	cmp.w	r9, #0
 802c42c:	dcef      	bgt.n	802c40e <__ieee754_pow+0x21e>
 802c42e:	2000      	movs	r0, #0
 802c430:	b009      	add	sp, #36	; 0x24
 802c432:	ecbd 8b06 	vpop	{d8-d10}
 802c436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c43a:	f000 bcd7 	b.w	802cdec <__math_uflow>
 802c43e:	bf00      	nop
 802c440:	fff00000 	.word	0xfff00000
 802c444:	7ff00000 	.word	0x7ff00000
 802c448:	433fffff 	.word	0x433fffff
 802c44c:	3ff00000 	.word	0x3ff00000
 802c450:	3fefffff 	.word	0x3fefffff
 802c454:	3fe00000 	.word	0x3fe00000
 802c458:	41e00000 	.word	0x41e00000
 802c45c:	4b60      	ldr	r3, [pc, #384]	; (802c5e0 <__ieee754_pow+0x3f0>)
 802c45e:	2200      	movs	r2, #0
 802c460:	f7d3 feea 	bl	8000238 <__aeabi_dsub>
 802c464:	a354      	add	r3, pc, #336	; (adr r3, 802c5b8 <__ieee754_pow+0x3c8>)
 802c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c46a:	4604      	mov	r4, r0
 802c46c:	460d      	mov	r5, r1
 802c46e:	f7d4 f89b 	bl	80005a8 <__aeabi_dmul>
 802c472:	a353      	add	r3, pc, #332	; (adr r3, 802c5c0 <__ieee754_pow+0x3d0>)
 802c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c478:	4606      	mov	r6, r0
 802c47a:	460f      	mov	r7, r1
 802c47c:	4620      	mov	r0, r4
 802c47e:	4629      	mov	r1, r5
 802c480:	f7d4 f892 	bl	80005a8 <__aeabi_dmul>
 802c484:	4b57      	ldr	r3, [pc, #348]	; (802c5e4 <__ieee754_pow+0x3f4>)
 802c486:	4682      	mov	sl, r0
 802c488:	468b      	mov	fp, r1
 802c48a:	2200      	movs	r2, #0
 802c48c:	4620      	mov	r0, r4
 802c48e:	4629      	mov	r1, r5
 802c490:	f7d4 f88a 	bl	80005a8 <__aeabi_dmul>
 802c494:	4602      	mov	r2, r0
 802c496:	460b      	mov	r3, r1
 802c498:	a14b      	add	r1, pc, #300	; (adr r1, 802c5c8 <__ieee754_pow+0x3d8>)
 802c49a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802c49e:	f7d3 fecb 	bl	8000238 <__aeabi_dsub>
 802c4a2:	4622      	mov	r2, r4
 802c4a4:	462b      	mov	r3, r5
 802c4a6:	f7d4 f87f 	bl	80005a8 <__aeabi_dmul>
 802c4aa:	4602      	mov	r2, r0
 802c4ac:	460b      	mov	r3, r1
 802c4ae:	2000      	movs	r0, #0
 802c4b0:	494d      	ldr	r1, [pc, #308]	; (802c5e8 <__ieee754_pow+0x3f8>)
 802c4b2:	f7d3 fec1 	bl	8000238 <__aeabi_dsub>
 802c4b6:	4622      	mov	r2, r4
 802c4b8:	4680      	mov	r8, r0
 802c4ba:	4689      	mov	r9, r1
 802c4bc:	462b      	mov	r3, r5
 802c4be:	4620      	mov	r0, r4
 802c4c0:	4629      	mov	r1, r5
 802c4c2:	f7d4 f871 	bl	80005a8 <__aeabi_dmul>
 802c4c6:	4602      	mov	r2, r0
 802c4c8:	460b      	mov	r3, r1
 802c4ca:	4640      	mov	r0, r8
 802c4cc:	4649      	mov	r1, r9
 802c4ce:	f7d4 f86b 	bl	80005a8 <__aeabi_dmul>
 802c4d2:	a33f      	add	r3, pc, #252	; (adr r3, 802c5d0 <__ieee754_pow+0x3e0>)
 802c4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c4d8:	f7d4 f866 	bl	80005a8 <__aeabi_dmul>
 802c4dc:	4602      	mov	r2, r0
 802c4de:	460b      	mov	r3, r1
 802c4e0:	4650      	mov	r0, sl
 802c4e2:	4659      	mov	r1, fp
 802c4e4:	f7d3 fea8 	bl	8000238 <__aeabi_dsub>
 802c4e8:	4602      	mov	r2, r0
 802c4ea:	460b      	mov	r3, r1
 802c4ec:	4680      	mov	r8, r0
 802c4ee:	4689      	mov	r9, r1
 802c4f0:	4630      	mov	r0, r6
 802c4f2:	4639      	mov	r1, r7
 802c4f4:	f7d3 fea2 	bl	800023c <__adddf3>
 802c4f8:	2000      	movs	r0, #0
 802c4fa:	4632      	mov	r2, r6
 802c4fc:	463b      	mov	r3, r7
 802c4fe:	4604      	mov	r4, r0
 802c500:	460d      	mov	r5, r1
 802c502:	f7d3 fe99 	bl	8000238 <__aeabi_dsub>
 802c506:	4602      	mov	r2, r0
 802c508:	460b      	mov	r3, r1
 802c50a:	4640      	mov	r0, r8
 802c50c:	4649      	mov	r1, r9
 802c50e:	f7d3 fe93 	bl	8000238 <__aeabi_dsub>
 802c512:	9b04      	ldr	r3, [sp, #16]
 802c514:	9a06      	ldr	r2, [sp, #24]
 802c516:	3b01      	subs	r3, #1
 802c518:	4313      	orrs	r3, r2
 802c51a:	4682      	mov	sl, r0
 802c51c:	468b      	mov	fp, r1
 802c51e:	f040 81e7 	bne.w	802c8f0 <__ieee754_pow+0x700>
 802c522:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 802c5d8 <__ieee754_pow+0x3e8>
 802c526:	eeb0 8a47 	vmov.f32	s16, s14
 802c52a:	eef0 8a67 	vmov.f32	s17, s15
 802c52e:	e9dd 6700 	ldrd	r6, r7, [sp]
 802c532:	2600      	movs	r6, #0
 802c534:	4632      	mov	r2, r6
 802c536:	463b      	mov	r3, r7
 802c538:	e9dd 0100 	ldrd	r0, r1, [sp]
 802c53c:	f7d3 fe7c 	bl	8000238 <__aeabi_dsub>
 802c540:	4622      	mov	r2, r4
 802c542:	462b      	mov	r3, r5
 802c544:	f7d4 f830 	bl	80005a8 <__aeabi_dmul>
 802c548:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c54c:	4680      	mov	r8, r0
 802c54e:	4689      	mov	r9, r1
 802c550:	4650      	mov	r0, sl
 802c552:	4659      	mov	r1, fp
 802c554:	f7d4 f828 	bl	80005a8 <__aeabi_dmul>
 802c558:	4602      	mov	r2, r0
 802c55a:	460b      	mov	r3, r1
 802c55c:	4640      	mov	r0, r8
 802c55e:	4649      	mov	r1, r9
 802c560:	f7d3 fe6c 	bl	800023c <__adddf3>
 802c564:	4632      	mov	r2, r6
 802c566:	463b      	mov	r3, r7
 802c568:	4680      	mov	r8, r0
 802c56a:	4689      	mov	r9, r1
 802c56c:	4620      	mov	r0, r4
 802c56e:	4629      	mov	r1, r5
 802c570:	f7d4 f81a 	bl	80005a8 <__aeabi_dmul>
 802c574:	460b      	mov	r3, r1
 802c576:	4604      	mov	r4, r0
 802c578:	460d      	mov	r5, r1
 802c57a:	4602      	mov	r2, r0
 802c57c:	4649      	mov	r1, r9
 802c57e:	4640      	mov	r0, r8
 802c580:	f7d3 fe5c 	bl	800023c <__adddf3>
 802c584:	4b19      	ldr	r3, [pc, #100]	; (802c5ec <__ieee754_pow+0x3fc>)
 802c586:	4299      	cmp	r1, r3
 802c588:	ec45 4b19 	vmov	d9, r4, r5
 802c58c:	4606      	mov	r6, r0
 802c58e:	460f      	mov	r7, r1
 802c590:	468b      	mov	fp, r1
 802c592:	f340 82f1 	ble.w	802cb78 <__ieee754_pow+0x988>
 802c596:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802c59a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802c59e:	4303      	orrs	r3, r0
 802c5a0:	f000 81e4 	beq.w	802c96c <__ieee754_pow+0x77c>
 802c5a4:	ec51 0b18 	vmov	r0, r1, d8
 802c5a8:	2200      	movs	r2, #0
 802c5aa:	2300      	movs	r3, #0
 802c5ac:	f7d4 fa6e 	bl	8000a8c <__aeabi_dcmplt>
 802c5b0:	3800      	subs	r0, #0
 802c5b2:	bf18      	it	ne
 802c5b4:	2001      	movne	r0, #1
 802c5b6:	e72b      	b.n	802c410 <__ieee754_pow+0x220>
 802c5b8:	60000000 	.word	0x60000000
 802c5bc:	3ff71547 	.word	0x3ff71547
 802c5c0:	f85ddf44 	.word	0xf85ddf44
 802c5c4:	3e54ae0b 	.word	0x3e54ae0b
 802c5c8:	55555555 	.word	0x55555555
 802c5cc:	3fd55555 	.word	0x3fd55555
 802c5d0:	652b82fe 	.word	0x652b82fe
 802c5d4:	3ff71547 	.word	0x3ff71547
 802c5d8:	00000000 	.word	0x00000000
 802c5dc:	bff00000 	.word	0xbff00000
 802c5e0:	3ff00000 	.word	0x3ff00000
 802c5e4:	3fd00000 	.word	0x3fd00000
 802c5e8:	3fe00000 	.word	0x3fe00000
 802c5ec:	408fffff 	.word	0x408fffff
 802c5f0:	4bd5      	ldr	r3, [pc, #852]	; (802c948 <__ieee754_pow+0x758>)
 802c5f2:	402b      	ands	r3, r5
 802c5f4:	2200      	movs	r2, #0
 802c5f6:	b92b      	cbnz	r3, 802c604 <__ieee754_pow+0x414>
 802c5f8:	4bd4      	ldr	r3, [pc, #848]	; (802c94c <__ieee754_pow+0x75c>)
 802c5fa:	f7d3 ffd5 	bl	80005a8 <__aeabi_dmul>
 802c5fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 802c602:	460c      	mov	r4, r1
 802c604:	1523      	asrs	r3, r4, #20
 802c606:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802c60a:	4413      	add	r3, r2
 802c60c:	9305      	str	r3, [sp, #20]
 802c60e:	4bd0      	ldr	r3, [pc, #832]	; (802c950 <__ieee754_pow+0x760>)
 802c610:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802c614:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 802c618:	429c      	cmp	r4, r3
 802c61a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802c61e:	dd08      	ble.n	802c632 <__ieee754_pow+0x442>
 802c620:	4bcc      	ldr	r3, [pc, #816]	; (802c954 <__ieee754_pow+0x764>)
 802c622:	429c      	cmp	r4, r3
 802c624:	f340 8162 	ble.w	802c8ec <__ieee754_pow+0x6fc>
 802c628:	9b05      	ldr	r3, [sp, #20]
 802c62a:	3301      	adds	r3, #1
 802c62c:	9305      	str	r3, [sp, #20]
 802c62e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802c632:	2400      	movs	r4, #0
 802c634:	00e3      	lsls	r3, r4, #3
 802c636:	9307      	str	r3, [sp, #28]
 802c638:	4bc7      	ldr	r3, [pc, #796]	; (802c958 <__ieee754_pow+0x768>)
 802c63a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802c63e:	ed93 7b00 	vldr	d7, [r3]
 802c642:	4629      	mov	r1, r5
 802c644:	ec53 2b17 	vmov	r2, r3, d7
 802c648:	eeb0 9a47 	vmov.f32	s18, s14
 802c64c:	eef0 9a67 	vmov.f32	s19, s15
 802c650:	4682      	mov	sl, r0
 802c652:	f7d3 fdf1 	bl	8000238 <__aeabi_dsub>
 802c656:	4652      	mov	r2, sl
 802c658:	4606      	mov	r6, r0
 802c65a:	460f      	mov	r7, r1
 802c65c:	462b      	mov	r3, r5
 802c65e:	ec51 0b19 	vmov	r0, r1, d9
 802c662:	f7d3 fdeb 	bl	800023c <__adddf3>
 802c666:	4602      	mov	r2, r0
 802c668:	460b      	mov	r3, r1
 802c66a:	2000      	movs	r0, #0
 802c66c:	49bb      	ldr	r1, [pc, #748]	; (802c95c <__ieee754_pow+0x76c>)
 802c66e:	f7d4 f8c5 	bl	80007fc <__aeabi_ddiv>
 802c672:	ec41 0b1a 	vmov	d10, r0, r1
 802c676:	4602      	mov	r2, r0
 802c678:	460b      	mov	r3, r1
 802c67a:	4630      	mov	r0, r6
 802c67c:	4639      	mov	r1, r7
 802c67e:	f7d3 ff93 	bl	80005a8 <__aeabi_dmul>
 802c682:	2300      	movs	r3, #0
 802c684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802c688:	9302      	str	r3, [sp, #8]
 802c68a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802c68e:	46ab      	mov	fp, r5
 802c690:	106d      	asrs	r5, r5, #1
 802c692:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 802c696:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 802c69a:	ec41 0b18 	vmov	d8, r0, r1
 802c69e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 802c6a2:	2200      	movs	r2, #0
 802c6a4:	4640      	mov	r0, r8
 802c6a6:	4649      	mov	r1, r9
 802c6a8:	4614      	mov	r4, r2
 802c6aa:	461d      	mov	r5, r3
 802c6ac:	f7d3 ff7c 	bl	80005a8 <__aeabi_dmul>
 802c6b0:	4602      	mov	r2, r0
 802c6b2:	460b      	mov	r3, r1
 802c6b4:	4630      	mov	r0, r6
 802c6b6:	4639      	mov	r1, r7
 802c6b8:	f7d3 fdbe 	bl	8000238 <__aeabi_dsub>
 802c6bc:	ec53 2b19 	vmov	r2, r3, d9
 802c6c0:	4606      	mov	r6, r0
 802c6c2:	460f      	mov	r7, r1
 802c6c4:	4620      	mov	r0, r4
 802c6c6:	4629      	mov	r1, r5
 802c6c8:	f7d3 fdb6 	bl	8000238 <__aeabi_dsub>
 802c6cc:	4602      	mov	r2, r0
 802c6ce:	460b      	mov	r3, r1
 802c6d0:	4650      	mov	r0, sl
 802c6d2:	4659      	mov	r1, fp
 802c6d4:	f7d3 fdb0 	bl	8000238 <__aeabi_dsub>
 802c6d8:	4642      	mov	r2, r8
 802c6da:	464b      	mov	r3, r9
 802c6dc:	f7d3 ff64 	bl	80005a8 <__aeabi_dmul>
 802c6e0:	4602      	mov	r2, r0
 802c6e2:	460b      	mov	r3, r1
 802c6e4:	4630      	mov	r0, r6
 802c6e6:	4639      	mov	r1, r7
 802c6e8:	f7d3 fda6 	bl	8000238 <__aeabi_dsub>
 802c6ec:	ec53 2b1a 	vmov	r2, r3, d10
 802c6f0:	f7d3 ff5a 	bl	80005a8 <__aeabi_dmul>
 802c6f4:	ec53 2b18 	vmov	r2, r3, d8
 802c6f8:	ec41 0b19 	vmov	d9, r0, r1
 802c6fc:	ec51 0b18 	vmov	r0, r1, d8
 802c700:	f7d3 ff52 	bl	80005a8 <__aeabi_dmul>
 802c704:	a37c      	add	r3, pc, #496	; (adr r3, 802c8f8 <__ieee754_pow+0x708>)
 802c706:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c70a:	4604      	mov	r4, r0
 802c70c:	460d      	mov	r5, r1
 802c70e:	f7d3 ff4b 	bl	80005a8 <__aeabi_dmul>
 802c712:	a37b      	add	r3, pc, #492	; (adr r3, 802c900 <__ieee754_pow+0x710>)
 802c714:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c718:	f7d3 fd90 	bl	800023c <__adddf3>
 802c71c:	4622      	mov	r2, r4
 802c71e:	462b      	mov	r3, r5
 802c720:	f7d3 ff42 	bl	80005a8 <__aeabi_dmul>
 802c724:	a378      	add	r3, pc, #480	; (adr r3, 802c908 <__ieee754_pow+0x718>)
 802c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c72a:	f7d3 fd87 	bl	800023c <__adddf3>
 802c72e:	4622      	mov	r2, r4
 802c730:	462b      	mov	r3, r5
 802c732:	f7d3 ff39 	bl	80005a8 <__aeabi_dmul>
 802c736:	a376      	add	r3, pc, #472	; (adr r3, 802c910 <__ieee754_pow+0x720>)
 802c738:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c73c:	f7d3 fd7e 	bl	800023c <__adddf3>
 802c740:	4622      	mov	r2, r4
 802c742:	462b      	mov	r3, r5
 802c744:	f7d3 ff30 	bl	80005a8 <__aeabi_dmul>
 802c748:	a373      	add	r3, pc, #460	; (adr r3, 802c918 <__ieee754_pow+0x728>)
 802c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c74e:	f7d3 fd75 	bl	800023c <__adddf3>
 802c752:	4622      	mov	r2, r4
 802c754:	462b      	mov	r3, r5
 802c756:	f7d3 ff27 	bl	80005a8 <__aeabi_dmul>
 802c75a:	a371      	add	r3, pc, #452	; (adr r3, 802c920 <__ieee754_pow+0x730>)
 802c75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c760:	f7d3 fd6c 	bl	800023c <__adddf3>
 802c764:	4622      	mov	r2, r4
 802c766:	4606      	mov	r6, r0
 802c768:	460f      	mov	r7, r1
 802c76a:	462b      	mov	r3, r5
 802c76c:	4620      	mov	r0, r4
 802c76e:	4629      	mov	r1, r5
 802c770:	f7d3 ff1a 	bl	80005a8 <__aeabi_dmul>
 802c774:	4602      	mov	r2, r0
 802c776:	460b      	mov	r3, r1
 802c778:	4630      	mov	r0, r6
 802c77a:	4639      	mov	r1, r7
 802c77c:	f7d3 ff14 	bl	80005a8 <__aeabi_dmul>
 802c780:	4642      	mov	r2, r8
 802c782:	4604      	mov	r4, r0
 802c784:	460d      	mov	r5, r1
 802c786:	464b      	mov	r3, r9
 802c788:	ec51 0b18 	vmov	r0, r1, d8
 802c78c:	f7d3 fd56 	bl	800023c <__adddf3>
 802c790:	ec53 2b19 	vmov	r2, r3, d9
 802c794:	f7d3 ff08 	bl	80005a8 <__aeabi_dmul>
 802c798:	4622      	mov	r2, r4
 802c79a:	462b      	mov	r3, r5
 802c79c:	f7d3 fd4e 	bl	800023c <__adddf3>
 802c7a0:	4642      	mov	r2, r8
 802c7a2:	4682      	mov	sl, r0
 802c7a4:	468b      	mov	fp, r1
 802c7a6:	464b      	mov	r3, r9
 802c7a8:	4640      	mov	r0, r8
 802c7aa:	4649      	mov	r1, r9
 802c7ac:	f7d3 fefc 	bl	80005a8 <__aeabi_dmul>
 802c7b0:	4b6b      	ldr	r3, [pc, #428]	; (802c960 <__ieee754_pow+0x770>)
 802c7b2:	2200      	movs	r2, #0
 802c7b4:	4606      	mov	r6, r0
 802c7b6:	460f      	mov	r7, r1
 802c7b8:	f7d3 fd40 	bl	800023c <__adddf3>
 802c7bc:	4652      	mov	r2, sl
 802c7be:	465b      	mov	r3, fp
 802c7c0:	f7d3 fd3c 	bl	800023c <__adddf3>
 802c7c4:	2000      	movs	r0, #0
 802c7c6:	4604      	mov	r4, r0
 802c7c8:	460d      	mov	r5, r1
 802c7ca:	4602      	mov	r2, r0
 802c7cc:	460b      	mov	r3, r1
 802c7ce:	4640      	mov	r0, r8
 802c7d0:	4649      	mov	r1, r9
 802c7d2:	f7d3 fee9 	bl	80005a8 <__aeabi_dmul>
 802c7d6:	4b62      	ldr	r3, [pc, #392]	; (802c960 <__ieee754_pow+0x770>)
 802c7d8:	4680      	mov	r8, r0
 802c7da:	4689      	mov	r9, r1
 802c7dc:	2200      	movs	r2, #0
 802c7de:	4620      	mov	r0, r4
 802c7e0:	4629      	mov	r1, r5
 802c7e2:	f7d3 fd29 	bl	8000238 <__aeabi_dsub>
 802c7e6:	4632      	mov	r2, r6
 802c7e8:	463b      	mov	r3, r7
 802c7ea:	f7d3 fd25 	bl	8000238 <__aeabi_dsub>
 802c7ee:	4602      	mov	r2, r0
 802c7f0:	460b      	mov	r3, r1
 802c7f2:	4650      	mov	r0, sl
 802c7f4:	4659      	mov	r1, fp
 802c7f6:	f7d3 fd1f 	bl	8000238 <__aeabi_dsub>
 802c7fa:	ec53 2b18 	vmov	r2, r3, d8
 802c7fe:	f7d3 fed3 	bl	80005a8 <__aeabi_dmul>
 802c802:	4622      	mov	r2, r4
 802c804:	4606      	mov	r6, r0
 802c806:	460f      	mov	r7, r1
 802c808:	462b      	mov	r3, r5
 802c80a:	ec51 0b19 	vmov	r0, r1, d9
 802c80e:	f7d3 fecb 	bl	80005a8 <__aeabi_dmul>
 802c812:	4602      	mov	r2, r0
 802c814:	460b      	mov	r3, r1
 802c816:	4630      	mov	r0, r6
 802c818:	4639      	mov	r1, r7
 802c81a:	f7d3 fd0f 	bl	800023c <__adddf3>
 802c81e:	4606      	mov	r6, r0
 802c820:	460f      	mov	r7, r1
 802c822:	4602      	mov	r2, r0
 802c824:	460b      	mov	r3, r1
 802c826:	4640      	mov	r0, r8
 802c828:	4649      	mov	r1, r9
 802c82a:	f7d3 fd07 	bl	800023c <__adddf3>
 802c82e:	a33e      	add	r3, pc, #248	; (adr r3, 802c928 <__ieee754_pow+0x738>)
 802c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c834:	2000      	movs	r0, #0
 802c836:	4604      	mov	r4, r0
 802c838:	460d      	mov	r5, r1
 802c83a:	f7d3 feb5 	bl	80005a8 <__aeabi_dmul>
 802c83e:	4642      	mov	r2, r8
 802c840:	ec41 0b18 	vmov	d8, r0, r1
 802c844:	464b      	mov	r3, r9
 802c846:	4620      	mov	r0, r4
 802c848:	4629      	mov	r1, r5
 802c84a:	f7d3 fcf5 	bl	8000238 <__aeabi_dsub>
 802c84e:	4602      	mov	r2, r0
 802c850:	460b      	mov	r3, r1
 802c852:	4630      	mov	r0, r6
 802c854:	4639      	mov	r1, r7
 802c856:	f7d3 fcef 	bl	8000238 <__aeabi_dsub>
 802c85a:	a335      	add	r3, pc, #212	; (adr r3, 802c930 <__ieee754_pow+0x740>)
 802c85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c860:	f7d3 fea2 	bl	80005a8 <__aeabi_dmul>
 802c864:	a334      	add	r3, pc, #208	; (adr r3, 802c938 <__ieee754_pow+0x748>)
 802c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c86a:	4606      	mov	r6, r0
 802c86c:	460f      	mov	r7, r1
 802c86e:	4620      	mov	r0, r4
 802c870:	4629      	mov	r1, r5
 802c872:	f7d3 fe99 	bl	80005a8 <__aeabi_dmul>
 802c876:	4602      	mov	r2, r0
 802c878:	460b      	mov	r3, r1
 802c87a:	4630      	mov	r0, r6
 802c87c:	4639      	mov	r1, r7
 802c87e:	f7d3 fcdd 	bl	800023c <__adddf3>
 802c882:	9a07      	ldr	r2, [sp, #28]
 802c884:	4b37      	ldr	r3, [pc, #220]	; (802c964 <__ieee754_pow+0x774>)
 802c886:	4413      	add	r3, r2
 802c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c88c:	f7d3 fcd6 	bl	800023c <__adddf3>
 802c890:	4682      	mov	sl, r0
 802c892:	9805      	ldr	r0, [sp, #20]
 802c894:	468b      	mov	fp, r1
 802c896:	f7d3 fe1d 	bl	80004d4 <__aeabi_i2d>
 802c89a:	9a07      	ldr	r2, [sp, #28]
 802c89c:	4b32      	ldr	r3, [pc, #200]	; (802c968 <__ieee754_pow+0x778>)
 802c89e:	4413      	add	r3, r2
 802c8a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 802c8a4:	4606      	mov	r6, r0
 802c8a6:	460f      	mov	r7, r1
 802c8a8:	4652      	mov	r2, sl
 802c8aa:	465b      	mov	r3, fp
 802c8ac:	ec51 0b18 	vmov	r0, r1, d8
 802c8b0:	f7d3 fcc4 	bl	800023c <__adddf3>
 802c8b4:	4642      	mov	r2, r8
 802c8b6:	464b      	mov	r3, r9
 802c8b8:	f7d3 fcc0 	bl	800023c <__adddf3>
 802c8bc:	4632      	mov	r2, r6
 802c8be:	463b      	mov	r3, r7
 802c8c0:	f7d3 fcbc 	bl	800023c <__adddf3>
 802c8c4:	2000      	movs	r0, #0
 802c8c6:	4632      	mov	r2, r6
 802c8c8:	463b      	mov	r3, r7
 802c8ca:	4604      	mov	r4, r0
 802c8cc:	460d      	mov	r5, r1
 802c8ce:	f7d3 fcb3 	bl	8000238 <__aeabi_dsub>
 802c8d2:	4642      	mov	r2, r8
 802c8d4:	464b      	mov	r3, r9
 802c8d6:	f7d3 fcaf 	bl	8000238 <__aeabi_dsub>
 802c8da:	ec53 2b18 	vmov	r2, r3, d8
 802c8de:	f7d3 fcab 	bl	8000238 <__aeabi_dsub>
 802c8e2:	4602      	mov	r2, r0
 802c8e4:	460b      	mov	r3, r1
 802c8e6:	4650      	mov	r0, sl
 802c8e8:	4659      	mov	r1, fp
 802c8ea:	e610      	b.n	802c50e <__ieee754_pow+0x31e>
 802c8ec:	2401      	movs	r4, #1
 802c8ee:	e6a1      	b.n	802c634 <__ieee754_pow+0x444>
 802c8f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 802c940 <__ieee754_pow+0x750>
 802c8f4:	e617      	b.n	802c526 <__ieee754_pow+0x336>
 802c8f6:	bf00      	nop
 802c8f8:	4a454eef 	.word	0x4a454eef
 802c8fc:	3fca7e28 	.word	0x3fca7e28
 802c900:	93c9db65 	.word	0x93c9db65
 802c904:	3fcd864a 	.word	0x3fcd864a
 802c908:	a91d4101 	.word	0xa91d4101
 802c90c:	3fd17460 	.word	0x3fd17460
 802c910:	518f264d 	.word	0x518f264d
 802c914:	3fd55555 	.word	0x3fd55555
 802c918:	db6fabff 	.word	0xdb6fabff
 802c91c:	3fdb6db6 	.word	0x3fdb6db6
 802c920:	33333303 	.word	0x33333303
 802c924:	3fe33333 	.word	0x3fe33333
 802c928:	e0000000 	.word	0xe0000000
 802c92c:	3feec709 	.word	0x3feec709
 802c930:	dc3a03fd 	.word	0xdc3a03fd
 802c934:	3feec709 	.word	0x3feec709
 802c938:	145b01f5 	.word	0x145b01f5
 802c93c:	be3e2fe0 	.word	0xbe3e2fe0
 802c940:	00000000 	.word	0x00000000
 802c944:	3ff00000 	.word	0x3ff00000
 802c948:	7ff00000 	.word	0x7ff00000
 802c94c:	43400000 	.word	0x43400000
 802c950:	0003988e 	.word	0x0003988e
 802c954:	000bb679 	.word	0x000bb679
 802c958:	08034348 	.word	0x08034348
 802c95c:	3ff00000 	.word	0x3ff00000
 802c960:	40080000 	.word	0x40080000
 802c964:	08034368 	.word	0x08034368
 802c968:	08034358 	.word	0x08034358
 802c96c:	a3b5      	add	r3, pc, #724	; (adr r3, 802cc44 <__ieee754_pow+0xa54>)
 802c96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c972:	4640      	mov	r0, r8
 802c974:	4649      	mov	r1, r9
 802c976:	f7d3 fc61 	bl	800023c <__adddf3>
 802c97a:	4622      	mov	r2, r4
 802c97c:	ec41 0b1a 	vmov	d10, r0, r1
 802c980:	462b      	mov	r3, r5
 802c982:	4630      	mov	r0, r6
 802c984:	4639      	mov	r1, r7
 802c986:	f7d3 fc57 	bl	8000238 <__aeabi_dsub>
 802c98a:	4602      	mov	r2, r0
 802c98c:	460b      	mov	r3, r1
 802c98e:	ec51 0b1a 	vmov	r0, r1, d10
 802c992:	f7d4 f899 	bl	8000ac8 <__aeabi_dcmpgt>
 802c996:	2800      	cmp	r0, #0
 802c998:	f47f ae04 	bne.w	802c5a4 <__ieee754_pow+0x3b4>
 802c99c:	4aa4      	ldr	r2, [pc, #656]	; (802cc30 <__ieee754_pow+0xa40>)
 802c99e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802c9a2:	4293      	cmp	r3, r2
 802c9a4:	f340 8108 	ble.w	802cbb8 <__ieee754_pow+0x9c8>
 802c9a8:	151b      	asrs	r3, r3, #20
 802c9aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 802c9ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802c9b2:	fa4a f303 	asr.w	r3, sl, r3
 802c9b6:	445b      	add	r3, fp
 802c9b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802c9bc:	4e9d      	ldr	r6, [pc, #628]	; (802cc34 <__ieee754_pow+0xa44>)
 802c9be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802c9c2:	4116      	asrs	r6, r2
 802c9c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 802c9c8:	2000      	movs	r0, #0
 802c9ca:	ea23 0106 	bic.w	r1, r3, r6
 802c9ce:	f1c2 0214 	rsb	r2, r2, #20
 802c9d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802c9d6:	fa4a fa02 	asr.w	sl, sl, r2
 802c9da:	f1bb 0f00 	cmp.w	fp, #0
 802c9de:	4602      	mov	r2, r0
 802c9e0:	460b      	mov	r3, r1
 802c9e2:	4620      	mov	r0, r4
 802c9e4:	4629      	mov	r1, r5
 802c9e6:	bfb8      	it	lt
 802c9e8:	f1ca 0a00 	rsblt	sl, sl, #0
 802c9ec:	f7d3 fc24 	bl	8000238 <__aeabi_dsub>
 802c9f0:	ec41 0b19 	vmov	d9, r0, r1
 802c9f4:	4642      	mov	r2, r8
 802c9f6:	464b      	mov	r3, r9
 802c9f8:	ec51 0b19 	vmov	r0, r1, d9
 802c9fc:	f7d3 fc1e 	bl	800023c <__adddf3>
 802ca00:	a37b      	add	r3, pc, #492	; (adr r3, 802cbf0 <__ieee754_pow+0xa00>)
 802ca02:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ca06:	2000      	movs	r0, #0
 802ca08:	4604      	mov	r4, r0
 802ca0a:	460d      	mov	r5, r1
 802ca0c:	f7d3 fdcc 	bl	80005a8 <__aeabi_dmul>
 802ca10:	ec53 2b19 	vmov	r2, r3, d9
 802ca14:	4606      	mov	r6, r0
 802ca16:	460f      	mov	r7, r1
 802ca18:	4620      	mov	r0, r4
 802ca1a:	4629      	mov	r1, r5
 802ca1c:	f7d3 fc0c 	bl	8000238 <__aeabi_dsub>
 802ca20:	4602      	mov	r2, r0
 802ca22:	460b      	mov	r3, r1
 802ca24:	4640      	mov	r0, r8
 802ca26:	4649      	mov	r1, r9
 802ca28:	f7d3 fc06 	bl	8000238 <__aeabi_dsub>
 802ca2c:	a372      	add	r3, pc, #456	; (adr r3, 802cbf8 <__ieee754_pow+0xa08>)
 802ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ca32:	f7d3 fdb9 	bl	80005a8 <__aeabi_dmul>
 802ca36:	a372      	add	r3, pc, #456	; (adr r3, 802cc00 <__ieee754_pow+0xa10>)
 802ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ca3c:	4680      	mov	r8, r0
 802ca3e:	4689      	mov	r9, r1
 802ca40:	4620      	mov	r0, r4
 802ca42:	4629      	mov	r1, r5
 802ca44:	f7d3 fdb0 	bl	80005a8 <__aeabi_dmul>
 802ca48:	4602      	mov	r2, r0
 802ca4a:	460b      	mov	r3, r1
 802ca4c:	4640      	mov	r0, r8
 802ca4e:	4649      	mov	r1, r9
 802ca50:	f7d3 fbf4 	bl	800023c <__adddf3>
 802ca54:	4604      	mov	r4, r0
 802ca56:	460d      	mov	r5, r1
 802ca58:	4602      	mov	r2, r0
 802ca5a:	460b      	mov	r3, r1
 802ca5c:	4630      	mov	r0, r6
 802ca5e:	4639      	mov	r1, r7
 802ca60:	f7d3 fbec 	bl	800023c <__adddf3>
 802ca64:	4632      	mov	r2, r6
 802ca66:	463b      	mov	r3, r7
 802ca68:	4680      	mov	r8, r0
 802ca6a:	4689      	mov	r9, r1
 802ca6c:	f7d3 fbe4 	bl	8000238 <__aeabi_dsub>
 802ca70:	4602      	mov	r2, r0
 802ca72:	460b      	mov	r3, r1
 802ca74:	4620      	mov	r0, r4
 802ca76:	4629      	mov	r1, r5
 802ca78:	f7d3 fbde 	bl	8000238 <__aeabi_dsub>
 802ca7c:	4642      	mov	r2, r8
 802ca7e:	4606      	mov	r6, r0
 802ca80:	460f      	mov	r7, r1
 802ca82:	464b      	mov	r3, r9
 802ca84:	4640      	mov	r0, r8
 802ca86:	4649      	mov	r1, r9
 802ca88:	f7d3 fd8e 	bl	80005a8 <__aeabi_dmul>
 802ca8c:	a35e      	add	r3, pc, #376	; (adr r3, 802cc08 <__ieee754_pow+0xa18>)
 802ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ca92:	4604      	mov	r4, r0
 802ca94:	460d      	mov	r5, r1
 802ca96:	f7d3 fd87 	bl	80005a8 <__aeabi_dmul>
 802ca9a:	a35d      	add	r3, pc, #372	; (adr r3, 802cc10 <__ieee754_pow+0xa20>)
 802ca9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802caa0:	f7d3 fbca 	bl	8000238 <__aeabi_dsub>
 802caa4:	4622      	mov	r2, r4
 802caa6:	462b      	mov	r3, r5
 802caa8:	f7d3 fd7e 	bl	80005a8 <__aeabi_dmul>
 802caac:	a35a      	add	r3, pc, #360	; (adr r3, 802cc18 <__ieee754_pow+0xa28>)
 802caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cab2:	f7d3 fbc3 	bl	800023c <__adddf3>
 802cab6:	4622      	mov	r2, r4
 802cab8:	462b      	mov	r3, r5
 802caba:	f7d3 fd75 	bl	80005a8 <__aeabi_dmul>
 802cabe:	a358      	add	r3, pc, #352	; (adr r3, 802cc20 <__ieee754_pow+0xa30>)
 802cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cac4:	f7d3 fbb8 	bl	8000238 <__aeabi_dsub>
 802cac8:	4622      	mov	r2, r4
 802caca:	462b      	mov	r3, r5
 802cacc:	f7d3 fd6c 	bl	80005a8 <__aeabi_dmul>
 802cad0:	a355      	add	r3, pc, #340	; (adr r3, 802cc28 <__ieee754_pow+0xa38>)
 802cad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cad6:	f7d3 fbb1 	bl	800023c <__adddf3>
 802cada:	4622      	mov	r2, r4
 802cadc:	462b      	mov	r3, r5
 802cade:	f7d3 fd63 	bl	80005a8 <__aeabi_dmul>
 802cae2:	4602      	mov	r2, r0
 802cae4:	460b      	mov	r3, r1
 802cae6:	4640      	mov	r0, r8
 802cae8:	4649      	mov	r1, r9
 802caea:	f7d3 fba5 	bl	8000238 <__aeabi_dsub>
 802caee:	4604      	mov	r4, r0
 802caf0:	460d      	mov	r5, r1
 802caf2:	4602      	mov	r2, r0
 802caf4:	460b      	mov	r3, r1
 802caf6:	4640      	mov	r0, r8
 802caf8:	4649      	mov	r1, r9
 802cafa:	f7d3 fd55 	bl	80005a8 <__aeabi_dmul>
 802cafe:	2200      	movs	r2, #0
 802cb00:	ec41 0b19 	vmov	d9, r0, r1
 802cb04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802cb08:	4620      	mov	r0, r4
 802cb0a:	4629      	mov	r1, r5
 802cb0c:	f7d3 fb94 	bl	8000238 <__aeabi_dsub>
 802cb10:	4602      	mov	r2, r0
 802cb12:	460b      	mov	r3, r1
 802cb14:	ec51 0b19 	vmov	r0, r1, d9
 802cb18:	f7d3 fe70 	bl	80007fc <__aeabi_ddiv>
 802cb1c:	4632      	mov	r2, r6
 802cb1e:	4604      	mov	r4, r0
 802cb20:	460d      	mov	r5, r1
 802cb22:	463b      	mov	r3, r7
 802cb24:	4640      	mov	r0, r8
 802cb26:	4649      	mov	r1, r9
 802cb28:	f7d3 fd3e 	bl	80005a8 <__aeabi_dmul>
 802cb2c:	4632      	mov	r2, r6
 802cb2e:	463b      	mov	r3, r7
 802cb30:	f7d3 fb84 	bl	800023c <__adddf3>
 802cb34:	4602      	mov	r2, r0
 802cb36:	460b      	mov	r3, r1
 802cb38:	4620      	mov	r0, r4
 802cb3a:	4629      	mov	r1, r5
 802cb3c:	f7d3 fb7c 	bl	8000238 <__aeabi_dsub>
 802cb40:	4642      	mov	r2, r8
 802cb42:	464b      	mov	r3, r9
 802cb44:	f7d3 fb78 	bl	8000238 <__aeabi_dsub>
 802cb48:	460b      	mov	r3, r1
 802cb4a:	4602      	mov	r2, r0
 802cb4c:	493a      	ldr	r1, [pc, #232]	; (802cc38 <__ieee754_pow+0xa48>)
 802cb4e:	2000      	movs	r0, #0
 802cb50:	f7d3 fb72 	bl	8000238 <__aeabi_dsub>
 802cb54:	ec41 0b10 	vmov	d0, r0, r1
 802cb58:	ee10 3a90 	vmov	r3, s1
 802cb5c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802cb60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802cb64:	da2b      	bge.n	802cbbe <__ieee754_pow+0x9ce>
 802cb66:	4650      	mov	r0, sl
 802cb68:	f000 f966 	bl	802ce38 <scalbn>
 802cb6c:	ec51 0b10 	vmov	r0, r1, d0
 802cb70:	ec53 2b18 	vmov	r2, r3, d8
 802cb74:	f7ff bbed 	b.w	802c352 <__ieee754_pow+0x162>
 802cb78:	4b30      	ldr	r3, [pc, #192]	; (802cc3c <__ieee754_pow+0xa4c>)
 802cb7a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802cb7e:	429e      	cmp	r6, r3
 802cb80:	f77f af0c 	ble.w	802c99c <__ieee754_pow+0x7ac>
 802cb84:	4b2e      	ldr	r3, [pc, #184]	; (802cc40 <__ieee754_pow+0xa50>)
 802cb86:	440b      	add	r3, r1
 802cb88:	4303      	orrs	r3, r0
 802cb8a:	d009      	beq.n	802cba0 <__ieee754_pow+0x9b0>
 802cb8c:	ec51 0b18 	vmov	r0, r1, d8
 802cb90:	2200      	movs	r2, #0
 802cb92:	2300      	movs	r3, #0
 802cb94:	f7d3 ff7a 	bl	8000a8c <__aeabi_dcmplt>
 802cb98:	3800      	subs	r0, #0
 802cb9a:	bf18      	it	ne
 802cb9c:	2001      	movne	r0, #1
 802cb9e:	e447      	b.n	802c430 <__ieee754_pow+0x240>
 802cba0:	4622      	mov	r2, r4
 802cba2:	462b      	mov	r3, r5
 802cba4:	f7d3 fb48 	bl	8000238 <__aeabi_dsub>
 802cba8:	4642      	mov	r2, r8
 802cbaa:	464b      	mov	r3, r9
 802cbac:	f7d3 ff82 	bl	8000ab4 <__aeabi_dcmpge>
 802cbb0:	2800      	cmp	r0, #0
 802cbb2:	f43f aef3 	beq.w	802c99c <__ieee754_pow+0x7ac>
 802cbb6:	e7e9      	b.n	802cb8c <__ieee754_pow+0x99c>
 802cbb8:	f04f 0a00 	mov.w	sl, #0
 802cbbc:	e71a      	b.n	802c9f4 <__ieee754_pow+0x804>
 802cbbe:	ec51 0b10 	vmov	r0, r1, d0
 802cbc2:	4619      	mov	r1, r3
 802cbc4:	e7d4      	b.n	802cb70 <__ieee754_pow+0x980>
 802cbc6:	491c      	ldr	r1, [pc, #112]	; (802cc38 <__ieee754_pow+0xa48>)
 802cbc8:	2000      	movs	r0, #0
 802cbca:	f7ff bb30 	b.w	802c22e <__ieee754_pow+0x3e>
 802cbce:	2000      	movs	r0, #0
 802cbd0:	2100      	movs	r1, #0
 802cbd2:	f7ff bb2c 	b.w	802c22e <__ieee754_pow+0x3e>
 802cbd6:	4630      	mov	r0, r6
 802cbd8:	4639      	mov	r1, r7
 802cbda:	f7ff bb28 	b.w	802c22e <__ieee754_pow+0x3e>
 802cbde:	9204      	str	r2, [sp, #16]
 802cbe0:	f7ff bb7a 	b.w	802c2d8 <__ieee754_pow+0xe8>
 802cbe4:	2300      	movs	r3, #0
 802cbe6:	f7ff bb64 	b.w	802c2b2 <__ieee754_pow+0xc2>
 802cbea:	bf00      	nop
 802cbec:	f3af 8000 	nop.w
 802cbf0:	00000000 	.word	0x00000000
 802cbf4:	3fe62e43 	.word	0x3fe62e43
 802cbf8:	fefa39ef 	.word	0xfefa39ef
 802cbfc:	3fe62e42 	.word	0x3fe62e42
 802cc00:	0ca86c39 	.word	0x0ca86c39
 802cc04:	be205c61 	.word	0xbe205c61
 802cc08:	72bea4d0 	.word	0x72bea4d0
 802cc0c:	3e663769 	.word	0x3e663769
 802cc10:	c5d26bf1 	.word	0xc5d26bf1
 802cc14:	3ebbbd41 	.word	0x3ebbbd41
 802cc18:	af25de2c 	.word	0xaf25de2c
 802cc1c:	3f11566a 	.word	0x3f11566a
 802cc20:	16bebd93 	.word	0x16bebd93
 802cc24:	3f66c16c 	.word	0x3f66c16c
 802cc28:	5555553e 	.word	0x5555553e
 802cc2c:	3fc55555 	.word	0x3fc55555
 802cc30:	3fe00000 	.word	0x3fe00000
 802cc34:	000fffff 	.word	0x000fffff
 802cc38:	3ff00000 	.word	0x3ff00000
 802cc3c:	4090cbff 	.word	0x4090cbff
 802cc40:	3f6f3400 	.word	0x3f6f3400
 802cc44:	652b82fe 	.word	0x652b82fe
 802cc48:	3c971547 	.word	0x3c971547

0802cc4c <__ieee754_sqrt>:
 802cc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cc50:	ec55 4b10 	vmov	r4, r5, d0
 802cc54:	4e55      	ldr	r6, [pc, #340]	; (802cdac <__ieee754_sqrt+0x160>)
 802cc56:	43ae      	bics	r6, r5
 802cc58:	ee10 0a10 	vmov	r0, s0
 802cc5c:	ee10 3a10 	vmov	r3, s0
 802cc60:	462a      	mov	r2, r5
 802cc62:	4629      	mov	r1, r5
 802cc64:	d110      	bne.n	802cc88 <__ieee754_sqrt+0x3c>
 802cc66:	ee10 2a10 	vmov	r2, s0
 802cc6a:	462b      	mov	r3, r5
 802cc6c:	f7d3 fc9c 	bl	80005a8 <__aeabi_dmul>
 802cc70:	4602      	mov	r2, r0
 802cc72:	460b      	mov	r3, r1
 802cc74:	4620      	mov	r0, r4
 802cc76:	4629      	mov	r1, r5
 802cc78:	f7d3 fae0 	bl	800023c <__adddf3>
 802cc7c:	4604      	mov	r4, r0
 802cc7e:	460d      	mov	r5, r1
 802cc80:	ec45 4b10 	vmov	d0, r4, r5
 802cc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cc88:	2d00      	cmp	r5, #0
 802cc8a:	dc10      	bgt.n	802ccae <__ieee754_sqrt+0x62>
 802cc8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802cc90:	4330      	orrs	r0, r6
 802cc92:	d0f5      	beq.n	802cc80 <__ieee754_sqrt+0x34>
 802cc94:	b15d      	cbz	r5, 802ccae <__ieee754_sqrt+0x62>
 802cc96:	ee10 2a10 	vmov	r2, s0
 802cc9a:	462b      	mov	r3, r5
 802cc9c:	ee10 0a10 	vmov	r0, s0
 802cca0:	f7d3 faca 	bl	8000238 <__aeabi_dsub>
 802cca4:	4602      	mov	r2, r0
 802cca6:	460b      	mov	r3, r1
 802cca8:	f7d3 fda8 	bl	80007fc <__aeabi_ddiv>
 802ccac:	e7e6      	b.n	802cc7c <__ieee754_sqrt+0x30>
 802ccae:	1512      	asrs	r2, r2, #20
 802ccb0:	d074      	beq.n	802cd9c <__ieee754_sqrt+0x150>
 802ccb2:	07d4      	lsls	r4, r2, #31
 802ccb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 802ccb8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 802ccbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802ccc0:	bf5e      	ittt	pl
 802ccc2:	0fda      	lsrpl	r2, r3, #31
 802ccc4:	005b      	lslpl	r3, r3, #1
 802ccc6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 802ccca:	2400      	movs	r4, #0
 802cccc:	0fda      	lsrs	r2, r3, #31
 802ccce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 802ccd2:	107f      	asrs	r7, r7, #1
 802ccd4:	005b      	lsls	r3, r3, #1
 802ccd6:	2516      	movs	r5, #22
 802ccd8:	4620      	mov	r0, r4
 802ccda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 802ccde:	1886      	adds	r6, r0, r2
 802cce0:	428e      	cmp	r6, r1
 802cce2:	bfde      	ittt	le
 802cce4:	1b89      	suble	r1, r1, r6
 802cce6:	18b0      	addle	r0, r6, r2
 802cce8:	18a4      	addle	r4, r4, r2
 802ccea:	0049      	lsls	r1, r1, #1
 802ccec:	3d01      	subs	r5, #1
 802ccee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 802ccf2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 802ccf6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802ccfa:	d1f0      	bne.n	802ccde <__ieee754_sqrt+0x92>
 802ccfc:	462a      	mov	r2, r5
 802ccfe:	f04f 0e20 	mov.w	lr, #32
 802cd02:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 802cd06:	4281      	cmp	r1, r0
 802cd08:	eb06 0c05 	add.w	ip, r6, r5
 802cd0c:	dc02      	bgt.n	802cd14 <__ieee754_sqrt+0xc8>
 802cd0e:	d113      	bne.n	802cd38 <__ieee754_sqrt+0xec>
 802cd10:	459c      	cmp	ip, r3
 802cd12:	d811      	bhi.n	802cd38 <__ieee754_sqrt+0xec>
 802cd14:	f1bc 0f00 	cmp.w	ip, #0
 802cd18:	eb0c 0506 	add.w	r5, ip, r6
 802cd1c:	da43      	bge.n	802cda6 <__ieee754_sqrt+0x15a>
 802cd1e:	2d00      	cmp	r5, #0
 802cd20:	db41      	blt.n	802cda6 <__ieee754_sqrt+0x15a>
 802cd22:	f100 0801 	add.w	r8, r0, #1
 802cd26:	1a09      	subs	r1, r1, r0
 802cd28:	459c      	cmp	ip, r3
 802cd2a:	bf88      	it	hi
 802cd2c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 802cd30:	eba3 030c 	sub.w	r3, r3, ip
 802cd34:	4432      	add	r2, r6
 802cd36:	4640      	mov	r0, r8
 802cd38:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 802cd3c:	f1be 0e01 	subs.w	lr, lr, #1
 802cd40:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 802cd44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802cd48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802cd4c:	d1db      	bne.n	802cd06 <__ieee754_sqrt+0xba>
 802cd4e:	430b      	orrs	r3, r1
 802cd50:	d006      	beq.n	802cd60 <__ieee754_sqrt+0x114>
 802cd52:	1c50      	adds	r0, r2, #1
 802cd54:	bf13      	iteet	ne
 802cd56:	3201      	addne	r2, #1
 802cd58:	3401      	addeq	r4, #1
 802cd5a:	4672      	moveq	r2, lr
 802cd5c:	f022 0201 	bicne.w	r2, r2, #1
 802cd60:	1063      	asrs	r3, r4, #1
 802cd62:	0852      	lsrs	r2, r2, #1
 802cd64:	07e1      	lsls	r1, r4, #31
 802cd66:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 802cd6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802cd6e:	bf48      	it	mi
 802cd70:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 802cd74:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 802cd78:	4614      	mov	r4, r2
 802cd7a:	e781      	b.n	802cc80 <__ieee754_sqrt+0x34>
 802cd7c:	0ad9      	lsrs	r1, r3, #11
 802cd7e:	3815      	subs	r0, #21
 802cd80:	055b      	lsls	r3, r3, #21
 802cd82:	2900      	cmp	r1, #0
 802cd84:	d0fa      	beq.n	802cd7c <__ieee754_sqrt+0x130>
 802cd86:	02cd      	lsls	r5, r1, #11
 802cd88:	d50a      	bpl.n	802cda0 <__ieee754_sqrt+0x154>
 802cd8a:	f1c2 0420 	rsb	r4, r2, #32
 802cd8e:	fa23 f404 	lsr.w	r4, r3, r4
 802cd92:	1e55      	subs	r5, r2, #1
 802cd94:	4093      	lsls	r3, r2
 802cd96:	4321      	orrs	r1, r4
 802cd98:	1b42      	subs	r2, r0, r5
 802cd9a:	e78a      	b.n	802ccb2 <__ieee754_sqrt+0x66>
 802cd9c:	4610      	mov	r0, r2
 802cd9e:	e7f0      	b.n	802cd82 <__ieee754_sqrt+0x136>
 802cda0:	0049      	lsls	r1, r1, #1
 802cda2:	3201      	adds	r2, #1
 802cda4:	e7ef      	b.n	802cd86 <__ieee754_sqrt+0x13a>
 802cda6:	4680      	mov	r8, r0
 802cda8:	e7bd      	b.n	802cd26 <__ieee754_sqrt+0xda>
 802cdaa:	bf00      	nop
 802cdac:	7ff00000 	.word	0x7ff00000

0802cdb0 <with_errno>:
 802cdb0:	b570      	push	{r4, r5, r6, lr}
 802cdb2:	4604      	mov	r4, r0
 802cdb4:	460d      	mov	r5, r1
 802cdb6:	4616      	mov	r6, r2
 802cdb8:	f7fb fe8e 	bl	8028ad8 <__errno>
 802cdbc:	4629      	mov	r1, r5
 802cdbe:	6006      	str	r6, [r0, #0]
 802cdc0:	4620      	mov	r0, r4
 802cdc2:	bd70      	pop	{r4, r5, r6, pc}

0802cdc4 <xflow>:
 802cdc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802cdc6:	4614      	mov	r4, r2
 802cdc8:	461d      	mov	r5, r3
 802cdca:	b108      	cbz	r0, 802cdd0 <xflow+0xc>
 802cdcc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802cdd0:	e9cd 2300 	strd	r2, r3, [sp]
 802cdd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 802cdd8:	4620      	mov	r0, r4
 802cdda:	4629      	mov	r1, r5
 802cddc:	f7d3 fbe4 	bl	80005a8 <__aeabi_dmul>
 802cde0:	2222      	movs	r2, #34	; 0x22
 802cde2:	b003      	add	sp, #12
 802cde4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802cde8:	f7ff bfe2 	b.w	802cdb0 <with_errno>

0802cdec <__math_uflow>:
 802cdec:	b508      	push	{r3, lr}
 802cdee:	2200      	movs	r2, #0
 802cdf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 802cdf4:	f7ff ffe6 	bl	802cdc4 <xflow>
 802cdf8:	ec41 0b10 	vmov	d0, r0, r1
 802cdfc:	bd08      	pop	{r3, pc}

0802cdfe <__math_oflow>:
 802cdfe:	b508      	push	{r3, lr}
 802ce00:	2200      	movs	r2, #0
 802ce02:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 802ce06:	f7ff ffdd 	bl	802cdc4 <xflow>
 802ce0a:	ec41 0b10 	vmov	d0, r0, r1
 802ce0e:	bd08      	pop	{r3, pc}

0802ce10 <fabs>:
 802ce10:	ec51 0b10 	vmov	r0, r1, d0
 802ce14:	ee10 2a10 	vmov	r2, s0
 802ce18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802ce1c:	ec43 2b10 	vmov	d0, r2, r3
 802ce20:	4770      	bx	lr

0802ce22 <finite>:
 802ce22:	b082      	sub	sp, #8
 802ce24:	ed8d 0b00 	vstr	d0, [sp]
 802ce28:	9801      	ldr	r0, [sp, #4]
 802ce2a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 802ce2e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802ce32:	0fc0      	lsrs	r0, r0, #31
 802ce34:	b002      	add	sp, #8
 802ce36:	4770      	bx	lr

0802ce38 <scalbn>:
 802ce38:	b570      	push	{r4, r5, r6, lr}
 802ce3a:	ec55 4b10 	vmov	r4, r5, d0
 802ce3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802ce42:	4606      	mov	r6, r0
 802ce44:	462b      	mov	r3, r5
 802ce46:	b99a      	cbnz	r2, 802ce70 <scalbn+0x38>
 802ce48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802ce4c:	4323      	orrs	r3, r4
 802ce4e:	d036      	beq.n	802cebe <scalbn+0x86>
 802ce50:	4b39      	ldr	r3, [pc, #228]	; (802cf38 <scalbn+0x100>)
 802ce52:	4629      	mov	r1, r5
 802ce54:	ee10 0a10 	vmov	r0, s0
 802ce58:	2200      	movs	r2, #0
 802ce5a:	f7d3 fba5 	bl	80005a8 <__aeabi_dmul>
 802ce5e:	4b37      	ldr	r3, [pc, #220]	; (802cf3c <scalbn+0x104>)
 802ce60:	429e      	cmp	r6, r3
 802ce62:	4604      	mov	r4, r0
 802ce64:	460d      	mov	r5, r1
 802ce66:	da10      	bge.n	802ce8a <scalbn+0x52>
 802ce68:	a32b      	add	r3, pc, #172	; (adr r3, 802cf18 <scalbn+0xe0>)
 802ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ce6e:	e03a      	b.n	802cee6 <scalbn+0xae>
 802ce70:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802ce74:	428a      	cmp	r2, r1
 802ce76:	d10c      	bne.n	802ce92 <scalbn+0x5a>
 802ce78:	ee10 2a10 	vmov	r2, s0
 802ce7c:	4620      	mov	r0, r4
 802ce7e:	4629      	mov	r1, r5
 802ce80:	f7d3 f9dc 	bl	800023c <__adddf3>
 802ce84:	4604      	mov	r4, r0
 802ce86:	460d      	mov	r5, r1
 802ce88:	e019      	b.n	802cebe <scalbn+0x86>
 802ce8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802ce8e:	460b      	mov	r3, r1
 802ce90:	3a36      	subs	r2, #54	; 0x36
 802ce92:	4432      	add	r2, r6
 802ce94:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802ce98:	428a      	cmp	r2, r1
 802ce9a:	dd08      	ble.n	802ceae <scalbn+0x76>
 802ce9c:	2d00      	cmp	r5, #0
 802ce9e:	a120      	add	r1, pc, #128	; (adr r1, 802cf20 <scalbn+0xe8>)
 802cea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 802cea4:	da1c      	bge.n	802cee0 <scalbn+0xa8>
 802cea6:	a120      	add	r1, pc, #128	; (adr r1, 802cf28 <scalbn+0xf0>)
 802cea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 802ceac:	e018      	b.n	802cee0 <scalbn+0xa8>
 802ceae:	2a00      	cmp	r2, #0
 802ceb0:	dd08      	ble.n	802cec4 <scalbn+0x8c>
 802ceb2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802ceb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802ceba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802cebe:	ec45 4b10 	vmov	d0, r4, r5
 802cec2:	bd70      	pop	{r4, r5, r6, pc}
 802cec4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802cec8:	da19      	bge.n	802cefe <scalbn+0xc6>
 802ceca:	f24c 3350 	movw	r3, #50000	; 0xc350
 802cece:	429e      	cmp	r6, r3
 802ced0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802ced4:	dd0a      	ble.n	802ceec <scalbn+0xb4>
 802ced6:	a112      	add	r1, pc, #72	; (adr r1, 802cf20 <scalbn+0xe8>)
 802ced8:	e9d1 0100 	ldrd	r0, r1, [r1]
 802cedc:	2b00      	cmp	r3, #0
 802cede:	d1e2      	bne.n	802cea6 <scalbn+0x6e>
 802cee0:	a30f      	add	r3, pc, #60	; (adr r3, 802cf20 <scalbn+0xe8>)
 802cee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cee6:	f7d3 fb5f 	bl	80005a8 <__aeabi_dmul>
 802ceea:	e7cb      	b.n	802ce84 <scalbn+0x4c>
 802ceec:	a10a      	add	r1, pc, #40	; (adr r1, 802cf18 <scalbn+0xe0>)
 802ceee:	e9d1 0100 	ldrd	r0, r1, [r1]
 802cef2:	2b00      	cmp	r3, #0
 802cef4:	d0b8      	beq.n	802ce68 <scalbn+0x30>
 802cef6:	a10e      	add	r1, pc, #56	; (adr r1, 802cf30 <scalbn+0xf8>)
 802cef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 802cefc:	e7b4      	b.n	802ce68 <scalbn+0x30>
 802cefe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802cf02:	3236      	adds	r2, #54	; 0x36
 802cf04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802cf08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802cf0c:	4620      	mov	r0, r4
 802cf0e:	4b0c      	ldr	r3, [pc, #48]	; (802cf40 <scalbn+0x108>)
 802cf10:	2200      	movs	r2, #0
 802cf12:	e7e8      	b.n	802cee6 <scalbn+0xae>
 802cf14:	f3af 8000 	nop.w
 802cf18:	c2f8f359 	.word	0xc2f8f359
 802cf1c:	01a56e1f 	.word	0x01a56e1f
 802cf20:	8800759c 	.word	0x8800759c
 802cf24:	7e37e43c 	.word	0x7e37e43c
 802cf28:	8800759c 	.word	0x8800759c
 802cf2c:	fe37e43c 	.word	0xfe37e43c
 802cf30:	c2f8f359 	.word	0xc2f8f359
 802cf34:	81a56e1f 	.word	0x81a56e1f
 802cf38:	43500000 	.word	0x43500000
 802cf3c:	ffff3cb0 	.word	0xffff3cb0
 802cf40:	3c900000 	.word	0x3c900000

0802cf44 <_init>:
 802cf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cf46:	bf00      	nop
 802cf48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cf4a:	bc08      	pop	{r3}
 802cf4c:	469e      	mov	lr, r3
 802cf4e:	4770      	bx	lr

0802cf50 <_fini>:
 802cf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cf52:	bf00      	nop
 802cf54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cf56:	bc08      	pop	{r3}
 802cf58:	469e      	mov	lr, r3
 802cf5a:	4770      	bx	lr

Disassembly of section .RamFunc:

0802cf5c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 802cf5c:	b480      	push	{r7}
 802cf5e:	b089      	sub	sp, #36	; 0x24
 802cf60:	af00      	add	r7, sp, #0
 802cf62:	6078      	str	r0, [r7, #4]
 802cf64:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 802cf66:	2380      	movs	r3, #128	; 0x80
 802cf68:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 802cf6a:	687b      	ldr	r3, [r7, #4]
 802cf6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 802cf6e:	683b      	ldr	r3, [r7, #0]
 802cf70:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 802cf72:	4b18      	ldr	r3, [pc, #96]	; (802cfd4 <FLASH_Program_Fast+0x78>)
 802cf74:	695b      	ldr	r3, [r3, #20]
 802cf76:	4a17      	ldr	r2, [pc, #92]	; (802cfd4 <FLASH_Program_Fast+0x78>)
 802cf78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802cf7c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802cf7e:	f3ef 8310 	mrs	r3, PRIMASK
 802cf82:	60fb      	str	r3, [r7, #12]
  return(result);
 802cf84:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 802cf86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 802cf88:	b672      	cpsid	i
}
 802cf8a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 802cf8c:	697b      	ldr	r3, [r7, #20]
 802cf8e:	681a      	ldr	r2, [r3, #0]
 802cf90:	69bb      	ldr	r3, [r7, #24]
 802cf92:	601a      	str	r2, [r3, #0]
    dest_addr++;
 802cf94:	69bb      	ldr	r3, [r7, #24]
 802cf96:	3304      	adds	r3, #4
 802cf98:	61bb      	str	r3, [r7, #24]
    src_addr++;
 802cf9a:	697b      	ldr	r3, [r7, #20]
 802cf9c:	3304      	adds	r3, #4
 802cf9e:	617b      	str	r3, [r7, #20]
    row_index--;
 802cfa0:	7ffb      	ldrb	r3, [r7, #31]
 802cfa2:	3b01      	subs	r3, #1
 802cfa4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 802cfa6:	7ffb      	ldrb	r3, [r7, #31]
 802cfa8:	2b00      	cmp	r3, #0
 802cfaa:	d1ef      	bne.n	802cf8c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 802cfac:	bf00      	nop
 802cfae:	4b09      	ldr	r3, [pc, #36]	; (802cfd4 <FLASH_Program_Fast+0x78>)
 802cfb0:	691b      	ldr	r3, [r3, #16]
 802cfb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802cfb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802cfba:	d0f8      	beq.n	802cfae <FLASH_Program_Fast+0x52>
 802cfbc:	693b      	ldr	r3, [r7, #16]
 802cfbe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802cfc0:	68bb      	ldr	r3, [r7, #8]
 802cfc2:	f383 8810 	msr	PRIMASK, r3
}
 802cfc6:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 802cfc8:	bf00      	nop
 802cfca:	3724      	adds	r7, #36	; 0x24
 802cfcc:	46bd      	mov	sp, r7
 802cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cfd2:	4770      	bx	lr
 802cfd4:	58004000 	.word	0x58004000
